<Cabbage>
form size(405, 90), caption("clip"), pluginid("Clip") style("legacy")
image        bounds(0, 0, 405, 90), colour( 20, 30, 40), shape("rounded"), outlinecolour("white"), outlinethickness(4) 
rslider  bounds( 10, 11, 70, 70), text("Input Gain"), channel("InGain"), range(1, 10, 1, 0.5,0.01), colour(0,10,20), fontcolour("silver"), trackercolour("lightblue")
rslider  bounds( 75, 11, 70, 70), text("Limit"), channel("limit"), range(0.001, 1, 1, 0.5,0.001), colour(0,10,20), fontcolour("silver"), trackercolour("lightblue")
rslider  bounds(140, 11, 70, 70), text("Argument"), channel("arg"), range(0, 1.00, 0.5), colour(0,10,20), fontcolour("silver"), trackercolour("lightblue")
checkbox bounds(128,  7,  8,  8), channel("clip_light"), text("clip"), colour("red"), fontcolour("white"), shape("ellipse"), value(0), active(0)
label    bounds(137,  6, 25, 10), text("CLIP")
combobox bounds(210, 15, 80, 20), channel("method"), value(1), text("B.D.J.","Sine","Tanh")
checkbox bounds(210, 50, 15, 15), channel("GainComp"), text("Gain Compensation"), colour("lime"), fontcolour("white")
label    bounds(225, 52,100, 10), text("GAIN COMPENSATION")
rslider  bounds(325, 11, 70, 70), text("Level"), channel("level"), range(0.00, 10.00, 0.7), colour(0,10,20), fontcolour("silver"), trackercolour("lightblue")
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-d -n
</CsOptions>

<CsInstruments>

sr 		= 	44100	; SAMPLE RATE
ksmps 	= 	32		; NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 	= 	2		; NUMBER OF CHANNELS (2=STEREO)
0dbfs	=	1

; Author: Iain McCurdy (2012)

instr	1
	kInGain	chnget	"InGain"
	kGainComp	chnget	"GainComp"
	klimit		chnget	"limit"
	kmethod	chnget	"method"
	kmethod	init	1
	karg		chnget	"arg"
	klevel		chnget	"level"
	asigL	=	inch:a(1) * kInGain
	asigR	=	inch:a(2) * kInGain

	; CLIP METER
	krmsL		=	rms:k(asigL,10) * 3
	krmsR		=	rms:k(asigR,10) * 3
	if ( trigger:k(krmsL,klimit,0)==1 || trigger:k(krmsR,klimit,0)==1 ) then
		chnset	k(1),"clip_light"
	elseif ( trigger:k(krmsL,klimit,1)==1 ||trigger:k(krmsR,klimit,1)==1 ) then
		chnset	k(0),"clip_light"
	endif

	if	changed(klimit,kmethod,karg)==1	then	; IF A VARIABLE CHANGE INDICATOR IS RECEIVED...
		reinit	UPDATE		; ...BEGIN A REINITIALISATION PASS FROM LABEL 'START' 
	endif				; END OF CONDITIONAL BRANCHING
	UPDATE:				; LABEL
	asigL		clip 		asigL, i(kmethod)-1, i(klimit), i(karg)
	asigR		clip 		asigR, i(kmethod)-1, i(klimit), i(karg)
	rireturn			; RETURN TO PERFORMANCE PASSES FROM INITIALISATION PASS
	if (kGainComp==1) then
	 asigL		=			asigL * (1/sqrt(klimit))
	 asigR		=			asigR * (1/sqrt(klimit))
	endif
			outs		asigL*klevel, asigR*klevel
endin

</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer><Cabbage>
form size(405, 90), caption("clip"), pluginid("Clip")  style("legacy") style("legacy")
image        bounds(0, 0, 405, 90), colour( 20, 30, 40), shape("rounded"), outlinecolour("white"), outlinethickness(4) 
rslider  bounds( 10, 11, 70, 70), text("Input Gain"), channel("InGain"), range(1, 10, 1, 0.5,0.01), colour(0,10,20), fontcolour("silver"), trackercolour("lightblue")
rslider  bounds( 75, 11, 70, 70), text("Limit"), channel("limit"), range(0.001, 1, 1, 0.5,0.001), colour(0,10,20), fontcolour("silver"), trackercolour("lightblue")
rslider  bounds(140, 11, 70, 70), text("Argument"), channel("arg"), range(0, 1.00, 0.5), colour(0,10,20), fontcolour("silver"), trackercolour("lightblue")
checkbox bounds(128,  7,  8,  8), channel("clip_light"), text("clip"), colour("red"), fontcolour("white"), shape("ellipse"), value(0), active(0)
label    bounds(137,  6, 25, 10), text("CLIP")
combobox bounds(210, 15, 80, 20), channel("method"), value(1), text("B.D.J.","Sine","Tanh")
checkbox bounds(210, 50, 15, 15), channel("GainComp"), text("Gain Compensation"), colour("lime"), fontcolour("white")
label    bounds(225, 52,100, 10), text("GAIN COMPENSATION")
rslider  bounds(325, 11, 70, 70), text("Level"), channel("level"), range(0.00, 10.00, 0.7), colour(0,10,20), fontcolour("silver"), trackercolour("lightblue")
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-d -n
</CsOptions>

<CsInstruments>

sr 		= 	44100	; SAMPLE RATE
ksmps 	= 	32		; NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 	= 	2		; NUMBER OF CHANNELS (2=STEREO)
0dbfs	=	1

; Author: Iain McCurdy (2012)

instr	1
	kInGain	chnget	"InGain"
	kGainComp	chnget	"GainComp"
	klimit		chnget	"limit"
	kmethod	chnget	"method"
	kmethod	init	1
	karg		chnget	"arg"
	klevel		chnget	"level"
	asigL	=	inch:a(1) * kInGain
	asigR	=	inch:a(2) * kInGain

	; CLIP METER
	krmsL		=	rms:k(asigL,10) * 3
	krmsR		=	rms:k(asigR,10) * 3
	if ( trigger:k(krmsL,klimit,0)==1 || trigger:k(krmsR,klimit,0)==1 ) then
		chnset	k(1),"clip_light"
	elseif ( trigger:k(krmsL,klimit,1)==1 ||trigger:k(krmsR,klimit,1)==1 ) then
		chnset	k(0),"clip_light"
	endif

	if	changed(klimit,kmethod,karg)==1	then	; IF A VARIABLE CHANGE INDICATOR IS RECEIVED...
		reinit	UPDATE		; ...BEGIN A REINITIALISATION PASS FROM LABEL 'START' 
	endif				; END OF CONDITIONAL BRANCHING
	UPDATE:				; LABEL
	asigL		clip 		asigL, i(kmethod)-1, i(klimit), i(karg)
	asigR		clip 		asigR, i(kmethod)-1, i(klimit), i(karg)
	rireturn			; RETURN TO PERFORMANCE PASSES FROM INITIALISATION PASS
	if (kGainComp==1) then
	 asigL		=			asigL * (1/sqrt(klimit))
	 asigR		=			asigR * (1/sqrt(klimit))
	endif
			outs		asigL*klevel, asigR*klevel
endin

</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>; LoFi.csd
; Written by Iain McCurdy, 2012.

<Cabbage>
form size(230, 120), caption("Lo Fi"), pluginid("lofi"), scrollbars(0) style("legacy")
image pos(0, 0), size(230, 120), colour(0,0,0), shape("sharp")
image   bounds( 30, 94, 30, 15), shape("rounded"), colour("black")
image   bounds( 85, 70, 60, 15), shape("rounded"), colour("black")
image   bounds(165, 94, 40, 15), shape("rounded"), colour("black")
rslider bounds(  5, 31, 80, 80), text("Bits"),     channel("bits"),  range(1, 16, 16),        textcolour("White"),    colour("orange"), trackercolour("brown"), outlinecolour("grey")
rslider bounds( 75,  7, 80, 80), text("Foldover"), channel("fold"),  range(1, 1024, 0, 0.25), textcolour("White"),    colour("orange"), trackercolour("brown"), outlinecolour("grey")
rslider bounds(145, 31, 80, 80), text("Level"),    channel("level"), range(0, 1.00, 1),       textcolour("White"),    colour("orange"), trackercolour("brown"), outlinecolour("grey")
}
</Cabbage>
<CsoundSynthesizer>
<CsOptions>
-d -n
</CsOptions>
<CsInstruments>
sr = 44100
ksmps = 32
nchnls = 2
0dbfs = 1

;Iain McCurdy, 2012
;http://iainmccurdy.org/csound.html


opcode	LoFi,a,akk
	ain,kbits,kfold	xin									;READ IN INPUT ARGUMENTS
	kvalues		pow		2, kbits					;RAISES 2 TO THE POWER OF kbitdepth. THE OUTPUT VALUE REPRESENTS THE NUMBER OF POSSIBLE VALUES AT THAT PARTICULAR BIT DEPTH
	aout		=	(int((ain/0dbfs)*kvalues))/kvalues	;BIT DEPTH REDUCE AUDIO SIGNAL
	aout		fold 	aout, kfold							;APPLY SAMPLING RATE FOLDOVER
		xout	aout									;SEND AUDIO BACK TO CALLER INSTRUMENT
endop

instr 1 
kbits chnget "bits"
kfold chnget "fold"
klevel chnget "level"
a1,a2	ins
kporttime	linseg	0,0.001,0.01
kfold	portk	kfold,kporttime
a1	LoFi	a1,kbits*0.6,kfold
a2	LoFi	a2,kbits*0.6,kfold
a1	=	a1 * klevel
a2	=	a2 * klevel
	outs	a1,a2
endin

</CsInstruments>

<CsScore>
i 1 0 [60*60*24*7]
</CsScore>

</CsoundSynthesizer>; pdclip.csd
; Written by Iain McCurdy, 2012.

<Cabbage>
form caption("pdclip") size(380, 90), pluginid("pdcl") style("legacy")
label        bounds(  5,-12,380,100), colour(20,100,100, 0), fontcolour(70,150,150,200), text("pdclip"), shape("rounded"), outlinecolour("white"), outlinethickness(4) 
image        bounds(  0,  0,380, 90), colour(10,100,200,200), shape("rounded"), outlinecolour("white"), outlinethickness(4) 
rslider      bounds( 10, 11, 70, 70), text("Input Gain"),  channel("InGain"),  range(0, 5.00, 1,0.375),     textcolour("white"), colour(5, 30,80), trackercolour(255,255,25), outlinecolour(30,30,50)
rslider      bounds( 75, 11, 70, 70), text("Width"),  channel("width"),  range(0, 1.00, 0),     textcolour("white"), colour(5, 30,80), trackercolour(255,255,25), outlinecolour(30,30,50)
rslider      bounds(140, 11, 70, 70), text("Centre"), channel("center"), range(-1.00, 1.00, 0), textcolour("white"), colour(5, 30,80), trackercolour(255,255,25), outlinecolour(30,30,50)
rslider      bounds(300, 11, 70, 70), text("Level"),  channel("level"),  range(0, 1.00, 0.7),   textcolour("white"), colour(5, 30,80), trackercolour(255,255,25), outlinecolour(30,30,50)
combobox     bounds(215, 20, 80, 20), channel("bipolar"), value(2), text("Unipolar", "Bipolar")
checkbox     bounds(215, 48,130, 12), channel("TestTone"), FontColour("white"),  value(0), text("Sine Tone"), colour(yellow)
}
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-d -n
</CsOptions>

<CsInstruments>

sr 		= 	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1

;Author: Iain McCurdy (2012)

gisine	ftgen	0,0,4096,10,1

instr	1
	kporttime	linseg	0,0.001,0.05				; portamento time ramps up from zero
	gkInGain	chnget	"InGain"			;READ WIDGETS...
	gkInGain	portk	gkInGain,kporttime
	gkwidth		chnget	"width"
	gkwidth		portk	gkwidth,kporttime
	gkcenter	chnget	"center"			;
	gkcenter	portk	gkcenter,kporttime
	gkbipolar	chnget	"bipolar"			;
	gkbipolar	init	1
	gkbipolar	=	gkbipolar-1
	gklevel		chnget	"level"				;
	gklevel		portk	gklevel,kporttime
	gkTestTone	chnget	"TestTone"
	if gkTestTone==1 then						; if test tone selected...
	 koct	rspline	4,8,0.2,0.5						
	 asigL		poscil	1,cpsoct(koct),gisine			; ...generate a tone
	 asigR		=	asigL					; right channel equal to left channel
	else								; otherwise...
	 asigL, asigR	ins						; read live inputs
	endif

	ifullscale	=	0dbfs	;DEFINE FULLSCALE AMPLITUDE VALUE
	kSwitch		changed		gkbipolar	;GENERATE A MOMENTARY '1' PULSE IN OUTPUT 'kSwitch' IF ANY OF THE SCANNED INPUT VARIABLES CHANGE. (OUTPUT 'kSwitch' IS NORMALLY ZERO)
	if	kSwitch=1	then	;IF A VARIABLE CHANGE INDICATOR IS RECEIVED...
		reinit	START		;...BEGIN A REINITIALISATION PASS FROM LABEL 'START' 
	endif				;END OF CONDITIONAL BRANCHING
	START:				;LABEL
	;CLIP THE AUDIO SIGNAL USING pdclip
	aL		pdclip		asigL*gkInGain, gkwidth, gkcenter, i(gkbipolar)	; [, ifullscale]]
	aR		pdclip		asigR*gkInGain, gkwidth, gkcenter, i(gkbipolar)	; [, ifullscale]]
	rireturn			;RETURN TO PERFORMANCE PASSES FROM INITIALISATION PASS
	alevel		interp		gklevel
			outs		aL * alevel, aR * alevel		;pdclip OUTPUT ARE SENT TO THE SPEAKERS
endin
		
</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>


</CsoundSynthesizer>



























; Powershape.csd
; Iain McCurdy 2012
;
; Encapsulation of the powershape opcode used for wave distortion
;
; CONTROLS
; --------
; Test Tone	--	a glissandoing test tone
; Amount	--	amount of distortion
; Level		--	output level

<Cabbage>
form caption("Powershape") size(300,160), pluginid("pshp") style("legacy")
image               bounds(0, 0,300,160), colour("Brown"), shape("rounded"), outlinecolour("white"), outlinethickness(4) 
checkbox bounds(10,  8,130, 12), channel("TestTone"), FontColour("white"),  value(0), text("Sine Tone"), colour(yellow)
hslider bounds(  5, 18,290, 40),          colour("white"), trackercolour("white"), channel("amount"), range(0.1, 1000, 1, 0.25,0.001)
label   bounds(129, 50, 40, 11), text("Amount"), fontcolour("white")
nslider  bounds(100, 65,100, 40), text("Amount [type]"),  channel("amount"),  range(0.1, 1000, 1,1,0.001), textcolour(white)
hslider bounds(  5,108,290, 40),          colour("white"), trackercolour("white"),  channel("level"),  range(0, 50, 0.5, 0.25,0.000001)    
label   bounds(135,140, 27, 11), text("Level"), fontcolour("white")
}
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-d -n
</CsOptions>

<CsInstruments>

sr 		= 	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1

gisine	ftgen	0,0,4096,10,1 ;,0,1/2,0,1/4,0,1/8,0,1/16,0,1/32,0,1/64

instr	1
	kporttime	linseg	0,0.001,0.05				; portamento time ramps up from zero
	gkshape		chnget	"amount"				; READ WIDGETS...
	gkshape		portk	gkshape,kporttime
	gklevel		chnget	"level"					;
	gklevel		portk	gklevel,kporttime
	gklevel		portk	gklevel,kporttime
	gkTestTone	chnget	"TestTone"
	if gkTestTone==1 then						; if test tone selected...
	 koct	rspline	4,8,0.2,0.5						
	 asigL		poscil	1,cpsoct(koct),gisine			; ...generate a tone
	 asigR		=	asigL					; right channel equal to left channel
	else								; otherwise...
	 asigL, asigR	ins						; read live inputs
	endif
	ifullscale	=	0dbfs	;DEFINE FULLSCALE AMPLITUDE VALUE
	aL 		powershape 	asigL, gkshape, ifullscale	;CREATE POWERSHAPED SIGNAL
	aR 		powershape 	asigR, gkshape, ifullscale	;CREATE POWERSHAPED SIGNAL
	alevel		interp		gklevel
			outs		aL * alevel, aR * alevel		;WAVESET OUTPUT ARE SENT TO THE SPEAKERS
endin
		
</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>


</CsoundSynthesizer>



























; Compressor.csd
; Written by Iain McCurdy, 2016.

; Encapsulation of the compressor opcode

; A compressor is a dynamics processor that essentially applies waveshaping to an audio signal.
; In the case of a typical compressor, increasingly high dynamics will be increasingly attenuated thereby reducing the dynamic range of a signal.
; This can be useful in forcing a dynamically expressive signal to sit better within a mix of signals or for processing a final mix so that it functions better when listened to in an environment with background noise. 

; When reference is made to a soft knee, this is the part of the dynamic mapping function that separates the lower response region and the upper response region. 
; Below the 'knee' the dynamic tranformation is 1:1, i.e. no change. 

; Threshold	-	Lowest decibel level that will be allowed through. Can be used to remove low level noise from a signal. A setting of zero will defeat this feature.  
; Low Knee	-	Decibel point at which the 'soft knee' 
; High Knee	-	Decibel point at which the 'soft knee' terminates
; Attack	-	Attack time of the compressor
; Release	-	Release time of the compressor
; Ratio		-	Compression ratio of the upper compressor response region
; Lookahead	-	Essentially this is a delay that will be applied to the signal that will be compressed (the track signal will always be un-delayed).
;			This can be useful for making sure that the compressor responds appropriately to fast attacks (at the expense of some added latency by the delay).
;			This is an initialisation time parameter so making changes to it will interrupt the realtime audio stream
; Gain		-	A make-up gain control. Use this to compensate for loss of power caused by certain ocmpressor settings.

<Cabbage>
#define SLIDER_APPEARANCE trackercolour("DarkSlateGrey"), textcolour("black") 
form caption("Compressor") size(440,130), pluginid("Comp") style("legacy")
image            bounds(  0,  0,440,130), outlinethickness(6), outlinecolour("white"), colour("grey")
rslider bounds( 10, 10, 70, 70), channel("thresh"), text("Threshold"), range(0,120,0), $SLIDER_APPEARANCE
rslider bounds( 80, 10, 70, 70), channel("att"), text("Attack"),  range(0,1,0.01,0.5), $SLIDER_APPEARANCE
rslider bounds(150, 10, 70, 70), channel("rel"), text("Release"), range(0,1,0.05,0.5), $SLIDER_APPEARANCE
rslider bounds(220, 10, 70, 70), channel("ratio"), text("Ratio"), range(1,300,10000,0.5), $SLIDER_APPEARANCE
rslider bounds(290, 10, 70, 70), channel("look"), text("Lookahead"), range(0,1,0.01,0.5), $SLIDER_APPEARANCE
rslider bounds(360, 10, 70, 70), channel("gain"), text("Gain"), range(-36,36,0), $SLIDER_APPEARANCE
hrange   bounds( 10, 80,420, 30), channel("LowKnee","HighKnee"), range(0, 120, 48:60), $SLIDER_APPEARANCE
label    bounds( 10,108,420, 13), text("Soft Knee"), fontcolour("black")
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-d -n
</CsOptions>

<CsInstruments>

sr = 44100
ksmps = 32
nchnls = 2
0dbfs = 1

; Author: Iain McCurdy (2016)

instr 1
 aL,aR		ins									; read in live audio
 kthresh	chnget		"thresh"						; read in widgets
 kLowKnee	chnget		"LowKnee"
 kHighKnee	chnget		"HighKnee"
 katt		chnget		"att"
 krel		chnget		"rel"
 kratio 	chnget		"ratio"
 kgain	 	chnget		"gain"
 klook 		chnget		"look"  						; look-ahead time (this will have to be cast as an i-time variable)
 klook		init		0.01							
 if changed(klook)==1 then								; if slider is moved...
  reinit REINIT										; ... reinit
 endif
 REINIT:
 aC_L 	compress aL, aL, kthresh, kLowKnee, kHighKnee, kratio, katt, krel, i(klook)	; compress both channels
 aC_R 	compress aR, aR, kthresh, kLowKnee, kHighKnee, kratio, katt, krel, i(klook)
 aC_L	*=	ampdb(kgain)								; apply make up gain
 aC_R	*=	ampdb(kgain)
	outs	aC_L,aC_R
endin

</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]									; play instr 1 for 1 week
</CsScore>

</CsoundSynthesizer>; Compressor/Expander.csd
; Written by Iain McCurdy, 2015.

; A dynamics processor
; Read point on the transfer function is indicated by a moving dot.

; Threshold	-	threshold point at which the main dynamics processing curve begins
; Compress	-	degree of dynamic compression of the dynamic area beneath the threshold
; Curve		-	curve of the main dynamics processing segment
; Ceiling	-	dynamic ceiling. Shifts main dynamic curve to the left in the transfer function.
; Attack	-	Attack time of the dynamic tracker. Increase to smooth out dynamic changes carried out.
; Release	-	Release time of the dynamic tracker. Increase to smooth out dynamic changes carried out.
; Smoothing	-	A lowpass filter is applied to the output gain function. increasing 'Smoothing' will smooth changes in dynamics.
;			This is in addition to the attack and release parameters used in the follow2 opcode but may produce nicer smoothing.
; Pre-gain	-	Boost the input signal before dynamic tracking takes place. 
;			This does not affect the output level but merely forces reading further across the transfer function - this is confirmed by observing the dot on the graph. 
; Sensitivity	-	Adjusts the range of dynamic change the effect will apply (without having to adjust the transfer function.  
; Mix		-	Dry/wet mix. This should normally be set at maximum '1' but switching back to '0' (dry) may be informative in auditioning changes.  
; Level		-	Output level

<Cabbage>
form caption("Compressor/Expander") size(890, 100), pluginid("CoEx") style("legacy")
image                       bounds(0, 0, 890, 100), colour("tan"), shape("rounded"), outlinecolour("white"), outlinethickness(6)
rslider  bounds( 10, 13, 75, 75), text("Threshold"), channel("thresh"), range(0,1,0.143,0.5,0.001),     textcolour("black"), colour(37,59,59), trackercolour("Silver")
rslider  bounds( 80, 13, 75, 75), text("Compress"),  channel("comp"),   range(0,1,0.25),               textcolour("black"), colour(37,59,59), trackercolour("Silver")
rslider  bounds(150, 13, 75, 75), text("Curve"),     channel("curve"),  range(-20,20,2.6),             textcolour("black"), colour(37,59,59), trackercolour("Silver")
rslider  bounds(220, 13, 75, 75), text("Ceiling"),   channel("ceil"),   range(0,1,0),                 textcolour("black"), colour(37,59,59), trackercolour("Silver")
gentable bounds(300, 10, 80, 80), tablenumber(1), tablecolour("black"), identchannel("table"), amprange(0,1,-1), zoom(-1), tablegridcolour(white), tablebackgroundcolour(white), outlinethickness(1)
image    bounds(0, 0, 6, 6), colour("black"), shape("ellipse"), outlinethickness(0), identchannel("Dot")
rslider  bounds(385, 13, 75, 75), text("Attack"),    channel("att"),    range(0.01,1,0.3,0.5,0.01),   textcolour("black"), colour(37,59,59), trackercolour("Silver")
rslider  bounds(455, 13, 75, 75), text("Release"),   channel("rel"),    range(0.01,1,0.3,0.5,0.01),   textcolour("black"), colour(37,59,59), trackercolour("Silver")
rslider  bounds(525, 13, 75, 75), text("Smoothing"), channel("smooth"), range(0.01,1,0.1,0.5,0.001),  textcolour("black"), colour(37,59,59), trackercolour("Silver")
rslider  bounds(595, 13, 75, 75), text("Pre-gain"),  channel("PreGain"),range(0.5,10,2.4,0.5,0.001),  textcolour("black"), colour(37,59,59), trackercolour("Silver")
rslider  bounds(665, 13, 75, 75), text("Sensitivity"),channel("sense"), range(1,10,3),               textcolour("black"), colour(37,59,59), trackercolour("Silver")
rslider  bounds(735, 13, 75, 75), text("Mix"),       channel("mix"),    range(0,1,1),                 textcolour("black"), colour(37,59,59), trackercolour("Silver")
rslider  bounds(805, 13, 75, 75), text("Level"),     channel("lev"),    range(0,5,0.5,0.5,0.001),     textcolour("black"), colour(37,59,59), trackercolour("Silver")

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-d -n
</CsOptions>

<CsInstruments>
sr = 44100
ksmps = 32
nchnls = 2
0dbfs = 1


instr 1
 kthresh	chnget "thresh"
 kcomp		chnget "comp"
 kcurve	 	chnget "curve"
 kceil	 	chnget "ceil"
 katt	 	chnget "att"
 krel	 	chnget "rel"
 ksmooth 	chnget "smooth"
 kPreGain 	chnget "PreGain"
 ksense 	chnget "sense" 
 kmix	 	chnget "mix"
 klev	 	chnget "lev"
 
 kpeg	metro	2				; maximum rate at which table will be rebuilt upon receipt of changes to Threshold, Compress, Curve or Ceiling
 if kpeg==1 then
  if changed(kthresh,kcomp,kcurve,kceil)==1 then
   reinit REBUILD_TABLE
  endif
 endif
 REBUILD_TABLE:
 icurve		=	i(kcurve)
 ithresh	=	i(kthresh)
 iTabLen	=	4096
 ithreshi	=	int(iTabLen*ithresh)	; threshold as a table point x value
 irem		=	iTabLen-ithreshi	; remainder table points
 iceil		=	i(kceil)
 irem1		=	int(irem*(1-iceil))
 irem2		=	irem-irem1
 icomp		=	i(kcomp)
 giTransferFunc	ftgen 1, 0, iTabLen, 16, 0, ithreshi, 0, ithresh*icomp, irem1, icurve, 1, irem2, 0, 1
 chnset	"tablenumber(1)","table"
 
 aL,aR	ins
 ;aL,aR	diskin2	"ClassicalGuitar.wav",1,0,1
 
 aFollow	follow2		(aL+aR)*kPreGain,katt,krel
 ;aFollow	pow	aFollow,0.5
 kRMS		downsamp	aFollow

 /* apply transfer function */
 aMap	table	aFollow,giTransferFunc,1		; read transfer function value
 aDiff	=	1+(aMap-aFollow)			; divergence from flat dynamic response 
 aDiff	pow	aDiff,ksense				; raising to a power greater than 1 increases range of change: greater attenuation, greater amplification
 aDiff	tone	aDiff,1/ksmooth				; smoothing. This is in addition to the attack and release parameters used in the follow2 opcode but may produce nicer smoothing. Reduce this value for greater smoothing, increase it for less.
 aDynL	=	aL * aDiff				; apply dynamic change
 aDynR	=	aR * aDiff
 aMixL	ntrpol	aL,aDynL,kmix				; dry / wet mix
 aMixR	ntrpol	aR,aDynR,kmix
 	outs	aMixL*klev, aMixR*klev			; send audio to outputs

 /* DISPLAY */
 if metro(ksmps*0.5)==1 then
  kx	limit	kRMS,0,1				; limit x position
  ky	table	kx,giTransferFunc,1			; derice y position (0 to 1)
  Smsg	sprintfk	"pos(%d,%d)", 297+int(kx*80),7+(80-int(ky*80))	; create message string
  	chnset	Smsg,"Dot"				; send message string to gentable widget
 endif

endin

</CsInstruments>

<CsScore>                                              
i 1 0 [60*60*24*7]
</CsScore>

</CsoundSynthesizer>                                                  ; Exciter.csd
; Written by Iain McCurdy, 2015.
                
; An exciter is a device that uses harmonic distortion to add a high frequency shimmer to a signal. It is a common tool in mastering.
; Csound includes an opcode called 'exciter' which is an implementation of the 'Calf' exciter plugin. 
; 'Frequency' and 'Ceiling' define the frequency range across which harmonics will be created.      
; We also have control over the amount of harmonics created and the blend between the 2nd and 3rd order harmonics. 
; The effect of these parameters is subtle and the user might find it useful to at first set 'Dry/Wet Mix' to maximum (100% wet) in order to hear the effect more clearly.
             
<Cabbage>
form caption("Exciter") size(445, 100), pluginid("Ectr") style("legacy")
image           bounds(0, 0, 445, 100), colour("LightSlateGrey"), shape("rounded"), outlinecolour("white"), outlinethickness(6)
rslider  bounds( 10, 13, 75, 75), text("Frequency"), channel("freq"), range(20,20000,3000,0.5),  textcolour("white"), colour(37,59,59), trackercolour("Silver")
rslider  bounds( 80, 13, 75, 75), text("Ceiling"), channel("ceil"), range(20,20000,20000,0.5), textcolour("white"), colour(37,59,59), trackercolour("Silver")
rslider  bounds(150, 13, 75, 75), text("Harmonics"), channel("harms"), range(0.1,10.00,10),     textcolour("white"), colour(37,59,59), trackercolour("Silver")
rslider  bounds(220, 13, 75, 75), text("Blend"), channel("blend"), range(-10,10,10,0.5,0.0001),     textcolour("white"), colour(37,59,59), trackercolour("Silver")
rslider  bounds(290, 13, 75, 75), text("Mix"), channel("mix"), range(0, 1.00, 0.5),      textcolour("white"), colour(37,59,59), trackercolour("Silver")
rslider  bounds(360, 13, 75, 75), text("Level"), channel("level"), range(0, 1.00, 0.5),      textcolour("white"), colour(37,59,59), trackercolour("Silver")
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-d -n
</CsOptions>

<CsInstruments>
sr = 44100
ksmps = 32
nchnls = 2
0dbfs = 1



instr 1
 kporttime	linseg	0,0.001,0.05  			; ramping up value used for portamento time                                                   
 kfreq	chnget "freq"					; read in widgets
 kceil	chnget "ceil"
 kharms chnget "harms"
 kblend	chnget "blend"
 klevel chnget "level"
 kmix  	chnget "mix"
 kmix	portk	kmix,kporttime
 klevel	portk	klevel,kporttime
 
 a1,a2	ins
; a1,a2	diskin2	"ClassicalGuitar.wav",1,0,1		; test with a sound file
 
 aE1	exciter a1, kfreq, kceil, kharms, kblend
 aE2	exciter a1, kfreq, kceil, kharms, kblend

 a1	ntrpol	a1, aE1, kmix				; dry/wet mix
 a2	ntrpol	a2, aE2, kmix
 	outs	a1*klevel, a2*klevel			; send to outputs and apply amplitude level control
endin

</CsInstruments>

<CsScore>                                              
i 1 0 [60*60*24*7]					; play note for a week
</CsScore>

</CsoundSynthesizer>                                                  ; Gate.csd
; Written by Iain McCurdy, 2015.

; Two 'Processing Configutions' are available:
;  'Stereo Mixed' 		-	the two input channels are mixed before being sent to a single envelope follower. 
;					Subsequent processing (gating filtering) is still carried out on the stereo input, just the gate open/closed control data will be the same on both channels
;  'Stereo Separate' 		-	the two input channels are sent to independent envelope followers. 
;					Therefore gate open/closed control data for the two channels can differ.  
; Right Channel Sidechain	-	In this mode, the gate is triggered by the signal received in the right channel but the gated signal is the left channel 

; Input signal is sent to an envelope follower and a gate state (open/closed) is assessed according to user defined thresholds.
; Independent thresholds and time durations can be defined for gate opening and closing.

; Pre-filter filters the input signal through a highpass filter and lowpass filter in series. 
; (Note this is only the signal sent into the envelope follower and the signal sent to the actual gate and the then the output is unfiltered.)
; This feature can be used to fine tune gate opening for particular frequency bands. 
; E.G. Opening for a voice singing but not for low frequency rumble picked up through the microphone stand. 

; The 'Filter Gate' can gate the signal using a lowpass filter (either 12 dB/oct or 24 dB/oct). 
; The user sets the 'Min.' (gate closed) and 'Max.' (gate open) cutoff values for the filter (in oct format)

; 'Atten.' sets the amount of amplitude attenuation to be applied.
; 'Delay' delays the audio (after envelope following but before gating is applied)
;	This can be used to recover the attack of a sound, particularly if the attack time of the gate is long.
;	If delay time is zero then the delay is completely bypassed.  
                                                                       
<Cabbage>                                                                                                                   
form caption("Gate"), colour( 20, 20, 30), size(430, 305), pluginid("Gate"), scrollbars(0) style("legacy")

image     bounds(  5, 10,420, 40), shape("sharp"), outlinecolour("white"), colour(0,0,0,0), outlinethickness(1), plant("Input") {
label     bounds( 20, 10,180, 14), fontcolour("white"), text("Processing Configuration:"), colour(0,0,0,0), align("right")
combobox  bounds(202, 10,180, 16), channel("InputMode"), text("Stereo Mixed","Stereo Separate","Right Channel Side Chain"), value(1), colour( 70, 70, 70), fontcolour("white")
}

image     bounds(  5, 55,207, 90), shape("sharp"), outlinecolour("white"), colour(0,0,0,0), outlinethickness(1), plant("OnThresh") {
label     bounds(  0,  5,207, 12), fontcolour("white"), text("On Threshold"), colour(0,0,0,0)
rslider   bounds( 10, 20, 60, 60), range(0,0.1,0.01,0.5,0.0001),  channel("OnThresh"), text("Level"), textcolour("white")
nslider bounds( 65, 35, 45, 15), channel("OnThresh_dB"), range(-90,120,-90,1,0.1)
label     bounds(110, 37, 20, 12), fontcolour("white"), text("dB"), colour(0,0,0,0)
rslider   bounds(135, 20, 60, 60), range(0,0.3,0.04,0.5,0.0001),  channel("AttTime"), text("Time"), textcolour("white")
}

image     bounds(218, 55,207, 90), shape("sharp"), outlinecolour("white"), colour(0,0,0,0), outlinethickness(1), plant("OffThresh") {
label     bounds(  0,  5,207, 12), fontcolour("white"), text("Off Threshold"), colour(0,0,0,0)
rslider   bounds( 10, 20, 60, 60), range(0,0.1,0.007,0.5,0.0001),  channel("OffThresh"), text("Level"), textcolour("white")
nslider bounds( 65, 35, 45, 15), channel("OffThresh_dB"), range(-90,120,-90,1,0.1)
label     bounds(110, 37, 20, 12), fontcolour("white"), text("dB"), colour(0,0,0,0)
rslider   bounds(135, 20, 60, 60), range(0,0.3,0.03,0.5,0.0001),  channel("RelTime"), text("Time"), textcolour("white")
}

image    bounds(  5,150,420, 50), shape("sharp"), outlinecolour("white"), colour(0,0,0,0), outlinethickness(1), plant("PreFilter") {
checkbox bounds( 10, 15, 70, 12), channel("PreFiltOnOff"), text("Pre-Filter"), fontcolour("white")
;hslider2 bounds( 85,  0,330, 40), channel("HPF","LPF"), min(200), max(12000), range(20,20000, 0, 0.5, 1), identchannel("Filter")
hrange   bounds(  85,  5,330, 20), channel("HPF","LPF"), range(20, 20000, 200:12000, 0.5, 1), identchannel("Filter")
label    bounds( 85, 30,330, 12), text("Highpass / Lowpass"), fontcolour("white"), identchannel("FilterL")
}

image    bounds(  5,205,210, 95), shape("sharp"), outlinecolour("white"), colour(0,0,0,0), outlinethickness(1), plant("FilterGate") {
label    bounds(  5, 22, 80, 12), text("Filter Gate"), fontcolour("white")
combobox bounds(  5, 35, 80, 20), channel("FilterGate"), text("Bypass","12 dB/Oct","24 dB/Oct"), value(1)
rslider  bounds( 75,  5, 80, 80), range(2,14,2,0.5,0.01),  channel("FiltGateMin"), text("Min"), textcolour("white"), textbox(1)
rslider  bounds(135,  5, 80, 80), range(2,14,14,0.5,0.01),  channel("FiltGateMax"), text("Max"), textcolour("white"), textbox(1)
}

image    bounds(220,205,205, 95), shape("sharp"), outlinecolour("white"), colour(0,0,0,0), outlinethickness(1), plant("Master") {
checkbox bounds( 14, 30, 15, 13), channel("GateIndicOp"), shape("ellipse"), colour( 50,255, 50), active(0)
checkbox bounds( 14, 50, 15, 13), channel("GateIndicCl"), shape("ellipse"), colour(255, 50, 50), value(1), active(0)
rslider  bounds( 20,  5, 80, 80), range(0,90,90,0.5,0.1),  channel("Atten"), text("Atten."), textcolour("white"), textbox(1)
rslider  bounds( 75,  5, 80, 80), range(0,0.1,0,0.8,0.001),  channel("DelTim"), text("Delay"), textcolour("white"), textbox(1)
rslider  bounds(130,  5, 80, 80), range(0,2,1,0.5,0.01),  channel("Gain"), text("Gain"), textcolour("white"), textbox(1)
}

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n
</CsOptions>

<CsInstruments>

sr	=	44100
ksmps	=	32
nchnls	=	2
0dbfs	=	1

;Author: Iain McCurdy (2015)

opcode	SwitchPort, k, kkk
	kin,kupport,kdnport	xin
	kold			init	0
	kporttime		=	(kin<kold?kdnport:kupport)
	kout			portk	kin, kporttime
	kold			=	kout
				xout	kout
endop

instr	1
 /* READ IN WIDGETS */
 kOnThresh	chnget	"OnThresh"
 kOffThresh	chnget	"OffThresh"
 kAttTime	chnget	"AttTime"
 kRelTime	chnget	"RelTime"
 kAtten		chnget	"Atten"
 kGain		chnget	"Gain"
 kFilterGate	chnget	"FilterGate"
 kFiltGateMin	chnget	"FiltGateMin"
 kFiltGateMax	chnget	"FiltGateMax"
 kInputMode	chnget	"InputMode"
 kHPF		chnget	"HPF"
 kLPF		chnget	"LPF"
 kPreFiltOnOff		chnget	"PreFiltOnOff"
 kDelTim	chnget	"DelTim"
 
 kporttime	linseg	0,0.001,0.05		;
 kGain		portk	kGain,kporttime

 /* INPUT */
 ;aL,aR	diskin2	"029_HPF.wav",1,0,1	; use diskin for testing
 aL,aR	ins
 
 /* SHOW OR HIDE PRE-FILTER SLIDERS */
 if changed(kPreFiltOnOff)==1 then
  if kPreFiltOnOff==1 then
   	chnset	"visible(1)","Filter"
   	chnset	"visible(1)","FilterL"
  else
   	chnset	"visible(0)","Filter"  
   	chnset	"visible(0)","FilterL"  
  endif
 endif
 


 /* STEREO MIX MODE */
 if kInputMode==1 then
 
  aInSig	sum	aL,aR		; mix left and right inputs

  if kPreFiltOnOff==1 then		; if pre-filter switch is on...
   aInSig	buthp	aInSig,kHPF	; highpass filter
   aInSig	buthp	aInSig,kHPF	; and again to steepen slope
   aInSig	butlp	aInSig,kLPF	; lowpass filter
   aInSig	butlp	aInSig,kLPF	; and again to steepen slope
  endif


  kRMS	rms	aInSig			; scan rms of input signal

  /* OPEN AND CLOSE GATE*/
  kGate	init	1
  if kRMS < kOffThresh && kGate ==1 then
   kGate	=	0
  elseif kRMS >= kOnThresh && kGate == 0 then
   kGate	=	1
  endif
  
  /* TURN GATE STATUS INDICATORS ON AND OFF */
  if changed(kGate)==1 then
  	chnset	1-kGate,"GateIndicCl"
  	chnset	kGate,"GateIndicOp"
  endif
   
  /* SMOOTH GATE OPENING AND CLOSING (CALL UDO) */
  kGateD SwitchPort kGate, kAttTime, kRelTime	; smooth opening and closing
  
  /* AMPLITUDE GATE */
  kGateDA	scale	kGateD,1,ampdb(-kAtten)	; modify gating function according to user defined attenuation setting
  aGate	interp	kGateDA				; create an arate version (smoother)
    
  /* DELAY */
  if kDelTim>0 then
   aL	vdelay	aL, kDelTim*1000, 100
   aR	vdelay	aR, kDelTim*1000, 100
  endif
   
  /* APPLY GATE */
  aL	*=	aGate
  aR	*=	aGate
  
  /* FILTER GATE */
  if kFilterGate>1 then				
   kcfoct	scale	kGateD,kFiltGateMax,kFiltGateMin
   acf	interp	cpsoct(kcfoct)
   if kFilterGate==2 then
    aL	tone	aL,acf
    aR	tone	aR,acf
   else
    aL	butlp	aL,acf
    aR	butlp	aR,acf
   endif
  endif
    
    
    
    
    
 /* STEREO SEPARATE MODE */
 elseif kInputMode==2 then
 
 aInSigL	=	aL
 aInSigR	=	aR

  if kPreFiltOnOff==1 then
   aInSigL	buthp	aInSigL,kHPF
   aInSigL	buthp	aInSigL,kHPF
   aInSigL	butlp	aInSigL,kLPF
   aInSigL	butlp	aInSigL,kLPF
   aInSigR	buthp	aInSigR,kHPF
   aInSigR	buthp	aInSigR,kHPF
   aInSigR	butlp	aInSigR,kLPF
   aInSigR	butlp	aInSigR,kLPF
  endif


  kRMSL	rms	aInSigL*2
  kRMSR	rms	aInSigR*2

  kGateL,kGateR	init	1

  if kRMSL < kOffThresh && kGateL ==1 then
   kGateL	=	0
  elseif kRMSL >= kOnThresh && kGateL == 0 then
   kGateL	=	1
  endif

  if kRMSR < kOffThresh && kGateR ==1 then
   kGateR	=	0
  elseif kRMSR >= kOnThresh && kGateR == 0 then
   kGateR	=	1
  endif
  
  if changed(kGateL)==1 then
  	chnset	1-kGateL,"GateIndicCl"
  	chnset	kGateL,"GateIndicOp"
  endif
   
  kGateDL SwitchPort kGateL, kAttTime, kRelTime	; smooth opening and closing
  kGateDR SwitchPort kGateR, kAttTime, kRelTime	; smooth opening and closing
  
  kGateDAL	scale	kGateDL,1,ampdb(-kAtten)
  kGateDAR	scale	kGateDR,1,ampdb(-kAtten)
  
  aGateL	interp	kGateDAL
  aGateR	interp	kGateDAR
   
  /* DELAY */
  if kDelTim>0 then
   aL	vdelay	aL, kDelTim*1000, 100
   aR	vdelay	aR, kDelTim*1000, 100
  endif
   
  /* APPLY GATE */
  aL	*=	aGateL
  aR	*=	aGateR
  
  if kFilterGate>1 then
   kcfoctL	scale	kGateDL,kFiltGateMax,kFiltGateMin
   kcfoctR	scale	kGateDR,kFiltGateMax,kFiltGateMin
   acfL	interp	cpsoct(kcfoctL)
   acfR	interp	cpsoct(kcfoctR)
   if kFilterGate==2 then
    aL	tone	aL,acfL
    aR	tone	aR,acfR
   else
    aL	butlp	aL,acfL
    aR	butlp	aR,acfR
   endif
  endif



 ; Right Channel Side Chain
 else
 
  if kPreFiltOnOff==1 then		; if pre-filter switch is on...
   aR	buthp	aR,kHPF	; highpass filter
   aR	buthp	aR,kHPF	; and again to steepen slope
   aR	butlp	aR,kLPF	; lowpass filter
   aR	butlp	aR,kLPF	; and again to steepen slope
  endif


  kRMS	rms	aR			; scan rms of input signal

  /* OPEN AND CLOSE GATE*/
  kGate	init	1
  if kRMS < kOffThresh && kGate ==1 then
   kGate	=	0
  elseif kRMS >= kOnThresh && kGate == 0 then
   kGate	=	1
  endif
  
  /* TURN GATE STATUS INDICATORS ON AND OFF */
  if changed(kGate)==1 then
  	chnset	1-kGate,"GateIndicCl"
  	chnset	kGate,"GateIndicOp"
  endif
   
  /* SMOOTH GATE OPENING AND CLOSING (CALL UDO) */
  kGateD SwitchPort kGate, kAttTime, kRelTime	; smooth opening and closing
  
  /* AMPLITUDE GATE */
  kGateDA	scale	kGateD,1,ampdb(-kAtten)	; modify gating function according to user defined attenuation setting
  aGate	interp	kGateDA				; create an arate version (smoother)
    
  /* DELAY */
  if kDelTim>0 then
   aL	vdelay	aL, kDelTim*1000, 100
  endif
   
  /* APPLY GATE */
  aL	*=	aGate
  
  /* FILTER GATE */
  if kFilterGate>1 then				
   kcfoct	scale	kGateD,kFiltGateMax,kFiltGateMin
   acf	interp	cpsoct(kcfoct)
   if kFilterGate==2 then
    aL	tone	aL,acf
   else
    aL	butlp	aL,acf
   endif
  endif
  aR	=	aL

 endif
 	outs	aL*kGain, aR*kGain

endin

</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>
; Limiter.csd
; Written by Iain McCurdy, 2016.

; A simple 'brick-wall' limiter

; Threshold	-	dB threshold below above which signals will be aggressively limited
; Smoothing	-	response of the amplitude follower. Higher values result in a slower, but possibly smoother, response
; Delay		-	delay applied to the input sound before it is limited (the tracked signal is always undelayed)
;			This can be useful for compensating for a limiter than is not responding fast enough to sudden dynamic transients 
; Gain		-	Make up gain. Useful for compensating for gain loss.
   
<Cabbage>
#define SLIDER_APPEARANCE textcolour("black"), trackercolour("LightSlateGrey")
form caption("Limiter") size(435,105), pluginid("lmtr") style("legacy")
image         bounds(  0,  0,435,105), outlinethickness(6), outlinecolour("white"), colour("silver")
rslider  bounds( 10,15, 80, 80), channel("thresh"), text("Threshold [dB]"), range(-120,0,-24), $SLIDER_APPEARANCE
rslider  bounds( 90,15, 80, 80), channel("smooth"), text("Smoothing"), range(0.01,1,0.1,0.5), $SLIDER_APPEARANCE
rslider  bounds(170,15, 80, 80), channel("delay"), text("Delay [s]"), range(0,0.2,0,0.5), $SLIDER_APPEARANCE
rslider  bounds(250,15, 80, 80), channel("gain"), text("Gain [dB]"), range(-48,48,0), $SLIDER_APPEARANCE
checkbox bounds(335,35,100, 20), channel("limiting"), text("Limiting"), shape("ellipse"), colour("red"), fontcolour("black"), active(0)
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-d -n
</CsOptions>

<CsInstruments>

sr = 44100
ksmps = 32
nchnls = 2
0dbfs = 1

; Author: Iain McCurdy (2016)

instr 1
 aL,aR		ins							; read live audio in
 kthresh	chnget		"thresh" 		; read in widgets
 ksmooth	chnget		"smooth" 		; this is needed as an i-time variable so will have to be cast as an i variable and a reinitialisation forced
 kthresh	=		ampdbfs(kthresh)	; convert threshold to an amplitude value
 if changed(ksmooth)==1 then			; if Smoothing slider is moved...
  reinit REINIT							; ... force a reinitialisation
 endif
 REINIT:								; reinitialise from here
 krmsL		rms		aL,1/i(ksmooth)		; scan both channels
 krmsR		rms		aR,1/i(ksmooth)		; ...
 rireturn								; return to performance pass from reinitialisation pass (if applicable)
 krms		max		krmsL,krmsR			; but only used the highest rms

 kdelay		chnget	"delay"				
 if kdelay>0 then						; if Delay value is anything above zero ...
  aL	vdelay	aL, kdelay*1000, 200	; delay audio signals before limiting
  aR	vdelay	aR, kdelay*1000, 200
 endif

 if krms>kthresh then					; if current RMS is above threshold; i.e. limiting required
  kfctr		=	kthresh/krms			; derive less than '1' factor required to attenuate audio signal to limiting value
  afctr		interp	kfctr				; smooth changes (and interpolate from k to a)
  aL_L		=	aL * afctr			; apply scaling factor
  aL_R		=	aR * afctr
  klimiting	=	1				; switch value used by GUI indicator (on)
 else
  aL_L		=	aL				; pass audio signals unchanged
  aL_R		=	aR				; ...
  klimiting	=	0				; switch value used by GUI indicator (off)
 endif

 kgain		chnget	"gain"				; make up gain control
 kgain		=	ampdb(kgain)			; derive gain value as an amplitude factor
 aL_L		*=	kgain				; make up gain
 aL_R		*=	kgain

 if metro(16)==1 then					; peg rate if updates of limiting indicator (to save a bit of CPU)
  		chnset	klimiting,"limiting"		; send value for limiting indicator
 endif

	outs	aL_L, aL_R				; send limited audio signals to outputs
endin

</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>; BandFilter.csd
; Written by Iain McCurdy, 2012.

<Cabbage>
form caption("Band Filter"), colour(10,10,10), size(470, 360), pluginid("BdFl") style("legacy")
xypad bounds(5, 5, 350, 350), channel("cf", "bw"), rangex(0, 1, 0.5), rangey(0, 1, 0.3), text("x:cutoff | y:bandwidth"), colour(200,200,200)
checkbox bounds(370, 10, 20, 20), channel("balance"), FontColour("white"),  value(0)
label    bounds(395, 15, 55, 15), text("Balance"), FontColour("white")

label   bounds(375,  43, 75, 15), text("Filter Type"), FontColour("white")
combobox bounds(370,  60,85, 20), channel("type"), value(1), text("reson", "butterbp", "areson", "butterbr")

rslider bounds(368, 93, 90, 90), text("Mix"),		colour(27,59,59),trackercolour(127,159,159),textcolour("white"),fontcolour("white"), 		channel("mix"), 	range(0, 1.00, 1)
rslider bounds(368,190, 90, 90), text("Level"),		colour(27,59,59),trackercolour(127,159,159),textcolour("white"),fontcolour("white"), 		channel("level"), 	range(0, 1.00, 1)

nslider  bounds(360,283, 50, 30), text("CF"), textcolour("white"), channel("cfDisp"), range(1, 20000, 1, 1, 1)
nslider  bounds(415,283, 50, 30), text("BW"), textcolour("white"), channel("bwDisp"), range(1, 20000, 1, 1, 1)

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>
sr 	= 	44100
ksmps 	= 	32
nchnls 	= 	2
0dbfs	=	1

;Author: Iain McCurdy (2012)

instr	1
	kcf		chnget	"cf"
	kbw		chnget	"bw"
	kbalance	chnget	"balance"
	ktype		chnget	"type"
	kmix		chnget	"mix"
	klevel		chnget	"level"
	kporttime	linseg	0,0.001,0.05

	kcf	expcurve	kcf, 4
	kcf	scale	kcf,18000,20

	kbw	expcurve	kbw, 16
	kbw	scale	kbw,3,0.01

	aL,aR	ins
	;aL,aR	diskin2	"seashore.wav",1,0,1
	;aL	pinkish	1	;USE FOR TESTING
	;aR	pinkish	1
	
	kbw	limit	kbw*kcf,1,20000
	
	chnset	kcf,"cfDisp"	;send actual values for cutoff and bandwidth to GUI value boxes
	chnset	kbw,"bwDisp"

	kcf	portk	kcf,kporttime
	kbw	portk	kbw,kporttime	

	if ktype==1 then		;if reson chosen...
	 aFiltL	reson	aL,kcf,kbw,1
	 aFiltR	reson	aR,kcf,kbw,1
	elseif ktype==2 then		;or if butterworth bandpass is chosen
	 aFiltL	butbp	aL,kcf,kbw
	 aFiltR	butbp	aR,kcf,kbw
	elseif ktype==3 then		;or if areson  is chosen...
	 aFiltL	areson	aL,kcf,kbw,1
	 aFiltR	areson	aR,kcf,kbw,1
	else				;otherwise must be butterworth band reject
	 aFiltL	butbr	aL,kcf,kbw
	 aFiltR	butbr	aR,kcf,kbw
	endif
	if kbalance==1 then		;if 'balance' switch is on...
	 aFiltL	balance	aFiltL,aL,0.3	
	 aFiltR	balance	aFiltR,aR,0.3
	endif
	amixL	ntrpol	aL,aFiltL,kmix	;create wet/dry mix
	amixR	ntrpol	aR,aFiltR,kmix
		outs	amixL*klevel,amixR*klevel
endin

</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>
; BandFilterII.csd
; Written by Iain McCurdy, 2015.

; Modify filter limits using the xypad

; The limit double slider is more just for display.
                                                                                   
<Cabbage>                                                                                                                   
form caption("Bandfilter II"), colour("LightSlateGrey"), size(510, 655), pluginid("BFII"), scrollbars(0) style("legacy")

checkbox bounds(9,3,90,15), channel("TestSound"), text("Test Sound"), value(0), fontcolour("black")

xypad bounds(5,20, 500, 500), channel("shift", "width"), rangex(0, 1, 0.5), rangey(0, 1, 0.5), text("x:cutoff y:bandwidth"), colour("LightSlateGrey"), fontcolour("white")

;hslider2 bounds(  5,513,500, 40), channel("Lim1","Lim2"), min(4), max(14), range(4, 14, 0, 1, 0.001)
hrange   bounds(  5,513, 500, 40), channel("Lim1","Lim2"), range(4, 14, 4:14, 1, 0.001)
;hslider   bounds(  5,513,500,15),   channel("Lim1"), range(4,14,4)
;hslider   bounds(  5,528,500,15),   channel("Lim2"), range(4,14,14)

label    bounds(  5,543,500, 13), text("L I M I T S"), fontcolour("black")

image    bounds(  5,560,155, 90), shape("sharp"), outlinecolour("black"), colour(0,0,0,0), outlinethickness(1)
checkbox bounds( 15,570, 80, 11), channel("HPF_active"), text("HPF Active"), fontcolour("black"), value(1)
label    bounds( 15,595, 80, 13), text("HPF Type"), fontcolour("black")
combobox bounds( 15,610, 80, 20), value(2), channel("HPF_type"),   text("6dB/oct","12dB/oct","24dB/oct","36dB/oct","48dB/oct","Resonant"), colour("black")
rslider  bounds( 95,560, 60, 85), range(0,1,0),  channel("HPF_res"),  identchannel("HPF_resID"),   text("Res"),   textbox(1), colour("black"), fontcolour("black"), textcolour("black"), fontcolour("black")

image    bounds(165,560,155, 90), shape("sharp"), outlinecolour("black"), colour(0,0,0,0), outlinethickness(1)
checkbox bounds(175,570, 80, 11), channel("LPF_active"), text("LPF Active"), fontcolour("black"), value(1)
label    bounds(175,595, 80, 13), text("LPF Type"), fontcolour("black")
combobox bounds(175,610, 80, 20), value(2), channel("LPF_type"),  text("6dB/oct","12dB/oct","24dB/oct","36dB/oct","48dB/oct","Resonant"), colour("black")
rslider  bounds(255,560, 60, 85), range(0,1,0),  channel("LPF_res"),  identchannel("LPF_resID"),   text("Res"),   textbox(1), colour("black"), fontcolour("black"), textcolour("black")

label    bounds(370,550, 95, 13), fontcolour("black"), text("Mode")
combobox bounds(370,565, 95, 20), channel("PassRej"), text("Bandpass","Bandreject","Bypass"), value(1)

label   bounds(330,591,170,13), fontcolour("black"), text("Smoothing")
hslider bounds(330,605,170,15), range(0,0.1,0.03,0.75,0.0001),  channel("Smoothing"), textcolour("black")

label   bounds(330,621,170,13), fontcolour("black"), text("Gain")
hslider bounds(330,635,170,15), range(0,1,1),  channel("Gain"), textcolour("black")
}
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr	=	44100
ksmps	=	32
nchnls	=	2
0dbfs	=	1

;Author: Iain McCurdy (2015)

opcode HighpassNetwork,aa,aakkk
 aL,aR,kHPF,kHPF_res,kHPF_type	xin
 if kHPF_type==1 then 
  aL	atone	aL, cpsoct(kHPF)
  aR	atone	aR, cpsoct(kHPF)
 elseif kHPF_type==2 then 
  aL	buthp	aL, cpsoct(kHPF)
  aR	buthp	aR, cpsoct(kHPF)
 elseif kHPF_type==3 then 
  aL	buthp	aL, cpsoct(kHPF)
  aR	buthp	aR, cpsoct(kHPF)
  aL	buthp	aL, cpsoct(kHPF)
  aR	buthp	aR, cpsoct(kHPF)
 elseif kHPF_type==4 then 
  aL	buthp	aL, cpsoct(kHPF)
  aR	buthp	aR, cpsoct(kHPF)
  aL	buthp	aL, cpsoct(kHPF)
  aR	buthp	aR, cpsoct(kHPF)
  aL	buthp	aL, cpsoct(kHPF)
  aR	buthp	aR, cpsoct(kHPF)
 elseif kHPF_type==5 then 
  aL	buthp	aL, cpsoct(kHPF)
  aR	buthp	aR, cpsoct(kHPF)
  aL	buthp	aL, cpsoct(kHPF)
  aR	buthp	aR, cpsoct(kHPF)
  aL	buthp	aL, cpsoct(kHPF)
  aR	buthp	aR, cpsoct(kHPF)
  aL	buthp	aL, cpsoct(kHPF)
  aR	buthp	aR, cpsoct(kHPF)
 elseif kHPF_type==6 then  
  aL	bqrez	aL,cpsoct(kHPF),1+(kHPF_res*40),1
  aR	bqrez	aR,cpsoct(kHPF),1+(kHPF_res*40),1
 endif
 	xout	aL,aR
endop

opcode LowpassNetwork,aa,aakkk
 aL,aR,kLPF,kLPF_res,kLPF_type	xin
 if kLPF_type==1 then                                           
  aL	tone	aL, cpsoct(kLPF)                                
  aR	tone	aR, cpsoct(kLPF)
 elseif kLPF_type==2 then 
  aL	butlp	aL, cpsoct(kLPF)
  aR	butlp	aR, cpsoct(kLPF)
 elseif kLPF_type==3 then 
  aL	butlp	aL, cpsoct(kLPF)
  aR	butlp	aR, cpsoct(kLPF)
  aL	butlp	aL, cpsoct(kLPF)
  aR	butlp	aR, cpsoct(kLPF)
 elseif kLPF_type==4 then 
  aL	butlp	aL, cpsoct(kLPF)
  aR	butlp	aR, cpsoct(kLPF)
  aL	butlp	aL, cpsoct(kLPF)
  aR	butlp	aR, cpsoct(kLPF)
  aL	butlp	aL, cpsoct(kLPF)
  aR	butlp	aR, cpsoct(kLPF)
 elseif kLPF_type==5 then 
  aL	butlp	aL, cpsoct(kLPF)
  aR	butlp	aR, cpsoct(kLPF)
  aL	butlp	aL, cpsoct(kLPF)
  aR	butlp	aR, cpsoct(kLPF)
  aL	butlp	aL, cpsoct(kLPF)
  aR	butlp	aR, cpsoct(kLPF)
  aL	butlp	aL, cpsoct(kLPF)
  aR	butlp	aR, cpsoct(kLPF)
 elseif kLPF_type==6 then
  aL	moogladder	aL,cpsoct(kLPF),kLPF_res
  aR	moogladder	aR,cpsoct(kLPF),kLPF_res
 endif
 	xout	aL,aR
endop

instr	1
 kshift	chnget	"shift"
 kwidth	chnget	"width"
 kgain	chnget	"Gain"
 kPassRej	chnget	"PassRej"
 kPassRej	init	1
 kTestSound	chnget	"TestSound"
 kSmoothing	chnget	"Smoothing"
 
 kLPF_type	chnget	"LPF_type"
 kHPF_type	chnget	"HPF_type"
 kLPF_type	init	2
 kHPF_type	init	2
 kLPF_res	chnget	"LPF_res"
 kHPF_res	chnget	"HPF_res"

 kLPF_active	chnget	"LPF_active"
 kHPF_active	chnget	"HPF_active"

 if changed(kHPF_type)==1 then
  if kHPF_type==6 then
   	chnset	"visible(1)","HPF_resID"
  else
   	chnset	"visible(0)","HPF_resID"
  endif
 endif  

 if changed(kLPF_type)==1 then
  if kLPF_type==6 then
   	chnset	"visible(1)","LPF_resID"
  else
   	chnset	"visible(0)","LPF_resID"
  endif
 endif  

 kLim1	limit	scale:k(kshift-(kwidth*kshift),14,4), 4, 14
 kLim2	limit	scale:k(kshift+(kwidth*kshift),14,4), 4, 14
 
 	chnset	kLim1,"Lim1"
 	chnset	kLim2,"Lim2"

 if kTestSound==1 then
  aL	pinkish	0.5	; use for testing
  aR	pinkish	0.5	; use for testing
 else
  aL,aR	ins
 endif
 
 kporttime	linseg	0,0.01,1
 kporttime	*=	kSmoothing
 kLim1	portk	kLim1,kporttime
 kLim2	portk	kLim2,kporttime
 
 if kPassRej==1 then
  if kHPF_active==1 then
   aL,aR	HighpassNetwork	aL,aR,kLim1,kHPF_res,kHPF_type
  endif
  if kLPF_active==1 then
   aL,aR	LowpassNetwork	aL,aR,kLim2,kLPF_res,kLPF_type
  endif
 elseif kPassRej==2 then
  if kHPF_active==1 then
   aL1,aR1	HighpassNetwork	aL,aR,kLim2,kHPF_res,kHPF_type
  endif
  if kLPF_active==1 then  
   aL2,aR2	LowpassNetwork	aL,aR,kLim1,kLPF_res,kLPF_type
  endif
  aL1,aR1,aL2,aR2	init	0
  aL	sum	aL1,aL2
  aR	sum	aR1,aR2
  	clear	aL1,aR1,aL2,aR2
 endif
 
 


 	outs	aL*kgain, aR*kgain

endin

</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>
; clfilt.csd
; Written by Iain McCurdy, 2012.

; Port.		-	portamento applied to changes that are made to 'Freq.'

<Cabbage>
form caption("clfilt - Multi-Mode Filter") size(655, 90), pluginid("clfl"), scrollbars(0) style("legacy")
image                              bounds(0, 0, 655, 90), colour( 40,40,100), shape("rounded"), outlinecolour("white"), outlinethickness(4) 
rslider bounds( 10, 11, 70, 70), text("Freq."),       colour( 20,20, 80), 	fontcolour("white"), 	channel("cf"), 		range(20, 20000, 2000, 0.333), trackercolour("white"), outlinecolour(140,140,170), textcolour("white")
rslider bounds( 75, 16, 60, 60), text("Port."),       colour( 20,20, 80), 	fontcolour("white"), 	channel("port"), 	range(0,  50, 0.1, 0.5,0.01), trackercolour("white"), outlinecolour(140,140,170), textcolour("white")

rslider bounds(130, 11, 70, 70), text("N.Poles"),     colour( 20,20, 80), 	fontcolour("white"), 	channel("npol"),	range(2,80,24,1,2),            trackercolour("white"), outlinecolour(140,140,170), textcolour("white")
rslider bounds(195, 11, 70, 70), text("Ripple"),      colour( 20,20, 80), 	fontcolour("white"), 	channel("pbr"),		range(0.1,50,14),              trackercolour("white"), outlinecolour(140,140,170), textcolour("white")
rslider bounds(260, 11, 70, 70), text("Attenuation"), colour( 20,20, 80), 	fontcolour("white"), 	channel("sba"),		range(-120,-1,-60),            trackercolour("white"), outlinecolour(140,140,170), textcolour("white")
label                      bounds(365, 10, 40, 12), text("Type:"), fontcolour("white")
combobox channel("type"),  bounds(328, 23, 128, 18), value(1), text("Lowpass","Highpass")
label                      bounds(363, 46, 50, 12), text("Method:"), fontcolour("white")
combobox channel("kind"),  bounds(328, 59, 128, 18), value(2), text("Butterworth","Chebychev type I","Chebychev type II")
rslider bounds(455, 11, 70, 70), text("Mix"),	      colour( 20,20, 80),	fontcolour("white"), 	channel("mix"), 	range(0,1.00,1),   trackercolour("white"), outlinecolour(140,140,170), textcolour("white")
rslider bounds(520, 11, 70, 70), text("Level"),	      colour( 20,20, 80),	fontcolour("white"), 	channel("level"), 	range(0,1.00,0.3), trackercolour("white"), outlinecolour(140,140,170), textcolour("white")
checkbox channel("test"), pos(595, 35), text("TEST"), colour("yellow"), fontcolour("white"), size(60, 15), value(0)
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-d -n
</CsOptions>

<CsInstruments>

sr 		= 	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1

;Author: Iain McCurdy (2013)

instr	1	; widgets input
	gkcf		chnget	"cf"
	gkport		chnget	"port"
	gknpol		chnget	"npol"
	gknpol		init	2
	gkpbr		chnget	"pbr"
	gksba		chnget	"sba"
	gktype		chnget	"type"
	gktype		=	gktype - 1
	gktype		init	0
	gkkind		chnget	"kind"
	gkkind		=	gkkind - 1
	gkkind		init	0
	gkmix		chnget	"mix"
	gklevel		chnget	"level"
	gktest		chnget	"test"
endin

instr	2	; clfilt - multimode filter
	kporttime	linseg	0,0.001,1
	kcf	portk	gkcf,kporttime*gkport
	kmix	portk	gkmix,kporttime*0.1
	klevel	portk	gklevel,kporttime
	if gktest=0 then
	 aL,aR	ins
	else
	 aL	pinkish	0.5
	 aR	=	aL
	endif
	
	ktrig	changed	gktype, gknpol, gkkind, gkpbr, gksba
	if ktrig==1 then
	 reinit	UPDATE
	endif
	UPDATE:
	aFiltL	clfilt	aL, kcf, i(gktype), i(gknpol), i(gkkind), i(gkpbr), i(gksba)
	aFiltR	clfilt	aR, kcf, i(gktype), i(gknpol), i(gkkind), i(gkpbr), i(gksba)
	rireturn

	aL	ntrpol	aL,aFiltL,kmix
	aR	ntrpol	aR,aFiltR,kmix
		outs	aL*klevel,aR*klevel
endin
		
</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
i 2 0.01 [3600*24*7]
</CsScore>

</CsoundSynthesizer>
; EnvelopeFollower.csd
; Written by Iain McCurdy, 2012.

<Cabbage>
form caption("Envelope Follower") size(530, 100), pluginid("envf") style("legacy")
image                  pos(0, 0), size(530, 100), colour("brown"), shape("rounded"), outlinecolour("white"), outlinethickness(4)
vmeter   bounds(20, 10, 15, 80) channel("Meter") value(0) outlinecolour("black"), overlaycolour(20, 3, 3,255) metercolour:0(255,100,100,255) metercolour:1(255,150,155, 255) metercolour:2(255,255,123, 255) outlinethickness(3) 

rslider bounds( 40, 11, 75, 75), text("Sensitivity"), channel("sens"),  range(0, 1, 0.65),                   colour(255,100,100), textcolour(255,255,200), trackercolour(255,255,150)
rslider bounds(110,  6, 45, 45), text("Att."),        channel("att"),   range(0.001, 0.5, 0.01, 0.5, 0.001), colour(255,200,100), textcolour(255,255,200), trackercolour(255,255,150)
rslider bounds(110, 51, 45, 45), text("Dec."),        channel("rel"),   range(0.001, 0.5, 0.2, 0.5, 0.001),  colour(255,200,100), textcolour(255,255,200), trackercolour(255,255,150)
rslider bounds(150, 11, 75, 75), text("Frequency"),   channel("freq"),  range(10, 10000, 1000, 0.5),         colour(255,100,100), textcolour(255,255,200), trackercolour(255,255,150)
label    bounds(225, 15, 85, 14), text("Type"), fontcolour(255,255,200)
combobox bounds(225, 30, 85, 20), text("lpf18","moogladder","butlp","tone"), value("1"), channel("type")
rslider bounds(310, 11, 75, 75), text("Resonance"),   channel("res"),   range(0,  1, 0.75),                  colour(255,100,100), textcolour(255,255,200), trackercolour(255,255,150), identchannel("resID")
rslider bounds(380, 11, 75, 75), text("Distortion"),  channel("dist"),  range(0,  1.00, 0),                  colour(255,100,100), textcolour(255,255,200), trackercolour(255,255,150), identchannel("distID")
rslider bounds(450, 11, 75, 75), text("Level"),       channel("level"), range(0, 1.00, 1),                   colour(255,200,100), textcolour(255,255,200), trackercolour(255,255,150)
</Cabbage>
<CsoundSynthesizer>
<CsOptions>
-d -n
</CsOptions>
<CsInstruments>
sr = 44100
ksmps = 64
nchnls = 2
0dbfs = 1

; Author: Iain McCurdy (2012)

opcode	EnvelopeFollower,a,akkkkkkk
	ain,ksens,katt,krel,kfreq,ktype,kres,kdist	xin			; READ IN INPUT ARGUMENTS
	setksmps	4
	;				     ATTCK.REL.  -  ADJUST THE RESPONSE OF THE ENVELOPE FOLLOWER HERE
	aFollow		follow2		ain, katt, krel			; AMPLITUDE FOLLOWING AUDIO SIGNAL
	kFollow		downsamp	aFollow				; DOWNSAMPLE TO K-RATE
	kFollow		expcurve	kFollow/0dbfs,0.5		; ADJUSTMENT OF THE RESPONSE OF DYNAMICS TO FILTER FREQUENCY MODULATION
	kFrq		=		kfreq + (kFollow*ksens*10000)	; CREATE A LEFT CHANNEL MODULATING FREQUENCY BASE ON THE STATIC VALUE CREATED BY kfreq AND THE AMOUNT OF DYNAMIC ENVELOPE FOLLOWING GOVERNED BY ksens
	kFrq		limit		kFrq, 20,sr/2			; LIMIT FREQUENCY RANGE TO PREVENT OUT OF RANGE FREQUENCIES  
	if ktype==1 then
	 aout		lpf18		ain, kFrq, kres, kdist		; REDEFINE AUDIO SIGNAL AS FILTERED VERSION OF ITSELF
	elseif ktype==2 then
	 aout		moogladder	ain, kFrq, kres			; REDEFINE AUDIO SIGNAL AS FILTERED VERSION OF ITSELF
	elseif ktype==3 then
	 aFrq	interp	kFrq
	 aout		butlp		ain, aFrq			; REDEFINE AUDIO SIGNAL AS FILTERED VERSION OF ITSELF
	elseif ktype==4 then
	 aout		tone		ain, kFrq			; REDEFINE AUDIO SIGNAL AS FILTERED VERSION OF ITSELF
	endif
			xout		aout				; SEND AUDIO BACK TO CALLER INSTRUMENT
endop

opcode	SwitchPort, k, kii
	kin,iupport,idnport	xin
	kold			init	0
	kporttime		=	(kin<kold?idnport:iupport)
	kout			portk	kin, kporttime
	kold			=	kout
				xout	kout
endop

instr 1
ksens chnget "sens"
katt chnget "att"
krel chnget "rel"
kfreq chnget "freq"
ktype chnget "type"
ktype	init	1
kres chnget "res"
kdist chnget "dist"
klevel chnget "level"
a1,a2	ins


if changed:k(ktype)==1 then
 if ktype==1 then
  chnset	"visible(1)","distID"
  chnset	"visible(1)","resID"
 elseif ktype==2 then
  chnset	"visible(0)","distID"
  chnset	"visible(1)","resID"
 else
  chnset	"visible(0)","distID"
  chnset	"visible(0)","resID"
 endif
endif

;a1,a2	diskin2	"808loop.wav",1,0,1
;a1	=	a1*0.4
;a2	=	a2*0.4

/*level meter*/
amix	sum	a1,a2
krms	rms	amix*0.5
krms	pow	krms,0.75
krms	SwitchPort	krms,0.01,0.05
		chnset	krms,"Meter"

a1	EnvelopeFollower	a1,ksens,katt,krel,kfreq,ktype,kres*0.95,kdist*100
a2	EnvelopeFollower	a2,ksens,katt,krel,kfreq,ktype,kres*0.95,kdist*100
a1	=	a1 * klevel * (1 - ((kdist*0.3)^0.02))	;scale amplitude according to distortion level (to compensate for gain increases it applies)
a2	=	a2 * klevel * (1 - ((kdist*0.3)^0.02))
;	outs	a1,a2
endin

</CsInstruments>
<CsScore>
i 1 0 [60*60*24*7]
</CsScore>
</CsoundSynthesizer>; FilterLFO.csd
; Author: Iain McCurdy (2013)

; INTRODUCTION
; ------------
; multimode filter with a 2 multimode LFOs on the cutoff frequency
; additional controls for specific filter models are accessed using the pop-up buttons

; The outputs of both LFOs are added to the main cutoff frequency (Freq.)
; LFO amplitude are in 'octaves'
; LFO rates are in beats per minute
; 'Smoothing' adds a small amount of portamento to changes in cutoff frequency
;   this can be useful in square wave-type modulations 

; 'Type' is ignored when 'moogladder', 'resonz', 'phaser2' or 'resony' are chosen as 'model'

; some subtlety is required when using the more complex filter models (e.g. phaser2, resony)
;    often low LFO amplitudes and rate work better with these

; CONTROL
; -------
; Freq.		--	global manual frequency control. Like an LFO offset value.
; Res.		--	resonance control. Affects moogladder, resonz and phaser2 models
; Mix		--	dry/wet (filtered/unfiltered) mix
; Level		--	global output level control
; Model		--	(drop down menu) filter model
; Type		--	Filter type: highpass/lowpass - affects tone, butterworth, cl-butterworth, cl-Chebychev models only
; Input		--	choose between live input and (for testing) sawtooth tone and pink noise
; Resync	--	resync. (i.e. restart) the two LFOs
; clfilt/phaser2/resony	--	pop-up panels with further controls for these models
; LFO Type	--	sine, triangle, square (bipolar), square (unipolar), sawtooth up, sawtooth down, random sample & hold and random spline
; LFO Amp	--	amplitude of the LFOs
; LFO Rate	--	rates of the LFOs in beats per minute
; Link Rates	--	when this switch is activate Rate controls for the two LFOs will be linked
; LFO Rate Div.	--	integer division of Rate control value (unaffected by 'Link Rates' setting)
; Smooth	--	a small amount of smoothing can be appied to the LFO to smooth abrupt changes in value (may be useful and 'square' and 'rand.S&H' type modulations

<Cabbage>
form caption("Filter LFO") size(790,170), pluginid("FLFO") style("legacy")
image pos(0, 0),           size(790,170), colour(0,0,0,170), shape("rounded"), outlinecolour("white"), outlinethickness(4) 
rslider bounds( 10, 11, 70, 70), text("Freq."), colour( 30, 30, 30),	trackercolour("white"),	fontcolour("white"), 		channel("cf"), 		range(1, 20000, 300, 0.333)
rslider bounds( 75, 11, 70, 70), text("Res."),  colour( 30, 30, 30),	trackercolour("white"),	fontcolour("white"), 		channel("res"),		range(0,1.00,0.75)
rslider bounds(140, 11, 70, 70), text("Mix"),   colour( 30, 30, 30),	trackercolour("white"),	fontcolour("white"), 		channel("mix"), 	range(0,1.00,1)
rslider bounds(205, 11, 70, 70), text("Level"), colour( 30, 30, 30),	trackercolour("white"),	fontcolour("white"), 		channel("level"), 	range(0, 1.00, 0.2)

label    bounds( 40, 90, 50, 12), text("MODEL"), fontcolour("white")
combobox bounds( 20,102, 100, 18), channel("model"), value(6), text("Tone","Butterworth","Moogladder","cl-Butterworth","cl-Chebychev I","resonz","phaser2","resony")

label    bounds(160, 90, 50, 12), text("TYPE"),  fontcolour("white")
combobox bounds(140,102, 100, 18), channel("type"), value(1), text("Low-pass","High-pass")

label    bounds( 40,127, 50, 12), text("INPUT"), fontcolour("white")
combobox bounds( 20,139,100, 18), channel("input"), value(2), text("Live","Tone","Noise")

button   bounds(140,139, 80, 18), colour("Green"), text("RESYNC.", "RESYNC."), channel("resync"), value(1)

; controls pertaining to the setup of clfilt accessed in a pop-up panel.
button   bounds(280, 15,100, 30), channel("clfiltButton"), text("clfilt")
groupbox bounds(280, 15,150, 90),  colour("black"), plant("clfilt"), outlinethickness(0), popup(1), identchannel("clfiltPlant");, fontcolour("white")
{
rslider bounds(  5, 16, 70, 70), text("N.Poles"), colour( 30 , 30, 30),	trackercolour("white"), fontcolour("white"), channel("npol"),   range(2, 80, 2, 1, 2)
rslider bounds( 75, 16, 70, 70), text("Ripple"),  colour( 30 , 30, 30),	trackercolour("white"), fontcolour("white"), channel("pbr"),    range(0.1, 50.00, 1, 0.5, 0.001)
}

; controls pertaining to the setup of phaser2 accessed in a pop-up panel.
button   bounds(280, 55,100, 30), channel("phaser2Button"), text("phaser2")
groupbox bounds(280, 55,315, 90), colour("black"), plant("phaser2"), outlinethickness(0), popup(1), identchannel("phaser2Plant");, fontcolour(white)
{
rslider  bounds(  5, 16, 70, 70), text("Q"),       channel("q"),   range(0.0001,4,3),       colour( 30 , 30, 30),	trackercolour("white"), fontcolour("white")
rslider  bounds( 75, 16, 70, 70), text("N.Ords."), channel("ord"), range(1, 256, 8, 0.5,1), colour( 30 , 30, 30),	trackercolour("white"), fontcolour("white")
label    bounds(145, 20, 90, 14), text("Sep. Mode:"), fontcolour("white")
combobox bounds(145, 35, 90, 20), channel("mode"), value(1), text("Equal", "Power"), colour( 30 , 30, 30),	trackercolour("white"), fontcolour("white")
rslider  bounds(240, 16, 70, 70), text("Separation"), channel("sep"), range(-3, 3.00, 0.9), colour( 30 , 30, 30),	trackercolour("white"), fontcolour("white")
}

; controls pertaining to the setup of resony accessed in a pop-up panel.
button   bounds(280, 95,100, 30), channel("resonyButton"), text("resony")
groupbox bounds(280, 95,565, 90),  colour("black"), plant("resony"), outlinethickness(0), popup(1), identchannel("resonyPlant");, fontcolour(white)
{
rslider  bounds(  5, 16, 70, 70), text("BW."),           fontcolour("white"), channel("bw"),    range(0.01, 1000, 13, 0.5), colour( 30 , 30, 30),	trackercolour("white")
rslider  bounds( 75, 16, 70, 70), text("Num."),          fontcolour("white"), channel("num"),   range(1, 80, 10, 1,1),      colour( 30 , 30, 30),	trackercolour("white")
rslider  bounds(145, 16, 70, 70), text("Sep.oct."),      fontcolour("white"), channel("sepR"),  range(-11, 11, 2),          colour( 30 , 30, 30),	trackercolour("white")
rslider  bounds(215, 16, 70, 70), text("Sep.semi."),     fontcolour("white"), channel("sepR2"), range(-48, 48, 24,1,1),     colour( 30 , 30, 30),	trackercolour("white")
label    bounds(285, 20,130, 14), text("Scaling Mode"), fontcolour("white")
combobox bounds(285, 35,130, 20), channel("scl"), value(2), text("none", "peak response", "RMS")
label    bounds(425, 20,130, 14), text("Separation Mode"), fontcolour("white")
combobox bounds(425, 35,130, 20), channel("sepmode"), value(1), text("octs.total", "hertz", "octs.adjacent")
}

;checkbox bounds(400, 50,100, 15), text("Balance") channel("balance"), fontcolour("white"), colour("yellow")  value(0)


line bounds(390, 10,  2,150), colour("Grey")

;LFO
label    bounds(405, 11, 45, 17), text("LFO 1"), fontcolour("white")
combobox bounds(405, 50, 100, 18), channel("LFOtype"), value(3), text("Sine","Triangle","Square[bi]","Square[uni]","Saw Up","Saw Down","Rand.S&H","Rand.Spline")
rslider  bounds(515, 11, 70, 70), text("Amp"),      colour( 30, 30 ,30),	trackercolour("white"), fontcolour("white"), channel("LFOamp"), range(0, 9.00, 0.67)
rslider  bounds(580, 11, 70, 70), text("Rate"),     colour( 30, 30 ,30),	trackercolour("white"), fontcolour("white"), channel("LFOBPM"), range(0, 480, 60, 1, 1)
rslider  bounds(645, 11, 70, 70), text("Rate Div."),colour( 30, 30 ,30),	trackercolour("white"), fontcolour("white"), channel("LFOBPMDiv"), range(1, 64, 1, 1, 1)
rslider  bounds(710, 11, 70, 70), text("Smoothing"),colour( 30, 30 ,30),	trackercolour("white"), fontcolour("white"), channel("LFOport"), range(0, 0.1, 0.005, 0.25, 0.000001)
checkbox bounds(405, 31, 80, 12), text("Link Rates"), channel("RateLink"),colour(yellow), fontcolour("white"),  value(0)

;LFO2
label    bounds(405, 91, 45, 17), text("LFO 2"), fontcolour("white")
combobox bounds(405,130, 100, 18), channel("LFOtype2"), value(8), text("Sine","Triangle","Square[bi]","Square[uni]","Saw Up","Saw Down","Rand.S&H","Rand.Spline")
rslider  bounds(515, 91, 70, 70), text("Amp"), colour( 30, 30 ,30),	        trackercolour("white"), fontcolour("white"), channel("LFOamp2"), range(0, 9.00, 2.5)
rslider  bounds(580, 91, 70, 70), text("Rate"),colour( 30, 30 ,30),	        trackercolour("white"), fontcolour("white"), channel("LFOBPM2"), range(0, 480,  1, 1, 1)
rslider  bounds(645, 91, 70, 70), text("Rate Div."),colour( 30, 30 ,30),	trackercolour("white"), fontcolour("white"), channel("LFOBPMDiv2"), range(1, 64, 1, 1, 1)
rslider  bounds(710, 91, 70, 70), text("Smoothing"),colour( 30, 30 ,30),	trackercolour("white"), fontcolour("white"), channel("LFOport2"), range(0, 0.1, 0.001, 0.25, 0.000001)
checkbox bounds(405,111, 80, 12), text("Link Rates"), channel("RateLink"),colour(yellow), fontcolour("white"),  value(0)

label   bounds(220,150, 170, 12), text("Author: Iain McCurdy |2013|"), fontcolour("grey")
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-d -n
</CsOptions>

<CsInstruments>

sr 		= 	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1

;Author: Iain McCurdy (2013)

opcode	resony2,a,akkikii
	ain, kbf, kbw, inum, ksep , isepmode, iscl	xin

	;IF 'Octaves (Total)' MODE SELECTED...
	if isepmode==0 then
	 irescale	divz	inum,inum-1,1	;PREVENT ERROR IF NUMBER OF FILTERS = ZERO
	 ksep = ksep * irescale			;RESCALE SEPARATION
	
	;IF 'Hertz' MODE SELECTED...	
	elseif isepmode==1 then
	 inum	=	inum + 1
	 ksep	=	inum

	;IF 'Octaves (Adjacent)' MODE SELECTED...
	elseif isepmode==2 then 
	 irescale	divz	inum,inum-1,1	;PREVENT ERROR IF NUMBER OF FILTERS = ZERO
	 ksep = ksep * irescale			;RESCALE SEPARATION
	 ksep = ksep * (inum-1)			;RESCALE SEPARATION INTERVAL ACCORDING TO THE NUMBER OF FILTERS CHOSEN
	 isepmode	=	0
	endif

	aout 		resony 	ain, kbf, kbw, inum, ksep , isepmode, iscl, 0
			xout	aout
endop


instr	1
	kporttime	linseg	0,0.001,1

	kcf		chnget	"cf"				;
	kcf	portk	kcf,kporttime*0.05
	kres		chnget	"res"				;
	kmodel		chnget	"model"				;
	ktype		chnget	"type"				;
	kresync		chnget	"resync"				;

	kmix		chnget	"mix"				;
	klevel		chnget	"level"				;

	kpbr		chnget	"pbr"				;
	kpbr		init	1
	knpol		chnget	"npol"				;
	knpol		init	2

	kq		chnget	"q"					;
	kmode		chnget	"mode"					;
	kmode		init	1
	kmode		init	i(kmode)-1
	ksep		chnget	"sep"					;
	kfeedback	chnget	"feedback"				;
	kord		chnget	"ord"					;

	;resony
	kbw	chnget	"bw"
	knum	chnget	"num"
	ksepR	chnget	"sepR"
	ksepR2	chnget	"sepR2"
	ksepmode	chnget	"sepmode"
	ksepmode	=	ksepmode - 1
	ksepmode	init	1
	kscl	chnget	"scl"
	kscl	=	kscl - 1
	kscl	init	1

	;kbalance	chnget	"balance"			;

	kLFOtype	chnget	"LFOtype"
	kLFOamp		chnget	"LFOamp"
	kLFOamp		portk	kLFOamp, kporttime*0.05
	kLFOBPM		chnget	"LFOBPM"
	kLFOBPMDiv	chnget	"LFOBPMDiv"
	kLFOcps		=	(kLFOBPM*4)/(60*kLFOBPMDiv)
	kLFOport	chnget	"LFOport"

	kLFOtype2	chnget	"LFOtype2"
	kLFOamp2	chnget	"LFOamp2"
	kLFOamp2	portk	kLFOamp2, kporttime*0.05
	kLFOBPM2	chnget	"LFOBPM2"
	kLFOBPMDiv2	chnget	"LFOBPMDiv2"
	kLFOcps2	=	(kLFOBPM2*4)/(60*kLFOBPMDiv2)
	kLFOport2	chnget	"LFOport2"
	
	kRateLink		chnget	"RateLink"
	if kRateLink=1 then
	 ktrig1	changed	kLFOBPM
	 ktrig2	changed	kLFOBPM2
	 if ktrig1=1 then
	  chnset	kLFOBPM,"LFOBPM2"
	 elseif ktrig2=1 then
	  chnset	kLFOBPM2,"LFOBPM"
	 endif
	endif
	/* INPUT */
	kinput		chnget	"input"
	if kinput=1 then
	 aL,aR	ins
	elseif kinput=2 then
	 aL	vco2	0.2, 150
	 aR	=	aL
	else
	 aL	pinkish	0.2
	 aR	pinkish	0.2
	endif

	; RETRIGGERING FOR I-RATE VARIABLE
	kLFOtype	init	1
	kLFOtype2	init	1

	ktrig	changed	knpol,kpbr,kLFOtype,kLFOtype2,kmodel,ktype,kord,kmode, kscl, knum, ksepmode, kresync,kLFOBPMDiv,kLFOBPMDiv2,kRateLink
	if ktrig==1 then
	 reinit UPDATE
	endif
	UPDATE:
	
	; LFO
	if i(kLFOtype)==7 then
	 klfo	randomh	-kLFOamp, kLFOamp, kLFOcps
	elseif	i(kLFOtype)==8 then
	 klfo	jspline	kLFOamp, kLFOcps, kLFOcps*5
	else
	 klfo		lfo	kLFOamp, kLFOcps, i(kLFOtype)-1
	endif
	klfo		portk	klfo,kporttime*kLFOport
	;kcf		limit	kcf * octave(klfo),20,sr/2

	; LFO2
	if i(kLFOtype2)==7 then
	 klfo2	randomh	-kLFOamp2, kLFOamp2, kLFOcps2
	elseif	i(kLFOtype2)==8 then
	 klfo2	jspline	kLFOamp2, kLFOcps2, kLFOcps2*5
	else
	 klfo2		lfo	kLFOamp2, kLFOcps2, i(kLFOtype2)-1
	endif
	klfo2		portk	klfo2,kporttime*kLFOport2
	kcf		limit	kcf * octave(klfo) * octave(klfo2),20,sr/2


	; FILTER MODEL SELECT
	if i(kmodel)==1 then
	 if i(ktype)==1 then			; tone
	  aFiltL	tone	aL, kcf
	  aFiltR	tone	aR, kcf
	 else
	  aFiltL	atone	aL, kcf
	  aFiltR	atone	aR, kcf
	 endif
	elseif i(kmodel)==2 then		; butterworth
	 if i(ktype)==1 then
	  aFiltL	butlp	aL, kcf
	  aFiltR	butlp	aR, kcf
	 else
	  aFiltL	buthp	aL, kcf
	  aFiltR	buthp	aR, kcf        
	 endif
	elseif i(kmodel)==3 then			; moogladder
	 kres	scale		kres,0.95,0
	 aFiltL	moogladder	aL,kcf,kres
	 aFiltR	moogladder	aR,kcf,kres        
	elseif i(kmodel)==4 then			; cl-butterworth
	 if i(ktype)==1 then
	  aFiltL	clfilt	aL, kcf, 0, i(knpol)
	  aFiltR	clfilt	aR, kcf, 0, i(knpol)
	 else
	  aFiltL	clfilt	aL, kcf, 1, i(knpol)
	  aFiltR	clfilt	aR, kcf, 1, i(knpol)
	 endif
	elseif i(kmodel)==5 then			; cl-chebychev I
	 if i(ktype)==1 then
	  aFiltL	clfilt	aL, kcf, 0, i(knpol), 1, i(kpbr)
	  aFiltR	clfilt	aR, kcf, 0, i(knpol), 1, i(kpbr)
	 else
	  aFiltL	clfilt	aL, kcf, 1, i(knpol), 1, i(kpbr)
	  aFiltR	clfilt	aR, kcf, 1, i(knpol), 1, i(kpbr)
	 endif
	elseif i(kmodel)==6 then			; resonz
	 kres	logcurve	kres,4
	 kbw	scale	1-kres,3,0.1
	 aFiltL	resonz	aL, kcf, kcf*kbw, 1
	 aFiltR	resonz	aR, kcf, kcf*kbw, 1
	elseif i(kmodel)==7 then			; phaser2
	 kfeedback	scale	kres,0.99,0
	 aFiltL	phaser2		aL, kcf, kq, kord, kmode, ksep, kfeedback	; PHASER2 IS APPLIED TO THE LEFT CHANNEL
	 aFiltR	phaser2		aR, kcf, kq, kord, kmode, ksep, kfeedback	; PHASER1 IS APPLIED TO THE RIGHT CHANNEL
	elseif i(kmodel)==8 then			; resony	
	 ;CALL resony2 UDO
	 aFiltL 		resony2 aL, kcf, kbw, i(knum), ksepR , i(ksepmode), i(kscl)
	 aFiltR 		resony2	aR, kcf, kbw, i(knum), ksepR , i(ksepmode), i(kscl)
	endif
	
	rireturn

	/*
	if kbalance==1 then
	 aFiltL	balance	aFiltL,aL
	 aFiltR	balance	aFiltR,aR
	endif
	*/

	
	aL	ntrpol	aL,aFiltL,kmix
	aR	ntrpol	aR,aFiltR,kmix
		outs	aL*klevel,aR*klevel
endin

instr	UpdateWidgets
	ksepR	chnget	"sepR"
	ksepR2	chnget	"sepR2"
	ktrig1	changed	ksepR
	ktrig2	changed	ksepR2
	if ktrig1==1 then
	 chnset	ksepR*12, "sepR2"
	elseif  ktrig2==1 then
	 chnset	ksepR2/12, "sepR"
	endif
endin

instr 1000				; launches plant popups

klaunch	init	0

#define LAUNCH_PLANT(name)
#
kpressed	chnget "$name.Button"
if changed(kpressed)==1 then
  Smsg sprintfk "show(%d), pos(1, 19)", klaunch
  chnset Smsg, "$name.Plant"
endif
#

$LAUNCH_PLANT(clfilt)
$LAUNCH_PLANT(phaser2)
$LAUNCH_PLANT(resony)

klaunch	=	1

endin
	
</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
i "UpdateWidgets" 0 [3600*24*7]
i 1000 0 [60*60*24*7]	; plant pop-ups
</CsScore>

</CsoundSynthesizer>
; FilterShaper.csd
; Iain McCurdy, 2015

; Gestural shaping using rspline random function generators applied to lowpass filter, highpass filter, panning and amplitude

<Cabbage>
form caption("Filter Shaper") size(595, 200), pluginid("FlSh") style("legacy")
image               bounds(  0, 0, 595, 200), colour("Chocolate"), outlinecolour("white"), outlinethickness(2), shape("sharp")

line     bounds( 15,  4,125, 15)
label    bounds( 15,  5,125, 12), fontcolour("white"), text("R A T E")
rslider  bounds(  5, 20, 75, 75), text("Min"),  channel("RateMin"), range(0.01,20,0.5,0.5,0.01), textcolour("white"), colour(37,59,59), trackercolour("Silver")
rslider  bounds( 75, 20, 75, 75), text("Max"),  channel("RateMax"), range(0.01,20,3,0.5,0.01), textcolour("white"), colour(37,59,59), trackercolour("Silver")
checkbox bounds(160, 20, 75, 15), text("Bypass"),  channel("Bypass"), fontcolour("white")

image    bounds(220,  0,145, 95), colour(0,0,0,0), plant("panning") {
line     bounds( 15,  4,125, 15)
label    bounds( 15,  5,125, 12), fontcolour("white"), text("P A N N I N G")
rslider  bounds(  5, 20, 75, 75), text("Width"),channel("PanWidth"), range(0,1,1), textcolour("white"), colour(37,59,59), trackercolour("Silver")
rslider  bounds( 75, 20, 75, 75), text("Depth"),channel("PanDepth"), range(0,1,1), textcolour("white"), colour(37,59,59), trackercolour("Silver")
}

image    bounds(445,  0,145, 95), colour(0,0,0,0), plant("amplitude") {
line     bounds( 10,  4,125, 15)
label    bounds( 10,  5,125, 12), fontcolour("white"), text("A M P L I T U D E")
rslider  bounds(  0, 20, 75, 75), text("Min."),channel("AmpMin"), range(0,2,0.4,0.5,0.01), textcolour("white"), colour(37,59,59), trackercolour("Silver")
rslider  bounds( 70, 20, 75, 75), text("Max."),channel("AmpMax"), range(0,2,0.8,0.5,0.01), textcolour("white"), colour(37,59,59), trackercolour("Silver")
}

image    bounds( 15,100,285, 95), colour(0,0,0,0), plant("lowpass") {
line     bounds(  0,  4,275, 15)
label    bounds(  0,  5,275, 12), fontcolour("white"), text("L O W P A S S   F I L T E R")
label    bounds(  0, 28, 75, 12), fontcolour("white"), text("LPF Type"), fontcolour(100,100,100)
combobox bounds(  0, 40, 75, 20), channel("LPFtype"), text("Bypass","6 db/oct","12 db/oct","24 db/oct","Resonant"), textcolour("white"), colour(37,59,59), value(3)
rslider  bounds( 70, 20, 75, 75), text("Res."),channel("LPFres"), range(0,1,0.3,0.5,0.01), textcolour("white"), colour(37,59,59), trackercolour("Silver"), identchannel("LPFresID")
rslider  bounds(140, 20, 75, 75), text("Min."),channel("LPFmin"), range(4,14, 6), textcolour("white"), colour(37,59,59), trackercolour("Silver"), identchannel("LPFminID")
rslider  bounds(210, 20, 75, 75), text("Max."),channel("LPFmax"), range(4,14,14), textcolour("white"), colour(37,59,59), trackercolour("Silver"), identchannel("LPFmaxID")
}

image    bounds(305,100,285, 95), colour(0,0,0,0), plant("highpass") {
line     bounds(  0,  4,275, 15)
label    bounds(  0,  5,275, 12), fontcolour("white"), text("H I G H P A S S   F I L T E R")
label    bounds(  0, 28, 75, 12), fontcolour("white"), text("HPF Type"), fontcolour(100,100,100)
combobox bounds(  0, 40, 75, 20), channel("HPFtype"), text("Bypass","6 db/oct","12 db/oct","24 db/oct","Resonant"), textcolour("white"), colour(37,59,59), value(3)
rslider  bounds( 70, 20, 75, 75), text("Res."),channel("HPFres"), range(0,1,0.3,0.5,0.01), textcolour("white"), colour(37,59,59), trackercolour("Silver"), identchannel("HPFresID")
rslider  bounds(140, 20, 75, 75), text("Min."),channel("HPFmin"), range(4,14, 4), textcolour("white"), colour(37,59,59), trackercolour("Silver"), identchannel("HPFminID")
rslider  bounds(210, 20, 75, 75), text("Max."),channel("HPFmax"), range(4,14, 6), textcolour("white"), colour(37,59,59), trackercolour("Silver"), identchannel("HPFmaxID")
}
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-d -n
</CsOptions>

<CsInstruments>
sr = 44100
ksmps = 32
nchnls = 2
0dbfs = 1

instr 1                                                         
 kRateMin	chnget "RateMin"
 kRateMax	chnget "RateMax"
 kLPFtype	chnget "LPFtype"
 kLPFres	chnget "LPFres"
 kLPFmin	chnget "LPFmin"
 kLPFmax	chnget "LPFmax"

 kHPFtype	chnget "HPFtype"
 kHPFres	chnget "HPFres"
 kHPFmin	chnget "HPFmin"
 kHPFmax	chnget "HPFmax"

 kPanWidth	chnget "PanWidth"
 kPanDepth	chnget "PanDepth"

 kAmpMin	chnget "AmpMin"
 kAmpMax	chnget "AmpMax"

 kBypass	chnget	"Bypass"
 
 aL,aR	ins
 
 if kBypass==1 then
  	outs	aL,aR
  	kgoto BYPASS
 endif
 
 ;aL	vco2	0.1,100
 ;aR	vco2	0.1,100
 
 kLPFoct	rspline	kLPFmin,kLPFmax,kRateMin,kRateMax
 kHPFoct	rspline	5,14,kRateMin,kRateMax

 kLPFoct	limit	kLPFoct,4,14
 kHPFoct	limit	kHPFoct,4,14
 
 if kLPFtype==2 then
  aL	tone	aL,cpsoct(kLPFoct)
  aR	tone	aR,cpsoct(kLPFoct)
 elseif kLPFtype==3 then
  aLPFoct	interp	kLPFoct
  aL	butlp	aL,cpsoct(aLPFoct)
  aR	butlp	aR,cpsoct(aLPFoct)
 elseif kLPFtype==4 then
  aLPFoct	interp	kLPFoct
  aL	butlp	aL,cpsoct(aLPFoct)
  aR	butlp	aR,cpsoct(aLPFoct)
  aL	butlp	aL,cpsoct(aLPFoct)
  aR	butlp	aR,cpsoct(aLPFoct)
 elseif kLPFtype==5 then
  aL	moogladder	aL,cpsoct(kLPFoct),kLPFres
  aR	moogladder	aR,cpsoct(kLPFoct),kLPFres
 endif

 if kHPFtype==2 then
  aL	atone	aL,cpsoct(kHPFoct)
  aR	atone	aR,cpsoct(kHPFoct)
 elseif kHPFtype==3 then
  aHPFoct	interp	kHPFoct
  aL	buthp	aL,cpsoct(aHPFoct)
  aR	buthp	aR,cpsoct(aHPFoct)
 elseif kHPFtype==4 then
  aHPFoct	interp	kHPFoct
  aL	buthp	aL,cpsoct(aHPFoct)
  aR	buthp	aR,cpsoct(aHPFoct)
  aL	buthp	aL,cpsoct(aHPFoct)
  aR	buthp	aR,cpsoct(aHPFoct)
 elseif kHPFtype==5 then
  aL	bqrez	aL,cpsoct(kHPFoct),1+(kHPFres*40),1
  aR	bqrez	aR,cpsoct(kHPFoct),1+(kHPFres*40),1
 endif

 aPan	rspline	-kPanWidth, kPanWidth, kRateMin, kRateMax
 aPan	=	(aPan*0.5) + 0.5 
 aOutL  =     aL * sin((aPan + 0.5) * $M_PI_2)
 aOutR  =     aR * cos((aPan + 0.5) * $M_PI_2)

 if kPanDepth>0 then
  aOutL	vdelay	aOutL, 0.1+(aPan*kPanDepth*3), 20
  aOutR	vdelay	aOutR, 0.1+((1-aPan)*kPanDepth*3), 20
 endif

 aAmp	rspline	kAmpMin, kAmpMax, kRateMin, kRateMax

	outs	aOutL*aAmp,aOutR*aAmp
 BYPASS:
endin

</CsInstruments>

<CsScore>                                              
i 1 0 [60*60*24*7]
</CsScore>

</CsoundSynthesizer>                                                  ; FormantFilter.csd

; reson 1 uses reson with scaling method 1.
; reson 2 uses reson with scaling method 2.
; 'gain' controls the gain the the bandpass filtered sound only.
; 'BW.Mult' is a factor which all five bandwidth values are multiplied by.
; 'Freq.Mult.' is a factor by which all cutoff frequencies are multiplied by.

<Cabbage>
form caption("Formant Filter"), colour("SlateGrey"), size(550, 280), pluginid("form")   style("legacy")

xypad bounds(5, 5, 350, 260), channel("x", "y"), rangex(0, 1, 0.5), rangey(0, 1, 0), text("upper edge:A E I | lower :U O"), fontcolour("white")

vslider bounds(360,  0, 30,140), text("f1"), channel("f1"), range(0, 1.00, 1), textcolour("white")
vslider bounds(380,  0, 30,140), text("f2"), channel("f2"), range(0, 1.00, 1), textcolour("white")
vslider bounds(400,  0, 30,140), text("f3"), channel("f3"), range(0, 1.00, 1), textcolour("white")
vslider bounds(420,  0, 30,140), text("f4"), channel("f4"), range(0, 1.00, 1), textcolour("white")
vslider bounds(440,  0, 30,140), text("f5"), channel("f5"), range(0, 1.00, 1), textcolour("white")
combobox bounds(365, 150,100, 20), channel("voice"), value(1), text("bass", "tenor", "countertenor", "alto", "soprano")
combobox bounds(365, 180,100, 20), channel("filter"), value(1), text("reson 1", "reson 2", "butterworth")
checkbox bounds(365, 210,100, 15), colour("yellow"), channel("balance"),  value(0), text("Balance"), fontcolour("white")

label    bounds(365, 227,100, 12), text("Input Source"), fontcolour("white")
combobox bounds(365, 240,100, 20), channel("input"), value(1), text("Live", "Noise")

rslider bounds(480,  5, 60, 60), text("BW.Mult"),   channel("BWMlt"),  range(0.01, 4, 1, 0.4), textcolour("white")
rslider bounds(480, 70, 60, 60), text("Freq.Mult"), channel("FrqMlt"), range(0.25, 4, 1, 0.4), textcolour("white")
rslider bounds(480,140, 60, 60), text("Mix"),       channel("mix"),    range(0, 1.00, 1),      textcolour("white")
rslider bounds(480,210, 60, 60), text("Gain"),      channel("gain"),   range(0, 5.00, 1, 0.5), textcolour("white")
</Cabbage>
<CsoundSynthesizer>
<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>
<CsInstruments>
sr 	= 	44100
ksmps 	= 	32
nchnls 	= 	2
0dbfs	=	1

;Author: Iain McCurdy (2012)

;FUNCTION TABLES STORING DATA FOR VARIOUS VOICE FORMANTS
;THE FIRST VALUE OF EACH TABLE DEFINES THE NUMBER OF DATA ELEMENTS IN THE TABLE
; THIS IS NEEDED BECAUSE TABLES SIZES MUST BE POWERS OF 2 TO FACILITATE INTERPOLATED TABLE READING (tablei) 
;BASS
giBFA	ftgen	0,  0, 8, -2,	4, 600,		400,	250,	350	;FREQ
giBFE	ftgen	0,  0, 8, -2,	4, 1040,	1620,	1750,	600	;FREQ
giBFI	ftgen	0,  0, 8, -2,	4, 2250,	2400,	2600,	2400	;FREQ
giBFO	ftgen	0,  0, 8, -2,	4, 2450,	2800,	3050,	2675	;FREQ
giBFU	ftgen	0,  0, 8, -2,	4, 2750,	3100,	3340,	2950	;FREQ

giBDbA	ftgen	0, 0, 8, -2,	4, 0,	0,	0,	0	;dB
giBDbE	ftgen	0, 0, 8, -2,	4, -7,	-12,	-30,	-20	;dB
giBDbI	ftgen	0, 0, 8, -2,	4, -9,	-9,	-16,	-32	;dB
giBDbO	ftgen	0, 0, 8, -2,	4, -9,	-12,	-22,	-28	;dB
giBDbU	ftgen	0, 0, 8, -2,	4, -20,	-18,	-28,	-36	;dB

giBBWA	ftgen	0, 0, 8, -2,	4, 60,	40,	60,	40	;BAND WIDTH
giBBWE	ftgen	0, 0, 8, -2,	4, 70,	80,	90,	80	;BAND WIDTH
giBBWI	ftgen	0, 0, 8, -2,	4, 110,	100,	100,	100	;BAND WIDTH
giBBWO	ftgen	0, 0, 8, -2,	4, 120,	120,	120,	120	;BAND WIDTH
giBBWU	ftgen	0, 0, 8, -2,	4, 130,	120,	120,	120	;BAND WIDTH
;TENOR
giTFA	ftgen	0, 0, 8, -2,	5, 650, 	400,	290,	400,	350	;FREQ
giTFE	ftgen	0, 0, 8, -2,	5, 1080, 	1700,   1870,	800,	600	;FREQ
giTFI	ftgen	0, 0, 8, -2,	5, 2650,	2600,   2800,	2600,	2700	;FREQ
giTFO	ftgen	0, 0, 8, -2,	5, 2900,	3200,   3250,	2800,	2900	;FREQ
giTFU	ftgen	0, 0, 8, -2,	5, 3250,	3580,   3540,	3000,	3300	;FREQ

giTDbA	ftgen	0, 0, 8, -2,	5, 0,	0,	0,	0,	0	;dB
giTDbE	ftgen	0, 0, 8, -2,	5, -6,	-14,	-15,	-10,	-20	;dB
giTDbI	ftgen	0, 0, 8, -2,	5, -7,	-12,	-18,	-12,	-17	;dB
giTDbO	ftgen	0, 0, 8, -2,	5, -8,	-14,	-20,	-12,	-14	;dB
giTDbU	ftgen	0, 0, 8, -2,	5, -22,	-20,	-30,	-26,	-26	;dB

giTBWA	ftgen	0, 0, 8, -2,	5, 80,	70,	40,	40,	40	;BAND WIDTH
giTBWE	ftgen	0, 0, 8, -2,	5, 90,	80,	90,	80,	60	;BAND WIDTH
giTBWI	ftgen	0, 0, 8, -2,	5, 120,	100,	100,	100,	100	;BAND WIDTH
giTBWO	ftgen	0, 0, 8, -2,	5, 130,	120,	120,	120,	120	;BAND WIDTH                                         
giTBWU	ftgen	0, 0, 8, -2,	5, 140,	120,	120,	120,	120	;BAND WIDTH
;COUNTER TENOR
giCTFA	ftgen	0, 0, 8, -2,	5, 660,		440,	270,	430,	370	;FREQ
giCTFE	ftgen	0, 0, 8, -2,	5, 1120,	1800,	1850,	820,	630	;FREQ
giCTFI	ftgen	0, 0, 8, -2,	5, 2750,	2700,	2900,	2700,	2750	;FREQ
giCTFO	ftgen	0, 0, 8, -2,	5, 3000,	3000,	3350,	3000,	3000	;FREQ
giCTFU	ftgen	0, 0, 8, -2,	5, 3350,	3300,	3590,	3300,	3400	;FREQ

giTBDbA	ftgen	0, 0, 8, -2,	5, 0,	0,	0,	0,	0	;dB
giTBDbE	ftgen	0, 0, 8, -2,	5, -6,	-14,	-24,	-10,	-20	;dB
giTBDbI	ftgen	0, 0, 8, -2,	5, -23,	-18,	-24,	-26,	-23	;dB
giTBDbO	ftgen	0, 0, 8, -2,	5, -24,	-20,	-36,	-22,	-30	;dB
giTBDbU	ftgen	0, 0, 8, -2,	5, -38,	-20,	-36,	-34,	-30	;dB

giTBWA	ftgen	0, 0, 8, -2,	5, 80,	70,	40,	40,	40	;BAND WIDTH
giTBWE	ftgen	0, 0, 8, -2,	5, 90,	80,	90,	80,	60	;BAND WIDTH
giTBWI	ftgen	0, 0, 8, -2,	5, 120,	100,	100,	100,	100	;BAND WIDTH
giTBWO	ftgen	0, 0, 8, -2,	5, 130,	120,	120,	120,	120	;BAND WIDTH
giTBWU	ftgen	0, 0, 8, -2,	5, 140,	120,	120,	120,	120	;BAND WIDTH
;ALTO
giAFA	ftgen	0, 0, 8, -2,	5, 800,		400,	350,	450,	325	;FREQ
giAFE	ftgen	0, 0, 8, -2,	5, 1150,	1600,	1700,	800,	700	;FREQ
giAFI	ftgen	0, 0, 8, -2,	5, 2800,	2700,	2700,	2830,	2530	;FREQ
giAFO	ftgen	0, 0, 8, -2,	5, 3500,	3300,	3700,	3500,	2500	;FREQ
giAFU	ftgen	0, 0, 8, -2,	5, 4950,	4950,	4950,	4950,	4950	;FREQ

giADbA	ftgen	0, 0, 8, -2,	5, 0,	0,	0,	0,	0	;dB
giADbE	ftgen	0, 0, 8, -2,	5, -4,	-24,	-20,	-9,	-12	;dB
giADbI	ftgen	0, 0, 8, -2,	5, -20,	-30,	-30,	-16,	-30	;dB
giADbO	ftgen	0, 0, 8, -2,	5, -36,	-35,	-36,	-28,	-40	;dB
giADbU	ftgen	0, 0, 8, -2,	5, -60,	-60,	-60,	-55,	-64	;dB

giABWA	ftgen	0, 0, 8, -2,	5, 50,	60,	50,	70,	50	;BAND WIDTH
giABWE	ftgen	0, 0, 8, -2,	5, 60,	80,	100,	80,	60	;BAND WIDTH
giABWI	ftgen	0, 0, 8, -2,	5, 170,	120,	120,	100,	170	;BAND WIDTH
giABWO	ftgen	0, 0, 8, -2,	5, 180,	150,	150,	130,	180	;BAND WIDTH
giABWU	ftgen	0, 0, 8, -2,	5, 200,	200,	200,	135,	200	;BAND WIDTH
;SOPRANO
giSFA	ftgen	0, 0, 8, -2,	5, 800,		350,	270,	450,	325	;FREQ
giSFE	ftgen	0, 0, 8, -2,	5, 1150,	2000,	2140,	800,	700	;FREQ
giSFI	ftgen	0, 0, 8, -2,	5, 2900,	2800,	2950,	2830,	2700	;FREQ
giSFO	ftgen	0, 0, 8, -2,	5, 3900,	3600,	3900,	3800,	3800	;FREQ
giSFU	ftgen	0, 0, 8, -2,	5, 4950,	4950,	4950,	4950,	4950	;FREQ

giSDbA	ftgen	0, 0, 8, -2,	5, 0,	0,	0,	0,	0	;dB
giSDbE	ftgen	0, 0, 8, -2,	5, -6,	-20,	-12,	-11,	-16	;dB
giSDbI	ftgen	0, 0, 8, -2,	5, -32,	-15,	-26,	-22,	-35	;dB
giSDbO	ftgen	0, 0, 8, -2,	5, -20,	-40,	-26,	-22,	-40	;dB
giSDbU	ftgen	0, 0, 8, -2,	5, -50,	-56,	-44,	-50,	-60	;dB

giSBWA	ftgen	0, 0, 8, -2,	5, 80,	60,	60,	70,	50	;BAND WIDTH
giSBWE	ftgen	0, 0, 8, -2,	5, 90,	90,	90,	80,	60	;BAND WIDTH
giSBWI	ftgen	0, 0, 8, -2,	5, 120,	100,	100,	100,	170	;BAND WIDTH
giSBWO	ftgen	0, 0, 8, -2,	5, 130,	150,	120,	130,	180	;BAND WIDTH
giSBWU	ftgen	0, 0, 8, -2,	5, 140,	200,	120,	135,	200	;BAND WIDTH

instr	1
	gkx		chnget	"x"
	gky		chnget	"y"
	gkf1		chnget	"f1"
	gkf2		chnget	"f2"
	gkf3		chnget	"f3"
	gkf4		chnget	"f4"
	gkf5		chnget	"f5"
	gkvoice		chnget	"voice"
	gkvoice		init	1
	gkBWMlt		chnget	"BWMlt"
	gkFrqMlt	chnget	"FrqMlt"
	gkmix		chnget	"mix"
	gkgain		chnget	"gain"
	gkfilter	chnget	"filter"
	gkbalance	chnget	"balance"
	gkinput		chnget	"input"
	gkinput		init	1
endin

instr	2	
	kporttime	linseg	0,0.001,0.1                                                     
	
	if gkinput==1 then
	 asigL,asigR	ins
	else
	 asigL	pinkish	1
	 asigR	pinkish	1
	endif
		
	kx	portk	gkx,kporttime
	ky	portk	gky,kporttime	
	
	kSwitch		changed	gkvoice	;GENERATE A MOMENTARY '1' PULSE IN OUTPUT 'kSwitch' IF ANY OF THE SCANNED INPUT VARIABLES CHANGE. (OUTPUT 'kSwitch' IS NORMALLY ZERO)
	if	kSwitch=1	then		;IF I-RATE VARIABLE CHANGE TRIGGER IS '1'...
		reinit	START			;BEGIN A REINITIALISATION PASS FROM LABEL 'START'
	endif
	START:		
	;A TEXT MACRO IS DEFINED THAT WILL BE THE CODE FOR DERIVING DATA FOR EACH FORMANT. A MACRO IS USED TO AVOID HAVING TO USING CODE REPETITION AND TO EASIER FACICLITATE CODE MODIFICATION
#define	FORMANT_DATA(N)	
	#
	invals		table		0, giBFA+((i(gkvoice)-1)*15)+$N-1					;NUMBER OF DATA ELEMENTS IN EACH TABLE
	invals	=	invals-1									;
	kfreq$N._U	tablei		1+(kx*(3/5)*invals),giBFA+((i(gkvoice)-1)*15)+$N-1			;READ DATA FOR FREQUENCY (UPPER EDGE OF PANEL)
	kfreq$N._L	tablei		1+(((1-kx)*(1/5))+(4/5)*invals),giBFA+((i(gkvoice)-1)*15)+$N-1	;READ DATA FOR FREQUENCY (LOWER EDGE OF PANEL)
	kfreq$N		ntrpol		kfreq$N._L, kfreq$N._U, ky					;INTERPOLATE BETWEEN UPPER VALUE AND LOWER VALUE (DETERMINED BY Y-LOCATION ON PANEL)                          
	kfreq$N		=		kfreq$N * gkFrqMlt						;MULTIPLY FREQUENCY VALUE BY VALUE FROM 'Frequency Multiply' SLIDER
	kdbamp$N._U	tablei		1+(kx*(3/5)*invals),giBDbA+((i(gkvoice)-1)*15)+$N-1		;READ DATA FOR INTENSITY (UPPER EDGE OF PANEL)                                      
	kdbamp$N._L	tablei		1+(((1-kx)*(1/5))+(4/5)*invals),giBDbA+((i(gkvoice)-1)*15)+$N-1	;READ DATA FOR INTENSITY (LOWER EDGE OF PANEL)                                      
	kdbamp$N	ntrpol		kdbamp$N._L, kdbamp$N._U, ky                   			;INTERPOLATE BETWEEN UPPER VALUE AND LOWER VALUE (DETERMINED BY Y-LOCATION ON PANEL)
	kbw$N._U	tablei		1+(kx*(3/5)*invals),giBBWA+((i(gkvoice)-1)*15)+$N-1		;READ DATA FOR BANDWIDTH (UPPER EDGE OF PANEL)                                      
	kbw$N._L	tablei		1+(((1-kx)*(1/5))+(4/5)*invals),giBBWA+((i(gkvoice)-1)*15)+$N-1	;READ DATA FOR BANDWIDTH (LOWER EDGE OF PANEL)                                      
	kbw$N		ntrpol		kbw$N._L, kbw$N._U, ky						;INTERPOLATE BETWEEN UPPER VALUE AND LOWER VALUE (DETERMINED BY Y-LOCATION ON PANEL)
	kbw$N		=		kbw$N * gkBWMlt							;MULTIPLY BANDWIDTH VALUE BY VALUE FROM 'Bandwidth Multiply' SLIDER
	#												;END OF MACRO!

;READING DATA FOR FORMANTS (MACROS IMPLEMENTED)
	$FORMANT_DATA(1)
	$FORMANT_DATA(2)
	$FORMANT_DATA(3)
	$FORMANT_DATA(4)
	$FORMANT_DATA(5)

	rireturn	;RETURN FROM REINITIALISATION PASS TO PERFORMANCE TIME PASSES
	
	if gkfilter==1 then
	 aBPF1L	reson	asigL, kfreq1, kbw1, 1			;FORMANT 1
	 aBPF1R	reson	asigR, kfreq1, kbw1, 1			;FORMANT 1
	 ;                                                        
	 aBPF2L	reson	asigL, kfreq2, kbw2, 1			;FORMANT 2
	 aBPF2R	reson	asigR, kfreq2, kbw2, 1			;FORMANT 2
	 ;                                                       
	 aBPF3L	reson	asigL, kfreq3, kbw3, 1			;FORMANT 3
	 aBPF3R	reson	asigR, kfreq3, kbw3, 1			;FORMANT 3
	 ;                                                        
	 aBPF4L	reson	asigL, kfreq4, kbw4, 1			;FORMANT 4
	 aBPF4R	reson	asigR, kfreq4, kbw4, 1			;FORMANT 4
	 ;                                                       
	 aBPF5L	reson	asigL, kfreq5, kbw5, 1			;FORMANT 5
	 aBPF5R	reson	asigR, kfreq5, kbw5, 1			;FORMANT 5
	elseif gkfilter==2 then
	 aBPF1L	reson	asigL, kfreq1, kbw1, 2			;FORMANT 1
	 aBPF1R	reson	asigR, kfreq1, kbw1, 2			;FORMANT 1
	 ;                                                        
	 aBPF2L	reson	asigL, kfreq2, kbw2, 2			;FORMANT 2
	 aBPF2R	reson	asigR, kfreq2, kbw2, 2			;FORMANT 2
	 ;                                                       
	 aBPF3L	reson	asigL, kfreq3, kbw3, 2			;FORMANT 3
	 aBPF3R	reson	asigR, kfreq3, kbw3, 2			;FORMANT 3
	 ;                                                        
	 aBPF4L	reson	asigL, kfreq4, kbw4, 2			;FORMANT 4
	 aBPF4R	reson	asigR, kfreq4, kbw4, 2			;FORMANT 4
	 ;                                                       
	 aBPF5L	reson	asigL, kfreq5, kbw5, 2			;FORMANT 5
	 aBPF5R	reson	asigR, kfreq5, kbw5, 2			;FORMANT 5
	else
	 aBPF1L	butbp	asigL, kfreq1, kbw1			;FORMANT 1
	 aBPF1R	butbp	asigR, kfreq1, kbw1			;FORMANT 1
	 ;                                                        
	 aBPF2L	butbp	asigL, kfreq2, kbw2			;FORMANT 2
	 aBPF2R	butbp	asigR, kfreq2, kbw2			;FORMANT 2
	 ;                                                       
	 aBPF3L	butbp	asigL, kfreq3, kbw3			;FORMANT 3
	 aBPF3R	butbp	asigR, kfreq3, kbw3			;FORMANT 3
	 ;                                                        
	 aBPF4L	butbp	asigL, kfreq4, kbw4			;FORMANT 4
	 aBPF4R	butbp	asigR, kfreq4, kbw4			;FORMANT 4
	 ;                                                       
	 aBPF5L	butbp	asigL, kfreq5, kbw5			;FORMANT 5
	 aBPF5R	butbp	asigR, kfreq5, kbw5			;FORMANT 5
	endif	
	
	if gkbalance==1 then
	 aBPF1L	balance	aBPF1L,asigL,0.1
	 aBPF1R	balance	aBPF1R,asigR,0.1
	 aBPF2L	balance	aBPF2L,asigL,0.1
	 aBPF2R	balance	aBPF2R,asigR,0.1
	 aBPF3L	balance	aBPF3L,asigL,0.1
	 aBPF3R	balance	aBPF3R,asigR,0.1
	 aBPF4L	balance	aBPF4L,asigL,0.1
	 aBPF4R	balance	aBPF4R,asigR,0.1
	 aBPF5L	balance	aBPF5L,asigL,0.1
	 aBPF5R	balance	aBPF5R,asigR,0.1
	endif

	;FORMANTS ARE MIXED AND MULTIPLIED BOTH BY INTENSITY VALUES DERIVED FROM TABLES AND BY THE ON-SCREEN GAIN CONTROLS FOR EACH FORMANT 
	aMixL	sum	aBPF1L*(ampdbfs(kdbamp1))*gkf1, aBPF2L*(ampdbfs(kdbamp2))*gkf2, aBPF3L*(ampdbfs(kdbamp3))*gkf3, aBPF4L*(ampdbfs(kdbamp4))*gkf4, aBPF5L*(ampdbfs(kdbamp5))*gkf5
	aMixR	sum	aBPF1R*(ampdbfs(kdbamp1))*gkf1, aBPF2R*(ampdbfs(kdbamp2))*gkf2, aBPF3R*(ampdbfs(kdbamp3))*gkf3, aBPF4R*(ampdbfs(kdbamp4))*gkf4, aBPF5R*(ampdbfs(kdbamp5))*gkf5

	aOutMixL	ntrpol	asigL, aMixL*gkgain, gkmix	;MIX BETWEEN DRY AND WET SIGNALS
	aOutMixR	ntrpol	asigR, aMixR*gkgain, gkmix	;MIX BETWEEN DRY AND WET SIGNALS

		outs	aOutMixL, aOutMixR				;SEND AUDIO TO OUTPUTS
endin

instr	99			; fix cabbage bug
	kon	=	1
		chnset	kon,"f1"
endin

</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
i 2 0 [3600*24*7]
;i 99 0 0.03			; fix for cabbage bug
</CsScore>

</CsoundSynthesizer>
; HarpFilter.csd

; Creates a stack of waveguides simulating a resonating bank of strings
; ** WARNING ** 	THIS EFFECT CAN APPLY VAST AMOUNTS OF RESONATING FEEDBACK THEREFORE LARGE AMOUNTS OF GAIN ARE POSSIBLE.
;					TAKE PARTICULAR CARE WHEN USING A LIVE AUDIO INPUT.
;					IF IN DOUBT, REDUCE THE FEEDBACK VALUE.

; Tunings of strings are not controlled individually but are instead defined using several global controls.

; Frequency		-	Base frequency of the stack of waveguide filters
; Cutoff		-	Cutoff frequency of a 1st order lowpass filter within the feedback loop of each waveguide unit
; Spacing		-	The spacing method used between adjacent waveguide filters: Geometric or Arithmetic
; Interval		-	Interval factor between adjacent filters.
;				 If 'Spacing' is geometric then Interval is applied geometrically, each time multiplying it to the previous frequency to derive the next.
;				 In this mode the value Interval actually defines an interval in semitones so an interval of 12 will produce a ratio of 2
;				 e.g. if base frequency is 200 and interval is 12, the sequence is 200,400,800,1600 
;				 If 'Spacing' is 'Arithmetic' then this is applied arithmetically each time adding base_frequency to the frequency of the previous filter to derive the frequency of the next.
;				 e.g. if base frequency is 200, interval is 1, the sequence is 200,400,600,800 etc... i.e. harmonic
; Number		-	The number of waveguides to be created
; Lowest		-	The Lowest filter in the sequence. i.e. shift the stacks up in steps as this is increased.
; Reflect		-	If activated, additional waveguide filters are created at frequencies reflected beneath the base frequency according to the geometric or arithmetric rules. Activating 'Reflect' will double the number of filters used.
; Strength		-	number of series iterations of the filters (single/double/triple). Increasing numbers of iterations sharpens the filtering effect and increases the resonance.
; Filter Type	-	choose between wguide1 and streson. streson will provide better tuning but wguide1 will provide smoother results when modulating its cutoff frequency.
; Width			-	offsets the frequencies of the left and right channels to imbue added stereo width
; Random		-	range of random offsets added to waveguide frequencies
; Lowcut		-	Inserts a 24dB/oct highpass filter after each waveguide, the cutoff of which corresponds to the cutoff of that filter.
; Port.			-	Portamento time applied to changes made to frequency for each waveguide (and by extension also changes made to 'Interval'). Large portamento times are possible thereby permitting slow morphs. 
; Feedback		-	feedback ratio of each waveguide unit.
;				 negative feedback will shift the fundemental down one octave and only odd harmonics will be preset
; Attack		-	Attack time of each new note played 
; Decay			-	Decay time of the input sound once a note is released
; Release		-	Release time of the outputs of the waveguides after a note is released
; Level			-	Output amplitude control

<Cabbage>
form caption("Harp Filter") size(1080,205), pluginid("HaFi") style("legacy")
image             bounds(  0,  0,1080,125), colour("silver"), shape("sharp")

;checkbox  bounds(  7,  5, 70, 12), text("Keyboard"), channel("input"), fontcolour("black")

label     bounds(  7, 20, 80, 13), text("Freq.Input"), fontcolour("black")
combobox  bounds(  7, 34, 80, 16), text("Freq.","Note Number","Keyboard"), channel("input"), value(1)  

label     bounds(  7, 60, 80, 13), text("Audio Input"), fontcolour("black")
combobox  bounds(  7, 74, 80, 16), text("Live","Dust","P.Noise","W.Noise"), channel("InSigMode"), value(2)  

label     bounds( 92, 42, 66, 13), text("Frequency"), fontcolour("black"), identchannel("freqID0")
rslider   bounds(102, 58, 42, 42),  channel("freq"), fontcolour("black"), textcolour("black"), trackercolour("DarkSlateGrey"), range(1,5000,150,0.5,0.01), identchannel("freqID1")
nslider bounds( 93,100, 60, 17),  channel("freq"), colour("white"), fontcolour("black"), textcolour("black"), trackercolour("DarkSlateGrey"), range(1,5000,150,0.5,0.01), identchannel("freqID2")

label     bounds( 92, 42, 66, 13), text("Note Num."), fontcolour("black"), identchannel("NNID0"), visible(0)
rslider   bounds(102, 58, 42, 42),  channel("NoteNumber"), fontcolour("black"), textcolour("black"), trackercolour("DarkSlateGrey"), range(10,110,50,1,0.01), identchannel("NNID1"), visible(0)
nslider bounds( 93,100, 60, 17),  channel("NoteNumber"), colour("white"), fontcolour("black"), textcolour("black"), trackercolour("DarkSlateGrey"), range(10,110,50,1,0.01), identchannel("NNID2"), visible(0)

image    bounds(160,  5, 75,115), outlinethickness(1), line(1), outlinecolour("darkslategrey"), shape("sharp"), plant("cutoff") {
label    bounds(  5,  3, 65, 11), text("Cutoff"), fontcolour("black")
combobox bounds(  5, 15, 65, 16), text("Fixed","Ratio"), channel("CutoffMode"), value(1)  
rslider  bounds(  0, 35, 75, 75), text("Hertz"),      channel("cutoff"),      valuetextbox(1), textbox(1), fontcolour("black"), textcolour("black"), trackercolour("DarkSlateGrey"), range(20,22000,8000,0.5,1), identchannel("cutoff_ident")
rslider  bounds(  0, 35, 75, 75), text("Ratio"),      channel("CutoffRatio"), valuetextbox(1), textbox(1), fontcolour("black"), textcolour("black"), trackercolour("DarkSlateGrey"), range(1,60,21,1,1), identchannel("CutoffRatio_ident")
}

image    bounds(245,  5,395,115), outlinethickness(1), line(1), outlinecolour("darkslategrey"), shape("sharp")
label    bounds(260,  8, 80, 11), text("Spacing"), fontcolour("black")
combobox bounds(260, 20, 80, 16), text("Geometric","Arithmetic"), channel("type"), value(2)  
checkbox bounds(360, 20, 55, 12), text("Reflect"),      channel("dual"),  fontcolour("black")
label    bounds(440,  8,  80, 11), text("Strength"), fontcolour("black")
combobox bounds(440, 20, 80, 16), text("Single","Double","Triple","Quadruple"), channel("Iterations")
label    bounds(545,  8,  80, 11), text("Filter Type"), fontcolour("black")
combobox bounds(545, 20, 80, 16), text("wguide1","streson"), channel("FilterType"), value(1)
rslider   bounds(250, 40, 75, 75), text("Interval"),  channel("interval"),   valuetextbox(1), textbox(1), fontcolour("black"), textcolour("black"), trackercolour("DarkSlateGrey"), range(-12,12,0.25)
nslider bounds(260,100, 55, 16),                    channel("interval"),   range(-24,24,0.25,1,0.0001), colour("white"), fontcolour("black")
rslider  bounds(320, 40, 75, 75), text("Number"),     channel("max"),         valuetextbox(1), textbox(1), fontcolour("black"), textcolour("black"), trackercolour("DarkSlateGrey"), range(1,100,11,1,1)
rslider  bounds(380, 40, 75, 75), text("Lowest"),     channel("min"),      valuetextbox(1), textbox(1), fontcolour("black"), textcolour("black"), trackercolour("DarkSlateGrey"), range(1,100,1,1,1)
rslider  bounds(440, 41, 75, 75), text("Width"),      channel("StWidth"),   range(-0.5, 0.5, 0, 1,0.001), valuetextbox(1), textbox(1), fontcolour("black"), textcolour("black"), trackercolour("DarkSlateGrey")
rslider  bounds(500, 41, 75, 75), text("Random"),     channel("RndFactor"),   range(0, 5, 0, 0.5,0.001), valuetextbox(1), textbox(1), fontcolour("black"), textcolour("black"), trackercolour("DarkSlateGrey")
rslider  bounds(560, 41, 75, 75), text("Tune"),       channel("Tune"),       range(-100,100, 0, 1,1), valuetextbox(1), textbox(1), fontcolour("black"), textcolour("black"), trackercolour("DarkSlateGrey")

checkbox bounds(660, 20, 70, 12), text("Low Cut"),     channel("LowCut"),  fontcolour("black")
rslider  bounds(640, 40, 75, 75), text("Port."),   channel("Portamento"), valuetextbox(1), textbox(1), fontcolour("black"), textcolour("black"), trackercolour("DarkSlateGrey"), range(0.1,99,0.1,0.5,0.01)
nslider bounds(710, 55, 55, 35), text("Feedback"),  channel("feedback"), range(-0.99999,0.99999,0.99,1,0.00001), colour("white"), fontcolour("black"), textcolour("black")
rslider  bounds(760, 40, 75, 75), text("Attack"), channel("Att"),         valuetextbox(1), textbox(1), fontcolour("black"), textcolour("black"), trackercolour("DarkSlateGrey"), range(0.05,10,0.05,0.5)
rslider  bounds(820, 40, 75, 75), text("Decay"),  channel("Dec"),         valuetextbox(1), textbox(1), fontcolour("black"), textcolour("black"), trackercolour("DarkSlateGrey"), range(0.05,2,0.05,0.5)
rslider  bounds(880, 40, 75, 75), text("Release"),channel("Rel"),         valuetextbox(1), textbox(1), fontcolour("black"), textcolour("black"), trackercolour("DarkSlateGrey"), range(0.05,20,15,0.5,0.01)
rslider  bounds(940, 40, 75, 75), text("Mix"),    channel("Mix"),         valuetextbox(1), textbox(1), fontcolour("black"), textcolour("black"), trackercolour("DarkSlateGrey"), range(0,1,1,0.5,0.001)
rslider  bounds(1000, 40, 75, 75), text("Level"),  channel("amp"),        valuetextbox(1), textbox(1), fontcolour("black"), textcolour("black"), trackercolour("DarkSlateGrey"), range(0,2,0.7,0.5,0.001)

keyboard bounds(  0,125,1080, 80)

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1
		seed	0
		massign	0,2

giTriDist	ftgen	0,0,1024,21,3,1

gkFilterType	init	1

;A RECURSIVE UDO IS USED TO CREATE THE STACK OF WGUIDE1S
opcode	filterstack, a, akkkkkkkkii					;OPCODE DEFINITION
ain,kfreq,kRndFactor,kcutoff,kLowCut,kfeedback,kint,kPortTime,ktype,icount,imax	xin		;INPUT ARG NAMES
	amix	=	0
	iRnd	trirand	1
	kRnd	=	iRnd * kRndFactor
	if ktype==0 then						;IF GEOMETRIC MODE HAS BEEN CHOSEN...
	 kfreq2	=	kfreq*semitone(kint*(icount-1) + kRnd)			;DEFINE FREQUENCY FOR THIS WGUIDE1 ACCORDING TO THE BASE FREQUENCY, INTERVAL AND THE COUNTER (LOCATION IN SERIES)
	else								;OTHERWISE MUST BE ARITHMETIC MODE
	 kfreq2	=	(kfreq+(kfreq*(icount-1)*kint)) * semitone(kRnd)			;DEFINE FREQUENCY FOR THIS WGUIDE1 ACCORDING TO THE BASE FREQUENCY, INTERVAL AND THE COUNTER (LOCATION IN SERIES)
	endif								;END OF CONDITIONAL
	if abs(kfreq2)>sr/3||abs(kfreq2)<20 then			;IF FREQUENCY IS OUTSIDE OF A SENSIBLE RANGE JUMP THE CREATION OF THE WGUIDE1 ALTOGETHER
	 asig	=	0
	else
	 kramp	linseg	0,0.001,1
	 kfreq2	portk	kfreq2,kPortTime*kramp
	 if gkFilterType==1 then
	  asig	wguide1 ain, kfreq2, kcutoff, kfeedback			;CREATE THE WGUIDE1 SIGNAL
	 else
	  asig	streson	ain, kfreq2, kfeedback
;	  asig	butlp	asig,a(kcutoff)
	  asig	clfilt	asig,kcutoff,0,2
	 endif
	 if kLowCut==1 then
	  asig	buthp	asig,kfreq2
	  asig	buthp	asig,kfreq2	  
	 endif
	endif
	if icount<imax then						;IF THERE ARE STILL MORE WGUIDES TO CREATE IN THE STACK...
	  amix		filterstack	ain,kfreq,kRndFactor,kcutoff,kLowCut,kfeedback,kint,kPortTime,ktype,icount+1,imax	;CALL THE UDO AGAIN
	endif								;END OF CONDITIONAL
	skip:								;LABEL - SKIP TO HERE IF THE FREQUENCY WAS OUT OF RANGE
			xout		asig + amix			;SEND MIX OF ALL AUDIO BACK TO CALLER INSTRUMENT
endop									;END OF UDO


instr	1
	gkInSigMode		chnget	"InSigMode"				; input audio signal
	gkinput		chnget		"input"					; frequency input method (slider/keyboard)
	gkinput		init		1
	if gkInSigMode==1 then
	 gasigL,gasigR	ins
	elseif gkInSigMode==2 then						; &&gkinput!=1(temporaraily shelved) ; don't generate dust if 'keyboard' input is selected. It will be generated in instr 2.
	 gasigL	dust2	0.5,10*randomh:k(0.5,2,4)
	 gasigR	dust2	0.5,10*randomh:k(0.5,2,4)
	 gasigL	tone	gasigL,cpsoct(randomh:k(4,14,50))
	 gasigR	tone	gasigR,cpsoct(randomh:k(4,14,50))
	elseif gkInSigMode==3 then
	 gasigL		=	pinker()*0.2
	 gasigR		=	pinker()*0.2
	else
	 gasigL	noise	0.2,0
	 gasigR	noise	0.2,0
	endif
	
	kporttime	linseg		0,0.001,0.03
	
	gkfreq		chnget		"freq"
	gkNoteNumber		chnget		"NoteNumber"
	;gkfreq		portk		gkfreq,kporttime
	gkCutoffMode	chnget		"CutoffMode"
	gkcutoff	chnget		"cutoff"
	gkcutoff	portk		gkcutoff,kporttime
	gkCutoffRatio	chnget		"CutoffRatio"
	gkfeedback	chnget		"feedback"
	gkfeedback	portk		gkfeedback,kporttime
	gkinterval	chnget		"interval"
	;gkinterval	portk		gkinterval,kporttime
	gkmax		chnget		"max"
	gkmin		chnget		"min"
	ktype		chnget		"type"
	ktype		init		2
	gktype		=		ktype - 1	; COMBOBOX TO 0-1
	gkAtt		chnget		"Att"
	gkDec		chnget		"Dec"
	gkRel		chnget		"Rel"
	gkMix		chnget		"Mix"
	gkamp		chnget		"amp"
	gkPortamento	chnget		"Portamento"
	gkdual		chnget		"dual"
	gkLowCut	chnget		"LowCut"
	gkStWidth	chnget		"StWidth"
	gkRndFactor	chnget		"RndFactor"
	gkTune		chnget		"Tune"
	gkTune		*=		0.01				; CONVERT FROM CENTS TO SEMITONES
	gkLDiff		=		semitone(-gkStWidth+gkTune)
	gkRDiff		=		semitone(gkStWidth+gkTune)	
    gkIterations	chnget	"Iterations"
    gkFilterType	chnget	"FilterType"
	if changed(gkCutoffMode)==1 then
	 if gkCutoffMode==1 then
	  chnset	"visible(1)","cutoff_ident"
	  chnset	"visible(0)","CutoffRatio_ident"
	 else
	  chnset	"visible(0)","cutoff_ident"
	  chnset	"visible(1)","CutoffRatio_ident"
	 endif   
	endif

	if changed(gkinput)==1 then
	 if gkinput==1 then					; frequency
	  chnset	"visible(1)","freqID0"
	  chnset	"visible(1)","freqID1"
	  chnset	"visible(1)","freqID2"
	  chnset	"visible(0)","NNID0"
	  chnset	"visible(0)","NNID1"
	  chnset	"visible(0)","NNID2"
	 elseif gkinput==2 then				; note number
	  chnset	"visible(0)","freqID0"
	  chnset	"visible(0)","freqID1"
	  chnset	"visible(0)","freqID2"
	  chnset	"visible(1)","NNID0"
	  chnset	"visible(1)","NNID1"
	  chnset	"visible(1)","NNID2"
	 else								; keyboard
	  chnset	"visible(0)","freqID0"
	  chnset	"visible(0)","freqID1"
	  chnset	"visible(0)","freqID2"
	  chnset	"visible(0)","NNID0"
	  chnset	"visible(0)","NNID1"
	  chnset	"visible(0)","NNID2"	 
	 endif   
	endif
	
	event_i	"i",2,0.001,-1				; start instr 2 at startup

	if changed(gkinput)==1 then			; 
	 if gkinput<3 then
	  event	"i",2,0,-1
	 endif
	endif
endin
		
instr	2
	/* MIDI AND GUI INTEROPERABILITY */
	iMIDIflag	=	0			; IF MIDI ACTIVATED = 1, NON-MIDI = 0
	mididefault	1, iMIDIflag			; IF NOTE IS MIDI ACTIVATED REPLACE iMIDIflag WITH '1'

	if iMIDIflag==1 then				; IF THIS IS A MIDI ACTIVATED NOTE...
	 inum	notnum
	 ivel	veloc	0,1
	 p1	=	p1 + (rnd(1000)*0.0001)
	 if gkinput<3 then
	  turnoff
	 endif
	 icps	cpsmidi					; READ MIDI PITCH VALUES - THIS VALUE CAN BE MAPPED TO GRAIN DENSITY AND/OR PITCH DEPENDING ON THE SETTING OF THE MIDI MAPPING SWITCHES
	 kfreq	init		icps
	else
	 if gkinput==1 then						; frequency input
	  kfreq	=		gkfreq
	 elseif gkinput==2 then					; note number input
	  kfreq	=		cpsmidinn(gkNoteNumber)
	 endif
	endif						; END OF THIS CONDITIONAL BRANCH

	if trigger:k(gkinput,2.5,0)==1&&iMIDIflag==0 then		; turnoff non-midi notes if keyboard mode is selected
	 turnoff
	endif
	
	kRelease	release
	
	/* INPUT SIGNAL ENVELOPE */
	aenv		linsegr	0,i(gkAtt),1,i(gkDec),0
	
	
	; generating asig within MIDI instrument seems unreliable so is shelved in the meantime...
	/*
	;print	i(gkInSigMode)
	if i(gkInSigMode)==2&&iMIDIflag==1 then				; ensure a unique dust distribution if keyboard mode is selected
	 ;asigL	dust2	0.5,10*randomh:k(0.5,2,4)			; dust2 seems unreliable at the moment, use gausstrig instead...
	 ;asigR	dust2	0.5,10*randomh:k(0.5,2,4)
	 asigL	gausstrig 0.5, 15, 5
	 asigR	gausstrig 0.5, 15, 5
	 asigL	tone	asigL,cpsoct(randomh:k(4,14,50))
	 asigR	tone	asigR,cpsoct(randomh:k(4,14,50))
	 asigL	=		asigL*aenv
	 asigR	=		asigR*aenv
	else
	 asigL	=		gasigL * aenv
	 asigR	=		gasigR * aenv
	endif
	*/
	
	asigL	=		gasigL * aenv
	asigR	=		gasigR * aenv
	
	
	/* DERIVE LOWPASS FILETR CUTOFF DEPENDING UPON MODE SELECTION */
	if gkCutoffMode==2 then
	 kcutoff	limit	gkCutoffRatio*kfreq,20,sr/2
	else
	 kcutoff	=	gkcutoff
	endif	

	/*PORTAMENTO TIME FUNCTION*/
	kPortTime	linseg	0,0.001,1
	kPortTime	*=	gkPortamento

	kchange		changed		gkmax,gkmin,gkIterations,gkdual,gkFilterType,gkLowCut		;reiniting can also smooths interruptions and prevent very loud clicks
	if kchange==1 then					;IF NUMBER OF WGUIDE1S NEEDED OR THE START POINT IN THE SERIES HAS CHANGED...
	  reinit	update					;REINITIALISE THE STACK CREATION
	endif			
	update:							;REINIT FROM HERE
	;CALL THE UDO. (ONCE FOR EACH CHANNEL.)
	aresL		filterstack	asigL, kfreq*gkLDiff, gkRndFactor, kcutoff, gkLowCut, gkfeedback, gkinterval, kPortTime, gktype, i(gkmin), i(gkmax)+i(gkmin)-1
	aresR		filterstack	asigR, kfreq*gkRDiff, gkRndFactor, kcutoff, gkLowCut, gkfeedback, gkinterval, kPortTime, gktype, i(gkmin), i(gkmax)+i(gkmin)-1
	if i(gkIterations)>1 then
	 aresL		filterstack	aresL*0.03, kfreq*gkLDiff, gkRndFactor, kcutoff, gkLowCut, gkfeedback, gkinterval, kPortTime, gktype, i(gkmin), i(gkmax)+i(gkmin)-1
	 aresR		filterstack	aresR*0.03, kfreq*gkRDiff, gkRndFactor, kcutoff, gkLowCut, gkfeedback, gkinterval, kPortTime, gktype, i(gkmin), i(gkmax)+i(gkmin)-1
	endif
	if i(gkIterations)>2 then
	 aresL		filterstack	aresL*0.03, kfreq*gkLDiff, gkRndFactor, kcutoff, gkLowCut, gkfeedback, gkinterval, kPortTime, gktype, i(gkmin), i(gkmax)+i(gkmin)-1
	 aresR		filterstack	aresR*0.03, kfreq*gkRDiff, gkRndFactor, kcutoff, gkLowCut, gkfeedback, gkinterval, kPortTime, gktype, i(gkmin), i(gkmax)+i(gkmin)-1
	endif
	if i(gkIterations)>3 then
	 aresL		filterstack	aresL*0.03, kfreq*gkLDiff, gkRndFactor, kcutoff, gkLowCut, gkfeedback, gkinterval, kPortTime, gktype, i(gkmin), i(gkmax)+i(gkmin)-1
	 aresR		filterstack	aresR*0.03, kfreq*gkRDiff, gkRndFactor, kcutoff, gkLowCut, gkfeedback, gkinterval, kPortTime, gktype, i(gkmin), i(gkmax)+i(gkmin)-1
	endif

	if i(gkdual)==1 then	;DUAL DIRECTION WGUIDE1S SELECTED (NOTE NEGATIVE 'kinterval'
	 if i(gkmin)==1 then	;DON'T DOUBLE UP FUNDEMENTAL IF 'Lowest' IS '1'
	  imin	=	i(gkmin)+1
	  imax	=	i(gkmax)+i(gkmin)-2
	 else
	  imin	=	i(gkmin)
	  imax	=	i(gkmax)+i(gkmin)-1
	 endif
	 if gkmin==1&&gkmax==1 kgoto skip	;IF 'Num.wguides' AND 'Lowest' ARE BOTH '1', DON'T CREATE ANY REFLECTED WGUIDE1S AT ALL 	
	 aresL2	filterstack	asigL, kfreq*gkLDiff, gkRndFactor, kcutoff, gkLowCut, gkfeedback, -gkinterval, kPortTime, gktype, imin, imax
	 aresR2	filterstack	asigR, kfreq*gkRDiff, gkRndFactor, kcutoff, gkLowCut, gkfeedback, -gkinterval, kPortTime, gktype, imin, imax
	 if i(gkIterations)>1 then
	  aresL2	filterstack	aresL2*0.03, kfreq*gkLDiff, gkRndFactor, kcutoff, gkLowCut, gkfeedback, -gkinterval, kPortTime, gktype, imin, imax
	  aresR2	filterstack	aresR2*0.03, kfreq*gkRDiff, gkRndFactor, kcutoff, gkLowCut, gkfeedback, -gkinterval, kPortTime, gktype, imin, imax
	 endif
	 if i(gkIterations)>2 then
	  aresL2	filterstack	aresL2*0.03, kfreq*gkLDiff, gkRndFactor, kcutoff, gkLowCut, gkfeedback, -gkinterval, kPortTime, gktype, imin, imax
	  aresR2	filterstack	aresR2*0.03, kfreq*gkRDiff, gkRndFactor, kcutoff, gkLowCut, gkfeedback, -gkinterval, kPortTime, gktype, imin, imax
	 endif
	 if i(gkIterations)>3 then
	  aresL2	filterstack	aresL2*0.03, kfreq*gkLDiff, gkRndFactor, kcutoff, gkLowCut, gkfeedback, -gkinterval, kPortTime, gktype, imin, imax
	  aresR2	filterstack	aresR2*0.03, kfreq*gkRDiff, gkRndFactor, kcutoff, gkLowCut, gkfeedback, -gkinterval, kPortTime, gktype, imin, imax
	 endif
	 aresL	+=				aresL2
	 aresR	+=				aresR2
	 skip:
	endif
	aresL	dcblock2	aresL
	aresR	dcblock2	aresR
	rireturn						;RETURN FROM REINIT
	

	/* EXTEND RELEASE */
	kenv		linsegr	1,i(gkRel),0
	aresL		=	aresL * kenv
	aresR		=	aresR * kenv
	ktime		timeinsts
	krms		rms	aresL,3
	if krms<0.00001&&ktime>0.2&&iMIDIflag==1 then
	 turnoff2	p1,4,0
	endif

	/* WET_DRY MIX */
	aOutL	ntrpol	asigL, aresL, gkMix
	aOutR	ntrpol	asigR, aresR, gkMix
	
			outs	aOutL*gkamp, aOutR*gkamp	;SEND wguide OUTPUT TO THE AUDIO OUTPUTS AND SCALE USING THE FLTK SLIDER VARIABLE gkamp
endin

</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>; HighpassFilter.csd
; Written by Iain McCurdy, 2012.

<Cabbage>
form caption("Highpass Filter"), size(435, 90), pluginid("HPFl") style("legacy")
image pos(0, 0),                size(435, 90), colour(  70,120, 90), shape("rounded"), outlinecolour("white"), outlinethickness(4) 
label    bounds(17, 22, 40, 11), text("INPUT"), fontcolour("white")
combobox bounds(10, 33, 60, 20), channel("input"), value(1), text("Live","Tone","Noise")
rslider  bounds( 75, 11, 70, 70), channel("cf"),        text("Freq."), colour(  0, 60, 30), trackercolour(200,255,200), 	textcolour("white"), 	range(20, 20000, 20, 0.333)
rslider  bounds(140, 11, 70, 70), channel("res"),       text("Res."),  colour(  0, 60, 30), trackercolour(200,255,200), 	textcolour("white"),	range(0,1.00,0)
rslider  bounds(205, 11, 70, 70), channel("mix"),       text("Mix"),   colour(  0, 60, 30), trackercolour(200,255,200),		textcolour("white"), 	range(0,1.00,1)
button  bounds(280,  10, 80, 20), text("12dB/oct","24dB/oct"), channel("steepness"), value(0)
label   bounds(280,  30, 80, 12), text("Steepness"), fontcolour("white")
checkbox bounds(280, 50, 80, 15), channel("ResType"),colour(yellow), fontcolour("white"),  value(0), text("Resonant")
rslider  bounds(360, 11, 70, 70), text("Level"),    colour(  0, 60, 30), trackercolour(200,255,200),		textcolour("white"), 	channel("level"), 	range(0, 1.00, 1)
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-d -n
</CsOptions>

<CsInstruments>

sr 	= 	48000	;SAMPLE RATE
ksmps 	= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 	= 	2	;NUMBER OF CHANNELS (2=STEREO)
0dbfs	=	1
 
;Author: Iain McCurdy (2012)

instr	1
	kporttime	linseg	0,0.001,0.05
	/* READ IN WIDGETS */
	kcf			chnget	"cf"
	kres		chnget	"res"
	kmix		chnget	"mix"
	ksteepness	chnget	"steepness"
	kResType	chnget	"ResType"
	klevel		chnget	"level"
	klevel		portk	klevel,kporttime
	alevel		interp	klevel
	kcf	portk	kcf,kporttime
	acf	interp	kcf
	/* INPUT */
	kinput		chnget	"input"
	if kinput=1 then
	 aL,aR	ins
	elseif kinput=2 then
	 aL	vco2	0.2, 100
	 aR	=	aL
	else
	 aL	pinkish	0.2
	 aR	pinkish	0.2
	endif
	/* FILTER */
	if ksteepness==0&&kResType!=1 then
	 aFiltL	atone	aL,kcf
	 aFiltR	atone	aR,kcf
        elseif ksteepness==1&&kResType!=1 then
	 aFiltL	buthp	aL,acf
	 aFiltR	buthp	aR,acf
        elseif kResType==1 then
	 aFiltL	bqrez	aL,acf,1+(kres*40),1
	 aFiltR	bqrez	aR,acf,1+(kres*40),1
	endif
	aL	ntrpol	aL,aFiltL,kmix
	aR	ntrpol	aR,aFiltR,kmix
		outs	aL*alevel,aR*alevel
endin
		
</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
e
</CsScore>

</CsoundSynthesizer>
; LowpassFilter.csd
; Written by Iain McCurdy, 2012

<Cabbage>
form caption("Lowpass Filter") size(435, 90), pluginid("LPFl") style("legacy")
image    bounds(0, 0, 435, 90), colour(  70, 90,100), shape("rounded"), outlinecolour("white"), outlinethickness(4) 
label    bounds( 22, 22, 38, 11), text("INPUT:"), fontcolour("white")
combobox bounds( 10, 33, 60, 20), channel("input"), value(1), text("Live","Tone","Noise")
rslider  bounds( 75, 11, 70, 70), channel("cf"),        text("Freq."), colour(  0, 40, 50), trackercolour(200,240,250), 	textcolour("white"), 	range(20, 20000, 20000, 0.333)
rslider  bounds(140, 11, 70, 70), channel("res"),       text("Res."),  colour(  0, 40, 50), trackercolour(200,240,250), 	textcolour("white"),	range(0,1.00,0)
rslider  bounds(205, 11, 70, 70), channel("mix"),       text("Mix"),   colour(  0, 40, 50), trackercolour(200,240,250),		textcolour("white"), 	range(0,1.00,1)
label    bounds(285, 10, 70, 12), text("Steepness:"), fontcolour("white")
button   bounds(280, 23, 80, 20), channel("steepness"), text("12dB/oct","24dB/oct"), value(0)
checkbox bounds(280, 50, 80, 15), channel("ResType"), fontcolour("white"),  value(0), text("Resonant"), colour(yellow)
rslider  bounds(360, 11, 70, 70), text("Level"),                       colour(  0, 40, 50), trackercolour(200,240,250),		textcolour("white"), 		channel("level"), 	range(0, 1.00, 1)
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-d -n
</CsOptions>

<CsInstruments>

sr 		= 	48000	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1

;Author: Iain McCurdy (2012)

instr	1
	kporttime	linseg	0,0.001,0.05
	kcf		chnget	"cf"				;
	kres		chnget	"res"				;
	kmix		chnget	"mix"				;
	ksteepness	chnget	"steepness"			;
	kResType	chnget	"ResType"			;
	klevel		chnget	"level"				;
	klevel		portk	klevel,kporttime
	alevel		interp	klevel
	kcf	portk	kcf,kporttime
	acf	interp	kcf
	/* INPUT */
	kinput		chnget	"input"
	if kinput=1 then
	 aL,aR	ins
	elseif kinput=2 then
	 aL	vco2	0.2, 100
	 aR	=	aL
	else
	 aL	pinkish	0.2
	 aR	pinkish	0.2
	endif
	if ksteepness==0&&kResType!=1 then
	 aFiltL	tone	aL,kcf
	 aFiltR	tone	aR,kcf
        elseif ksteepness==1&&kResType!=1 then
	 aFiltL	butlp	aL,acf
	 aFiltR	butlp	aR,acf
        elseif kResType==1 then
	 aFiltL	moogladder	aL,acf,kres
	 aFiltR	moogladder	aR,acf,kres        
	endif
	aL	ntrpol	aL,aFiltL,kmix
	aR	ntrpol	aR,aFiltR,kmix
		outs	aL*alevel,aR*alevel
endin
		
</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>
; phaser1.csd
; Written by Iain McCurdy, 2012.

<Cabbage>
form caption("phaser1") size(400, 90), pluginid("phs1") style("legacy")
image        pos(0, 0), size(400, 90), colour(80,20,20), shape("rounded"), outlinecolour("white"), outlinethickness(4) 
label     bounds( 10, 15, 55, 12), text("INPUT"), fontcolour("white")
checkbox  bounds( 10, 30, 55, 12), text("Live"),  fontcolour("white"), channel("input"),  value(1), radiogroup(1)
checkbox  bounds( 10, 45, 55, 12), text("Noise"), fontcolour("white"), channel("input2"), value(0), radiogroup(1)
rslider  bounds( 60, 11, 70, 70),  text("Frequency"), channel("freq"),     range(20.0, 5000, 160, 0.25), colour(160,40,40), textcolour("white"), trackercolour(white)
rslider  bounds(125, 11, 70, 70),  text("Feedback"),  channel("feedback"), range(-0.99, 0.99, 0.9),      colour(160,40,40), textcolour("white"), trackercolour(white)
rslider  bounds(190, 11, 70, 70), text("N.Ords."),   channel("ord"),      range(1, 256, 32, 0.5,1),     colour(160,40,40), textcolour("white"), trackercolour(white)
rslider  bounds(255, 11, 70, 70), text("Mix"),       channel("mix"),      range(0, 1.00, 1),            colour(160,40,40), textcolour("white"), trackercolour(white)
rslider  bounds(320, 11, 70, 70), text("Level"),     channel("level"),    range(0, 1.00, 0.7),          colour(160,40,40), textcolour("white"), trackercolour(white)
}
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-d -n
</CsOptions>

<CsInstruments>

sr 		= 	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1

;Author: Iain McCurdy (2012)

instr	1
	gkfreq		chnget	"freq"					;READ WIDGETS...
	gkfeedback	chnget	"feedback"				;
	gkord		chnget	"ord"					;
	gkmix		chnget	"mix"					;
	gklevel		chnget	"level"					;

	gkinput		chnget	"input"					;
	if gkinput==1 then
	 asigL,asigR	ins
	else
	 asigL	pinker
	 asigR	pinker
	endif

	kporttime	linseg	0,0.01,0.03				;CREATE A VARIABLE THAT WILL BE USED FOR PORTAMENTO TIME
	kfreq		portk	gkfreq, kporttime			;PORTAMENTO IS APPLIED TO 'SMOOTH' SLIDER MOVEMENT	
	kSwitch		changed	gkord					;GENERATE A MOMENTARY '1' PULSE IN OUTPUT 'kSwitch' IF ANY OF THE SCANNED INPUT VARIABLES CHANGE. (OUTPUT 'kSwitch' IS NORMALLY ZERO)
	if	kSwitch=1	then					;IF I-RATE VARIABLE CHANGE TRIGGER IS '1'...
		reinit	UPDATE						;BEGIN A REINITIALISATION PASS FROM LABEL 'UPDATE'
	endif								;END OF CONDITIONAL BRANCH
	UPDATE:								;BEGIN A REINITIALISATION PASS FROM HERE
	aphaserl	phaser1		asigL, kfreq, gkord, gkfeedback	;PHASER1 IS APPLIED TO THE LEFT CHANNEL
	aphaserr	phaser1		asigR, kfreq, gkord, gkfeedback	;PHASER1 IS APPLIED TO THE RIGHT CHANNEL
	rireturn							;RETURN FROM REINITIALISATION PASS TO PERFORMANCE TIME PASSES
	amixL		ntrpol	asigL,aphaserl,gkmix
	amixR		ntrpol	asigR,aphaserr,gkmix
			outs	amixL*gklevel, amixR*gklevel		;PHASER OUTPUT ARE SENT TO THE SPEAKERS
endin
		
</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>


</CsoundSynthesizer>



























; phaser.csd
; Written by Iain McCurdy, 2012.

<Cabbage>
form caption("phaser2") size(685, 90), pluginid("phs2") style("legacy")
image pos(0, 0),        size(685, 90), colour(0,0,25), shape("rounded"), outlinecolour("white"), outlinethickness(4) 
label     bounds( 15, 15, 55, 12), text("INPUT"), fontcolour("white")
checkbox  bounds( 15, 30, 55, 12), text("Live"),  fontcolour("white"), channel("input"),  value(1), radiogroup(1)
checkbox  bounds( 15, 45, 55, 12), text("Noise"), fontcolour("white"), channel("input2"), value(0), radiogroup(1)
rslider  bounds( 70, 11, 70, 70),  text("Frequency"),  channel("freq"),     range(20.0, 5000, 100, 0.25), colour(100,100,200), trackercolour(silver), textcolour("white")
rslider  bounds(140, 16, 60, 60),  text("Port."),  channel("port"),     range(0, 30, 0.1, 0.5,0.01), colour(100,100,200), trackercolour(silver), textcolour("white")
rslider  bounds(195, 11, 70, 70),  text("Q"),          channel("q"),        range(0.01,10,1,0.5),            colour(100,100,200), trackercolour(silver), textcolour("white")
rslider  bounds(260, 11, 70, 70), text("N.Ords."),    channel("ord"),      range(1, 256, 8, 0.5,1),      colour(100,100,200), trackercolour(silver), textcolour("white")
label    bounds(335, 20, 61,12),  text("Sep. Mode:"), fontcolour("white")
rslider  bounds(410, 11, 70, 70), text("Separation"), channel("sep"),      range(-3, 3.00, 1),         colour(100,100,200), trackercolour(silver), textcolour("white")
rslider  bounds(475, 11, 70, 70), text("Feedback"),   channel("feedback"), range(-0.99, 0.99, 0.9),      colour(100,100,200), trackercolour(silver), textcolour("white")
rslider  bounds(540, 11, 70, 70), text("Mix"),        channel("mix"),      range(0, 1.00, 1),            colour(100,100,200), trackercolour(silver), textcolour("white")
rslider  bounds(605, 11, 70, 70), text("Level"),      channel("level"),    range(0, 1.00, 0.7),          colour(100,100,200), trackercolour(silver), textcolour("white")
combobox bounds(330, 34, 80,25), channel("mode"), value(1), text("Equal", "Power"), fontcolour("white")
}
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-d -n
</CsOptions>

<CsInstruments>

sr 		= 	48000	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1

;Author: Iain McCurdy (2012)

instr	1
	gkport		chnget	"port"
	kRampUp		linseg	0,0.001,1
	kfreq		chnget	"freq"					;READ WIDGETS...
	gkfreq		portk	kfreq,kRampUp*gkport
	kq		chnget	"q"					;
	gkq		portk	kq,kRampUp*gkport
	gkmode		chnget	"mode"					;
	gkmode		init	1
	gkmode		init	i(gkmode)-1
	ksep		chnget	"sep"					;
	gksep		portk	ksep,kRampUp*gkport
	gkfeedback	chnget	"feedback"				;
	gkord		chnget	"ord"					;
	gkmix		chnget	"mix"					;
	gklevel		chnget	"level"					;
	gkinput		chnget	"input"					;
	if gkinput==1 then
	 asigL,asigR	ins
	else
	 asigL	pinker
	 asigR	pinker
	endif
	kporttime	linseg	0,0.01,0.03				;CREATE A VARIABLE THAT WILL BE USED FOR PORTAMENTO TIME
	kfreq		portk	gkfreq, kporttime			;PORTAMENTO IS APPLIED TO 'SMOOTH' SLIDER MOVEMENT	
	kq		portk	gkq, kporttime				;PORTAMENTO IS APPLIED TO 'SMOOTH' SLIDER MOVEMENT
	ksep		portk	gksep, kporttime				;PORTAMENTO IS APPLIED TO 'SMOOTH' SLIDER MOVEMENT
	kSwitch		changed	gkord,gkmode				;GENERATE A MOMENTARY '1' PULSE IN OUTPUT 'kSwitch' IF ANY OF THE SCANNED INPUT VARIABLES CHANGE. (OUTPUT 'kSwitch' IS NORMALLY ZERO)
	if	kSwitch=1	then					;IF I-RATE VARIABLE CHANGE TRIGGER IS '1'...
		reinit	UPDATE						;BEGIN A REINITIALISATION PASS FROM LABEL 'UPDATE'
	endif								;END OF CONDITIONAL BRANCH
	UPDATE:								;BEGIN A REINITIALISATION PASS FROM HERE
	aphaserl	phaser2		asigL, kfreq, kq, gkord, gkmode, ksep, gkfeedback	; PHASER2 IS APPLIED TO THE LEFT CHANNEL
	aphaserr	phaser2		asigR, kfreq, kq, gkord, gkmode, ksep, gkfeedback	; PHASER1 IS APPLIED TO THE RIGHT CHANNEL
	rireturn							;RETURN FROM REINITIALISATION PASS TO PERFORMANCE TIME PASSES

	aphaserl	dcblock2	aphaserl			;PHASER2 CAN TEND TO PRODUCE A DC OFFSET
	aphaserr	dcblock2	aphaserr
	
	amixL		ntrpol	asigL,aphaserl,gkmix
	amixR		ntrpol	asigR,aphaserr,gkmix
			outs	amixL*gklevel, amixR*gklevel		;PHASER OUTPUTS ARE SENT OUT
endin
		
</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>


</CsoundSynthesizer>



























; resony.csd
; Written by Iain McCurdy, 2012.

; Resony is an implementation of a stack of second-order bandpass filters whose centre frequencies are arithmetically 
; related. 
; The 'bandwidth' and 'scaling mode' parameters are as they are in the reson opcode. 

; CONTROLS
; --------
; 'Base Freq.' (base frequency) defines the centre frequency of the first filter. 

; 'Sep' (separation) normally defines the separation between the lowest and highest filter in the stack in octaves. 
; How this relates to what the actual frequencies of filters will be depends upon which separation mode has been selected. 
; This is explained below. Note that in this example the operation of 'ksep' has been modified slightly to allow the 
; opcode to be better controlled from the GUI. These modifications are clarified below. Separation can be defined in 
; octaves using the knob 'Sep.oct.' or in semitones using the 'Sep.semi.' knob.
; Making changes to 'Sep.Semi', either via the slider or the number box, will causes changes in the 'Sep.Oct' slider and 
; number box (but not vice versa).

; 'Separatation Mode' defines the the way additional reson filters are arranged according to the 'Sep' value'. In 
; 'oct.total' separation mode, the pitch interval between the base frequency and (base frequency + separation is divided 
; into equal intervals according to the number of filters that have been selected. Note that no filter is created at the 
; frequency of (base frequency + separation). For example: if separation=1 and num.filters=2, filters will be created at 
; the base frequency and a tritone above the base frequency (i.e. an interval of 1/2 and an octave). I suspect this is a 
; mistake in the opcode implementation so in this example I rescale the separation interval before passing it to the 
; resony opcode so that the interval between the lowest and highest filter in this mode will always be the interval 
; defined in the GUI. 
; If 'hertz' separation mode is selected behaviour is somewhat curious. I have made some other modifications to the 
; values passed to the opcode to make this mode more controllable. Without these modifications, if number of filters is 
; '1' no filters would be created. The frequency relationship between filters in the stack always follows the harmonic 
; series. Both 'Base Frequency' and 'Separation' normally shift this harmonic stack of filters up or down, for this reason 
; I have disabled user control of 'Separation' in this mode, instead a value equal to the 'Number of Filters' will always 
; be used for 'Separation'. This ensures that a harmonic stack will always be created built upon 'Base Frequency' as the 
; fundamental. Negative values for 'separation' are allowed whenever 'separation mode' is 'octaves' (if this is the case, 
; the stack of frequencies will extend below the base frequency). Negative values for 'separation' when 'separation mode' 
; is 'hertz' will cause filters to 'explode'. As 'Separation' is fixed at 'Number of Filters' in this example this 
; explosion will not occur.

; A third option I have provided allows the defined interval to be the interval between adjacent filters rather than the 
; interval from lowest to highest. In this mode it is probably wise to keep the separation value lowish, or reduce the 
; number of filters (or both), otherwise filters with very high frequencies might be being requested. This could potentially
; lead to some rather unpleasant distortion. In actuality there is some protection against this (discussed later on).

; 'B.width'	-	bandwidth of the filters (in hertz).

; 'Num.' (number of filters) defines the number of filters in the stack. 

; 'Scaling Mode'	-	provides options for scaling the amplitude of the filters. If 'none' is chosen output
; 				amplitude can increase greatly, particularly if bandwidth is narrow (a low value).
;				

; In addition a lowpass and highpass filter have been added after the resony filter
;
;         +--------+   +----------+   +---------+
; INPUT---+ RESONY +---+ HIGHPASS +---+ LOWPASS +---OUTPUT
;         +--------+   +----------+   +---------+
;
; The cutoff frequencies of each of these filters are defined as ratios relative to the base frequency. 
;
; Unpleasant sounds can result if reson filters are given too high cutoff frequencies. This can occur through a combination
; of the settings for 'BF' (base frequency), 'Num.' (number of filters), 'Sep.' (separation) and 'Separation Mode'. This 
; instrument features a safety measure whereby if this is going to happen the 'Num.' value will be reduced. If you notice
; the 'Num.' slider moving by itself while you are making adjustments to other controls this is the reason. This safety 
; mechanism is most likely to cut when 'Octs Adjacent' mode is selected. 


<Cabbage>
form caption("resony") size(750,180), pluginid("rsny"), colour(255,100,0) style("legacy")
image        bounds(  0,  0,750,180), colour("black"), shape("rounded"), outlinecolour(255,100,0), outlinethickness(2) 
label     bounds( 10, 20, 80, 12), text("INPUT:")
button    bounds( 10, 35, 80, 35), text("Live","Noise"),     channel("input"), value(0)
rslider   bounds( 90, 10, 70, 70), text("Base Freq"),       fontcolour("white"), channel("bf"),   range(20, 20000, 909, 0.5), colour(255,100,0,255), trackercolour(255,250,100)
nslider bounds(160, 15, 70, 40), text("Base Freq"),        channel("bf"),   range(20, 20000, 909, 0.5)
rslider   bounds(230, 10, 70, 70), text("B.width"),         fontcolour("white"), channel("bw"),   range(0.01, 500, 13, 0.375, 0.0001), colour(255,100,0,255), trackercolour(255,250,100)
rslider   bounds(300, 10, 70, 70), text("Num."),            fontcolour("white"), channel("num"),  range(1, 80, 10, 1,1),      colour(255,100,0,255), trackercolour(255,250,100)
rslider   bounds(370, 10, 70, 70), text("Sep.oct."),        fontcolour("white"), channel("sep"),  range(-11, 11, 2,1,0.001),          colour(255,100,0,255), trackercolour(255,250,100)
nslider bounds(440, 15, 70, 40), text("Sep.oct"),          channel("sep"),  range(-11, 11, 2,1,0.001)
rslider   bounds(510, 10, 70, 70), text("Sep.semi."),       fontcolour("white"), channel("sep2"), range(-48, 48, 24,1,1),     colour(255,100,0,255), trackercolour(255,250,100)
nslider bounds(580, 15, 70, 40), text("Sep.semi."),        channel("sep2"),  range(-48, 48, 24,1,0.001)

rslider   bounds(660, 10, 70, 70), text("Level"),           fontcolour("white"), channel("gain"), range(0,2,1,0.25,0.00001),  colour(255,100,0,255), trackercolour(255,250,100)

label     bounds(450,100,130, 13), text("Separation Mode")
combobox  bounds(450,115,130, 25), channel("sepmode"), value(1), text("octs.total", "hertz", "octs.adjacent")
label     bounds(600,100,130, 13), text("Scaling Mode")
combobox  bounds(600,115,130, 25), channel("scl"), value(2), text("none", "peak response", "RMS")


image    bounds( 30, 90,180, 80), colour(0,0,0,0), outlinecolour(150,150,150), outlinethickness(1), plant("highpass"), {
checkbox bounds( 20, 15,100, 20), text("Highpass"), channel("HPF_OnOff")
rslider  bounds(100,  5, 70, 70), text("Ratio"),           fontcolour("white"), channel("HPF_Ratio"), range(0.1, 16, 0.1, 0.5,0.0001),  colour(255,100,0,255), trackercolour(255,250,100)
}

image    bounds(240, 90,180, 80), colour(0,0,0,0), outlinecolour(150,150,150), outlinethickness(1), plant("lowpass"), {
checkbox bounds( 20, 15,100, 20), text("Lowpass"), channel("LPF_OnOff")
rslider  bounds(100,  5, 70, 70), text("Ratio"),           fontcolour("white"), channel("LPF_Ratio"), range(0.1, 32, 32, 0.25,0.00001),  colour(255,100,0,255), trackercolour(255,250,100)
}

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-d -n
</CsOptions>

<CsInstruments>

sr 		= 	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1

;Author: Iain McCurdy (2012)

;A UDO IS CREATED WHICH ENCAPSULATES THE MODIFICATIONS TO THE resony OPCODE DISCUSSED IN THIS EXAMPLE 
opcode	resony2,a,akkikii
	ain, kbf, kbw, inum, ksep , isepmode, iscl	xin

	;IF 'Octaves (Total)' MODE SELECTED...
	if isepmode==0 then
	 irescale	divz	inum,inum-1,1	;PREVENT ERROR IF NUMBER OF FILTERS = ZERO
	 ksep	=	ksep * irescale		;RESCALE SEPARATION
	  
	;IF 'Hertz' MODE SELECTED...	
	elseif isepmode==1 then
	 inum	=	inum + 1		;AMEND QUIRK WHEREBY NUMBER RESONANCES PRODUCED IN THIS MODE WOULD ACTUALLY BE 1 FEWER THAN THE VALUE DEMANDED
	 ksep	=	inum			;ksep IS NOT ESSESNTIAL IN THIS MODE, IT MERELY DOUBLES AS A BASE FREQUENCY CONTROL. THEREFORE SETTING IT TO NUMBER OF BANDS ENSURES THAT BASE FREQUENCY WILL ALWAYS BE DEFINED ACCURATELY BY kbf VALUE
			 
	;IF 'Octaves (Adjacent)' MODE SELECTED...
	elseif isepmode==2 then 
	 irescale	divz	inum,inum-1,1	;PREVENT ERROR IF NUMBER OF FILTERS = ZERO
	 ksep = ksep * irescale			;RESCALE SEPARATION
	 ksep = ksep * (inum-1)			;RESCALE SEPARATION INTERVAL ACCORDING TO THE NUMBER OF FILTERS CHOSEN
	 isepmode	=	0		;ESSENTIALLY WE ARE STILL USING MODE:0, JUST WITH THE ksep RESCALING OF THE PREVIOUS LINE ADDED	 

	endif
	
	aout 		resony 	ain, kbf, kbw, inum, ksep , isepmode, iscl
			xout	aout
endop


instr	1	
	kporttime	linseg	0,0.001,0.005,1,0.05	;CREATE A VARIABLE FUNCTION THAT RAPIDLY RAMPS UP TO A SET VALUE	
	
	loop:
	gkbf	chnget	"bf"
	gkbw	chnget	"bw"
	gkgain	chnget	"gain"
	gknum	chnget	"num"
	gksep	chnget	"sep"				; octaves
	gksepmode	chnget	"sepmode"
	gksepmode	=	gksepmode - 1
	gksepmode	init	1
	gkscl	chnget	"scl"
	gkscl	=	gkscl - 1
	gkscl	init	1
	gkinput		chnget	"input"
	gkHPF_OnOff	chnget	"HPF_OnOff"
	kHPF_Ratio	chnget	"HPF_Ratio"
	gkLPF_OnOff	chnget	"LPF_OnOff"
	kLPF_Ratio	chnget	"LPF_Ratio"
	
	kbf		portk	gkbf, kporttime		; SMOOTH MOVEMENT OF SLIDER VARIABLES
	ksep		portk	gksep, kporttime
	kLPF_Ratio	portk	kLPF_Ratio, kporttime
	kHPF_Ratio	portk	kHPF_Ratio, kporttime

	if gkinput==0 then
	 asigL,asigR	ins
	else
	 asigL	pinkish	1
	 asigR	pinkish	1
	endif

	; DISCERN FREQUENCY OF HIGHEST RESON DEPENDING ON SEPARATION MODE CHOSEN
	if gksepmode==0 then
	 kmax	=	gknum==1 ? kbf : kbf * abs(ksep) * 2
	elseif gksepmode==1 then
	 kmax	=	kbf * gknum
	else
	 kmax	=	gknum==1 ? kbf : kbf * (gknum-1) * abs(ksep) * 2
	endif

	; TEST HIGHEST RESON FREQUENCY. 
	; IF IT IS TOO HIGH, UNPLEASANT NOISE WILL BE PRODUCED SO REDUCE THE NUMBER OF RESONS THEN LOOP BACK (AND TEST AGAIN)
	if kmax>(sr/5) then	; things seems to start to sound unpleasant if resons are placed at frequencies sr/5 or higher	
	 chnset	gknum-1,"num"	; decrement 'Num.' slider...
	 kgoto	loop		; and loop back (in order to test again)
	endif


	kSwitch		changed	gkscl, gknum, gksepmode		;GENERATE A MOMENTARY '1' PULSE IN OUTPUT 'kSwitch' IF ANY OF THE SCANNED INPUT VARIABLES CHANGE. (OUTPUT 'kSwitch' IS NORMALLY ZERO)
	if	kSwitch=1	then		;IF I-RATE VARIABLE CHANGE TRIGGER IS '1'...
		reinit	START			;BEGIN A REINITIALISATION PASS FROM LABEL 'START'
	endif
	START:
	
	isepmode	init	i(gksepmode)
	inum		init	i(gknum)	
	iscl		init	i(gkscl)
	
	;CALL resony2 UDO
	aresL 		resony2 asigL, kbf, gkbw, inum, ksep , isepmode, iscl
	aresR 		resony2	asigR, kbf, gkbw, inum, ksep , isepmode, iscl
		
	rireturn	;RETURN FROM REINITIALISATION PASS TO PERFORMANCE TIME PASSES

	if gkHPF_OnOff==1 then
	 aresL	buthp	aresL, kbf*kHPF_Ratio
	 aresR	buthp	aresR, kbf*kHPF_Ratio
	endif

	if gkLPF_OnOff==1 then
	 kcf	limit	kbf*kLPF_Ratio, 0, sr/2
	 aresL	butlp	aresL, kcf
	 aresR	butlp	aresR, kcf
	endif

			outs	aresL * gkgain, aresR * gkgain	;SEND FILTER OUTPUT TO THE AUDIO OUTPUTS AND SCALE USING THE FLTK SLIDER VARIABLE gkgain
endin

instr	UpdateWidgets
	ksep2	chnget	"sep2"
	ktrig2	changed	ksep2
	if  ktrig2==1 then
	 chnset	ksep2/12, "sep"
	endif
endin

</CsInstruments>

<CsScore>
i 1 0.1 [3600*24*7]
i "UpdateWidgets" 0 3600	;UPDATE SEPARATION DISPLAY BOX
</CsScore>

</CsoundSynthesizer>
; Vocoder.csd
; Written by Iain McCurdy, 2012

<Cabbage>
form caption("vocoder"), size(530, 230), pluginid("voco") style("legacy")

image pos(0, 0), size(530, 200), colour(255,255,150), shape("rounded"), outlinecolour("white"), line(1)

image 	bounds(140,  6,180, 31), colour( 10,225, 90,100), shape("ellipse"), outlinecolour(205,205, 70), line(1)
label   bounds(158,  5, 33, 33), text("v"), FontColour(100,100,100)
label   bounds(178,  5, 33, 33), text("o"), FontColour(100,100,100)
label   bounds(198,  5, 33, 33), text("c"), FontColour(100,100,100)
label   bounds(218,  5, 33, 33), text("o"), FontColour(100,100,100)
label   bounds(238,  5, 33, 33), text("d"), FontColour(100,100,100)
label   bounds(258,  5, 33, 33), text("e"), FontColour(100,100,100)
label   bounds(278,  5, 33, 33), text("r"), FontColour(100,100,100)
label   bounds(161,  4, 30, 30), text("v"), FontColour(255,  0,  0)
label   bounds(181,  4, 30, 30), text("o"), FontColour(235,  0, 20)
label   bounds(201,  4, 30, 30), text("c"), FontColour(215,  0, 40)
label   bounds(221,  4, 30, 30), text("o"), FontColour(195,  0, 60)
label   bounds(241,  4, 30, 30), text("d"), FontColour(175,  0, 80)
label   bounds(261,  4, 30, 30), text("e"), FontColour(155,  0,100)
label   bounds(281,  4, 30, 30), text("r"), FontColour(135,  0,120)

label    bounds( 12,  9, 75, 11), text("Carrier Source"), FontColour("black")
image 	 bounds(  9, 20, 87, 18), colour("black"), shape("sharp")
combobox bounds( 10, 21, 85, 16), channel("CarSource"), value(1), text("synth","external"), fontcolour(black), colour(255,255,200)
label    bounds( 10, 39, 85, 11), text("Filter Steepness"), FontColour("black")
image 	 bounds(  9, 50, 87, 18), colour("black"), shape("sharp")
combobox bounds( 10, 51, 85, 16), channel("steepness"), value(2), text("12dB/oct","24dB/oct"), fontcolour(black), colour(255,255,200)
label    bounds( 20, 69, 60, 11), text("Synth Type"), FontColour("black")
image 	 bounds(  9, 80, 87, 18), colour("black"), shape("sharp")
combobox bounds( 10, 81, 85, 16), channel("SynType"), value(1), text("saw","square","pulse","noise"), fontcolour(black), colour(255,255,200)

rslider bounds(105, 38, 70, 70), text("Base"),    colour( 55,105,50), textcolour("Black"), channel("base"),  range(24, 80, 40,1,1),  trackercolour(150,255,150)
rslider bounds(165, 38, 70, 70), text("Num."),    colour( 55,105,50), textcolour("Black"), channel("num"),   range(1, 100, 16,1,1),  trackercolour(150,255,150)
rslider bounds(225, 38, 70, 70), text("B.width"), colour( 55,105,50), textcolour("Black"), channel("bw"),    range(0.01, 1, 0.1,0.5),  trackercolour(150,255,150)
rslider bounds(285, 38, 70, 70), text("Spacing"), colour( 55,105,50), textcolour("Black"), channel("incr"),  range(1, 12, 5,0.5),  trackercolour(150,255,150)
rslider bounds(445, 38, 70, 70), text("Level"),   colour( 55,105,50), textcolour("Black"), channel("level"), range(0, 5.00, 1,0.5),  trackercolour(150,255,150)

vslider bounds(350, 10, 50, 90), colour( 55,105,50), textcolour("Black"), channel("BPGain"), range(0, 1, 0.6, 0.5),  trackercolour(150,255,150)
vslider bounds(400, 10, 50, 90), colour( 55,105,50), textcolour("Black"), channel("HPGain"), range(0, 1, 0.25, 0.5), trackercolour(150,255,150)
label   bounds(365, 95, 25, 12), text("BPF"), FontColour("black")
label   bounds(415, 95, 25, 12), text("HPF"), FontColour("black")

checkbox bounds(440, 10, 80, 13), channel("gate"), text("Gate Input"), value(0), shape("square"), fontcolour("black")

keyboard bounds(10, 112, 510,80)
infobutton bounds(5,205, 100, 20), text("Help"), file("VocoderHelp.html")
image bounds(105, 205, 320, 20), colour(75, 85, 90, 50), plant("credit"){
label bounds(0.03, 0.1, .6, .7), text("Author: Iain McCurdy |2012|"), FontColour("LightGreen")
}

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100
ksmps 		= 	64
nchnls 		= 	2
0dbfs		=	1	;MAXIMUM AMPLITUDE
massign	0,2

gisine	ftgen	0,0,4096,10,1
gaSyn	init	0

opcode VocoderChannel, a, aakiiiii				;MODE UDO 
	aMod,aCar,ksteepness,ibase,ibw,iincr,icount,inum  xin	;NAME INPUT VARIABLES
	icf	=	cpsmidinn(ibase+(icount*iincr))		;DERIVE FREQUENCY FOR *THIS* BANDPASS FILTER BASED ON BASE FREQUENCY AND FILTER NUMBER (icount)
	icount	=	icount + 1				;INCREMENT COUNTER IN PREPARTION FOR NEXT FILTER
	
	if	icf>15000 goto SKIP				;IF FILTER FREQUENCY EXCEEDS A SENSIBLE LIMIT SKIP THE CREATION OF THIS FILTER AND END RECURSION
	
	aModF	butbp	aMod,icf,ibw*icf			;BANDPASS FILTER MODULATOR
	
	if ksteepness=2 then					;IF 24DB PER OCT MODE IS CHOSEN...
	  aModF	butbp	aModF,icf,ibw*icf			;...BANDPASS FILTER AGAIN TO SHARPEN CUTOFF SLOPES
	endif							;END OF THIS CONDITIONAL BRANCH
	aEnv 	follow2	aModF, 0.05, 0.05			;FOLLOW THE ENVELOPE OF THE FILTERED AUDIO

	aCarF	butbp	aCar,icf,ibw*icf			;BANDPASS FILTER CARRIER
	if ksteepness=2 then					;IF 24 DB PER OCT IS CHOSEN...
	  aCarF	butbp	aCarF,icf,ibw*icf			;...BANDPASS FILTER AGAIN TO SHARPEN CUTOFF SLOPES
	endif							;END OF THIS CONDITIONAL BRANCH

	amix	init	0					;INITIALISE MIX VARIABLE CONTAINING ALL SUBSEQUENT BANDS
	
	if	icount < inum	then					;IF MORE FILTERS STILL NEED TO BE CREATED...
		amix	VocoderChannel	aMod,aCar,ksteepness,ibase,ibw,iincr,icount,inum	;...CALL UDO AGAIN WITH INCREMENTED COUNTER
	endif								;END OF THIS CONDITIONAL BRANCH
	SKIP:							;LABEL
		xout	amix + (aCarF*aEnv)			;MIX LOCAL BAND WITH SUBSEQUENT BANDS GENERATED VIA RECURSION
endop								;END OF UDO

instr	1	;READ IN WIDGETS
	gkCarSource	chnget	"CarSource"
	gkbase		chnget	"base"
	gknum           chnget	"num"
	gkbw            chnget	"bw" 	
	gkincr          chnget	"incr"	
	gkBPGain        chnget	"BPGain"
	gkHPGain        chnget	"HPGain"
	gksteepness     chnget	"steepness"
	gkSynType	chnget	"SynType"
	gkgate		chnget	"gate"
	gklevel		chnget	"level"
endin

instr	2	;SIMPLE SYNTH
	icps	cpsmidi				;READ MIDI NOTE IN CPS FORMAT
	icps	=	icps*0.5		;TRANSPOSE DOWN AND OCTAVE
	aenv	linsegr	0,0.01,1,0.02,0		;CREATE A SIMPLE GATE-TYPE ENVELOPE

	if gkSynType==1 then			;IF SYNTH TYPE CHOSEN FROM BUTTON BANK GUI IS SAWTOOTH...
	 a1	vco2	1,icps			;...CREATE A SAWTOOTH WAVE TONE
	 a1	tone	a1,12000		;LOWPASS FILTER THE SOUND
	elseif gkSynType=2 then			;IF SYNTH TYPE CHOSEN FROM BUTTON BANK GUI IS SQUARE...
	 a1	vco2	1,icps,2,0.5		;...CREATE A SQUARE WAVE TONE
	 a1	tone	a1,12000		;LOWPASS FILTER THE SOUND
	elseif gkSynType=3 then			;IF SYNTH TYPE CHOSEN FROM BUTTON BANK GUI IS PULSE...
	 a1	vco2	1,icps,2,0.1		;...CREATE A PULSE WAVE TONE
	 a1	tone	a1,12000		;LOWPASS FILTER THE SOUND
	else					;OTHERWISE...
	 a1	pinkish	10			;...CREATE SOME PINK NOISE
	 a1	butbp	a1,icps,icps		;BANDPASS FILTER THE SOUND. BANDWIDTH = 1 OCTAVE. NARROW BANDWIDTH IF YOU WANT MORE OF A SENSE OF PITCH IN THE NOISE SIGNAL.
	endif					;END OF THIS CONDITIONAL BRANCH
	gaSyn	=	gaSyn + (a1*aenv)	;APPLY ENVELOPE
endin

instr	3
	ktrig	changed	gkbase,gkbw,gknum,gkincr	;IF ANY OF THE INPUT VARIABLE ARE CHANGED GENERATE A MOMENTARY '1' VALUE (A BANG IN MAX-MSP LANGUAGE)
	if ktrig=1 then					;IF A CHANGED VALUE TRIGGER IS RECEIVED...
	  reinit UPDATE					;REINITIALISE THIS INSTRUMENT FROM THE LABEL 'UPDATE'
	endif						;END OF THIS CONDITIONAL BRANCH
	UPDATE:						;LABEL
	ibase	init	i(gkbase)			;CREATE AN INITIALISATION TIME VARIABLE FROM FLTK GUI CONTROL
	inum	init	i(gknum)			;CREATE AN INITIALISATION TIME VARIABLE FROM FLTK GUI CONTROL
	ibw	init	i(gkbw)				;CREATE AN INITIALISATION TIME VARIABLE FROM FLTK GUI CONTROL
	iincr	init	i(gkincr)			;CREATE AN INITIALISATION TIME VARIABLE FROM FLTK GUI CONTROL
	
	aMod	inch	1				;READ LIVE AUDIO FROM THE COMPUTER'S LEFT INPUT CHANNEL
	
	;GATE MODULATOR SIGNAL
	if gkgate==1 then				;IF 'Gate Modulator' SWITCH IS ON....
	 krms	rms	aMod				;SCAN RMS OF MODUALTOR SIGNAL
	 kgate	=	(krms<0.05?0:1)			;IF RMS OF MODULATOR SIGNAL IS BELOW A THRESHOLD, GATE WILL BE CLOSED (ZERO) OTHERWISE IT WILL BE OPEN ('1'). LOWER THE THRESHOLD IF THE GATE IS CUTTING OUT TOO MUCH DESIRED SIGNAL, RAISE IT IF TOO MUCH EXTRANEOUS NOISE IS ENTERING THE OUTPUT SIGNAL.
	 kgate	port	kgate,0.01			;DAMP THE OPENING AND CLOSING OF THE GATE SLIGHTLY
	 agate	interp	kgate				;INTERPOLATE GATE VALUE AND CREATE AN A-RATE VERSION
	 aMod	=	aMod * agate			;APPLY THE GATE TO THE MODULATOR SIGNAL
	endif
	
	if gkCarSource==1 then				;IF 'SYNTH' IS CHOSEN AS CARRIER SOURCE...
	 aCar	=	gaSyn				;...ASSIGN SYNTH SIGNAL FROM INSTR 2 AS CARRIER SIGNAL
	else						;OTHERWISE...
	 aCar	inch	2				;READ AUDIO FROM RIGHT INPUT CHANNEL FOR CARRIER SIGNAL
	endif
		
	icount	init	0				;INITIALISE THE FILTER COUNTER TO ZERO
		amix	VocoderChannel	aMod,aCar,gksteepness,ibase,ibw,iincr,icount,inum	;CALL 'VocoderChannel' UDO - (WILL RECURSE WITHIN THE UDO ITSELF FOR THEW REQUIRED NUMBER OF FILTERS
		
	;HIGH-PASS CHANNEL
	iHPcf	=	cpsmidinn(ibase+(inum*iincr)+1)	;HIGHPASS FILTER CUTOFF (ONE INCREMENT ABOVE THE HIGHEST BANDPASS FILTER)
	iHPcf	limit	iHPcf,2000,18000		;LIMIT THE HIGHPASS FILTER TO BE WITHIN SENSIBLE LIMITS

	aModHP	buthp	aMod, iHPcf			;HIGHPASS FILTER THE MODULATOR
	aEnv	follow2	aModHP,0.01,0.01		;FOLLOW THE HIGHPASS FILTERED MODULATOR'S AMPLITUDE ENVELOPE
	aCarHP	buthp	aCar, iHPcf			;HIGHPASS FILTER THE CARRIER
	amix	=	((amix*gkBPGain*5)+(aCarHP*aEnv*gkHPGain*3))*gklevel	;MIX THE HIGHPASS FILTERED CARRIER WITH THE BANDPASS FILTERS. APPLY THE MODULATOR'S ENVELOPE.

		outs	amix,amix			;SEND AUDIO TO THE OUTPUTS
		clear	gaSyn				;CLEAR THE INTERNAL SYNTH ACCUMULATING GLOBAL VARIABLE, READ FOR THE NEXT PERF. PASS
	rireturn					;RETURN FROM REINITIALISATION PASS. (NOT REALLY NEED AS THE endin FULFILS THE SAME FUNCTION.)
endin

</CsInstruments>

<CsScore>
i 1 0 [60*60*24*7]	;READ IN WIDGETS
i 3 0 [60*60*24*7]	;VOCODER
</CsScore>

</CsoundSynthesizer>; wguide1.csd
; Written by Iain McCurdy, 2013,2015.

; Encapsulation of the 'wguide1' opcode, used for filtering and synthesis.
; A waveguide filter produces resonance peaks that follow the frequencies of the harmonic series with diminishing strength above its defined base frequency.

; frequency of the wave guide can be determined either in hertz of as a note number

; Activating the 'Keyboard Input' switch will allow frequency control from the keyboard (internal or external) and polyphony. 
;  In this mode, 'Frequency' and 'Note Num.' controls will be disabled.

; Source input sound can be either 'live audio input', or synthetic gravel, dust, air, a click or a pluck.
;  Click and pluck are intended to used with 'Keyboard Input' activated.

; Frequency	-	frequency of the waveguide
; Note Num.	-	frequency of the waveguide expressed as a note number
; Width		-	offsets the frequencies of the left and right channels to imbue added stereo width
; Cutoff	-	cutoff frequency of a lowpass filter within the feedback loop of the waveguide
;			 cutoff can be defined as a fixed value (in hertz) or as a ratio with the frequency of the waveguide (Ratio x Frequency = cutoff)
; Feedback	-	feedback ratio of the waveguide unit.
;			 negative feedback will shift the fundemental down one octave and only odd harmonics will be preset

; Bandpass Filter
; ---------------
; A double butterworth bandpass filter can be inserted, the cutoff frequency of which relates to the frequency defined for the waveguide.
; Bandpass On/Off	-	turns the bandpass filter on and off
; Balance	-	inserts a dynamic balancing to compensate for power loss on account of the bandpass filtering
; Width		-	bandwidth of the filters
; Harm.		-	ratio of bandpass filter cutoff to waveguide frequency: Harm x Frequency = bandpass cutoff frequency

; Mix	-	dry/wet mix
; Level	-	amplitude scaling

<Cabbage>
form caption("wguide1") size(650,200), pluginid("WGu1"), scrollbars(0) style("legacy")
image           bounds(0, 0, 650,120), colour(125, 95, 55), shape("sharp"), outlinecolour(225,195,155), outlinethickness(2) 
label   bounds(505,  4,136, 17), align("centre"), text("W A V E G U I D E"), fontcolour(silver), align("left")
image   bounds(510,  7,125,  1), colour(200,170,130), shape("sharp"), outlinecolour(silver), outlinethickness(1)
image   bounds(512, 18,124,  1), colour(200,170,130), shape("sharp"), outlinecolour(silver), outlinethickness(1)
checkbox bounds( 20,  7,120, 12), text("Keyboard Input"), channel("input"), fontcolour("white"), colour(yellow)
checkbox bounds( 20, 22,120, 12), text("Low Cut"), channel("LowCut") fontcolour("white") colour(yellow) value(0)
label    bounds(140,  5, 62, 11), text("Source"), fontcolour("white")
combobox bounds(140, 16, 62, 16), channel("source"), value(1), text("Live","Gravel","Dust","Air","Click","Pluck")
image    bounds( 10, 41,145, 70), colour(0,0,0,0), plant("GUIcontrol"), identchannel("NoKeyboardID"), visible(1) {
rslider  bounds(  0,  0, 70, 70),  text("Frequency"),  channel("freq"),      trackercolour(225,195,155), range(8.2, 12542, 160, 0.25),  colour( 85, 55,15), textcolour(white), fontcolour("silver")
rslider  bounds( 65,  0, 70, 70),  text("Note Num."),  channel("notnum"),    trackercolour(225,195,155), range(0, 127, 51, 1,1),        colour( 85, 55,15), textcolour(white), fontcolour("silver")
}
rslider  bounds(140, 41, 70, 70),  text("Width"),      channel("StWidth"),   trackercolour(225,195,155), range(-0.2, 0.2, 0, 1,0.001),        colour( 85, 55,15), textcolour(white), fontcolour("silver")

image    bounds(207,  4, 66,112), colour(125, 95, 55), outlinecolour("silver"), outlinethickness(1), line(1)
label    bounds(212,  8, 56, 11),  text("Cutoff"), fontcolour("white")
combobox bounds(212, 20, 56, 15),  text("Fixed","Ratio"),channel("CutoffMode"), value(1)
rslider  bounds(205, 41, 70, 70),  text("Hertz"),     channel("cutoff"),     trackercolour(225,195,155), range(20,20000,8000,0.25), visible(1), colour( 85, 55,15), textcolour(white), fontcolour("silver"), identchannel("cutoff_ident")
rslider  bounds(205, 41, 70, 70),  text("Ratio"),     channel("CutoffRatio"),trackercolour(225,195,155), range(1,40,8),             visible(0), colour( 85, 55,15), textcolour(white), fontcolour("silver"), identchannel("CutoffRatio_ident")

rslider  bounds(270, 41, 70, 70),  text("Feedback"),   channel("feedback"),   trackercolour(225,195,155), range(-0.9999999, 0.9999999, 0.8), colour( 85, 55,15), textcolour(white), fontcolour("silver")

line     bounds(345,  5,  2,110)
checkbox bounds(365,  7,120, 12), text("Bandpass On/Off"), channel("BPFOnOff") fontcolour("white") colour(yellow) value(0)
checkbox bounds(365, 22,120, 12), text("Balance"),         channel("BalanceOnOff") fontcolour("white") colour(yellow) value(0)
rslider  bounds(355, 41, 70, 70),  text("Bandwidth"),      channel("Bandwidth"),   trackercolour(225,195,155), range(0.001,100.00,0.2,0.5,0.001),             colour( 85, 55,15), textcolour(white), fontcolour("silver")
rslider  bounds(420, 41, 70, 70),  text("Harm."),          channel("HarmRatio"),trackercolour(225,195,155), range(1,48,1,1,1),             colour( 85, 55,15), textcolour(white), fontcolour("silver")
line     bounds(495,  5,  2,110)

rslider  bounds(505, 41, 70, 70),  text("Mix"),        channel("mix"),       trackercolour(225,195,155), range(0, 1.00, 1),             colour( 85, 55,15), textcolour(white), fontcolour("silver")
rslider  bounds(570, 41, 70, 70),  text("Level"),      channel("level"),     trackercolour(225,195,155), range(0, 5.00, 0.7,0.5,0.001),           colour( 85, 55,15), textcolour(white), fontcolour("silver")

keyboard bounds(  0,210, 650, 80), visible(1), identchannel("keyboardID")

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
;-d -n
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100	; SAMPLE RATE
ksmps 		= 	32	; NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	; NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1
massign	0,2

; Author: Iain McCurdy (2012)


instr	1
	kporttime	linseg	0,0.01,0.03				; CREATE A VARIABLE THAT WILL BE USED FOR PORTAMENTO TIME
	gkinput		chnget	"input"					; READ WIDGETS...
	gkLowCut	chnget	"LowCut"
	gkfreq		chnget	"freq"
	gknotnum	chnget	"notnum"
	gkBPFOnOff	chnget	"BPFOnOff"
	gkBalanceOnOff	chnget	"BalanceOnOff"
	gkBandwidth	chnget	"Bandwidth"
	gkHarmRatio	chnget	"HarmRatio"
	gkHarmRatio	port	gkHarmRatio,0.5
	gkCutoffMode	chnget	"CutoffMode"
	gkCutoffMode	init	1
	gkcutoff	chnget	"cutoff"
	gkCutoffRatio	chnget	"CutoffRatio"
	gkfeedback	chnget	"feedback"
	gkmix		chnget	"mix"
	gkmix		portk	gkmix,kporttime
	gklevel		chnget	"level"
	gklevel		portk	gklevel,kporttime
	gkfreq		portk	gkfreq,kporttime
	gafreq		interp	gkfreq
	gkStWidth	chnget	"StWidth"

	if changed(gkinput)==1||timeinstk()==1 then
	 chnset	sprintfk("visible(%d)",1-gkinput),"NoKeyboardID"
;	 chnset	sprintfk("visible(%d)",gkinput),"keyboardID"	 
	endif

	schedkwhen	trigger(gkinput,0.5,0),0,0,99,0,1,210,115
	schedkwhen	trigger(gkinput,0.5,1),0,0,99,0,1,120,210

	ktrig1		changed	gkfreq
	ktrig2		changed	gknotnum
	if ktrig1==1 then						; DUAL FREQUENCY AND NOTE NUMBER CONTROLS
	 koct	=	octcps(gkfreq)
	 chnset	(koct-3)*12,"notnum"
	elseif ktrig2==1 then
	 chnset	cpsmidinn(gknotnum),"freq"
	endif
	
	event_i	"i",2,0,-1
	ktrig	trigger	gkinput,0.5,2
	if ktrig=1 then
	 if gkinput=0 then
	  event	"i",2,0,-1
	 else
	  turnoff2	2,0,0
	 endif
	endif

	/* SOURCE SOUND */
	gksource	chnget	"source"
	if gksource==1 then
 	 gasigL, gasigR	ins
 	elseif gksource==2 then
 	 gasigL	gausstrig	0.5, 100, 8, 0
 	 gasigR	gausstrig	0.5, 100, 8, 0
 	elseif gksource==3 then
 	 kdens	random	475,525
	 gasigL	dust2	0.5, kdens
 	 kdens	random	525,475
	 gasigR	dust2	0.5, kdens
 	elseif gksource==4 then
	 gasigL	pinkish	0.2
	 gasigR	pinkish	0.2
	endif	
endin


instr	2
	/* MIDI AND GUI INTEROPERABILITY */
	iMIDIflag	=	0			; IF MIDI ACTIVATED = 1, NON-MIDI = 0
	mididefault	1, iMIDIflag			; IF NOTE IS MIDI ACTIVATED REPLACE iMIDIflag WITH '1'

	if iMIDIflag==1 then				; IF THIS IS A MIDI ACTIVATED NOTE...
	 inum	notnum
	 ivel	veloc	0,1
	 p1	=	p1 + (rnd(1000)*0.0001)
	 if gkinput=0 then
	  turnoff
	 endif
	 icps	cpsmidi					; READ MIDI PITCH VALUES - THIS VALUE CAN BE MAPPED TO GRAIN DENSITY AND/OR PITCH DEPENDING ON THE SETTING OF THE MIDI MAPPING SWITCHES
	 kfreq	init		icps
	 afreq	init		icps
	else
	 kfreq	=		gkfreq
	 afreq	=		gafreq 
	endif						; END OF THIS CONDITIONAL BRANCH

	if gksource==5 then
	 asigL	mpulse	ivel*5,0,0.001
	 asigR	=	asigL
	elseif gksource==6 then
 	 kenv	expseg	1,0.08,0.001,1,0.001
 	 asigL	dust2	20*(kenv-0.001),100
 	 icf	=	icps*(1+(4*ivel))
 	 icf	limit	icf,20,4000
 	 asigL	butlp	asigL,icf
 	 asigR	=	asigL
	else
	 aenv		linsegr	0,0.05,1,0.05,0
	 asigL	=	gasigL*aenv
	 asigR	=	gasigR*aenv
	endif
	
	if changed(gkCutoffMode)==1 then
	 if gkCutoffMode==1 then
	  chnset	"visible(1)","cutoff_ident"
	  chnset	"visible(0)","CutoffRatio_ident"
	 else
	  chnset	"visible(0)","cutoff_ident"
	  chnset	"visible(1)","CutoffRatio_ident"
	 endif
	endif


	if gkCutoffMode==2 then
	 kcutoff	limit	gkCutoffRatio*kfreq,20,sr/2
	else
	 kcutoff	=	gkcutoff
	endif	

	kLDiff		=	semitone(-gkStWidth)
	kRDiff		=	semitone(gkStWidth)	
	
	aresL 		wguide1 asigL, afreq*kLDiff, kcutoff, gkfeedback
	aresR 		wguide1 asigR, afreq*kRDiff, kcutoff, gkfeedback
	aresL 		dcblock	aresL
	aresR 		dcblock	aresR
	
	/* LOW CUT */
	if gkLowCut==1 then
	 aresL		buthp	aresL, kfreq
	 aresR		buthp	aresR, kfreq
	 aresL		buthp	aresL, kfreq
	 aresR		buthp	aresR, kfreq
	endif
	
	/* BANDPASS FILTER */
	if gkBPFOnOff==1 then
	 aFiltL		butbp	aresL,kfreq*gkHarmRatio,kfreq*gkBandwidth
	 aFiltR		butbp	aresR,kfreq*gkHarmRatio,kfreq*gkBandwidth
	 aFiltL		butbp	aFiltL,kfreq*gkHarmRatio,kfreq*gkBandwidth
	 aFiltR		butbp	aFiltR,kfreq*gkHarmRatio,kfreq*gkBandwidth
	 if gkBalanceOnOff==1 then
	  aresL	balance	aFiltL,aresL
	  aresR	balance	aFiltR,aresR
	 else
	  aresL	=	aFiltL
	  aresR	=	aFiltR
	 endif
	endif
	
	amixL		ntrpol	gasigL*aenv, aresL, gkmix
	amixR		ntrpol	gasigR*aenv, aresR, gkmix

	kenv		linsegr	1,15,0
	amixL		=	amixL * gklevel * kenv
	amixR		=	amixR * gklevel * kenv
	ktime		timeinsts
	krms		rms	amixL,3
	if krms<0.00001&&ktime>0.2&&iMIDIflag==1 then
	 turnoff2	p1,4,0
	endif

			outs	amixL, amixR		; WGUIDE1 OUTPUTS ARE SENT OUT
endin

instr	99
	ky	line	p4,p3,p5
	if metro(16)==1 then
	 chnset	sprintfk("pos(0,%d)",ky),"keyboardID"
	endif
endin
</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>


</CsoundSynthesizer>



























; wguide2.csd
; Written by Iain McCurdy, 2013.

; For a more extensive use of this opcode see the example "Harmonics.csd"

<Cabbage>
form caption("wguide2") size(595, 90), pluginid("WGu2") style("legacy")
image        pos(0, 0), size(595, 90), colour(25,0,25), shape("rounded"), outlinecolour("white"), outlinethickness(4)
button  bounds( 10, 30, 55, 25), text("PLUCK"), channel("pluck"), toggle(0)
rslider bounds( 65, 11, 70, 70), text("Freq. 1"),   channel("freq1"),     range(20, 8000, 160, 0.25), colour(150,110,110), trackercolour(white)
rslider bounds(130, 11, 70, 70), text("Freq. 2"),   channel("freq2"),     range(20, 8000, 160, 0.25), colour(150,110,110), trackercolour(white)
rslider bounds(195, 11, 70, 70), text("Cutoff 1"), channel("cutoff1"),   range(20,20000,8000,0.25),  colour(150,110,110), trackercolour(white)
rslider bounds(260, 11, 70, 70), text("Cutoff 1"), channel("cutoff2"),   range(20,20000,8000,0.25),  colour(150,110,110), trackercolour(white)
rslider bounds(325, 11, 70, 70), text("F.back 1"), channel("feedback1"), range(-0.999, 0.999, 0.2),  colour(150,110,110), trackercolour(white)
rslider bounds(390, 11, 70, 70), text("F.back 2"), channel("feedback2"), range(-0.999, 0.999, 0.2),  colour(150,110,110), trackercolour(white)
rslider bounds(455, 11, 70, 70), text("Mix"),      channel("mix"),       range(0, 1.00, 0.7),        colour(150,110,110), trackercolour(white)
rslider bounds(520, 11, 70, 70), text("Level"),    channel("level"),     range(0, 1.00, 0.7),        colour(150,110,110), trackercolour(white)
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-d -n
</CsOptions>

<CsInstruments>

sr 		= 	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1

;Author: Iain McCurdy (2012)

instr	1
	kporttime	linseg	0,0.001,0.05
	gkfreq1		chnget	"freq1"					;READ WIDGETS...
	gkfreq1		portk	gkfreq1,kporttime
	afreq1		interp	gkfreq1
	gkfreq2		chnget	"freq2"					;READ WIDGETS...
	gkfreq2		portk	gkfreq2,kporttime
	afreq2		interp	gkfreq2
	gkcutoff1	chnget	"cutoff1"				;
	gkcutoff2	chnget	"cutoff2"				;
	gkfeedback1	chnget	"feedback1"				;
	gkfeedback2	chnget	"feedback2"				;
	gkmix		chnget	"mix"					;
	gklevel		chnget	"level"					;
	;asigL, asigR	diskin2	"Seashore.wav",1,0,1			;USE SOUND FILE FOR TESTING
	asigL, asigR	ins

 	kFBtot	=	gkfeedback1 + gkfeedback2		; protect against combined feedbacks greater than 0.5
 	if kFBtot>0.5 then
 	 gkfeedback1	=	gkfeedback1 / (kFBtot*2)
 	 gkfeedback2	=	gkfeedback2 / (kFBtot*2)
 	else
 	 gkfeedback1	=	gkfeedback1
 	 gkfeedback2	=	gkfeedback2
 	endif

	aplk	init	0
	kpluck	chnget	"pluck"					; pluck button
	if changed(kpluck)==1 then
	 aplk	=	1
	 asigL	+=	aplk
	 asigR	+=	aplk
	endif

	aresL	wguide2 asigL, afreq1, afreq2, gkcutoff1, gkcutoff2, gkfeedback1, gkfeedback2
	aresR	wguide2 asigR, afreq1, afreq2, gkcutoff1, gkcutoff2, gkfeedback1, gkfeedback2
	aresL	dcblock2	aresL	;BLOCK DC OFFSET
	aresR	dcblock2	aresR	;BLOCK DC OFFSET
	amixL		ntrpol	asigL,aresL,gkmix
	amixR		ntrpol	asigR,aresR,gkmix
			outs	amixL*gklevel, amixR*gklevel		;WGUIDE1 OUTPUTS ARE SENT OUT
endin

</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>


</CsoundSynthesizer>
; AutopanTremolo.csd
; 
; An autopan/tremolo effect in which a variety of LFO shapes can be employed.
; 
; LFO Shapes
; ----------
; sine
; triangle
; square
; Randomi	-	an interpolating random function
; Randomh	-	a 'sample and hold' type function
; Rspline	-	random spline
; User	-	an LFO shape (best understood when using tremolo function) 
; 		in which the user can define the bias (percussive type : reverse percussive) 
; 		and duty emphasis (emphasis of high state/loud against low state/quiet)

<Cabbage>
form caption("Autopan / Tremolo") size(565, 102), pluginid("aptr"), guirefresh(32) style("legacy")
image pos( 0,  0),                size(565, 102),     colour("Maroon"), shape("rounded"), outlinecolour("white"), outlinethickness(4) 
rslider  bounds(  5,  6, 90, 90), text("Freq.[Hz]"),  channel("rate"),  range(0.1, 50, 0.5, 0.5),   valuetextbox(1), textbox(1), trackercolour("tomato")
rslider  bounds( 80,  6, 90, 90), text("Tempo[BPM]"), channel("tempo"), range(6, 3000, 30, 0.5, 1), valuetextbox(1), textbox(1), trackercolour("tomato")
rslider  bounds(175,  6, 90, 90), text("Depth"),      channel("depth"), range(0, 1.00, 1, 0.5),     valuetextbox(1), textbox(1), trackercolour("tomato")

line     bounds(360, 10, 107, 2), colour("Grey")
label    bounds(393,  5, 43, 12), text("USER"), colour("Maroon")
rslider  bounds(345, 16, 80, 80), text("Bias"),      channel("bias"), range(-1, 1.00, 0),          valuetextbox(1), textbox(1), trackercolour("tomato")
rslider  bounds(405, 16, 80, 80), text("Duty"),      channel("duty"), range(0.01, 2000.00, 1, 0.25, 0.001),          valuetextbox(1), textbox(1), trackercolour("tomato")

rslider  bounds(470,  6, 90, 90), text("Level"),      channel("level"), range(0, 1.00, 1),          valuetextbox(1), textbox(1), trackercolour("tomato")

checkbox bounds(160, 40, 25, 25), colour("yellow"), channel("indicator"),  value(0), shape("ellipse"), active(0)
combobox bounds(260, 13,  90,20), channel("mode"), value(1), text("Autopan", "Tremolo")
combobox bounds(260, 38,  90,20), channel("wave"), value(1), text("Sine", "Triangle", "Square", "Randomi", "Randomh", "Rspline", "User")
checkbox bounds(260, 63, 90, 15), text("TEST TONE"), colour("lime"), channel("test"),  value(0)
</Cabbage>

<CsoundSynthesizer>
<CsOptions>
-d -n
</CsOptions>
<CsInstruments>
sr = 44100
ksmps = 32
nchnls = 2
0dbfs = 1

;Author: Iain McCurdy (2012)

gihanning	ftgen	0, 0, 8192, 20, 2, 1

opcode	PanTrem,aa,aakkkKkK
	ainL,ainR,krate,kdepth,kmode,kwave,kbias,kduty	xin	;READ IN INPUT ARGUMENTS
	ktrig	changed	kwave				;IF LFO WAVEFORM TYPE IS CHANGED GENERATE A MOMENTARY '1' (BANG)
	if ktrig=1 then					;IF A 'BANG' HAS BEEN GENERATED IN THE ABOVE LINE
		reinit	UPDATE				;BEGIN A REINITIALIZATION PASS FROM LABEL 'UPDATE' SO THAT LFO WAVEFORM TYPE CAN BE UPDATED
	endif						;END OF THIS CONDITIONAL BRANCH
	UPDATE:						;LABEL CALLED UPDATE
	iwave	init		i(kwave)
	iwave	limit	iwave,	0, 6			;
	if iwave==3 then				;if 'randomi' is chosen...
	 klfo	randomi	-kdepth,kdepth,krate,1
	elseif iwave==4 then				;or if 'randomh' is chosen...
	 klfo	randomh	-kdepth,kdepth,krate,1		
	elseif iwave==5 then				;or if 'rspline' is chosen...
	 klfo	rspline	-kdepth,kdepth,krate,krate*2		
	elseif iwave==6 then				;or if 'user' has been chosen...
	 aphs	phasor	krate				;create a linear pointer from 0 to 1 
	 aphs 	pdhalf	aphs, kbias			;distort the linearity using pdhalf
	 kphs	downsamp	aphs			;downsample to krate
	 klfo	tablei	kphs,gihanning,1		;read 
	 klfo	pow	klfo,kduty
	 klfo	=	((klfo*2)-1)*kdepth
	else						;otherwise (use lfo opcode)
	 klfo	lfo	kdepth, krate, iwave		;CREATE AN LFO
	endif
	rireturn					;RETURN FROM REINITIALIZATION PASS
	klfo	=	(klfo*0.5)+0.5			;RESCALE AND OFFSET LFO SO IT STAYS WITHIN THE RANGE 0 - 1 ABOUT THE VALUE 0.5
	if iwave=2||iwave==4 then			;IF SQUARE WAVE MODULATION HAS BEEN CHOSEN...
		klfo	portk	klfo, 0.001		;SMOOTH THE SQUARE WAVE A TINY BIT TO PREVENT CLICKS
	endif						;END OF THIS CONDITIONAL BRANCH	
	if kmode=0 then	;PAN				;IF PANNING MODE IS CHOSEN FROM BUTTON BANK...
		alfo	interp	klfo			;INTERPOLATE K-RATE LFO AND CREATE A-RATE VARIABLE
		aoutL	=	ainL*sqrt(alfo)		;REDEFINE GLOBAL AUDIO LEFT CHANNEL SIGNAL WITH AUTO-PANNING
		aoutR	=	ainR*(1-sqrt(alfo))	;REDEFINE GLOBAL AUDIO RIGHT CHANNEL SIGNAL WITH AUTO-PANNING
		kindicator	=	(klfo>0.5?1:0)
		chnset	kindicator,"indicator"
	elseif kmode=1 then	;TREM			;IF TREMOLO MODE IS CHOSEN FROM BUTTON BANK...
		kindicator	=	(klfo>0.5?1:0)
		if changed:k(kindicator)==1 then
		 chnset	kindicator,"indicator"
		endif
		klfo	=	klfo+(0.5-(kdepth*0.5))	;MODIFY LFO AT ZERO DEPTH VALUE IS 1 AND AT MAX DEPTH CENTRE OF MODULATION IS 0.5
		alfo	interp	klfo			;INTERPOLATE K-RATE LFO AND CREATE A-RATE VARIABLE
		aoutL	=	ainL*(alfo^2)		;REDEFINE GLOBAL AUDIO LEFT CHANNEL SIGNAL WITH TREMELO
		aoutR	=	ainR*(alfo^2)		;REDEFINE GLOBAL AUDIO RIGHT CHANNEL SIGNAL WITH TREMELO
	endif						;END OF THIS CONDITIONAL BRANCH
		xout	aoutL,aoutR			;SEND AUDIO BACK TO CALLER INSTRUMENT
endop

instr 1
krate chnget "rate"
ktempo chnget "tempo"
kdepth chnget "depth"
kmode chnget "mode"
kwave chnget "wave"
kbias chnget "bias"
kduty chnget "duty"
klevel chnget "level"
ktest	chnget	"test"

ktrig	changed	krate
ktrig2	changed	ktempo
if ktrig=1 then
 chnset	krate*60,"tempo"
elseif ktrig2=1 then
 chnset	ktempo/60,"rate"
endif

if ktest=1 then
 a1	vco2	0.2,300,4,0.5
 a2	=	a1
else
 a1,a2	ins
endif

a1,a2	PanTrem	a1,a2,krate,kdepth,kmode-1,kwave-1,kbias,kduty
a1	=	a1 * klevel
a2	=	a2 * klevel
	outs	a1,a2
endin

</CsInstruments>

<CsScore>
i 1 0 [60*60*24*7]
</CsScore>

</CsoundSynthesizer>; doppler.csd
; Written by Iain McCurdy, 2013

; CONTROLS
; Input		-	select input: either left channel, right channel, or a mix of both channels
; Shape		-	shape of the LFO moving the source: either sine, triangle, random spline OR manual
			   note, if 'random' is chosen, 'speed' can take a little while to respond to changes
			   made to the 'speed' control is the speed was previously slow
			   If 'manual' is selected source position is controlled using the on screen slider
; Room Size	-	effectively the dpeth of the doppler pitch modulating effect
; Speed		-	speed of the LFO moving the source with respect to the mic. position
; Depth		-	amplitude of the LFO moving the source
; Smoothing	-	a smoothing filter applied to doppler pitch modulation. Its effect can be subtle.
; Mix		-	a dry/wet mixer. Mixing the dry and wet signals can be used to create chorus effects.
; Ampscale	-	amount of amplitude drop off as the source moves away from the source. 
			 Kind of like another room size control
; Pan Depth	-	Amount of left-right movement in the output as the source swings past the microphone
; Out Amp	-	scales the output signal
; Mic.Position	-	Position of the microphone
; Source Position-	Location of the source (for display only unless 'manual' shape is chosen)

<Cabbage>
form caption("-oOo-"), size(610, 180), pluginid("dopp")   style("legacy")
label    bounds(20, 10, 35,11), text("Input:")
combobox bounds(10, 22, 60,18), channel("input"), value(4), text("left","right","mixed","test")
label    bounds(20, 50, 35,11), text("Shape:")
combobox bounds(10, 62, 60,18), channel("shape"), value(1), text("sine","triangle","random","manual")

rslider bounds( 75, 10, 80, 80), channel("RoomSize"), range(0.1,100,40,0.5,0.5), text("Room Size"), textbox(1), valuetextbox(1), colour( 45, 45, 45), trackercolour(200,200,200)
rslider bounds(140, 10, 80, 80), channel("speed"), range(0,10,0.08,0.5,0.01), text("Speed"), textbox(1), valuetextbox(1),        colour( 45, 45, 45), trackercolour(200,200,200)
rslider bounds(205, 10, 80, 80), channel("depth"), range(0,0.5,0.5,0.5,0.01), text("Depth"), textbox(1), valuetextbox(1),        colour( 45, 45, 45), trackercolour(200,200,200)
rslider bounds(270, 10, 80, 80), channel("filtercutoff"), range(1,20,6,1,1), text("Smooth"), textbox(1), valuetextbox(1),     colour( 45, 45, 45), trackercolour(200,200,200)
rslider bounds(335, 10, 80, 80), channel("ampscale"), range(0,1,0.98), text("Amp.Scl."), textbox(1), valuetextbox(1),           colour( 45, 45, 45), trackercolour(200,200,200)
rslider bounds(400, 10, 80, 80), channel("PanDep"), range(0,0.5,0.4), text("Pan Depth"), textbox(1), valuetextbox(1),            colour( 45, 45, 45), trackercolour(200,200,200)
rslider bounds(465, 10, 80, 80), channel("mix"), range(0,1,1), text("Mix"), textbox(1), valuetextbox(1),                         colour( 45, 45, 45), trackercolour(200,200,200)
rslider bounds(530, 10, 80, 80), channel("OutAmp"), range(0,1,0.5), text("Level"), textbox(1), valuetextbox(1),                  colour( 45, 45, 45), trackercolour(200,200,200)

hslider bounds( 10, 86,590, 40), channel("microphone"), range(0,1.00,0.5), text("Mic. Position"),   textbox(1), valuetextbox(1), colour(100,100,100), trackercolour(200,200,200)
hslider bounds( 10,111,590, 40), channel("source"),     range(0,1.00,0.5), text("Source Position"), textbox(1), valuetextbox(1), colour(100,100,100), trackercolour(200,200,200)

label    bounds( 7, 155,120,18), text("D O P P L E R"),  fontcolour(100,100,100)
label    bounds( 5, 153,120,18), text("D O P P L E R"),  fontcolour(180,180,180)

label   bounds(232,160, 165, 12), text("Author: Iain McCurdy |2013|"), FontColour("grey")

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1	;MAXIMUM AMPLITUDE VALUE

;AMPLITUDE SCALING CURVE
giampcurve	ftgen	0,0,131072,5,0.01,131072*0.5,1,131072*0.5,0.01

instr	1
	gkinput      	chnget  "input"  
	gkRoomSize      chnget  "RoomSize"  
	gkspeed         chnget  "speed"     
	gkdepth		chnget	"depth"     
	gkfiltercutoff	chnget	"filtercutoff"
	gkfiltercutoff	init	6
	gkampscale	chnget	"ampscale"
	gkPanDep	chnget	"PanDep"
	kmix		chnget	"mix"				;READ IN DRY/WET CROSSFADER WIDGET
	gkOutAmp	chnget	"OutAmp"
	gkmicrophone	chnget	"microphone"
	gkshape		chnget	"shape"
	gkshape		init	1
	
	/* INPUT */
	aL,aR		ins
	if gkinput=1 then
	 asig	=	aL
	elseif gkinput=2 then
	 asig	=	aR
	elseif gkinput=3 then
	 asig	=	(aL+aR)*0.677
	else
 	 ;INPUT TONE=============================================(for testing)
	 asig		vco2	.5, 300		;GENERATE TONE
	 asig		tone	asig, 1200	;LOW PASS FILTER TO SOFTEN THE TONE
	 ;=======================================================
	endif	 

	
	;LFO(modulates source position)=========================
	ktrig		changed	gkshape				;IF I-RATE VARIABLE SLIDER IS CHANGED GENERATE A '1'
	if ktrig=1 then						;IF TRIGGER IS '1'...
		reinit RESTART_LFO				;BEGIN A REINITIALISATION PASS FROM LABEL 'UPDATE' 
	endif							;END OF THIS CONDITIONAL BRANCH
	RESTART_LFO:						;LABEL CALLED 'UPDATE'
	if i(gkshape)=3 then					;IF 'RANDOM' SHAPE IS SELECTED...
	 gksource	rspline	0.5-gkdepth, 0.5+gkdepth, gkspeed,gkspeed*2
	elseif i(gkshape)=4 then				;IF 'MANUAL' SHAPE IS SELECTED...
	 gksource	chnget	"source"			;READ SOURCE POSITION FROM SLIDER 
	else
	 gksource	lfo	gkdepth, gkspeed, i(gkshape)-1	;LFO
	 gksource	=	gksource + 0.5			;OFFSET INTO THE POSITIVE DOMAIN
	endif
	rireturn
	chnset	gksource,"source"
	;======================================================
	
	kporttime	linseg	0, 0.001, 0.1		;RAMPING UP PORTAMENTO TIME VARIABLE	
	
	;DOPPLER================================================
	ispeedofsound   init	340.29				;SPEED OF SOUND DEFINED
	if gkshape==4 then
	 ksource	portk	gksource,kporttime		;SMOOTH SOURCE POSITION MOVEMENT
	else
	 ksource	=	gksource
	endif
	kmicrophone	portk	gkmicrophone, kporttime		;SMOOTH MICROPHOPNE POSITION MOVEMENT
	ktrig		changed	gkfiltercutoff			;IF I-RATE VARIABLE SLIDER IS CHANGED GENERATE A '1'
	if ktrig=1 then						;IF TRIGGER IS '1'...
		reinit UPDATE					;BEGIN A REINITIALISATION PASS FROM LABEL 'UPDATE' 
	endif							;END OF THIS CONDITIONAL BRANCH
	UPDATE:							;LABEL CALLED 'UPDATE'
	kdisp		limit	ksource-(kmicrophone-0.5), 0, 1	;CALCULATE DISPLACEMENT (DISTANCE) BETWEEN SOURCE AND MICROPHONE AND LIMIT VALUE TO LIE BETWEEN ZERO AND 1
	kamp		table	kdisp, giampcurve,1		;READ AMPLITUDE SCALING VALUE FROM TABLE
	kamp		ntrpol	1, kamp, gkampscale		;CALCULATE AMOUNT OF AMPLITUDE SCALING DESIRED BY THE USER FROM THE ON SCREEN SLIDER
	aout		doppler	asig*kamp, ksource*gkRoomSize, kmicrophone*gkRoomSize, ispeedofsound, i(gkfiltercutoff)	;APPLY DOPPLER EFFECT
	rireturn						;RETURN FROM REINITIALISATION PASS
	kpan		=	(gksource<gkmicrophone?0.5+gkPanDep:0.5-gkPanDep)	;CALCULATE PAN VALUE ACCORDING TO SOURCE AND MIC POSITION
	kpan		portk	kpan, kporttime			;APPLY PORTAMENTO SMOOTHING TO PAN POSITION VALUE 
	aL		ntrpol	asig,aout*sqrt(kpan)*gkOutAmp,kmix	;DRY/WET MIX LEFT CHANNEL
	aR		ntrpol	asig,aout*sqrt(1-kpan)*gkOutAmp,kmix	;DRY/WET MIX RIGHT CHANNEL
			outs	aL, aR				;SEND AUDIO TO OUTPUTS AND APPLY PANNING
endin

</CsInstruments>

<CsScore>
i 1 0 3600	;DUMMY SCORE EVENT - PERMITS REAL-TIME PERFORMANCE FOR 1 HOUR
</CsScore>

</CsoundSynthesizer>; DopplerSpin.csd
; Written by Iain McCurdy, 2013

; CONTROLS

; Speed				--	Frequency of the spinning
; Loc.				--	Listening position in relation to the circular motion (range from ('centre' to 'edge'). Can be thought of as a control for the amount of amplitude modulation.
; Orient.			--	direction of listening (in radians)
; Width				--	width of panning directionality in the modulation 
; Depth				--	depth of doppler effect (circle size).
; (Reverb) Scaling		--	a dry/wet mixer. Mixing the dry and wet signals can be used to create chorus effects.
; (Reverb) Time			--	amount of amplitude drop off as the source moves away from the source. 
; (Reverb) Damping		--	Amount of left-right movement in the output as the source swings past the microphone
; Mix				--	scales the output signal
; Level				--	Output Level
; Auto-Frequency		--	If this button is activated the frequency of the spinning moves randomly between -Frequency of Rotation and +Frequency of Rotation

; This example uses three LFOs to create the effect of a sound moving in a circle around the listener. 
; The three parameters controlled by these LFOs are amplitude, panning and delay time.
; The modulation of the delay time also results in a modulation of pitch which is sometimes referred to as the Doppler effect.                                             
; Note that in this example the 'vdelayxw' opcode is used to implement the delay and doppler shift. 
; This opcode is unique in that the delay time of the write pointer rather than the read pointer is modulated. 
; This is appropriate here as it is the sound source that is moving, not the listener.          
; Crucial to this effect is that that all three LFOs share the same frequency value. 
; Negative frequency values are also allowed - this would represent a change in direction of the source sounds motion around us.                             
; Also of crucial importance is the phase relationship between the three LFOs as this defines exactly where the sound source is in relation to the listener.                             
; The panning LFO should be at its points of minimum rate of change when the sound source is moving parallel to the direction in which the listener is facing, i.e. directly to the left or to the right of the listener.                   
; The delay time LFO (pitch modulation/doppler) should be at its points of minimum rate of change when the sound source is  moving perpendicular to the direction in which the listener is facing, i.e. directly in front of or behind the listener.
; The phase difference between these two LFOs is either 90 or 270 degrees, depending on whether the source sound is moving in a clockwise or anticlockwise direction around us.        
; Amplitude modulation comes into play whenever we are not listening from the centre of the circle of motion. 
; The close to the edge of the circle we are the greater the amount of amplitude modulation we will experience. 
; If the amplitude modulation is extreme then the circle of the source sound's motion must be extremely large. The phase of the amplitude modulation LFO is also adjustable ('Orientation' slider -   
; this define which edge of the circle we are closest to, e.g. upper, lower, left, right etc. It is probably best to always include at least a small amount of amplitude modulation as we perceive sounds directly to our left or to our right to be
; louder, even if they remain equidistant from us. In this case the amplitude LFO phase ('Orientation') should be 0.5 (radians).                                                  
; The waveform for all three LFOs is a sine wave. 
; This defines the object's motion as being circular. 
; If we were to use a different waveform this would model non-circular motion. 
; There is interesting potential in experimentation in this direction with this example.                                
; Finally as the moving signal becomes more distant, i.e. when the amplitude scaling function is at its minimum, a reverberated version of the signal can become more evident. 
; The degree to which this is present can be scaled using the 'Reverb Scaling' slider.                                    

<Cabbage>
form caption("Doppler Spin"), size(700,265), pluginid("SDop") style("legacy")

label    bounds( 8 , 4, 70, 15), text("i  n  p  u  t"), fontcolour("white")
combobox bounds(10, 30, 60,20), channel("input"), value(1), text("left","right","mixed","test")

line     bounds( 85,  5,  2, 70), colour("Grey")
label    bounds(185,  4, 90, 15), text("r  e  v  e  r  b"), fontcolour("white")
checkbox bounds(100, 33,110, 20), text("Reverb On/Off") channel("RvbOnOff"), FontColour("White"), colour("lime")  value(1)
rslider  bounds(210, 23, 55, 55), channel("RvbScaling"), range(0,1.000,0.3,1,0.001),     text("Scaling"),               TextBox(0), colour( 95, 45,115), trackercolour(white)
rslider  bounds(270, 23, 55, 55), channel("RvbTime"),    range(0.3,0.990,0.7,1,0.001),   text("Time"),                  TextBox(0), colour( 85, 45,125), trackercolour(white)
rslider  bounds(330, 23, 55, 55), channel("RvbFilt"), range(20,20000,4000,0.5,0.001),    text("Damping"),               TextBox(0), colour( 75, 45,135), trackercolour(white)

line     bounds(390,  5,  2, 70), colour("Grey")
label    bounds(410,  4, 90, 15), text("o  u  t  p  u  t"), fontcolour("white")
rslider  bounds(400, 23, 55, 55), channel("mix"),        range(0,1.000,1,1,0.001),       text("Mix"),                   TextBox(0), colour( 65, 45,145), trackercolour(white)
rslider  bounds(460, 23, 55, 55), channel("OutGain"),    range(0,1.000,0.7,1,0.001),     text("Level"),                 TextBox(0), colour( 55, 45,155), trackercolour(white)
line     bounds(520,  5,  2, 70), colour("Grey")

checkbox bounds(530, 33,120, 20), text("Random Speed") channel("RandSpeed"), FontColour("White"), colour("lime")  value(0)

hslider bounds(  5, 80,690, 35), channel("freq"),        range(-10,10.0,0.2,1,0.01),     text("Speed"),         TextBox(1), colour(145, 45, 65), trackercolour(white)	;Frequency of Rotation
hslider bounds(  5,110,690, 35), channel("AmpDepth"),    range(0,1.000,0.7,1,0.001),        text("Loc."),          TextBox(1), colour(135, 45, 75), trackercolour(white)	;Central/Edge
hslider bounds(  5,140,690, 35), channel("AmpPhase"),    range(0,1.000,0.5,1,0.001),        text("Orient."),       TextBox(1), colour(125, 45, 85), trackercolour(white)	;Orientation [radians]
hslider bounds(  5,170,690, 35), channel("PanDepth"),    range(0,1.000,1,1,0.001),          text("Width"),         TextBox(1), colour(115, 45, 95), trackercolour(white)	;Panning Width
hslider bounds(  5,200,690, 35), channel("DopDep"),      range(0,0.030,0.003,1,0.0001), text("Depth"),         TextBox(1), colour(105, 45,105), trackercolour(white)	;Doppler Depth

label   bounds( 5,247, 170, 12), text("Author: Iain McCurdy |2013|"), FontColour("grey")

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1	;MAXIMUM AMPLITUDE VALUE

gisine	ftgen	0,0,131072,10,1

instr	1
	gkinput      	chnget  "input"  
	kfreq      	chnget	"freq"
	kAmpDepth  	chnget	"AmpDepth"  	
	kAmpPhase  	chnget	"AmpPhase"  	
	kPanDepth  	chnget	"PanDepth"  	
	kDopDep    	chnget	"DopDep"    	
	kRvbScaling	chnget	"RvbScaling"	
	kRvbTime   	chnget	"RvbTime"   	
	kRvbFilt   	chnget	"RvbFilt"   	
	kmix  	 	chnget	"mix"   	
	kOutGain   	chnget	"OutGain"   	
	kRvbOnOff	chnget	"RvbOnOff"
	kRandSpeed   	chnget	"RandSpeed"   	
	
	/* INPUT */
	aL,aR		ins
	if gkinput=1 then
	 asig	=	aL
	elseif gkinput=2 then
	 asig	=	aR
	elseif gkinput=3 then
	 asig	=	(aL+aR)*0.677
	else
 	 ;INPUT TONE=============================================(for testing)
	 asig		vco2	.5, 300		;GENERATE TONE
	 asig		tone	asig, 1200	;LOW PASS FILTER TO SOFTEN THE TONE
	 ;=======================================================
	endif	 

	if kRandSpeed=1 then
	 kfreq	jspline	kfreq,1,4
	endif


	
	kporttime	linseg	0,0.001,0.1			;CREATE 'PORTAMENTO TIME'. A FUNCTION THAT RISES QUICKLY FROM ZERO TO A HELD VALUE.
	kAmpPhase	portk	kAmpPhase, kporttime		;APPLY PORTAMENTO TO gkAmpPhase. CREATE NEW OUTPUT VARIABLE kAmpPhase (GLOBAL VARIABLES CAN'T BE BOTH INPUT AND OUTPUT)
	kDopDep		portk	kDopDep, kporttime		;APPLY PORTAMENTO TO gkDopDep. CREATE NEW OUTPUT VARIABLE kDopDep (GLOBAL VARIABLES CAN'T BE BOTH INPUT AND OUTPUT)

	aAmp 		osciliktp kfreq, gisine, kAmpPhase	;AN LFO DEFINES A VARIABLE USED TO MODULATE AMPLITUDE (NOTE: VARIABLE PHASE). THIS MODELS THE LOCATION WITHIN THE CIRCLE FROM WHICH WE ARE LISTENING. NO AMPLITUDE MODULATION REPRESENT REPRESENTS OUR LISTENING POSITION BEING EXACTLY CENTRAL, MAXIMUM MODULATION REPRESENTS US BEING NEAR TO THE EDGE OF A LARGE CIRCLE. THE CONTROL OVER PHASE OF THIS LFO REPRESENTS WHICH EDGE WE ARE CLOSER TO.
	aAmp		=	(aAmp * 0.5 * kAmpDepth) + 0.5	;RESCALE AND OFFSET AMPLITUDE MODULATION LFO
	
	aPan		oscili	(kPanDepth * 0.5), kfreq, gisine, 0.75	;AN LFO DEFINES A VARIABLE FOR PANNING CONTROL - I.E. WHETHER SOUND IS CURRENTLY TO OUT LEFT OR TO OUT RIGHT. NOTE THAT PHASE IS 0.75 AND THEREFORE 0.75 RADIANS (OR 270 DEGREES OUT OF PHASE) WITH THE DELAY MODULATION 
	aPan		=	aPan + 0.5					;OFFSET PANNING LFO

	iMaxDelay	=	1		;DEFINE A VARIABLE THAT WILL BE USE FOR 'MAXIMUM DELAY TIME' (BUFFER LENGTH)
	aDelTim		oscili	kDopDep, kfreq, gisine, 0	;AN LFO DEFINES A VARIABLE FOR DELAY TIME (NOTE PHASE AT ZERO)
	aDelTim		=	aDelTim + kDopDep		;DELAY TIME  VARIABLE 'aDelay' IS OFFSET TO STAY WITHIN THE POSITIVE DOMAIN	
		
	;vdelayxw IS USED FOR THE DELAY READ/WRITE AS IT MODULATES THE WRITE POINTER RATHER THAN THE READ POINTER.
	;THIS IS MORE APPROPRIATE IN THIS EXAMPLE AS THE SOURCE IS MOVING BUT THE POINT OF LISTENING IS STATIONARY
	aDelTap	vdelayxw	asig, aDelTim, iMaxDelay, 16
	
	aL, aR	pan2 	aDelTap, aPan, 1	;APPLY PANNING TO SIGNAL OUTPUT FROM DELAY USING pan2 OPCODE. CREATE A NEW 

	aL	=	aL * (aAmp^0.5)		;APPLY AMPLITUDE MODULATION (CREATE A NEW AUDIO SIGNAL - DRY (UN-REVERBERATED) SIGNAL)
	aR	=	aR * (aAmp^0.5)		;APPLY AMPLITUDE MODULATION (CREATE A NEW AUDIO SIGNAL - DRY (UN-REVERBERATED) SIGNAL)

	if kRvbOnOff=1 then
	 aRvbL, aRvbR	reverbsc	aL, aR, kRvbTime, kRvbFilt	;REVERB (UNAFFECTED BY AMPLITUDE MODULATION)
	 aL	=	(aL+(aRvbL*kRvbScaling))
	 aR	=	(aR+(aRvbL*kRvbScaling))
	endif
	
	aL	ntrpol	asig,aL,kmix
	aR	ntrpol	asig,aR,kmix
	
	outs	aL * kOutGain , aR * kOutGain 	;SEND AUDIO TO OUTPUTS. MIX DRY AND REVERBERATED SIGNALS.
endin

</CsInstruments>

<CsScore>
i 1 0 [3600*24*7*52]
</CsScore>

</CsoundSynthesizer>; Flanger.csd
; Written by Iain McCurdy, 2012.

<Cabbage>
form caption("Flanger") size(510,100), pluginid("flan") style("legacy")
image pos(0, 0), size(510,100), colour("lightgreen"), shape("rounded"), outlinecolour("white"), outlinethickness(4) 
line	 bounds( 15, 10,190,  2)
label    bounds( 75,  7, 70, 10), text("MODULATION"), fontcolour("white"), colour(100,110,130)
rslider  bounds(  5, 20, 70, 70), text("Rate"),     channel("rate"),  range(0.001, 40, 0.15, 0.5, 0.001),      colour("DarkGreen"), trackercolour( 50,150, 50), textcolour(  0, 30,  0)
rslider  bounds( 75, 20, 70, 70), text("Depth"),    channel("depth"), range(0, 0.01, 0.005,1,0.0001),          colour("DarkGreen"), trackercolour( 50,150, 50), textcolour(  0, 30,  0)
rslider  bounds(145, 20, 70, 70), text("Offset"),    channel("delay"), range(0.00002, 0.1, 0.0001, 0.5, 0.0001), colour("DarkGreen"), trackercolour( 50,150, 50), textcolour(  0, 30,  0)
rslider  bounds(215, 20, 70, 70), text("Feedback"), channel("fback"), range(-1, 1, 0),                         colour("DarkGreen"), trackercolour( 50,150, 50), textcolour(  0, 30,  0)
checkbox bounds(290, 20, 80, 15), colour("yellow"), channel("ThruZero"),  value(1), text("Thru.Zero"), fontcolour(  0, 30,  0)
label    bounds(295, 47, 65, 12), text("LFO Shape:"), fontcolour(  0, 30,  0)
combobox bounds(290, 60, 80, 18), channel("lfoshape"), value(1), text("parabola", "sine", "triangle", "randomi", "randomh")
rslider  bounds(370, 20, 70, 70), text("Mix"),      channel("mix"),   range(0, 1.00, 0.5),                     colour("DarkGreen"), trackercolour( 50,150, 50), textcolour(  0, 30,  0)
rslider  bounds(435, 20, 70, 70), text("Level"), channel("level"), range(0, 1.00, 1), colour("DarkGreen"), trackercolour( 50,150, 50), textcolour(  0, 30,  0)
</Cabbage>

<CsoundSynthesizer>
<CsOptions>
-d -n
</CsOptions>
<CsInstruments>
sr = 44100
ksmps = 32
nchnls = 2
0dbfs = 1

;Author: Iain McCurdy (2012)

opcode	Flanger,a,akkkkk
	ain,krate,kdepth,kdelay,kfback,klfoshape	xin			;read in input arguments
	iparabola	ftgentmp	0, 0, 131072, 19, 0.5, 1, 180, 1	;u-shape parabola for lfo
	isine		ftgentmp	0, 0, 131072, 19, 1, 0.5, 0,   0.5 	;sine-shape for lfo
	itriangle	ftgentmp	0, 0, 131072, 7, 0,131072/2,1,131072/2,0;triangle-shape for lfo
	adlt		interp		kdelay							;a new a-rate variable 'adlt' is created by interpolating the k-rate variable 'kdlt'
	if klfoshape==1 then
	 amod		oscili		kdepth, krate, iparabola			;oscillator that makes use of the positive domain only u-shape parabola
	elseif klfoshape==2 then
	 amod		oscili		kdepth, krate, isine			;oscillator that makes use of the positive domain only sine wave
	elseif klfoshape==3 then
	 amod		oscili		kdepth, krate, itriangle			;oscillator that makes use of the positive domain only triangle
	elseif klfoshape==4 then	
	 amod		randomi		0,kdepth,krate,1
	else	
	 amod		randomh		0,kdepth,krate,1
	endif
	adlt		sum		adlt, amod				;static delay time and modulating delay time are summed
	adelsig		flanger 	ain, adlt, kfback , 1.2			;flanger signal created
	adelsig		dcblock		adelsig
	aout		sum		ain*0.5, adelsig*0.5			;create dry/wet mix 
			xout		aout					;send audio back to caller instrument
endop

instr 1
	krate chnget "rate"				;read in widgets
	kdepth chnget "depth"
	kdelay chnget "delay"
	kfback chnget "fback"
	klevel chnget "level"
	klfoshape chnget "lfoshape"
	kThruZero chnget "ThruZero"
	kmix chnget "mix"
	
	a1,a2	ins					;read live stereo audio input
	;a1	pinkish	0.2				;for testing...
	;a2	pinkish	0.2

	kporttime	linseg	0,0.001,0.1
	kdelay	portk	kdelay,kporttime

	afla1	Flanger	a1,krate,kdepth,kdelay,kfback,klfoshape	;call udo (left channel)
	afla2	Flanger	a2,krate,kdepth,kdelay,kfback,klfoshape	;call udo (right channel)

	if kThruZero==1 then				;if 'Thru.Zero' mode is selected...
	 a1	delay	a1,0.00002
	 a2	delay	a2,0.00002
	 a1	ntrpol	-a1,afla1,kmix			;invert delayed dry signal and mix with flanger signal
	 a2	ntrpol	-a2,afla2,kmix
	else						;otherwise... (standard flanger)
	 a1	ntrpol	a1,afla1,kmix			;create mix between dry signal and flanger signal
	 a2	ntrpol	a2,afla2,kmix
	endif
		outs	a1*klevel,a2*klevel		;send audio to outputs, scale amplitude according to GUI knob value
endin

</CsInstruments>

<CsScore>
i 1 0 [60*60*24*7]
</CsScore>

</CsoundSynthesizer>; LeslieSpeaker.csd
; Written by Iain McCurdy, 2016.

; An emulation of a Leslie rotating speaker as commonly used with a Hammond organ

; A Leslie speaker consists of two speaker drivers, a high frequency tweeter and a low frequency woofer, which rotate at on of two speed according to a switch.
;  (For clarification, the woofer itself does not actually spin, instead a baffle rotates around it.)

; The main interface is simply two main switches which switch between the slow and fast speeds, and a 'setup' button which accesses advanced controls.
; The default advanced settings represent typical characteristics for a real Leslie speaker.

; This .csd works as an effect upon the audio input, but it can also be tested by playing a basic built-in organ using a connected MIDI keyboard

; Setup
; -----
; The same set of parameters are provided for the woofer and the tweeter.

; Cutoff	-	the cutoff frequency of the crossover (lowpass for the woofer, highpass for the tweeter)
; Damping	-	change from one speed to the other is not instantaneous.
;				'Damping' defines the amount of mechanical resistance to changing speed.
;				Typically the woofer takes longer to change speed (higher damping).
; RPM Slow	-	speed (in revolutions per minute) when speed is 'Slow'
; RPM Fast	-	speed (in revolutions per minute) when speed is 'Fast'
; Doppler	-	amount of doppler shift (pitch shift) during rotation
; Panning	-	width of panning modulation
; Amplitude	-	amount of amplitude modulation

<Cabbage>
form caption("Leslie Speaker") size(260,120), pluginid("Lsli") style("legacy")

image     bounds(  0,  0,260,120), outlinethickness(4), outlinecolour("white"), file("DarkWood.jpg");, colour(75,50,50)
image     bounds(  0,  0,260,120), outlinethickness(4), outlinecolour("silver"), colour(0,0,0,0)
button    bounds( 40, 85, 60, 25), fontcolour:0(80,55,55), fontcolour:1(255,245,245), colour:0(75,50,50), colour:1(250,170,170), text("Slow","Slow"), channel("Slow"), latched(1), radiogroup(1), value(1)
button    bounds(100, 85, 60, 25), fontcolour:0(80,55,55), fontcolour:1(255,245,245), colour:0(75,50,50), colour:1(250,170,170), text("Stop","Stop"), channel("Stop"), latched(1), radiogroup(1)
button    bounds(160, 85, 60, 25), fontcolour:0(80,55,55), fontcolour:1(255,245,245), colour:0(75,50,50), colour:1(250,170,170), text("Fast","Fast"), channel("Fast"), latched(1), radiogroup(1)

image     bounds( 132,  7,16,16), identchannel("TweeterID"), shape("ellipse"), colour(170,150,150)
image     bounds( 110, 30,40,40), identchannel("WooferID"),  shape("ellipse"), colour(170,150,150)

button bounds(200,10,50, 18), colour:0(80,55,55), colour:1(80,55,55), channel("setup_Button"), text("SETUP"), fontcolour:0(200,200,200), fontcolour:1(200,200,200)
groupbox bounds(360,28,340,190), plant("Setup"), outlinethickness(0), popup(1), identchannel("setupPlant")
{
image     bounds(0,0,340,190), outlinethickness(4), outlinecolour("silver"), colour(75,50,50), file("DarkWood.jpg")

image     bounds(0,0,170,190), outlinethickness(4), outlinecolour("silver"), colour(0,0,0,0)
label     bounds(0,4,170, 14), text("Woofer"), fontcolour(200,200,200)
nslider bounds(10, 20,70,40), channel("CF_Low"), text("Cutoff"),     range(20,8000,800,1,1)
nslider bounds(90, 20,70,40), channel("LF_Damp"), text("Damping"),   range(0.01,8,1.5,1,0.01)
nslider bounds(10, 60,70,40), channel("LF_Slow"), text("RPM Slow"),  range(5,1000, 40,1,1)
nslider bounds(90, 60,70,40), channel("LF_Fast"), text("RPM Fast"),  range(5,1000,342,1,1)
nslider bounds(10,100,70,40), channel("LF_Dop"), text("Doppler"),    range(0,2,0.1)
nslider bounds(90,100,70,40), channel("LF_Pan"), text("Panning"),    range(0,1,0.2,1,0.01)
nslider bounds(10,140,70,40), channel("LF_Amp"), text("Amplitude"),  range(0,1,0.3,1,0.01)

image     bounds(170,0,170,190), outlinethickness(4), outlinecolour("silver"), colour(0,0,0,0)
label     bounds(170,4,170, 14), text("Tweeter"), fontcolour(200,200,200)
nslider bounds(180, 20,70,40), channel("CF_High"), text("Cutoff"),    range(20,8000,800,1,1)
nslider bounds(260, 20,70,40), channel("HF_Damp"), text("Damping"),   range(0.01,8,0.5,1,0.01)
nslider bounds(180, 60,70,40), channel("HF_Slow"), text("RPM Slow"),  range(5,1000, 48,1,1)
nslider bounds(260, 60,70,40), channel("HF_Fast"), text("RPM Fast"),  range(5,1000,400,1,1)
nslider bounds(180,100,70,40), channel("HF_Dop"), text("Doppler"),    range(0,2,0.2)
nslider bounds(260,100,70,40), channel("HF_Pan"), text("Panning"),    range(0,1,0.4,1,0.01)
nslider bounds(180,140,70,40), channel("HF_Amp"), text("Amplitude"),  range(0,1,0.3,1,0.01)
}

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100
ksmps 	= 	32
nchnls 	= 	2
0dbfs	=	1
massign	0,1

;Author: Iain McCurdy (2016)

opcode	DopplerSpin,aa,akkkkki
	asig,kfreq,kAmpDepth,kAmpPhase,kPanDepth,kDopDep,ishape	xin
	
	isine		ftgen	0,0,1024,10,1
	aAmp 		osciliktp kfreq, ishape, kAmpPhase		; AN LFO DEFINES A VARIABLE USED TO MODULATE AMPLITUDE (NOTE: VARIABLE PHASE). THIS MODELS THE LOCATION WITHIN THE CIRCLE FROM WHICH WE ARE LISTENING. NO AMPLITUDE MODULATION REPRESENT REPRESENTS OUR LISTENING POSITION BEING EXACTLY CENTRAL, MAXIMUM MODULATION REPRESENTS US BEING NEAR TO THE EDGE OF A LARGE CIRCLE. THE CONTROL OVER PHASE OF THIS LFO REPRESENTS WHICH EDGE WE ARE CLOSER TO.
	aAmp		=	(aAmp * 0.5 * kAmpDepth) + 0.5		; RESCALE AND OFFSET AMPLITUDE MODULATION LFO
	
	aPan		oscili	(kPanDepth * 0.5), kfreq, ishape, 0.75	; AN LFO DEFINES A VARIABLE FOR PANNING CONTROL - I.E. WHETHER SOUND IS CURRENTLY TO OUT LEFT OR TO OUT RIGHT. NOTE THAT PHASE IS 0.75 AND THEREFORE 0.75 RADIANS (OR 270 DEGREES OUT OF PHASE) WITH THE DELAY MODULATION 
	aPan		=	aPan + 0.5				; OFFSET PANNING LFO

	iMaxDelay	=	4					; DEFINE A VARIABLE THAT WILL BE USE FOR 'MAXIMUM DELAY TIME' (BUFFER LENGTH)
	aDelTim		oscili	kDopDep, kfreq, ishape, 0		; AN LFO DEFINES A VARIABLE FOR DELAY TIME (NOTE PHASE AT ZERO)
	aDelTim		=	aDelTim + kDopDep			; DELAY TIME  VARIABLE 'aDelay' IS OFFSET TO STAY WITHIN THE POSITIVE DOMAIN	
		
	;vdelayxw IS USED FOR THE DELAY READ/WRITE AS IT MODULATES THE WRITE POINTER RATHER THAN THE READ POINTER.
	;THIS IS MORE APPROPRIATE IN THIS EXAMPLE AS THE SOURCE IS MOVING BUT THE POINT OF LISTENING IS STATIONARY
	aDelTap		vdelay	asig*aAmp, aDelTim, iMaxDelay;, 16
	
	aL, aR	pan2 	aDelTap, aPan, 1	;APPLY PANNING TO SIGNAL OUTPUT FROM DELAY USING pan2 OPCODE. CREATE A NEW 

		xout	aL,aR	
endop


gisine		ftgen	0,0,4096,10,1													; sine wave
gitri	ftgen	0,0,1024,-7,0,512,1,512,0											; triangle wave

giSrc		ftgen	0,0,4096,10,1,0.5,0.4,0.01,0.01,0.01,0.01,0,0.01				; waveform of a single tonewheel (not quite a sine wave)
;giAllOut	ftgen	0,0,4096,31, giSrc, 1,1,0, 2,1,0, 3,1,0, 4,1,0, 8,1,0	; composite of several tonewheels
giAllOut	ftgen	0,0,4096,9, 1,1,0, 2,1,0, 3,1,0, 4,1,0, 5,.1,0, 6,.1,0, 7,.1,0, 8,1,0	; composite of several tonewheels

instr	1	; a basic MIDI triggered organ sound
 aEnv		linsegr	0,0.005,1,0.01,0					; anti-click envelope
 aMix		poscil	0.5*aEnv,cpsmidi(),giAllOut			; basic organ sound
 chnmix		aMix,"send"									; mix into send 'channel'
endin

instr	99	; a Leslie speaker effect
 kSlow	chnget	"Slow"									; read 'Slow' button widget
 kStop	chnget	"Stop"									; read 'Stop' button widget
 kFast	chnget	"Fast"									; read 'Faset' button widget
 
 if kSlow==1 then
  kSpeed	=	0
 elseif kStop==1 then
  kSpeed	=	1
 else
  kSpeed	=	2
 endif
 														; 0=slow 1=stop 2=fast
 aMix		chnget	"send"								; read in organ sound from instr 1

 aL,aR		ins											; read live audio in
 aMix		+=	aL+aR									; mix both live audio in channels into the organ sound
 
 kCF_High	chnget	"CF_High"							;crossover cutoff frequencies
 kCF_Low	chnget	"CF_Low"
 
 kHF_Slow	=	chnget:k("HF_Slow")/60					; tweeter chorale (slow) speed
 kHF_Fast	=	chnget:k("HF_Fast")/60					; tweeter tremolo (fast) speed

 kLF_Slow	=	chnget:k("LF_Slow")/60					; tweeter chorale (slow) speed
 kLF_Fast	=	chnget:k("LF_Fast")/60					; woofer tremolo (fast) speed
 
 kHF_Damp	chnget	"HF_Damp"							; tweeter speed change time
 kLF_Damp	chnget	"LF_Damp"							; woofer speed change time
 
 kHF_Trem	chnget	"HF_Trem"							; tremolo modulation depth
 kLF_Trem	chnget	"LF_Trem"
 
 kHF_Dop	chnget	"HF_Dop"							; doppler modulation depth
 kLF_Dop	chnget	"LF_Dop"
 
 kHF_Pan	chnget	"HF_Pan"							; panning modulation depth
 kLF_Pan	chnget	"HF_Pan"
 
 kHF_Amp	chnget	"HF_Amp"							; amplitude modulation depth
 kLF_Amp	chnget	"LF_Amp"

 aLF		butlp	aMix,kCF_Low						; woofer audio signal
 aHF		buthp	aMix,kCF_High						; tweeter audio signal

 if kSpeed==0 then										; if speed is slow
  kLF_Speed	=	kLF_Slow								; set woofer speed to slow speed as defined in the set-up pop-up
  kHF_Speed	=	kHF_Slow								; set tweeter speed to slow speed as defined in the set-up pop-up
 elseif kSpeed==2 then
  kLF_Speed	=	kLF_Fast								; set woofer speed to slow speed as defined in the set-up pop-up
  kHF_Speed	=	kHF_Fast								; set tweeter speed to slow speed as defined in the set-up pop-up
 else
  kLF_Speed	=	0										; set woofer speed to slow speed as defined in the set-up pop-up
  kHF_Speed	=	0										; set tweeter speed to slow speed as defined in the set-up pop-up
 endif
 
 kportramp	linseg	0,0.01,1							; portamento time ramps up quickly from zero
 kLF_Speed	portk	kLF_Speed,kLF_Damp					; damp speed change from 
 kHF_Speed	portk	kHF_Speed,kHF_Damp

 aHF_L,aHF_R	DopplerSpin	aHF,kHF_Speed,kHF_Amp,0.5,kHF_Pan,kHF_Dop,gisine	; call UDO
 aLF_L,aLF_R	DopplerSpin	aLF,kLF_Speed,kLF_Amp,0.5,kLF_Pan,kLF_Dop,gisine
 
		outs	aHF_L,aHF_R
 		outs	aLF_L,aLF_R

 ; GRAPHICAL ROTATING SPEAKERS 
 kPhsTweeter	poscil	1,kHF_Speed,gitri				
 kPhsWoofer	poscil	1,kLF_Speed,gitri
 ktrig	metro	16
 if ktrig==1 then
  Smsg	sprintfk	"bounds(%d,10,%d,16)",122+(8*(1-kPhsTweeter)),kPhsTweeter*16
  	chnset		Smsg,"TweeterID"
  Smsg	sprintfk	"bounds(%d,33,%d,40)",110+(20*(1-kPhsWoofer)),kPhsWoofer*40
  	chnset		Smsg,"WooferID"
 endif 
 		
 		chnclear	"send" 								; clear audio send channel (organ)
endin


instr 1000				; launches plant popups
 klaunch	init		0
 #define LAUNCH_PLANT(name)
 #
 kpressed	chnget 		"$name._Button"
 if changed(kpressed)==1 then
   Smsg 	sprintfk 	"show(%d), pos(1, 19)", klaunch
   		chnset 		Smsg, "$name.Plant"
 endif
 #
 $LAUNCH_PLANT(setup)
 klaunch	=		1
endin

</CsInstruments>

<CsScore>
i 99   0 [3600*24*7]
i 1000 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>; PhaserLFO.csd
; Written by Iain McCurdy, 2012.

<Cabbage>
form caption("Phaser LFO") size(580, 95), pluginid("phsr") style("legacy")
image          bounds(0, 0, 580, 95), colour( 100, 110, 130), shape("rounded"), outlinecolour("white"), outlinethickness(4)
label    bounds(10,  8, 75, 10), text("INPUT"), fontcolour(0,10,30)
combobox bounds(10, 18, 75, 20), channel("input"), value(1), text("Live","Tone","Noise")
label    bounds(10, 43, 75, 10), text("LFO SHAPE"), fontcolour(0,10,30)
combobox bounds(10, 53, 75, 20), channel("shape"), value(1), text("Triangle","Sine","Square","Saw Up","Saw Down","Rand.Int","Rand.S&H")
line	bounds( 95, 10,190,  2)
label   bounds(155,  7, 70, 10), text("MODULATION"), fontcolour("white"), colour(100,110,130)
rslider bounds( 85, 20, 70, 70), text("Rate"), 		channel("rate"), 	range(0,100.00,0.5,0.5, 0.0001),    colour(50,40,110), textcolour(0,10,30), trackercolour(255,255,200), midiCtrl(1,1)
rslider bounds(155, 20, 70, 70), text("Depth"), 	channel("depth"), 	range(0, 1.00, 0.5, 1, .01),       colour(50,40,110), textcolour(0,10,30), trackercolour(255,255,200)
rslider bounds(225, 20, 70, 70), text("Offset"), 	channel("freq"), 	range(0, 1.00, 0.4, 1, .01),       colour(50,40,110), textcolour(0,10,30), trackercolour(255,255,200)
rslider bounds(295, 20, 70, 70), text("Feedback"), 	channel("fback"), 	range(0, 1.00, 0.4, 1, .01),       colour(50,40,110), textcolour(0,10,30), trackercolour(255,255,200)
rslider bounds(365, 20, 70, 70), text("Stages"),	channel("stages"), 	range(1, 64,8, 1, 1),              colour(50,40,110), textcolour(0,10,30), trackercolour(255,255,200)
rslider bounds(435, 20, 70, 70), text("Mix"), 	        channel("mix"), 	range(0, 1.00,0.5, 1, .01),        colour(50,40,110), textcolour(0,10,30), trackercolour(255,255,200)
rslider bounds(505, 20, 70, 70), text("Level"), 	channel("level"), 	range(0, 1.00, 1, 1, .01),         colour(50,40,110), textcolour(0,10,30), trackercolour(255,255,200)
</Cabbage>

<CsoundSynthesizer>
<CsOptions>
-d -n
</CsOptions>
<CsInstruments>
sr = 44100
ksmps = 32
nchnls = 2
0dbfs = 1

;Author: Iain McCurdy (2012)
;http://iainmccurdy.org/csound.html


opcode	Phaser,a,akkkKki
	ain,krate,kdepth,kfreq,kstages,kfback,ishape	xin		;READ IN INPUT ARGUMENTS
	if ishape=1 then
	 klfo	lfo	kdepth*0.5, krate, 1				;LFO FOR THE PHASER (TRIANGULAR SHAPE)
	elseif ishape=2 then
	 klfo	lfo	kdepth*0.5, krate, 0				;LFO FOR THE PHASER (SINE SHAPE)
	elseif ishape=3 then
	 klfo	lfo	kdepth*0.5, krate, 2				;LFO FOR THE PHASER (SQUARE SHAPE)
	elseif ishape=4 then
	 klfo	lfo	kdepth*0.5, krate, 4				;LFO FOR THE PHASER (SAWTOOTH)
	elseif ishape=5 then
	 klfo	lfo	kdepth*0.5, krate, 5				;LFO FOR THE PHASER (SAWTOOTH)
	elseif ishape=6 then
	 klfo	randomi	-kdepth*0.5, kdepth*0.5, krate*8		;LFO FOR THE PHASER (RANDOMI SHAPE)
	 klfo	portk	klfo, 1/(krate*8)				;SMOOTH CHANGES OF DIRECTION
	elseif ishape=7 then
	 klfo	randomh	-kdepth*0.5, kdepth*0.5, krate			;LFO FOR THE PHASER (RANDOMH SHAPE)
	endif	
	aout	phaser1	ain, cpsoct((klfo+(kdepth*0.5)+kfreq)), kstages, kfback	;PHASER1 IS APPLIED TO THE INPUT AUDIO
		xout	aout							;SEND AUDIO BACK TO CALLER INSTRUMENT
endop

opcode	PhaserSt,aa,aakkkKki
	ainL,ainR,krate,kdepth,kfreq,kstages,kfback,ishape	xin		;READ IN INPUT ARGUMENTS
	if ishape=1 then
	 klfo	lfo	kdepth*0.5, krate, 1				;LFO FOR THE PHASER (TRIANGULAR SHAPE)
	elseif ishape=2 then
	 klfo	lfo	kdepth*0.5, krate, 0				;LFO FOR THE PHASER (SINE SHAPE)
	elseif ishape=3 then
	 klfo	lfo	kdepth*0.5, krate, 2				;LFO FOR THE PHASER (SQUARE SHAPE)
	elseif ishape=4 then
	 klfo	lfo	kdepth*0.5, krate, 4				;LFO FOR THE PHASER (SAWTOOTH)
	elseif ishape=5 then
	 klfo	lfo	kdepth*0.5, krate, 5				;LFO FOR THE PHASER (SAWTOOTH)
	elseif ishape=6 then
	 klfo	randomi	-kdepth*0.5, kdepth*0.5, krate*8		;LFO FOR THE PHASER (RANDOMI SHAPE)
	 klfo	portk	klfo, 1/(krate*8)				;SMOOTH CHANGES OF DIRECTION
	elseif ishape=7 then
	 klfo	randomh	-kdepth*0.5, kdepth*0.5, krate			;LFO FOR THE PHASER (RANDOMH SHAPE)
	endif
	aoutL	phaser1	ainL, cpsoct((klfo+(kdepth*0.5)+kfreq)), kstages, kfback	;PHASER1 IS APPLIED TO THE INPUT AUDIO
	aoutR	phaser1	ainR, cpsoct((klfo+(kdepth*0.5)+kfreq)), kstages, kfback	;PHASER1 IS APPLIED TO THE INPUT AUDIO
		xout	aoutL,aoutR							;SEND AUDIO BACK TO CALLER INSTRUMENT
endop

		instr 1
kporttime	linseg		0,0.001,0.05
krate		chnget		"rate"
kdepth 		chnget 		"depth"
kdepth		portk		kdepth,kporttime
kfreq 		chnget 		"freq"
kfreq		portk		kfreq,kporttime
kfback 		chnget 		"fback"
kstages 	chnget 		"stages"
klevel 		chnget 		"level"
kmix		chnget		"mix"
kshape		chnget		"shape"
kshape		init		1

/* INPUT */
kinput		chnget	"input"
if kinput=1 then
 a1,a2		ins
elseif kinput=2 then
 a1		vco2		0.1,200
 a2		=		a1
else
 a1		pinkish		0.1
 a2		pinkish		0.1
endif

ktrig		changed		kshape,kstages							; reinitialise for i-rate parms
if ktrig=1 then
 reinit 	RESTART_PHASER
endif
RESTART_PHASER:
;aPhs1		Phaser		a1,krate,kdepth*8,(kfreq*5)+6,kstages,kfback*0.9,i(kshape)	; call UDO
;aPhs2		Phaser		a2,krate,kdepth*8,(kfreq*5)+6,kstages,kfback*0.9,i(kshape)
aPhs1,aPhs2	PhaserSt	a1,a2,krate,kdepth*8,(kfreq*10)+4,kstages,kfback*0.9,i(kshape)	; use stereo version to ensure lfo sync for random lfos

rireturn
a1		ntrpol		a1,aPhs1,kmix							; wet/dry mix
a2		ntrpol		a2,aPhs2,kmix
		outs		a1* klevel, a2* klevel
		endin

</CsInstruments>

<CsScore>
i 1 0 [60*60*24*7]
</CsScore>

</CsoundSynthesizer>; StereoChorus.csd
; Written by Iain McCurdy, 2012.

; Two LFO modes are offered, sines and rsplines.
; 

; Dereg. (deregulate) adds a random modulation to both LFO rate and depth in both LFO modes

<Cabbage>
form caption("Stereo Chorus") size(595, 100), pluginid("StCh") style("legacy")
image                 bounds(0, 0, 595, 100), colour("DarkSlateGrey"), shape("rounded"), outlinecolour("white"), outlinethickness(6)
label    bounds( 15, 22, 75, 12), text("LFO Type:"), fontcolour("white")
combobox bounds( 15, 35, 75, 20), text("Sine","RSpline"), channel("type"), textcolour("white"), colour( 7,29,29), fontcolour("white")
rslider  bounds( 90, 13, 75, 75), text("Rate"), channel("rate"), range(0.001, 7, 0.5,0.5),  textcolour("white"), colour(37,59,59), trackercolour("Silver")
rslider  bounds(160, 13, 75, 75), text("Dereg"), channel("dereg"), range(0, 4, 0,0.5,0.01), textcolour("white"), colour(37,59,59), trackercolour("Silver")
rslider  bounds(230, 13, 75, 75), text("Depth"), channel("depth"), range(0, 1.00, 0.2),     textcolour("white"), colour(37,59,59), trackercolour("Silver")
rslider  bounds(300, 13, 75, 75), text("Offset"), channel("offset"), range(0.0001,0.1,0.001,0.5,0.0001),     textcolour("white"), colour(37,59,59), trackercolour("Silver")
rslider  bounds(370, 13, 75, 75), text("Width"), channel("width"), range(0, 1.00, 0.75),    textcolour("white"), colour(37,59,59), trackercolour("Silver")
rslider  bounds(440, 13, 75, 75), text("Mix"), channel("mix"), range(0, 1.00, 0.5),      textcolour("white"), colour(37,59,59), trackercolour("Silver")
rslider  bounds(510, 13, 75, 75), text("Level"), channel("level"), range(0, 1.00, 1),      textcolour("white"), colour(37,59,59), trackercolour("Silver")
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-d -n
</CsOptions>

<CsInstruments>
sr = 44100
ksmps = 32
nchnls = 2
0dbfs = 1

;Author: Iain McCurdy (2012)
;http://iainmccurdy.org/csound.html

opcode	StChorus,aa,aakkakk
	ainL,ainR,krate,kdepth,aoffset,kwidth,kmix	xin			;READ IN INPUT ARGUMENTS
	ilfoshape	ftgentmp	0, 0, 131072, 19, 1, 0.5, 0,  0.5	;POSITIVE DOMAIN ONLY SINE WAVE
	kporttime	linseg	0,0.001,0.02					;RAMPING UP PORTAMENTO VARIABLE
	kChoDepth	portk	kdepth*0.01, kporttime				;SMOOTH VARIABLE CHANGES WITH PORTK
	aChoDepth	interp	kChoDepth					;INTERPOLATE TO CREATE A-RATE VERSION OF K-RATE VARIABLE
	amodL 		osciliktp 	krate, ilfoshape, 0			;LEFT CHANNEL LFO
	amodR 		osciliktp 	krate, ilfoshape, kwidth*0.5		;THE PHASE OF THE RIGHT CHANNEL LFO IS ADJUSTABLE
	amodL		=		(amodL*aChoDepth)+aoffset			;RESCALE AND OFFSET LFO (LEFT CHANNEL)
	amodR		=		(amodR*aChoDepth)+aoffset			;RESCALE AND OFFSET LFO (RIGHT CHANNEL)
	aChoL		vdelay	ainL, amodL*1000, 1.2*1000			;CREATE VARYING DELAYED / CHORUSED SIGNAL (LEFT CHANNEL) 
	aChoR		vdelay	ainR, amodR*1000, 1.2*1000			;CREATE VARYING DELAYED / CHORUSED SIGNAL (RIGHT CHANNEL)
	aoutL		ntrpol 	ainL*0.6, aChoL*0.6, kmix			;MIX DRY AND WET SIGNAL (LEFT CHANNEL)
	aoutR		ntrpol 	ainR*0.6, aChoR*0.6, kmix			;MIX DRY AND WET SIGNAL (RIGHT CHANNEL)
			xout	aoutL,aoutR					;SEND AUDIO BACK TO CALLER INSTRUMENT
endop


giPow3  ftgen 1,0,2048,10,1			; table for storage of functions
iftlen =       ftlen(giPow3)			; length of the function table
icount	=	0				; reset counter. (Moves for each index of the function table)
loop3:						; loop beginning                                            
ix	=	((icount/iftlen) * 2) -1        ; shift x range to -1 to 1                                  
iy	=	ix ^ 3                          ; apply formula to derive y                                 
	tableiw iy,icount,giPow3                ; write y value to table                                    
loop_lt,icount,1,iftlen,loop3                   ; loop back and increment counter if we are not yet finished

opcode	StChorusRspline,aa,aakkkkkk
	ainL,ainR,krate,kdereg,kdepth,koffset,kwidth,kmix	xin		;READ IN INPUT ARGUMENTS
	kporttime	linseg	0,0.001,0.02					;RAMPING UP PORTAMENTO VARIABLE
	kChoDepth	portk	kdepth*0.01, kporttime				;SMOOTH VARIABLE CHANGES WITH PORTK	
	kmod1		rspline	koffset,kChoDepth, krate*4+0.01, ((krate*4*kdereg)+0.01)
	kmod2		rspline	kChoDepth,koffset, krate*4+0.01, ((krate*4*kdereg)+0.01)
	kmod1		limit	kmod1,0.0001,1.2
	kmod2		limit	kmod2,0.0001,1.2
	amod1		interp	kmod1	
	amod2		interp	kmod2
	aCho1		vdelay	ainL, amod1*1000, 1.2*1000			;CREATE VARYING DELAYED / CHORUSED SIGNAL (LEFT CHANNEL) 
	aCho2		vdelay	ainR, amod2*1000, 1.2*1000			;CREATE VARYING DELAYED / CHORUSED SIGNAL (RIGHT CHANNEL)
	kpan		rspline	0,1,krate,2*krate*kdereg			;PANNING
	kpan		limit	kpan,0,1
	apan		interp	kpan
	aChoL		=	(aCho1*apan)+(aCho2*(1-apan))
	aChoR		=	(aCho2*apan)+(aCho1*(1-apan))
	aChoL		ntrpol	aChoL,aCho1,kwidth				;WIDTH PROCESSING BETWEEN AUTO-PANNED AND HARD-PANNED
	aChoR		ntrpol	aChoR,aCho2,kwidth
	aoutL		ntrpol 	ainL*0.6, aChoL*0.6, kmix			;MIX DRY AND WET SIGNAL (LEFT CHANNEL)
	aoutR		ntrpol 	ainR*0.6, aChoR*0.6, kmix			;MIX DRY AND WET SIGNAL (RIGHT CHANNEL)
			xout	aoutL,aoutR					;SEND AUDIO BACK TO CALLER INSTRUMENT
endop

instr 1
 kporttime	linseg	0,0.001,0.05                                                     
 krate chnget "rate"
 kdereg chnget "dereg"
 kdepth chnget "depth"
 koffset chnget "offset"
 kwidth chnget "width"
 klevel chnget "level"
 kmix  	chnget "mix"
 ktype	chnget	"type"
 ktype	init	1
 kmix	portk	kmix,kporttime
 klevel	portk	klevel,kporttime
 koffset	portk	koffset,kporttime*0.5
 aoffset	interp	koffset
 
 a1,a2	ins
 ;a1	pinkish	0.1
 ;a2	pinkish	0.1
 ;a1	vco2	0.1,50,4,0.5
 ;a2	vco2	0.1,50,4,0.5
 ;a1	poscil	0.1,100
 ;a2	poscil	0.1,100
 
 
 if ktype==1 then
  kdereg	rspline	-kdereg, kdereg, 0.1, 0.5
  ktrem	rspline	0,-1,0.1,0.5
  ktrem	pow	2,ktrem
  a1,a2	StChorus	a1,a2,krate*octave(kdereg),kdepth*ktrem,aoffset,kwidth,kmix
 else
  a1,a2	StChorusRspline	a1,a2,krate,kdereg,kdepth,koffset,kwidth,kmix
 endif
 a1	=	a1 * klevel
 a2	=	a2 * klevel
 	outs	a1,a2
endin

</CsInstruments>

<CsScore>                                              
i 1 0 [60*60*24*7]
</CsScore>

</CsoundSynthesizer>                                                  ; Ball_in_a_Box.csd
; Written by Iain McCurdy, 2015

; Ball in a Box is a physical model reverb based on the notional idea of a ball (sound) within a bax (reverberant space)

; Room Size (X, Y, Z)		-	room size in metres
; Source Location (X, Y, Z)	-	location of the sound as a ratio 0 to 1 of the entire space
; Receive Location (X, Y, Z)	-	receiver location - in metres - from the centre of the space
; Reverb Decay			-	main decay of the resonator (default: 0.99)
; High Frequency Diffusion	-	is the coefficient of diffusion at the walls, which regulates the amount of diffusion (0-1, where 0 = no diffusion, 1 = maximum diffusion - default: 1)
; Direct Signal Attenuation	-	the attenuation of the direct signal (0-1, default: 0.5)
; Early Reflection Diffusion	-	the attenuation coefficient of the early reflections (0-1, default: 0.8)
; Pick-up Separation		-	the distance in meters between the two pickups (your ears, for example - default: 0.3)

<Cabbage>
form caption("Ball in a Box") size(800,395), pluginid("BABO"), colour(100,100,120) style("legacy")

image   bounds(  3,  5,394,125), outlinecolour("white"), outlinethickness(1), colour(0,0,0,0), plant("RoomSize") {
hslider bounds(  5, 10,390, 30), textcolour(white), channel("rx"), range(0.1,20.00, 5), colour(220,220,250), trackercolour(240,210,170)
label   bounds(  5, 33,390, 12), text("Room Size X"), fontcolour(200,200,200)
hslider bounds(  5, 45,390, 30), textcolour(white), channel("ry"), range(0.1,20.00, 6), colour(220,220,250), trackercolour(240,210,170)
label   bounds(  5, 68,390, 12), text("Room Size Y"), fontcolour(200,200,200)
hslider bounds(  5, 80,390, 30), textcolour(white), channel("rz"), range(0.1,20.00, 4), colour(220,220,250), trackercolour(240,210,170)
label   bounds(  5,103,390, 12), text("Room Size Z"), fontcolour(200,200,200)
}

image   bounds(  3,135,394,125), outlinecolour("white"), outlinethickness(1), colour(0,0,0,0), plant("SourceLocation") {
hslider bounds(  5, 10,390, 30), textcolour(white), channel("srcx"), range(0,1.00, 0.131), colour(220,220,250), trackercolour(240,210,170)
label   bounds(  5, 33,390, 12), text("Source Location X"), fontcolour(200,200,200)
hslider bounds(  5, 45,390, 30), textcolour(white), channel("srcy"), range(0,1.00, 0.243), colour(220,220,250), trackercolour(240,210,170)
label   bounds(  5, 68,390, 12), text("Source Location Y"), fontcolour(200,200,200)
hslider bounds(  5, 80,390, 30), textcolour(white), channel("srcz"), range(0,1.00, 0.717), colour(220,220,250), trackercolour(240,210,170)
label   bounds(  5,103,390, 12), text("Source Location Z"), fontcolour(200,200,200)
}

image   bounds(  3,265,394,125), outlinecolour("white"), outlinethickness(1), colour(0,0,0,0), plant("ReceiveLocation") {
hslider bounds(  5, 10,390, 30), textcolour(white), channel("rcvx"), range(-10,10,7.331), colour(220,220,250), trackercolour(240,210,170)
label   bounds(  5, 33,390, 12), text("Receive Location X"), fontcolour(200,200,200)
hslider bounds(  5, 45,390, 30), textcolour(white), channel("rcvy"), range(-10,10,-3.973), colour(220,220,250), trackercolour(240,210,170)
label   bounds(  5, 68,390, 12), text("Receive Location Y"), fontcolour(200,200,200)
hslider bounds(  5, 80,390, 30), textcolour(white), channel("rcvz"), range(-10,10, 6.791), colour(220,220,250), trackercolour(240,210,170)
label   bounds(  5,103,390, 12), text("Receive Location Z"), fontcolour(200,200,200)
}

image   bounds(403,  5,394,105), outlinecolour("white"), outlinethickness(1), colour(0,0,0,0), plant("Mixer") {
hslider bounds(  5, 10,390, 30), textcolour(white), channel("mix"), range(0, 1.00, 0.5), colour(220,220,250), trackercolour(240,210,170)
label   bounds(  5, 35,390, 12), text("Dry/Wet Mix"), fontcolour(200,200,200)
hslider bounds(  5, 55,390, 30), textcolour(white), channel("level"), range(0, 1.00, 0.5), colour(220,220,250), trackercolour(240,210,170)
label   bounds(  5, 80,390, 12), text("Level"), fontcolour(200,200,200)
}

image   bounds(403,115,394,275), outlinecolour("white"), outlinethickness(1), colour(0,0,0,0), plant("Filters") {
hslider bounds(  5, 20,390, 30), textcolour(white), channel("decay"), range(0.01, 1.00, 0.3), colour(220,220,250), trackercolour(240,210,170)
label   bounds(  5, 45,390, 12), text("Reverb Decay"), fontcolour(200,200,200)
hslider bounds(  5, 60,390, 30), textcolour(white), channel("diff"), range(0.01, 1.00, 1), colour(220,220,250), trackercolour(240,210,170)
label   bounds(  5, 85,390, 12), text("High Frequency Diffusion"), fontcolour(200,200,200)
hslider bounds(  5,100,390, 30), textcolour(white), channel("hydecay"), range(0.001, 1.00, 0.1), colour(220,220,250), trackercolour(240,210,170)
label   bounds(  5,125,390, 12), text("High Frequency Decay"), fontcolour(200,200,200)
hslider bounds(  5,140,390, 30), textcolour(white), channel("direct"), range(0, 1.00, 0.5), colour(220,220,250), trackercolour(240,210,170)
label   bounds(  5,165,390, 12), text("Direct Signal Attenuation"), fontcolour(200,200,200)
hslider bounds(  5,180,390, 30), textcolour(white), channel("early_diff"), range(0, 1.00, 0.8), colour(220,220,250), trackercolour(240,210,170)
label   bounds(  5,205,390, 12), text("Early Reflection Diffusion"), fontcolour(200,200,200)
hslider bounds(  5,220,390, 30), textcolour(white), channel("rdistance"), range(0.001, 9.00, 0.3), colour(220,220,250), trackercolour(240,210,170)
label   bounds(  5,245,390, 12), text("Pick-up Separation"), fontcolour(200,200,200)
}

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-d -n
</CsOptions>

<CsInstruments>

sr 		= 	44100
ksmps 		= 	32
nchnls 		= 	2
0dbfs		=	1

;Author: Iain McCurdy (2015)

instr	1	; read widgets
 gkrx		chnget	"rx"        
 gkry           chnget	"ry"        
 gkrz           chnget	"rz"        
 gksrcx         chnget	"srcx"      
 gksrcy         chnget	"srcy"      
 gksrcz         chnget	"srcz"      
 gkdiff         chnget	"diff"      
 gkdecay        chnget	"decay"     
 gkrdistance    chnget	"rdistance" 
 gkhydecay      chnget	"hydecay"   
 gkdirect       chnget	"direct"    
 gkearly_diff   chnget	"early_diff"
 gkrcvx         chnget	"rcvx"      
 gkrcvy         chnget	"rcvy"      
 gkrcvz         chnget	"rcvz"
 gkmix          chnget	"mix"
 gklevel	chnget	"level"
endin

instr	2	;REVERB
 aL,aR	ins	; read 
 kSwitch		changed		gkrx, gkry, gkrz, gksrcx, gksrcy, gksrcz, gkdiff, gkdecay, gkrdistance, gkhydecay, gkdirect, gkearly_diff, gkrcvx, gkrcvy, gkrcvz	;GENERATE A MOMENTARY '1' PULSE IN OUTPUT 'kSwitch' IF ANY OF THE SCANNED INPUT VARIABLES CHANGE. (OUTPUT 'kSwitch' IS NORMALLY ZERO)
 if	kSwitch=1	then	;IF kSwitch=1 THEN
 	reinit	UPDATE		;BEGIN A REINITIALIZATION PASS FROM LABEL 'UPDATE'
 endif				;END OF CONDITIONAL BRANCHING
 UPDATE:				;A LABEL
 irx		init	i(gkrx)	;CREATE I-RATE VARIABLES FROM K-RATE VARIABLES
 iry		init	i(gkry) ;CREATE I-RATE VARIABLES FROM K-RATE VARIABLES
 irz		init	i(gkrz) ;CREATE I-RATE VARIABLES FROM K-RATE VARIABLES
 ksrcx		init	i(gksrcx) * irx	;THE ACTUAL LOCATION OF THE SOURCE SOUND IS DEFINED RELATIVE TO THE SIZE OF THE ROOM
 ksrcy		init	i(gksrcy) * iry	;THE ACTUAL LOCATION OF THE SOURCE SOUND IS DEFINED RELATIVE TO THE SIZE OF THE ROOM
 ksrcz		init	i(gksrcz) * irz	;THE ACTUAL LOCATION OF THE SOURCE SOUND IS DEFINED RELATIVE TO THE SIZE OF THE ROOM
 idiff		init	i(gkdiff) ;CREATE I-RATE VARIABLES FROM K-RATE VARIABLES
 giBaboVals	ftgen	1, 0, 8, -2, i(gkdecay), i(gkhydecay), i(gkrcvx), i(gkrcvy), i(gkrcvz), i(gkrdistance), i(gkdirect), i(gkearly_diff)
 aRvbL, aRvbR	babo	aL + aR, ksrcx, ksrcy, ksrcz, irx, iry, irz, idiff, giBaboVals	;BABO REVERBERATOR
 rireturn			;RETURN TO PERFORMANCE TIME PASSES
 		outs	((aRvbL*gkmix)+(aL*(1-gkmix)))*gklevel, ((aRvbR*gkmix)+(aR*(1-gkmix)))*gklevel
endin

		
</CsInstruments>

<CsScore>
i 1 0   3600
i 2 0.1 3600	;REVERB INSTRUMENT PLAYS FOR 1 HOUR (AND KEEPS PERFORMANCE GOING)
</CsScore>

</CsoundSynthesizer>
; ConvolutionReverb.csd
; Written by Iain McCurdy, 2012.
; 
; ------------------
; You are encouraged to experiment with different impulse files.
; You can try this one to start with: http://www.iainmccurdy.org/CsoundRealtimeExamples/SourceMaterials/Stairwell.wav
; You can find some here: http://www.openairlib.net/
; NOTE THAT ZERO LATENCY (or close to zero) CONV0LUTION WILL NOT BE POSSIBLE.
; 
; Instructions
; ------------
; 'Size Ratio' compresses the duration of the impulse file (provided that 'compressed' is chosen for 'resize' mode).
; 'Curve' defines the shape of an envelope applied to compressed impulse files using GEN16
; 	zero		=	straight line decaying
; 	positive vals. 	=	increasingly convex decaying
; 	negative vals	=	increasingly concave decaying
; Increase 'iplen' (must be a power of 2) if experiencing performance problems, or reduce it to reduce latency.
; 'Delay OS' fine tunes the delay applied to the dry signal. Normally this should be zero but adjust it to modify how the dry signal lines up with the convoluted signal.

<Cabbage>
form caption("Convolution Reverb") size(505,230), pluginid("Conv") style("legacy")
image bounds(0, 0, 505,230), colour(135, 30, 30,220), shape("rounded"), outlinecolour(255,255,150), outlinethickness(4) 
label   bounds( 29,  10, 55, 12),       text("direction:"), fontcolour(250,250,250)
button  bounds( 10,  22, 90, 20),       text("forward","backward"),                            channel("FwdBwd"), value(0), fontcolour(250,250,250)
label   bounds( 33,  43, 45, 12),       text("resize:"), fontcolour(250,250,250)
button  bounds( 10,  55, 90, 20),       text("normal","compressed"),                           channel("resize"), value(0), fontcolour(250,250,250)
rslider bounds(105, 11, 70, 70),        text("Size Ratio"),     colour(115, 10, 10), trackercolour(255,255,150), outlinecolour( 75, 35,  0), textcolour(250,250,250),  channel("CompRat"),     range(0, 1.00, 1)
rslider bounds(170, 11, 70, 70),        text("Curve"),          colour(115, 10, 10), trackercolour(255,255,150), outlinecolour( 75, 35,  0), textcolour(250,250,250),  channel("Curve"),       range(-8.00, 8.00, 0)
rslider bounds(235, 11, 70, 70),        text("In Skip"),        colour(115, 10, 10), trackercolour(255,255,150), outlinecolour( 75, 35,  0), textcolour(250,250,250),  channel("skipsamples"), range(0, 1.00, 0)
rslider bounds(300, 11, 70, 70),        text("Del.OS."),        colour(115, 10, 10), trackercolour(255,255,150), outlinecolour( 75, 35,  0), textcolour(250,250,250),  channel("DelayOS"),     range(-1.00, 1.00, 0)
rslider bounds(365, 11, 70, 70),        text("Mix"),            colour(115, 10, 10), trackercolour(255,255,150), outlinecolour( 75, 35,  0), textcolour(250,250,250),  channel("mix"),         range(0, 1.00, 0.25)
rslider bounds(430, 11, 70, 70),        text("Level"),          colour(115, 10, 10), trackercolour(255,255,150), outlinecolour( 75, 35,  0), textcolour(250,250,250),  channel("level"),       range(0, 1.00, 0.4)

filebutton bounds( 10, 90, 90, 25), text("Open File","Open File"), fontcolour("white") channel("filename"), shape("ellipse")
soundfiler bounds(110, 90,380,125), channel("beg","len"), identchannel("ImpulseFile"),  colour(0, 255, 255, 255), fontcolour(160, 160, 160, 255)
label      bounds(114, 92,300, 16), text(""), align(left), colour(0,0,0,0), fontcolour(255,255,255,150), identchannel("stringbox")
label      bounds(114, 92,350, 16), text("First open a short stereo impulse sound file..."), align(left), fontcolour(255,255,255,150), visible(1), identchannel("InstructionID")
}
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n
</CsOptions>

<CsInstruments>

sr 		= 	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1

;Author: Iain McCurdy (2012)

;giImpulse	ftgen	1,0,0,1,"D:/Csound/SSDIR/stairwell.wav",0,0,0	; load stereo file
giImpulse	ftgen	1,0,2,-2,0
giDisplay	ftgen	2,0,ftlen(giImpulse),2,0						; display table table
tableicopy 2, 1
gkReady	init	0

; reverse function table UDO
opcode	tab_reverse,i,i
ifn             xin
iTabLen         =               ftlen(ifn)
iTableRev       ftgen           ifn + 100,0,-iTabLen,-2, 0
icount          =               0
loop:
ival            table           iTabLen-icount-1, ifn
                tableiw         ival,icount,iTableRev
                loop_lt         icount,1,iTabLen,loop
                xout   	        iTableRev
endop

; compress function table UDO
opcode	tab_compress,i,iii
ifn,iCompRat,iCurve    xin
iTabLen         =               ftlen(ifn)
iTabLenComp     =               int(ftlen(ifn)*iCompRat)
iTableComp      ftgen           ifn+200,0,-iTabLenComp,-2, 0
iAmpScaleTab	ftgen		ifn+300,0,-iTabLenComp,-16, 1,iTabLenComp,iCurve,0
icount          =               0
loop:
ival            table           icount, ifn
iAmpScale	table		icount, iAmpScaleTab
                tableiw         ival*iAmpScale,icount,iTableComp
                loop_lt         icount,1,iTabLenComp,loop
                xout   	        iTableComp
endop

; compress reverse function table UDO
opcode	tab_compress_rev,i,iii
ifn,iCompRat,iCurve    xin
iTabLen         =               nsamp(ifn)
iTabLenComp     =               int(nsamp(ifn)*iCompRat)
iTableComp      ftgen           ifn+400,0,-iTabLenComp,-2, 0
iAmpScaleTab	ftgen		ifn+500,0,-iTabLenComp,-16, 1,iTabLenComp,iCurve,0
icount          =               0
loop:
ival            table           icount, ifn
iAmpScale	table		icount, iAmpScaleTab
                tableiw         ival*iAmpScale, iTabLenComp-icount-1,iTableComp
                loop_lt         icount,1,iTabLenComp,loop
                xout   	        iTableComp
endop

opcode FileNameFromPath,S,S		; Extract a file name (as a string) from a full path (also as a string)
 Ssrc	xin				; Read in the file path string
 icnt	strlen	Ssrc			; Get the length of the file path string
 LOOP:					; Loop back to here when checking for a backslash
 iasc	strchar Ssrc, icnt		; Read ascii value of current letter for checking
 if iasc==92 igoto ESCAPE		; If it is a backslash, escape from loop
 loop_gt	icnt,1,0,LOOP		; Loop back and decrement counter which is also used as an index into the string
 ESCAPE:				; Escape point once the backslash has been found
 Sname	strsub Ssrc, icnt+1, -1		; Create a new string of just the file name
	xout	Sname			; Send it back to the caller instrument
endop

instr	1
	gSfilepath	chnget	"filename"
	kNewFileTrg	changed	gSfilepath		; if a new file is loaded generate a trigger
	if kNewFileTrg==1 then				; if a new file has been loaded...
	 event	"i",99,0,0				; call instrument to update sample storage function table 
	endif
	
	if trigger:k(gkReady,0.5,0)==1 then		; when a file is loaded for the first time do this conditional branch...
	 event	"i",2,0,3600*24*7			; start the convolution instrument
	endif
endin

instr	2	;CONVOLUTION REVERB INSTRUMENT
	chnset	"visible(0)","InstructionID"		; hide the instruction

	kFwdBwd		chnget	"FwdBwd"
	kresize		chnget	"resize"
	kmix		chnget	"mix"
	klevel		chnget	"level"
	kCompRat	chnget	"CompRat"
	kCurve		chnget	"Curve"
	kskipsamples	chnget	"skipsamples"
	kDelayOS	chnget	"DelayOS"
	kCompRat       init	1 			;IF THIS IS LEFT UNINITIALISED A CRASH WILL OCCUR! 

	
	ainL,ainR	ins				;READ STEREO AUDIO INPUT
	;ainL,ainR	diskin2	"808loop.wav",1,0,1	;USE A SOUND FILE FOR TESTING
	ainMix		sum	ainL,ainR
	
	;CREATE REVERSED TABLES
	irev	tab_reverse	giImpulse
        
        kSwitchStr	changed	gSfilepath
	kSwitchStr	delayk	kSwitchStr,1
	kSwitch	changed		kskipsamples,kFwdBwd,kDelayOS,kCompRat,kCurve,kresize	;GENERATE A MOMENTARY '1' PULSE IN OUTPUT 'kSwitch' IF ANY OF THE SCANNED INPUT VARIABLES CHANGE. (OUTPUT 'kSwitch' IS NORMALLY ZERO)
	kSwitch	+=	kSwitchStr
	if	kSwitch=1	then			;IF I-RATE VARIABLE IS CHANGED...
		reinit	UPDATE				;BEGIN A REINITIALISATION PASS IN ORDER TO EFFECT THIS CHANGE. BEGIN THIS PASS AT LABEL ENTITLED 'UPDATE' AND CONTINUE UNTIL rireturn OPCODE 
	endif						;END OF CONDITIONAL BRANCHING
	UPDATE:						;LABEL
	
	;CREATE COMPRESSED TABLES
	icomp	tab_compress	giImpulse,i(kCompRat),i(kCurve)
        
	;CREATE COMPRESSED REVERSED TABLES
	icomprev	tab_compress_rev	giImpulse,i(kCompRat),i(kCurve)
        
	iplen		=	1024				;BUFFER LENGTH (INCREASE IF EXPERIENCING PERFORMANCE PROBLEMS, REDUCE IN ORDER TO REDUCE LATENCY)
	itab		=	giImpulse			;DERIVE FUNCTION TABLE NUMBER OF CHOSEN TABLE FOR IMPULSE FILE
	iirlen		=	nsamp(itab)*0.5			;DERIVE THE LENGTH OF THE IMPULSE RESPONSE IN SAMPLES. DIVIDE BY 2 AS TABLE IS STEREO.
	iskipsamples	=	nsamp(itab)*0.5*i(kskipsamples)	;DERIVE INSKIP INTO IMPULSE FILE. DIVIDE BY 2 (MULTIPLY BY 0.5) AS ALL IMPULSE FILES ARE STEREO
	
	;FORWARDS REVERB
	if kFwdBwd==0&&kresize==0 then
	 aL,aR	ftconv	ainMix, itab, iplen,iskipsamples, iirlen		;CONVOLUTE INPUT SOUND
	 adelL	delay	ainL, abs((iplen/sr)+i(kDelayOS)) 	;DELAY THE INPUT SOUND ACCORDING TO THE BUFFER SIZE
	 adelR	delay	ainR, abs((iplen/sr)+i(kDelayOS)) 	;DELAY THE INPUT SOUND ACCORDING TO THE BUFFER SIZE
        
        ;BACKWARDS REVERB
        elseif kFwdBwd==1&&kresize==0 then
	 aL,aR	ftconv	ainMix, irev, iplen, iskipsamples, iirlen				;CONVOLUTE INPUT SOUND
	 adelL	delay	ainL,abs((iplen/sr)+(iirlen/sr)-(iskipsamples/sr)+i(kDelayOS))	;DELAY THE INPUT SOUND ACCORDING TO THE BUFFER SIZE AND THE DURATION OF THE IMPULSE FILE
	 adelR	delay	ainR,abs((iplen/sr)+(iirlen/sr)-(iskipsamples/sr)+i(kDelayOS))	;DELAY THE INPUT SOUND ACCORDING TO THE BUFFER SIZE AND THE DURATION OF THE IMPULSE FILE
        
        ;FORWARDS COMPRESSED
	elseif kFwdBwd==0&&kresize==1 then
	 aL,aR	ftconv	ainMix, icomp, iplen,iskipsamples, iirlen*i(kCompRat)		;CONVOLUTE INPUT SOUND
	 adelL	delay	ainL, abs((iplen/sr)+i(kDelayOS)) 				;DELAY THE INPUT SOUND ACCORDING TO THE BUFFER SIZE
	 adelR	delay	ainR, abs((iplen/sr)+i(kDelayOS)) 				;DELAY THE INPUT SOUND ACCORDING TO THE BUFFER SIZE
        
        ;BACKWARDS COMPRESSED
	elseif kFwdBwd==1&&kresize==1 then
	 aL,aR	ftconv	ainMix, icomprev, iplen, iskipsamples, iirlen*i(kCompRat)		;CONVOLUTE INPUT SOUND
	 adelL	delay	ainL,abs((iplen/sr)+((iirlen*i(kCompRat))/sr)-(iskipsamples/sr)+i(kDelayOS))	;DELAY THE INPUT SOUND ACCORDING TO THE BUFFER SIZE AND THE DURATION OF THE IMPULSE FILE
	 adelR	delay	ainR,abs((iplen/sr)+((iirlen*i(kCompRat))/sr)-(iskipsamples/sr)+i(kDelayOS))	;DELAY THE INPUT SOUND ACCORDING TO THE BUFFER SIZE AND THE DURATION OF THE IMPULSE FILE
	endif
                 
        rireturn
        
	; CREATE A DRY/WET MIX
	aMixL	ntrpol	adelL,aL*0.1,kmix
	aMixR	ntrpol	adelR,aR*0.1,kmix
        	outs	aMixL*klevel,aMixR*klevel

endin




instr	99	; load sound file
 	giImpulse	ftgen	1,0,0,1,gSfilepath,0,0,0	; load stereo file
 	gkReady 	init	1					; if no string has yet been loaded giReady will be zero
 	Smessage sprintfk "file(%s)", gSfilepath			; print file to viewer
 	chnset Smessage, "filer1"	

 	Smessage sprintfk "file(%s)", gSfilepath			; print sound file image to fileplayer
 	chnset Smessage, "ImpulseFile"

	Sname	FileNameFromPath	gSfilepath				; Call UDO to extract file name from the full path
	Smessage sprintfk "text(%s)",Sname
	chnset Smessage, "stringbox"
endin


;instr	99	; load sound file
; Sname FileNameFromPath	gSfilepath				; Call UDO to extract file name from the full path
; Smessage sprintfk "text(%s)",Sname
; chnset Smessage, "stringbox"
;endin
		
</CsInstruments>

<CsScore>
i 1 0 [3600*7*24] 
</CsScore>

</CsoundSynthesizer>
; DistanceEmulator.csd
; Written by Iain McCurdy, 2015
	
<Cabbage>
form caption("Distance Emulator") size(700,300), colour(200,210,180), pluginid("DsEm") style("legacy")
hslider   bounds(  5,  5,240, 30), channel("Amp1"), text("Amp.1"),    colour(100,140,150), trackercolour(200,240,250), textcolour("DarkSlateGrey"), range(0, 1, 1, 0.5, 0.001)
hslider   bounds(255,  5,240, 30), channel("Amp2"), text("Amp.2"),    colour(100,140,150), trackercolour(200,240,250), textcolour("DarkSlateGrey"), range(0, 1, 0.25, 0.5, 0.001)
hslider   bounds(  5, 55,240, 30), channel("Rvb1"), text("Rvb.1"),    colour(100,140,150), trackercolour(200,240,250), textcolour("DarkSlateGrey"), range(0, 1, 0, 0.5, 0.001)
hslider   bounds(255, 55,240, 30), channel("Rvb2"), text("Rvb.2"),    colour(100,140,150), trackercolour(200,240,250), textcolour("DarkSlateGrey"), range(0, 1, 1, 0.5, 0.001)
nslider bounds(505, 55, 70, 30), channel("RvbSize"), text("Size"),  colour(100,140,150), trackercolour(200,240,250), textcolour("DarkSlateGrey"), range(0,0.999, 0.8,0.5,0.001)
nslider bounds(585, 55, 70, 30), channel("RvbLPF"), text("RvbLPF"), colour(100,140,150), trackercolour(200,240,250), textcolour("DarkSlateGrey"), range(20,20000,5000,0.5)
hslider   bounds(  5,105,240, 30), channel("LPF1"), text("LPF.1"),    colour(100,140,150), trackercolour(200,240,250), textcolour("DarkSlateGrey"), range(0, 1, 0)
hslider   bounds(255,105,240, 30), channel("LPF2"), text("LPF.2"),    colour(100,140,150), trackercolour(200,240,250), textcolour("DarkSlateGrey"), range(0, 1, 1)
nslider bounds(505,105, 70, 30), channel("LPF_CF"), text("Cutoff"), colour(100,140,150), trackercolour(200,240,250), textcolour("DarkSlateGrey"), range(20,20000,5000,0.5)
hslider   bounds(  5,155,240, 30), channel("HPF1"), text("HPF.1"),    colour(100,140,150), trackercolour(200,240,250), textcolour("DarkSlateGrey"), range(0, 1, 0)
hslider   bounds(255,155,240, 30), channel("HPF2"), text("HPF.2"),    colour(100,140,150), trackercolour(200,240,250), textcolour("DarkSlateGrey"), range(0, 1, 1)
nslider bounds(505,155, 70, 30), channel("HPF_CF"), text("Cutoff"), colour(100,140,150), trackercolour(200,240,250), textcolour("DarkSlateGrey"), range(20,20000,150,0.5)
hslider   bounds(  5,205,240, 30), channel("Wid1"), text("Width"),    colour(100,140,150), trackercolour(200,240,250), textcolour("DarkSlateGrey"), range(0, 1, 1)
hslider   bounds(255,205,240, 30), channel("Wid2"), text("Width"),    colour(100,140,150), trackercolour(200,240,250), textcolour("DarkSlateGrey"), range(0, 1, 1)
hslider   bounds(  5,255,690, 30), channel("Mor"), text("Morph"),     colour(100,140,150), trackercolour(200,240,250), textcolour("DarkSlateGrey"), range(0, 1, 0)

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n
</CsOptions>

<CsInstruments>

sr 		= 	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1


instr	1
 kPortTime	linseg	0,0.001,0.2
 kAmp1		chnget	"Amp1"
 kAmp2		chnget	"Amp2"
 kRvb1		chnget	"Rvb1"
 kRvb2		chnget	"Rvb2"
 kRvbSize	chnget	"RvbSize"
 kRvbLPF	chnget	"RvbLPF"
 kLPF1		chnget	"LPF1"
 kLPF2		chnget	"LPF2"
 kLPF_CF	chnget	"LPF_CF"
 kHPF1		chnget	"HPF1"
 kHPF2		chnget	"HPF2"
 kHPF_CF	chnget	"HPF_CF"
 kWid1		chnget	"Wid1"
 kWid2		chnget	"Wid2"
 kMor		chnget	"Mor"
 kMor		portk	kMor,kPortTime
 
 aL,aR	ins
 ;aL,aR	diskin2	"ClassicalGuitar.wav",1,0,1
 
 kAmp	ntrpol	kAmp1,kAmp2,kMor
 kRvb	ntrpol	kRvb1,kRvb2,kMor
 kLPF	ntrpol	kLPF1,kLPF2,kMor
 kHPF	ntrpol	kHPF1,kHPF2,kMor
 kWid	ntrpol	kWid1,kWid2,kMor
 kHPF	pow	kHPF,0.2
 kLPF	pow	kLPF,0.2
 
 aL	*=	kAmp^2
 aR	*=	kAmp^2

 aLPF_L	butlp	aL,kLPF_CF
 aLPF_R	butlp	aR,kLPF_CF
 aL		ntrpol		aL,aLPF_L,kLPF 
 aR		ntrpol		aR,aLPF_R,kLPF 
 	
 aHPF_L	buthp	aL,kHPF_CF
 aHPF_R	buthp	aR,kHPF_CF
 aL		ntrpol		aL,aHPF_L,kHPF 
 aR		ntrpol		aR,aHPF_R,kHPF 

 aRvbL,aRvbR	reverbsc	aL,aR,kRvbSize,kRvbLPF
 aL		ntrpol		aL,aRvbL,kRvb 
 aR		ntrpol		aR,aRvbR,kRvb 
 
 aWidL		ntrpol		aL,(aL+aR)*0.75,kWid
 aWidR		ntrpol		aR,(aL+aR)*0.75,kWid
 aL		=		aWidL
 aR		=		aWidR
 
 	outs	aL,aR
 
 

endin
		
</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>; GateReverb.csd
; Written by Iain McCurdy, 2015.

; This effect implements a gate reverb effect using a multitap delay.
; The number of delay taps can be very large so their times are not defined explicitly but instead are derived from a number of global input parameters.

; Duration	-	the duration (in seconds) of a gate period
; N.Taps	-	the number of taps within the gate period (NB. increasing this parameter increases CPU and RAM demand)

; Scat.Amp.	-	random scattering of tap amplitudes
; Shape		-	envelope shaping of the gate reverb: 0=flat, <0=decay, >0=build
; Scat.Tim.	-	Scattering of delay tap times.

; Input/Ouput	-	input/output modes:
;			 Mono		-	input taken from left channel input, a single processed channel is sent to both outputs
;			 Stereo Match	-	stereo in / stereo out. 
;						Random values for left and right channels used for amplitude scattering and delay tap time scattering match resulting in a narrower stereo effect.
;			 Stereo Diff	-	stereo in / stereo out. 
;						Random values for left and right channels used for amplitude scattering and delay tap time scattering differ resulting in a wider stereo effect.
;			 (NB both stereo modes will employ double the number of taps specified by 'N.Taps' thereby doubling CPU and RAM usage for this function with respect to the mono mode.)
; Delay Dry	-	When activated the dry signal is delayed by the amount specified by 'Duration'. This can be particularly useful when using a 'build' reverb shape with a 50:50 dry/wet mix.

; Filter option filters each tap at a randomly selected cutoff frequency
; **Note that N.Taps may need to be reduced if CPU overloads**
; Choose between 'Bypass' (no filter), 'Lowpass' (moogvcf2 resonant filter) or 'bandpass' (butbp)
; Min.		-	minimum limit for random cutoff frequency selection
; Max.		-	maximum limit for random cutoff frequency selection
; Q.		-	Filter quality: Lowpass=resonance Bandpass=bandwidth


; Mix		-	dry/wet mix. 
;			 Note that on account of the accumulation of overlapping delay taps, the wet signal is liable to be much louder than the dry signal.
;			 This can be compensated for using the dry/wet control.
; Level		-	output level

<Cabbage>
form caption("Gate Reverb"), size(850, 85), pluginid("GtRv"), colour(13, 50, 67,50) style("legacy")
image              bounds(  0,  0,850, 85), colour(DarkSlateGrey),  shape("sharp")

#define RSliderStyle # colour(150,205,150), textcolour(200,250,200), outlinecolour(140,140,140), trackercolour(yellow), fontcolour(250,250,150)#

image   bounds(  0,  0,135, 85), colour(0,0,0,0), outlinecolour("white"), outlinethickness(2), shape("sharp"), plant("delays"){
rslider bounds(  0,  5, 75, 75), channel("TotDel"), text("Duration"), range(0.01,4,0.4,0.5,0.01), valuetextbox(1), textbox(1), $RSliderStyle
rslider bounds( 60,  5, 75, 75), channel("TotNum"), text("N.Taps"),   range(1,300,100,1,1), valuetextbox(1), textbox(1), $RSliderStyle
}

image   bounds(133,  0,194, 85), colour(0,0,0,0), outlinecolour("white"), outlinethickness(2), shape("sharp"), plant("scatter"){
rslider bounds(  0,  5, 75, 75), channel("ScatAmp"),text("Scat.Amp."), range(0,1,0.5),  valuetextbox(1), textbox(1), $RSliderStyle
rslider bounds( 60,  5, 75, 75), channel("Shape"),text("Shape"), range(-20,20,0,1,0.1), valuetextbox(1), textbox(1), $RSliderStyle
rslider bounds(120,  5, 75, 75), channel("ScatTim"),text("Scat.Tim."), range(0,1,0.5),  valuetextbox(1), textbox(1), $RSliderStyle
}

image    bounds(325,  0,112, 85), colour(0,0,0,0), outlinecolour("white"), outlinethickness(2), shape("sharp"), plant("InputOutputMode"){
label    bounds(  8,  8, 95, 12), text("Input/Output"), fontcolour(200,250,200)
combobox bounds(  8, 21, 95, 20), channel("InOutMode"), text("Mono","Stereo Match","Stereo Diff."), value(3), fontcolour(250,250,150)
checkbox bounds(  8, 50, 95, 12), channel("DelayDry"), text("Delay Dry"), value(0), fontcolour(250,250,150), colour("yellow")
}

image    bounds(435,  0,282, 85), colour(0,0,0,0), outlinecolour("white"), outlinethickness(2), shape("sharp"), plant("Filter"){
label    bounds(  8,  8, 85, 12), text("Filter"), fontcolour(200,250,200)
combobox bounds(  8, 21, 85, 20), channel("FiltSelect"), text("Bypass","Lowpass","Bandpass"), value(1), fontcolour(250,250,150)
rslider bounds( 90,  5, 75, 75), channel("FiltMin"),    text("Min."),      range(4,13.5,4,1,0.1),    valuetextbox(1), textbox(1), $RSliderStyle
rslider bounds(150,  5, 75, 75), channel("FiltMax"),    text("Max."),      range(4,13.5,13.5,1,0.1), valuetextbox(1), textbox(1), $RSliderStyle
rslider bounds(210,  5, 75, 75), channel("Q"),          text("Q."),        range(0,1,0.1),           valuetextbox(1), textbox(1), $RSliderStyle
}

image   bounds(715,  0,135, 85), colour(0,0,0,0), outlinecolour("white"), outlinethickness(2), shape("sharp"), plant("mixer"){
rslider bounds(  0,  5, 75, 75), channel("Mix"),    text("Mix"),      range(0,1.00,0.5), valuetextbox(1), textbox(1), $RSliderStyle
rslider bounds( 60,  5, 75, 75), channel("Level"),  text("Level"),    range(0,1,0.7),    valuetextbox(1), textbox(1), $RSliderStyle
}

</Cabbage>
                    
<CsoundSynthesizer>

<CsOptions>   
-dm0 -n
</CsOptions>

<CsInstruments>

sr 		= 	44100
ksmps 		= 	32
nchnls 		= 	2
0dbfs		=	1
		seed	0
		
; RANDOM DISTRIBUTION - UNIFORM VALUES 0 TO 1
giRnd	ftgen	0, 0, 4096, 21, 1, 1

; UDO
opcode	Taps,a,iiiiiikkkko
 iInOutMode,iTotDel,iScatAmp,iShape,iScatTim,iTotNum,kFiltSelect,kFiltMin,kFiltMax,kQ,iCount	xin
 aMix,aOut	init	0								; INITIALISE THIS TAP AND MIX OF ALL OTHER TAPS
 if iInOutMode==2 then									; IF STEREO MATCHED INPUT/OUTPUT MODE
  iRndDel	table	iCount,giRnd							; READ A RANDOM DELAY OFFSET VALUE FROM RANDOM DISTRIBUTION TABLE (FIXED LAYER BY LAYER) 
  iRndDel	=	((iRndDel*2)-1) * ((iTotDel*iScatTim)/iTotNum)			; RESCALE DELAY OFFSET VALUE
  iRndAmp	table	iCount+1000,giRnd						; READ RANDOM AMPLITUDE VALUE FROM TABLE
  iRndAmp	=	1 - (iRndAmp * iScatAmp)					; RESCALE RANDOM AMPLITUDE VALUE
 else											; OTHERWISE (RANDOM DIFF. OR MONO MODE SELECTED) 
  iRndAmp	random	(1-iScatAmp),1 							; CREATE A RANDOM AMPLITUDE VALUE
  iRndDel	random	-(iTotDel*iScatTim)/iTotNum, (iTotDel*iScatTim)/iTotNum		; CREATE A RANDOM DELAY TAP OFFSET VALUE
 endif 
 iDel		limit	((iTotDel/iTotNum)*iCount)+iRndDel,0.001,iTotDel		; LIMIT DELAY TIMES SO THAT IT WON'T EXCEED BUFFER SIZE OR BE ZERO OR LESS
 aOut		deltapi	iDel								; CREATE DELAY TAP

 /* FILTER */
 iRndCFOct	random	i(kFiltMin),i(kFiltMax)
 iCF		=	cpsoct(iRndCFOct)
 if kFiltSelect==2 then
  aOut		moogvcf2	aOut,iCF,kQ*0.9
 elseif kFiltSelect==3 then
  aOut		butbp	aOut,iCF,(((1-kQ)*2) + 0.05)*iCF, 1
 endif

 if iShape!=0 then									; IF 'SHAPE' VALUE IS NOT ZERO
  if iShape>0 then									; IF A POSITIVE VALUE... (BUILD SHAPE)
   aOut	*=	(iCount/iTotNum)^iShape							; AMPLITUDE SCALED ACCORDING TO TAP NUMBER
  else											; OTHERWISE... (DECAY SHAPE)
   aOut	*=	((iTotNum-iCount)/iTotNum)^abs(iShape)  				; AMPLITUDE SCALED ACCORDING TO TAP NUMBER (REVERSED)
  endif
 endif
 if iCount<iTotNum then									; IF NUMBER OF REQUIRED TAPS IS NOT YET COMPLETED...
  aMix		Taps	iInOutMode,iTotDel,iScatAmp,iShape,iScatTim,iTotNum,kFiltSelect,kFiltMin,kFiltMax,kQ,iCount+1	; CALL FURTHER LAYER(S) FOR ADDITIONAL TAPS AS REQUIRED (INCREMENT COUNTER)
 endif
 		xout	(aOut*(iRndAmp^2))+aMix						; ADD THIS TAP (AND APPLY RANDOM AMPLITUDE FOR THIS TAP) WITH ALL SUBSEQUENT TAPS
endop

instr	1
 kInOutMode	chnget	"InOutMode"							; READ IN WIDGETS
 kInOutMode	init	1								; INIT (TO PREVENT) A ZERO AT I-TIME
 kTotNum	chnget	"TotNum"
 kTotNum	init	100
 kTotDel	chnget	"TotDel"
 kTotDel	init	0.4
 kMix		chnget	"Mix"
 kLevel		chnget	"Level"                                                                       
 kScatAmp	chnget	"ScatAmp"
 kShape		chnget	"Shape"
 kScatTim	chnget	"ScatTim"
 kDelayDry	chnget	"DelayDry"
 kFiltSelect	chnget	"FiltSelect"
 kFiltMin	chnget	"FiltMin"		
 kFiltMax	chnget	"FiltMax"
 kQ		chnget	"Q"
 		
 aL,aR		ins									; READ IN STEREO INPUT 

 if changed(kInOutMode,kTotNum,kTotDel,kScatAmp,kShape,kScatTim,kDelayDry,kFiltMin,kFiltMax)==1 then		; FORCE A REINITIALISATION IF ANY OF THE LISTED K-VARIABLES CHANGE
  		reinit	RESTART
 endif
 RESTART:

 if i(kInOutMode)==1 then									; IF MONO MODE IS SELECTED CREATE JUST A SINGLE CHANNEL AND SEND IT TO BOTH OUTPUTS
  aBuf		delayr	i(kTotDel) 								; SET UP BUFFER
  aDelL		Taps	i(kInOutMode),i(kTotDel),i(kScatAmp),i(kShape),i(kScatTim),i(kTotNum),kFiltSelect,kFiltMin,kFiltMax,kQ	; CALL UDO
 		delayw	aL									; WRITE INTO BUFFER
  if i(kDelayDry)==1 then
   aL	delay	aL,i(kTotDel)
  endif
  aMix		ntrpol	aL,aDelL,kMix								; MIX DRY AND WET SIGNALS
 	outs	aMix*kLevel, aMix*kLevel							; SEND SAME SIGNAL TO BOTH CHANNELS
 else												; OTHERWISE (EITHER OF THE STEREO MODES HAS BEEN SELECTED)
  aBuf		delayr	i(kTotDel) 								; LEFT CHANNEL...
  aDelL		Taps	i(kInOutMode),i(kTotDel),i(kScatAmp),i(kShape),i(kScatTim),i(kTotNum),kFiltSelect,kFiltMin,kFiltMax,kQ	;
 		delayw	aL									;
  aBuf		delayr	i(kTotDel) 								; RIGHT CHANNEL...
  aDelR		Taps	i(kInOutMode),i(kTotDel),i(kScatAmp),i(kShape),i(kScatTim),i(kTotNum),kFiltSelect,kFiltMin,kFiltMax,kQ	;
 		delayw	aR									;
  if i(kDelayDry)==1 then
   aL	delay	aL,i(kTotDel)
   aR	delay	aR,i(kTotDel)
  endif
  aMixL		ntrpol	aL,aDelL,kMix								; MIX DRY AND WET SIGNALS FOR BOTH CHANNELS SEPARATELY
  aMixR		ntrpol	aR,aDelR,kMix								;
 	outs	aMixL*kLevel, aMixR*kLevel							; STEREO OUTPUT
 endif
 
endin

</CsInstruments>

<CsScore>
i 1 0 3600
</CsScore>

</CsoundSynthesizer>
; MultiReverb.csd
; Written by Iain McCurdy, 2012

; Reverb effect that employs screverb and freeverb opcodes.
; Pitch Mod. is only used by reverbsc.

<Cabbage>
form caption("Multi Reverb") size(415, 90), pluginid("Rvrb") style("legacy")
image  bounds(  7, 22, 73, 45), colour( 39, 31, 20), shape("rounded"), outlinecolour(white), outlinethickness(1) 
image  bounds(  0,  0,415, 90), colour( 39, 31, 20), shape("rounded"), outlinecolour("white"), outlinethickness(4) 
button bounds( 11, 20, 66, 20), text("screverb","screverb"), channel("scType"),   value(1), fontcolour:0(50,50,50), fontcolour:1("lime"), radiogroup(1)
button bounds( 11, 40, 66, 20), text("freeverb","freeverb"), channel("freeType"), value(0), fontcolour:0(50,50,50), fontcolour:1("lime"), radiogroup(1)
rslider bounds( 80, 11, 70, 70), text("Size"), 		textcolour(white), 		channel("fblvl"), 	range(0, 1.00, 0.8), colour( 79, 81, 70), trackercolour(240,210,170)
rslider bounds(145, 11, 70, 70), text("Damping"), 	textcolour(white), 		channel("fco"), 	range(0, 1.00, 0.6), colour( 79, 81, 70), trackercolour(240,210,170)
rslider bounds(210, 11, 70, 70), text("Pitch Mod."), 	textcolour(white), 		channel("pitchm"), 	range(0, 20.0, 1),   colour( 79, 81, 70), trackercolour(240,210,170), identchannel("pitchmID")
rslider bounds(275, 11, 70, 70), text("Mix"), 		textcolour(white), 		channel("mix"), 	range(0, 1.00, 1),   colour( 79, 81, 70), trackercolour(240,210,170)
rslider bounds(340, 11, 70, 70), text("Level"),	 	textcolour(white), 		channel("amp"), 	range(0, 1.00, 1),   colour( 79, 81, 70), trackercolour(240,210,170)
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-d -n
</CsOptions>

<CsInstruments>

sr 	= 	44100	;SAMPLE RATE
ksmps 	= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 	= 	2	;NUMBER OF CHANNELS (2=STEREO)
0dbfs	=	1

; Author: Iain McCurdy (2012)

instr	1
	kscType		chnget	"scType"
	kfreeType	chnget	"freeType"
	ktype		=	(kscType==1?0:1)
	kfblvl		chnget	"fblvl"
	kfco		chnget	"fco"
	kpitchm		chnget	"pitchm"
	kmix		chnget	"mix"
	kamp		chnget	"amp"

	
	if changed(ktype)==1||timeinstk()==1 then
	 Smsg	sprintfk	"visible(%d)",1-ktype
	 chnset	Smsg,"pitchmID"
	endif

	ainL,ainR	ins
	denorm		ainL, ainR	;DENORMALIZE BOTH CHANNELS OF AUDIO SIGNAL
	if ktype==0 then
	 kfco	expcurve	kfco, 4	;CREATE A MAPPING CURVE TO GIVE A NON LINEAR RESPONSE
	 kfco	scale	kfco,20000,20	;RESCALE 0 - 1 TO 20 TO 20000
	 kSwitch		changed		kpitchm	;GENERATE A MOMENTARY '1' PULSE IN OUTPUT 'kSwitch' IF ANY OF THE SCANNED INPUT VARIABLES CHANGE. (OUTPUT 'kSwitch' IS NORMALLY ZERO)
	 if	kSwitch=1	then	;IF kSwitch=1 THEN
		reinit	UPDATE		;BEGIN A REINITIALIZATION PASS FROM LABEL 'UPDATE'
	 endif				;END OF CONDITIONAL BRANCHING
	 UPDATE:				;A LABEL
	 arvbL, arvbR 	reverbsc 	ainL, ainR, kfblvl, kfco, sr, i(kpitchm)
	 rireturn			;RETURN TO PERFORMANCE TIME PASSES
	else
	 arvbL, arvbR 	freeverb 	ainL, ainR, kfblvl, 1-kfco
	endif
	amixL		ntrpol		ainL, arvbL, kmix	;CREATE A DRY/WET MIX BETWEEN THE DRY AND THE REVERBERATED SIGNAL
	amixR		ntrpol		ainR, arvbR, kmix	;CREATE A DRY/WET MIX BETWEEN THE DRY AND THE REVERBERATED SIGNAL
			outs		amixL * kamp, amixR * kamp
endin
		
</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>
; BufferFreeze.csd
; Written by Iain McCurdy, 2014, updated 2016

<Cabbage>
form caption("Buffer Freeze"), size(610, 250), pluginid("BfFr"), colour(50,50,75) style("legacy")
gentable      bounds(  5,  5,600,120), tablenumber(1), tablecolour("LightBlue"), amprange(-1,1,1), identchannel(table), zoom(-1)

hslider    bounds(  0,120, 610, 25), channel("ptr"),    range(0, 1.00, 1), trackercolour("LightBlue")
label      bounds(205,143,200,  12), text("Pointer"), fontcolour("white")

checkbox bounds( 15,180, 80, 30), channel("freeze"), text("Freeze"), fontcolour("white"), colour("LightBlue")

rslider    bounds(100,170, 70, 70), channel("InGain"), text("Input Gain"), textcolour("white"), range(0, 8.00, 1,0.5), trackercolour("LightBlue")
rslider    bounds(170,170, 70, 70), channel("DryGain"), text("Dry Gain"), textcolour("white"), range(0, 8.00, 1,0.5), trackercolour("LightBlue")
rslider    bounds(240,170, 70, 70), channel("FreezeGain"), text("Freeze Gain"), textcolour("white"), range(0, 8.00, 1), trackercolour("LightBlue")

label      bounds(325,175, 60,13), text("FFT Size"), fontcolour("white")
combobox   bounds(325,190, 60,20), text("128","256","512","1024","2048","4096","8192"), channel("FFTSize"), value(4), fontcolour(255,255,255)

rslider    bounds(395,170, 70, 70), channel("PtrRand"), text("Ptr.Rand."), textcolour("white"), range(0, 1.00, 0), trackercolour("LightBlue")
rslider    bounds(465,170, 70, 70), channel("Transpose"), text("Transpose"), textcolour("white"), range(-24, 24.00, 0), trackercolour("LightBlue")
rslider    bounds(535,170, 70, 70), channel("TransRand"), text("Trans.Rand."), textcolour("white"), range(0, 24.00, 0), trackercolour("LightBlue")

</Cabbage>
                    
<CsoundSynthesizer>

<CsOptions>   
-dm0 -n
</CsOptions>

<CsInstruments>

sr 		= 	44100	; SAMPLE RATE
ksmps 		= 	16	; NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	; NUMBER OF CHANNELS
0dbfs		=	1	; MAXIMUM AMPLITUDE
			 
giDispBuffer	ftgen	1,0, -600,-2, 0	; define live audio buffer table for display. It makes sense if this corresponds to the display size in pixels.
giAudBuffer	ftgen	2,0, 2^18,10, 0	; define live audio buffer table

instr	1
	aL,aR	ins
	kfreeze	chnget	"freeze"

	koffset	init	0	
	kInGain	chnget	"InGain"
	aL	*=	kInGain
	aR	*=	kInGain
	kDryGain	chnget	"DryGain"
	kFreezeGain	chnget	"FreezeGain"
		
	if kfreeze==0 then							; if writing to table mode...

	 ; write audio to table
	 aptr	phasor	sr/ftlen(giAudBuffer)				
		tablew	aL,aptr,giAudBuffer,1

	koffset			downsamp	aptr				; amount of offset added to freeze read pointer (NB. audio buffer does not scroll)
	
	if metro(sr*ftlen(giDispBuffer)/ftlen(giAudBuffer))==1 then		; update according to size of display table and size of audio buffer	 
	 	tablew	k(aL),ftlen(giDispBuffer),giDispBuffer			; write current audio sample value (as a downsampled krate value) to table
	 	
	 ; SHUNT ENTIRE TABLE CONTENTS ONE STEP TO THE RIGHT
	 kcount	=	0
	 loop:
	 kval	table	kcount+1,giDispBuffer
	 	tablew	kval,kcount,giDispBuffer
	 loop_lt	kcount,1,ftlen(giDispBuffer),loop	

       	 chnset	"tablenumber(1)", "table"					; update table display	

	endif
	 		outs	aL*kDryGain,aR*kDryGain
	 
	else									; otherwise freeze/read mode
	
	 kptr	chnget	"ptr"
	 kporttime linseg 0,0.001,0.01
	 kptr portk kptr, kporttime
	 kPtrRand	gauss	chnget:k("PtrRand")
	 kptr	wrap	kptr+koffset+kPtrRand,0,1
	 kFFTSize	chnget	"FFTSize"
	 kFFTSize	init	4
	 kPitch	=	semitone( chnget:k("Transpose") + gauss:k(chnget:k("TransRand")) )
	 if changed(kFFTSize)==1 then
	  reinit UPDATE
	 endif
	 UPDATE:
	 iFFTSize	=	2^(i(kFFTSize)+6)
	 asig 	mincer 	a(kptr*(ftlen(giAudBuffer)/sr)), kFreezeGain, kPitch, giAudBuffer, 0, iFFTSize
	 rireturn 
		outs	asig,asig

	endif

endin

</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>
; FrequencyShifter.csd
; Iain McCurdy, 2013.
; 
; Frequency shifting using the hilbert filter
; 
; CONTROLS
; --------
; Input			--	Choose audio input: Live, sine tone or pink noise
; Polarity		--	3 options: 'Positive' = multiply 'Freq.' by 1, 'Negative' = multiply 'Freq.' by -1, 'Dual' = sum of 'Positive' and 'Negative' outputs
; Mix			--	Dry/Wet mix control
; Freq.			--	Principle frequency of the shifting frequency (before modulation by other controls)
; Mult.			--	multipler of shifting frequency. Can be useful for finer control of shifting frequency around zero.
; Feedback		--	Amount of frequency shifter that is fed back into its input
; Level			--	Output level
; Dual Mono / Stereo	--	'Dual Mono' = both channels treated in the same way. 'Stereo' = right channel 180 degrees out of phase with respect to the left
;				 Stereo mode most apparent if shifting frequency is close to zero
; zero freq		--	set 'Freq.' to zero
;  [LFO~]
; Modulate Frequency	--	Switch to activate LFO modulation  of shifting frequency
; Shape			--	Shape of the LFO: sine / triangle / square / random sample and hold / random splines
; Rate			--	Rate of LFO (in hertz)
; Min			--	Minimum frequency of the LFO modulation
; Max			--	Maximum frequency of the LFO modulation
; Pan Mod			--	Amount of panning modulation (strictly speaking, stereo balance modulation). Rate of modulation governed also by 'Rate'
; Sync LFO		--	Restart LFO. Can be useful if 'random spline' modulation becomes 'stuck' at a low frequency

<Cabbage>
form caption("Frequency Shifter") size(560,180), pluginid("fshi") style("legacy")
image                   bounds( 0,  0, 560,180), colour("darkslategrey"), outlinecolour("silver"), outlinethickness(6), shape("rounded")
label    bounds(15,  7, 70, 11), text("INPUT"), fontcolour("white")
combobox bounds(15, 18, 70, 20), channel("input"), value(1), text("Live","Tone","Noise")
label    bounds(15, 42, 70, 11), text("POLARITY"), fontcolour("white")
combobox bounds(15, 53, 70, 20), channel("polarity"), value(1), text("Positive","Negative","Dual")
rslider bounds( 80, 10, 70, 70), text("Mix"),      channel("mix"),    range(0, 1.00, 0.5),     colour(27,59,59), textcolour("white"), trackercolour(255,255,100)
rslider bounds(150, 10, 70, 70), text("Freq."),    channel("freq"),   range(-4000, 4000, -50), colour(27,59,59), textcolour("white"), trackercolour(255,255,100)
rslider bounds(220, 10, 70, 70), text("Mult."),    channel("mult"),   range(-1, 1.00, 0.1),    colour(27,59,59), textcolour("white"), trackercolour(255,255,100)
rslider bounds(285, 15, 60, 60), text("Port."),    channel("port"),   range(0, 30.00, 0.1),    colour(27,59,59), textcolour("white"), trackercolour(255,255,100)

rslider bounds(340, 10, 70, 70), text("Feedback"), channel("fback"),  range(0, 0.75, 0.6),     colour(27,59,59), textcolour("white"), trackercolour(255,255,100)
rslider bounds(410, 10, 70, 70), text("Level"),    channel("level"),  range(0, 1.00, 1),       colour(27,59,59), textcolour("white"), trackercolour(255,255,100)

checkbox bounds(480, 20, 12, 12), channel("r1") fontcolour("white") colour(yellow) value(1)
checkbox bounds(480, 32, 12, 12), channel("r2") fontcolour("white") colour(yellow) 
label    bounds(493, 21, 55,  9), text("DUAL MONO"), fontcolour("white")
label    bounds(492, 33, 40,  9), text("STEREO"), fontcolour("white")

button   bounds(480, 50, 65, 20), colour("Green"), text("Zero Freq", "Zero Freq"), channel("Zerofreq"), value(0), latched(0)

;----

line     bounds( 10, 90, 540, 2), colour("Grey")

;----

checkbox bounds( 40,100,150, 20), channel("ModOnOff") text("LFO Modulate Freq."), fontcolour("white") colour(lime) value(0)
label    bounds( 53,127, 45, 11), text("SHAPE"), fontcolour("white")
combobox bounds( 40,138, 85, 20), channel("LFOShape"), value(7), text("Sine","Triangle","Square","Saw Up","Saw Down","Rand.S&H","Rand.Spline")
rslider bounds( 175,100, 70, 70), text("Rate"),     channel("LFORate"),  range(0, 30,  1.5, 0.5, 0.001), colour("lightslategrey"), textcolour("white"), trackercolour(255,255,100)
rslider bounds( 245,100, 70, 70), text("Min"),      channel("LFOMin"),   range(-2000, 2000, -600),       colour("lightslategrey"), textcolour("white"), trackercolour(255,255,100)
rslider bounds( 315,100, 70, 70), text("Max"),      channel("LFOMax"),   range(-2000, 2000,  600),       colour("lightslategrey"), textcolour("white"), trackercolour(255,255,100)
rslider bounds( 385,100, 70, 70), text("Pan Mod."), channel("PanSpread"),range(0, 1.00, 1),              colour("lightslategrey"), textcolour("white"), trackercolour(255,255,100)
button   bounds(455,100, 65, 20), colour("Green"), text("Sync LFO", "Sync LFO"), channel("SyncLFO"), value(0), latched(0)

</Cabbage>
<CsoundSynthesizer>

<CsOptions>
-d -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>
sr 	= 	48000
ksmps 	= 	32
nchnls 	= 	2
0dbfs 	= 	1

;Iain McCurdy, 2012
;http://iainmccurdy.org/csound.html
;Frequency shifter effect based around the hilbert filter.

gisine		ftgen	0,0,4096,10,1			;A SINE WAVE SHAPE
gicos		ftgen	0,0,4096,11,1			;A COSINE WAVE SHAPE
gishapes	ftgen	0,0,8,-2,0,1,2,4,5

opcode	FreqShifter,a,akkki
	adry,kmix,kfshift,kfback,ifn	xin			;READ IN INPUT ARGUMENTS
	kWet	limit	kmix*2,0,1
	kDry	limit	(1-kmix)*2,0,1
	aFS	init	0					;INITILISE FEEDBACK SIGNAL (FOR FIRST K-PASS)
	ain	=	adry + (aFS * kfback)			;ADD FEEDBACK SIGNAL TO INPUT (AMOUNT OF FEEDBACK CONTROLLED BY 'Feedback Gain' SLIDER)
	areal, aimag hilbert ain				;HILBERT OPCODE OUTPUTS TWO PHASE SHIFTED SIGNALS, EACH 90 OUT OF PHASE WITH EACH OTHER
	;QUADRATURE OSCILLATORS. I.E. 90 OUT OF PHASE WITH RESPECT TO EACH OTHER
	;OUTUTS	OPCODE	AMPLITUDE | FREQ. | FUNCTION_TABLE | INITIAL_PHASE (OPTIONAL;DEFAULTS TO ZERO)
	asin 	oscili       1,    kfshift,     ifn,           0
	acos 	oscili       1,    kfshift,     ifn,           0.25	
	;RING MODULATE EACH SIGNAL USING THE QUADRATURE OSCILLATORS AS MODULATORS
	amod1	=		areal * acos
	amod2	=		aimag * asin	
	;UPSHIFTING OUTPUT
	aFS	= (amod1 - amod2)
	aout	sum	aFS*kWet, adry*kDry		;CREATE WET/DRY MIX
		xout	aout				;SEND AUDIO BACK TO CALLER INSTRUMENT
endop


opcode	CabbageRadio2,k,SS			; change opcode name and number is string variable inputs
S1,S2	xin					; add string inputs for the required number of inputs 
kon		=	0
koff		=	0
ksum		=	0
ktrigsum	=	0
#define READ_CHANGES(NAME)	#
k$NAME	chnget	$NAME
ksum	=	ksum + k$NAME
kon$NAME	trigger	k$NAME,0.5,0
ktrigsum	=	ktrigsum + kon$NAME#

#define WRITE_CHANGES(NAME'COUNT)	#
if kon$NAME!=1 then
 chnset	koff,$NAME
else
 kval	=	$COUNT
endif#

 $READ_CHANGES(S1) 
 $READ_CHANGES(S2)				; add macro expansions for the required number of radio buttons

if ktrigsum>0 then

 $WRITE_CHANGES(S1'1)
 $WRITE_CHANGES(S2'2)				; add macro expansions for the required number of radio buttons

endif

kval	=	(ksum=0?0:kval)
	xout	kval
endop


instr	1
kporttime	linseg	0,0.001,1
koff	=	0
kmix		chnget	"mix"			; read input widgets
kfreq		chnget	"freq"
kmult		chnget	"mult"
kport		chnget	"port"
kfshift		portk	kfreq*kmult,kporttime*kport
kfback		chnget	"fback"
klevel		chnget	"level"
kpolarity	chnget	"polarity"
kStereoMode	CabbageRadio2	"r1","r2"	; call UDO
kZeroFreq	chnget	"Zerofreq"
ktrig changed	kZeroFreq
if ktrig=1 then
 chnset	koff,"freq"
endif
kModOnOff	chnget	"ModOnOff"	
kLFOShape        chnget	"LFOShape"        	
kLFORate         chnget	"LFORate"         	
kLFOMin          chnget	"LFOMin"          	
kLFOMax          chnget	"LFOMax"          	
kPanSpread	chnget	"PanSpread"		
kSyncLFO	chnget	"SyncLFO"


/* INPUT */
kinput		chnget	"input"
if kinput=1 then
 a1,a2	ins
elseif kinput=2 then
 a1	oscils	0.2, 300, 0
 a2	=	a1
else
 a1	pinkish	0.2
 a2	pinkish	0.2
endif



/* LFO */
if kModOnOff=1 then
 ktrig	changed	kLFOShape,kSyncLFO
 if ktrig==1 then
  reinit RESTART_LFO
 endif
 RESTART_LFO:
 if i(kLFOShape)=6 then
  kLFOFreq	randomh	kLFOMin,kLFOMax,kLFORate
 elseif i(kLFOShape)=7 then				; random spline
  ;kLFOFreq	randomi	kLFOMin,kLFOMax,kLFORate,1
  ;kLFOFreq	portk	kLFOFreq,1/kLFORate
  kLFOFreq	rspline	kLFOMin,kLFOMax,kLFORate,kLFORate*2
 else
  ishape	table	i(kLFOShape)-1,gishapes
  kLFOFreq	lfo	1,kLFORate,ishape
  kLFOFreq	scale	(kLFOFreq*0.5)+0.5,kLFOMin,kLFOMax
 endif
 rireturn
endif

 
 
kfshift	=	kfshift+kLFOFreq

/* FREQUENCY SHIFTERS */
ktrig	changed	kStereoMode
if ktrig=1 then
 reinit RESTART_FREQUENCY_SHIFTERS
endif
RESTART_FREQUENCY_SHIFTERS:
if kpolarity=1 then						; polarity is positive...
 a1	FreqShifter	a1,kmix,kfshift,kfback,gisine	
 if i(kStereoMode)=2 then
  a2	FreqShifter	a2,kmix,kfshift,kfback,gicos	; cosine version
 else
  a2	FreqShifter	a2,kmix,kfshift,kfback,gisine	
 endif 
elseif kpolarity=2 then						; polarity is negative...
 a1	FreqShifter	a1,kmix,-kfshift,kfback,gisine	
 if i(kStereoMode)=2 then
  a2	FreqShifter	a2,kmix,-kfshift,kfback,gicos	; cosine version
 else
  a2	FreqShifter	a2,kmix,-kfshift,kfback,gisine	
 endif
else								; polarity is dual...
 aa	FreqShifter	a1,kmix,kfshift,kfback,gisine	; positive
 if i(kStereoMode)=2 then
  ab	FreqShifter	a2,kmix,kfshift,kfback,gicos	; cosine version
 else
  ab	FreqShifter	a2,kmix,kfshift,kfback,gisine	
 endif 
 ac	FreqShifter	a1,kmix,-kfshift,kfback,gisine	; negative
 if i(kStereoMode)=2 then
  ad	FreqShifter	a2,kmix,-kfshift,kfback,gicos	; cosine version
 else
  ad	FreqShifter	a2,kmix,-kfshift,kfback,gisine	
 endif
rireturn

 a1	=		(aa+ac)*0.5				; sum positive and negative and attenuate
 a2	=		(ab+ad)*0.5
endif


/* PANNING */
if kModOnOff=1 then
 kpan	randomi	0.5-(kPanSpread*0.5),0.5+(kPanSpread*0.5),kLFORate,1
 kpan	portk	kpan,1/kLFORate
 a1  =     a1 * sin(kpan*$M_PI_2)
 a2  =     a2 * cos(kpan*$M_PI_2)
 ;a1	=	a1*kpan
 ;a2	=	a2*(1-kpan)
endif



a1	=	a1 * klevel					; scale using level control
a2	=	a2 * klevel
	outs	a1,a2
endin

</CsInstruments>
<CsScore>
i 1 0 [60*60*24*7]
</CsScore>
</CsoundSynthesizer>; PitchShifter.csd
; Written by Iain McCurdy, 2015.

; A pitch shifter using the traditional delay buffer write-read method.
; Two buffers are used per channel (therefore four in total).
; Each overlapping buffer is gated using a hanning window in order to prevent discontinuities
; Snap		-	when activated forces 'Semitones' to an integer.

; Three modes are provided:
; 	Feedback	-	a standard single pitchshifter unit with feedback (2 feedback modes are offered)
;	Interative	-	the user can choose the number of simultaneous pitchshifter units. 
;				Pitchshifting intervals of the various units are related additively, e.g. if semitones=12, the first unit is 12, the second 24, the third 36 etc. (similar to feedback mode)
;	Harmonic	-	Iterative units are harmonically related. E.g. normal harmonic series of intervals is generated if semitones=12. i.e. first interval of the harmonic series is 1 octave

; FB.Method	-	selects from two different feedback methods:
;			  'Indiv.' - each buffer feeds back into itself
;			  'Global' - the gated and mixed buffers from each channel are fed back into both of the buffers for that channel.
; Smooth	-	Basically portamento time governing the filtering of changes made to 'Semitones' and 'Delay'. If zero, portmento filtering is bypassed entirely.  
; Window	-	Selects the window shape used to envelope the overlapping buffers

<Cabbage>
form caption("Pitch Shifter") size(840,  90), pluginid("PShf"), scrollbars(0) style("legacy")

#define RSliderStyle # colour("Grey"), textcolour("white"), outlinecolour("DarkGrey"), trackercolour("Silver")#

label    bounds( 10, 15, 80, 13), fontcolour("white"), text("Interval")
combobox bounds( 10, 30, 80, 20), text("Semitone","Ratio"), channel("IntervalMode"),       value(1)

image     bounds(120, 15, 35, 58), plant("Ratio"), colour(0,0,0,0), visible(0), identchannel("RatioPlant_ident") {
nslider bounds(  5,  0, 25, 18), channel("Numerator"),        range(1,99,3,1,1)
image     bounds(  0, 26, 35,  1), shape("sharp") 
nslider bounds(  5, 35, 25, 18), channel("Denominator"),      range(1,99,2,1,1)
}

image    bounds(110, 10,130, 70), plant("Semitones"), colour(0,0,0,0), visible(1), identchannel("SemitonesPlant_ident") {
rslider  bounds(  0,  0, 70, 70), text("Semitones"),  channel("Semitones"),      range(-48,48,7,1,0.001), $RSliderStyle
checkbox bounds( 70, 20, 60, 15), text("Snap"),       channel("Snap"), value(1), fontcolour("white")
}

label     bounds(240, 15, 80, 13), fontcolour("white"), text("Mode")
combobox  bounds(240, 30, 80, 20), text("Feedback","Iteration","Harmonic"), channel("Mode"),       value(1)
rslider  bounds(330, 10, 70, 70), text("Feedback"),    channel("Feedback"),       range(0,1,0.9,2,0.0001), visible(1), identchannel("Feedback_ident"),  $RSliderStyle
label    bounds(400, 15, 70, 13), text("FB.Method"), fontcolour("White"), visible(1), identchannel("FBLabel_ident"),
combobox bounds(400, 30, 70, 20), text("Indiv.","Global"),       channel("FBMethod"), visible(1), identchannel("FBMethod_ident"),
rslider  bounds(400, 10, 70, 70), text("Iterations"),    channel("NIter"),       range(1,10,3,1,1), identchannel("NIter_ident"), visible(0)        $RSliderStyle

rslider  bounds(470, 10, 70, 70), text("Delay"),       channel("Delay"),          range(0.01,4.00, 0.1,0.5),      $RSliderStyle
rslider  bounds(540, 10, 70, 70), text("Smooth"),      channel("Smooth"),         range(0,99,0,0.5),              $RSliderStyle
label    bounds(610, 15, 80, 13), text("Window"), fontcolour("White")
combobox bounds(610, 30, 80, 20), text("Hanning","Triangle","Half Sine","Square","Pulse","Perc.","Rev.Perc."),  channel("Window")
rslider  bounds(690, 10, 70, 70), text("Mix"),         channel("Mix"),            range(0, 1,0.5),                $RSliderStyle
rslider  bounds(760, 10, 70, 70), text("Level"),       channel("Level"),          range(0, 1.00,1),               $RSliderStyle

</Cabbage>

<CsoundSynthesizer>
<CsOptions>
-d -n
</CsOptions>
<CsInstruments>

sr 		= 	44100
ksmps 		= 	32
nchnls 		= 	2
0dbfs		=	1	;MAXIMUM AMPLITUDE


giHanning	ftgen	0, 0, 4097,  20, 2
giTriangle	ftgen	0, 0, 4097,  20, 3
giHalfSine	ftgen	0, 0, 4097,   9, 0.5, 1, 0
giSquare	ftgen	0, 0, 4097,   7, 0, 64, 1, 4096-128, 1, 64, 0
giPulse		ftgen	0, 0, 4097,  20, 6, 1, 0.5
giPerc		ftgen	0, 0, 4097,  16, 0, 64, -2, 1,   4096-64, -2, 0
giRevPerc	ftgen	0, 0, 4097,  16, 0, 4096-64, -2, 1, 64, -2, 0



opcode	pitchshifter, aa, aakkkkii	; individual buffer feedback
	ainL,ainR,kratio,kfeedback,kDelay,kSmooth,imaxdelay,iwfn	xin
	setksmps	1

	kPortTime	linseg	0,0.001,1
	;if kSmooth>0 then					; portamento smoothing
	 kratio		portk	kratio, kPortTime*kSmooth	
	 kDelay		portk	kDelay, kPortTime*kSmooth	
	;endif

	aDelay		interp	kDelay

	arate		=	(kratio-1)/kDelay		;SUBTRACT 1/1 SPEED

	aphase1		phasor	-arate				;MOVING PHASE 1-0
	aphase2		phasor	-arate, .5			;MOVING PHASE 1-0 - PHASE OFFSET BY 180 DEGREES (.5 RADIANS)
	
	agate1		tablei	aphase1, iwfn, 1, 0, 1		;
	agate2		tablei	aphase2, iwfn, 1, 0, 1		;
	
	abuf1		delayr	imaxdelay			;DECLARE DELAY BUFFER
	adelsig1	deltap3	aphase1 * aDelay		;VARIABLE TAP
	aGatedSig1	=	adelsig1 * agate1
			delayw	ainL + (aGatedSig1*kfeedback)	;WRITE AUDIO TO THE BEGINNING OF THE DELAY BUFFER, MIX IN FEEDBACK SIGNAL - PROPORTION DEFINED BY gkFB
	
	abuf2		delayr	imaxdelay			;DECLARE DELAY BUFFER
	adelsig2	deltap3	aphase2 * aDelay		;VARIABLE TAP
	aGatedSig2	=	adelsig2 * agate2
			delayw	ainL + (aGatedSig2*kfeedback)	;WRITE AUDIO TO THE BEGINNING OF THE DELAY BUFFER, MIX IN FEEDBACK SIGNAL - PROPORTION DEFINED BY gkFB

	abuf3		delayr	imaxdelay			;DECLARE DELAY BUFFER
	adelsig3	deltap3	aphase1 * aDelay		;VARIABLE TAP
	aGatedSig3	=	adelsig3 * agate1
			delayw	ainR + (aGatedSig3*kfeedback)	;WRITE AUDIO TO THE BEGINNING OF THE DELAY BUFFER, MIX IN FEEDBACK SIGNAL - PROPORTION DEFINED BY gkFB
	
	abuf4		delayr	imaxdelay			;DECLARE DELAY BUFFER
	adelsig4	deltap3	aphase2 * aDelay		;VARIABLE TAP
	aGatedSig4	=	adelsig4 * agate2
			delayw	ainR + (aGatedSig4*kfeedback)	;WRITE AUDIO TO THE BEGINNING OF THE DELAY BUFFER, MIX IN FEEDBACK SIGNAL - PROPORTION DEFINED BY gkFB
			
	aGatedMixL	=	(aGatedSig1 + aGatedSig2) * 0.5
	aGatedMixR	=	(aGatedSig3 + aGatedSig4) * 0.5
			xout	aGatedMixL, aGatedMixR
endop


opcode	pitchshifter2, aa, aakkkkii	; global feedback signal
	ainL,ainR,kratio,kfeedback,kDelay,kSmooth,imaxdelay,iwfn	xin
	setksmps	1

	kPortTime	linseg	0,0.001,1
	;if kSmooth>0 then					; portamento smoothing
	 kratio		portk	kratio, kPortTime*kSmooth	
	 kDelay		portk	kDelay, kPortTime*kSmooth	
	;endif

	aDelay		interp	kDelay

	arate		=	(kratio-1)/kDelay		;SUBTRACT 1/1 SPEED
	aphase1		phasor	-arate				;MOVING PHASE 1-0
	aphase2		phasor	-arate, .5			;MOVING PHASE 1-0 - PHASE OFFSET BY 180 DEGREES (.5 RADIANS)
	
	agate1		tablei	aphase1, iwfn, 1, 0, 1		;
	agate2		tablei	aphase2, iwfn, 1, 0, 1		;

	aGatedMixL,aGatedMixR	init	0
	
	abuf1		delayr	imaxdelay			;DECLARE DELAY BUFFER
	adelsig1	deltap3	aphase1 * aDelay		;VARIABLE TAP
	aGatedSig1	=	adelsig1 * agate1
			delayw	ainL + (aGatedMixL*kfeedback)	;WRITE AUDIO TO THE BEGINNING OF THE DELAY BUFFER, MIX IN FEEDBACK SIGNAL - PROPORTION DEFINED BY gkFB
	
	abuf2		delayr	imaxdelay			;DECLARE DELAY BUFFER
	adelsig2	deltap3	aphase2 * aDelay		;VARIABLE TAP
	aGatedSig2	=	adelsig2 * agate2
			delayw	ainL + (aGatedMixL*kfeedback)	;WRITE AUDIO TO THE BEGINNING OF THE DELAY BUFFER, MIX IN FEEDBACK SIGNAL - PROPORTION DEFINED BY gkFB

	abuf3		delayr	imaxdelay			;DECLARE DELAY BUFFER
	adelsig3	deltap3	aphase1 * aDelay		;VARIABLE TAP
	aGatedSig3	=	adelsig3 * agate1
			delayw	ainR + (aGatedMixR*kfeedback)		;WRITE AUDIO TO THE BEGINNING OF THE DELAY BUFFER, MIX IN FEEDBACK SIGNAL - PROPORTION DEFINED BY gkFB
	
	abuf4		delayr	imaxdelay			;DECLARE DELAY BUFFER
	adelsig4	deltap3	aphase2 * aDelay		;VARIABLE TAP
	aGatedSig4	=	adelsig4 * agate2
			delayw	ainR + (aGatedMixR*kfeedback)		;WRITE AUDIO TO THE BEGINNING OF THE DELAY BUFFER, MIX IN FEEDBACK SIGNAL - PROPORTION DEFINED BY gkFB
			
	aGatedMixL	=	(aGatedSig1 + aGatedSig2) * 0.5
	aGatedMixR	=	(aGatedSig3 + aGatedSig4) * 0.5
	
			xout	aGatedMixL, aGatedMixR
endop


; ITERATIVE PITCHSHIFTER
opcode	pitchshifter3, aa, aakikkiip	; global feedback signal
	ainL,ainR,kratio,iNIter,kDelay,kSmooth,imaxdelay,iwfn,iCount	xin
	setksmps	1

	kPortTime	linseg	0,0.001,1
	;if kSmooth>0 then					; portamento smoothing
	 kratioL	portk	kratio^iCount, kPortTime*kSmooth	
	 kDelay		portk	kDelay, kPortTime*kSmooth	
	;endif

	aDelay		interp	kDelay

	arate		=	(kratioL-1)/kDelay		;SUBTRACT 1/1 SPEED
	aphase1		phasor	-arate				;MOVING PHASE 1-0
	aphase2		phasor	-arate, .5			;MOVING PHASE 1-0 - PHASE OFFSET BY 180 DEGREES (.5 RADIANS)
	
	agate1		tablei	aphase1, iwfn, 1, 0, 1		;
	agate2		tablei	aphase2, iwfn, 1, 0, 1		;

	aGatedMixL,aGatedMixR	init	0
	
	abuf1		delayr	imaxdelay			;DECLARE DELAY BUFFER
	adelsig1	deltap3	aphase1 * aDelay		;VARIABLE TAP
	aGatedSig1	=	adelsig1 * agate1
			delayw	ainL				;WRITE AUDIO TO THE BEGINNING OF THE DELAY BUFFER, MIX IN FEEDBACK SIGNAL - PROPORTION DEFINED BY gkFB
	
	abuf2		delayr	imaxdelay			;DECLARE DELAY BUFFER
	adelsig2	deltap3	aphase2 * aDelay		;VARIABLE TAP
	aGatedSig2	=	adelsig2 * agate2
			delayw	ainL				;WRITE AUDIO TO THE BEGINNING OF THE DELAY BUFFER, MIX IN FEEDBACK SIGNAL - PROPORTION DEFINED BY gkFB

	abuf3		delayr	imaxdelay			;DECLARE DELAY BUFFER
	adelsig3	deltap3	aphase1 * aDelay		;VARIABLE TAP
	aGatedSig3	=	adelsig3 * agate1
			delayw	ainR				;WRITE AUDIO TO THE BEGINNING OF THE DELAY BUFFER, MIX IN FEEDBACK SIGNAL - PROPORTION DEFINED BY gkFB
	
	abuf4		delayr	imaxdelay			;DECLARE DELAY BUFFER
	adelsig4	deltap3	aphase2 * aDelay		;VARIABLE TAP
	aGatedSig4	=	adelsig4 * agate2
			delayw	ainR				;WRITE AUDIO TO THE BEGINNING OF THE DELAY BUFFER, MIX IN FEEDBACK SIGNAL - PROPORTION DEFINED BY gkFB
			
	aGatedMixL	=	(aGatedSig1 + aGatedSig2) * 0.5
	aGatedMixR	=	(aGatedSig3 + aGatedSig4) * 0.5
	
	aMixL,aMixR	init	0
	if iCount<iNIter then
	 aMixL,aMixR	pitchshifter3	ainL,ainR,kratio,iNIter,kDelay,kSmooth,imaxdelay,iwfn,iCount+1
	endif
	
			xout	aGatedMixL + aMixL, aGatedMixR + aMixR
endop


; HARMONIC ITERATIVE
opcode	pitchshifter4, aa, aakikkiip	; global feedback signal
	ainL,ainR,kratio,iNIter,kDelay,kSmooth,imaxdelay,iwfn,iCount	xin
	setksmps	1

	kratio	=	kratio * (iCount+1)/iCount
	iratio	=	i(kratio) * (iCount+1)/iCount

	kPortTime	linseg	0,0.001,1
	if kSmooth>0 then					; portamento smoothing
	 kratio		portk	kratio, kPortTime*kSmooth	
	 kDelay		portk	kDelay, kPortTime*kSmooth	
	endif

	aDelay		interp	kDelay
	;koctfract	=	kSemitones/12			;TRANSPOSITION AS FRACTION OF AN OCTAVE
	;kratio		=	cpsoct(8+koctfract)/cpsoct(8)	;RATIO OF NEW FREQ TO A DECLARED BASE FREQUENCY (MIDDLE C)

	arate		=	(kratio-1)/kDelay		;SUBTRACT 1/1 SPEED
	aphase1		phasor	-arate				;MOVING PHASE 1-0
	aphase2		phasor	-arate, .5			;MOVING PHASE 1-0 - PHASE OFFSET BY 180 DEGREES (.5 RADIANS)
	
	agate1		tablei	aphase1, iwfn, 1, 0, 1		;
	agate2		tablei	aphase2, iwfn, 1, 0, 1		;

	aGatedMixL,aGatedMixR	init	0
	
	abuf1		delayr	imaxdelay			;DECLARE DELAY BUFFER
	adelsig1	deltap3	aphase1 * aDelay		;VARIABLE TAP
	aGatedSig1	=	adelsig1 * agate1
			delayw	ainL				;WRITE AUDIO TO THE BEGINNING OF THE DELAY BUFFER, MIX IN FEEDBACK SIGNAL - PROPORTION DEFINED BY gkFB
	
	abuf2		delayr	imaxdelay			;DECLARE DELAY BUFFER
	adelsig2	deltap3	aphase2 * aDelay		;VARIABLE TAP
	aGatedSig2	=	adelsig2 * agate2
			delayw	ainL				;WRITE AUDIO TO THE BEGINNING OF THE DELAY BUFFER, MIX IN FEEDBACK SIGNAL - PROPORTION DEFINED BY gkFB

	abuf3		delayr	imaxdelay			;DECLARE DELAY BUFFER
	adelsig3	deltap3	aphase1 * aDelay		;VARIABLE TAP
	aGatedSig3	=	adelsig3 * agate1
			delayw	ainR				;WRITE AUDIO TO THE BEGINNING OF THE DELAY BUFFER, MIX IN FEEDBACK SIGNAL - PROPORTION DEFINED BY gkFB
	
	abuf4		delayr	imaxdelay			;DECLARE DELAY BUFFER
	adelsig4	deltap3	aphase2 * aDelay		;VARIABLE TAP
	aGatedSig4	=	adelsig4 * agate2
			delayw	ainR				;WRITE AUDIO TO THE BEGINNING OF THE DELAY BUFFER, MIX IN FEEDBACK SIGNAL - PROPORTION DEFINED BY gkFB
			
	aGatedMixL	=	(aGatedSig1 + aGatedSig2) * 0.5
	aGatedMixR	=	(aGatedSig3 + aGatedSig4) * 0.5
	
	aMixL,aMixR	init	0
	if iCount<iNIter then
	 aMixL,aMixR	pitchshifter4	ainL,ainR,kratio,iNIter,kDelay,kSmooth,imaxdelay,iwfn,iCount+1
	endif
	
			xout	aGatedMixL + aMixL, aGatedMixR + aMixR
endop


instr	1
	aInL,aInR	ins
	;aInL		vco2	0.2,100,4,0.5
	;aInR		=	aInL
	
	kFeedback	chnget	"Feedback"
	kNIter		chnget	"NIter"
	kNIter		init	1
	kDelay		chnget	"Delay"
	kSmooth		chnget	"Smooth"
	kMode		chnget	"Mode"
	kIntervalMode	chnget	"IntervalMode"
	
	if changed(kIntervalMode)==1 then				; semitones mode
	 if kIntervalMode==1 then
	 	chnset	"visible(0)","RatioPlant_ident"
	 	chnset	"visible(1)","SemitonesPlant_ident"
	 else								; ratio mode
	 	chnset	"visible(1)","RatioPlant_ident"
	 	chnset	"visible(0)","SemitonesPlant_ident"
	 endif
	endif
	
	if kIntervalMode==1 then
		kSemitones	chnget	"Semitones"
		kSnap		chnget	"Snap"
		if kSnap==1 then
		 if frac(kSemitones)!=0 then
		  kSemitones	=	round(kSemitones)
		  		chnset	kSemitones,"Semitones"
		 endif
		endif
	 	kRatio	=	semitone(kSemitones)	
	else
		kNumerator	chnget	"Numerator"
		kDenominator	chnget	"Denominator"
		kRatio		=	kNumerator/kDenominator
		kSemitones	=	log2(kRatio)*12	
	endif
	
	if changed(kMode)==1 then
	 if kMode==1 then
	  chnset	"visible(1)","Feedback_ident"
	  chnset	"visible(1)","FBLabel_ident"
	  chnset	"visible(1)","FBMethod_ident"
	  chnset	"visible(0)","NIter_ident"
	 elseif kMode==2 then
	  chnset	"visible(0)","Feedback_ident"
	  chnset	"visible(0)","FBLabel_ident"
	  chnset	"visible(0)","FBMethod_ident"
	  chnset	"visible(1)","NIter_ident"
	 else
	  chnset	"visible(0)","Feedback_ident"
	  chnset	"visible(0)","FBLabel_ident"
	  chnset	"visible(0)","FBMethod_ident"
	  chnset	"visible(1)","NIter_ident"
	 endif
	endif
	
	
	iMaxDelay	=	4
	kWindow		chnget	"Window"
	kWindow		init	1
	if changed(kWindow)==1 then
	 reinit UPDATE
	endif
	UPDATE:
	iWfn	=	giHanning + i(kWindow) - 1

	if kMode==1 then
	 kFBMethod	chnget	"FBMethod"
	 kFBMethod	init	1
	 if kFBMethod==1 then
	  aPS_L,aPS_R	pitchshifter	aInL,aInR,kRatio,kFeedback,kDelay,kSmooth,iMaxDelay,iWfn
	 elseif kFBMethod==2 then
	  aPS_L,aPS_R	pitchshifter2	aInL,aInR,kRatio,kFeedback,kDelay,kSmooth,iMaxDelay,iWfn	
	 endif
	elseif kMode==2 then
	 if changed(kNIter)==1 then
	  reinit UPDATE3
	 endif
	 UPDATE3:
	 aPS_L,aPS_R	pitchshifter3	aInL,aInR,kRatio,i(kNIter),kDelay,kSmooth,iMaxDelay,iWfn	
	elseif kMode==3 then		; HARMONIC ITERATIVE
	 if changed(kNIter)==1 then
	  reinit UPDATE4
	 endif
	 ;aFBL,aFBR	init	0
	 UPDATE4:
	 ;aPS_L,aPS_R	pitchshifter4	aInL+aFBL,aInR+aFBL,semitone(kSemitones-12),i(kNIter),kDelay,kSmooth,iMaxDelay,iWfn	
	 aPS_L,aPS_R	pitchshifter4	aInL,aInR,semitone(kSemitones-12),i(kNIter),kDelay,kSmooth,iMaxDelay,iWfn	
	 ;aFBL	=	aPS_L*kFeedback
	 ;aFBR	=	aPS_R*kFeedback
	endif

	rireturn
	kMix		chnget	"Mix"
	aMixL		ntrpol	aInL,aPS_L,kMix
	aMixR		ntrpol	aInR,aPS_R,kMix
	kLevel		chnget	"Level"
			outs	aMixL*kLevel, aMixR*kLevel
endin

</CsInstruments>

<CsScore>
i 1 0 [60*60*24*7]
</CsScore>

</CsoundSynthesizer>; pvsAdsyn.csd
; Written by Iain McCurdy, 2012.

; Encapsulation of the pvsadsyn opcode.
; This opcode takes a streaming phase vocoding analysis and reconstitutes it as an audio signal with user-definable parameters
;  for the number of bins to include, the bin from which to begin resynthesis (bin offset) and the option of skipping bins and not
;  resynthesising them one after another (Bin Incr.)

<Cabbage>
form caption("pvsAdsyn") size(580, 90), pluginid("adsy") style("legacy")
image pos(0, 0), size(580, 90), colour(200,100,50,150), shape("rounded"), outlinecolour("white"), outlinethickness(5) 
rslider bounds(10, 11, 70, 70),  text("Freq.Mod."),  channel("fmod"),      range(0.25, 4, 1),        textcolour("white"), colour(200,100,50,250), trackercolour(tan)
rslider bounds(80, 11, 70, 70),  text("Num.Osc.s"),  channel("noscs"),     range(1, 1024, 256,1,1),  textcolour("white"), colour(200,100,50,250), trackercolour(tan)
rslider bounds(150, 11, 70, 70), text("Bin Offset"), channel("binoffset"), range(0, 256, 1,1,1),     textcolour("white"), colour(200,100,50,250), trackercolour(tan)
rslider bounds(220, 11, 70, 70), text("Bin Incr."),  channel("binincr"),   range(1, 32, 1,1,1),      textcolour("white"), colour(200,100,50,250), trackercolour(tan)
label    bounds(295,20, 60,13), text("FFT Size"), fontcolour("white")
combobox bounds(295,35, 60,18), text("64","128","256","512","1024","2048","4096","8192"), channel("att_table"), value(5), fontcolour(255,255,200)
rslider bounds(360, 11, 70, 70), text("Feedback"),   channel("feedback"),  range(0, 0.99, 0),        textcolour("white"), colour(200,100,50,250), trackercolour(tan)
rslider bounds(430, 11, 70, 70), text("Mix"),        channel("mix"),       range(0, 1.00, 1),        textcolour("white"), colour(200,100,50,250), trackercolour(tan)
rslider bounds(500, 11, 70, 70), text("Level"),      channel("lev"),       range(0, 5.00, 0.5, 0.5), textcolour("white"), colour(200,100,50,250), trackercolour(tan)
</Cabbage>

<CsoundSynthesizer>
<CsOptions>
-d -n
</CsOptions>
<CsInstruments>

sr 		= 	44100
ksmps 		= 	32
nchnls 		= 	2
0dbfs		=	1	;MAXIMUM AMPLITUDE

;Author: Iain McCurdy (2012)
;http://iainmccurdy.org/csound.html

/* FFT attribute tables */
giFFTattributes1	ftgen	0, 0, 4, -2,   64,  32,   64, 1
giFFTattributes2	ftgen	0, 0, 4, -2,  128,  64,  128, 1
giFFTattributes3	ftgen	0, 0, 4, -2,  256, 128,  256, 1
giFFTattributes4	ftgen	0, 0, 4, -2,  512, 128,  512, 1
giFFTattributes5	ftgen	0, 0, 4, -2, 1024, 256, 1024, 1
giFFTattributes6	ftgen	0, 0, 4, -2, 2048, 512, 2048, 1
giFFTattributes7	ftgen	0, 0, 4, -2, 4096,1024, 4096, 1
giFFTattributes8	ftgen	0, 0, 4, -2, 8192,2048, 8192, 1

opcode	pvsadsyn_module,a,akkkkkkiiii
	ain,kfmod,knoscs,kbinoffset,kbinincr,kfeedback,kmix,iFFTsize,ioverlap,iwinsize,iwintype	xin
	aresyn	init	0
	f_anal  	pvsanal	ain+(aresyn*kfeedback), iFFTsize, ioverlap, iwinsize, iwintype		;ANALYSE AUDIO INPUT SIGNAL AND OUTPUT AN FSIG
	knossc	init	256
	ktrig		changed	knoscs,kbinoffset,kbinincr
	if ktrig==1 then
	 reinit	UPDATE
	endif
	UPDATE:
	inoscs	init	i(knoscs)	
	ibinoffset	init	i(kbinoffset)
	ibinincr	init	i(kbinincr)
	inoscs	limit	inoscs, 1, (((iFFTsize*0.5)+1)-ibinoffset)/ibinincr
	aresyn 		pvsadsyn f_anal, inoscs, kfmod , i(kbinoffset), i(kbinincr)	;RESYNTHESIZE FROM THE fsig USING pvsadsyn
	rireturn
	amix		ntrpol		ain, aresyn, kmix					;CREATE DRY/WET MIX
			xout		amix	
endop

instr	1
	; audio input
	ainL,ainR	ins
	;ainL,ainR	diskin	"SynthPad.wav",1,0,1	;USE FOR TESTING
	kmix		chnget	"mix"
	kfmod		chnget	"fmod"
	knoscs		chnget	"noscs"
	kbinoffset	chnget	"binoffset"
	kbinincr	chnget	"binincr"
	klev		chnget	"lev"
	kfeedback	chnget	"feedback"
	
	/* SET FFT ATTRIBUTES */
	katt_table	chnget	"att_table"	; FFT atribute table
	katt_table	init	5
	ktrig		changed	katt_table
	if ktrig==1 then
	 reinit update
	endif
	update:
	iFFTsize	table	0, giFFTattributes1 + i(katt_table) - 1
	ioverlap	table	1, giFFTattributes1 + i(katt_table) - 1
	iwinsize	table	2, giFFTattributes1 + i(katt_table) - 1
	iwintype	table	3, giFFTattributes1 + i(katt_table) - 1
	/*-------------------*/

	aoutL		pvsadsyn_module	ainL,kfmod,knoscs,kbinoffset,kbinincr,kfeedback,kmix,iFFTsize,ioverlap,iwinsize,iwintype
	aoutR		pvsadsyn_module	ainR,kfmod,knoscs,kbinoffset,kbinincr,kfeedback,kmix,iFFTsize,ioverlap,iwinsize,iwintype
			outs	aoutR*klev,aoutR*klev
endin

</CsInstruments>

<CsScore>
i 1 0 [60*60*24*7]
</CsScore>

</CsoundSynthesizer>; pvsBlur.csd
; Written by Iain McCurdy, 2012.

<Cabbage>
form caption("pvsBlur"), size(235,125) colour( 70, 90,100), pluginid("blur") style("legacy")
image             bounds(0, 0,235,125), colour( 70, 90,100), shape("rounded"), outlinecolour("white"), outlinethickness(5) 
label    bounds(15,20, 60,13), text("FFT Size"), fontcolour("white")
combobox bounds(15,35, 60,20), text("128","256","512","1024","2048","4096","8192"), channel("att_table"), value(4), fontcolour(220,220,255)
rslider bounds( 80, 10, 70, 70), text("Mix"),       channel("mix"),       range(0, 1.00, 1),                textcolour("white"), colour( 30, 50, 60),trackercolour("white")
rslider bounds(150, 10, 70, 70), text("Level"),     channel("lev"),       range(0, 1.00, 0.5, 0.5),         textcolour("white"), colour( 30, 50, 60),trackercolour("white")
hslider bounds( 10, 70,210, 40), channel("blurtime"),  range(0, 2.00, 0.0, 0.5, 0.0001),                    textcolour("white"), colour( 10, 30, 40),trackercolour("white")
label   bounds( 85,103, 60, 11), text("Blur Time"), fontcolour("white")
</Cabbage>
<CsoundSynthesizer>
<CsOptions>
-d -n
</CsOptions>
<CsInstruments>
sr 		= 	44100
ksmps 		= 	64
nchnls 		= 	2
0dbfs		=	1	;MAXIMUM AMPLITUDE

; Author: Iain McCurdy (2012)
; http://iainmccurdy.org/csound.html

/* FFT attribute tables */
giFFTattributes1	ftgen	0, 0, 4, -2,  128,  64,  128, 1
giFFTattributes2	ftgen	0, 0, 4, -2,  256, 128,  256, 1
giFFTattributes3	ftgen	0, 0, 4, -2,  512, 128,  512, 1
giFFTattributes4	ftgen	0, 0, 4, -2, 1024, 256, 1024, 1
giFFTattributes5	ftgen	0, 0, 4, -2, 2048, 512, 2048, 1
giFFTattributes6	ftgen	0, 0, 4, -2, 4096,1024, 4096, 1
giFFTattributes7	ftgen	0, 0, 4, -2, 8192,2048, 8192, 1

opcode	pvsblur_module,a,akkkiiii
	ain,kblurtime,kmix,klev,iFFTsize,ioverlap,iwinsize,iwintype	xin
	f_anal  	pvsanal	ain, iFFTsize, ioverlap, iwinsize, iwintype		;ANALYSE AUDIO INPUT SIGNAL AND OUTPUT AN FSIG
	f_blur		pvsblur	f_anal, kblurtime, 2					;BLUR AMPLITUDE AND FREQUENCY VALUES OF AN F-SIGNAL
	aout		pvsynth f_blur                      				;RESYNTHESIZE THE f-SIGNAL AS AN AUDIO SIGNAL
	amix		ntrpol		ain, aout, kmix					;CREATE DRY/WET MIX
			xout		amix*klev	
endop

instr	1
	kblurtime	chnget	"blurtime"
	kmix		chnget	"mix"
	klev		chnget	"lev"

	ainL,ainR	ins
	;ainL,ainR	diskin	"808loop.wav",1,0,1	;USE FOR TESTING

	/* SET FFT ATTRIBUTES */
	katt_table	chnget	"att_table"	; FFT atribute table
	katt_table	init	5
	ktrig		changed	katt_table
	if ktrig==1 then
	 reinit update
	endif
	update:
	iFFTsize	table	0, giFFTattributes1 + i(katt_table) - 1
	ioverlap	table	1, giFFTattributes1 + i(katt_table) - 1
	iwinsize	table	2, giFFTattributes1 + i(katt_table) - 1
	iwintype	table	3, giFFTattributes1 + i(katt_table) - 1
	/*-------------------*/
	
	kporttime	linseg	0,0.001,0.02
	kblurtime	portk	kblurtime,kporttime
	aoutL		pvsblur_module	ainL,kblurtime,kmix,klev,iFFTsize,ioverlap,iwinsize,iwintype
	aoutR		pvsblur_module	ainR,kblurtime,kmix,klev,iFFTsize,ioverlap,iwinsize,iwintype
				outs	aoutR,aoutR
endin

</CsInstruments>

<CsScore>
i 1 0 [60*60*24*7]
</CsScore>

</CsoundSynthesizer>; pvsBuffer.csd
; Writes audio into a circular FFT buffer.
; Read speed can be modified as can the frequencies.
; Take Care! Feedback values above 1 are intended to be used only when transposition is not unison. 

<Cabbage>
form caption("pvsBuffer") size(580,135), pluginid("buff") style("legacy")
image             bounds(0, 0, 580, 135), colour(100, 80, 80,125), shape("rounded"), outlinecolour("white"), outlinethickness(4) 

label             bounds(10, 97, 48,10), text("RECORD"), align(right), fontcolour(white)
label             bounds(10,112, 48,10), text("PLAY"),   align(right), fontcolour(white)
image             bounds( 70,101, 490, 3), colour(255, 50, 50), shape("sharp"), identchannel("RecIndic")
image             bounds( 70,116, 490, 3), colour( 55,250, 50), shape("sharp"), identchannel("PlayIndic")

rslider bounds(10, 11, 70, 70),  text("Speed"),     channel("speed"),     range(0, 4, 1, 0.5, 0.0001), textcolour("white"),    colour(100, 80, 80,  5) trackercolour(silver)
rslider bounds(80, 11, 70, 70),  text("Buf. Size"), channel("buflen"),    range(0.10,20.00, 5, 0.5),   textcolour("white"),    colour(100, 80, 80,  5) trackercolour(silver)
rslider bounds(150, 11, 70, 70), text("Semitones"), channel("semis"),     range(-24, 24, 0, 1, 1),     textcolour("white"),    colour(100, 80, 80,  5) trackercolour(silver)
rslider bounds(220, 11, 70, 70), text("Cents"),     channel("cents"),     range(-100, 100, 0, 1, 1),   textcolour("white"),    colour(100, 80, 80,  5) trackercolour(silver)
rslider bounds(290, 11, 70, 70), text("Feedback"),  channel("FB"),        range(0, 1.50, 0),           textcolour("white"),    colour(100, 80, 80,  5) trackercolour(silver)
label    bounds(360,20, 60,13), text("FFT Size"), fontcolour("white")
combobox bounds(360,35, 60,20), text("64","128","256","512","1024","2048","4096","8192"), channel("att_table"), value(5), fontcolour(255,255,190)

rslider bounds(430, 11, 70, 70), text("Mix"),       channel("mix"),       range(0, 1.00, 1),           textcolour("white"),    colour(100, 80, 80,  5) trackercolour(silver)
rslider bounds(500, 11, 70, 70), text("Level"),     channel("lev"),       range(0, 1.00, 0.5),         textcolour("white"),    colour(100, 80, 80,  5) trackercolour(silver)
</Cabbage>
<CsoundSynthesizer>
<CsOptions>
-d -n
</CsOptions>
<CsInstruments>

sr 		= 	44100
ksmps 		= 	32
nchnls 		= 	2
0dbfs		=	1	;MAXIMUM AMPLITUDE

;Author: Iain McCurdy (2012)
;http://iainmccurdy.org/csound.html

/* FFT attribute tables */
giFFTattributes1	ftgen	0, 0, 4, -2,   64,  32,   64, 1
giFFTattributes2	ftgen	0, 0, 4, -2,  128,  64,  128, 1
giFFTattributes3	ftgen	0, 0, 4, -2,  256, 128,  256, 1
giFFTattributes4	ftgen	0, 0, 4, -2,  512, 128,  512, 1
giFFTattributes5	ftgen	0, 0, 4, -2, 1024, 256, 1024, 1
giFFTattributes6	ftgen	0, 0, 4, -2, 2048, 512, 2048, 1
giFFTattributes7	ftgen	0, 0, 4, -2, 4096,1024, 4096, 1
giFFTattributes8	ftgen	0, 0, 4, -2, 8192,2048, 8192, 1

opcode	pvsbuffer_module,akk,akkkkkkiiii
	ain,kspeed,kbuflen,kscale,kfeedback,kmix,klev,iFFTsize,ioverlap,iwinsize,iwintype	xin
	kPhOffset	=	0
	ktrig		changed		kbuflen
	ibuflen	init	1
	kspeed	init	1
	kscale	init	1
	if ktrig==1 then
	 reinit	UPDATE
	endif
	UPDATE:
	ibuflen		=	i(kbuflen)
	iphasor		ftgen		0, 0, 65536, 7, 0, 65536, 1			;WAVE SHAPE FOR A MOVING PHASE POINTER
	aread 		osciliktp 	kspeed/ibuflen, iphasor, kPhOffset		;CREATE MOVING POINTER TO READ FROM BUFFER
	kread		downsamp	aread
	kread		=		kread * ibuflen
	aFB		init		0
	f_anal 		pvsanal		ain+aFB, iFFTsize, ioverlap, iwinsize, iwintype	;ANALYSE THE AUDIO SIGNAL THAT WAS CREATED IN INSTRUMENT 1. OUTPUT AN F-SIGNAL.
	ibuffer,ktime  	pvsbuffer   	f_anal, ibuflen					;BUFFER FSIG	
	rireturn
	khandle		init 		ibuffer						;INITIALISE HANDLE TO BUFFER
	f_buf  		pvsbufread  	kread , khandle			;READ BUFFER
	f_scale		pvscale 	f_buf, kscale					;RESCALE FREQUENCIES
	aresyn 		pvsynth  	f_scale			                   	;RESYNTHESIZE THE f-SIGNAL AS AN AUDIO SIGNAL	
	aFB		dcblock2	aresyn * kfeedback				;CREATE FEEDBACK SIGNAL FOR NEXT PASS AND BLOCK DC OFFSET ACCUMULATION
	amix		ntrpol		ain, aresyn, kmix				;CREATE DRY/WET MIX
			xout		amix*klev,ktime/ibuflen,kread/ibuflen
endop

instr	1
	ainL,ainR	ins
	;ainL,ainR	diskin	"SynthPad.wav",1,0,1	;USE FOR TESTING
	kspeed		chnget	"speed"
	kbuflen		chnget	"buflen"
	ksemis		chnget	"semis"
	kcents		chnget	"cents"
	ksemis		init	0
	kcents		init	0
	kscale		=	semitone(ksemis)*cent(kcents)
	kscale		init	1
	kbuflen		init	1
	kspeed		init	1
	kmix		chnget	"mix"
	kfeedback	chnget	"FB"
	klev		chnget	"lev"
	kmix		init	1
	kfeedback	init	0
	klev		init	0.5

	/* SET FFT ATTRIBUTES */
	katt_table	chnget	"att_table"	; FFT atribute table
	katt_table	init	5
	ktrig		changed	katt_table
	if ktrig==1 then
	 reinit update
	endif
	update:
	iFFTsize	table	0, giFFTattributes1 + i(katt_table) - 1
	ioverlap	table	1, giFFTattributes1 + i(katt_table) - 1
	iwinsize	table	2, giFFTattributes1 + i(katt_table) - 1
	iwintype	table	3, giFFTattributes1 + i(katt_table) - 1
	/*-------------------*/
	
	aoutL,kwrite,kread		pvsbuffer_module	ainL,kspeed,kbuflen,kscale,kfeedback,kmix,klev,iFFTsize,ioverlap,iwinsize,iwintype
	aoutR,k1,k1			pvsbuffer_module	ainR,kspeed,kbuflen,kscale,kfeedback,kmix,klev,iFFTsize,ioverlap,iwinsize,iwintype
			outs	aoutL,aoutR

	ktrig	metro	kr/(ksmps*2)
	if ktrig==1 then
	 Smsg	sprintfk	"size(%d,3)",kwrite*490
	 chnset	Smsg,"RecIndic" 
	 Smsg	sprintfk	"size(%d,3)",kread*490
	 chnset	Smsg,"PlayIndic" 
	endif
endin

</CsInstruments>
<CsScore>
i 1 0.1 [60*60*24*7]
</CsScore>
</CsoundSynthesizer>; pvScale.csd
; Written by Iain McCurdy, 2012. Updated 2015.

; Pitch scaling interval can be defined either in semitones and cents or as a ratio (fraction).

; Three methods of feedback are possible:
;  1: "F Sig" Direct feeding back of the fft signal
;  2: "Audio" feeding back of the audio signal, therefore each time the signal will be resynthesized anf then re-analysed. Additional delay will also be induced when feeding back.
;  3: "Iter. A number of iterations are defined, creating a stack of pitch shifted signals. This method will be CPU costly if "Iter." is high. Some CPU can be saved by reducing "FFT Size"

; FFT Size	-	Larger values will retain spectral accuracy at the expense of time accuracy
;			Smaller values will improve time accuracy at the expense of spectral accuracy.
;			In general smaller values are preferrable with rhythmic material and larger values are preferrable with melodic material. 

; Port.		-	Portamento time applied to changed made to the pitch scaling interval

<Cabbage>
form caption("pvscale Pitch Shifter") size(690,  90), pluginid("scal") style("legacy")
image                         bounds(0, 0, 690, 90), colour("SlateGrey"), outlinecolour("silver"), outlinethickness(4)

image bounds(  6, 23,678, 30), colour("silver"), shape("ellipse"), outlinethickness(3)

label    bounds( 10, 24, 75, 12), text("Interval"), fontcolour("black")
combobox bounds( 10, 37, 75, 20), channel("IntervalMode"), text("Semitone","Ratio"), value(1)

image   bounds( 90, 10,290, 80), colour(0,0,0,0), plant("Semitone"), identchannel("semitone_ident") {
image   bounds(  8,  1, 54, 53), colour(30,30,30), shape("ellipse"), outlinethickness(0)
rslider bounds(  0,  0, 70, 70),  text("Semitones"), channel("semis"), range(-24, 24, 7, 1, 1),   textcolour("black"),colour("DarkSlateGrey"), trackercolour("LightBlue")
image   bounds( 78,  1, 54, 53), colour(30,30,30), shape("ellipse"), outlinethickness(0)
rslider bounds( 70,  0, 70, 70),  text("Cents"),     channel("cents"), range(-100, 100, 0, 1, 1), textcolour("black"),colour("DarkSlateGrey"), trackercolour("LightBlue")
}

image     bounds(130, 20, 35, 58), plant("Ratio"), colour(0,0,0,0), visible(0), identchannel("ratio_ident") {
nslider bounds(  5,  5, 25, 18), channel("Numerator"),        range(1,99,3,1,1)
image     bounds(  0, 26, 35,  1), shape("sharp"), colour("black")
nslider bounds(  5, 30, 25, 18), channel("Denominator"),      range(1,99,2,1,1)
}

image   bounds(238, 11, 54, 53), colour(30,30,30), shape("ellipse"), outlinethickness(0)	; circles around rsliders
rslider bounds(230, 10, 70, 70), text("Feedback"),  channel("FB"), range(0.00, 0.99, 0),         textcolour("black"),colour("DarkSlateGrey"), trackercolour("LightBlue"), identchannel("feedback_ident")
rslider bounds(230, 10, 70, 70), text("Iter."),     channel("Iter"), range(1, 10, 1,1,1),        textcolour("black"),colour("DarkSlateGrey"), trackercolour("LightBlue"), identchannel("iter_ident"), visible(0)

label    bounds(310,  8, 70, 12), text("F.back Mode"), FontColour("black")
combobox bounds(310, 20,  70,20), channel("FB_mode"), value(1), text("F Sig.", "Audio", "Iter.")

label    bounds(310, 45,  70, 12), text("Formants"), FontColour("black")
combobox bounds(310, 57,  70, 20), channel("formants"), value(1), text("Ignore", "Keep 1", "Keep 2")

label    bounds(400, 24, 60, 12), text("FFT Size"), fontcolour("black")
combobox bounds(400, 37, 60, 20), channel("FFTsize"), text("64","128","256","512","1024","2048","4096","8192"), value(6)

image   bounds(478, 11, 54, 53), colour(30,30,30), shape("ellipse"), outlinethickness(0)
rslider bounds(470, 10, 70, 70), text("Port."),     channel("port"),      range(0,30.00, 0.05,0.5,0.01), textcolour("black"),colour("DarkSlateGrey"), trackercolour("LightBlue")
image   bounds(548, 11, 54, 53), colour(30,30,30), shape("ellipse"), outlinethickness(0)
rslider bounds(540, 10, 70, 70), text("Mix"),       channel("mix"),       range(0, 1.00, 0.5),      textcolour("black"),colour("DarkSlateGrey"), trackercolour("LightBlue")
image   bounds(618, 11, 54, 53), colour(30,30,30), shape("ellipse"), outlinethickness(0)
rslider bounds(610, 10, 70, 70), text("Level"),     channel("lev"),       range(0, 1.00, 0.5, 0.5), textcolour("black"),colour("DarkSlateGrey"), trackercolour("LightBlue")
</Cabbage>

<CsoundSynthesizer>
<CsOptions>
-d -n
</CsOptions>
<CsInstruments>

sr 		= 	44100
ksmps 		= 	32
nchnls 		= 	2
0dbfs		=	1	;MAXIMUM AMPLITUDE

;Iain McCurdy
;http://iainmccurdy.org/csound.html
;Pitch shifting effect using pvs scale opcode.

/* FFT attribute tables */
giFFTsizes	ftgen	0, 0, 8, -2, 64, 128, 256, 512, 1024, 2048, 4096, 8192

opcode	pvscale_module,a,akkkkkki
	ain,kscale,kformants,kfeedback,kFB_mode,kmix,klev,iFFTsize	xin
	if(kFB_mode==0) then
	 f_FB		pvsinit iFFTsize, iFFTsize/4, iFFTsize, 1, 0			;INITIALISE FEEDBACK FSIG
	 f_anal  	pvsanal	ain, iFFTsize, iFFTsize/4, iFFTsize, 1			;ANALYSE AUDIO INPUT SIGNAL AND OUTPUT AN FSIG
	 f_mix		pvsmix	f_anal, f_FB						;MIX AUDIO INPUT WITH FEEDBACK SIGNAL
	 f_scale		pvscale f_mix, kscale					;RESCALE FREQUENCIES
	 f_FB		pvsgain f_scale, kfeedback 					;CREATE FEEDBACK F-SIGNAL FOR NEXT PASS
	 aout		pvsynth f_scale                      				;RESYNTHESIZE THE f-SIGNAL AS AN AUDIO SIGNAL
	else
	 aFB		init	0
	 f_anal  	pvsanal	ain+aFB, iFFTsize, iFFTsize/4, iFFTsize, 1		;ANALYSE AUDIO INPUT SIGNAL AND OUTPUT AN FSIG
	 f_scale		pvscale f_anal, kscale, kformants-1			;RESCALE FREQUENCIES
	 aout		pvsynth f_scale                      				;RESYNTHESIZE THE f-SIGNAL AS AN AUDIO SIGNAL
	 aFB		=	aout*kfeedback
	endif	
	amix		ntrpol		ain, aout, kmix					;CREATE DRY/WET MIX
			xout		amix*klev	
endop

opcode	pvscale_module_iter,a,akkikkip
	ain,kscale,kformants,iIter,kFB_mode,kporttime,iFFTsize,iCount	xin
	aout,amix	init	0
	f_anal  	pvsanal	ain, iFFTsize, iFFTsize/4, iFFTsize, 1		;ANALYSE AUDIO INPUT SIGNAL AND OUTPUT AN FSIG
	kscaleL		portk	kscale^iCount, kporttime 
	f_scale		pvscale f_anal, kscaleL, kformants-1		;RESCALE FREQUENCIES
	aout		pvsynth f_scale
	if iCount<iIter then
	 amix	pvscale_module_iter	ain,kscale,kformants,iIter,kFB_mode,kporttime,iFFTsize,iCount+1
	endif	
	                      				;RESYNTHESIZE THE f-SIGNAL AS AN AUDIO SIGNAL
			xout		aout+amix	
endop

instr	1
	/* GUI WIDGETS SHOWING AND HIDING FOR INTERVAL DEFINITION CONTROLS */
	kIntervalMode	chnget	"IntervalMode"
	if changed(kIntervalMode)==1 then
	 if kIntervalMode==1 then
	  	chnset	"visible(1)","semitone_ident"
	  	chnset	"visible(0)","ratio_ident"
	 else
	  	chnset	"visible(0)","semitone_ident"	 
	  	chnset	"visible(1)","ratio_ident"
	 endif
	endif

	/* GUI WIDGETS SHOWING AND HIDING FOR FEEDBACK CONTROLS */
	kFB_mode	chnget	"FB_mode"
	if changed(kFB_mode)==1 then
	 if kFB_mode==3 then
	  	chnset	"visible(0)","feedback_ident"
	  	chnset	"visible(1)","iter_ident"
	 else
	  	chnset	"visible(1)","feedback_ident"
	  	chnset	"visible(0)","iter_ident"
	 endif
	endif
	
	ainL,ainR	ins
	;ainL,ainR	diskin2	"SynthPad.wav",1,0,1
	;ainL	vco2	0.3,300,4,0.5
	ainR	=	ainL
	kmix	chnget	"mix"
	kFB	chnget	"FB"
	kIter	chnget	"Iter"
	kformants	chnget	"formants"
	
	/* SET FFT ATTRIBUTES */
	kFFTsize	chnget	"FFTsize"
	kFFTsize	init	6
	ktrig		changed	kFFTsize,kformants,kIter
	if ktrig==1 then
	 reinit update
	endif
	update:

	/* PORTAMENTO TIME FUNCTION */
	kporttime	linseg	0,0.001,1	; ramp-up function
	kport		chnget	"port"		; widget		
	kporttime	*=	kport		; combine ramp-up and widget value

	iFFTsize	table	i(kFFTsize)-1, giFFTsizes
	/*-------------------*/
	
	kfeedback	chnget	"FB"
	ksemis		chnget	"semis"
	kcents		chnget	"cents"
	kNumerator	chnget	"Numerator"
	kDenominator	chnget	"Denominator"
	
	kmix		chnget	"mix"
	klev		chnget	"lev"
	
	kscale		=	kIntervalMode = 1 ? semitone(ksemis)*cent(kcents) : kNumerator/kDenominator

	if kFB_mode==3 then
	 aoutL		pvscale_module_iter	ainL,kscale,kformants,i(kIter),kFB_mode,kporttime,iFFTsize
	 aoutR		pvscale_module_iter	ainR,kscale,kformants,i(kIter),kFB_mode,kporttime,iFFTsize
	 aoutL		ntrpol	ainL,aoutL,kmix
	 aoutR		ntrpol	ainR,aoutR,kmix
	 aoutL		*=	klev
	 aoutR		*=	klev	 
	else
	 kscale		portk	kscale, kporttime
	 aoutL		pvscale_module	ainL,kscale,kformants,kfeedback,kFB_mode,kmix,klev,iFFTsize
	 aoutR		pvscale_module	ainR,kscale,kformants,kfeedback,kFB_mode,kmix,klev,iFFTsize
	endif
	
			outs	aoutR,aoutR
endin

</CsInstruments>

<CsScore>
i 1 0 [60*60*24*7]
</CsScore>

</CsoundSynthesizer>; pvsCross.csd
; Written by Iain McCurdy, 2012.

; This effect implements cross-synthesis between the left and right inputs.
; By default, the left input is the 'source' signal and the right signal is the 'destination' signal.
;  This arrangement can be swapped with the swap button.

; LEFT----+
;         |
;      (SOURCE)                 +---LEFT
;         |                     |
;         +-CROSS-SYNTHESIS-----+
;         |                     |
;    (DESTINATION)              +---RIGHT
;         |
; RIGHT---+


; Source	-	level of the source signal sent to the output.
; Dest.		-	level of the destination signal sent to the output.
; Cross		-	level of the cross-synthesis signal sent to the output.
; Level		-	global control of the level of all signal that may be present at the output.

<Cabbage>
form caption("pvsCross") size(370, 90), pluginid("crss") style("legacy")
image            bounds(0, 0, 370, 90), colour("Cream"), outlinecolour("silver"), outlinethickness(5)

; filter switches
checkbox bounds( 10, 20, 94, 15), text("Swap Inputs"), channel("swap"), fontcolour(138, 54, 15), colour("lime")

label    bounds(15, 41, 60,13), text("FFT Size"), fontcolour(138, 54, 15)
combobox bounds(15, 55, 60,20), text("64","128","256","512","1024","2048","2048","4096","8192","16384"), channel("att_table"), value(5)

line     bounds(115, 10,165, 3), colour("Grey")

label   bounds(160,  5, 75, 12), text("M  I  X  E  R"), fontcolour(78, 24,  7), colour("Cream")
rslider bounds(100,18, 75, 65), text("Source"),     channel("src_lev"),   range(0, 1.00, 0),   textcolour(138, 54, 15), colour("chocolate"), trackercolour(138, 54, 15)
rslider bounds(160,18, 75, 65), text("Dest."),      channel("dst_lev"),   range(0, 1.00, 0),   textcolour(138, 54, 15), colour("chocolate"), trackercolour(138, 54, 15)
rslider bounds(220,18, 75, 65), text("Cross"),      channel("cross_lev"), range(0, 1.00, 1),   textcolour(138, 54, 15), colour("chocolate"), trackercolour(138, 54, 15)
rslider bounds(285, 8, 75, 75), text("Level"),      channel("lev"),       range(0, 1.00, 0.5), textcolour(138, 54, 15), colour("chocolate"), trackercolour(138, 54, 15)
</Cabbage>
<CsoundSynthesizer>

<CsOptions>
-d -n
</CsOptions>

<CsInstruments>
sr 		= 	44100
ksmps 		= 	64
nchnls 		= 	2
0dbfs		=	1	;MAXIMUM AMPLITUDE

;Iain McCurdy
;http://iainmccurdy.org/csound.html

/* FFT attribute tables */
giFFTattributes1	ftgen	0, 0, 4, -2,   64,  32,   64, 1
giFFTattributes2	ftgen	0, 0, 4, -2,  128,  64,  128, 1
giFFTattributes3	ftgen	0, 0, 4, -2,  256, 128,  256, 1
giFFTattributes4	ftgen	0, 0, 4, -2,  512, 128,  512, 1
giFFTattributes5	ftgen	0, 0, 4, -2, 1024, 128, 1024, 1
giFFTattributes6	ftgen	0, 0, 4, -2, 2048, 256, 2048, 1
giFFTattributes7	ftgen	0, 0, 4, -2, 2048,1024, 2048, 1
giFFTattributes8	ftgen	0, 0, 4, -2, 4096,1024, 4096, 1
giFFTattributes9	ftgen	0, 0, 4, -2, 8192,2048, 8192, 1
giFFTattributes10	ftgen	0, 0, 4, -2,16384,4096,16384, 1

opcode	pvscross_module,a,aakkkiiii
	a_src,a_dst,kampS,kampD,klev,iFFTsize,ioverlap,iwinsize,iwintype	xin
	f_src  	pvsanal	a_src, iFFTsize, ioverlap, iwinsize, iwintype		;ANALYSE AUDIO INPUT SIGNAL AND OUTPUT AN FSIG
	f_dst  	pvsanal	a_dst, iFFTsize, ioverlap, iwinsize, iwintype		;ANALYSE AUDIO INPUT SIGNAL AND OUTPUT AN FSIG
	f_cross 	pvscross f_src, f_dst, kampS, kampD			;IMPLEMENT fsig CROSS SYNTHESIS
	aout		pvsynth f_cross                      				;RESYNTHESIZE THE f-SIGNAL AS AN AUDIO SIGNAL
			xout		aout*klev	
endop



instr	1

	katt_table	chnget	"att_table"	; FFT atribute table
	katt_table	init	5
	ktrig		changed	katt_table
	if ktrig==1 then
	 reinit update
	endif
	update:
	iFFTsize	table	0, giFFTattributes1 + i(katt_table) - 1
	ioverlap	table	1, giFFTattributes1 + i(katt_table) - 1
	iwinsize	table	2, giFFTattributes1 + i(katt_table) - 1
	iwintype	table	3, giFFTattributes1 + i(katt_table) - 1
		
	kfeedback	chnget	"FB"
	kampS		=	0;chnget	"ampS"
	kampD		=	1;chnget	"ampD"
	kporttime	linseg	0,0.001,0.02
	kmix		chnget	"mix"
	klev		chnget	"lev"
	ksrc_lev		chnget	"src_lev"
	kdst_lev		chnget	"dst_lev"
	kcross_lev		chnget	"cross_lev"
	klev		chnget	"lev"
	klisten		chnget	"listen"
	kswap		chnget	"swap"
	
	a1		inch	1
	a2		inch	2

	if kswap==0 then
	 a_src	=	a1
	 a_dst	=	a2
	else
	 a_src	=	a2
	 a_dst	=	a1
	endif
	
	aoutL		pvscross_module	a_src,a_dst,kampS,kampD,klev,iFFTsize,ioverlap,iwinsize,iwintype
	aoutR		pvscross_module	a_src,a_dst,kampS,kampD,klev,iFFTsize,ioverlap,iwinsize,iwintype

	aMixL	=	(aoutL*kcross_lev)+(a_src*ksrc_lev)+(a_dst*kdst_lev)
	aMixR	=	(aoutR*kcross_lev)+(a_src*ksrc_lev)+(a_dst*kdst_lev)

		outs	aMixL,aMixR
endin

</CsInstruments>

<CsScore>
i 1 0 [60*60*24*7]
</CsScore>

</CsoundSynthesizer>; pvsFreeze.csd
; Freeze either amplitude stream or frequency stream (or both) of a streaming FFT analysis
; Changing FFT size can modify the sound quality of the frozen sound

; 'Auto' can be used to automatically trigger a new freeze frame (both amplitude and frequency) if the amplitude of the sound crosses a threshold
; 'Delay' specifies the time delay at which the sound will actually be frozen after the threshold triggering. This can be employed to capture the sustain portion of a sound (and not the attack).
; 'Threshold' specifies the threshold level at which triggering will occur. In a noisy environment, raise 'Threshold'

<Cabbage>
form caption("pvsfreeze"), size(660,100) colour(  0,160,80), pluginid("frez") style("legacy")

image            bounds(  0,  0,270, 80), colour(  0,160,80), shape("rounded"), outlinecolour("white"), outlinethickness(4), plant("Freeze") {
checkbox bounds( 15, 10, 180, 25), channel("freezb"), text("Freeze Both"), fontcolour("white"), shape("ellipse"), colour("red")
checkbox bounds( 20, 50, 180, 15), channel("lock"), text("Lock Phases"), fontcolour("white"), shape("ellipse"), colour("LightBlue")
checkbox bounds(120, 10, 180, 25), channel("freeza"), text("Freeze Amplitudes"), fontcolour("white"), shape("ellipse"), colour("yellow")
checkbox bounds(120, 45, 180, 25), channel("freezf"), text("Freeze Frequencies"), fontcolour("white"), shape("ellipse"), colour("orange")
}

image bounds(270,  0,190, 80), colour(  0,160,80), shape("rounded"), outlinecolour("white"), outlinethickness(4), plant("Auto") {
button  bounds( 15, 25, 40, 20), channel("auto"), text("Auto","Auto"), colour:0(  0,  0,  0), fontcolour:0(100,100,100), colour:1(255,100,100), fontcolour:1(255,200,200)
rslider bounds( 60, 10, 60, 60), text("Delay"),     channel("delay"),  textcolour("white"), range(0.0001, 0.5, 0.1, 1,0.001), colour(  0,100, 50,255), trackercolour("white")
rslider bounds(120, 10, 60, 60), text("Threshold"), channel("thresh"), textcolour("white"), range(0.001, 0.5, 0.1,1,0.001),   colour(  0,100, 50,255), trackercolour("white")
}

image   bounds(460,  0,200, 80), colour(  0,160,80), shape("rounded"), outlinecolour("white"), outlinethickness(4), plant("Mix") {
label    bounds(10,15, 60,13), text("FFT Size"), fontcolour("white")
combobox bounds(10,30, 60,18), text("64","128","256","512","1024","2048","4096","8192"), channel("att_table"), value(5)
rslider bounds( 70, 10, 60, 60), text("Mix"),      channel("mix"),       range(0, 1.00, 1),        textcolour("white"), colour(  0,100, 50,255), trackercolour("white")
rslider bounds(130, 10, 60, 60), text("Level"),    channel("lev"),       range(0, 1.00, 0.5, 0.5), textcolour("white"), colour(  0,100, 50,255), trackercolour("white")
}




label   bounds( 2,85,100,10), text("Iain McCurdy . 2017"), fontcolour("white")
</Cabbage>
<CsoundSynthesizer>
<CsOptions>
-d -n
</CsOptions>
<CsInstruments>
sr 		= 	44100
ksmps 		= 	64
nchnls 		= 	2
0dbfs		=	1	;MAXIMUM AMPLITUDE

;Author: Iain McCurdy (2013)
;http://iainmccurdy.org/csound.html

/* FFT attribute tables */
giFFTattributes1	ftgen	0, 0, 4, -2,   64,  32,   64, 1
giFFTattributes2	ftgen	0, 0, 4, -2,  128,  64,  128, 1
giFFTattributes3	ftgen	0, 0, 4, -2,  256, 128,  256, 1
giFFTattributes4	ftgen	0, 0, 4, -2,  512, 128,  512, 1
giFFTattributes5	ftgen	0, 0, 4, -2, 1024, 256, 1024, 1
giFFTattributes6	ftgen	0, 0, 4, -2, 2048, 512, 2048, 1
giFFTattributes7	ftgen	0, 0, 4, -2, 4096,1024, 4096, 1
giFFTattributes8	ftgen	0, 0, 4, -2, 8192,2048, 8192, 1

opcode	pvsfreeze_module,a,akkkkiiiik
	ain,kfreeza,kfreezf,kmix,klev,iFFTsize,ioverlap,iwinsize,iwintype,klock	xin

	f_anal  	pvsanal	ain, iFFTsize, ioverlap, iwinsize, iwintype		;ANALYSE AUDIO INPUT SIGNAL AND OUTPUT AN FSIG
	f_freeze	pvsfreeze f_anal, kfreeza, kfreezf
	f_lock 		pvslock f_freeze, klock
	aout		pvsynth f_lock
	amix		ntrpol		ain, aout, kmix					;CREATE DRY/WET MIX
			xout		amix*klev	
endop

instr	1
	kmix		chnget	"mix"			; read in widgets
	klev		chnget	"lev"
	kfreeza		chnget	"freeza"
	kfreezf		chnget	"freeza"
	kfreezb		chnget	"freezb"
	klock		chnget	"lock"
	
	; triggering of 'Freeze All' mode
	kon		=	1
	koff		=	0
	ktrigon		trigger	kfreezb,0.5,0
	ktrigoff	trigger	kfreezb,0.5,1
	if(ktrigon==1) then
	 chnset		kon,"freeza"
	 chnset		kon,"freezf"
	elseif(ktrigoff==1) then
	 chnset		koff,"freeza"
	 chnset		koff,"freezf"
	endif

	; audio input
	ainL,ainR	ins

	; auto freeze triggering
	kauto	chnget	"auto"				; read in widgets
	kthresh	chnget	"thresh"
	kdelay	chnget	"delay"
	if kauto==1 then				; if 'Auto' is on
	 krms	rms	ainL+ainR			; scan RMS of audio signal
	 ktrig	trigger	krms,kthresh,0			; if signal crosses threshold upwards																																																																													
	 ktrigdel	vdel_k	ktrig,kdelay,0.5	; delayed version of the trigger
	 if ktrig==1 then				; if initial threshold crossing occurs...
	  chnset		koff,"freeza"		; turn freezing off
	  chnset		koff,"freezf"
	 endif
	 if ktrigdel==1 then				; if delayed trigger is received...
	  chnset		kon,"freeza"		; turn freezing on
	  chnset		kon,"freezf"
	 endif
	endif

	kofftrig	trigger	kauto,0.5,1		; when 'Auto' is turned off generate a trigger
	if kofftrig==1 then				; if 'Auto' is turned off...
	 chnset		koff,"freeza"			; turn freezing off
	 chnset		koff,"freezf"
	endif	

	/* SET FFT ATTRIBUTES */
	katt_table	chnget	"att_table"	; FFT atribute table
	katt_table	init	5
	ktrig		changed	katt_table
	if ktrig==1 then
	 reinit update
	endif
	update:
	iFFTsize	table	0, giFFTattributes1 + i(katt_table) - 1
	ioverlap	table	1, giFFTattributes1 + i(katt_table) - 1
	iwinsize	table	2, giFFTattributes1 + i(katt_table) - 1
	iwintype	table	3, giFFTattributes1 + i(katt_table) - 1
	/*-------------------*/
	
	aoutL		pvsfreeze_module	ainL,kfreeza,kfreezf,kmix,klev,iFFTsize,ioverlap,iwinsize,iwintype, klock
	aoutR		pvsfreeze_module	ainR,kfreeza,kfreezf,kmix,klev,iFFTsize,ioverlap,iwinsize,iwintype, klock
				outs				aoutR,aoutR
endin

</CsInstruments>

<CsScore>
i 1 0 [60*60*24*7]
</CsScore>

</CsoundSynthesizer>; pvShift.csd
; Written by Iain McCurdy, 2012.

; Streaming phase vocoding frequency shifter.

<Cabbage>
form caption("pvshift Frequency Shifter") size(510,  90), pluginid("shft"), scrollbars(0) style("legacy")

image bounds( 15,  9, 60, 60), colour(30,30,30,100), shape("ellipse"), outlinethickness(0)
image bounds( 85,  9, 60, 60), colour(30,30,30,100), shape("ellipse"), outlinethickness(0)
image bounds(155,  9, 60, 60), colour(30,30,30,100), shape("ellipse"), outlinethickness(0)
image bounds(225,  9, 60, 60), colour(30,30,30,100), shape("ellipse"), outlinethickness(0)
image bounds(295,  9, 60, 60), colour(30,30,30,100), shape("ellipse"), outlinethickness(0)
image bounds(365,  9, 60, 60), colour(30,30,30,100), shape("ellipse"), outlinethickness(0)
image bounds(435,  9, 60, 60), colour(30,30,30,100), shape("ellipse"), outlinethickness(0)
image bounds(-60,-5,630,110), colour(100,205,60), outlinecolour("silver"), outlinethickness(6), shape("ellipse")
rslider bounds( 10, 15, 70, 70), text("Coarse"),     channel("coarse"),    range(-4000, 4000, 0, 1),    colour("orange"), trackercolour("yellow"), textcolour("black")
rslider bounds( 80, 15, 70, 70), text("Multiplier"), channel("fine"),      range(-1, 1, 1, 1, 0.0001),  colour("orange"), trackercolour("yellow"), textcolour("black")
rslider bounds(150, 15, 70, 70), text("Lowest"),     channel("lowest"),    range( 20, 20000, 20, 0.5),  colour("orange"), trackercolour("yellow"), textcolour("black")
rslider bounds(220, 15, 70, 70), text("Feedback"),   channel("FB"),        range(0, 1.00, 0),           colour("orange"), trackercolour("yellow"), textcolour("black")
label    bounds(295,20, 60,13), text("FFT Size"), fontcolour("black")
combobox bounds(295,35, 60,20), text("64","128","256","512","1024","2048","4096","8192"), channel("att_table"), value(5), fontcolour(220,220,255)
rslider bounds(360, 15, 70, 70), text("Mix"),        channel("mix"),       range(0, 1.00, 1),           colour("orange"), trackercolour("yellow"), textcolour("black")
rslider bounds(430, 15, 70, 70), text("Level"),      channel("lev"),       range(0, 1.00, 0.5, 0.5),    colour("orange"), trackercolour("yellow"), textcolour("black")
</Cabbage>
<CsoundSynthesizer>
<CsOptions>
-d -n
</CsOptions>
<CsInstruments>

sr 		= 	44100
ksmps 		= 	32
nchnls 		= 	2
0dbfs		=	1	;MAXIMUM AMPLITUDE

;Iain McCurdy
;http://iainmccurdy.org/csound.html
;Frequency shifting effect using pvshift opcode.

/* FFT attribute tables */
giFFTattributes1	ftgen	0, 0, 4, -2,   64,  32,   64, 1
giFFTattributes2	ftgen	0, 0, 4, -2,  128,  64,  128, 1
giFFTattributes3	ftgen	0, 0, 4, -2,  256, 128,  256, 1
giFFTattributes4	ftgen	0, 0, 4, -2,  512, 128,  512, 1
giFFTattributes5	ftgen	0, 0, 4, -2, 1024, 256, 1024, 1
giFFTattributes6	ftgen	0, 0, 4, -2, 2048, 512, 2048, 1
giFFTattributes7	ftgen	0, 0, 4, -2, 4096,1024, 4096, 1
giFFTattributes8	ftgen	0, 0, 4, -2, 8192,2048, 8192, 1

opcode	pvshift_module,a,akkkkkiiii
	ain,kshift,klowest,kfeedback,kmix,klev,iFFTsize,ioverlap,iwinsize,iwintype	xin
	f_FB		pvsinit iFFTsize,ioverlap,iwinsize,iwintype, 0			; INITIALISE FEEDBACK FSIG
	f_anal  	pvsanal	ain, iFFTsize, ioverlap, iwinsize, iwintype		; ANALYSE AUDIO INPUT SIGNAL AND OUTPUT AN FSIG
	f_mix		pvsmix	f_anal, f_FB									; MIX AUDIO INPUT WITH FEEDBACK SIGNAL
	f_shift		pvshift f_mix, kshift, klowest							; SHIFT FREQUENCIES
	f_FB		pvsgain f_shift, kfeedback 								; CREATE FEEDBACK F-SIGNAL FOR NEXT PASS
	aout		pvsynth f_shift                      					; RESYNTHESIZE THE f-SIGNAL AS AN AUDIO SIGNAL
	amix		ntrpol		ain, aout, kmix								; CREATE DRY/WET MIX
			xout		amix*klev	
endop

instr	1
	ainL,ainR	ins
	;gicos	ftgen	0,0,131072,11,1			; test tone
	;ainL	gbuzz	0.1,330,80,1,0.7,gicos	; test tone
	ainR	=		ainL
	
	
	;ainL,ainR	diskin2	"SynthPad.wav",1,0,1
	kcoarse	chnget	"coarse"	; coarse freq. shift
	kfine	chnget	"fine"		; fine freq. control (multipler)
	kporttime	linseg	0,0.001,0.2
	kshift	lineto	kcoarse*kfine, kporttime	; ultimate freq. shift is sum of coarse and fine controls
	klowest	chnget	"lowest"	; lowest shifted frequency
	kFB	chnget	"FB"		; feedback amount
	kmix		chnget	"mix"
	klev		chnget	"lev"

	/* SET FFT ATTRIBUTES */
	katt_table	chnget	"att_table"	; FFT atribute table
	katt_table	init	5
	ktrig		changed	katt_table
	if ktrig==1 then
	 reinit update
	endif
	update:
	iFFTsize	table	0, giFFTattributes1 + i(katt_table) - 1
	ioverlap	table	1, giFFTattributes1 + i(katt_table) - 1
	iwinsize	table	2, giFFTattributes1 + i(katt_table) - 1
	iwintype	table	3, giFFTattributes1 + i(katt_table) - 1
	/*-------------------*/
	
	aoutL		pvshift_module	ainL,kshift,klowest,kFB,kmix,klev,iFFTsize,ioverlap,iwinsize,iwintype	; call UDO for each channel
	aoutR		pvshift_module	ainR,kshift,klowest,kFB,kmix,klev,iFFTsize,ioverlap,iwinsize,iwintype

			outs	aoutR,aoutR
endin

</CsInstruments>

<CsScore>
i 1 0 [60*60*24*7]
</CsScore>

</CsoundSynthesizer>; pvSmooth.csd
; Written by Iain McCurdy, 2012.
; FFT feedback is disabled if amplitude smoothing is increased beyond zero. If this is not done the instrument will fail. 

; link	-	links 'Amp.Smooth' and 'Frq.Smooth'

<Cabbage>
form caption("pvSmooth") size(505, 90), pluginid("smoo"), scrollbars(0) style("legacy")
image bounds(0, 0, 505, 90), colour("Cream"), outlinecolour("silver"), outlinethickness(5)
label pos(-52, -30), size(615, 150), fontcolour(210,105, 30, 80), text("smooth"), shape("rounded"), outlinecolour("white"), outlinethickness(4)
rslider bounds( 10, 8, 75, 75), text("Amp.Smooth"), channel("acf"),       range(0, 1.00, 0,16, 0.0001), textcolour(138, 54, 15), colour("chocolate"), trackercolour(138, 54, 15)
checkbox bounds( 70, 8, 70,10), channel("link"), text("Link"), fontcolour(138, 54, 15)
rslider bounds( 90, 8, 75, 75), text("Frq.Smooth"), channel("fcf"),       range(0, 1.00, 0,16, 0.0001), textcolour(138, 54, 15), colour("chocolate"), trackercolour(138, 54, 15)
rslider bounds(170, 8, 75, 75), text("Feedback"),   channel("FB"),        range(0, 0.999, 0, 1,0.001),    textcolour(138, 54, 15), colour("chocolate"), trackercolour(138, 54, 15)
label    bounds(250,20, 70,13), text("FFT Size"), fontcolour(138, 54, 15)
combobox bounds(250,35, 70,20), text("64","128","256","512","1024","2048","2048_2","4096","8192","16384"), channel("att_table"), value(5), fontcolour(255,255,200)
checkbox bounds(250,60, 90,10), channel("delay"), text("Delay Comp."), fontcolour(138, 54, 15)
rslider bounds(330, 8, 75, 75), text("Mix"),        channel("mix"),       range(0, 1.00, 1),              textcolour(138, 54, 15), colour("chocolate"), trackercolour(138, 54, 15)
rslider bounds(410, 8, 75, 75), text("Level"),      channel("lev"),       range(0, 1.00, 0.5),            textcolour(138, 54, 15), colour("chocolate"), trackercolour(138, 54, 15)
</Cabbage>
<CsoundSynthesizer>
<CsOptions>
-d -n
</CsOptions>
<CsInstruments>
sr 		= 	44100
ksmps 		= 	32
nchnls 		= 	2
0dbfs		=	1	;MAXIMUM AMPLITUDE

;Iain McCurdy
;http://iainmccurdy.org/csound.html
;Spectral smoothing effect.

/* FFT attribute tables */
giFFTattributes1	ftgen	0, 0, 4, -2,   64,  32,   64, 1
giFFTattributes2	ftgen	0, 0, 4, -2,  128,  64,  128, 1
giFFTattributes3	ftgen	0, 0, 4, -2,  256, 128,  256, 1
giFFTattributes4	ftgen	0, 0, 4, -2,  512, 128,  512, 1
giFFTattributes5	ftgen	0, 0, 4, -2, 1024, 128, 1024, 1
giFFTattributes6	ftgen	0, 0, 4, -2, 2048, 256, 2048, 1
giFFTattributes7	ftgen	0, 0, 4, -2, 2048,1024, 2048, 1
giFFTattributes8	ftgen	0, 0, 4, -2, 4096,1024, 4096, 1
giFFTattributes9	ftgen	0, 0, 4, -2, 8192,2048, 8192, 1
giFFTattributes10	ftgen	0, 0, 4, -2,16384,4096,16384, 1

opcode	pvsmooth_module,a,akkkkkiiiii
	ain,kacf,kfcf,kfeedback,kmix,klev,iFFTsize,ioverlap,iwinsize,iwintype,idelay	xin
	f_FB		pvsinit iFFTsize,ioverlap,iwinsize,iwintype, 0			;INITIALISE FEEDBACK FSIG
	f_anal  	pvsanal	ain, iFFTsize, ioverlap, iwinsize, iwintype		;ANALYSE AUDIO INPUT SIGNAL AND OUTPUT AN FSIG
	f_mix		pvsmix	f_anal, f_FB						;MIX AUDIO INPUT WITH FEEDBACK SIGNAL
	f_smooth	pvsmooth	f_mix, kacf, kfcf				;BLUR AMPLITUDE AND FREQUENCY VALUES OF AN F-SIGNAL
	f_FB		pvsgain f_smooth, kfeedback 					;CREATE FEEDBACK F-SIGNAL FOR NEXT PASS
	aout		pvsynth f_smooth                      				;RESYNTHESIZE THE f-SIGNAL AS AN AUDIO SIGNAL
	if idelay==1 then
	 ain	delay	ain,(iFFTsize)/sr
	endif
	amix		ntrpol		ain, aout, kmix					;CREATE DRY/WET MIX
			xout		amix*klev	
endop

instr	1
	ainL,ainR	ins
	;ainL,ainR	diskin	"808loop.wav",1,0,1	;USE FOR TESTING
	;ainL,ainR	diskin	"SynthPad.wav",1,0,1	;USE FOR TESTING

	katt_table	chnget	"att_table"	; FFT atribute table
	katt_table	init	5
	kdelay		chnget	"delay"
	ktrig		changed	katt_table,kdelay
	if ktrig==1 then
	 reinit update
	endif
	update:
	iFFTsize	table	0, giFFTattributes1 + i(katt_table) - 1
	ioverlap	table	1, giFFTattributes1 + i(katt_table) - 1
	iwinsize	table	2, giFFTattributes1 + i(katt_table) - 1
	iwintype	table	3, giFFTattributes1 + i(katt_table) - 1
		
	kfeedback	chnget	"FB"
	kacf		chnget	"acf"
	kfcf		chnget	"fcf"
	klink		chnget	"link"
	if klink==1 then
	 if changed(kacf)==1 then
	  chnset	kacf,"fcf"
	 elseif changed(kfcf)==1 then
	  chnset	kfcf,"acf"
	 endif
	endif
	kfeedback	=	(kacf>0?0:kfeedback)		; feedback + amplitude smoothing can cause failure so we must protect against this
	kacf		=	1-kacf
	kfcf		=	1-kfcf
	kporttime	linseg	0,0.001,0.02
	kmix		chnget	"mix"
	klev		chnget	"lev"
	aoutL		pvsmooth_module	ainL,kacf,kfcf,kfeedback,kmix,klev,iFFTsize,ioverlap,iwinsize,iwintype,i(kdelay)
	aoutR		pvsmooth_module	ainR,kacf,kfcf,kfeedback,kmix,klev,iFFTsize,ioverlap,iwinsize,iwintype,i(kdelay)
			outs	aoutR,aoutR
endin

</CsInstruments>

<CsScore>
i 1 0 [60*60*24*7]
</CsScore>

</CsoundSynthesizer>; pvsWarp.csd
; Written by Iain McCurdy, 2012.

<Cabbage>
form caption("pvsWarp") size(535, 90), pluginid("warp") style("legacy")
image pos(0, 0), size(535, 90), colour( 80, 80,135,220), shape("rounded"), outlinecolour("white"), outlinethickness(4) 
rslider bounds( 10, 11, 70, 70), text("Scale"),    channel("scal"),      range(0.1, 4, 1, 0.5, 0.001), colour("LightSlateGrey"), textcolour("white"), trackercolour("white")
rslider bounds( 80, 11, 70, 70), text("Shift"),    channel("shift"),     range(-5000, 5000, 0),        colour("LightSlateGrey"), textcolour("white"), trackercolour("white")
rslider bounds(150, 11, 70, 70), text("Feedback"), channel("FB"),        range(0, 0.99, 0),            colour("LightSlateGrey"), textcolour("white"), trackercolour("white")
label    bounds(220,20, 60,13), text("FFT Size"), fontcolour("white")
combobox bounds(220,35, 60,20), text("128","256","512","1024","2048","4096","8192"), channel("att_table"), value(4), fontcolour("lightblue")
checkbox bounds(290,30, 95,15), channel("DelayComp"), text("Delay Comp."), fontcolour("white"), colour("lightblue")
rslider bounds(385, 11, 70, 70), text("Mix"),      channel("mix"),       range(0, 1.00, 1),            colour("LightSlateGrey"), textcolour("white"), trackercolour("white")
rslider bounds(455, 11, 70, 70), text("Level"),    channel("lev"),       range(0, 1.00, 0.5),          colour("LightSlateGrey"), textcolour("white"), trackercolour("white")
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-d -n
</CsOptions>

<CsInstruments>

sr 		= 	44100
ksmps 		= 	32
nchnls 		= 	2
0dbfs		=	1	;MAXIMUM AMPLITUDE

;Author: Iain McCurdy (2012)
;http://iainmccurdy.org/csound.html

/* FFT attribute tables */
giFFTattributes1	ftgen	0, 0, 4, -2,   64,  32,   64, 1
giFFTattributes2	ftgen	0, 0, 4, -2,  128,  64,  128, 1
giFFTattributes3	ftgen	0, 0, 4, -2,  256, 128,  256, 1
giFFTattributes4	ftgen	0, 0, 4, -2,  512, 128,  512, 1
giFFTattributes5	ftgen	0, 0, 4, -2, 1024, 256, 1024, 1
giFFTattributes6	ftgen	0, 0, 4, -2, 2048, 512, 2048, 1
giFFTattributes7	ftgen	0, 0, 4, -2, 4096,1024, 4096, 1
giFFTattributes8	ftgen	0, 0, 4, -2, 8192,2048, 8192, 1

opcode	pvswarp_module,a,akkkkiiiii
	ain,kscal,kshift,kfeedback,kmix,iFFTsize,ioverlap,iwinsize,iwintype,iDelayComp	xin
	aout		init	0
	;f_FB		pvsinit iFFTsize,ioverlap,iwinsize,iwintype, 0			;INITIALISE FEEDBACK FSIG
	f_anal  	pvsanal	ain+(aout*kfeedback), iFFTsize, ioverlap, iwinsize, iwintype		;ANALYSE AUDIO INPUT SIGNAL AND OUTPUT AN FSIG
	;f_mix		pvsmix	f_anal, f_FB						;MIX AUDIO INPUT WITH FEEDBACK SIGNAL
	f_warp		pvswarp	f_anal, kscal, kshift					;WARP SPECTRAL ENVELOPE VALUES OF AN F-SIGNAL USING BOTH SCALING AND SHIFTING
	;f_FB		pvsgain f_warp, kfeedback 					;CREATE FEEDBACK F-SIGNAL FOR NEXT PASS
	aout		pvsynth f_warp                      				;RESYNTHESIZE THE f-SIGNAL AS AN AUDIO SIGNAL
	if(kfeedback>0) then
	 aout		clip	aout,0,0dbfs
	endif
	if iDelayComp==1 then
	 ain	delay	ain,iwinsize/sr
	endif
	amix		ntrpol		ain, aout, kmix					;CREATE DRY/WET MIX
			xout		amix	
endop

instr	1
	ainL,ainR	ins
	;ainL,ainR	diskin	"SynthPad.wav",1,0,1	;USE FOR TESTING
	kscal		chnget	"scal"
	kshift		chnget	"shift"
	kfeedback	chnget	"FB"
	kmix		chnget	"mix"
	klev		chnget	"lev"
	kDelayComp	chnget	"DelayComp"
	ainL		=	ainL*klev
	ainR		=	ainR*klev

	/* SET FFT ATTRIBUTES */
	katt_table	chnget	"att_table"	; FFT atribute table
	katt_table	init	5
	ktrig		changed	katt_table,kDelayComp
	if ktrig==1 then
	 reinit update
	endif
	update:
	iFFTsize	table	0, giFFTattributes1 + i(katt_table) - 1
	ioverlap	table	1, giFFTattributes1 + i(katt_table) - 1
	iwinsize	table	2, giFFTattributes1 + i(katt_table) - 1
	iwintype	table	3, giFFTattributes1 + i(katt_table) - 1
	/*-------------------*/

	aoutL		pvswarp_module	ainL,kscal,kshift,kfeedback,kmix,iFFTsize,ioverlap,iwinsize,iwintype,i(kDelayComp)
	aoutR		pvswarp_module	ainR,kscal,kshift,kfeedback,kmix,iFFTsize,ioverlap,iwinsize,iwintype,i(kDelayComp)
			outs	aoutL,aoutR
endin

</CsInstruments>

<CsScore>
i 1 0 [60*60*24*7]
</CsScore>

</CsoundSynthesizer>
; RingModulator.csd
; Written by Iain McCurdy, 2012.

; Ring Modulator
; --------------
; Modulating waveform is a harmonic waveform based on a sawtooth waveform.
;  The number of harmonics included is defined using 'Harms'.
;  An offset of harmonics to omit is defined using 'Offset'.
;  Therefore Harms=1 and Offset=0 will produce a sine wave.

; Input		-	input mode 

; Freq.		-	frequency of the ring modulator (if input mode is 'Knob')
;			 If input mode is 'Kybd.' then base frequency is derived from the note played and the 'Freq.' knob is disregarded.
; Harms.	-	number of harmonics included in the modulating waveform
; Offset	-	number of harmonics to skip before building the harmonic waveform used by the modulator

; Env.		-	amount of amplitude following used to influence the modulator frequency
; Att.		-	attack time used in amplitude following
; Dec.		-	decay time used in amplitude following

; Thresh	-	threshold which, if the rms (amplitude measurement) crosses through, will trigger the generation of a new random modulator frequency.
;			 If thresh is zero, the random triggering of new modulating frequencies is bypassed
; Min.		-	minimum of the range within which a new modulating frequency will be generated (oct format)
; Max.		-	maximum of the range within which a new modulating frequency will be generated (oct format)

; Width		-	create stereo width by offsetting the phase of the left channel modulator with respect to that of the right
; Mix		-	dry/wet mix
; Level		-	output level

<Cabbage>
form caption("Ring Modulator") size(755,170), pluginid("rmod") style("legacy")
image               pos(0, 0), size(755, 90), colour("black"), shape("rounded"), outlinecolour("lime"), outlinethickness(5) 
label    bounds( 10, 20, 65, 13), text("Input"), textcolour(white)
combobox bounds( 10, 34, 65, 18), text("Knob","Keybd."), channel("input"), textcolour(white)
rslider bounds( 75, 12, 70, 70), text("Freq."),    channel("freq"),  range(0, 15000, 800, 0.25),   colour("yellow"),    trackercolour(white), textcolour(white)
rslider bounds(145, 12, 70, 70), text("Harms"),    channel("harms"), range(1, 40, 1,1,1),          colour("yellow"),    trackercolour(white), textcolour(white)
rslider bounds(215, 12, 70, 70), text("Offset"),   channel("offset"),range(0, 20, 0,1,1),          colour("yellow"),    trackercolour(white), textcolour(white)

line    bounds(290,  2, 3, 86), colour("lime")
rslider bounds(300, 12, 70, 70), text("Env."),     channel("env"),   range(0, 1.00, 0.5, 0.5,0.001), colour("orange"),    trackercolour(white), textcolour(white)
rslider bounds(370,  6, 40, 40), text("Att."),     channel("att"),   range(0.001, 2, 0.01, 0.5),   colour("orange"),    trackercolour(white), textcolour(white)
rslider bounds(370, 46, 40, 40), text("Dec."),     channel("dec"),   range(0.001, 2, 0.1,  0.5),   colour("orange"),    trackercolour(white), textcolour(white)
line    bounds(415,  2, 3, 86), colour("lime")

rslider bounds(425, 12, 70, 70), text("Thresh"),   channel("thresh"),   range(0, 1.00, 0, 0.5,0), colour("orange"),    trackercolour(white), textcolour(white)
rslider bounds(490,  6, 40, 40), text("Min."),     channel("min"),   range(0, 13, 5),   colour("orange"),    trackercolour(white), textcolour(white)
rslider bounds(490, 46, 40, 40), text("Max."),     channel("max"),   range(0, 13, 8),   colour("orange"),    trackercolour(white), textcolour(white)
line    bounds(535,  2, 3, 86), colour("lime")


rslider bounds(540, 12, 70, 70), text("Width"),    channel("width"), range(0, 1.0, 0.3,1,0.001),   colour("chocolate"), trackercolour(white), textcolour(white)
rslider bounds(610, 12, 70, 70), text("Mix"),      channel("mix"),   range(0, 1.00, 1),            colour("chocolate"), trackercolour(white), textcolour(white)
rslider bounds(680, 12, 70, 70), text("Level"),    channel("level"), range(0, 1.00, 1),            colour("chocolate"), trackercolour(white), textcolour(white)

keyboard bounds(0,92,755,78)
</Cabbage>
<CsoundSynthesizer>
<CsOptions>
;-d -n
-dm0 -n -+rtmidi=null -M0
</CsOptions>
<CsInstruments>
sr = 44100
ksmps = 32
nchnls = 2
0dbfs = 1
massign	0,2

;Author: Iain McCurdy (2012)
;http://iainmccurdy.org/csound.html

gisaw	ftgen	0,0,4096,7,1,4096,-1	; source modulating waveform (unbandlimited sawtooth waveform) before harmonic filtering

opcode	RingModulator,a,akkkkkii
	ain,kmix,kfreq,kenv,katt,kdec,ifn,iphs	xin			;READ IN INPUT ARGUMENTS
	iWet	ftgentmp	0,0,1024,-7,0,512,1,512,1		;RESCALING FUNCTION FOR WET LEVEL CONTROL
	iDry	ftgentmp	0,0,1024,-7,1,512,1,512,0		;RESCALING FUNCTION FOR DRY LEVEL CONTROL
	kWet	table	kmix, iWet, 1					;RESCALE WET LEVEL CONTROL ACCORDING TO FUNCTION TABLE iWet
	kDry	table	kmix, iDry, 1					;RESCALE DRY LEVEL CONTROL ACCORDING TO FUNCTION TABLE iDry
	aFollow	follow2		ain, katt, kdec				;AMPLITUDE FOLLOWING kModFrq + (cpsoct(kFollow*kenv*30))     	;CREATE A LEFT CHANNEL MODULATING FREQUENCY BASE ON THE STATIC VALUE CREATED BY kfreq AND THE AMOUNT OF DYNAMIC ENVELOPE FOLLOWING GOVERNED BY kenv
	kFollow	downsamp	aFollow
	kFollow	logcurve	kFollow/0dbfs,2
	kfreq	=	kfreq + (kFollow*kenv*8000)     		;CREATE A LEFT CHANNEL MODULATING FREQUENCY BASE ON THE STATIC VALUE CREATED BY kfreq AND THE AMOUNT OF DYNAMIC ENVELOPE FOLLOWING GOVERNED BY kenv
	aMod	poscil	1, kfreq, ifn, iphs  			;CREATE RING MODULATING SIGNAL
	aout	sum	ain*kDry, ain*aMod*kWet				;MIX DRY AND WET SIGNALS
		xout	aout						;SEND AUDIO BACK TO CALLER INSTRUMENT
endop

instr	1
 kporttime	linseg	0,0.001,0.1
 gkfreq	chnget	"freq"
 gkfreq	portk	gkfreq,kporttime
 gkmix 	chnget	"mix"
 gkwidth	chnget	"width"
 gkenv 	chnget	"env"
 gkatt 	chnget	"att"
 gkdec 	chnget	"dec"
 gkthresh 	chnget	"thresh"
 gkmin 	chnget	"min"
 gkmax 	chnget	"max"
 gklevel 	chnget	"level"
 gkharms		chnget	"harms"
 gkoffset	chnget	"offset"

 ga1,ga2	ins
 ;ga1,ga2	diskin2	"808loop.wav",1,0,1

 gkinput	chnget	"input"
 gkinput	init	1
 if changed(gkinput)==1&&gkinput==1 then
  event	"i",2,0,-1
 endif
endin

instr	2
 /* MIDI AND GUI INTEROPERABILITY */
 iMIDIflag	=	0			; IF MIDI ACTIVATED = 1, NON-MIDI = 0
 mididefault	1, iMIDIflag			; IF NOTE IS MIDI ACTIVATED REPLACE iMIDIflag WITH '1'
 
 if iMIDIflag==1 then				; IF THIS IS A MIDI ACTIVATED NOTE...
  icps	cpsmidi					; READ MIDI PITCH VALUES - THIS VALUE CAN BE MAPPED TO GRAIN DENSITY AND/OR PITCH DEPENDING ON THE SETTING OF THE MIDI MAPPING SWITCHES
  kfreq	=		icps
 else
  kfreq 	=	gkfreq
 endif						; END OF THIS CONDITIONAL BRANCH

 if gkinput!=1&&iMIDIflag!=1 then
  turnoff
 endif
 
 if gkthresh>0 then
  a1,a2	init	0
  krms	rms	a1+a2
  kRTrig	init	1
  kfreq	trandom	kRTrig,gkmin,gkmax
  kfreq	=	cpsoct(kfreq)
  if changed(kfreq)==1 then
   chnset	kfreq,"freq"
  endif
  kRTrig	trigger	krms,gkthresh,0
 endif
 
 if metro(8)==1 then 
  if changed(gkharms,gkoffset,gkwidth)==1 then
   reinit UPDATE
  endif
  UPDATE:
 endif
 ifn	ftgen	1, 0, 4096, 30, gisaw, 1+i(gkoffset), i(gkharms)+i(gkoffset)		; generate a waveform based on chosen source waveform with user-set modifications
 ;ifn	ftgen	1, 0, 4096, 10, 1
 a1	RingModulator	ga1,gkmix,kfreq,gkenv,gkatt,gkdec,ifn,i(gkwidth)
 a2	RingModulator	ga2,gkmix,kfreq,gkenv,gkatt,gkdec,ifn,0
 rireturn
 aEnv	linsegr	0,0.01,1,0.01,0
 a1	=	a1 * gklevel * aEnv
 a2	=	a2 * gklevel * aEnv
 	outs	a1,a2
endin

</CsInstruments>

<CsScore>
i 1 0 [60*60*24*7]
</CsScore>

</CsoundSynthesizer>; Shredulator.csd
; Written by Iain McCurdy, 2016

; This effect implements an FFT delay, the delay time of which can be shifted using a random sample and gold function.
; In sync with this random function, amplitude can also be randomised ('Granulate' control), as can transposition.

; CONTROLS
; --------

; FFT Size		-	size of FFT window: smaller sizes provides better time resolution but possible distortion of frequency components
; Max Delay		-	Maximum delay time as defined by the circular (pvs) buffer. This is i-rate so altering it will cause discontinuities in the realtime audio stream.
;					 Note that maximum delay time can modulated at k-rate using the 'Depth' control
; Rate			-	Rate at which new random delay times are generated. This also controls the rate at which new random amplitude ('Granulation') 
;  					 and random transposition ('Randomise') values are generated.
;					This control can also be thought of as 'grain size'.
; Depth			-	Amplitude of the random delay time generator. This, along with 'Max.Delay', controls the maximum random delay time possible.
; Granulation	-	Amount of random amplitude variation
; Feedback		-	Ratio of output (pvs) signal that is fed back into the input

; Semitones		-	Number of semitones transposition
; Cents			-	Number of cents transposition
; Pre/Post		-	If 'Pre' is selected, the signal before transposition is sent to the output (transposition are only heard via the feedback signal), 
;					 if 'Post' is selected the, the transposed signal is sent directly to the output
; Randomise		-	If raised above zero, rather than transposition being a fixed value as defined by 'Semitones' and 'Cents' 
;               	 it will be a bipolar random value in the range +/- the offset defined by 'Semitones' and 'Cents'.


<Cabbage>
form caption("") size(460,395), colour(225,230,255), pluginid("Shrd"), scrollbars(0) style("legacy")
image   bounds(  0,-10,460, 45), colour(0,0,0,0), outlinethickness(0), plant("title")
{
label   bounds(  0,  1,460, 51), text("SHREDULATOR"), fontcolour(155,155,155)
image   bounds( 55, 21,325,  5),   colour(225,230,255), shape("sharp"), rotate(0.1,162,2)
image   bounds( 90, 21,200,  7),   colour(225,230,255), shape("sharp"), rotate(-0.18,100,3)

label   bounds(  1,  3,459, 50), text("SHREDULATOR"), fontcolour(  5,  5,  5)
image   bounds( 45, 21, 80,  2),   colour(225,230,255), shape("sharp"), rotate(-0.8,40,1)
image   bounds(110, 21, 55,  2),   colour(225,230,255), shape("sharp"), rotate( 0.8,22,1)
image   bounds( 85, 34,100,  3),   colour(225,230,255), shape("sharp"), rotate(-0.4,22,1)
image   bounds(160, 34,180,  3),   colour(225,230,255), shape("sharp"), rotate(-0.2,45,2)
image   bounds(215, 17, 70,  4),   colour(225,230,255), shape("sharp"), rotate( 0.5,22,2)
image   bounds(250, 21,150,  4),   colour(225,230,255), shape("sharp"), rotate( 0.2,60,2)
image   bounds(271, 31, 53,  2),   colour(225,230,255), shape("sharp"), rotate(-0.1,22,1)
image   bounds(340, 21, 60,  2),   colour(225,230,255), shape("sharp"), rotate( 0.7,22,1)
}

label bounds(358, 39,97,10), fontcolour("black"), text("Iain McCurdy |2016|") align("right")

image    bounds(5,50,450,110), colour(225,230,255), outlinecolour("Black"), outlinethickness(5), plant("Delay")
{  
label    bounds(  0,  3,440, 13), text("D    E    L    A    Y"), fontcolour("Black")
label    bounds( 10, 20, 70, 14), text("FFT Size"), fontcolour("Black")
combobox bounds( 10, 35, 70, 20), text("128","256","512","1024","2048","4096"), channel("FFTindex"), value(4)
rslider  bounds( 75, 15, 90,90), text("Max.Delay"), textbox(1), valuetextbox(1), channel("MaxDelay"), range(0.1, 8, 3.7,0.5), fontcolour("Black"), textcolour("Black"), colour(20,20,155), trackercolour(150,150,225)
rslider  bounds(145, 15, 90,90), text("Rate"), textbox(1), valuetextbox(1), channel("Rate"), range(0.1, 500, 10,0.5,0.1), fontcolour("Black"), textcolour("Black"), colour(20,20,155), trackercolour(150,150,225)
rslider  bounds(215, 15, 90,90), text("Depth"), textbox(1), valuetextbox(1), channel("Depth"), range(0, 1, 0.2), fontcolour("Black"), textcolour("Black"), colour(20,20,155), trackercolour(150,150,225)
rslider  bounds(285, 15, 90,90), text("Granulation"), textbox(1), valuetextbox(1), channel("Granulation"), range(0, 1, 0.2), fontcolour("Black"), textcolour("Black"), colour(20,20,155), trackercolour(150,150,225)
rslider  bounds(355, 15, 90,90), text("Feedback"), textbox(1), valuetextbox(1), channel("Feedback"), range(0, 1, 0.5), fontcolour("Black"), textcolour("Black"), colour(20,20,155), trackercolour(150,150,225)
}

image    bounds(5,165,450,110), colour(225,230,255), outlinecolour("Black"), outlinethickness(5), plant("Transpose")
{  
label    bounds(  0,  3,450, 13), text("T    R    A    N    S    P    O    S    E"), fontcolour("Black")
rslider  bounds( 60, 15, 90,90), text("Semitones"), textbox(1), valuetextbox(1), channel("Semitones"), range(-12, 12, 5,1,1), fontcolour("Black"), textcolour("Black"), colour(20,20,155), trackercolour(150,150,225)
rslider  bounds(130, 15, 90,90), text("Cents"), textbox(1), valuetextbox(1), channel("Cents"), range(-100, 100, 0,1,1), fontcolour("Black"), textcolour("Black"), colour(20,20,155), trackercolour(150,150,225)
label    bounds(220, 20, 70, 14), text("Pre/Post"), fontcolour("Black")
combobox bounds(220, 35, 70, 20), text("Pre","Post"), channel("PrePost"), value(2)
rslider  bounds(290, 15, 90,90), text("Randomise"), textbox(1), valuetextbox(1), channel("TransRand"), range(0, 1, 0.35), fontcolour("Black"), textcolour("Black"), colour(20,20,155), trackercolour(150,150,225)
}

image    bounds(5,280,450,110), colour(225,230,255), outlinecolour("Black"), outlinethickness(5), plant("Output")
{  
label    bounds(  0,  3,450, 13), text("O    U    T    P    U    T"), fontcolour("Black")
rslider  bounds(110, 15, 90,90), text("Width"), textbox(1), valuetextbox(1), channel("Width"), range(0, 1, 1), fontcolour("Black"), textcolour("Black"), colour(20,20,155), trackercolour(150,150,225)
rslider  bounds(180, 15, 90,90), text("Dry/Wet Mix"), textbox(1), valuetextbox(1), channel("DryWetMix"), range(0, 1, 1), fontcolour("Black"), textcolour("Black"), colour(20,20,155), trackercolour(150,150,225)
rslider  bounds(250, 15, 90,90), text("Level"), textbox(1), valuetextbox(1), channel("Level"), range(0, 1, 1), fontcolour("Black"), textcolour("Black"), colour(20,20,155), trackercolour(150,150,225)
}

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-n -d -+rtmidi=NULL -M0 -m0d 
</CsOptions>
                                           
<CsInstruments>

sr = 44100
ksmps = 16
nchnls = 2
0dbfs = 1


instr	1
 kMaxDelay			chnget		"MaxDelay"
 kMaxDelay			init		1
 kSemitones			chnget		"Semitones"
 kCents				chnget		"Cents"
 kTransRand			chnget		"TransRand"
 kDepth				chnget		"Depth"
 kRate				chnget		"Rate"
 kTranspose			=			kSemitones + kCents*0.01
 kFeedback			chnget		"Feedback"
 kWidth				chnget		"Width"
 kDryWetMix			chnget		"DryWetMix"
 kLevel				chnget		"Level"
 kFFTindex			chnget		"FFTindex"
 kFFTindex			init		4
 kGranulation		chnget		"Granulation"
 kPrePost			chnget		"PrePost"
 kPrePost			init		1
 iFFTsizes[]		fillarray	128,256,512,1024,2048,4096	; array of FFT size values
 
 ;aL		diskin	"JAG.wav",1,0,1											; read in sound file
 ;aL		poscil	0.4,300
 ;aR		=		aL
 aL,aR		ins
 
 if changed(kMaxDelay,kFFTindex)==1 then
  reinit RESTART
 endif
 RESTART:

 iFFTsize			=			iFFTsizes[i(kFFTindex)-1]	; retrieve FFT size value from array

 fsigInL			pvsanal		aL, iFFTsize, iFFTsize/4, iFFTsize, 1	; FFT analyse audio
 fsigInR			pvsanal		aR, iFFTsize, iFFTsize/4, iFFTsize, 1	; FFT analyse audio
 fsigFB				pvsinit 	iFFTsize									; initialise feedback signal
 fsigMixL 			pvsmix 		fsigInL, fsigFB								; mix feedback with input
 fsigMixR 			pvsmix 		fsigInR, fsigFB								; mix feedback with input

 iHandle1, kTime	pvsbuffer	fsigMixL, i(kMaxDelay)								; create a circular fsig buffer
 kDly1				randomh		0,i(kMaxDelay)*kDepth, kRate, 1				; delay time
 kAmp1				trandom		changed(kDly1),-kGranulation*60,0
 kTranspose1_2		trandom		changed(kDly1),kTranspose-(2*kTranspose*kTransRand),kTranspose
 fsigOut			pvsbufread 	kTime-kDly1, iHandle1						; read from buffer
 fsigGran			pvsgain		fsigOut,ampdbfs(kAmp1)
 fScale				pvscale		fsigGran,semitone(kTranspose1_2)
 fsigFB				pvsgain 	fScale, kFeedback			; create feedback signal for next pass
 if kPrePost==1 then
  aDly				pvsynth		fsigGran 									; resynthesise read buffer output
 else
  aDly				pvsynth		fScale 									; resynthesise read buffer output
 endif
 aMix				ntrpol		aL,aDly,kDryWetMix 						; dry/wet audio mix
 					outs		aMix*kLevel*(1-kWidth),aMix*kLevel

 iHandle2, kTime	pvsbuffer	fsigMixR, i(kMaxDelay)								; create a circular fsig buffer
 kDly2				randomh		0,i(kMaxDelay)*kDepth, kRate, 1				; delay time
 kAmp2				trandom		changed(kDly2),-kGranulation*60,0
 kTranspose2_2		trandom		changed(kDly2),kTranspose-(2*kTranspose*kTransRand),kTranspose
 fsigOut			pvsbufread 	kTime-kDly2, iHandle2 						; read from buffer
 fsigGran			pvsgain		fsigOut,ampdbfs(kAmp2)
 fScale				pvscale		fsigGran,semitone(kTranspose2_2)
 fsigFB				pvsgain 	fScale, kFeedback			; create feedback signal for next pass
 if kPrePost==1 then
  aDly				pvsynth		fsigGran 									; resynthesise read buffer output
 else
  aDly				pvsynth		fScale 									; resynthesise read buffer output
 endif
 aMix				ntrpol		aR,aDly,kDryWetMix 						; dry/wet audio mix
 					outs		aMix*kLevel,aMix*kLevel*(1-kWidth)
endin

</CsInstruments>

<CsScore>
i 1 0 -1
f 0 3700
</CsScore>

</CsoundSynthesizer>
; BounceDelay.csd
; Written by Iain McCurdy, 2015

; Creates layers of delays, their delay times mathematically related so as to create the impression of sounds bouncing and coming to rest (and other sound effects).
; The gesture can be further shaped by applying progessive amounts of amplitude reduction, lowpass filtering and highpass filtering.

; Total time	-	total time of the 'bounce' gesture / the length of the longest delay.
; Number	-	number of delays
; Warp		-	amount of progressive time warping of the delays:
;			 If 'Warp' = 0 then delays are uniformly spaced
;			 If 'Warp' < 0 then delays are progressively more narrowly spaced (the typical 'bounce' structure)
;			 If 'Warp' > 0 then delays are progressively more widely spaced (a reverse 'bounce' structure)
; Feedback	-	The amount output -> input feedback in each individual delay
; Mix		-	Dry/wet mix.
; Level		-	Output level
; Amp.Curve	-	Delay by delay amplitude shaping	
;			 If 'Amp.Curve' = 0, no shaping is applied.
;			 If 'Amp.Curve' < 0, amplitudes are progressively attenuated. The more negative this value is, the more rapidly amplitudes are reduced / the steeper the slope of the curve.
;			 If 'Amp.Curve' > 0, amplitudes are progressively increased (starting at silence). The larger this value is, the more rapidly amplitudes are increased / the steeper the slope of the curve.

; Lowpass Filter
; --------------
; Curve		-	Delay by delay lowpass filtering. Curve shaping operates in a similar fashion to 'Amp.Curve'
; Slope		-	Steepness of the cutoff slope of the filter.

; Highpass Filter
; --------------
; Curve		-	Delay by delay highpass filtering. Curve shaping operates in a similar fashion to 'Amp.Curve'
; Slope		-	Steepness of the cutoff slope of the filter.

; Note that the dry signal is included in amplitude and filtering shaping so depending on the three curve settings it may be filtered or even attenuated completely.
	
<Cabbage>
form caption("Bounce Delay"), size(490,385), pluginid("BnDl") style("legacy")
rslider   bounds( 10, 10, 70, 70), channel("TotalTime"), text("Total Time"), colour(  0, 40, 50), trackercolour(200,240,250), textcolour("white"), range(0.01, 4, 1.7, 0.5)
rslider   bounds( 90, 10, 70, 70), channel("Number"), text("Number"),        colour(  0, 40, 50), trackercolour(200,240,250), textcolour("white"), range(1, 32,20, 1,1)
rslider   bounds(170, 10, 70, 70), channel("Warp"), text("Warp"),            colour(  0, 40, 50), trackercolour(200,240,250), textcolour("white"), range(-3, 3, -0.5)
rslider   bounds(250, 10, 70, 70), channel("Feedback"), text("Feedback"),    colour(  0, 40, 50), trackercolour(200,240,250), textcolour("white"), range(0, 1, 0)
rslider   bounds(330, 10, 70, 70), channel("Mix"), text("Mix"),              colour(  0, 40, 50), trackercolour(200,240,250), textcolour("white"), range(0, 1, 0.5)
rslider   bounds(410, 10, 70, 70), channel("Level"), text("Level"),          colour(  0, 40, 50), trackercolour(200,240,250), textcolour("white"), range(0, 1, 1)

rslider   bounds( 10,125, 70, 70), channel("AmpCurve"), text("Amp.Curve"),   colour(  0, 40, 50), trackercolour(200,240,250), textcolour("white"), range(-1, 1, -0.7)

image     bounds( 90,100,180,100), colour(0,0,0,0), outlinecolour("white"), outlinethickness(1), plant("LPF"){
label     bounds(  0,  3,180, 14), fontcolour("white"), text("L o w p a s s   F i l t e r")
rslider   bounds( 10, 25, 70, 70), channel("LPFCurve"), text("Curve"),   colour(  0, 40, 50), trackercolour(200,240,250), textcolour("white"), range(-1, 1, -0.8)
label     bounds( 80, 30, 80, 14), fontcolour("white"), text("Slope")
combobox  bounds( 80, 45, 80, 20),  channel("LPFType"),text("Bypass","6dB/oct","12dB/oct"), colour(  0, 40, 50), textcolour("white"), value(2)
}

image     bounds(285,100,180,100), colour(0,0,0,0), outlinecolour("white"), outlinethickness(1), plant("HPF"){
label     bounds(  0,  3,180, 14), fontcolour("white"), text("H i g h p a s s   F i l t e r")
rslider   bounds( 10, 25, 70, 70), channel("HPFCurve"), text("Curve"),   colour(  0, 40, 50), trackercolour(200,240,250), textcolour("white"), range(-1, 1, 0)
label     bounds( 80, 30, 80, 14), fontcolour("white"), text("Slope")
combobox  bounds( 80, 45, 80, 20),  channel("HPFType"),text("Bypass","6dB/oct","12dB/oct"), colour(  0, 40, 50), textcolour("white"), value(1)
}

label     bounds( 10,370,110, 10), fontcolour(150,150,150), text("Iain McCurdy |2015|")

; display bars 
image bounds( 18,218,454,124), colour(250,250,250), shape("sharp")
image bounds( 20,220,450,120), colour( 20, 20, 20), shape("sharp"), plant("display") {
image bounds(  -100,  0,  4,100), colour(250,250,250), shape(sharp), visible(1), widgetarray("Bars",32)
}
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n
</CsOptions>

<CsInstruments>

sr 		= 	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1

giCurveRange	=	4	; extent of the control over shaping curves. This governs all curves: amplitude, LPF and HPF but it might be preferrable to have independent global variables for independent control.
giMaxDelay	=	4	; maximum delay time (this should correspond with the maximum value used for the 'Total Time' widget) 

; UDO that defines a single delay layer
; recursion is used to generate multiple delays. Layer counting is used to differentiate between layers.
opcode	EchoDelays,aa,aakkkkkkkkii
 aInL,aInR,kTotTim,kWarp,kFeedback,kAmpCurve,kLPFCurve,kLPFType,kHPFCurve,kHPFType,iNumber,iCount	xin	; read in input arguments
 ;	setksmps	1
 kRatio	pow	(iCount)/(iNumber),kWarp		; define delay time ratio according to layer number and 'Warp' amount. 
 kTim	=	kTotTim * kRatio		; scale ratio by total delay time
 aTim	interp	kTim				; create interpolated a-rate version. Creates higher quality results than just using a k-rate variable in the delay.  
 abuf	delayr	giMaxDelay			; establish delay buffer (establish memory/RAM needed)
 atapL	deltapi	aTim				; read from within delay buffer
 	delayw	aInL + (atapL*kFeedback)	; write into delay buffer
 abuf	delayr	giMaxDelay			; do the same for the right channel
 atapR	deltapi	aTim
 	delayw	aInR + (atapR*kFeedback)

 /* define amplitude */
 if kAmpCurve<=0 then											; negative or zero curve values
  kAmpVal	pow	1-(iCount/iNumber), octave((abs(kAmpCurve)*giCurveRange)-giCurveRange/2)	; calculate amplitude scaling value (will be a value between zero and 1). Each layer will have its own value. 
 else												 	; positive curve values
  kAmpVal	pow	(iCount/iNumber), octave((abs(kAmpCurve)*giCurveRange)-giCurveRange/2)
 endif

 /* define LPF */
 if kLPFCurve<-0.01||kLPFCurve>0.01 then								; only apply filtering if curve value is moved away from zero (!=0 didn't seem to be working)
  if kLPFCurve<=0 then											; when curve widget is negative or zero
   kLPFVal	pow	1-(iCount/iNumber), octave((abs(kLPFCurve)*giCurveRange)-giCurveRange/2)	; calculate lowpass filtering ratio (a value between 0 and 1)
  else													; positive values
   kLPFVal	pow	iCount/iNumber, octave((kLPFCurve*giCurveRange)-giCurveRange/2)
  endif
  if kLPFType==2 then											; choose between 6db and 12dB/oct filter slopes i.e. tone or butlp opcodes 
   atapL		tone	atapL,cpsoct((kLPFVal*10)+4)
   atapR		tone	atapR,cpsoct((kLPFVal*10)+4)
  elseif kLPFType==3 then
   atapL		butlp	atapL,cpsoct((kLPFVal*10)+4)
   atapR		butlp	atapR,cpsoct((kLPFVal*10)+4)
  endif  
 endif

 /* define HPF */
 if kHPFCurve<-0.01||kHPFCurve>0.01 then
  if kHPFCurve<=0 then
   kHPFVal	pow	1-(iCount/iNumber), octave((abs(kHPFCurve)*giCurveRange)-giCurveRange/2)
  else
   kHPFVal	pow	iCount/iNumber, octave((kHPFCurve*giCurveRange)-giCurveRange/2)
  endif
  if kHPFType==2 then
   atapL		atone	atapL,cpsoct(((1-kHPFVal)*10)+4)
   atapR		atone	atapR,cpsoct(((1-kHPFVal)*10)+4)
  elseif kHPFType==3 then
   atapL		buthp	atapL,cpsoct(((1-kHPFVal)*10)+4)
   atapR		buthp	atapR,cpsoct(((1-kHPFVal)*10)+4)
  endif  
 endif

 /* call the next echo (if required) */ 
 if iCount<iNumber then
  aMixL,aMixR	EchoDelays	aInL,aInR,kTotTim,kWarp,kFeedback,kAmpCurve,kLPFCurve,kLPFType,kHPFCurve,kHPFType,iNumber,iCount+1
 endif
 
 /* send back to instrument */
 	xout	(atapL*kAmpVal)+aMixL,(atapR*kAmpVal)+aMixR
 aMixL	=	0
 aMixR	=	0
endop


instr	1
 kporttime	linseg	0,0.001,0.05
 kTotTim	chnget	"TotalTime"
 kTotTim	portk	kTotTim,kporttime
 kNumber	chnget	"Number"
 kNumber	init	10
 kWarp		chnget	"Warp"   
 kWarp		portk	octave(kWarp),kporttime
 kWarp		init	1
 kFeedback	chnget	"Feedback"   
 kAmpCurve	chnget	"AmpCurve"
 kAmpCurve	init	0
 kLPFCurve	chnget	"LPFCurve"
 kLPFType	chnget	"LPFType"
 kHPFCurve	chnget	"HPFCurve"
 kHPFType	chnget	"HPFType" 
 kMix		chnget	"Mix"
 kLevel		chnget	"Level"
  
 aInL,aInR	ins

 /* reinitialise if 'Number' (of layers) changes */
 if changed(kNumber)==1 then
  reinit UPDATE
 endif
 UPDATE:
 
 iNumber	=	i(kNumber)
 if iNumber>1 then			; only call UDO if more than one layer is asked for (the dry/undelayed signal is the first layer)
  aDelL,aDelR	EchoDelays	aInL,aInR,kTotTim,kWarp,kFeedback,kAmpCurve,kLPFCurve,kLPFType,kHPFCurve,kHPFType,iNumber,1
 else
  aDelL	=	0
  aDelR	=	0
 endif
 
 /* define amplitude */
 if kAmpCurve>0 then	; attenuate dry signal completely if 'Amp.Curve' is positive	
  aInL	=	0
  aInR	=	0
 endif
 
 /* define LPF */
 if kLPFCurve>0 then			; if (Lowpass) curve is positive we need to apply maximum lowpass filtering to the first sound iteration (the dry signal)
  if kLPFType==2 then			; choose between filter types
   aInL		tone	aInL,cpsoct(4)
   aInR		tone	aInR,cpsoct(4)
  elseif kLPFType==3 then
   aInL		butlp	aInL,cpsoct(4)
   aInR		butlp	aInR,cpsoct(4)
  endif  
 endif

 /* define HPF */			; if (Highpass) curve is positive we need to apply maximum highpass filtering to the first sound iteration (the dry signal)
 if kHPFCurve>0 then
  if kHPFType==2 then
   aInL		atone	aInL,cpsoct(14)
   aInR		atone	aInR,cpsoct(14)
  elseif kHPFType==3 then
   aInL		buthp	aInL,cpsoct(14)
   aInR		buthp	aInR,cpsoct(14)
  endif  
 endif
 
 aMixL	ntrpol		aInL, aDelL, kMix	; dry/wet mixing
 aMixR	ntrpol		aInR, aDelR, kMix

	outs	aMixL*kLevel, aMixR*kLevel




 /* move display bars */
 if changed(kNumber)==1 then		; hide all
  reinit HideAndShow
 endif
 HideAndShow:
 icount	=	1
 loop0:
 Sident	sprintf	"Bars_ident%i",icount
 	chnset	"visible(0)",Sident
 	loop_le	icount,1,32,loop0
 icount	=	1
 loop1:
 Sident	sprintf	"Bars_ident%i",icount
 	chnset	"visible(1)",Sident
 	loop_lt	icount,1,i(kNumber),loop1
 rireturn
 
 if metro(5)==1 then
  if changed(kNumber,kTotTim,kWarp,kAmpCurve)==1 then
   reinit MoveBars
  endif
 endif
 MoveBars:
 icount	=	1
 inum	=	i(kNumber)
 iwid	=	450 * (i(kTotTim)/giMaxDelay)
 ipos	=	0
 loop:
 Sident	sprintf	"Bars_ident%i",icount 
 iRatio	pow	(icount-1)/(inum-1),i(kWarp)
 ipos	=	iwid * iRatio

 iAmpCurve	=	i(kAmpCurve)
 if iAmpCurve>-0.01&&iAmpCurve<0.01 then
  iAmpVal	=	1 
 elseif iAmpCurve<=0 then											; negative or zero curve values
  iAmpVal	pow	1-(icount/inum), octave((abs(iAmpCurve)*giCurveRange)-giCurveRange/2)		; calculate amplitude scaling value (will be a value between zero and 1). Each layer will have its own value. 
 else									 	; positive curve values
  iAmpVal	pow	(icount/inum), octave((abs(iAmpCurve)*giCurveRange)-giCurveRange/2)
 endif
 
 Smess	sprintf	"bounds(%i, %i,  1,%i)",ipos,20+(100*(1-iAmpVal)),100*iAmpVal
 	chnset	Smess,Sident
 	loop_le	icount,1,inum,loop
endin
		
</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>; BreakBeatCutter.csd
; Iain McCurdy, 2013.

; Break Beat Cut Up using the bbcut opcode with additional processing

; ==BBCUT=================================================================================================================
; 'Sub-division' determines the note duration used as the base unit in  cut-ups. 
; For example a value of 8 represents quavers (eighth notes), 16 represents semiquavers (sixteenth notes) and so on.                                                   
; 
; 'Bar Length' represents the number of beats per bar. For example, a value of 4 represents a 4/4 bar and so on. 
; 
; 'Phrase' defines the number of bars that will elapse before the cutting up pattern restarts from the beginning.          
; 
; 'Stutter' is a separate cut-up process which occasionally will take a very short fragment of the input audio and repeat
; it many times. 
; 
; 'Stutter Speed' defines the duration of each stutter in relation to 'Sub-division'. 
; If subdivision is 8 (quavers / eighth notes) and 'Stutter Speed' is 2 then each stutter will be a semiquaver / sixteenth note.
; 
; 'Stutter Chance' defines the frequency of stutter moments. 
; The range for this parameter is 0 to 1. Zero means stuttering will be very unlikely, 1 means it will be very likely.       
; 'Repeats' defines the number of repeats that will be employed in normal cut-up events.                                     
; When processing non-rhythmical, unmetered material it may be be more interesting to employ non-whole numbers for parameters such as 'Sub-division', 'Phrase' and 'Stutter Speed'.                                                      
; ========================================================================================================================




; ==FILTER================================================================================================================
; Additionally in this example a randomly moving band-pass filter has been implemented. 
; 
; 'Filter Mix' crossfades between the unfiltered bbcut signal and the filtered bbcut signal.   
; 
; 'Cutoff Freq.' consists of two small sliders which determine the range from which random cutoff values are derived.       
; 
; 'Interpolate<=>S&H' fades continuously between an interpolated random function and a sample and hold type random function. 
; 
; 'Filter Div.' controls the frequency subdivision with which new random cutoff frequency values are generated - a value of '1' means that new values are generated once every bar.                                    
; ========================================================================================================================



; ==WGUIDE================================================================================================================
; A waveguide effect can randomly and rhythmically cut into the audio stream
; 'Chance' defines the probability of this happening. 0=never 1=always
; The range of frequencies the effect will choose from is defined by the user as note values.
; Frequencies are quatised to adhere to equal temperament.
; ========================================================================================================================



; ==SQUARE MOD. (Square wave ring modulation)=============================================================================
; This effect can similarly randomly and rhythmically cut into the audio stream using the 'chance' control
; The range of frequencies the modulator waveform can move between is defined as 'oct' values.
; ========================================================================================================================


; ==F.SHIFT (Frequency Shifter)===========================================================================================
; Similar to the above except using a frequency shifter effect.
; ========================================================================================================================

<Cabbage>
form          size(440,470), caption("Break Beat Cutter"), pluginid("bbct") style("legacy")


groupbox bounds( 0,  0,440,170), text("CUTTER"), plant("cutter"),colour(20,20,20), FontColour(silver){
rslider bounds( 10, 25, 70, 70), colour("Tan"), trackercolour("Tan"), fontcolour("silver"), text("Sub-div."),       channel("subdiv"),  range(1,  512,  8, 1, 1)
rslider bounds( 80, 25, 70, 70), colour("Tan"), trackercolour("Tan"), fontcolour("silver"), text("Bar Length"),     channel("barlen"),  range(1,   16,  2, 1, 1)
rslider bounds(150, 25, 70, 70), colour("Tan"), trackercolour("Tan"), fontcolour("silver"), text("Phrase"),         channel("phrase"),  range(1, 512, 8, 1, 1)
rslider bounds(220, 25, 70, 70), colour("Tan"), trackercolour("Tan"), fontcolour("silver"), text("Repeats"),        channel("repeats"), range(1, 32, 2, 1, 1)
rslider bounds(290, 25, 70, 70), colour("Tan"), trackercolour("Tan"), fontcolour("silver"), text("Stut. Speed"),  channel("stutspd"), range(1, 32, 4, 1, 1)
rslider bounds(360, 25, 70, 70), colour("Tan"), trackercolour("Tan"), fontcolour("silver"), text("Stut. Chance"), channel("stutchnc"), range(0, 1.00, 0.5)
hslider bounds(  5, 95,425, 40), colour("Tan"), trackercolour("Tan"), fontcolour("silver"), textBox(1)    channel("BPM"), range(10,  500, 110,1,1)
label   bounds(198,127, 25, 11), text("BPM"), FontColour("silver")
label  bounds( 10,142, 80,12), text("Clock Source:")
button bounds( 90,140, 60,18), text("Internal","External"), channel("ClockSource"), value(0)
label   bounds(338,158, 100, 10), text("Iain McCurdy [2013]"), FontColour("grey"), align("right")
}



groupbox bounds( 0,170,440,100), text("FILTER"), plant("filter"), FontColour(silver),colour(20,20,20){
rslider bounds( 10, 25, 70, 70), colour(200,100,50,255), trackercolour(200,100,50,255), fontcolour("silver"), text("Mix"),    channel("FltMix"), range(0, 1.00, 0.6)
rslider bounds( 80, 25, 70, 70), colour(200,100,50,255), trackercolour(200,100,50,255), fontcolour("silver"), text("Division"),    channel("fltdiv"), range(1, 16, 1,1,1)
rslider bounds(150, 25, 70, 70), colour(200,100,50,255), trackercolour(200,100,50,255), fontcolour("silver"), text("Bandwidth"),    channel("bw"), range(0.1, 10, 1, 0.5, 0.001)
hslider bounds(220, 25,140, 35), colour(200,100,50,255), trackercolour(200,100,50,255), fontcolour("silver"),    channel("cfmin"), range(50, 10000, 50  ,0.5,0.1)
hslider bounds(220, 50,140, 35), colour(200,100,50,255), trackercolour(200,100,50,255), fontcolour("silver"),    channel("cfmax"), range(50, 10000, 10000,0.5,0.1)
label   bounds(254, 77, 80, 12), text("Cutoff Freq."), FontColour("white")
rslider bounds(360, 25, 70, 70), colour(200,100,50,255), trackercolour(200,100,50,255), fontcolour("silver"), text("Int./S&H"),    channel("i_h"), range(0, 1, 0)
}

groupbox bounds( 0,270,220,100), text("WAVE GUIDE"), plant("waveguide"), FontColour(silver),colour(20,20,20){
rslider bounds( 10, 25, 70, 70), colour(150,150,50,255), trackercolour(150,150,50,255), fontcolour("silver"), text("Chance"),    channel("WguideChnc"), range(0, 1.00, 0.2)
hslider bounds( 80, 25,140, 35), colour(150,150,50,255), trackercolour(150,150,50,255), fontcolour("silver"),    channel("wguidemin"), range(22, 100, 50,1,1)
hslider bounds( 80, 50,140, 35), colour(150,150,50,255), trackercolour(150,150,50,255), fontcolour("silver"),    channel("wguidemax"), range(22, 100, 70,1,1)
label   bounds(108, 77, 85, 12), text("Pitch Range"), FontColour("white")
}

groupbox bounds(220,270,220,100), text("SQUARE MOD."), plant("sqmod"), FontColour(silver),colour(20,20,20){
rslider bounds( 10, 25, 70, 70), colour(200,150,200,255), trackercolour(200,150,200,255), fontcolour("silver"), text("Chance"),    channel("SqModChnc"), range(0, 1.00, 0.2)
hslider bounds( 80, 25,140, 35), colour(200,150,200,255), trackercolour(200,150,200,255), fontcolour("silver"),    channel("sqmodmin"), range(1, 14.0,  6)
hslider bounds( 80, 50,140, 35), colour(200,150,200,255), trackercolour(200,150,200,255), fontcolour("silver"),    channel("sqmodmax"), range(1, 14.0, 12)
label   bounds(108, 77, 85, 12), text("Freq.Range"), FontColour("white")
}

groupbox bounds(0,370,220,100), text("FREQUENCY SHIFT"), plant("fshift"), FontColour(silver),colour(20,20,20){
rslider bounds( 10, 25, 70, 70), colour(250,110,250,255), trackercolour(250,110,250,255), fontcolour("silver"), text("Chance"),    channel("FshiftChnc"), range(0, 1.00, 0.2)
hslider bounds( 80, 25,140, 35), colour(250,110,250,255), trackercolour(250,110,250,255), fontcolour("silver"),    channel("fshiftmin"), range(-4000, 4000,-1000)
hslider bounds( 80, 50,140, 35), colour(250,110,250,255), trackercolour(250,110,250,255), fontcolour("silver"),    channel("fshiftmax"), range(-4000, 4000, 1000)
label   bounds(108, 77, 85, 12), text("Freq.Range"), FontColour("white")
}

groupbox bounds(220,370,220,100), text("OUTPUT"), plant("output"), FontColour(silver),colour(20,20,20){
rslider bounds( 10, 25, 70, 70), colour("Tan"), trackercolour("Tan"), fontcolour("silver"), text("Layers"),       channel("layers"), range(1, 20, 1,1,1)
rslider bounds( 80, 25, 70, 70), colour("Tan"), trackercolour("Tan"), fontcolour("silver"), text("Dry/Wet"),      channel("DryWet"), range(0, 1.00, 0.6)
rslider bounds(150, 25, 70, 70), colour("Tan"), trackercolour("Tan"), fontcolour("silver"), text("Level"),        channel("gain"),   range(0, 1.00, 0.75)
}
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-n -dm0
</CsOptions>

<CsInstruments>
sr = 44100
ksmps = 64
nchnls = 2
0dbfs=1
seed	0

gisine	ftgen	0,0,131072,10,1

opcode	BBCutIteration,aa,aaiiiiiiiii
 aL,aR,iBPS, isubdiv,  ibarlen,  iphrase, irepeats, istutspd, istutchnc, icount, ilayers	xin
 abbcutL		bbcutm	aL,   iBPS, isubdiv,  ibarlen,  iphrase, irepeats, istutspd, istutchnc
 abbcutR		bbcutm	aR,   iBPS, isubdiv,  ibarlen,  iphrase, irepeats, istutspd, istutchnc
 amixL	=	0
 amixR	=	0
 if icount<ilayers then
   amixL,amixR	BBCutIteration	aL,aR, iBPS, isubdiv,  ibarlen,  iphrase, irepeats, istutspd, istutchnc, icount+1, ilayers
 endif
 xout	abbcutL+amixL,abbcutR+amixL
endop

opcode	FreqShifter,a,aki
	ain,kfshift,ifn	xin					;READ IN INPUT ARGUMENTS
	areal, aimag hilbert ain				;HILBERT OPCODE OUTPUTS TWO PHASE SHIFTED SIGNALS, EACH 90 OUT OF PHASE WITH EACH OTHER
	asin 	oscili       1,    kfshift,     ifn,          0
	acos 	oscili       1,    kfshift,     ifn,          0.25	
	;RING MODULATE EACH SIGNAL USING THE QUADRATURE OSCILLATORS AS MODULATORS
	amod1	=		areal * acos
	amod2	=		aimag * asin	
	;UPSHIFTING OUTPUT
	aFS	= (amod1 - amod2)
		xout	aFS				;SEND AUDIO BACK TO CALLER INSTRUMENT
endop

instr 1	; read widgets
 gksubdiv 	chnget	"subdiv"	; read in widgets
 gkbarlen 	chnget	"barlen"
 gkphrase 	chnget	"phrase"
 gkrepeats	chnget	"repeats"
 gkstutspd	chnget	"stutspd"
 gkstutchnc	chnget	"stutchnc"

 gkClockSource	chnget	"ClockSource"
 if gkClockSource==0 then
  gkBPM    	chnget	"BPM"
 else
  gkBPM    	chnget	"HOST_BPM"
  gkBPM		limit	gkBPM, 10,500	
 endif

 gkfltdiv	chnget	"fltdiv"
 gkDryWet    	chnget	"DryWet"
 gkFltMix 	chnget	"FltMix"
 gkbw     	chnget	"bw"
 gkcfmin  	chnget	"cfmin"
 gkcfmax  	chnget	"cfmax"
 gki_h    	chnget	"i_h"
 gklayers    	chnget	"layers"
 gkgain		chnget	"gain"
 konoff		chnget	"onoff"
endin

instr	2
 kmetro		metro		4
 kSwitch	init	0
 if kmetro==1 then
  kSwitch	changed		gkBPM, gkrepeats, gkphrase, gkstutspd, gkstutchnc, gkbarlen, gksubdiv, gkfltdiv, gklayers	;GENERATE A MOMENTARY '1' PULSE IN OUTPUT 'kSwitch' IF ANY OF THE SCANNED INPUT VARIABLES CHANGE. (OUTPUT 'kSwitch' IS NORMALLY ZERO)
 endif
 if	kSwitch==1	then		;IF I-RATE VARIABLE CHANGE TRIGGER IS '1'...
 	reinit	UPDATE			;BEGIN A REINITIALISATION PASS FROM LABEL 'UPDATE'
 endif
 UPDATE:

 /* INPUT */
 aL,aR ins					; live input

;;;;  use a loop sound file for testing
;#define SOUNDFILE	#"loop.wav"#		; macro
; ilen	filelen	$SOUNDFILE			; length of sound file
; ibeats =	8				; number of beats in the drum loop
; ispd	=	(ilen/ibeats) * (i(gkBPM)/60)	; speed ratio for this sample to sync with master clock
; aL	diskin	$SOUNDFILE,ispd,0,1		; read sound file
; aR	=	aL				; right channel same as left

 iBPS	=	i(gkBPM)/60
 kmetro	metro	iBPS		; metronome used for triggering random parameter changes
 
 ; call UDO
 ;OUTPUT		OPCODE	        INPUT |   BPM      | SUBDIVISION | BAR_LENGTH | PHRASE_LENGTH | NUM.OF_REPEATS | STUTTER_SPEED | STUTTER_CHANCE	
 abbcutL,abbcutR	BBCutIteration	aL,aR, i(gkBPM)/60, i(gksubdiv),  i(gkbarlen),   i(gkphrase),    i(gkrepeats),   i(gkstutspd),   i(gkstutchnc),  1, i(gklayers)
 
 ;FILTER=================================================================================================================================================================
 ifreq	=	iBPS * i(gkfltdiv)			; FREQUENCY WITH WHICH NEW FILTER CUTOFF VALUES ARE GENERATED
 
 kcf1h		randomh	gkcfmin, gkcfmax, ifreq		; sample and hold random frequency values
 kcf1i		lineto	kcf1h, 1/ifreq			; interpolate values
 kcf1		ntrpol	kcf1i, kcf1h, gki_h   		; crossfade between interpolating and sample and hold type random values
 abbFltL	resonz	abbcutL, kcf1, kcf1*gkbw, 2	; band-pass filter
 abbMixL	ntrpol	abbcutL, abbFltL, gkFltMix	; crossfade between unfiltered and filter audio signal
 kcf2h		randomh	gkcfmin, gkcfmax, ifreq		;   RIGHT CHANNEL
 kcf2i		lineto	kcf2h, 1/ifreq			; 
 kcf2		ntrpol	kcf2i, kcf2h, gki_h   		; 
 abbFltR	resonz	abbcutR, kcf2, kcf2*gkbw, 2	; 
 abbMixR	ntrpol	abbcutR, abbFltR, gkFltMix	; 
 ;=======================================================================================================================================================================

 ;WGUIDE1================================================================================================================================================================
 kchance	chnget	"WguideChnc"
 kdice		trandom	kmetro,0,1
 if kdice<kchance then
  kwguidemin	chnget	"wguidemin"
  kwguidemax	chnget	"wguidemax"
  knum		randomh	kwguidemin,kwguidemax,iBPS
  afrq		interp	cpsmidinn(int(knum))
  kfb		randomi	0.8,0.99,iBPS/4
  kcf		randomi	800,4000,iBPS
  abbMixL	wguide1	abbMixL*0.7,afrq,kcf,kfb
  abbMixR	wguide1	abbMixR*0.7,afrq,kcf,kfb
 endif  
 ;=======================================================================================================================================================================

 ;SQUARE MOD==============================================================================================================================================================
 kchance	chnget	"SqModChnc"			; read in widgets
 ksqmodmin	chnget	"sqmodmin"			;
 ksqmodmax	chnget	"sqmodmax"			; 
 kDiceRoll	trandom	kmetro,0,1			; new 'roll of the dice' upon each new time period
 if kDiceRoll<kchance then				; if 'roll of the dice' is within chance boundary... 
  kratei	randomi	ksqmodmin,ksqmodmax,iBPS	; interpolating random function for modulating waveform frequency
  krateh	randomh	ksqmodmin,ksqmodmax,iBPS	; sample and hold random function for modulating waveform frequency
  kcross	randomi	0,1,iBPS			; crossfader for morphing between interpolating and S&H functions
  krate		ntrpol	kratei,krateh,kcross		; create crossfaded rate function
  amod		lfo	1,cpsoct(krate),2		; modulating waveform (square waveform)
  kcf		limit	cpsoct(krate)*4,20,sr/3		; cutoff freq for filtering some of the high freq. content of the square wave
  amod		clfilt	amod,kcf,0,2			; low-pass filter square wave
  abbMixL	=	abbMixL*amod			; ring modulate audio
  abbMixR	=	abbMixR*amod			;
 endif
 ;=======================================================================================================================================================================

 ;FSHIFT=================================================================================================================================================================
 kchance	chnget	"FshiftChnc"			; read in widgets                         
 kdice		trandom	kmetro,0,1			; new 'roll of the dice' upon each new time period                                                                         
 if kdice<kchance then					; if 'roll of the dice' is within chance boundary...                                                                           
  kfshiftmin	chnget	"fshiftmin"                     ; read in widgets                           
  kfshiftmax	chnget	"fshiftmax"			; 
  kfsfrqi	randomi	kfshiftmin,kfshiftmax,iBPS*2	; interpolating random function for modulating waveform frequency          
  kfsfrqh	randomh	kfshiftmin,kfshiftmax,iBPS*2	; sample and hold random function for modulating waveform frequency            
  kcross	randomi	0,1,iBPS*2			; crossfader for morphing between interpolating and S&H functions          
  kfsfrq	ntrpol	kfsfrqi,kfsfrqh,kcross          ; create crossfaded rate function  modulating waveform (square waveform)
  abbMixL	FreqShifter	abbMixL,kfsfrq,gisine   ;                                                 
  abbMixR	FreqShifter	abbMixR,kfsfrq,gisine   ;                                                         
 endif                                                  ;                                                                            
 ;=======================================================================================================================================================================

 rireturn						; RETURN FROM REINITIALISATION PASS TO PERFORMANCE TIME PASSES
 
 amixL	sum	aL*(1-gkDryWet), abbMixL*gkDryWet	;SUM AND MIX DRY SIGNAL AND BBCUT SIGNAL (LEFT CHANNEL)
 amixR	sum	aR*(1-gkDryWet), abbMixR*gkDryWet	;SUM AND MIX DRY SIGNAL AND BBCUT SIGNAL (RIGHT CHANNEL)




 outs	amixL*gkgain, amixR*gkgain			;SEND AUDIO TO OUTPUTS
endin

</CsInstruments>  
<CsScore>
i1 0 36000
i2 0 36000
</CsScore>
</CsoundSynthesizer>; CrossedDelays.csd
; Written by Iain McCurdy, 2016

; This effect implements a dual delay effect in which the feedbacks between the two channels are crossed over.
; This becomes particularly useful when we add in separate ring modulators or frequency shifters on each channel.

; It is intended that the delays will be used in a coherent rhythmic function therefore delay times are set by means of a tempo control 
;  (either by the Cabbage widget or from a host) and subsequent subdivisions for each channel.
; An assumption is made that the base time signature 4/4, therefore a tempo of 60 bpm with divisions of 1/4 will result in delays of 1 second

; Feedback can be greater than a ratio of 1 without overloading occuring, this is on account of the gain reducing effect of ring modulating.
; Nonetheless a BDJ clip is activated if feedback is raised above 1 to protect against samples out of range is feedback is pushed even further.
; It should be born in mind that feeding back ring modulators can produce aliasing artefacts - in this context they are regarded as a characteristic of the effect.

; --LEFT_INPUT---+---DELAY_1----MOD_1---+---OUT_1--->
;                 \                    /
;                  \ /----[F.BACK]----/
;                   X
;                  / \----[F.BACK]----\
;                 /                    \
; --RIGHT_INPUT--+---DELAY_2----MOD_2---+---OUT_2--->

; Controls
; --------
;  [DELAYS]
; Clock Source	-	tempo source can be from the built-in 'Tempo' control or from the host's tempo, if used as a VST plugin
; Tempo			-	Cabbage defined tempo used in defining actual delay times (in conjunction with subdivision values)
; Mix			-	dry/wet mix for the effect
; Feedback		-	delay feedback. Caution: this can be set above 100%, feedback will be attenuated by ring modulation (not frequency shifting),
; 					 but if feedback is greater than '1', soft clipping will be applied to protect against samples out of range
; Subdiv.1/Subdiv.2	-	metrical subdivisionsof the two delay times

;  [MODULATION]
; Type			-	choose between ring modulation and frequency shifting
; Freq.1/Freq.2	-	the frequencies of the ring modulators or frequency shifters

;  [OUTPUT]
; Pan1/Pan2 	-	pan locations of the outputs of the two delays (OUT_1 and OUT_2 in the diagram above)
; Level			-	output level (dry and wet signals)

<Cabbage>
form caption("Crossed Delays") size(815, 130), pluginid("CrDl") style("legacy")


image   bounds(  5,  5,370,120), outlinethickness(1), outlinecolour("white"), colour("black"), plant("Delays_Plant")
{
label    bounds(  0,  4,370, 12), text("D E L A Y S")
label    bounds(  5, 20, 80, 12), text("Clock Source")
combobox bounds(  5, 35, 80, 20), channel("ClockSource"), text("Cabbage","Host")
rslider  bounds( 75, 20, 90, 90), text("Tempo"), channel("Tempo"), valuetextbox(1), textbox(1), range(20,500,60,1,0.1)
rslider  bounds(140, 20, 90, 90), text("Mix"), channel("Mix"), valuetextbox(1), textbox(1), range(0,1,0.5,1,0.01)
rslider  bounds(205, 20, 90, 90), text("Feedback"), channel("Feedback"), valuetextbox(1), textbox(1), range(0,3,0.5,1,0.01)
label    bounds(285, 20, 70, 13), text("Subdiv.1")
combobox bounds(285, 33, 70, 20), channel("Div1"), text("1/1","1/2","1/3","1/4","1/6","1/8","1/12","1/16","1/24","1/32","1/48","1/64","1/96","1/128"), value(4)
label    bounds(285, 60, 70, 13), text("Subdiv.2")
combobox bounds(285, 73, 70, 20), channel("Div2"), text("1/1","1/2","1/3","1/4","1/6","1/8","1/12","1/16","1/24","1/32","1/48","1/64","1/96","1/128"), value(3)
}

image   bounds(380,  5,225,120), outlinethickness(1), outlinecolour("white"), colour("black"), plant("RM_Plant")
{
label    bounds(  0,  4,225, 12), text("M O D U L A T I O N")
label    bounds(  5, 55, 80, 12), text("Type")
combobox bounds(  5, 70, 80, 20), channel("ModType"), text("Ring Mod.","Freq.Shift"), value(2)
checkbox bounds(  5, 30,120, 12), text("On/Off"), channel("ModOnOff"), value(1)
rslider  bounds( 75, 20, 90, 90), text("Freq.1"), channel("Freq1"), valuetextbox(1), textbox(1), range(-6000,6000,200,1,1)
rslider  bounds(140, 20, 90, 90), text("Freq.2"), channel("Freq2"), valuetextbox(1), textbox(1), range(-6000,6000,333,1,1)
}

image   bounds(610,  5,200,120), outlinethickness(1), outlinecolour("white"), colour("black"), plant("Output_Plant")
{
label    bounds(  0,  4,200, 12), text("O U T P U T")
rslider  bounds(-10, 20, 90, 90), text("Pan 1"), channel("Pan1"), valuetextbox(1), textbox(1), range(0,1,0)
rslider  bounds( 55, 20, 90, 90), text("Pan 2"), channel("Pan2"), valuetextbox(1), textbox(1), range(0,1,1)
rslider  bounds(120, 20, 90, 90), text("Level"), channel("Level"), valuetextbox(1), textbox(1), range(0,1,1)
}

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-n -d -+rtmidi=NULL -M0 -m0d 
</CsOptions>

<CsInstruments>

sr = 44100
ksmps = 16
nchnls = 2
0dbfs = 1

gkDivs[]	fillarray	1,2,3,4,6,8,12,16,24,32,48,64,96,128

opcode	FreqShifterSimple,a,aki					; SIMPLE FREQUENCY SHIFTER
	asig,kfshift,ifn	xin				; READ IN INPUT ARGUMENTS
	areal, aimag hilbert asig				; HILBERT OPCODE OUTPUTS TWO PHASE SHIFTED SIGNALS, EACH 90 OUT OF PHASE WITH EACH OTHER
	asin 	oscili       1,    kfshift,     ifn,          0
	acos 	oscili       1,    kfshift,     ifn,          0.25	
	;RING MODULATE EACH SIGNAL USING THE QUADRATURE OSCILLATORS AS MODULATORS
	amod1	=		areal * acos
	amod2	=		aimag * asin	
	;UPSHIFTING OUTPUT
	ares	= (amod1 - amod2)				; MIX OUTPUTS (INVERTED WITH RESPECT TO EACH OTHER)
		xout	ares					; SEND AUDIO BACK TO CALLER INSTRUMENT
endop

gisine	ftgen	0,0,131072,10,1

instr	1
; aSig		diskin2	"808loopMono.wav",1,0,1
; ilen		filelen	"808loopMono.wav"
; klen		init	ilen

 kbpm		chnget	"HOST_BPM"
 kClockSource	chnget	"ClockSource"
 kClockSource	init	1
 if kClockSource==1 then				;if internal clock source has been chosen...
  ktempo	chnget	"Tempo"				;tempo taken from GUI knob control
 else
  ktempo	chnget	"bpm"				;tempo taken from host BPM
  ktempo	limit	ktempo,20,500		;limit range of possible tempo values. i.e. a tempo of zero would result in a delay time of infinity.
 endif

 aL,aR		ins
 klen		=		60*2/ktempo

 kMix		chnget	"Mix" 
 kFeedback	chnget	"Feedback"
 kModOnOff	chnget	"ModOnOff"
 kFreq1		chnget	"Freq1"
 kFreq2		chnget	"Freq2" 
 kDiv1		chnget	"Div1"
 kDiv2		chnget	"Div2"
 kModType	chnget	"ModType"
 
 aTap1,aTap2	init	0
 
 aBuf		delayr	60*2/20
 aTap1		deltapi	klen/gkDivs[kDiv1]
 aMod1		poscil	1,kFreq1
 if kModOnOff==1 then
  if kModType==1 then
   aTap1		*=		aMod1
  else
   aTap1		FreqShifterSimple	aTap1,kFreq1,gisine
  endif
 endif
 			delayw	aL + (aTap2 * kFeedback)
 
 aBuf		delayr	60*2/20
 aTap2		deltapi	klen/gkDivs[kDiv2]
 aMod2		poscil	1,kFreq2
 if kModOnOff==1 then
  if kModType==1 then
   aTap2		*=		aMod2
  else
   aTap2		FreqShifterSimple	aTap2,kFreq2,gisine
  endif                                               
 endif
 			delayw	aR + (aTap1 * kFeedback)
 
 if kFeedback>1 then
  aTap1 clip 	aTap1, 0, 0dbfs, 0dbfs
  aTap2 clip 	aTap2, 0, 0dbfs, 0dbfs
 endif

 kPan1		chnget	"Pan1"
 kPan2		chnget	"Pan2"
 kLevel		chnget	"Level"
 			
 aMixL		ntrpol	aL, aTap1*(1-kPan1) + aTap2*(1-kPan2), kMix
 aMixR		ntrpol	aR, aTap1*kPan1 + aTap2*kPan2, kMix
			outs	aMixL*kLevel, aMixR*kLevel
endin

</CsInstruments>

<CsScore>
i 1 0 [60*60*24*7] 
</CsScore>

</CsoundSynthesizer>
; DelayGrain.csd
; Iain McCurdy, 2013
; 
; CONTROLS
; --------
; Grain Size		--	range of possible grain sizes (in seconds)
; Density			--	grain density in grains per second (note that the addition of delay will disrupt the regularity of grains)
; Delay			--	range of delay times possible (in seconds)
; Transpose		--	range of transpositions (in semitones)
; Spread			--	random panning spread of grains
; Amplitude Decay		--	the larger this value, the more grains are delayed, the more their amplitudes will be lowered
; Reversal Proability	--	probability of material within the grains being played backwards: 0 = all forwards
; 			                                                                          1 = all backwards
; 			                                                                          0.5 = 50:50
; 			        reversal might be hard to hear unless grain size is large
; Mix			--	dry/wet mix
; Level			--	output level (both dry and wet)
; Grain Env.		--	sets the amplitude enveloping window for each grain
; 				Hanning: natural sounding soft attack, soft decay envelope
; 				Half-sine: like the hanning but with a slightly sharper attack and decay
; 				Decay 1: a percussive decay envelope with linear segments
; 				Decay 2: a percussive decay envelope with a exponential decay segment. Probably more natural sounding than 'Decay 1' but longer grain sizes may be necessary
; 				Gate: sharp attack and decay. Rather synthetic sounding.
; Delay Distr.		--	random delay time distribution: exponential, linear or logarithmic. Effect are quite subtle but exponential might be most natural sounding.

<Cabbage>
form caption("Delay Grain") size(410, 520), pluginid("DGrn") style("legacy")

;hslider2 bounds(  5,  5, 400, 30), channel("GSize1","GSize2"), min(0.01), max(0.09)    range(0.005, 2, 0.01, 0.5, 0.0001)
hrange   bounds(  5,  5, 400, 30), channel("GSize1","GSize2"), range(0.005, 2, 0.01:0.09, 0.5, 0.0001)
label    bounds(161, 29,  90, 11), text("G R A I N   S I Z E"), fontcolour(105,105,255)

hslider  bounds(  5, 50, 400, 25), channel("Dens"), range(0.2, 2000, 50,0.5,0.001)
label    bounds(172, 69,  65, 11), text("D E N S I T Y"), fontcolour(105,105,255)

;hslider2 bounds(  5, 90, 400, 30), channel("Dly1","Dly2"), min(0.01), max(0.5)    range(0, 5, 0.01, 0.5, 0.0001)
hrange   bounds(  5,  90, 400, 30), channel("Dly1","Dly2"), range(0, 5, 0.01:0.5, 0.5, 0.0001)
label    bounds(180,114,  50, 11), text("D E L A Y"), fontcolour(105,105,255)

;hslider2 bounds(  5,140, 400, 30), channel("Trns1","Trns2"), min(0), max(0)    range(-12, 12, 0, 1, 0.001)
hrange   bounds(  5, 140, 400, 30), channel("Trns1","Trns2"), range(-12, 12, 0:0, 1, 0.001)
label    bounds(162,164,  88, 11), text("T R A N S P O S E"), fontcolour(105,105,255)

hslider  bounds(  5,195, 400, 25), channel("PanSpread"), range(0, 1.00, 0.5,1,0.001)
label    bounds(158,214,  95, 11), text("P A N   S P R E A D"), fontcolour(105,105,255)

hslider  bounds(  5,240, 400, 25), channel("AmpSpread"), range(0, 1.00, 0.5,1,0.001)
label    bounds(158,259,  95, 11), text("A M P   S P R E A D"), fontcolour(105,105,255)

hslider  bounds(  5,280, 400, 25), channel("FiltSpread"), range(0, 1.00, 0.5,1,0.001)
label    bounds(147,299, 120, 11), text("F I L T E R   S P R E A D"), fontcolour(105,105,255)

hslider  bounds(  5,320, 400, 25), channel("ampdecay"), range(0, 1.00, 0.5,1,0.001)
label    bounds(131,339, 150, 11), text("A M P L I T U D E   D E C A Y"), fontcolour(105,105,255)

hslider  bounds(  5,360, 400, 25), channel("reverse"), range(0, 1.00, 0,1,0.001)
label    bounds(112,379, 190, 11), text("R E V E R S A L   P R O B A B I L I T Y"), fontcolour(105,105,255)

hslider  bounds(  5,400, 400, 25), channel("mix"), range(0, 1.00, 1,1,0.001)
label    bounds(189,419,  30, 11), text("M I X"), fontcolour(105,105,255)

hslider  bounds(  5,440, 400, 25), channel("level"), range(0, 2.00, 1, 0.5, 0.001)
label    bounds(180,459,  50, 11), text("L E V E L"), fontcolour(105,105,255)

label    bounds( 19,475,  70, 11), text("GRAIN ENV."), fontcolour(105,105,255)
combobox bounds( 10,486,  90, 17), channel("window"), value(1), text("Hanning","Half Sine","Decay 1","Decay 2","Gate")

label    bounds(117,475,  75, 11), text("DELAY DISTR."), fontcolour(105,105,255)
combobox bounds(110,486,  90, 17), channel("DlyDst"), value(1), text("Exp.","Lin.","Log")

label    bounds(  5,508, 160, 11), text("Author: Iain McCurdy |2013|"), FontColour("grey")
</Cabbage>

<CsoundSynthesizer>
<CsOptions>
-dm0 -n
</CsOptions>
<CsInstruments>
sr = 44100
ksmps = 32
nchnls = 2
0dbfs = 1

;Author: Iain McCurdy (2013)

; window functions
giwfn1	ftgen	0,  0, 131072,  9,   .5, 1, 	0 				; HALF SINE
giwfn2	ftgen	0,  0, 131072,  7,    0, 3072,  1, 128000,     0		; PERCUSSIVE - STRAIGHT SEGMENTS
giwfn3	ftgen	0,  0, 131072, 16,    0, 3072,0,1, 128000,-2,  0		; PERCUSSIVE - EXPONENTIAL SEGMENTS
giwfn4	ftgen	0,  0, 131072,  7,     0, 3536,  1, 124000,     1, 3536, 0	; GATE - WITH ANTI-CLICK RAMP UP AND RAMP DOWN SEGMENTS
giwfn5	ftgen	0,  0, 131072,  7,    0, 128000,1, 3072,       0		; REVERSE PERCUSSIVE - STRAIGHT SEGMENTS
giwfn6	ftgen	0,  0, 131072,  5, .001, 128000,1, 3072,   0.001		; REVERSE PERCUSSIVE - EXPONENTIAL SEGMENTS
giwfn7	ftgen	0,  0, 131072,  20,   2, 1					; HANNING WINDOW
giwindows	ftgen	0,0,8,-2,giwfn7,giwfn1,giwfn2,giwfn3,giwfn4

giBufL	ftgen	0,0,1048576,-2,0	; function table used for storing audio
giBufR	ftgen	0,0,1048576,-2,0	; function table used for storing audio

gigaussian	ftgen	0,0,4096,20,6,1,1	; a gaussian distribution

gaGMixL,gaGMixR	init	0	; initialise stereo grain signal

	instr	1			; grain triggering instrument
kGSize1	chnget	"GSize1"		; grain size limit 1
kGSize2	chnget	"GSize2"		; grain size limit 2
kDens	chnget	"Dens"			; grain density
kDly1	chnget	"Dly1"			; delay time limit 1
kDly2	chnget	"Dly2"                  ; delay time limit 2
kTrns1	chnget	"Trns1"			; transposition in semitones
kTrns2	chnget	"Trns2"
kPanSpread	chnget	"PanSpread"	; random panning spread
kAmpSpread	chnget	"AmpSpread"	; random amplitude spread
kFiltSpread	chnget	"FiltSpread"	; random filter spread
kreverse	chnget	"reverse"	; reversal probability
kampdecay	chnget	"ampdecay"	; amount of delay->amplitude attenuation
kwindow	chnget	"window"		; window
kDlyDst	chnget	"DlyDst"		; delay time distribution
kmix	chnget	"mix"			; dry/wet mix
klevel	chnget	"level"			; output level (both dry and wet signals)

aL, aR	ins				; read audio input
	outs	aL*klevel*(1-kmix),aR*klevel*(1-kmix)

/* WRITE TO BUFFER TABLES */
ilen	=	ftlen(giBufL)		; table length (in samples)
aptr	phasor	sr/ilen			; phase pointer used to write to table
aptr	=	aptr*ilen		; rescale pointer according to table size
	tablew	aL, aptr, giBufL	; write audio to table
	tablew	aR, aptr, giBufR	; write audio to table
kptr	downsamp	aptr		; downsamp pointer to k-rate

ktrig		metro	kDens		; grain trigger

/* GRAIN SIZE */
kGSize		random	0,1		; random value 0 - 1
;kGSize	expcurve	kGSize,50	; exponentially redistribute range 0 - 1
kMinGSize	min	kGSize1,kGSize2	; find minimum grain size limit
kMaxGSize	max	kGSize1,kGSize2	; find maximum grain size limit
kGSize		scale	kGSize,kMaxGSize,kMinGSize	; rescale random value according to minimum and maximum limits

/* DELAY TIME */
kDly	random	0,1			; uniform random value 0 - 1
if kDlyDst=1 then			; if delay time distribution is exponential
 kDly	expcurve	kDly,100	; exponential distrubution range 0 - 1
elseif kDlyDst=3 then			; .. or if logarithmic
 kDly	logcurve	kDly,100	; exponential distrubution range 0 - 1
endif					; (other linear so do not alter)
if kDly1=kDly2 then
 kMinDly	=	kDly1		; delays can't be the same value!!	 
 kMaxDly	=	kDly2+0.001
else	
 kMinDly	min	kDly1,kDly2		; find minimum delay time limit
 kMaxDly	max	kDly1,kDly2		; find maximum delay time limit
endif

ioffset	=	1/sr			; delay offset (can't read at same location as write pointer!)
kDly	scale		kDly,kMaxDly,kMinDly; distribution rescaled to match the user defined limits

/* CALL GRAIN */
;		          p1 p2         p3     p4   p5         p6       p7   p8              p9             p10       p11         p12     p13        p14         p15    p16
schedkwhen	ktrig,0,0,2,kDly+0.0001,kGSize,kptr,kPanSpread,kreverse,kDly,kMinDly+ioffset,kMaxDly+0.0001,kampdecay,klevel*kmix,kwindow,kAmpSpread,kFiltSpread,kTrns1,kTrns2	; call grain instrument
	endin

instr	2				; grain instrument
iGStart	=	p4			; grain start position (in samples)
ispread	=	p5			; random panning spread
ireverse=	(rnd(1)>p6?1:-1)	; decide fwd/bwd status
iwindow	table	p12-1,giwindows		; amplitude envelope shape for this grain

/* AMPLITUDE CONTROL */
idly	=	p7					; delay time
iMinDly	=	p8					; minimum delay
iMaxDly	=	p9					; maximum delay
iampdecay=	p10					; amount of delaytime->amplitude attenuation
ilevel	=	p11					; grain output level
iAmpSpread	=	p13
iFiltSpread	=	p14

iRto	divz	idly-iMinDly , iMaxDly-iMinDly, 0	; create delay:amplitude ration (safely)
iamp	=	(1 - iRto) ^ 2				; invert range
iamp	ntrpol	1,iamp,iampdecay			; mix flat amplitude to scaled amplitude according to user setting
iRndAmp	random	1-iAmpSpread, 1				; random amplitude value for this grain
iamp	=	iamp*iRndAmp				; apply random amplitude

/* TRANSPOSITION */
iTrns	random	p15,p16
iRto	=	semitone(iTrns)
if iRto>1 then
 iStrtOS	=	(iRto-1)  * sr * p3
else
 iStrtOS	=	0
endif

aline	line	iGStart-iStrtOS,p3,iGStart-iStrtOS+(p3*iRto*sr*ireverse)	; grain pointer
aenv	oscili	iamp,1/p3,iwindow			; amplitude envelope
aL	tablei	aline,giBufL,0,0,1			; read audio from table 
aR	tablei	aline,giBufR,0,0,1			; read audio from table

if iFiltSpread>0 then
 iRndCfOct	random	14-(iFiltSpread*10),14
 iRndCf		=	cpsoct(iRndCfOct)
 aL		butlp	aL,iRndCf
 aR		butlp	aR,iRndCf
endif


ipan	random	0.5-(ispread*0.5),0.5+(ispread*0.5)	; random pan position for this grain
gaGMixL	=	gaGMixL + (aL*aenv*ipan*ilevel)		; left channel mix added to global variable
gaGMixR	=	gaGMixR + (aR*aenv*(1-ipan)*ilevel)	; right channel mix added to global variable
endin

instr	3						; output instrument (always on)
	outs	gaGMixL,gaGMixR				; send global audio signals to output
	clear	gaGMixL,gaGMixR				; clear global audio variables
endin

</CsInstruments>

<CsScore>
i 1 0 [60*60*24*7]	; read audio, write to buffers, call grains.
i 3 0 [60*60*24*7]	; output
</CsScore>

</CsoundSynthesizer>; LiveSndwarp.csd
; Iain McCurdy (2012)
; 
; Description and Instructions
; ----------------------------
; 
; This instrument implements live granulation of an audio input stream using the sndwarp opcode.                         
; 
; Live audio from the first input channel (left input if stereo) is written into a function table from which sndwarp reads 
; audio. (If 'stereo in/out' is chosen from 'In/Out Mode' then audio from the second/right channel is written into a second 
; table.) The key is that manual pointer read mode is used with sndwarp (as opposed to time-stretch mode) and that the read 
; pointer follows on behind the pointer which is used to write audio into the function table(s). Some care is needed to ensure 
; that the read pointer does not 'overtake' the write pointer (which would result in dicontinuities in the audio it reads). 
; This could be possible if pitch transposition upwards of grains is used as the grain pointer is then moving faster than the 
; write pointer. This example prevents this from happening internally so the user does not need to worry. The user can also 
; define a random offset for the grain read pointer using the 'Grain Delay' settings. Delay times are randomly chosen 
; according to a 'betarand' distribution the 'beta' of which the user can set: if distribution shape is 1 the distribution is 
; uniform, if it is 2 the distribution is linear and beyond 2 it is increasingly exponential.
; 
; Note that 'Size' (grain size) and 'Size Rnd.' (random grain size) are i-rate variables so that changing them requires 
; reinitialisation in the orchestra. For this reason discontinuity in the audio output can be heard when they are modified.
; Grain Size and Size Random (bandwith) are in sample frames. Divide by sample rate to derive a value in seconds.
; 
; Pitch transposition can be set using either the 'Pitch' knob (ratio multiplier) or 'Semis' (transposition in semitones).
; Changes made to 'Semis' will be reflected in the setting of the 'Pitch' knob, but not vice versa.
; Pitch can also be controlled through MIDI input (in which case 'Pitch' and 'Semis' will be ignored). Using MIDI will 
; polyphony will be possible. If you intend to use MIDI to start and stop sndwarp instances, turn 'On/Off [MIDI]' off.
; You can also adjust the MIDI note at which unison (no transposition) will occur using the 'Uni.Note' knob.
; 
; Sound output from sndwarp can be fed back into the input to be mixed with the live audio in. The amount of feedback can be 
; controlled using the 'Feedback' slider. Using high levels of feedback can result in overloading but this will also be 
; dependent upon other factors such as random delay time, grain size (window size), density and transposition so user caution 
; is advised. If the 'clip' button is activated the feedback signal will be clipped at the clip level set (a ratio of then 
; maximum amplitude) providing at least some control over a runaway feedback loop. Note that 'Clip Lev.' defines the amplitude 
; at which clipping begins, therefore lower settings will result in the signal being clipped sooner. The feedback signal can 
; also be filtered by a lowpass filter.
; 
; If 'balance' is activated the output of sndwarp is dynamically balanced with the input signal. This can be useful for 
; compensating for increases in amplitude caused when 'Number of Overlaps' (grain density) is increased. There are 3 
; mono/stereo modes: 'mono in - mono out (x2)', 'mono in - stereo out' (stereo effect is created using sndwarp's built-in 
; window/grain size randomisation, and 'stereo in - stereo out' mode.
; 
; The buffer size used in the example is just under 23 seconds long (function table size 1048576 at sr=44100). This could be 
; enlarged if required but bear in mind that sndwarp needs a power of two table size.        
; 
; Activating 'Freeze' will pause writing of live audio to the function table and allow the user to manually navigate through 
; the buffered audio. The feedback loop will also be deactivated when 'freeze' is active.

<Cabbage>
form caption("Live Sndwarp") size(530, 495), pluginid("lwrp") style("legacy")

groupbox bounds(  0,  0, 300,100), text("Master"), colour(30, 30, 40), fontcolour(255,125,125), plant("Master")
{
checkbox bounds( 10, 28, 110, 20), colour("yellow"), channel("OnOff"),  value(1), text("On/Off [MIDI]"), trackercolour("red")
label    bounds( 22, 53,  80, 13), text("In/Out Mode")
combobox bounds( 10, 69, 100, 20), channel("monostereo"), value(2), text("mono","stereo out","stereo in/out")
rslider  bounds(115, 30,  60, 60), text("In Gain"),  channel("InGain"), range(0, 2.00, 1, 0.5), colour( 67, 99, 99), trackercolour(207,239,239)
rslider  bounds(175, 30,  60, 60), text("Out Gain"), channel("amp"),    range(0, 2.00, 1, 0.5), colour( 67, 99, 99), trackercolour(207,239,239)
rslider  bounds(235, 30,  60, 60), text("Mix"),      channel("mix"),    range(0, 1.00, 1),      colour( 67, 99, 99), trackercolour(207,239,239)
}

groupbox bounds(300,  0, 230,100), text("Feedback - CAUTION!"), colour(25, 25, 35), fontcolour(250,120,120), plant("Feedback")
{
rslider  bounds(  5, 30,  60, 60), text("Amount"), channel("feedback"), range(0, 1.00, 0), colour( 67, 99, 99), trackercolour(207,239,239)
checkbox bounds( 65, 35,  70, 20), colour("yellow"), channel("clip"),  value(1), text("Clip"), trackercolour("red")
checkbox bounds( 65, 65,  70, 20), colour("yellow"), channel("LPF_On"),  value(0), text("LPF"), trackercolour("red")
rslider  bounds(110, 30,  60, 60), text("Clip Lev."), channel("ClipLev"), range(0.01, 1, 0.5, 0.5), colour( 67, 99, 99), trackercolour(207,239,239)
rslider  bounds(165, 30,  60, 60), text("LPF"), channel("Cutoff"), range(20, 20000,  4000, 0.5), colour( 67, 99, 99), trackercolour(207,239,239)
}

groupbox bounds(  0,100, 530,100), text("Grains"), colour(35, 35, 45), fontcolour(255,130,130), plant("Grains")
{
rslider  bounds(  5, 30,  60, 60), text("Size"), channel("wsize"), range(1, 88200, 7000, 0.25, 1), colour( 67, 99, 99), trackercolour(207,239,239)
rslider  bounds( 65, 30,  60, 60), text("Size Rnd."), channel("rnd"), range(0, 30000, 1000, 0.375, 1), colour( 67, 99, 99), trackercolour(207,239,239)
rslider  bounds(125, 30,  60, 60), text("Pitch"), channel("pch"), range(0.01, 8, 1, 0.5), colour( 67, 99, 99), trackercolour(207,239,239)
rslider  bounds(185, 30,  60, 60), text("Semis"), channel("semis"), range(-48, 48, 0,1,1), colour( 67, 99, 99), trackercolour(207,239,239)
rslider  bounds(245, 30,  60, 60), text("Density"), channel("olaps"), range(1, 100, 10, 1, 1), colour( 67, 99, 99), trackercolour(207,239,239)
label    bounds(305, 25, 100, 13), text("Grain Envelope")
combobox bounds(305, 41, 100, 20), channel("wfn"), value(1), text("Half Sine","Perc. 1","Perc. 2","Gate","Rev. Perc. 1 ","Rev. Perc. 2")
checkbox bounds(315, 70, 100, 20), colour("yellow"), channel("balance"),  value(0), text("Balance")
rslider  bounds(405, 30,  60, 60), text("Delay"), channel("dly"), range(0, 5, 0.01, 0.5), colour( 67, 99, 99), trackercolour(207,239,239)
rslider  bounds(465, 30,  60, 60), text("Distr."), channel("beta"), range(1, 16.0, 1, 0.5), colour( 67, 99, 99), trackercolour(207,239,239)
}

groupbox bounds(  0,200,530,165), text("Freeze"), colour(45, 45, 55), fontcolour(255,100,100), plant("Freeze")
{
button   bounds( 10, 25, 80, 20), fontcolour:0(50,50,100), fontcolour:1(205,205,255), colour:0(0,0,10), colour:1(100,100,150), channel("freeze"), text("FREEZE","FREEZE"),  value(0)
hslider  bounds( 90, 29,430, 10), text("Port.Time"), channel("ManPtrPort"), range(0, 1.00, 0.5), colour( 67, 99, 99), trackercolour(207,239,239)
gentable bounds( 10, 50,510, 80), tablenumber(1), tablecolour("lime"), amprange(-1,1,1), identchannel(table), zoom(-1), fill(0)
image    bounds(518, 50,  2, 80), colour(200,200,200,100), identchannel("wiper")
hslider  bounds(  5,132,522, 11), channel("ManPtr"), range(-1.00, 0, 0, 1, 0.001), colour( 67, 99, 99), trackercolour(207,239,239)
label    bounds(220,145,100, 13), text("Manual Pointer")
}

groupbox bounds(  0,365,530,100), text("MIDI"), colour(30, 30, 40), fontcolour(255,100,100), plant("MIDI")
{
rslider  bounds( 10, 35, 60, 60), text("Uni.Note"), channel("UniNote"), range(0, 127, 72,1,1), colour( 67, 99, 99), trackercolour(207,239,239)
keyboard bounds( 80,  0,450,100)
}
image bounds( 5, 470, 215, 20), colour(75, 85, 90, 100), plant("credit"), outlinethickness(0){
label bounds( 3,   3, 210, 14), text("Author: Iain McCurdy |2012|"), fontcolour("white")
}
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1
massign	0,2

giview		ftgen	1, 0, 512, 2, 0		; display buffer

gibuffer	ftgen	0, 0, 1048576, 2, 0	; Buffer table. Roughly 23 seconds duration.
gibufferR	ftgen	0, 0, 1048576, 2, 0	; right channel

;GRAIN ENVELOPE WINDOW FUNCTION TABLES:
giwfn1	ftgen	0,  0, 131072,  9,   .5, 1, 	0 							; HALF SINE
giwfn2	ftgen	0,  0, 131072,  7,    0, 3072,  1, 128000,     0			; PERCUSSIVE - STRAIGHT SEGMENTS
giwfn3	ftgen	0,  0, 131072,  5, .001, 3072,  1, 128000, 0.001			; PERCUSSIVE - EXPONENTIAL SEGMENTS
giwfn4	ftgen	0,  0, 131072,  7,    0, 1536,  1, 128000,     1, 1536, 0	; GATE - WITH ANTI-CLICK RAMP UP AND RAMP DOWN SEGMENTS
giwfn5	ftgen	0,  0, 131072,  7,    0, 128000,1, 3072,       0			; REVERSE PERCUSSIVE - STRAIGHT SEGMENTS
giwfn6	ftgen	0,  0, 131072,  5, .001, 128000,1, 3072,   0.001			; REVERSE PERCUSSIVE - EXPONENTIAL SEGMENTS

instr	1
	gkOnOff		chnget	"OnOff"
	ktrigger	trigger	gkOnOff,0.5,0
	schedkwhen	ktrigger,0,0,2,0,-1

	ginsamp		=	ftlen(gibuffer)-1			;index of the final sample in the function table

	gkamp		chnget	"amp"
	gkInGain	chnget	"InGain"
	gkmix		chnget	"mix"
	gkbalance	chnget	"balance"
	gkmonostereo	chnget	"monostereo"
	gkfback		chnget	"feedback"
	gkclip  	chnget	"clip"
	gkClipLev  	chnget	"ClipLev"
	gkCutoff	chnget	"Cutoff"
	gkpch		chnget	"pch"
	gkLPF_On  	chnget	"LPF_On"
	gkwsize		chnget	"wsize"
	gkwsize		=	int(gkwsize)	; workaround
	gkrnd		chnget	"rnd"
	gkornd		=	int(gkrnd)	; workaround
	gkolap		chnget	"olaps"
	gkolap		=	int(gkolap)	; workaround
	gkwfn		chnget	"wfn"
	gkdly		chnget	"dly"
	gkbeta		chnget	"beta"
	gkfreeze	chnget	"freeze"
	gkManPtrPort	chnget	"ManPtrPort"
	gkManPtr	chnget	"ManPtr"
	gkUniNote	chnget	"UniNote"

	ktrigger	trigger	gkfreeze,0.5,1				; if 'freeze' switch is turned off...
	if ktrigger==1 then						
	 chnset	1-ktrigger,"ManPtr"					; reset Manual Pointer slider to its default (maximum) position
	endif

	ain	inch	1						; read audio input from the left input channel
	ain	=	ain*gkInGain					; scale input signal according to 'In Gain' control position
		outch	1,ain*(1-gkmix)					; send some dry signal to output according to dry/wet 'Mix' control position
	gaFBackSig,gaFBackSigR	init	0				; audio feedback signal (initialised for first performance iteration)
	
	/*DC offset filter feedback signal*/
	aFBackSig	dcblock2	gaFBackSig			; filter dc offset from left channel feedback signal
	if gkmonostereo==3 then						; if 'stereo in' mode is active...
	 aFBackSigR	dcblock2	gaFBackSigR			; filter dc offset from right channel feedback signal
	endif
	
	/*lowpass filter feedback signal*/
	if gkLPF_On==1 then						; if lowpass filter button is on...
	 aFBackSig tone	aFBackSig,gkCutoff				; ...filter left feedback channel
	 if gkmonostereo==3 then					; if 'stereo in' mode is active...
	  aFBackSigR tone	aFBackSigR,gkCutoff			; lowpass filter the right channel
	 endif
	endif

	/*clip feedback signal*/
	if gkclip==1 then						; if clip switch is on...
	 ktrig	changed	gkClipLev					; if clip level control is adjusted generate a trigger impulse (momentary '1')
	 if ktrig==1 then						; if a trigger impulse has been received...
	  reinit	UPDATE_CLIP_L					; reinitialise clip opcode (clip level is i-rate only)
	 endif
	 UPDATE_CLIP_L:
	 aFBackSig	clip	aFBackSig, 0, 0dbfs*i(gkClipLev)	; clip left feedback signal at maximum amplitude using bram de jong method
	 if gkmonostereo==3 then					; and if stereo in/out mode is also chosen
	  aFBackSigR	clip	aFBackSigR, 0, 0dbfs*i(gkClipLev)	; clip right channel feedback signal
	  rireturn
	 endif
	endif
	gaphsW	phasor	(sr*(1-gkfreeze))/ginsamp			; pointer 0 - 1	;create a moving phase value that will be used to point to locations in a function table where input audio signal will be written

	/*write audio from left input to function table*/
	if gkfreeze==0 then
		tablew	ain+aFBackSig,gaphsW,gibuffer,1			; write input audio to table
		tablew	k(ain)*5,1-k(gaphsW),giview,1			; write a value to the view table (k-rate is sufficient). Boost its amplitude before writing.
	 if metro(32)==1 then								; peg rate of table updates
       	  chnset	"tablenumber(1)", "table"			; update table display	
	 endif

	endif
	
	/*if stereo in - stereo out mode*/
	if gkmonostereo==3 then						; if stereo in/out mode has been chosen...
	 aR	inch	2						; read right channel audio input
	 aR	=	aR*gkInGain					; rescale its amplitude with 'Input Gain' slider
	 if gkfreeze==0 then
		tablew	aR+aFBackSigR,gaphsW,gibufferR,1		; write right channel audio input audio to table
	 endif
		outch	2,aR*(1-gkmix)					; if 'stereo in' mode is selected, send some right channel dry signal to output according to dry/wet 'Mix' control position
	else
		outch	2,ain*(1-gkmix)					; otherwise not 'stereo in' mode so just send some left channel dry signal to output
	endif
		clear	gaFBackSig,gaFBackSigR				; clear feedback signals
		
	if changed(gkManPtr)==1 then
	 Smsg	sprintfk	"pos(%d,250)",10+((gkManPtr+1)*508)
	 	chnset		Smsg,"wiper"
	endif
endin

instr	2
	iMIDIActiveValue	=	1							; IF MIDI ACTIVATED
	iMIDIflag		=	0							; IF FLTK ACTIVATED
	mididefault	iMIDIActiveValue, iMIDIflag						; IF NOTE IS MIDI ACTIVATED REPLACE iMIDIflag WITH iMIDIActiveValue 
	kMIDIflag	init	iMIDIflag
	if gkOnOff==0&&iMIDIflag==0 then
	 turnoff
	endif

	if iMIDIflag==1 then
	 icps	cpsmidi
	 kpch	=	icps/cpsmidinn(gkUniNote)
	else
	 kpch		=	gkpch
	endif	

	kporttime	linseg	0,0.001,0.03							; portamento time. Rises quickly from zero to a held value.
	kpch		portk	kpch,kporttime							; Apply portamento smoothing to changes made to the pitch multiplier
	apch	interp	kpch									; interpolate pitch multiplier variable to create an a-rate version. This will produce higher quality results when pitch is modulated.
	
	kManPtr	portk	gkManPtr,kporttime*10*gkfreeze*gkManPtrPort

	kmetro	metro	5									; peg rate of reinits
	if kmetro==1 then
	 ktrig	changed	gkwsize,gkrnd,gkolap,gkwfn						; if any of the list of input args. change, generate a trigger impulse (momentary '1'). The input args are all i-rate in sndwarp so reinitialisation will be required for their changes to register.
	endif
	if ktrig==1 then									; if a trigger has been generated... 
	 reinit	UPDATE_SNDWARP									; ... begin a reinitialisation pass from the given label
	endif
	UPDATE_SNDWARP:										; a label. Reinitialisation begins from here.
	imode	=	1									; sndwarp mode. (1=pointer mode, timestretch mode not so useful in a live audio in application)
	ibeg	=	0									; point in the function table from which to begin reading audio (0=beginning)
	iwsize	=	i(gkwsize)								; window (grain) size in samples
	irnd	=	i(gkrnd)								; window (grain) size randomisation bandwidth in samples
	iolap	=	i(gkolap)								; number of grain overlaps
	kRndDly	betarand	gkdly,1,gkbeta							; random grain delay time
	if gkmonostereo!=0 then
	 kRndDlyR	betarand	gkdly,1,gkbeta						; random grain delay time
	endif
	
	iMaxDur	=	(iwsize+irnd)/sr							; maximum grain duration in seconds
	kTransComp	limit	iMaxDur*(kpch-1),0,ginsamp/sr
	kdelay	=	(kTransComp+kRndDly) / (ginsamp/sr)					; delay time required when reading grains from the function table
	if gkmonostereo!=0 then
	 kdelayR	=	(kTransComp+kRndDlyR) / (ginsamp/sr)				; delay time required when reading grains from the function table
	endif
	if gkfreeze==1 then
	 kdelay		=	kdelay + (sr/(ginsamp)*1.75*iwsize/sr)				; if freeze mode is active regress the read pointer a small amount
	 if gkmonostereo!=0 then
	  kdelayR	=	kdelayR + (sr/(ginsamp)*1.75*iwsize/sr)				; if freeze mode is active regress the read pointer a small amount
	 endif
	endif
	aphsR	wrap	(gaphsW-kdelay+kManPtr)*(ginsamp/sr),0,(ginsamp-iwsize-irnd)/sr		; location from which to read grain. This is always directly related to the poistion of the write pointer.
	aphsR_R	wrap	(gaphsW-kdelayR+kManPtr)*(ginsamp/sr),0,(ginsamp-iwsize-irnd)/sr	; location from which to read grain. This is always directly related to the poistion of the write pointer.
	iwfn	=	giwfn1+i(gkwfn)-1							; Grain amplitude windowing shape
	
	/*sndwarp*/
	asig,ac	sndwarp 1, aphsR, apch, gibuffer, ibeg, iwsize, irnd, iolap, iwfn, imode
	if gkbalance==1 then									; if 'balance switch is on...
	 asig	balance	asig,ac									; ... amplitude balance the signal
	endif
	if gkmonostereo==1 then									; if 'mono' mode seleced...
	 gaFBackSig	=	gaFBackSig+(asig*gkfback)					; create feedback signal for next iteration. (This will be written into the function table along with the live audio in.)
	 aR	=	asig
	elseif gkmonostereo==2 then								; or if 'stereo out' mode
	 aR,acR	sndwarp 1, aphsR_R, apch, gibuffer, ibeg, iwsize, irnd, iolap, iwfn, imode
	 if gkbalance==1 then
	  aR	balance	aR,acR
	 endif
	 gaFBackSig	=	gaFBackSig+((asig+aR)*gkfback)					; create feedback signal, a mixture of the left and right sndwarp output channels
	else											; otherwise 'stereo in/out' mode
	 aR,acR	sndwarp 1, aphsR_R, apch, gibufferR, ibeg, iwsize, irnd, iolap, iwfn, imode
	 if gkbalance==1 then
	  aR	balance	aR,acR
	 endif
	 gaFBackSig	=	gaFBackSig+(asig*gkfback)					; left channel feedback signal
	 gaFBackSig	=	gaFBackSig+(aR*gkfback)						; right channel feedback signal
	endif	
	rireturn										; return from reinitialisation
	aAntiClick	linsegr	0,0.03,1,0.03,0
		outs	asig*gkamp*gkmix*aAntiClick, aR*gkamp*gkmix*aAntiClick			; send audio to outputs
endin

instr	UpdateWidgets
	ksemis	chnget	"semis"									; read in 'semis' widget
	ktrig1	changed	ksemis									; if 'semis' knob is moved...
	if ktrig1==1 then			
	 chnset	semitone(ksemis), "pch"								; update 'Pitch' knob with the value of semis (converted to a ratio)
	endif
endin

</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
;i 2 0 [3600*24*7]
i "UpdateWidgets" 0 [3600*24*7]
</CsScore>


</CsoundSynthesizer>



























; Modulating Delays -  randomly modulating delays

; GATE (for gating the incoming signal)
; On Thrsh / Off Thrsh	-	thresholds at which the gate will open and close
; Rise Time		-	time it takes for the gate to ramp open
; Rel Time		-	time it takes for the gate to ramp closed

; SETUP
; Pan Width		-	extent of the random panning effect (0 = all layers centred)
; Spread		-	spread of the delay times of the different layers (if only 1 layer is active this control isn't really useful)
;				 if 'spread' is zero, all layers' delay time modulated between  'Min Time' and 'Max Time'
; Layers		-	Number of layers of modulating delays

; REVERB - there is a reverb effect within the each delay buffer
; Amount		-	amount of reverb signal added to the output of the delay buffer - within the delay buffer -, this will therefore be mixed into the feedback signal and fed back into to reverb also
; Time			-	reverb time
; Damping		-	damping of high frequencies within the delay effect
; ** CAUTION MUST BE TAKEN WHEN USING HIGH LEVELS OF DELAY FEEDBACK WITH A HIGH REVERB AMOUNT AS OVERLOADING CAN QUICKLY OCCUR **

; OUTPUT
; Dry			-	level control for the dry (post gate) signal
; Wet			-	level control for the wet (delayed) signal

; SLIDERS
; Min Time		-	Minimum delay time in the delay time random modulation
; Max Time		-	Maximum delay time in the delay time random modulation
; Min Rate		-	Minimum rate in the random modulation
; Max Rate		-	Maximum rate in the random modulation
; Min F.back		-	Minimum feedback value in the modulation of delay feedback values
; Max F.back		-	Maximum feedback value in the modulation of delay feedback values
; Min Tone		-	Minimum cutoff frequency in a randomly modulting low-pass filter within each delay buffer
; Max Tone		-	Maximum cutoff frequency in a randomly modulting low-pass filter within each delay buffer


<Cabbage>
form size(960, 260), caption("Modulating Delays"), pluginid("mdel") style("legacy")

label    bounds(200,  5, 80, 11), text("G A T E"), fontcolour("white")
checkbox bounds( 10, 35,100, 15), text("Gate On/Off") channel("GateActive"), FontColour("White"), colour("lime")  value(1)
rslider  bounds(100, 20, 60, 60), channel("OnThreshold"),  text("On Thrsh."),  range(0, 1, 0.05, 0.5, 0.001),  colour(30,30,30) trackercolour(white)
rslider  bounds(160, 20, 60, 60), channel("OffThreshold"), text("Off Thrsh."), range(0, 1, 0.01, 0.5, 0.001),  colour(30,30,30) trackercolour(white)
rslider  bounds(220, 20, 60, 60), channel("RiseTime"),     text("Rise Time"),  range(0, 10, 1, 0.5, 0.001),    colour(30,30,30) trackercolour(white)
rslider  bounds(280, 20, 60, 60), channel("RelTime"),      text("Rel.Time"),   range(0, 10, 0.01, 0.5, 0.001), colour(30,30,30) trackercolour(white)
checkbox bounds(340, 35, 90, 15), text("Gating") channel("gating"), FontColour("White"), colour("red")  value(0) shape(ellipse)

label    bounds(487,  5, 80, 11), text("S E T U P"), fontcolour("white")
line     bounds(405, 25,  3, 50), colour("Grey")
rslider  bounds(420, 20, 60, 60), channel("width"),  text("Pan Width"),range(0, 0.5, 0.5),         colour(100,100,100) trackercolour(white)
rslider  bounds(480, 20, 60, 60), channel("spread"), text("Spread"),   range(0, 4, 1, 0.5, 0.001), colour(100,100,100) trackercolour(white)
rslider  bounds(540, 20, 60, 60), channel("layers"), text("Layers"),   range(1, 22, 8,1,1),        colour(100,100,100) trackercolour(white)
line     bounds(610, 25,  3, 50), colour("Grey")
label    bounds(680,  5, 80, 11), text("R E V E R B"), fontcolour("white")
rslider  bounds(620, 20, 60, 60), channel("RvbAmt"),  text("Amount"),   range(0, 0.2, 0.06,1,0.001), colour(100,100,100) trackercolour(white)
rslider  bounds(680, 20, 60, 60), channel("RvbTime"), text("Time"),     range(0.01,10,    7),        colour(100,100,100) trackercolour(white)
rslider  bounds(740, 20, 60, 60), channel("damping"), text("Damping"),  range(0, 1, 0.5),            colour(100,100,100) trackercolour(white)
line     bounds(810, 25,  3, 50), colour("Grey")
label    bounds(856,  5, 80, 11), text("O U T P U T"), fontcolour("white")
rslider  bounds(825, 20, 60, 60), channel("dry"),    text("Dry"),      range(0, 4, 0, 0.5, 0.001), colour(160,160,160) trackercolour(white)
rslider  bounds(885, 20, 60, 60), channel("wet"),    text("Wet"),      range(0, 4, 1, 0.5, 0.001), colour(160,160,160) trackercolour(white)

line     bounds(  0, 95,960, 3), colour("Grey")

;hslider2 bounds(10,110, 940, 30), channel("MinTime","MaxTime"), text(Time), min(0.131), max(0.9)    range(0.001, 10,1,0.5),  colour("blue"),   trackercolour(blue)
hrange    bounds(10,110, 940, 30), channel("MinTime","MaxTime"), text("Time"), range(0.001, 10, 0.131:0.9, 0.5),  colour("blue"),   trackercolour("blue")
;hslider2 bounds(10,140, 940, 30), channel("MinRate","MaxRate"), min(0.1),  max(0.2),   text("Rate"),    range(0.001, 10,1,0.5),   colour("red"),    trackercolour(red)
hrange    bounds(10,140, 940, 30), channel("MinRate","MaxRate"), text("Rate"), range(0.001, 10, 0.1:0.2, 0.5),  colour("red"),   trackercolour("red")
;hslider2 bounds(10,170, 940, 30), channel("MinFB","MaxFB"),     min(0.95), max(0.975), text("F.back"),  range(0, 0.999, 0.95,1,0.001),  colour("yellow"), trackercolour(yellow)
hrange    bounds(10,170, 940, 30), channel("MinFB","MaxFB"), text("F.back"), range(0, 0.999, 0.95:0.975, 0.5),  colour("yellow"),   trackercolour("yellow")
;hslider2 bounds(10,200, 940, 30), channel("MinTone","MaxTone"), min(11),   max(14),    text("Tone"),    range(4, 14, 11),               colour(purple),   trackercolour(purple)
hrange    bounds(10,200, 940, 30), channel("MinTone","MaxTone"), text("Tone"), range(4, 14, 11:14, 1),  colour("purple"),   trackercolour("purple")

label   bounds(  5,240, 170, 12), text("Author: Iain McCurdy |2013|"), FontColour("grey")

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-n -d
</CsOptions>

<CsInstruments>

sr = 44100
ksmps = 16
nchnls = 2
0dbfs=1


opcode	DelayIteration,aa,aakkkkkkkkkkkKiii
 aL,aR,kMinTime,kMaxTime,kMinRate,kMaxRate,kMinFB,kMaxFB,kwidth,kMinTone,kMaxTone,kRvbAmt,kRvbTime,kdamping,ispread,icount,ilayers	xin

 kdel		rspline	kMinTime,kMaxTime,kMinRate,kMaxRate
 kdel		limit	kdel,0.001,10
 adel		interp	kdel
 kFB		rspline	kMinFB,kMaxFB,kMinRate,kMaxRate
 kFB		limit	kFB,0,1
 
 iMaxDel	=	10
 iws		=	4
 aout1, aout2	init	0

 ktone		rspline	kMinTone, kMaxTone,kMinRate,kMaxRate
 ktone		=	cpsoct(ktone)
 
 idelOS		random	0,ispread
  
 abuf		delayr	iMaxDel+idelOS
 aout1		deltap3	adel+idelOS
 arvb 		nreverb aout1, kRvbTime, kdamping
 aout1		=	aout1 + arvb*kRvbAmt
 aout1		dcblock2	aout1
 aout1		tone	aout1,ktone
 		delayw	aL + aout1*kFB
 		
 abuf		delayr	iMaxDel+idelOS
 aout2		deltap3	adel+idelOS
 arvb 		nreverb aout2, kRvbTime, kdamping
 aout2		=	aout2 + arvb*kRvbAmt
 aout2		dcblock2	aout2
 aout2		tone	aout2,ktone
 		delayw	aR + aout2*kFB

 kpan		rspline	0.5-kwidth,0.5+kwidth,kMinRate,kMaxRate
 kpan		limit	kpan,0,1
 apan		interp	kpan
 aout1		=	aout1*(1-apan)
 aout2		=	aout2*(apan)
 amix1,amix2	init	0
 
 amix1	=	0
 amix2	=	0
 
 if icount<ilayers then
  amix1,amix2	DelayIteration	aL,aR,kMinTime,kMaxTime,kMinRate,kMaxRate,kMinFB,kMaxFB,kwidth,kMinTone,kMaxTone,kRvbAmt,kRvbTime,kdamping,ispread,icount+1,ilayers
 endif
 
		xout	aout1+amix1, aout2+amix2
endop

opcode	SwitchPort, k, kki
	kin,kupport,idnport	xin
	kold			init	0
	kporttime		=	(kin<kold?idnport:kupport)
	kout			portk	kin, kporttime
	kold			=	kout
				xout	kout
endop


instr	1
 kporttime	linseg	0,0.001,1
 aL,aR	ins
 ;aL,aR	diskin2	"Synthpad.wav",1,0,1
 ;aL	diskin2	"loop.wav",1,0,1
 ;aR	=	aL
 
 kMinTime	chnget	"MinTime"
 kMaxTime	chnget	"MaxTime"
 kMinTime	portk	kMinTime,kMinTime			
 kMaxTime	portk	kMaxTime,kMaxTime			
 kspread	chnget	"spread"
 kMinRate	chnget	"MinRate"
 kMaxRate	chnget	"MaxRate"
 kMinFB		chnget	"MinFB"
 kMaxFB		chnget	"MaxFB"
 kwidth		chnget	"width"
 kMinTone	chnget	"MinTone"
 kMaxTone	chnget	"MaxTone"
 kres		chnget	"res"
 klayers	chnget	"layers"
 klayers	init	1
 
 kdry		chnget	"dry"
 kwet		chnget	"wet"
 kGateActive	chnget	"GateActive"
 kOnThreshold	chnget	"OnThreshold"
 kOffThreshold	chnget	"OffThreshold"
 kRiseTime	chnget	"RiseTime"
 kRelTime	chnget	"RelTime"

 kRvbAmt	chnget	"RvbAmt"
 kRvbTime	chnget	"RvbTime"
 kdamping	chnget	"damping"
 
 /* GATE */
 if kGateActive=1 then
  krms	rms	(aL+aR)*0.5
  kthreshold	init	i(kOnThreshold)
  kon	=	1
  koff	=	0
  if krms>kthreshold then
   kgate	=	1
   kthreshold	=	kOnThreshold
   		chnset	koff,"gating"
  else
   kgate	=	0
   kthreshold	=	kOffThreshold
   		chnset	kon,"gating"
  endif    
  kgate	SwitchPort	kgate,kRiseTime,0.1
  kgate	expcurve	kgate,8
  agate	interp	kgate
  aL	=	aL * agate
  aR	=	aR * agate
 endif
 ktrig	trigger	kGateActive,0.5,1
 if ktrig=1 then
  chnset	koff,"gating"
 endif


 /* REINITIALISING */
 ktrig	changed	klayers,kspread
 if ktrig=1 then
  reinit UPDATE
 endif
 UPDATE:
 
 /* CALL THE UDO */
 aout1,aout2	DelayIteration	aL,aR,kMinTime,kMaxTime,kMinRate,kMaxRate,kMinFB,kMaxFB,kwidth,kMinTone,kMaxTone,kRvbAmt,kRvbTime,kdamping,i(kspread),1,i(klayers)
 rireturn

 		outs	(aout1 * kwet) + (aL * kdry), (aout2 * kwet) + (aR * kdry)
endin

</CsInstruments>  

<CsScore>
i 1 0 360000
</CsScore>

</CsoundSynthesizer>; MultiModeDelay.csd
; Written by Iain McCurdy, 2012.

<Cabbage>
form caption("Multi-mode Delay") size(435, 90), pluginid("MMDl") style("legacy")
image                    bounds(0, 0,435, 90), colour("Maroon"), shape("rounded"), outlinecolour("white"), outlinethickness(4)
label    bounds( 10, 22, 80, 12), text("Type"), fontcolour("white")
combobox bounds( 10, 35, 80, 20),  text("Ping Pong","Stereo"), channel("type"), value(1)
rslider  bounds( 95, 11, 70, 70),  text("Time"),     channel("time"),     range(0.001, 10, 0.4, 0.5), colour( 85,  0,  0) trackercolour("silver"), textcolour("silver")
rslider  bounds(160, 11, 70, 70),  text("Cutoff"),   channel("cutoff"),   range(20,20000,20000,0.5),  colour( 85,  0,  0) trackercolour("silver"), textcolour("silver")
rslider  bounds(225, 11, 70, 70), text("Feedback"), channel("feedback"), range(0, 1.00, 0.5),        colour( 85,  0,  0) trackercolour("silver"), textcolour("silver")
rslider  bounds(290, 11, 70, 70), text("Mix"),      channel("mix"),      range(0, 1.00, 0.5),        colour( 85,  0,  0) trackercolour("silver"), textcolour("silver")
rslider  bounds(355, 11, 70, 70), text("Level"),    channel("level"),    range(0, 1.00, 0.7),        colour( 85,  0,  0) trackercolour("silver"), textcolour("silver")

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-d -n
</CsOptions>

<CsInstruments>

sr 		= 	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1

;Author: Iain McCurdy (2012)

instr	1
	ktime		chnget	"time"					;READ WIDGETS...
	kcutoff		chnget	"cutoff"				;
	kfeedback	chnget	"feedback"				;
	kmix		chnget	"mix"					;
	klevel		chnget	"level"					;
	asigL, asigR	ins
	kporttime	linseg	0,0.01,0.03				;CREATE A VARIABLE THAT WILL BE USED FOR PORTAMENTO TIME
	ktime		portk	ktime,kporttime				;PORTAMENTO SMOOTHING OF DELAT TIME
	atime		interp	ktime					;INTERPOLATED A-RATE VERSION OF DELAY TIME
	ktype		chnget	"type"
	if ktype==1 then
	 aL_OS		vdelay	asigL,(atime*1000)/2,(10*1000)/2	;DELAYED OFFSET OF LEFT CHANNEL (FIRST 'PING')
	 ;LEFT CHANNEL
	 abuf		delayr	10					;ESTABLISH DELAY BUFFER
	 aDelL		deltapi	atime					;TAP BUFFER
	 aDelL		tone	aDelL,kcutoff				;LOWPASS FILTER DELAY TAP 
	 		delayw	aL_OS+(aDelL*kfeedback)			;WRITE INPUT AUDIO INTO BUFFER
	 ;RIGHT CHANNEL
	 abuf		delayr	10					;ESTABLISH DELAY BUFFER
	 aDelR		deltapi	atime					;TAP BUFFER
	 aDelR		tone	aDelR,kcutoff				;LOWPASS FILTER DELAY TAP
	 		delayw	asigR+(aDelR*kfeedback)			;WRITE INPUT AUDIO INTO BUFFER
	 amixL		ntrpol	asigL,aDelL+aL_OS,kmix			;MIX DRY AND WET SIGNALS (LEFT CHANNEL)
	 amixR		ntrpol	asigR,aDelR,kmix			;MIX DRY AND WET SIGNALS (RIGHT CHANNEL)
	elseif ktype==2 then
	 ;LEFT CHANNEL
	 abuf		delayr	10					;ESTABLISH DELAY BUFFER
	 aDelL		deltapi	atime					;TAP BUFFER
	 aDelL		tone	aDelL,kcutoff				;LOWPASS FILTER DELAY TAP 
	 		delayw	asigL+(aDelL*kfeedback)			;WRITE INPUT AUDIO INTO BUFFER
	 ;RIGHT CHANNEL
	 abuf		delayr	10					;ESTABLISH DELAY BUFFER
	 aDelR		deltapi	atime					;TAP BUFFER
	 aDelR		tone	aDelR,kcutoff				;LOWPASS FILTER DELAY TAP
	 		delayw	asigR+(aDelR*kfeedback)			;WRITE INPUT AUDIO INTO BUFFER
	 amixL		ntrpol	asigL,aDelL,kmix			;MIX DRY AND WET SIGNALS (LEFT CHANNEL)
	 amixR		ntrpol	asigR,aDelR,kmix			;MIX DRY AND WET SIGNALS (RIGHT CHANNEL) 		
	endif
			outs	amixL*klevel, amixR*klevel		;PING PONG DELAY OUTPUTS ARE SENT OUT
endin
		
</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>; MultitapDelay.csd
; Written by Iain McCurdy, 2015

; Tone controls control the cutoff frequency of a lowpass filter on each tap

; Three modes are offered which implement feedback in different ways:

; Mode 1
; ------
; All 4 taps are taken from the same buffer **
; Only the 4th (and longest) tap is fed back into the input

; Mode 2
; ------
; All 4 delays are independent buffers
; All four feedback into themselves independently

; Mode 3
; ------
; All 4 delays are independent buffers
; Feedback into each delay is a mix of all 4 delays outputs.

<Cabbage>
form caption("Multitap Delay") size(300,385), pluginid("MtDl") style("legacy")
image pos(0, 0),               size(300,385), colour( 170, 90,10), shape("rounded"), outlinecolour("white"), outlinethickness(4) 

label     bounds( 10, 45, 70, 14), fontcolour("white"), text("%")
nslider bounds( 10, 10, 70, 35), channel("DelTim1"),   text("Time 1"), colour(  0, 40, 50), textcolour("white"), range(0, 100, 12.5, 1, 0.001)
rslider   bounds( 10, 65, 70, 70), channel("Tone1"), text("Tone 1"),   colour(  0, 40, 50), trackercolour(200,240,250), textcolour("white"), range(0, 20000, 12000, 0.5)
rslider   bounds( 10,145, 70, 70), channel("Pan1"), text("Pan 1"),     colour(  0, 40, 50), trackercolour(200,240,250), textcolour("white"), range(0, 1, 0.2)
rslider   bounds( 10,215, 70, 70), channel("Level1"), text("Level 1"), colour(  0, 40, 50), trackercolour(200,240,250), textcolour("white"), range(0, 1, 0.8, 0.5,0.001)

label     bounds( 80, 45, 70, 14), fontcolour("white"), text("%")
nslider bounds( 80, 10, 70, 35), channel("DelTim2"),  text("Time 2"), colour(  0, 40, 50), textcolour("white"), range(0, 100, 50, 1, 0.001)
rslider   bounds( 80, 65, 70, 70),   channel("Tone2"),  text("Tone 2"), colour(  0, 40, 50), trackercolour(200,240,250), textcolour("white"), range(0, 20000, 5000, 0.5)
rslider   bounds( 80,145, 70, 70),    channel("Pan2"),  text("Pan 2"),  colour(  0, 40, 50), trackercolour(200,240,250), textcolour("white"), range(0, 1, 0.4)
rslider   bounds( 80,215, 70, 70),  channel("Level2"),  text("Level 2"),colour(  0, 40, 50), trackercolour(200,240,250), textcolour("white"), range(0, 1, 0.25, 0.5,0.001)

label     bounds(150, 45, 70, 14), fontcolour("white"), text("%")
nslider bounds(150, 10, 70, 35), channel("DelTim3"),  text("Time 3"), colour(  0, 40, 50), textcolour("white"), range(0, 100, 87.5, 1, 0.001)
rslider   bounds(150, 65, 70, 70),   channel("Tone3"),  text("Tone 3"), colour(  0, 40, 50), trackercolour(200,240,250), textcolour("white"), range(0, 20000, 16000, 0.5)
rslider   bounds(150,145, 70, 70),    channel("Pan3"),  text("Pan 3"),  colour(  0, 40, 50), trackercolour(200,240,250), textcolour("white"), range(0, 1, 0.8)
rslider   bounds(150,215, 70, 70),  channel("Level3"),  text("Level 3"),colour(  0, 40, 50), trackercolour(200,240,250), textcolour("white"), range(0, 1, 0.5, 0.5,0.001)

label     bounds(220, 45, 70, 14), fontcolour("white"), text("secs")
nslider bounds(220, 10, 70, 35), channel("DelTim4"),  text("Time 4"), colour(  0, 40, 50), textcolour("white"), range(0.001, 30, 1.5, 1, 0.001)
rslider   bounds(220, 65, 70, 70),   channel("Tone4"),  text("Tone 4"), colour(  0, 40, 50), trackercolour(200,240,250), textcolour("white"), range(0, 20000, 8000, 0.5)
rslider   bounds(220,145, 70, 70),    channel("Pan4"),  text("Pan 4"),  colour(  0, 40, 50), trackercolour(200,240,250), textcolour("white"), range(0, 1, 0.6)
rslider   bounds(220,215, 70, 70),  channel("Level4"),  text("Level 4"),colour(  0, 40, 50), trackercolour(200,240,250), textcolour("white"), range(0, 1, 0.7, 0.5,0.001)

line      bounds( 10,295,280,2)
label     bounds( 10,310, 70, 14), fontcolour("white"), text("Type")
combobox  bounds( 10,325, 70, 20),  channel("Mode"),text("Mode 1","Mode 2","Mode 3"), colour(  0, 40, 50), textcolour("white")
rslider   bounds( 80,305, 70, 70),  channel("Mix"),text("Mix"), colour(  0, 40, 50), trackercolour(200,240,250), textcolour("white"), range(0, 1, 0.5)
rslider   bounds(150,305, 70, 70),  channel("Feedback"),text("Feedback"), colour(  0, 40, 50), trackercolour(200,240,250), textcolour("white"), range(0, 1, 0.75)
rslider   bounds(220,305, 70, 70),  channel("Level"),text("Level"), colour(  0, 40, 50), trackercolour(200,240,250), textcolour("white"), range(0, 1, 1)

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-d -n
</CsOptions>

<CsInstruments>

sr 		= 	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1

;Author: Iain McCurdy (2015)

instr	1
 kDelTim1	chnget	"DelTim1"
 aDelTim1	interp	kDelTim1*0.01
 kTone1		chnget	"Tone1"
 kPan1		chnget	"Pan1"
 kLevel1	chnget	"Level1"

 kDelTim2	chnget	"DelTim2"
 aDelTim2	interp	kDelTim2*0.01
   kTone2	chnget	  "Tone2"
 kPan2		chnget	"Pan2"
  kLevel2	chnget	 "Level2"

 kDelTim3	chnget	"DelTim3"
 aDelTim3	interp	kDelTim3*0.01
   kTone3	chnget	  "Tone3"
 kPan3		chnget	"Pan3"
  kLevel3	chnget	 "Level3"

 kDelTim4	chnget	"DelTim4"
 aDelTim4	interp	kDelTim4
   kTone4	chnget	  "Tone4"
 kPan4		chnget	"Pan4"
  kLevel4	chnget	 "Level4"

  kFeedback	chnget	 "Feedback"
  kLevel	chnget	 "Level"
  kMix		chnget	 "Mix"
  kMode		chnget	"Mode"

 aInL,aInR	ins


 if kMode==1 then
 
 /* left channel */
 abufL	delayr	30
 aTapL1	deltapi	aDelTim1 * aDelTim4
 aTapL1	tone	aTapL1, kTone1
 aTapL2	deltapi	aDelTim2 * aDelTim4
 aTapL2	tone	aTapL2, kTone2
 aTapL3	deltapi	aDelTim3 * aDelTim4
 aTapL3	tone	aTapL3, kTone3
 aTapL4	deltapi	aDelTim4
 aTapL4	tone	aTapL4, kTone4
	delayw	aInL + (aTapL4*kFeedback)

 /* right channel */
 abufR	delayr	30
 aTapR1	deltapi	aDelTim1 * aDelTim4
 aTapR1	tone	aTapR1, kTone1
 aTapR2	deltapi	aDelTim2 * aDelTim4
 aTapR2	tone	aTapR2, kTone2
 aTapR3	deltapi	aDelTim3 * aDelTim4
 aTapR3	tone	aTapR3, kTone3
 aTapR4	deltapi	aDelTim4
 aTapR4	tone	aTapR4, kTone4
	delayw	aInR + (aTapR4*kFeedback)


 elseif kMode==2 then
  
 /* left channel */
  abuf	delayr	30
 aTapL1	deltapi	aDelTim1 * aDelTim4
 aTapL1	tone	aTapL1, kTone1
 	delayw	aInL + (aTapL1*kFeedback)	
 abuf	delayr	30
 aTapL2	deltapi	aDelTim2 * aDelTim4
 aTapL2	tone	aTapL2, kTone2
 	delayw	aInL + (aTapL2*kFeedback)	
 abuf	delayr	30
 aTapL3	deltapi	aDelTim3 * aDelTim4
 aTapL3	tone	aTapL3, kTone3
 	delayw	aInL + (aTapL3*kFeedback)	
 abuf	delayr	30
 aTapL4	deltapi	aDelTim4
 aTapL4	tone	aTapL4, kTone4
 	delayw	aInL + (aTapL4*kFeedback)	

 /* right channel */
 abuf	delayr	30
 aTapR1	deltapi	aDelTim1 * aDelTim4
 aTapR1	tone	aTapR1, kTone1
 	delayw	aInR + (aTapR1*kFeedback)	
 abuf	delayr	30
 aTapR2	deltapi	aDelTim2 * aDelTim4
 aTapR2	tone	aTapR2, kTone2
 	delayw	aInR + (aTapR2*kFeedback)	
 abuf	delayr	30
 aTapR3	deltapi	aDelTim3 * aDelTim4
 aTapR3	tone	aTapR3, kTone3
 	delayw	aInR + (aTapR3*kFeedback)	
 abuf	delayr	30
 aTapR4	deltapi	aDelTim4
 aTapR4	tone	aTapR4, kTone4
 	delayw	aInR + (aTapR4*kFeedback)	


 elseif kMode==3 then
  
 aFBmixL,aFBmixR	init	0 
 aTapL1	vdelay	aInL+aFBmixL, aDelTim1*aDelTim4*1000, 30000
 aTapL2	vdelay	aInL+aFBmixL, aDelTim2*aDelTim4*1000, 30000
 aTapL3	vdelay	aInL+aFBmixL, aDelTim3*aDelTim4*1000, 30000
 aTapL4	vdelay	aInL+aFBmixL, aDelTim4         *1000, 30000
 aTapR1	vdelay	aInR+aFBmixR, aDelTim1*aDelTim4*1000, 30000
 aTapR2	vdelay	aInR+aFBmixR, aDelTim2*aDelTim4*1000, 30000
 aTapR3	vdelay	aInR+aFBmixR, aDelTim3*aDelTim4*1000, 30000
 aTapR4	vdelay	aInR+aFBmixR, aDelTim4         *1000, 30000
 
 aTapL1	tone	aTapL1,kTone1
 aTapL2	tone	aTapL2,kTone2
 aTapL3	tone	aTapL3,kTone3
 aTapL4	tone	aTapL4,kTone4
 aTapR1	tone	aTapR1,kTone1
 aTapR2	tone	aTapR2,kTone2
 aTapR3	tone	aTapR3,kTone3
 aTapR4	tone	aTapR4,kTone4
  
 aFBmixL	=	(aTapL1 + aTapL2 + aTapL3 + aTapL4) * kFeedback / 4
 aFBmixR	=	(aTapR1 + aTapR2 + aTapR3 + aTapR4) * kFeedback / 4
 
endif

 aMixL	sum	aTapL1*kLevel1*kPan1, aTapL2*kLevel2*kPan2, aTapL3*kLevel3*kPan3, aTapL4*kLevel4*kPan4 
 aMixR	sum	aTapR1*kLevel1*(1-kPan1), aTapR2*kLevel2*(1-kPan2), aTapR3*kLevel3*(1-kPan3), aTapR4*kLevel4*(1-kPan4)




	outs	((aMixL*kMix) + (aInL*(1-kMix)))*kLevel, ((aMixR*kMix) + (aInR*(1-kMix)))*kLevel
endin
		
</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>
; Peeaaoooh.csd
; Written by Iain McCurdy, 2015

; Generates reverberation effects reminiscent of spring reverbs.

; The main element is a stack of delays with geometrically related delay times

; NB. although delays are used, their delay times are typically quite short and are expressed here in hertz, i.e. frequency of echoes (freq = 1/delay_time).
; Furthermore, ratios between delay times of parallel delays are expressed in semitones.

; Base		-	Base Frequency of the stack of delays (in hertz)	
; Layers	-	Number of layers (delays). Bear in mind that increasing this increaeses CPU and memory demand.
; Shape		-	Shapes the amplitude relationship between layers. If Shape=0, all layers are equal in amplitude, as Shape is increased, longer delays have their amplitudes attenuated.
; Interval	-	Interval between consecutive delays (in semitones).
; Scatter	-	Adds a fixed random value to the delay times of the delays. Increasing this value will gradually obliterate the distinctive 'peeaaoo' sound and also add a stereo broadening effect.
; Spread	-	Amount by which left and right fo the same delat layer are alternately panned left or right. This can be used as an alternative to 'Scatter' to create stereo broadening but without the obliteration of the 'peeaaoo' sound.
; Feedback	-	Ratio of the output signal from each delay that is fed back into the input. The knob turns red to warn of greater than 100% feedback.
; HPF		-	Cutoff frequency of a highpass filter within the feedback loop of each delay
; LPF		-	Cutoff frequency of a lowpass filter within the feedback loop of each delay
; Test Noise-	When activated, the live audio input is replaced with a sparse 'dust' source sound. Good for testing the effect.
; Sep.Mode	-	There are two separation modes: Linear: sequential delays in the stack are separated by equal pitch intervals
;							Exponential: intervals between sequential delays increase exponentially
;			Linear offers a more distinctive 'peeaaoooh' sound and arpeggios when 'Base' is low. Exponential offers a more 'scattered' sounding reverb.
;			When 'Interval' is low, both modes sound quite similar.
; Post-Filter
; HPF		-	Cutoff frequency of a highpass filter applied to the output signal (dry and wet signals)
; LPF		-	Cutoff frequency of a lowpass filter applied to the output signal (dry and wet signals)

; Mix		-	Dry/wet mix
; Level		-	Output level (dry and wet signals)

; NB. Feedback greater than 1 (i.e. more than 100% of the signal) are possible. 
; Normally this would result in a runaway increase in amplitude but control is still possible if the main highpass and lowpass filters also remove part of the audio in the feedback loop.
; Nonetheless surity is not guaranteed so therefore experimentation and caution is advised. 
; There is however a safety mechanism which will reduce the feedback control if the amplitude starts to runaway.

;                   (feedback)
;             +----[LPF]--[HPF]---+
;             |                   |  
;             v   +-----------+   | (mix)  +-----------+
;  --IN--+----+---|DELAY_STACK|---+---+----|POST FILTER|--OUT-->
;        |        +-----------+       ^    +-----------+
;        |                            |
;        +----------------------------+

<Cabbage>
form caption("Peeaaoooh") size(650,207), pluginid("Peao") style("legacy")
image pos(0, 0),          size(650,207), colour( 10, 20, 30), shape("sharp"), outlinecolour("white"), outlinethickness(0) 

rslider   bounds( 10, 10, 70, 70),  channel("Base"),text("Base"), colour( 20, 60, 70), trackercolour(200,240,250), textcolour("white"), range(0.5, 1000, 50, 0.5, 0.001)
rslider   bounds( 80, 10, 70, 70),  channel("Layers"),text("Layers"), colour( 20, 60, 70), trackercolour(200,240,250), textcolour("white"), range(1, 60, 8,1,1)
rslider   bounds(150, 10, 70, 70),  channel("Interval"),text("Interval"), colour( 20, 60, 70), trackercolour(200,240,250), textcolour("white"), range(0.001, 1, 0.07,0.5,0.001)
rslider   bounds(220, 10, 70, 70),  channel("Shape"),text("Shape"), colour( 20, 60, 70), trackercolour(200,240,250), textcolour("white"), range(0, 3, 0,1,0.001)
rslider   bounds(290, 10, 70, 70),  channel("Scatter"),text("Scatter"), colour( 20, 60, 70), trackercolour(200,240,250), textcolour("white"), range(0, 1, 0,0.5,0.0001)
rslider   bounds(360, 10, 70, 70),  channel("Spread"),text("Spread"), colour( 20, 60, 70), trackercolour(200,240,250), textcolour("white"), range(0, 1, 0)
rslider   bounds(430, 10, 70, 70),  channel("Feedback"),text("Feedback"), colour( 20, 60, 70), trackercolour(200,240,250), textcolour("white"), range(0, 1.5, 0.95), identchannel("FeedbackID")
checkbox  bounds(430, 82, 80, 14),  channel("Overload"),text("Overload"), colour(255, 60, 60), textcolour("white") shape("Ellipse"), active(0)
rslider   bounds(500, 10, 70, 70),  channel("HPF"),   text("HPF"), colour( 20, 60, 70), trackercolour(200,240,250), textcolour("white"), range(20,20000,20,0.5,1)
rslider   bounds(570, 10, 70, 70),  channel("LPF"),   text("LPF"), colour( 20, 60, 70), trackercolour(200,240,250), textcolour("white"), range(20,20000,20000,0.5,1)

checkbox  bounds(320,112,110, 15), text("Test Clicks"), channel("TestNoise"), fontcolour("white")

label     bounds(320,137,110, 12), text("Separation Mode"), fontcolour("white") 
combobox  bounds(320,150,110, 20),  channel("SepMode"),text("Linear","Exponential"), textcolour("white"), value(1)

image     bounds( 20,100,245, 95), outlinecolour("white"), outlinethickness(1), colour(50,50,50,100), plant("PostFilter") {
label     bounds(  0,  6,245, 14), text("G l o b a l    F i l t e r"), fontcolour("white") 
combobox  bounds( 10, 40, 75, 20),  channel("PrePostFilter"),text("Pre-mix","Post-mix"), textcolour("white"), value(2)
rslider   bounds( 85, 22, 70, 70),  channel("PostHPF"),   text("HPF"), colour( 20, 60, 70), trackercolour(200,240,250), textcolour("white"), range(20,20000,20,0.5,1)
rslider   bounds(155, 22, 70, 70),  channel("PostLPF"),   text("LPF"), colour( 20, 60, 70), trackercolour(200,240,250), textcolour("white"), range(20,20000,20000,0.5,1)
}

rslider   bounds(480,110, 70, 70),  channel("Mix"),text("Mix"), colour( 20, 60, 70), trackercolour(200,240,250), textcolour("white"), range(0, 1, 1)
rslider   bounds(560,110, 70, 70),  channel("Level"),text("Level"), colour( 20, 60, 70), trackercolour(200,240,250), textcolour("white"), range(0, 2, 1,0.5,0.001)

label     bounds(530,195,100, 10), text("Iain McCurdy |2015|"), fontcolour(200,200,200) 

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-d -n
</CsOptions>

<CsInstruments>

sr 		= 	44100	;SAMPLE RATE
ksmps 		= 	16	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1
		seed	0
		
opcode	DelayLayer,a,akkkkkkkkkip
 aInSig,kBase,kShape,kInterval,kScatter,kSpread,kSepMode,kHPF,kLPF,kFeedback,iLayers,iCount	xin
 iRnd	random	-0.5,0.5			; i-time random value. A unique fixed value for each delay layer (and channel).
 kRnd	=	octave(iRnd * kScatter)		; scale random value by GUI widget control
 /* SELECT THE SEPARATION MODE */
 if kSepMode==1 then								; linear
  aDel	interp	limit:k(kRnd/(kBase * semitone(kInterval*(iCount-1))),1/kr,2)
 else										; exponential
  aDel	interp	limit:k(kRnd/(kBase * semitone((kInterval+1)^iCount)),1/kr,2)
 endif
 kAmp	=	(iCount/iLayers) ^ kShape
 abuf	delayr	2
 aWG	deltapi	aDel
 aWG	atone	aWG,kHPF
 aWG	tone	aWG,kLPF
 aWG	dcblock2	aWG
 	delayw	aInSig + (aWG*kFeedback)
 if iCount<iLayers then
  aMix	DelayLayer	aInSig,kBase,kShape,kInterval,kScatter,1-kSpread,kSepMode,kHPF,kLPF,kFeedback,iLayers,iCount+1
 endif
	xout	aWG*limit:k(kSpread*2,0,1)*kAmp + aMix
 aMix	=	0
endop

instr	1

 /* READ IN WIDGETS */
 kporttime	linseg	0,0.001,0.1
 kBase		chnget	"Base"
 iBase		chnget	"Base"
 kBase		init	iBase
 kBase		portk	kBase,kporttime
 kInterval	chnget	"Interval"
 iInterval	chnget	"Interval"
 kinterval	init	iInterval
 kInterval	portk	kInterval,kporttime
 kScatter	chnget	"Scatter"
 kScatter	portk	kScatter,kporttime
 kSpread	chnget	"Spread"
 kFeedback	chnget	"Feedback"
 kLevel		chnget	"Level"
 kLayers	chnget	"Layers"
 kShape		chnget	"Shape"
 kHPF		chnget	"HPF"
 kLPF		chnget	"LPF"
 kSepMode	chnget	"SepMode"
 kPostHPF	chnget	"PostHPF"
 kPostLPF	chnget	"PostLPF"
 kMix		chnget	"Mix"
 kPrePostFilter		chnget	"PrePostFilter"
 kTestNoise	chnget	"TestNoise"
 
 if kTestNoise==1 then
  aL	dust2	1,0.5*randomi:k(0.5,2,1,1)
  aR	dust2	1,0.5*randomi:k(0.5,2,1,1)
  aL	butlp	aL,cpsoct(randomh:k(5,11,10))
  aR	butlp	aR,cpsoct(randomh:k(5,11,10))
 else
  aL,aR	ins
 endif
  
 /* CALL DELAY STACK (VIA A UDO) */
 if changed(kLayers)==1 then
  reinit	UPDATE
 endif
 UPDATE:
 iAmpScl	=	sqrt(i(kLayers))							; amplitude will be scaled according to the number of layers selected
 aWG_L	DelayLayer	aL,kBase,kShape,kInterval,kScatter,0.5+kSpread/2,kSepMode,kHPF,kLPF,kFeedback,i(kLayers)
 aWG_R	DelayLayer	aR,kBase,kShape,kInterval,kScatter,0.5-kSpread/2,kSepMode,kHPF,kLPF,kFeedback,i(kLayers)
 aWG_L	/=	iAmpScl										; scale amplitude according to the number of layers chosen
 aWG_R	/=	iAmpScl
 rireturn
        
 /* TURN FEEDBACK KNOB RED IF GREATER THAN 1 */       
 if trigger:k(kFeedback,1,0)==1 then		; trigger to turn red
  chnset "colour(170, 60, 70)","FeedbackID"	; send message
 elseif trigger:k(kFeedback,1,1)==1 then	; trigger to turn back to normal
  chnset "colour( 20, 60, 70)","FeedbackID"	; send message
 endif
         
 /* PREVENT OVERLOADS */
 kRMS	rms	aWG_L				; scan rms
 kOn	=	1				; on value (needs to be a k-rate var.)
 kOff	=	0				; off value (needs to be a k-rate var.)
 kOverload	chnget	"Overload"		; read in value of 'Overload' LED
 if kRMS>0.9 then				; if rms exceeds a given value...
  chnset	kOn,"Overload"			; turn on 'Overload' LED
  chnset	(kFeedback - (0.0003)) - ((kFeedback-1)*0.001),"Feedback"	; decrement 'Feedback' slider. This will be repeated every k-cycle until rms is back below the threshold value prescribed above.
 elseif kOverload==1 then			; otherwise..., i.e. if 'Overload' LED is on but rms is beneath the threshold...  
  chnset	kOff,"Overload"			; turn 'overload' LED off
 endif	

 /* GLOBAL FILTERING CAN BE APPLIED TO JUST THE WET SIGNAL OR A MIXTURE OF THE WET AND DRY SIGNALS, ACCORDING TO A SELECTION MADE USING A COMBOBOX */ 
 /* PRE-MIXER FILTERING OPTION */
 if kPrePostFilter==1 then
  if kPostHPF>20 then			; if HPF is at its minimum value (20) bypass filtering to conserve CPU
   aWG_L	buthp	aWG_L,kPostHPF	; highpass filter left channel
   aWG_R	buthp	aWG_R,kPostHPF	; highpass fiter right channel
  endif
  if kPostLPF<20000 then 		; if HPF is at its minimum value (20) bypass filtering to conserve CPU
   aWG_L	butlp	aWG_L,kPostLPF		
   aWG_R	butlp	aWG_R,kPostLPF		
  endif
  aMixL	ntrpol	aL, aWG_L, kMix
  aMixR	ntrpol	aR, aWG_R, kMix
 /* PRE-MIXER FILTERING OPTION */
 elseif kPrePostFilter==2 then
  aMixL	ntrpol	aL, aWG_L, kMix
  aMixR	ntrpol	aR, aWG_R, kMix
  if kPostHPF>20 then
   aMixL	buthp	aMixL,kPostHPF		
   aMixR	buthp	aMixR,kPostHPF		
  endif
  if kPostLPF<20000 then 
   aMixL	butlp	aMixL,kPostLPF		
   aMixR	butlp	aMixR,kPostLPF		
  endif
 endif

	outs	aMixL*kLevel, aMixR*kLevel
endin
		
</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>
; Reverse.csd
; Iain McCurdy [2012]
; 
; Buffers audio for reversed (and forward) playback.
; 
; INSTRUCTIONS
; ------------
; Time L  	--	length of the left channel delay buffer 
; Time R  	--	length of the right channel delay buffer
; Spread		--	stereo spread of the two channel. 1 = hard left and right
; Mix		--	dry/wet mix
; Level		--	output level
; Reverse 	--	(switch) activate reversed buffer
; Forward	--	(switch) activate forward buffer
; Link L&R	--	(switch) pair the left and right Time controls (functions differently if 'Time Mod' is activated)
; Time Mod	--	(switch) if this switch is on the delay times for both channels will modulate randomly between 'Time L' and 'Time R'. If 'Link L&R' is active this modulation is done in tandem for both channels.
; Pan Mod	--	(switch) if this switch is on the panning modulates randomly



<Cabbage>
form caption("Reverse") size(455, 95), pluginid("rvrs") style("legacy")
image           bounds(0, 0, 455, 95), colour("darkslategrey"), shape("rounded"), outlinecolour("white"), line(4)
rslider  bounds( 10, 10,  75, 75), text("Time L"),    channel("timeL"),   range(0.010, 4, 1, 0.5,0.001),colour(37,59,59)   textcolour(255,255,200), trackercolour(lightblue)
rslider  bounds( 80, 10,  75, 75), text("Time R"),    channel("timeR"),   range(0.010, 4, 1, 0.5,0.001),colour(37,59,59)   textcolour(255,255,200), trackercolour(lightblue)
rslider  bounds(150, 10, 75, 75),  text("Spread"),    channel("spread"),  range(0, 1.00, 1),            colour(37,59,59)   textcolour(255,255,200), trackercolour(lightblue)
rslider  bounds(220, 10, 75, 75),  text("Mix"),       channel("mix"),     range(0, 1.00, 1),            colour(37,59,59)   textcolour(255,255,200), trackercolour(lightblue)
rslider  bounds(290, 10, 75, 75),  text("Level"),     channel("level"),   range(0, 1.00, 1, 0.5),       colour(37,59,59)   textcolour(255,255,200), trackercolour(lightblue)
checkbox bounds(370, 12, 100, 12), text("Reverse"),   channel("reverse"),  value(1),                    colour(255,255, 50)     fontcolour(255,255,200)
checkbox bounds(370, 27, 100, 12), text("Forward"),   channel("forward"),  value(0),                    colour(255,255, 50)     fontcolour(255,255,200)
checkbox bounds(370, 42, 100, 12), text("Link L&R"),  channel("link"),     value(0),                    colour(255,255, 50)     fontcolour(255,255,200)
checkbox bounds(370, 57, 100, 12), text("Time Mod."), channel("TMod"),    value(0),                     colour(255,255, 50)     fontcolour(255,255,200)
checkbox bounds(370, 72, 100, 12), text("Pan Mod."),  channel("PMod"),    value(0),                     colour(255,255, 50)     fontcolour(255,255,200)
}
</Cabbage>
<CsoundSynthesizer>
<CsOptions>
-d -n
</CsOptions>
<CsInstruments>
sr = 44100
ksmps = 32
nchnls = 2
0dbfs = 1

;Author: Iain McCurdy (2012)
;http://iainmccurdy.org/csound.html

opcode	Reverse, a, aKkkk			;nb. CAPITAL K CREATE A K-RATE VARIABLE THAT HAS A USEFUL VALUE ALSO AT I-TIME
	ain,ktime,kreverse,kforward,klink	xin			;READ IN INPUT ARGUMENTS
	;four windowing envelopes. An appropriate one will be chosen based on the reversed chunk duration
	ienv1	ftgenonce			0, 0, 131072, 7, 0, 1024,           1, 131072-(1024*2),           1,  1024,       0	;for longest chunk times
	ienv2	ftgenonce			0, 0, 131072, 7, 0, 4096,           1, 131072-(4096*2),           1,  4096,       0
	ienv3	ftgenonce			0, 0, 131072, 7, 0,16384,           1, 131072-(16384*2),          1, 16384,       0
	ienv4	ftgenonce			0, 0, 131072, 7, 0,32768,           1, 131072-(32768*2),          1, 32768,       0	;for shortest chunk times

	atime	interp	ktime			;INTERPOLATE TO CREATE A-RATE VERSION OF K-TIME
		
	iratio	=	octave(1)
	
	ktrig	trigger	klink,0.5,0		;if 'Link L&R' is turned on restart delay time phasors to ensure sync between the two channels
	if ktrig=1 then
	 reinit	RESTART_PHASOR
	endif
	RESTART_PHASOR:
	aptr	phasor	(2/ktime)		;CREATE A MOVING PHASOR THAT WITH BE USED TO TAP THE DELAY BUFFER
	rireturn
	if ktime<0.2 then			;IF CHUNK TIME IS LESS THAN 0.2... (VERY SHORT) 
	 aenv	table3	aptr,ienv4,1		;CREATE AMPLITUDE ENVELOPE
	elseif ktime<0.4 then
	 aenv	table3	aptr,ienv3,1
	elseif ktime<2 then
	 aenv	table3	aptr,ienv2,1
	else					;other longest bracket of delay times
	 aenv	table3	aptr,ienv1,1
	endif
	aptr	=	aptr*atime		;SCALE PHASOR ACCORDING TO THE LENGTH OF THE DELAY TIME CHOSEN BY THE USER
 
 	abuffer	delayr	4 ;+ 0.01		;CREATE A DELAY BUFFER
	abwd	deltap3	aptr			;READ AUDIO FROM A TAP WITHIN THE DELAY BUFFER
	afwd	deltap3	atime			;FORWARD DELAY
		delayw	ain			;WRITE AUDIO INTO DELAY BUFFER
	
	;rireturn				;RETURN FROM REINITIALISATION PASS
	xout	(abwd*aenv*kreverse)+(afwd*kforward)	;SEND AUDIO BACK TO CALLER INSTRUMENT. APPLY AMPLITUDE ENVELOPE TO PREVENT CLICKS.
endop


instr 1
ktimeL   chnget "timeL"
ktimeR   chnget "timeR"
kspread  chnget "spread"
kmix     chnget "mix"
klevel   chnget "level"
kreverse chnget "reverse"
kforward chnget "forward"
kTMod    chnget "TMod"
kPMod    chnget "PMod"

/* LINK */
klink chnget "link"			; if 'Link L&R' is selected
if klink=1&&kTMod=0 then		
 ktrigL	changed	ktimeL,klink
 ktrigR	changed	ktimeR
 if ktrigL=1 then
  chnset	ktimeL,"timeR"
 elseif ktrigR=1 then
  chnset	ktimeR,"timeL"
 endif
endif

a1,a2	ins

if kTMod=1 then						; if time modulation is selected....
 if klink=0 then					; and if 'link L&R' is off...
  ktime1	rspline	ktimeL,ktimeR,0.2,1		; generate delay time value: random spline between ktimeL and ktimeR 
  ktime2	rspline	ktimeL,ktimeR,0.2,1
  ktimeL	limit	ktime1,0.01,4			; assign to delay time variable and limit to prevent out of range values (possible with rspline)
  ktimeR	limit	ktime2,0.01,4
 else
  ktime		rspline	ktimeL,ktimeR,0.2,1		
  ktimeL	limit	ktime,0.01,4
  ktimeR	=	ktimeL				; right channel delay the same as left
 endif
endif

arev1	Reverse	a1,ktimeL,kreverse,kforward,klink		; call UDO
arev2	Reverse	a2,ktimeR,kreverse,kforward,klink

if kPMod=1 then						; if panning modulation is on...
 kpan	rspline	0,1,0.2,1				; pan position generated as a random spline
 ap1	=	(arev1*kpan)     + (arev2*(1-kpan))	; create new left channel
 ap2	=	(arev1*(1-kpan)) + (arev2*kpan)		; create new right channel
 arev1	=	ap1					; reassign left channel to new left channel
 arev2	=	ap2 					; reassign right channel to new right channel
endif

a1	ntrpol	a1,arev1,kmix			; dry/wet mix
a2	ntrpol	a2,arev2,kmix
a1	=	a1 * klevel			; apply level control
a2	=	a2 * klevel
kspread	scale	kspread,1,0.5 			; rescale from range 0 - 1 to 0.5 - 1
aL	sum	a1*kspread,a2*(1-kspread)	; create stereo mix according to Spread control
aR	sum	a2*kspread,a1*(1-kspread)	; create stereo mix according to Spread control
	outs	aL,aR
endin

</CsInstruments>

<CsScore>
i 1 0 [60*60*24*7]
</CsScore>

</CsoundSynthesizer>; SpectralDelay.csd
; Written by Iain McCurdy, 2016

; This effect implements a spectral delay wherein banded analysed data - amplitudes and frequencies - can be delayed on a band by band basis 
;  and independently for each data type.

; Delay times are typically controlled using function tables as individual controls for each delay time would be impractical.
; In this example the user can choosed from 9 preset table types for delaying amplitude and frequency data. 
; In the future I will add further tables and a user-drawable table option.

; Max.Delay		-	Maximum delay time (before scaling by the table). This is an i-rate control.
; FFT Size		-	FFT size affects the quality of the effect. Small FFT sizes will result in distortions of frequency data.
; Feedback		-	feedback around the spectral delay is performed while the signal is stoll in the format of an f-signal
; Dry/Wet		-	dry/wet control of the effect
; Level			-	output level

<Cabbage>
form caption("") size(530,345), colour("black"), pluginid("SpDl") style("legacy")
image     pos(0, 0), size(530,345), colour("black"), shape("rounded"), outlinecolour(125,130,155), outlinethickness(5) 
;line      bounds(15, 53, 610,  1), colour(150,150,150)

label   bounds(  0,  1,530, 58), text("SPECTRAL DELAY"), fontcolour( 70, 50, 50)
label   bounds(  0,  4,530, 52), text("SPECTRAL DELAY"), fontcolour( 75, 95, 75)
label   bounds(  0,  7,530, 46), text("SPECTRAL DELAY"), fontcolour(150,150,200)
label   bounds(  0, 10,530, 40), text("SPECTRAL DELAY"), fontcolour(220,220,220)

rslider bounds( 25, 60, 90,120), text("Max.Delay"), textbox(1), valuetextbox(1), channel("MaxDelay"), range(0.01, 8, 1, 0.5), colour(105,70,70), trackercolour(205,170,170)

label    bounds(125, 65, 80, 14), text("FFT Size")
combobox bounds(125, 80, 80, 20), text("64","128","256","512","1024","2048"), channel("FFTindex"), value(3)

rslider  bounds(215, 60, 90,120), text("Feedback"), textbox(1), valuetextbox(1), channel("Feedback"), range(0, 1, 0.85), colour(105,70,70), trackercolour(205,170,170)
rslider  bounds(315, 60, 90,120), text("Dry/Wet Mix"), textbox(1), valuetextbox(1), channel("DryWetMix"), range(0, 1, 1), colour(105,70,70), trackercolour(205,170,170)
rslider  bounds(415, 60, 90,120), text("Level"), textbox(1), valuetextbox(1), channel("Level"), range(0, 1, 0.5), colour(105,70,70), trackercolour(205,170,170)

label    bounds( 20,193, 80, 14), text("Amp.Table")
combobox bounds( 20,208, 80, 20), text("Hi to Lo","Lo to Hi","Random","Peak 1","Peak 2","Peak 3","Comb 1","Comb 2","Spring","Flat"), channel("AmpTable"), value(3)
gentable bounds( 20,230,235, 90), identchannel("AmpTableID"), tablenumber(101), amprange(0,1,101), tablecolour("DarkBlue"), zoom(-1), tablebackgroundcolour(200,200,200), tablegridcolour(100,100,100)
label    bounds( 20,322,235, 14), text("Amplitudes Table")

label    bounds(275,193, 80, 14), text("Freq.Table")
combobox bounds(275,208, 80, 20), text("Hi to Lo","Lo to Hi","Random","Peak 1","Peak 2","Peak 3","Comb 1","Comb 2","Spring","Flat"), channel("FrqTable"), value(7)
gentable bounds(275,230,235, 90), identchannel("FrqTableID"), tablenumber(102), amprange(0,1,102), tablecolour("DarkGreen"), zoom(-1), tablebackgroundcolour(200,200,200), tablegridcolour(100,100,100)
label    bounds(275,322,235, 14), text("Frequencies Table")

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-n -d -+rtmidi=NULL -M0 -m0d 
</CsOptions>

<CsInstruments>

sr = 44100
ksmps = 16
nchnls = 2
0dbfs = 1

giViewTabSize	=	-235*2
giAmpTableView	ftgen	101,0,giViewTabSize,10,1
giFrqTableView	ftgen	102,0,giViewTabSize,10,1

; Tables used purely for viewing
giV1				ftgen			201,0,giViewTabSize,-7,1,abs(giViewTabSize),0									; Hi to Lo
giV2				ftgen			202,0,giViewTabSize,-7,0,abs(giViewTabSize),1									; Lo to Hi
giV3				ftgen			203,0,giViewTabSize,-21,1,1													; Random
giV4				ftgen			204,0,giViewTabSize,-16,0,abs(giViewTabSize)*0.25,-4,1,abs(giViewTabSize)*0.75,4,0	; Peak 1
giV5				ftgen			205,0,giViewTabSize,-16,0,abs(giViewTabSize)*0.125,-4,1,abs(giViewTabSize)*0.75,4,0	; Peak 2
giV6				ftgen			206,0,giViewTabSize,-16,0,abs(giViewTabSize)*0.0125,-4,1,abs(giViewTabSize)*0.075,4,0	; Peak 3
giV7				ftgen			207,0,giViewTabSize,-19,8,1*0.5,0,1*0.5										; Comb 1
giV8				ftgen			208,0,giViewTabSize,-19,16,1*0.5,0,1*0.5									; Comb 2
giV9				ftgen			209,0,giViewTabSize,-7,0.9,abs(giViewTabSize),1			; Spring
giV9				ftgen			210,0,giViewTabSize,-7,1,abs(giViewTabSize),1			; Flat

instr	1
 ; read in widgets
 kFFTindex		chnget				"FFTindex"
 kFFTindex		init				1
 kAmpTable		chnget				"AmpTable"
 kAmpTable		init				1
 kFrqTable		chnget				"FrqTable"
 kFrqTable		init				1
 kMaxDelay		chnget				"MaxDelay"
 kDryWetMix		chnget				"DryWetMix"
 kFeedback		chnget				"Feedback"
 kLevel			chnget				"Level"

 iFFTsizes[]	fillarray	64,128,256,512,1024,2048	; array of FFT size values

 aL,aR				ins
 
 ; if changed reinitialise mechanism
 if changed(kFFTindex,kAmpTable,kFrqTable,kMaxDelay)==1 then	; if any of the variables in the brackets change...
  reinit	RESTART													; begin a reinitialisation pass from the label
 endif
 RESTART:															; a label
 
 iFFT				=				iFFTsizes[i(kFFTindex)-1]		; retrieve FFT size value from array
 iMaxDelay			limit			i(kMaxDelay), iFFT/sr,8			; max.delay time must be i-rate

 iftamps1			ftgen			1,0,iFFT,-7,iMaxDelay,iFFT,0							; Hi to Lo
 iftamps2			ftgen			2,0,iFFT,-7,0,iFFT,iMaxDelay							; Lo to Hi
 iftamps3			ftgen			3,0,iFFT,-21,1,iMaxDelay								; Random
 iftamps4			ftgen			4,0,iFFT,-16,0,iFFT*0.25,-4,iMaxDelay,iFFT*0.75,4,0		; Peak 1
 iftamps5			ftgen			5,0,iFFT,-16,0,iFFT*0.125,-4,iMaxDelay,iFFT*0.75,4,0	; Peak 2
 iftamps6			ftgen			6,0,iFFT,-16,0,iFFT*0.0125,-4,iMaxDelay,iFFT*0.075,4,0	; Peak 3
 iftamps7			ftgen			7,0,iFFT,-19,8,iMaxDelay*0.5,0,iMaxDelay*0.5			; Comb 1
 iftamps8			ftgen			8,0,iFFT,-19,16,iMaxDelay*0.5,0,iMaxDelay*0.5			; Comb 2
 iftamps9			ftgen			9,0,iFFT,-7,iMaxDelay-(iMaxDelay*0.1),iFFT,iMaxDelay	; Spring
 iftamps10			ftgen			10,0,iFFT,-7,iFFT,iFFT,iFFT								; Flat
 
 iftfrqs1			ftgen			51,0,iFFT,-7,iMaxDelay,iFFT,0							; Hi to Lo		
 iftfrqs2			ftgen			52,0,iFFT,-7,0,iFFT,iMaxDelay							; Lo to hi
 iftfrqs3			ftgen			53,0,iFFT,-21,1,iMaxDelay								; Random
 iftfrqs4			ftgen			54,0,iFFT,-16,0,iFFT*0.25,-4,iMaxDelay,iFFT*0.75,4,0	; Peak 1
 iftfrqs5			ftgen			55,0,iFFT,-16,0,iFFT*0.125,-4,iMaxDelay,iFFT*0.75,4,0	; Peak 2
 iftfrqs6			ftgen			56,0,iFFT,-16,0,iFFT*0.0125,-4,iMaxDelay,iFFT*0.075,4,0	; Peak 3
 iftfrqs7			ftgen			57,0,iFFT,-19,8,iMaxDelay*0.5,0,iMaxDelay*0.5			; Comb 1
 iftfrqs8			ftgen			58,0,iFFT,-19,16,iMaxDelay*0.5,0,iMaxDelay*0.5			; Comb 2
 iftfrqs9			ftgen			59,0,iFFT,-7,iMaxDelay-(iMaxDelay*0.1),iFFT,iMaxDelay	; Spring
 iftfrqs10			ftgen			60,0,iFFT,-7,iFFT,iFFT,iFFT								; Flat

 					tablecopy		101,200+i(kAmpTable)
 					tablecopy		102,200+i(kFrqTable)
 					chnset			"tablenumber(101)","AmpTableID"
 					chnset			"tablenumber(102)","FrqTableID"
 					
 fsig_outL			pvsinit			iFFT,iFFT/4,iFFT,1
 fsig_inL			pvsanal			aL,iFFT,iFFT/4,iFFT,1									; analyse signal
 fsig_FBL			pvsgain			fsig_outL,kFeedback
 fsig_mixL			pvsmix			fsig_inL,fsig_FBL
 ihandleL, ktimeL	pvsbuffer		fsig_mixL, iMaxDelay									; write into PV buffer
 fsig_outL 			pvsbufread2		ktimeL, ihandleL, i(kAmpTable), 50+i(kFrqTable) 		; read from buffer (with delays)
 awetL				pvsynth			fsig_outL												; resynthesise
 amixL				ntrpol			aL,awetL,kDryWetMix										; dry/wet mix

 fsig_outR			pvsinit			iFFT,iFFT/4,iFFT,1
 fsig_inR			pvsanal			aL,iFFT,iFFT/4,iFFT,1									; analyse signal
 fsig_FBR			pvsgain			fsig_outR,kFeedback
 fsig_mixR			pvsmix			fsig_inR,fsig_FBR
 ihandleR, ktimeR	pvsbuffer		fsig_mixR, iMaxDelay									; write into PV buffer
 fsig_outR 			pvsbufread2		ktimeR, ihandleR, i(kAmpTable), 50+i(kFrqTable) 		; read from buffer (with delays)
 awetR				pvsynth			fsig_outR												; resynthesise
 amixR				ntrpol			aR,awetR,kDryWetMix										; dry/wet mix
 
 					outs			amixL*kLevel, amixR*kLevel
endin

</CsInstruments>

<CsScore>
i 1 0 -1
f 0 3700
</CsScore>

</CsoundSynthesizer>
; StuckBuffer.csd
; Written by Iain McCurdy 2014

; Imitates the sound of a audio stuck buffer.

; CONTROLS
; Thresh.	-	probability of there being a stuck buffer
; Freq.Min	-	Rate of probability test (minimum)
; Freq.Max	-	Rate of probability test (maximum)
;			Threshold setting will also affect the frequency with which new buffer sizes are generated. i.e. a threshold setting of '1' will mean that a stuck buffer will be held indefinitely.
; Hold (button)	-	Hold the current buffer indefinitely
; Size.Min.	-	Random Buffer Size (minimum)
; Size.Max.	-	Random Buffer Size (maximum) - (these values raised to the power of 2 give the actual buffer size in samples)
; Intergerise (button)	- round generated buffer size values to the nearest integer. (Fractional offset of Size.Min is retained)
;			This option also integerises transposition values (see below) 
; Trans.Min.	-	Random Transpose (minimum) in octaves 
; Trans.Max.	-	Random Transpose (maximum) in octaves. Transposition is achieved by playing a stuck buffer faster or slower
; Quality (combobox)	-	interpolation used in playing back the buffer: none/linear/cubic. 
;			This will affect the quality of playback when transposed. Lower quality may be desired for 'Lo Fi' effects.
; Width		-	width of random panning of stuck buffers

<Cabbage>
#define RSliderStyle # colour(150,150,150), trackercolour(white), outlinecolour(85,85,85)#

form caption("Stuck Buffer") size(600,110), colour(50,50,50), pluginid("StBu") style("legacy")

image pos(0, 0), size(600, 110), colour(50,50,50), shape("sharp"), outlinecolour("grey"), outlinethickness(1)

line     bounds( 10, 10,160, 2), colour("grey")
label    bounds( 50,  5, 80, 12), text("PROBABILITY"), colour(50,50,50)
rslider  bounds(  0, 20, 60, 60), text("Thresh."),   channel("thresh"),  range(0, 1.00, 0.4), $RSliderStyle
checkbox bounds( 10, 85,100, 12), text("HOLD"), colour("lime"), channel("hold"),  value(0)
rslider  bounds( 60, 20, 60, 60), text("Freq.Min."), channel("FreqMin"), range(0.1,100.00, 2, 0.5), $RSliderStyle
rslider  bounds(120, 20, 60, 60), text("Freq.Max."), channel("FreqMax"), range(0.1,100.00, 8, 0.5), $RSliderStyle

button   bounds( 95, 84, 50, 16), text("STUCK","STUCK"), active(0), channel("STUCK"), fontcolour:0(40,40,40), fontcolour:1(255,200,200), colour:1(255,80,80)

line     bounds(190, 10,100,  2), colour("grey")
label    bounds(203	,  5, 75, 12), text("BUFFER SIZE"), colour(50,50,50)
rslider  bounds(180, 20, 60, 60), text("Size.Min."), channel("SizeMin"), range(2.00, 16, 10), $RSliderStyle
rslider  bounds(240, 20, 60, 60), text("Size.Max."), channel("SizeMax"), range(2.00, 16, 14), $RSliderStyle

line     bounds(310, 10,100,  2), colour("grey")
label    bounds(325,  5, 70, 12), text("TRANSPOSE"), colour(50,50,50)
rslider  bounds(300, 20, 60, 60), text("Trans.Min."), channel("TransMin"), range(-7.00, 7, 0), $RSliderStyle
rslider  bounds(360, 20, 60, 60), text("Trans.Max."), channel("TransMax"), range(-7.00, 7, 0), $RSliderStyle
combobox bounds(315, 82, 90, 18	), channel("interp"), value(2), text("No Interp.", "Linear", "Cubic")

line     bounds(430, 10,160,  2), colour("grey")
label    bounds(484,  5, 50, 12), text("OUTPUT"), colour(50,50,50)
rslider  bounds(420,20, 60, 60), text("Width"), channel("PanWidth"), range(0, 1.00, 0.5), $RSliderStyle
rslider  bounds(480,20, 60, 60), text("Mix"), channel("mix"), range(0, 1.00, 0.85), $RSliderStyle
rslider  bounds(540,20, 60, 60), text("Level"), channel("level"), range(0, 1.00, 1), $RSliderStyle

checkbox bounds(190, 85,100, 12), text("INTEGERISE"), colour("lime"), channel("integer"),  value(0)

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-n -+rtmidi=NULL -M0
;-odac -dm0
</CsOptions>

<CsInstruments>

sr = 44100
ksmps = 32
nchnls = 2
0dbfs=1

gibufferL	ftgen	0,0,131072,2,0	; buffer tables
gibufferR	ftgen	0,0,131072,2,0


instr	1

 ;aInL,aInR	diskin	"ClassicalGuitar.wav",1,0,1	; for testing
 ;aL	diskin	"MFEM.wav",1,0,1	; for testing
 ;aR	=	aL
 aInL,aInR	ins

 kporttime	linseg	0,0.01,0.05	; portamento time
 kthresh	chnget	"thresh"
 khold		chnget	"hold"
 kthresh	+=	khold		; add hold value to threshold value
 kFreqMin	chnget	"FreqMin"
 kFreqMax	chnget	"FreqMax"
 kSizeMin	chnget	"SizeMin"
 kSizeMax	chnget	"SizeMax"
 kinteger	chnget	"integer"
 kTransMin	chnget	"TransMin"
 kTransMax	chnget	"TransMax"
 kinterp	chnget	"interp"
 kPanWidth	chnget	"PanWidth"
 kmix		chnget	"mix"
 klevel		chnget	"level"

 kwet		limit	kmix*2,0,1
 kdry		limit	2-(kmix*2),0,1
 
 kSizeMin	portk	kSizeMin,kporttime		; smooth changes to widgets
 kSizeMax	portk   kSizeMax,kporttime	
 kTransMin	portk	kTransMin,kporttime		
 kTransMax	portk   kTransMax,kporttime	

 krate		randomh kFreqMin,kFreqMax,1	; rate of generation of random values
 kTestVal	randomh	0,1,krate		; generate a random value for testing
 
 ktrig	trigger	kTestVal,kthresh,1		; if we are exiting a stuck buffer event, generate a trigger (i.e. new buffer sizes are only generated when a stuck buffer becomes unstuck)
 ksize	trandom	ktrig,kSizeMin,kSizeMax		; generate a new buffer size when a stuck buffer unsticks

 kpan	trandom	ktrig,0.5-(kPanWidth*0.5),0.5+(kPanWidth*0.5)	; generate a random pan value when triggered
 ktrans	trandom	ktrig,kTransMin,kTransMax			; generate a random transposition value when triggered

 if kinteger==1 then				; if 'INTEGERISE' is on...
  kfrac	=	frac(kSizeMin)			; remember fractional value of Size.Min. 
  ksize	=	int(ksize)+kfrac
  ktrans	=	int(ktrans)
 endif

 ksize	limit	ksize,kSizeMin,kSizeMax		; limit buffer size value
 if kinterp==1 then
  ksize	=	int(2 ^ ksize)			; create power of two value (integer)
 else
  ksize	=	2 ^ ksize			; create power of two value
 endif
 
 ktrans	limit	ktrans,kTransMin,kTransMax	; limit transposition
 
 ; write to buffer
 
 if kTestVal>=kthresh then			; normal
  kPhsFrq	=	sr/ksize
 else
  kPhsFrq	=	(sr*octave(ktrans))/ksize
 endif 
 
 aphsr	phasor	kPhsFrq			; create a moving phasor
 aphsr	=	aphsr * ksize		; rescale scope of phasor according to buffer size
 
 if kTestVal>=kthresh then		; normal
  	tablew	aInL,aphsr,gibufferL	; write to buffer
  	tablew	aInR,aphsr,gibufferR
 else					; stuck buffer
  if kinterp==1 then			; choose interpolation method:
   aL	table	aphsr,gibufferL		; none
   aR	table	aphsr,gibufferR
  elseif kinterp==2 then		; linear
   aL	tablei	aphsr,gibufferL
   aR	tablei	aphsr,gibufferR
  else					; cubic
   aL	table3	aphsr,gibufferL
   aR	table3	aphsr,gibufferR
  endif
  aL	=	aL * kpan * kwet	; pan audio
  aR	=	aR * (1-kpan) * kwet
 endif

  aL	sum	aL*kwet, aInL*kdry
  aR	sum	aR*kwet, aInR*kdry
 
 	outs	aL*klevel, aR*klevel
  aL	=	0
  aR	=	0

  ; toggle GUI "STUCK" indicator
  if trigger:k(kTestVal-khold,kthresh,0)==1 then
   chnset	k(0),"STUCK"
  elseif  trigger:k(kTestVal+khold,kthresh,1)==1 then
   chnset	k(1),"STUCK"
  endif
endin

</CsInstruments>  

<CsScore>
i 1 0 3600
e
</CsScore>

</CsoundSynthesizer>
; TempoDelay.csd
; Written by Iain McCurdy, 2012.

; Units for the delay are assumed to be demi-semiquavers.
; Knob for Rhy.Mult. will be replaced with a combobox once comboboxes work in plugins within hosts.
; Width control only applicable when ping-pong delay selected.
; If 'external' is selected as clock source tempo is taken from the host's BPM. 

<Cabbage>
form caption("Tempo Delay") size(565, 90), pluginid("TpDl") style("legacy")
image pos(0, 0), size(565, 90), colour("LightBlue"), shape("rounded"), outlinecolour("white"), outlinethickness(4) 
rslider bounds(10, 11, 70, 70), text("Tempo"), 		textcolour("black"), 		channel("tempo"), 	range(40, 500, 90, 1, 1),   colour(100,100,255),trackercolour(100,100,150)
rslider bounds(75, 11, 70, 70), text("Rhy.Mult."),	textcolour("black"), 		channel("RhyMlt"), 	range(1, 16, 4, 1, 1),      colour(100,100,255),trackercolour(100,100,150)
rslider bounds(140, 11, 70, 70), text("Damping"), 	textcolour("black"), 		channel("damp"), 	range(20,20000, 20000,0.5), colour(100,100,255),trackercolour(100,100,150)
rslider bounds(205, 11, 70, 70), text("Feedback"), 	textcolour("black"), 		channel("fback"), 	range(0, 1.00, 0.8),        colour(100,100,255),trackercolour(100,100,150)
rslider bounds(270, 11, 70, 70), text("Width"),	textcolour("black"), 			channel("width"), 	range(0,  1.00, 1),         colour(100,100,255),trackercolour(100,100,150)
label  bounds(342,  10, 75, 12), text("Clock Source"), FontColour("black")
button bounds(340,  22, 80, 20), text("Internal","External"), channel("ClockSource"), value(0), fontcolour:0("yellow"), fontcolour:1("yellow")
label  bounds(345,  45, 70, 12), text("Delay Type"), FontColour("black")
button bounds(340,  57, 80, 20), text("Simple","Ping-pong"), channel("DelType"), value(1), fontcolour:0("yellow"), fontcolour:1("yellow")
rslider bounds(420, 11, 70, 70), text("Mix"), 		textcolour("black"), 		channel("mix"), 	range(0, 1.00, 0.5), colour(100,100,255),trackercolour(100,100,150)
rslider bounds(485, 11, 70, 70), text("Level"),		textcolour("black"), 		channel("level"), 	range(0, 1.00, 1),   colour(100,100,255),trackercolour(100,100,150)
}
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-d -n
</CsOptions>

<CsInstruments>

sr 		= 	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1

;Author: Iain McCurdy (2012)

instr	1
	kfback		chnget	"fback"				;read in widgets
	kdamp		chnget	"damp"				;
	kmix		chnget	"mix"				;
	klevel		chnget	"level"				;
	kbpm		chnget	"HOST_BPM"			;
	kRhyMlt		chnget	"RhyMlt"			;
	kClockSource	chnget	"ClockSource"			;
	kDelType	chnget	"DelType"			;
	kwidth		chnget	"width"				;
	if kClockSource==0 then				;if internal clock source has been chosen...
	 ktempo	chnget	"tempo"				;tempo taken from GUI knob control
	else
	 ktempo	chnget	"bpm"				;tempo taken from host BPM
	 ktempo	limit	ktempo,40,500			;limit range of possible tempo values. i.e. a tempo of zero would result in a delay time of infinity.
	endif

	ktime	divz	(60*kRhyMlt),(ktempo*8),0.1		;derive delay time. 8 in the denominator indicates that kRhyMult will be in demisemiquaver divisions
	atime	interp	ktime				;interpolate k-rate delay time to create an a-rate version which will give smoother results when tempo is modulated
	
	ainL,ainR	ins				;read stereo inputs
	
	if kDelType==0 then				;if 'simple' delay type is chosen...
	 abuf	delayr	5
	 atapL	deltap3	atime
	 atapL	tone	atapL,kdamp
		delayw	ainL+(atapL*kfback)

	 abuf	delayr	5
	 atapR	deltap3	atime
	 atapR	tone	atapR,kdamp
		delayw	ainR+(atapR*kfback)	
	else						;otherwise 'ping-pong' delay type must have been chosen
	 ;offset delay (no feedback)
	 abuf	delayr	5
	 afirst	deltap3	atime
	 afirst	tone	afirst,kdamp
		delayw	ainL

	 ;left channel delay (note that 'atime' is doubled) 
	 abuf	delayr	10			;
	 atapL	deltap3	atime*2
	 atapL	tone	atapL,kdamp
		delayw	afirst+(atapL*kfback)

	 ;right channel delay (note that 'atime' is doubled) 
	 abuf	delayr	10
	 atapR	deltap3	atime*2
	 atapR	tone	atapR,kdamp;		delayw	ainR+(atapR*kfback)
		delayw	ainR+(atapR*kfback)
	
	 ;create width control. note that if width is zero the result is the same as 'simple' mode
	 atapL	=	afirst+atapL+(atapR*(1-kwidth))
	 atapR	=	atapR+(atapL*(1-kwidth))

	endif
	
	amixL		ntrpol		ainL, atapL, kmix	;CREATE A DRY/WET MIX BETWEEN THE DRY AND THE EFFECT SIGNAL
	amixR		ntrpol		ainR, atapR, kmix	;CREATE A DRY/WET MIX BETWEEN THE DRY AND THE EFFECT SIGNAL
			outs		amixL * klevel, amixR * klevel
endin
		
</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>
; TimeSlip.csd
; Written by Iain McCurdy, 2015

; Implements realtime time stretching by buffering the realtime audio stream and then triggering event grains reading from the buffer.

; Time Stretch	-	amount of time stretching.
;			e.g. 
;			 1 = no time stretching
;			 2 = half speed
;			 4 = quarter speed etc...
;			 As soon as 'Time Stretch' returns to '1' a quick crossfade is made back to the live audio stream.
; Freeze	-	Activating this button if time stretching is already in progress will freeze time stretching completely (time stretch = infinity)
; 			 Sliding Time Stretch all the way to the right will also trigger the freeze button. 
;			 Density and grain size will be unaffected. 

; Overlaps	-	Number of grains allowed to overlaps simultaneously. Normally set to 2.
; Density	-	Initial density when time stretching begins. 
;			Density also depends upon time stretching factor 
;			Density reduces as stretch increases while grain duration increases, therefore overlaps remains constant.
; Rand.When	-	Adds a random factor to when grains will start. This can be used to reduce or prevent artefacts produced through strict periodic production of grains.
; Rand.Where	-	Adds a random factor to from where in the buffer grains will be read. This can be used to reduce or prevent artefacts produced through strict periodic production of grains.
; Wet		-	Level control of the wet (time stretching) sound. 
;			 This should be adjusted to set a good balance between the dry sound (time stretch=1) and when the time stretching begins (time stretch>1)
;			 Higher densities will result in higher amplitudes when stretching.

<Cabbage>
form caption("Time Slip"), size(700,210), pluginid("TmSl") style("legacy")
image                bounds(0,0,700,210), colour( 40, 40, 60), shape("sharp")
groupbox bounds(  0,  0,700, 90), plant("SlowSlider"), text("Time Ratio"), colour(0,0,0,10) {
hslider  bounds(  5, 15,690, 60), range(1,20,1,0.5,0.0001), channel("stretch"), trackercolour(140,140,160)
label    bounds(  5, 65,690, 14), text("Time Stretch")
button   bounds(  5, 65, 60, 18), fontcolour:0(50,50,50), fontcolour:1(205,255,205), colour:0(0,10,0), colour:1(150,250,150), text("Realtime","Realtime"),channel("realtime")
button   bounds(630, 65, 60, 18), fontcolour:0(50,50,50), fontcolour:1(205,205,255), colour:0(0,0,10), colour:1(150,150,250), text("Freeze","Freeze"), channel("freeze")
}

button   bounds( 60,145,90,18), fontcolour:0(50,50,50), fontcolour:1(255,205,205), colour:0(10,0,0), colour:1(250,150,150), text("Grain Scale","Grain Scale"), channel("GrainScale"), latched(1), value(1)
rslider  bounds(170,100,80,95), range(1,50,4,1,1),         channel("overlaps"), valuetextbox(1), textbox(1), trackercolour(140,140,160), text("Overlaps")
rslider  bounds(250,100,80,95), range(1,50,8,1,1),         channel("dens"),     valuetextbox(1), textbox(1), trackercolour(140,140,160), text("Density")
rslider  bounds(330,100,80,95), range(0,1,0.05,0.5,0.001), channel("RndWhen"),  valuetextbox(1), textbox(1), trackercolour(140,140,160), text("Rand.When")
rslider  bounds(410,100,80,95), range(0,1,0.05,0.5,0.001), channel("RndWhere"), valuetextbox(1), textbox(1), trackercolour(140,140,160), text("Rand.Where")
rslider  bounds(490,100,80,95), range(0,1,0.5),            channel("wet"),      valuetextbox(1), textbox(1), trackercolour(140,140,160), text("Wet")
rslider  bounds(570,100,80,95), range(0,1,1),              channel("level"),    valuetextbox(1), textbox(1), trackercolour(140,140,160), text("Level")

</Cabbage>
                    
<CsoundSynthesizer>

<CsOptions>   
-dm0 -n
</CsOptions>

<CsInstruments>

sr 		= 	44100	; SAMPLE RATE
ksmps 		= 	32	; NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	; NUMBER OF CHANNELS (1=MONO)
0dbfs		=	1	; MAXIMUM AMPLITUDE
			
giBuffL	ftgen	1,0,(2^24)+1,2,0
giBuffR	ftgen	2,0,(2^24)+1,2,0
gihanning	ftgen	0,  0, 131073,  20,   2, 1					; HANNING WINDOW

instr	1
 kporttime	linseg	0,0.01,0.1
 gkstretch	chnget	"stretch"
 gkstretchP	portk	gkstretch,kporttime
 gkoverlaps	chnget	"overlaps"
 gkdens		chnget	"dens"
 gkRndWhen	chnget	"RndWhen"
 gkRndWhere	chnget	"RndWhere"
 gkwet		chnget	"wet"
 gklevel	chnget	"level"
 gkfreeze	chnget	"freeze"
 gkrealtime	chnget	"realtime"
 gkGrainScale	chnget	"GrainScale"
 gkfreeze	chnget	"freeze"
  
 gaInL,gaInR	ins							; READ REALTIME AUDIO INPUT
 
 gaWPhasor	phasor	sr/ftlen(giBuffL)		; WRITE PHASOR
 kWPhasor	downsamp	gaWPhasor			; K RATE VERSION OF WRITE PHASOR
 		tablew	gaInL,gaWPhasor,giBuffL,1	; WRITE STEREO AUDIO TO TABLES
 		tablew	gaInR,gaWPhasor,giBuffR,1	;
  
 if	gkstretch==1&&active:k(2)==0 then		; IF TIME STRETCH SLIDER IS AT '1' AND 'REALTIME' MODE IS NOT YET ACTIVE, ACTIVATE IT
  event	"i",2,0,-1
  kOn	=	1								; TURN ON REALTIME BUTTON
 	chnset	kOn,"realtime"
 elseif	gkstretch>1&&active:k(3)==0 then	; IF TIME STRETCH SLIDER IS INCREASED BEYOND '1' AND 'TIME STRETCH' MODE IS NOT YET ACTIVE, ACTIVATE IT
  kOff	=	0
 	chnset	kOff,"realtime"					; TURN OFF REALTIME BUTTON
  event	"i",3,0,-1,kWPhasor					; TURN ON TIME STRETCH INSTRUMENT AND SEND IT CURRENT WRITE PHASOR POSITION
 endif
 
endin

instr	2	; NORMAL PLAYBACK
 if gkstretch>1 then						; IF TIME STRETCH SLIDER IS INCREASED BEYOND '1' (LEFT-MOST) TURN OFF THIS NOTE
  turnoff
 endif
 aenv	linsegr	0,0.1,1,4/i(gkdens),0				; RELEASE ENVELOPE
 	outs	gaInL*aenv*gklevel, gaInR*aenv*gklevel
endin

instr	3	; SLOWED PLAYBACK (TRIGGER SOUND GRAINS)
 gkRPhasor	phasor	(sr*(1-gkfreeze))/(ftlen(1)*gkstretchP),p4	; READ START POINT PHASOR
 
 if gkstretch==1 then				; IS TIME STRETCH SLIDER IS RETURNED TO '1' (LEFT-MOST), DEACTIVATE FREEZE BUTTON
  kOff	=	0
  	chnset	kOff,"freeze"
  turnoff
 endif
 
 if gkstretch==20&&gkfreeze==0 then		; TURN ON FREEZE BUTTON IF TIME STRETCH SLIDER IS MOVED ALL THE WAY TO THE RIGHT 
  kOn	=	1
  	chnset	kOn,"freeze"
 elseif trigger:k(gkstretch,19.999,1)==1 then
  	chnset	kOff,"freeze"	
 endif

 if trigger:k(gkrealtime,0.5,0)==1&&gkstretch>1 then	; IF REALTIME BUTTON IS ACTIVATED RETURN TIME STRETCH SLIDER TO '1' (LEFT-MOST)
  kReset	=	1
  		chnset	kReset,"stretch"
 endif

 ksize	 	=	gkGrainScale==1 ? (2*gkstretchP)/gkdens          : 1/gkdens
 kdens		=	gkGrainScale==1 ? (gkdens*gkoverlaps)/gkstretchP : (gkdens*gkoverlaps)/4
 
 ktrig	metro	kdens						; METRONOME TO TRIGGER GRAINS
 schedkwhen	ktrig,0,0,4,random:k(0,gkRndWhen),ksize 	; TRIGGER GRAINS
endin

instr	4	; SOUND GRAINS
 aenv	poscil	1,1/p3,gihanning
 aPtr	line	0,p3,p3*sr
 aPtr	+=	(i(gkRPhasor)*ftlen(giBuffL)) + (random:i(-i(gkRndWhere),0) * sr)
 aSigL	tablei	aPtr,giBuffL
 aSigR	tablei	aPtr,giBuffR

 if gkstretch==1 then			; RELEASE ENVELOPE - USED IF GRAINS ARE INTERRUPTED BY THE TIME STRETCH SLIDER IS RETURNED TO '1'/REALTIME EITHER BY DRAGGING THE SLIDER OR BY ACTIVATING THE REALTIME BUTTON
  arel	linsegr	1,0.2,0
  aSigL	*=	arel
  aSigR	*=	arel
  	turnoff
 endif

 	outs	aSigL*aenv*gklevel*gkwet, aSigR*aenv*gklevel*gkwet
endin

</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>
; TriggerDelay.csd
; Written by Iain McCurdy, 2012.

; This example works best with sharp percussive sounds

; A trigger impulse is generated each time the rms of the input signal crosses the defined 'Threshold' value.
; Each time a new trigger is generated a new random delay time (between user definable limits)
; - and a new random feedback value (again between user definable limits) are generated.

; It is possible to generate feedback values of 1 and greater (which can lead to a continuous build-up of sound)
;  this is included intentionally and the increasing sound will be clipped and can be filtered by reducing the 'Damping' control to produce increasing distortion of the sound within the delay buffer as it repeats 

; Increasing the 'Portamento' control damps the otherwise abrupt changes in delay time.

; 'Width' allows the user to vary the delay from a simple monophonic delay to a ping-pong style delay

<Cabbage>
form caption("Trigger Delay") size(540,240), pluginid("TrDl") style("legacy")
image                  bounds(0, 0,540,240), colour(150,150,205), shape("rounded"), outlinecolour("white"), outlinethickness(4) 

rslider  bounds(  5, 11, 70, 70),  text("Threshold"), textcolour("black"),  channel("threshold"), range(0, 1.00, 0.1, 0.5),      colour( 40, 40, 95),trackercolour("white")
                     
line     bounds( 83, 10, 95, 3), colour("Grey")
label    bounds(100,  6, 60, 10), text("DELAY TIME"), fontcolour("black"), colour(150,150,205)

rslider bounds( 72, 18, 63, 63),  text("Min."),	    textcolour("black"),  channel("dly1"), 	range(0.0001, 2, 0.001,0.5), colour( 40, 40, 95),trackercolour("white")
rslider bounds(130, 18, 63, 63), text("Max."), 	    textcolour("black"),  channel("dly2"), 	range(0.0001, 2, 0.1, 0.5),  colour( 40, 40, 95),trackercolour("white")

line     bounds(202, 10,  95,  3), colour("Grey")
label    bounds(222,  6,  55, 10), text("FEEDBACK"), fontcolour("black"), colour(150,150,205)

rslider bounds(190, 18, 63, 63), text("Min."),      textcolour("black"),  channel("fback1"), 	range(0, 1.200, 0.5),        colour( 40, 40, 95),trackercolour("white")
rslider bounds(248, 18, 63, 63), text("Max."),      textcolour("black"),  channel("fback2"), 	range(0, 1.200, 0.9),        colour( 40, 40, 95),trackercolour("white")

rslider bounds(  5, 81, 70, 70), text("Portamento"), textcolour("black"),  channel("porttime"), 	range(0,  5.00, 0,0.5),         colour( 40, 40, 95),trackercolour("white")
rslider bounds( 65, 81, 70, 70), text("Cutoff"),     textcolour("black"),  channel("cf"), 	range(50,10000, 5000,0.5), colour( 40, 40, 95),trackercolour("white")
rslider bounds(125, 81, 70, 70), text("Bandwidth"),  textcolour("black"),  channel("bw"), 	range(600,22050, 4000,0.5), colour( 40, 40, 95),trackercolour("white")

rslider bounds(  5,151, 70, 70), text("Width"),	    textcolour("black"),  channel("width"), 	range(0,  1.00, 1),         colour( 40, 40, 95),trackercolour("white")
rslider bounds( 65,151, 70, 70), text("Mix"), 	    textcolour("black"),  channel("mix"), 	range(0, 1.00, 0.5),        colour( 40, 40, 95),trackercolour("white")
rslider bounds(125,151, 70, 70), text("Level"),	    textcolour("black"),  channel("level"), 	range(0, 1.00, 1),          colour( 40, 40, 95),trackercolour("white")


xypad bounds(315, 5, 210, 230), channel("cf", "bw"), rangex(50, 10000, 5000), rangey(600, 22050, 4000), text("CF/BW")
}                 
</Cabbage>

<CsoundSynthesizer>                       

<CsOptions>
-d -n
</CsOptions>

<CsInstruments>

sr 		= 	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1

;Author: Iain McCurdy (2012)

instr	1
	kthreshold	chnget	"threshold"				;read in widgets
	kdly1		chnget	"dly1"				;read in widgets
	kdly2		chnget	"dly2"				;read in widgets
	kfback1		chnget	"fback1"				;read in widgets
	kfback2		chnget	"fback2"				;read in widgets
	kwidth		chnget	"width"				;
	kmix		chnget	"mix"				;
	klevel		chnget	"level"				;
	kporttime	chnget	"porttime"				;
	kcf		chnget	"cf"
	kbw		chnget	"bw"
	ainL,ainR	ins				;read stereo inputs

	krms	rms	(ainL+ainR)*0.5
	
	ktrig	trigger	krms, kthreshold, 0
	
	kdly	trandom	ktrig, 0, 1
	kdly	expcurve	kdly,8
	kMinDly	min	kdly1,kdly2
	kdly	=	(kdly * abs(kdly2 - kdly1) ) + kMinDly
	
	
	kramp	linseg	0,0.001,1
	
	kcf	portk	kcf, kramp * 0.05
	kbw	portk	kbw, kramp * 0.05
	
	kdly	portk	kdly, kporttime*kramp
	atime	interp	kdly

	kfback	trandom	ktrig, kfback1, kfback2
	
	;offset delay (no feedback)
	abuf	delayr	5
	afirst	deltap3	atime
	afirst	butbp	afirst,kcf,kbw
		delayw	ainL

	;left channel delay (note that 'atime' is doubled) 
	abuf	delayr	10			;
	atapL	deltap3	atime*2
	atapL	clip	atapL,0,0.9
	atapL	butbp	atapL,kcf,kbw
		delayw	afirst+(atapL*kfback)

	 ;right channel delay (note that 'atime' is doubled) 
	 abuf	delayr	10
	 atapR	deltap3	atime*2
	 atapR	clip	atapR,0,0.9
	 atapR	butbp	atapR,kcf,kbw
		delayw	ainR+(atapR*kfback)
	
	 ;create width control. note that if width is zero the result is the same as 'simple' mode
	 atapL	=	afirst+atapL+(atapR*(1-kwidth))
	 atapR	=	atapR+(atapL*(1-kwidth))
	
	amixL		ntrpol		ainL, atapL, kmix	;CREATE A DRY/WET MIX BETWEEN THE DRY AND THE EFFECT SIGNAL
	amixR		ntrpol		ainR, atapR, kmix	;CREATE A DRY/WET MIX BETWEEN THE DRY AND THE EFFECT SIGNAL
			outs		amixL * klevel, amixR * klevel
endin
		
</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>
; waveset.csd

; 'freeze' is not technically a freeze but instead a very large number of repeats.

; Waveset opcode can be reinitialised by three different methods:
; Manually, using the 'Reset' button, 
; by a built-in metronome, the rate of which can be adjusted by the user
; or by the dynamics of the input sound (the threshold of this dynamic triggereing can be adjusted by the user)
; 'Metro' resetting is disabled when 'Metro Rate' = 0
; 'Threshold' (retrigering by input signal dynamics) is disabled when 'Threshold' = 1 (maximum setting)
; (resetting the opcode will reset its internal buffer and cancel out any time displacement induced by wavelet repetitions) 

<Cabbage>
form caption("waveset") size(510, 90), pluginid("wset") style("legacy")
image pos(0, 0), size(510, 90), colour("Green"), shape("rounded"), outlinecolour("Grey"), outlinethickness(4) 
rslider bounds(5, 10, 70, 70),   text("Repeats"), channel("repeats"), range(1, 100, 1, 1, 1),   colour("yellow"), textcolour("white"), trackercolour("white")
rslider bounds(70, 10, 70, 70),  text("Mult."),   channel("mult"),    range(1, 100, 1, 0.5, 1), colour("yellow"), textcolour("white"), trackercolour("white")
checkbox bounds(140, 23, 100, 30),          channel("freeze"), text("Freeze"), value(0), colour("red"), fontcolour("white"), shape("ellipse")
line bounds(220, 2, 3, 86), colour("Grey")
button bounds(235, 15, 45,45), channel("reset"), text("Reset","Reset"), fontcolour:0("grey"), latched(0)
rslider bounds(290, 10, 70, 70), text("Threshold"),  channel("thresh"), range(0, 1.00, 1), colour("orange"), textcolour("white"), trackercolour("white")
rslider bounds(355, 10, 70, 70), text("Metro Rate"), channel("rate"),   range(0, 5.00, 0), colour("orange"), textcolour("white"), trackercolour("white")
line bounds(430, 2, 3, 86), colour("Grey")
rslider bounds(435,  10, 70, 70), text("Level"), channel("level"), range(0, 1.00, 0.7), colour(255,150, 50), textcolour("white"), trackercolour("white")
}
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-d -n
</CsOptions>

<CsInstruments>

sr 		= 	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1

;Author: Iain McCurdy (2012)

instr	1
	krep		chnget	"repeats"				;READ WIDGETS...
	kmult		chnget	"mult"					;
	klevel		chnget	"level"					;
	kreset		chnget	"reset"					;
	kthresh		chnget	"thresh"				;
	krate		chnget	"rate"					;
	ktrigger	trigger	kreset,0.5,0			;
	kmetro		metro	krate, 0.99
	kfreeze		chnget	"freeze"
	;asigL, asigR	diskin2	"Songpan.wav",1,0,1			;USE SOUND FILE FOR TESTING
	asigL, asigR	ins
	krms		rms	(asigL+asigR)*0.5
	kDynTrig	trigger	krms,kthresh,0

	if (ktrigger+kmetro+kDynTrig)>0 then
	 reinit UPDATE
	endif
	UPDATE:
	aL 		waveset 	asigL,(krep*kmult)+(kfreeze*1000000000),5*60*sr		;PASS THE AUDIO SIGNAL THROUGH waveset OPCODE. Input duration is defined in samples - in this example the expression given equats to a 5 minute buffer
	aR 		waveset 	asigR,(krep*kmult)+(kfreeze*1000000000),5*60*sr		;PASS THE AUDIO SIGNAL THROUGH waveset OPCODE. Input duration is defined in samples - in this example the expression given equats to a 5 minute buffer
	rireturn
			outs		aL*klevel, aR*klevel		;WAVESET OUTPUT ARE SENT TO THE SPEAKERS
endin
		
</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>


</CsoundSynthesizer>



























DiskinFilePlayer.csd

Plays a user selected sound file using diskin2 opcode. 
This file player is best suited for the playback of very long sound files and is less well suited for polyphonic playback.

The sound file can be played back using the Play/Stop button (and the 'Transpose' / 'Speed' buttons to implement pitch/speed change)
 or it can be played back using the MIDI keyboard.

Note that for 'reverse' to be effective either 'loop' needs to be active or inskip needs to be something other than zero

The stretch function works by reducing the speed during silent sections. 
'Threshold' defines the RMS value beneath which audio is regarded as silence.
During 'silent' sections, audio will be muted completely and 'Str.Ratio' will be multipled to the main 'Speed' 

<Cabbage>
form caption("Diskin File Player") size(1025, 310), pluginid("DkPl") style("legacy")
image                    bounds(  0,  0,1025, 310), colour( 70, 30, 30), shape("sharp"), outlinecolour("White"), line(3)	; main panel colouration    

soundfiler           bounds(  5,  5,1015,140), channel("beg","len"), identchannel("filer1"),  colour(0, 255, 255, 255), fontcolour(160, 160, 160, 255)
label bounds(6, 4, 560, 14), text(""), align(left), colour(0,0,0,0), fontcolour(200,200,200), identchannel("stringbox")

image bounds(0,150,1025,160), colour(0,0,0,0), plant("controls"){
filebutton bounds(  5,  5, 80, 25), text("Open File","Open File"), fontcolour("white") channel("filename"), shape("ellipse")
checkbox   bounds(  5, 40, 95, 25), channel("PlayStop"), text("Play/Stop"), colour("lime"), fontcolour("white")
checkbox   bounds(105,  5,100, 15), channel("loop"), text("Loop On/Off"), colour("yellow"), fontcolour("white")
checkbox   bounds(105, 22,100, 15), channel("reverse"), text("Reverse"), colour("yellow"), fontcolour("white")
label      bounds(118, 40, 75, 12), text("Interpolation"), fontcolour("white")
combobox   bounds(105, 53,100, 20), channel("interp"), items("No interp.", "Linear", "Cubic", "Point Sinc"), value(3), fontcolour("white")
rslider    bounds(215,  5, 70, 70), channel("transpose"), range(-48, 24, 0,1,1),            colour( 90, 50, 50), trackercolour("silver"), text("Transpose"), textcolour("white")
rslider    bounds(280,  5, 70, 70), channel("speed"),     range( -4,  4.00, 1),             colour( 90, 50, 50), trackercolour("silver"), text("Speed"),     textcolour("white")
rslider    bounds(345,  5, 70, 70), channel("inskip"),    range(  0,  1.00, 0),             colour( 90, 50, 50), trackercolour("silver"), text("In Skip"),   textcolour("white")
rslider    bounds(410,  5, 70, 70), channel("AttTim"),    range(0, 5, 0, 0.5, 0.001),       colour( 90, 50, 50), trackercolour("silver"), text("Att.Tim"),   textcolour("white")
rslider    bounds(475,  5, 70, 70), channel("RelTim"),    range(0.01, 5, 0.05, 0.5, 0.001), colour( 90, 50, 50), trackercolour("silver"), text("Rel.Tim"),   textcolour("white")
rslider    bounds(540,  5, 70, 70), channel("MidiRef"),   range(0,127,60, 1, 1),            colour( 90, 50, 50), trackercolour("silver"), text("MIDI Ref."), textcolour("white")
rslider    bounds(605,  5, 70, 70), channel("level"),     range(  0,  3.00, 1, 0.5),        colour( 90, 50, 50), trackercolour("silver"), text("Level"),     textcolour("white")
}

image      bounds(675,155,140, 65), colour(0,0,0,0), outlinecolour("silver"), outlinethickness(1), shape("sharp"), plant("stretch") {
checkbox   bounds(  5,  5, 80, 15), channel("StretchOnOff"), text("Stretch"), fontcolour("white")
nslider  bounds(  5, 25, 60, 30), channel("threshold"), range(0,1,0.005,1,0.001),  colour( 90, 50, 50), text("Threshold"), textcolour("white")
nslider  bounds( 75, 25, 60, 30), channel("stretchratio"), range(0.01,8.00,0.25,1,0.01),  colour( 90, 50, 50), trackercolour("silver"), text("Str.Ratio"), textcolour("white")
}

image bounds(820, 155,200, 65), colour(0,0,0,0), outlinecolour("silver"), outlinethickness(1), shape("sharp"), plant("speedmod") {
label      bounds(  0,  5,200, 12), text("Speed Modulation"), fontcolour("white")
nslider  bounds(  5, 25, 60, 30), channel("ModRange"), range(0,4,0,1,0.001),  colour( 90, 50, 50), text("Mod.Range"), textcolour("white")
nslider  bounds( 70, 25, 60, 30), channel("Rate1"), range(0,30,1,1,0.001),  colour( 90, 50, 50), text("Rate 1"), textcolour("white")
nslider  bounds(135, 25, 60, 30), channel("Rate2"), range(0,30,2,1,0.001),  colour( 90, 50, 50), text("Rate 2"), textcolour("white")
}

keyboard bounds( 5,230,1015, 75)


</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-n -+rtmidi=NULL -M0
</CsOptions>

<CsInstruments>

sr = 44100
ksmps = 64
nchnls = 2
0dbfs=1

massign	0,3	; all midi notes on all channels sent to instrument 3

giInterpArr[] array 1, 2, 4, 8
gSfilepath	init	""


opcode FileNameFromPath,S,S		; Extract a file name (as a string) from a full path (also as a string)
 Ssrc	xin				; Read in the file path string
 icnt	strlen	Ssrc			; Get the length of the file path string
 LOOP:					; Loop back to here when checking for a backslash
 iasc	strchar Ssrc, icnt		; Read ascii value of current letter for checking
 if iasc==92 igoto ESCAPE		; If it is a backslash, escape from loop
 loop_gt	icnt,1,0,LOOP		; Loop back and decrement counter which is also used as an index into the string
 ESCAPE:				; Escape point once the backslash has been found
 Sname	strsub Ssrc, icnt+1, -1		; Create a new string of just the file name
	xout	Sname			; Send it back to the caller instrument
endop



instr	1
 gkPlayStop	chnget	"PlayStop"		; read in widgets
 gkloop		chnget	"loop"
 gktranspose	chnget	"transpose"
 gkspeed	chnget	"speed"
 gkinterp	chnget	"interp"
 gkreverse	chnget	"reverse"
 gklevel	chnget	"level"
 gSfilepath	chnget	"filename"		; read in file path string from filebutton widget
 gkStretchOnOff	chnget	"StretchOnOff"
 gkstretchratio	chnget	"stretchratio"
 gkthreshold	chnget	"threshold"
 gkModRange	chnget	"ModRange"
 gkRate1	chnget	"Rate1"
 gkRate2	chnget	"Rate2"
 
 if changed:k(gSfilepath)==1 then		; call instrument to update waveform viewer  
  event "i",99,0,0
 endif
 
 ktrig		trigger	gkPlayStop,0.5,0	; if play/stop button toggles from low (0) to high (1) generate a '1' trigger
 schedkwhen	ktrig,0,0,2,0,-1		; start instrument 2
 
 ktrig1	changed	gktranspose			; if 'transpose' button is changed generate a '1' trigger
 ktrig2	changed	gkspeed				; if 'speed' button is changed generate a '1' trigger
 
 if ktrig1==1 then				; if transpose control has been changed...
  chnset	semitone(gktranspose),"speed"	; set speed according to transpose value
 elseif ktrig2==1&&gkspeed>=0 then		; if speed control has been changed...
  chnset	log2(gkspeed)*12,"transpose"	; set transpose control according to speed value
 endif
endin

instr	2

 if gkPlayStop==0 then				; if play/stop is off (stop)...
  turnoff					; turn off this instrument
 endif						
 iStrLen 	strlen gSfilepath		; derive string length
 if iStrLen > 0 then				; if string length is greater than zero (i.e. a file has been selected) then...
  iAttTim	chnget	"AttTim"		; read in amplitude envelope attack time widget
  iRelTim	chnget	"RelTim"		; read in amplitude envelope attack time widget
  if iAttTim>0 then				; 
   kenv	linsegr	0,iAttTim,1,iRelTim,0
  else								
   kenv	linsegr	1,iRelTim,0			; attack time is zero so ignore this segment of the envelope (a segment of duration zero is not permitted
  endif
  kenv	expcurve	kenv,8			; remap amplitude value with a more natural curve
  aenv	interp		kenv			; interpolate and create a-rate envelope
  iFileLen	filelen	gSfilepath		; derive chosen sound file length
  iNChns	filenchnls	gSfilepath	; derive the number of channels (mono=1 / stereo=2) from the chosen  sound file
  iinskip	chnget	"inskip"		; read in inskip widget
  iloop	chnget	"loop"				; read in 'loop mode' widget
  ktrig	changed	gkloop,gkinterp			; if loop setting or interpolation mode setting
  if ktrig==1 then				; if loop setting has been changed...
   reinit RESTART				; reinitialise from label RESTART
  endif						
  RESTART:					
  kporttime	linseg	0,0.001,0.05		; portamento time function. (Rises quickly from zero to a held value.)
  kspeed	portk	gkspeed,kporttime	; apply portamento smoothing to changes in speed
  
  kMod		jspline	gkModRange,gkRate1,gkRate2
  kspeed	*=	octave(kMod)
  
  if gkStretchOnOff!=1 kgoto SKIP_STRETCH
   a1,a2	init	0
   krms	rms	a1+a2
   if krms<gkthreshold then
    kspeed	*=	gkstretchratio
    kmute	=	0
   else
    kmute	=	1
   endif
   amute		interp	kmute
   aenv		*=	amute
  SKIP_STRETCH:
  
  if iNChns==2 then				; if stereo...
   a1,a2	diskin2	gSfilepath,kspeed*(1-(gkreverse*2)),iinskip*iFileLen,i(gkloop),0,giInterpArr[i(gkinterp)-1]	; use stereo diskin2
  	outs	a1*gklevel*aenv, a2*gklevel*aenv	; send audio to outputs
  elseif iNChns==1 then				; if mono
   a1	diskin2	gSfilepath,kspeed*(1-(gkreverse*2)),iinskip*iFileLen,i(gkloop),0,giInterpArr[i(gkinterp)-1]	; use mono diskin2
  	outs	a1*gklevel*aenv, a1*gklevel*aenv	; send audio to outputs
  endif
 endif
endin


instr	3
 icps	cpsmidi							; read in midi note data as cycles per second
 iamp	ampmidi	1						; read in midi velocity (as a value within the range 0 - 1)
 iStrLen 	strlen	gSfilepath				; derive string length
 if iStrLen > 0 then						; if string length is greater than zero (i.e. a file has been selected) then...
  iMidiRef	chnget	"MidiRef"				; MIDI unison reference note
  iinskip	chnget	"inskip"				; read in inskip widget
  iloop		chnget	"loop"					; read in 'loop mode' widget
  iAttTim	chnget	"AttTim"				; read in amplitude envelope attack time widget
  iRelTim	chnget	"RelTim"				; read in amplitude envelope attack time widget
  if iAttTim>0 then						; 
   kenv	linsegr	0,iAttTim,1,iRelTim,0
  else								
   kenv	linsegr	1,iRelTim,0					; attack time is zero so ignore this segment of the envelope (a segment of duration zero is not permitted
  endif
  kenv	expcurve	kenv,8					; remap amplitude value with a more natural curve
  aenv	interp		kenv					; interpolate and create a-rate envelope
  iFileLen	filelen	gSfilepath				; derive chosen sound file length
  ispeed		=	icps/cpsmidinn(iMidiRef)	; derive playback speed from note played in relation to a reference note (MIDI note 60 / middle C)
  iNChns	filenchnls	gSfilepath			; derive the number of channels (mono=1 / stereo=2) from the chosen  sound file
  if iNChns==2 then						; if stereo...
   a1,a2	diskin2	gSfilepath,ispeed*(1-(gkreverse*2)),iinskip*iFileLen,i(gkloop),0,giInterpArr[i(gkinterp)-1]	; use stereo diskin2
  	outs	a1*gklevel*aenv*iamp, a2*gklevel*aenv*iamp	; send audio to outputs
  elseif iNChns==1 then						; if mono
   a1		diskin2	gSfilepath,ispeed*(1-(gkreverse*2)),iinskip*iFileLen,i(gkloop),0,giInterpArr[i(gkinterp)-1]	; use mono diskin2
  	outs	a1*gklevel*aenv*iamp, a1*gklevel*aenv*iamp	; send audio to outputs
  endif
 endif
endin

instr	99
 Smessage sprintfk "file(%s)", gSfilepath			; print sound file image to fileplayer
 chnset Smessage, "filer1"

 /* write file name to GUI */
 Sname FileNameFromPath	gSfilepath				; Call UDO to extract file name from the full path
 Smessage sprintfk "text(%s)",Sname				; create string to update text() identifier for label widget
 chnset Smessage, "stringbox"					; send string to  widget

endin

</CsInstruments>  

<CsScore>
i 1 0 10000
</CsScore>

</CsoundSynthesizer>
; FileRecorder.csd
; Written by Iain McCurdy, 2014
; 
; Records audio to a file on disk. 
; 
; The audio file name includes the date and time. (This idea comes courtesy of Rory Walsh.)
; 
; Toggling record off and on will append the new recording onto the end of the previously recorded audio.
; To start a new file, click 'New File'.


<Cabbage>
form caption("File Recorder") size(230, 45), colour(0,0,0) pluginid("FRec") style("legacy")
image               bounds(  0,  0,230, 45), colour(100,100,100), outlinecolour("White"), line(3)
checkbox bounds( 10, 10, 75, 25), channel("record"), text("Record"), colour("red"), fontcolour("white")
button   bounds( 90, 10, 65, 25), colour("red"), text("New File","New File"), channel("reset"), latched(0)
checkbox bounds(165, 10, 75, 25), channel("play"), text("Play"), colour("green"), fontcolour("white")
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-n -dm0
</CsOptions>

<CsInstruments>

sr = 44100
ksmps = 64
nchnls = 2
0dbfs = 1

gkRecordingActiveFlag	init	0
gkFileRecorded		init	0

instr	1
 gaL,gaR	ins
 gkrecord	chnget	"record"
 gkreset	chnget	"reset"
 gkplay		chnget	"play"
 kRecStart	trigger	gkrecord,0.5,0

 if kRecStart==1 && gkRecordingActiveFlag==0 then
  event	"i",9000,0,-1
  gkRecordingActiveFlag	=	1
 endif
 
 kPlayStart	trigger	gkplay,0.5,0
 if kPlayStart==1 && gkFileRecorded==1 then
  event	"i",9001,ksmps/sr,3600
 endif

 kResetTrig	trigger	gkreset,0.5,1
 if kResetTrig==1 && gkRecordingActiveFlag==1 then
  event	"i",9000,0,-1
 endif  
endin


instr 9000	; record file
 print	p1
 if gkplay==1 then
  chnset	k(0),"record"
  turnoff
 endif
 gkFileRecorded		init	1
 itim     date
 Stim     dates     itim
 itim     date
 Stim     dates     itim
 Syear    strsub    Stim, 20, 24
 Smonth   strsub    Stim, 4, 7
 Sday     strsub    Stim, 8, 10
 iday     strtod    Sday
 Shor     strsub    Stim, 11, 13
 Smin     strsub    Stim, 14, 16
 Ssec     strsub    Stim, 17, 19
 Sfilnam  sprintf  "%s_%s_%02d_%s_%s_%s.wav", Syear, Smonth, iday, Shor,Smin, Ssec
 gSname   sprintf "FileRecorder_%s", Sfilnam
 if gkrecord==1 then			; record
  fout gSname, 8, gaL, gaR
 endif
 gkRecordingActiveFlag	=	1 - release()
endin

instr	9001	; play file
 if gkplay==0 then
  turnoff
 endif 
   aL,aR	diskin2	gSname,1
  	outs	aL,aR
 iFileLen	filelen	gSname
 p3	=	iFileLen
 xtratim	0.1 
 krelease	release
 	chnset	1-krelease,"play"
endin

</CsInstruments>  

<CsScore>
i 1 0 [60*60*24*7]
</CsScore>

</CsoundSynthesizer>; FileStretcher.csd
; Written by Iain McCurdy, 2014

; Used to create a time-stretched version of an input file
; Often when time-stretching a sound when wishing to retain the priniciple characteristics of the source sound,
;  we play the attack portion of the sound at normal speed (as well, often, as the release portion) and only stretch
;  sound in the middle of the source - often called the 'sustain' portion.
; This example facilitates this technique by allowing the user to select the portion of sound to stretch by 
;  clicking and dragging upon the waveform view creating a highlighted area. Time stretching will only be applied to this 
;  portion of the sound.

; The user defines a time-stretching zone by clicking and dragging on the waveform view once a file has been opened.
; 'Duration' defines the total duration of the output file.

; 'Play' auditions the file stretch. 
; 'Record' renders the time-stretched audio to disk offline.
; The console reports the name of the output file and a message: 'Done!' when the rendering is complete. 
;    The output file will be created in the same directory as the input file and with the same name but with the word '_stretched' and a unique number suffixed. 

; 'Aud.Lev.' provides a amplitude level control (the rendered file is unaffected and always renders at full amplitude.

; Adding a small amount of jitter to the file reading pointer when time-stretching can reduce the sense of a frozen spectrum 
;  evident during long time stretches. Jitter depth and rate can be modified.

<Cabbage>
form caption("File Stretcher") size(580,430), colour(0,0,0) pluginid("FiSt"), guirefresh(10)  style("legacy")
image                bounds(  0,  0,580,430), colour(50,50,60), outlinecolour("White"), line(3), shape("sharp")

soundfiler           bounds(  5,  5,570,150), channel("beg","len"), identchannel("filer1"),  colour(0, 255, 255, 255), fontcolour(160, 160, 160, 255)
label bounds(6, 4, 560, 14), text(""), align(left), colour(0,0,0,0), fontcolour(200,200,200), identchannel("stringbox")
label      bounds( 6, 20,450, 13), text("Click and drag on waveform to select sound portion for time stretching..."), align(left), colour("black"), fontcolour("white"), visible(0), identchannel("InstructionID")

filebutton bounds(  7,160, 83, 20), text("OPEN FILE","OPEN FILE"), fontcolour(255,255,100) channel("filename"), shape("ellipse"), channel("beg","len")
button     bounds(  7,183, 83, 20), text("PLAY STR.","PLAY STR."), channel("PlayStr"), value(0), latched(0), fontcolour(100,255,100)
button     bounds( 96,183, 83, 20), text("PLAY NORM.","PLAY NORM."), channel("PlayNorm"), value(0), latched(0), fontcolour(150,150,255)
button     bounds(  7,206, 83, 20), text("RECORD","RECORD"), channel("Record"), value(0), latched(0), fontcolour(255,100,100)
button     bounds( 96,206, 83, 20), text("STOP","STOP"), channel("Stop"), value(0), latched(0), fontcolour(150,150,255)

rslider    bounds(178,160, 60, 60), text("Duration"), channel("Duration"), range(0.1, 60.00, 3,0.5,0.001), colour(30,30,40), trackercolour("white"), fontcolour("white"), outlinecolour(150,150,150)
rslider    bounds(238,160, 60, 60), text("Transpose"), channel("Transpose"), range(-48, 48.00, 0,1,0.5), colour(30,30,40), trackercolour("white"), fontcolour("white"), outlinecolour(150,150,150)
;nslider  bounds(180,160,110, 35), text("Stretched Duration"), channel("Duration"), range(0.1, 800.00, 3,1,0.001), colour(0,0,0), fontcolour("white"), textbox(1)
label      bounds(300,160, 80, 13), text("FFT Size"), fontcolour("white")
combobox   bounds(300,177, 80, 17), channel("FFTSize"), items("32768", "16384", "8192", "4096", "2048", "1024", "512", "256", "128", "64", "32"), value(5), fontcolour("white")
checkbox   bounds(300,198, 95, 15), channel("lock"), text("Phase Lock"), fontcolour("white"), colour(255,0,0)

rslider    bounds(390,160, 60, 60), text("Aud.Lev."), channel("Level"),  range(0, 1.00, 0.9),       colour(30,30,40), trackercolour("white"), fontcolour("white"), outlinecolour(150,150,150)
rslider    bounds(450,160, 60, 60), text("Jit.Dep."), channel("JitDep"), range(0, 1.00, 0.2),       colour(30,30,40), trackercolour("white"), fontcolour("white"), outlinecolour(150,150,150)
rslider    bounds(510,160, 60, 60), text("Jit.Rte."), channel("JitRte"), range(0.5, 100.00, 2,0.5), colour(30,30,40), trackercolour("white"), fontcolour("white"), outlinecolour(150,150,150)

csoundoutput bounds(  0,230,580,200), text("Csound Output")

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-n -dm0
</CsOptions>

<CsInstruments>

sr = 44100
ksmps = 64
nchnls = 2
0dbfs=1

gichans		init	0		; 
giReady		init	0		; flag to indicate function table readiness
gSfilepath	init	""
giFFTSizes[]	array	32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32	; an array is used to store FFT window sizes
;maxalloc	2,1	; Only allow one sound playing/stretching instrument at a time
gkactive	init	0


opcode FileNameFromPath,S,S		; Extract a file name (as a string) from a full path (also as a string)
 Ssrc	xin						; Read in the file path string
 icnt	strlen	Ssrc			; Get the length of the file path string
 LOOP:							; Loop back to here when checking for a backslash
 iasc	strchar Ssrc, icnt		; Read ascii value of current letter for checking
 if iasc==92 igoto ESCAPE		; If it is a backslash, escape from loop
 loop_gt	icnt,1,0,LOOP		; Loop back and decrement counter which is also used as an index into the string
 ESCAPE:						; Escape point once the backslash has been found
 Sname	strsub Ssrc, icnt+1, -1	; Create a new string of just the file name
	xout	Sname				; Send it back to the caller instrument
endop

instr	1
 gkPlayStr	chnget	"PlayStr"
 gkPlayNorm	chnget	"PlayNorm"
 gkRecord	chnget	"Record"
 gSfilepath	chnget	"filename"
 kNewFileTrg	changed	gSfilepath		; if a new file is loaded generate a trigger
 gkLevel	chnget	"Level"
 gkTranspose	chnget	"Transpose"
 kporttime	linseg	0,0.01,0.05
 gkTranspose	portk	semitone(gkTranspose),kporttime
 gklock		chnget	"lock"			; Phase locking in mincer opcode
 gkAttack	chnget	"beg"
 gkLen		chnget	"len" 
 
 if trigger(gkAttack,1,0)==1 then		; Hide instruction once stretch area has been selected
  chnset "visible(0)", "InstructionID" 
 endif
 
 if kNewFileTrg==1 then				; if a new file has been loaded...
  event	"i",99,0,0.01				; call instrument to update sample storage function table 
 endif   
 
 ktrig	trigger	gkPlayStr,0.5,0			; Generate an impulse if PLAY STRETCH button is clicked
 schedkwhen	ktrig,0,0,2,0,0.01

 ktrig	trigger	gkPlayNorm,0.5,0		; Generate an impulse if PLAY NORM. button is clicked
 schedkwhen	ktrig,0,0,3,0,0.01

 ktrig	trigger	gkRecord,0.5,0			; Generate an impulse if RECORD button is clicked
 schedkwhen	ktrig,0,0,4,0,0.1
 
endin

instr	99	; load sound file
 
 /* write file selection to function tables */
 gichans	filenchnls	gSfilepath			; derive the number of channels (mono=1,stereo=2) in the sound file
 gitableL	ftgen	1,0,0,1,gSfilepath,0,0,1
 if gichans==2 then
  gitableR	ftgen	2,0,0,1,gSfilepath,0,0,2
 endif
 giReady 	=	1					; if no string has yet been loaded giReady will be zero
 Smessage sprintfk "file(%s)", gSfilepath			; print sound file image to fileplayer
 chnset Smessage, "filer1"

 /* write file name to GUI */
 Sname FileNameFromPath	gSfilepath				; Call UDO to extract file name from the full path
 Smessage sprintfk "text(%s)",Sname				; create string to update text() identifier for label widget
 chnset Smessage, "stringbox"					; send string to  widget

 if i(gkAttack)==0 then						; Reveal instruction when a file is opened for the first time
  chnset "visible(1)", "InstructionID"
 endif	

 /* write to pvx files */					; experimental
 ;#define	ANALYSISFILE_L	#"pvswriteFileL.pvx"#		; experimental
 ;#define	ANALYSISFILE_R	#"pvswriteFileR.pvx"#		; experimental
 ;kcount	=	0					; experimental
 ;loop:								; experimental
 ;acount	interp	kcount					; experimental
 ;asampL	table3	acount,1				; experimental	
 ;asampR	table3	acount,2                                ; experimental
 ;fsigL	pvsanal		asampL, 1024, 256, 1024, 1  		; experimental
 ;fsigR	pvsanal		asampR, 1024, 256, 1024, 1      	; experimental
 ;pvsfwrite 	fsigL, $ANALYSISFILE_L				; experimental
 ;pvsfwrite 	fsigR, $ANALYSISFILE_R				; experimental
 ;loop_lt	kcount,1,ftlen(1),loop				; experimental
 ;turnoff							; experimental

endin

instr	2	; play stretched
 if giReady = 1 then				; i.e. if a file has been loaded
  
  gkactive init i(gkactive) + 1	;INCREMENT NOTE COUNTER
  if gkactive>1 then		;IF POLYPHONY IS EXCEEDED (THROUGH THE ADDITION OF NEW NOTE)
   turnoff			;REMOVE THIS NOTE
  endif
  krel release			;IF NOTE HELD = 0, IF NOTE RELEASED = 1
  ktrig trigger krel,0.5,0	;WHEN RELEASE FLAG CROSSES 0.5 UPWARDS, I.E. NOTE HAS BEEN RELEASED...	
  if ktrig==1 then		
   gkactive = gkactive - 1	;...DECREMENT ACTIVE NOTES COUNTER
  endif
  
  kStop		chnget	"Stop"
  ktrig		trigger	kStop,0.5,0		; Generate an impulse if 'STOP' is clicked
  if ktrig==1 then
   turnoff
  endif

  iFileLen	=	ftlen(gitableL)/sr											; File length in seconds
  iAttPnt	=	(i(gkAttack) == 0 ? 0.01 : (i(gkAttack)/sr))				; If stretch points haven't been set, replace with defaults. 
  iRelPnt	=	(i(gkAttack) == 0 ? 0.01 : ((i(gkAttack) + i(gkLen))/sr))
  
  iDuration	chnget	"Duration"
  
  p3		limit	iDuration, iFileLen, iDuration
  
  iFFTSize	chnget	"FFTSize"
  iFFTSize	=	giFFTSizes[iFFTSize-1]
  
  ; File reading pointer main shape
  aptr		linseg	0,iAttPnt,iAttPnt, p3-iAttPnt-(iFileLen-iRelPnt), iRelPnt, iFileLen-iRelPnt, iFileLen

  ; File reading pointer jitter
  kJitDep	chnget	"JitDep"
  kJitRte	chnget	"JitRte"
  irise		=	0.01
  kJitEnv	linseg	0,iAttPnt,0, irise, .1, p3-iAttPnt-(iFileLen-iRelPnt) - (2*irise), .1, irise, 0 
  ajit		jspline	kJitDep*kJitEnv,kJitRte*0.5,kJitRte*2

  if gichans=1 then						; Mono
   a1	mincer		aptr+ajit, 1, gkTranspose, gitableL, gklock, iFFTSize
   ;kptr	linseg	0,iAttPnt,iAttPnt, p3-iAttPnt-(iFileLen-iRelPnt), iRelPnt, iFileLen-iRelPnt, iFileLen	; experimental
   ;a1	pvoc		kptr, gkTranspose, $ANALYSISFILE_L							; experimental
  	outs	a1*gkLevel,a1*gkLevel

  elseif gichans=2 then						; Stereo
   a1	mincer		aptr+ajit, 1, gkTranspose, gitableL, gklock, iFFTSize
   a2	mincer		aptr+ajit, 1, gkTranspose, gitableR, gklock, iFFTSize
   ;kptr	linseg	0,iAttPnt,iAttPnt, p3-iAttPnt-(iFileLen-iRelPnt), iRelPnt, iFileLen-iRelPnt, iFileLen	; experimental
   ;a1	pvoc		kptr, gkTranspose, $ANALYSISFILE_L							; experimental
   ;a2	pvoc		kptr, gkTranspose, $ANALYSISFILE_R							; experimental
  	outs	a1*gkLevel,a2*gkLevel
  endif
 endif
endin

instr	3	; normal speed playback
 p3	=	ftlen(gitableL)/(sr*i(gkTranspose))
 aptr	line	0,p3,1
 aL	table3	aptr,gitableL,1
 if gichans==1 then
 	outs	aL*gkLevel,aL*gkLevel
 else
 aR	table3	aptr,gitableR,1
	outs	aL*gkLevel,aR*gkLevel 
 endif 
 kStop		chnget	"Stop"
 ktrig		trigger	kStop,0.5,0		; Generate an impulse if 'STOP' is clicked
 if ktrig==1 then
  turnoff
 endif
endin


instr	4	; record/render
 if giReady = 1 then				; i.e. if a file has been loaded

  iFileLen	=	ftlen(gitableL)/sr						; File length in seconds
  iAttPnt	=	(i(gkAttack) == 0 ? 0.01 : (i(gkAttack)/sr))			; If stretch points haven't been set, replace with defaults. 
  iRelPnt	=	(i(gkAttack) == 0 ? 0.01 : ((i(gkAttack) + i(gkLen))/sr))
  
  iDuration	chnget	"Duration"
  
  p3		=	iDuration
     		
  ilen		strlen	gSfilepath			; Derive string length.
  SOutputName	strsub	gSfilepath,0,ilen-4		; Remove ".wav"
  SOutputName	strcat	SOutputName,"_stretched"	; Add suffix
  iDate		date
  SDate		sprintf	"%i",iDate
  SOutputName	strcat	SOutputName,SDate		; Add date
  SOutputName	strcat	SOutputName,".wav"		; Add extension
  
  
  iFFTSize	chnget	"FFTSize"
  iFFTSize	=	giFFTSizes[iFFTSize-1]
  
  iNKCycles	=	(iDuration * sr) / ksmps
  kCount	init	0
  
  loop:
  
  ; File reading pointer main shape
  aptr		linseg	0,iAttPnt,iAttPnt, p3-iAttPnt-(iFileLen-iRelPnt), iRelPnt, iFileLen-iRelPnt, iFileLen

  ; File reading pointer jitter
  kJitDep	chnget	"JitDep"
  kJitRte	chnget	"JitRte"
  irise		=	0.01
  kJitEnv	linseg	0,iAttPnt,0, irise, .1, p3-iAttPnt-(iFileLen-iRelPnt) - (2*irise), .1, irise, 0 
  ajit		jspline	kJitDep*kJitEnv,kJitRte*0.5,kJitRte*2

  if gichans=1 then						; Mono
   a1	mincer		aptr+ajit, 1, gkTranspose, gitableL, gklock, iFFTSize
   ;kptr	linseg	0,iAttPnt,iAttPnt, p3-iAttPnt-(iFileLen-iRelPnt), iRelPnt, iFileLen-iRelPnt, iFileLen	; experimental
   ;a1	pvoc		kptr, gkTranspose, $ANALYSISFILE_L							; experimental
  	fout	SOutputName,8,a1

  elseif gichans=2 then						; Stereo
   a1	mincer		aptr+ajit, 1, gkTranspose, gitableL, gklock, iFFTSize
   a2	mincer		aptr+ajit, 1, gkTranspose, gitableR, gklock, iFFTSize
   ;kptr	linseg	0,iAttPnt,iAttPnt, p3-iAttPnt-(iFileLen-iRelPnt), iRelPnt, iFileLen-iRelPnt, iFileLen	; experimental
   ;a1	pvoc		kptr, gkTranspose, $ANALYSISFILE_L							; experimental
   ;a2	pvoc		kptr, gkTranspose, $ANALYSISFILE_R							; experimental
  	fout	SOutputName,8,a1,a2
  endif

	loop_lt	kCount, 1, iNKCycles, loop
	printks	SOutputName,0
	printks	"\nDone!\n",0
	turnoff
	
 endif
endin

</CsInstruments>  

<CsScore>
i 1 0 10000
</CsScore>

</CsoundSynthesizer>
; Flooper2FilePlayer.csd
; Written by Iain McCurdy, 2014

; Load a user selected sound file into a GEN 01 function table and plays it back using flooper2. 
; This file player is best suited for polyphonic playback and is less well suited for the playback of very long sound files .
; 
; The sound file can be played back using the Play/Stop button (and the 'Transpose' / 'Speed' buttons to implement pitch/speed change)
;  or it can be played back using the MIDI keyboard.
; 
; The loop points can be set either by using the loop 'Start' and 'End' sliders or by clicking and dragging on the waveform view -
;  - flooper2 will take the values from the last control input moved.

<Cabbage>
form caption("Flooper2 File Player") size(805,340), colour(0,0,0) pluginid("FlFP") style("legacy")
image                     bounds(  0,  0,805,340), colour(155, 50,  0), outlinecolour("White"), line(3), shape("sharp")	; main panel colouration    

soundfiler bounds(  5,  5,795,175), channel("beg","len"), identchannel("filer1"),  colour(0, 255, 255, 255), fontcolour(160, 160, 160, 255), 
label bounds(6, 4, 560, 14), text(""), align(left), colour(0,0,0,0), fontcolour(200,200,200), identchannel("stringbox")

image    bounds(  0,180,805,160), colour(155,30,0,0), outlinecolour("white"), line(2), shape("sharp"), plant("controls"){
filebutton bounds(  5, 10, 80, 25), text("Open File","Open File"), fontcolour("white") channel("filename"), shape("ellipse")
checkbox   bounds(  5, 40, 95, 25), channel("PlayStop"), text("Play/Stop"), colour("yellow"), fontcolour("white")

label      bounds(110, 12, 80, 12), text("Looping Mode"), fontcolour("white")
combobox   bounds(110, 25, 80, 20), channel("mode"), items("Forward", "Backward", "Fwd./Bwd."), value(1), fontcolour("white")

line       bounds(207, 10,  2, 65), colour("Grey")
                        
label      bounds(302,  4, 43, 8), text("L   O   O   P"), fontcolour("white")
rslider    bounds(210, 15, 60, 60), channel("LoopStart"), range(0, 1, 0),                   colour(100, 30, 10), text("Start"),     textcolour("white"), trackercolour(175,130,110)
rslider    bounds(265, 15, 60, 60), channel("LoopEnd"),   range(0, 1, 1),                   colour(100, 30, 10), text("End"),       textcolour("white"), trackercolour(175,130,110)
rslider    bounds(320, 15, 60, 60), channel("crossfade"), range(0, 1.00, 0.01,0.5),         colour(100, 30, 10), text("Fade"),      textcolour("white"), trackercolour(175,130,110)
rslider    bounds(375, 15, 60, 60), channel("inskip"),    range(0, 1.00, 0),                colour(100, 30, 10), text("inskip"),    textcolour("white"), trackercolour(175,130,110)
line       bounds(440, 10,  2, 65), colour("Grey")

label      bounds(475,  4, 53, 8), text("S   P   E   E   D"), fontcolour("white")
rslider    bounds(445, 15, 60, 60), channel("transpose"), range(-24, 24, 0,1,1),            colour(100, 30, 10), text("Transpose"), textcolour("white"), trackercolour(175,130,110)
rslider    bounds(500, 15, 60, 60), channel("speed"),     range( 0, 4.00, 1, 0.5),          colour(100, 30, 10), text("Speed"),     textcolour("white"), trackercolour(175,130,110)
line       bounds(560, 10,  2, 65), colour("Grey")

label      bounds(576,  4, 90, 8), text("E   N   V   E   L   O   P   E"), fontcolour("white")
rslider    bounds(565, 15, 60, 60), channel("AttTim"),    range(0, 5, 0, 0.5, 0.001),       colour(100, 30, 10), text("Att.Tim"),   textcolour("white"), trackercolour(175,130,110)
rslider    bounds(620, 15, 60, 60), channel("RelTim"),    range(0.01, 5, 0.05, 0.5, 0.001), colour(100, 30, 10), text("Rel.Tim"),   textcolour("white"), trackercolour(175,130,110)
line       bounds(680, 10,  2, 65), colour("Grey")

label      bounds(702,  4, 80, 8), text("C   O   N   T   R   O   L"), fontcolour("white")
rslider    bounds(685, 15, 60, 60), channel("MidiRef"),   range(0,127,60, 1, 1),            colour(100, 30, 10), text("MIDI Ref."), textcolour("white"), trackercolour(175,130,110)
rslider    bounds(740, 15, 60, 60), channel("level"),     range(  0,  3.00, 1, 0.5),        colour(100, 30, 10), text("Level"),     textcolour("white"), trackercolour(175,130,110)

keyboard bounds(5, 80, 795, 75)
}
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-n -+rtmidi=NULL -M0 -dm0
</CsOptions>

<CsInstruments>

sr = 44100
ksmps = 64
nchnls = 2
0dbfs = 1

		massign	0,3
gichans		init	0
giReady		init	0
gSfilepath	init	""

gitableL	ftgen	1,0,2,2,0
gkTabLen	init	ftlen(gitableL)

opcode FileNameFromPath,S,S		; Extract a file name (as a string) from a full path (also as a string)
 Ssrc	xin						; Read in the file path string
 icnt	strlen	Ssrc			; Get the length of the file path string
 LOOP:							; Loop back to here when checking for a backslash
 iasc	strchar Ssrc, icnt		; Read ascii value of current letter for checking
 if iasc==92 igoto ESCAPE		; If it is a backslash, escape from loop
 loop_gt	icnt,1,0,LOOP		; Loop back and decrement counter which is also used as an index into the string
 ESCAPE:						; Escape point once the backslash has been found
 Sname	strsub Ssrc, icnt+1, -1	; Create a new string of just the file name
	xout	Sname				; Send it back to the caller instrument
endop

instr	1
 gkmode		chnget	"mode"
 kLoopStart	chnget	"LoopStart"		; sliders
 kLoopEnd	chnget	"LoopEnd"		;  "
 kbeg		chnget	"beg"			; click and drag
 klen		chnget	"len"			;  "
 kTrigSlid	changed	kLoopStart,kLoopEnd
 kTrigCAD	changed	kbeg,klen
 if kTrigSlid==1 then
  gkLoopStart	=	kLoopStart
  gkLoopEnd	=	kLoopEnd
 elseif kTrigCAD==1 then
  gkLoopStart	=	kbeg/gkTabLen
  gkLoopEnd	=	(kbeg+klen)/gkTabLen
 endif

 gkLoopEnd	limit	gkLoopEnd,gkLoopStart+0.01,1	; limit loop end to prevent crashes
 gkcrossfade	chnget	"crossfade"
 gkinskip	chnget	"inskip"
 gkPlayStop	chnget	"PlayStop"
 gktranspose	chnget	"transpose"
 gkspeed	chnget	"speed"
 gklevel	chnget	"level"

 gSfilepath	chnget	"filename"
 kNewFileTrg	changed	gSfilepath		; if a new file is loaded generate a trigger
 if kNewFileTrg==1 then				; if a new file has been loaded...
  event	"i",99,0,0				; call instrument to update sample storage function table 
 endif  
 
 ktrig	trigger	gkPlayStop,0.5,0		; if play button changes to 'play', generate a trigger
 schedkwhen	ktrig,0,0,2,0,-1		; start instr 2 playing a held note

 ktrig1	changed	gktranspose			; if 'transpose' button is changed generate a '1' trigger
 ktrig2	changed	gkspeed				; if 'speed' button is changed generate a '1' trigger
 
 if ktrig1==1 then				; if transpose control has been changed...
  chnset	semitone(gktranspose),"speed"	; set speed according to transpose value
 elseif ktrig2==1 then		; if speed control has been changed...
  chnset	log2(gkspeed)*12,"transpose"	; set transpose control according to speed value
 endif

endin



instr	99	; load sound file
 gichans	filenchnls	gSfilepath			; derive the number of channels (mono=1,stereo=2) in the sound file
 gitableL	ftgen	1,0,0,1,gSfilepath,0,0,1
 giFileLen	filelen		gSfilepath			; derive the file duration
 gkTabLen	init		ftlen(gitableL)			; table length in sample frames
 if gichans==2 then
  gitableR	ftgen	2,0,0,1,gSfilepath,0,0,2
 endif
 giReady 	=	1					; if no string has yet been loaded giReady will be zero

 Smessage sprintfk "file(%s)", gSfilepath			; print sound file to viewer
 chnset Smessage, "filer1"	

 /* write file name to GUI */
 Sname FileNameFromPath	gSfilepath				; Call UDO to extract file name from the full path
 Smessage sprintfk "text(%s)",Sname				; create string to update text() identifier for label widget
 chnset Smessage, "stringbox"					; send string to  widget

endin



instr	2	; sample triggered by 'play/stop' button
 if gkPlayStop==0 then
  turnoff
 endif
 ktrig changed	gkmode
 if ktrig==1 then
  reinit RESTART
 endif
 RESTART:
 if giReady = 1 then						; i.e. if a file has been loaded
  iAttTim	chnget	"AttTim"				; read in widgets
  iRelTim	chnget	"RelTim"
  if iAttTim>0 then						; is amplitude envelope attack time is greater than zero...
   kenv	linsegr	0,iAttTim,1,iRelTim,0				; create an amplitude envelope with an attack, a sustain and a release segment (senses realtime release)
  else
   kenv	linsegr	1,iRelTim,0					; create an amplitude envelope with a sustain and a release segment (senses realtime release)
  endif
  kenv	expcurve	kenv,8					; remap amplitude value with a more natural curve
  aenv	interp		kenv					; interpolate and create a-rate envelope
  kporttime	linseg	0,0.001,0.05				; portamento time function. (Rises quickly from zero to a held value.)
  kspeed	portk	gkspeed,kporttime			; apply portamento smoothing to changes in speed
  klevel	portk	gklevel,kporttime			; apply portamento smoothing to changes in level
  kcrossfade	=	0.01
  istart	=	0
  ifenv		=	0
  iskip		=	0
  if gichans==1 then						; if mono...
   a1	flooper2	klevel,kspeed, gkLoopStart*giFileLen, gkLoopEnd*giFileLen, gkcrossfade, gitableL, i(gkinskip)*giFileLen, i(gkmode)-1, ifenv, iskip
	outs	a1*aenv,a1*aenv					; send mono audio to both outputs 
  elseif gichans==2 then						; otherwise, if stereo...
   a1	flooper2	klevel,kspeed, gkLoopStart*giFileLen, gkLoopEnd*giFileLen, gkcrossfade, gitableL, i(gkinskip)*giFileLen, i(gkmode)-1, ifenv, iskip
   a2	flooper2	klevel,kspeed, gkLoopStart*giFileLen, gkLoopEnd*giFileLen, gkcrossfade, gitableR, i(gkinskip)*giFileLen, i(gkmode)-1, ifenv, iskip
 	outs	a1*aenv,a2*aenv					; send stereo signal to outputs
  endif               
 endif
endin

instr	3	; sample triggered by midi note
 icps	cpsmidi							; read in midi note data as cycles per second
 iamp	ampmidi	1						; read in midi velocity (as a value within the range 0 - 1)
 iMidiRef	chnget	"MidiRef"

 if giReady = 1 then						; i.e. if a file has been loaded
  iAttTim	chnget	"AttTim"				; read in widgets
  iRelTim	chnget	"RelTim"
  if iAttTim>0 then						; is amplitude envelope attack time is greater than zero...
   kenv	linsegr	0,iAttTim,1,iRelTim,0				; create an amplitude envelope with an attack, a sustain and a release segment (senses realtime release)
  else
   kenv	linsegr	1,iRelTim,0					; create an amplitude envelope with a sustain and a release segment (senses realtime release)
  endif
  kenv	expcurve	kenv,8					; remap amplitude value with a more natural curve
  aenv	interp		kenv					; interpolate and create a-rate envelope
  kporttime	linseg	0,0.001,0.05				; portamento time function. (Rises quickly from zero to a held value.)
  klevel	portk	gklevel,kporttime			; apply portamento smoothing to changes in level
  kcrossfade	=	0.01
  istart	=	0
  ifenv		=	0
  iskip		=	0
  if gichans==1 then						; if mono...
   a1	flooper2	klevel*iamp,icps/cpsmidinn(iMidiRef), gkLoopStart*giFileLen, gkLoopEnd*giFileLen, gkcrossfade, gitableL, i(gkinskip)*giFileLen, i(gkmode)-1, ifenv, iskip
	outs	a1*aenv,a1*aenv			; send mono audio to both outputs 
  elseif gichans==2 then					; otherwise, if stereo...
   a1	flooper2	klevel*iamp,icps/cpsmidinn(iMidiRef), gkLoopStart*giFileLen, gkLoopEnd*giFileLen, gkcrossfade, gitableL, i(gkinskip)*giFileLen, i(gkmode)-1, ifenv, iskip
   a2	flooper2	klevel*iamp,icps/cpsmidinn(iMidiRef), gkLoopStart*giFileLen, gkLoopEnd*giFileLen, gkcrossfade, gitableR, i(gkinskip)*giFileLen, i(gkmode)-1, ifenv, iskip
 	outs	a1*aenv,a2*aenv			; send stereo signal to outputs
  endif               
 endif

endin
 
</CsInstruments>  

<CsScore>
i 1 0 [60*60*24*7]
</CsScore>

</CsoundSynthesizer>
; FogFilePlayer.csd
; Written by Iain McCurdy, 2015

; File player based around the granular synthesis opcode, 'fog'.
; A second voice can be activated (basically another parallel granular synthesiser) with parameter variations of density, transposition, pointer location (Phs) and delay.
; Two modes of playback are available: manual pointer and speed
; The pointer and grain density can also be modulated by clicking and dragging on the waveform view.
;  * This will also start and stop the grain producing instrument.
;  * In click-and-drag mode mouse X position equates to pointer position and mouse Y position equates to grain density. 
; If played from the MIDI keyboard, note number translates to 'Transposition' and key velocity translates to amplitude for the grain stream for that note.

; In 'Pointer' mode pointer position is controlled by the long 'Manual' slider with an optional amount of randomisation determined ny the 'Phs.Mod' slider.  

; Selecting 'Speed' pointer mode bring up some additional controls:
; Speed		-	speed ratio
; Freeze	-	freezes the pointer at its present locations 
; Range		-	ratio of the full sound file duration that will be played back. 1=the_entire_file, 0.5=half_the_file, etc. 
; Shape		-	shape of playback function: 	'Phasor' looping in a single direction
;												'Tri' back and forth looping
;												'Sine' back and forth looping using a sinudoidal shape - i.e. slowing at the extremes of the oscillation
; The 'Manual' control functions as an pointer offset when using 'Speed' pointer mode

; Density	-	grains per second
; Oct.Div	-	thinning the density in overlapping octave steps. I.e. density is halved and then halved again etc. 
; Transpose	-	transposition as a ratio. Negative values result in grains playing in reverse.
; Transposition Mode - timing of transposition changes: 'Grain by Grain' 	- grains always maintain the transposition with which they began
;														'Continuous'		- even grains in progress can be altered by changes made to 'Transpose' 

; --Randomisation--
; Trans.Mod.	-	randomisation of transposition (in octaves)
; Ptr.Mod.	-	randomisation of pointer position
; Dens Mod.	-	randomisation of grain density
; Amp.Mod.	-	randomisation of grain amplitude. Note that this is done on a grain by grain basis, grains retain the amplitude with which they start.

; --Density LFO--
; Depth		-	depth of LFO modulation of grain density
; Rate		-	rate of LFO modulation of grain density

; --Voice 2--
; Dens.Ratio	-	ratio of grain density of voice 2 with respect to the main voice (also adjustable using the adjacent number box for precise value input)
; Ptr.Diff.	-	pointer position offset of voice 2 with respect to the main voice (also adjustable using the adjacent number box for precise value input)
; Trans.Diff.	-	transposition offset of voice 2 with respect to the main voice (also adjustable using the adjacent number box for precise value input)
; Delay		-	a delay applied to voice 2 which is defined as a ratio of the gap between grains (therefore delay time will be inversely proportional to garin density)
;			 This is a little like a phase offset for voice 2 with respect to that of the main voice.
;			 When using this control 'Dens.Ratio' should be '1' otherwise continuous temporally shifting between the grains of voice 2 and the main voice will be occurring anyway.

; --Envelope--
; Attack	-	amplitude envelope attack time for the envelope applied to complete notes
; Release	-	amplitude envelope release time for the envelope applied to complete notes

; --Control--
; MIDI Ref.	-	MIDI note that represent unison (no transposition) for when using the MIDI keyboard
; Level	-	output amplitude control


<Cabbage>
form caption("fog File Player") size(1130,445), colour(0,0,0), pluginid("FgFP"), guirefresh(16)	; guirefresh value adjusts how often the cabbage valuators are read. This can affect the usability of parameters used in realtime gesturing. style("legacy")

#define RSliderStyle # trackercolour(130,135,170), textcolour("white"), outlinecolour( 10, 15, 50), colour( 50, 45, 90)#

image       bounds(  0,  0,1130,445), colour( 30, 35, 70), outlinecolour("White"), shape("sharp"), line(3)	; main panel colouration    
soundfiler  bounds(  5,  5,1120,175), channel("beg","len"), identchannel("filer1"),  colour(0, 255, 255, 255), fontcolour(160, 160, 160, 255), 
label bounds(7, 5, 560, 14), text(""), align(left), colour(0,0,0,0), fontcolour(200,200,200), identchannel("stringbox")

hslider    bounds(  0,180,1120, 15), channel("phs"),   range( 0,1,0,1,0.0001), $RSliderStyle
label      bounds(  0,195,1120, 13), text("Manual"), fontcolour("white")

filebutton bounds(  5,210,  80, 25), text("Open File","Open File"), fontcolour("white") channel("filename"), shape("ellipse")
checkbox   bounds(  5,240,  95, 20), channel("PlayStop"), text("Play/Stop"), fontcolour("white")
label      bounds(  5,263, 145, 12), text("[or right-click and drag]"), fontcolour("white"), align("left")

label       bounds( 90,215, 75, 13), text("Ptr.Mode"), fontcolour("white")
combobox    bounds( 90,230, 75, 18), channel("PhsMode"), items("Manual", "Speed"), value(2),fontcolour("white")

rslider     bounds(170,215, 60, 60), channel("port"),     range( 0, 30.00, 0.01,0.5,0.01), text("Port."), identchannel("portID"), visible(0), $RSliderStyle

rslider     bounds(170,215, 60, 60), channel("spd"),     range( -2.00, 2.00, 1), text("Speed"), identchannel("spdID"), visible(0), $RSliderStyle
button      bounds(230,230, 60, 18), channel("freeze"),  colour:0(  0,  0,  0), colour:1(50,55,150), text("Freeze","Freeze"), fontcolour:0(50,50,50), fontcolour:1(200,200,255), identchannel("freezeID"), visible(0)
rslider     bounds(290,215, 60, 60), channel("range"),   range(0.01,  1,  1),              text("Range"),  identchannel("rangeID"), visible(0), $RSliderStyle
label       bounds(350,215, 60, 13), text("Shape"), fontcolour("white"), identchannel("shapelabelID")
combobox    bounds(350,230, 60, 18), channel("shape"), items("phasor","tri.","sine"), value(1),fontcolour("white"), identchannel("shapeID"), visible(0)

rslider     bounds(410,215, 60, 60), channel("dens"),    range(  1,500,   30, 0.5),  text("Density"), $RSliderStyle
rslider     bounds(470,215, 60, 60), channel("OctDiv"),  range(  0,  8,    0, 0.5),  text("Oct.Div."), $RSliderStyle
rslider     bounds(530,215, 60, 60), channel("pch"),     range(-2,2,1,1,0.001),              text("Transpose"), $RSliderStyle
label       bounds(595,210,120, 13), text("Transposition Mode"), fontcolour("white")
combobox    bounds(595,225,120, 18), channel("TransMode"), items("Grain by Grain","Continuous"), value(1),fontcolour("white")

image       bounds(730,202,260,75), colour(0,0,0,0), outlinecolour("grey"), outlinethickness(1), shape("sharp"), plant("GrainEnv"), { 
label       bounds(  0,  3,260, 8), text("G  R  A  I  N     E  N  V  E  L  O  P  E"), fontcolour("white")
rslider     bounds( 10, 13, 60, 60), channel("dur"),     range(0.01, 2,    0.1, 0.5,0.0001),                    text("Duration"),  $RSliderStyle
rslider     bounds( 70, 13, 60, 60), channel("ris"),     range(0.001,0.2,  0.01,0.5,0.0001),  text("Rise"),      $RSliderStyle
rslider     bounds(130, 13, 60, 60), channel("dec"),     range(0.001,0.2,  0.01,0.5,0.0001),                    text("Decay"),     $RSliderStyle
rslider     bounds(190, 13, 60, 60), channel("band"),    range(0,    100,  10,  0.5,0.0001),                    text("Bandwidth"), $RSliderStyle
}

image      bounds(995,202,130,75), colour(0,0,0,0), outlinecolour("grey"), outlinethickness(1), shape("sharp"), plant("envelope"), { 
label      bounds(  0,  3,130, 8), text("E   N   V   E   L   O   P   E"), fontcolour("white")
rslider    bounds(  5, 13, 60, 60), channel("AttTim"),    range(0, 5, 0, 0.5, 0.001),       text("Attack"), $RSliderStyle
rslider    bounds( 65, 13, 60, 60), channel("RelTim"),    range(0.01, 5, 0.05, 0.5, 0.001), text("Release"), $RSliderStyle
}

image       bounds(  5,282,250,75), colour(0,0,0,0), outlinecolour("grey"), outlinethickness(1), shape("sharp"), plant("randomise"), { 
label       bounds(  0,  3,250, 8), text("R  A  N  D  O  M  I  S  E"), fontcolour("white")
rslider     bounds(  5, 13, 60, 60), channel("fmd"),     range(    0, 1,    0), text("Trans.Mod."), $RSliderStyle
rslider     bounds( 65, 13, 60, 60), channel("pmd"),     range(    0, 1,    0.0055,0.25,0.00001),  text("Ptr.Mod."), $RSliderStyle
rslider     bounds(125, 13, 60, 60), channel("DensRnd"), range(    0, 2,    0), text("Dens.Mod."), $RSliderStyle
rslider     bounds(185, 13, 60, 60), channel("AmpRnd"), range(    0, 1,    0), text("Amp.Mod."), $RSliderStyle
}

image      bounds(260,282,190,75), colour(0,0,0,0), outlinecolour("grey"), outlinethickness(1), shape("sharp"), plant("LFO"), { 
label      bounds(  0,  3,190, 8), text("L  F  O"), fontcolour("white")
rslider    bounds(  5, 13, 60, 60), channel("DensLFODep"), range(-2, 2, 0, 1, 0.001),       text("Density"), $RSliderStyle
rslider    bounds( 65, 13, 60, 60), channel("AmpLFODep"),  range(-1, 1, 0, 1, 0.001),  text("Amplitude"),  $RSliderStyle
rslider    bounds(125, 13, 60, 60), channel("LFORte"),     range(0.01, 8, 0.1, 0.5, 0.001),  text("Rate"),  $RSliderStyle
}
                              
image      bounds(455,282,485,75), colour(0,0,0,0), outlinecolour("grey"), outlinethickness(1), shape("sharp"), plant("dual"), { 
label      bounds(  0,  3,485, 8), text("V  O  I  C  E     2"), fontcolour("white")
checkbox   bounds( 10, 10, 70, 15), channel("DualOnOff"), text("On/Off"), fontcolour("white")
rslider    bounds( 60, 13, 60, 60), channel("DensRatio"),   range(0.5,2,1,0.64,0.00001), text("Dens.Ratio"), $RSliderStyle
nslider  bounds(120, 25, 60, 20), channel("DensRatio"),   range(0.5,2,1,0.64,0.00001),  textcolour("white"), trackercolour(190,170,130), outlinecolour(100,100,100)
rslider    bounds(180, 13, 60, 60), channel("PtrDiff"),   range(-1,1,0,1,0.00001), text("Ptr.Diff."), $RSliderStyle
nslider  bounds(240, 25, 60, 20), channel("PtrDiff"),   range(-1,1,0,1,0.00001), textcolour("white"), trackercolour(190,170,130), outlinecolour(100,100,100)
rslider    bounds(300, 13, 60, 60), channel("TransDiff"),   range(-2,2,0,1,0.00001), text("Trans.Diff."), $RSliderStyle
nslider  bounds(360, 25, 60, 20), channel("TransDiff"),   range(-2,2,0,1,0.00001), textcolour("white"), trackercolour(190,170,130), outlinecolour(100,100,100)
rslider    bounds(420, 13, 60, 60), channel("Delay"),       range(0,1,0,1,0.00001), text("Delay"), $RSliderStyle
}

image      bounds(945,282,130,75), colour(0,0,0,0), outlinecolour("grey"), outlinethickness(1), shape("sharp"), plant("control"), { 
label      bounds(  0,  3,130, 8), text("C   O   N   T   R   O   L"), fontcolour("white")
rslider    bounds(  5, 13, 60, 60), channel("MidiRef"),   range(0,127,60, 1, 1),   text("MIDI Ref."), $RSliderStyle
rslider    bounds( 65, 13, 60, 60), channel("level"),     range(  0,  3.00, 0.7, 0.5, 0.001), text("Level"), $RSliderStyle
}

keyboard bounds(5,365,1120, 75)
}
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-n -+rtmidi=NULL -M0 -dm0
</CsOptions>
                         
<CsInstruments>

sr = 44100
ksmps = 64
nchnls = 2
0dbfs=1

massign	0,3
gichans		init	0
giReady		init	0
gSfilepath	init	""

giTriangle	ftgen	0, 0, 4097,  20, 3

; CURVE USED TO FORM ATTACK AND DECAY PORTIONS OF EACH GRAIN
;              NUM | INIT_TIME | SIZE | GEN_ROUTINE |  PARTIAL_NUMBER_1 | STRENGTH_1 | PHASE_1 | DC_OFFSET_1
giattdec ftgen  0,        0,     524288,     19,             0.5,             0.5,        270,         0.5	; I.E. A RISING SIGMOID

opcode	NextPowerOf2i,i,i
 iInVal	xin
 icount	=	1
 LOOP:
 if 2^icount>iInVal then
  goto DONE
 else
  icount	=	icount + 1
  goto LOOP
 endif
 DONE:
 	xout	2^icount
endop

opcode FileNameFromPath,S,S		; Extract a file name (as a string) from a full path (also as a string)
 Ssrc	xin				; Read in the file path string
 icnt	strlen	Ssrc			; Get the length of the file path string
 LOOP:					; Loop back to here when checking for a backslash
 iasc	strchar Ssrc, icnt		; Read ascii value of current letter for checking
 if iasc==92 igoto ESCAPE		; If it is a backslash, escape from loop
 loop_gt	icnt,1,0,LOOP		; Loop back and decrement counter which is also used as an index into the string
 ESCAPE:				; Escape point once the backslash has been found
 Sname	strsub Ssrc, icnt+1, -1		; Create a new string of just the file name
	xout	Sname			; Send it back to the caller instrument
endop

instr	1
 kRampUp	linseg	0,0.001,1
 gkport		chnget	"port"
 gkloop		chnget	"loop"
 gkPlayStop	chnget	"PlayStop"
 gkPhsMode	chnget	"PhsMode"
 gkPhsMode	init	1
 gklevel	chnget	"level"
 gklevel	port	gklevel,0.05
 gkpch		chnget	"pch" 
 gkspd		chnget	"spd"
 gkfreeze	chnget	"freeze"
 gkrange	chnget	"range"
 gkshape	chnget	"shape"
 gkTransMode	chnget	"TransMode"
 gkTransMode	init	1
 gkOctDiv	chnget	"OctDiv"
 gkband		chnget	"band"
 gkris		chnget	"ris"
 gkdec		chnget	"dec"
 gkdur		chnget	"dur"   
 gkfmd		chnget	"fmd"
 gkpmd		chnget	"pmd"
 gkDensRnd	chnget	"DensRnd"
 gkAmpRnd	chnget	"AmpRnd"
 gkDensLFODep	chnget	"DensLFODep"
 gkAmpLFODep	chnget	"AmpLFODep"
 gkLFORte	chnget	"LFORte"
 gkDualOnOff	chnget	"DualOnOff"
 gkDensRatio	chnget	"DensRatio"
 gkPtrDiff	chnget	"PtrDiff"
 gkPtrDiff	port	gkPtrDiff,0.1
 gkTransDiff	chnget	"TransDiff"
 gkDelay	chnget	"Delay"
 gkDelay	port	gkDelay,0.1
      
 if changed(gkPhsMode)==1 then
  if gkPhsMode==1 then
   	chnset	"visible(0)", "spdID"
   	chnset	"visible(0)", "freezeID"
   	chnset	"visible(0)", "rangeID"
   	chnset	"visible(0)", "shapeID"
   	chnset	"visible(0)", "shapelabelID"
   	chnset	"visible(1)", "portID"
  elseif gkPhsMode==2 then
   	chnset	"visible(1)", "spdID"
   	chnset	"visible(1)", "freezeID"
   	chnset	"visible(1)", "rangeID"
   	chnset	"visible(1)", "shapeID"
   	chnset	"visible(1)", "shapelabelID"
   	chnset	"visible(0)", "portID"
  endif
 endif
          
 gSfilepath	chnget	"filename"
 kNewFileTrg	changed	gSfilepath	; if a new file is loaded generate a trigger
 if kNewFileTrg==1 then				; if a new file has been loaded...
  event	"i",99,0,0					; call instrument to update sample storage function table 
 endif  

 /* START/STOP SOUNDING INSTRUMENT */
 ktrig	trigger	gkPlayStop,0.5,0
 schedkwhen	ktrig,0,0,2,0,-1

 /* MOUSE SCRUBBING */
 gkMOUSE_DOWN_RIGHT	chnget	"MOUSE_DOWN_RIGHT"	; Read in mouse left click status
 kStartScrub		trigger	gkMOUSE_DOWN_RIGHT,0.5,0
 if gkMOUSE_DOWN_RIGHT==1 then
  if kStartScrub==1 then 
   reinit RAMP_FUNC
  endif
  RAMP_FUNC:
  krampup	linseg	0,0.001,1
  rireturn
  kMOUSE_X	chnget	"MOUSE_X"
  kMOUSE_X	portk	kMOUSE_X,gkport*kRampUp
  kMOUSE_Y	chnget	"MOUSE_Y"
  kMOUSE_X	=	(kMOUSE_X - 5) / 1120
  kMOUSE_Y	portk	1 - ((kMOUSE_Y - 5) / 175), krampup*0.05		; SOME SMOOTHING OF DENSITY CHANGES VIA THE MOUSE ENHANCES PERFORMANCE RESULTS. MAKE ANY ADJUSTMENTS WITH ADDITIONAL CONSIDERATION OF guirefresh VALUE 
  gkphs		limit	kMOUSE_X,0,1
  gkdens	limit	((kMOUSE_Y^3) * 502) - 2, 0, 500
  schedkwhen	kStartScrub,0,0,2,0,-1
 else
  gkphs		chnget	"phs"
  gkphs		portk	gkphs,gkport*kRampUp
  gkdens	chnget	"dens"
 endif
 
endin

instr	99	; load sound file
 gichans	filenchnls	gSfilepath			; derive the number of channels (mono=1,stereo=2) in the sound file
 iFtlen		NextPowerOf2i	filelen:i(gSfilepath)*sr
 gitableL	ftgen	1,0,iFtlen,1,gSfilepath,0,0,1
 if gichans==2 then
  gitableR	ftgen	2,0,iFtlen,1,gSfilepath,0,0,2
 endif
 giReady 	=	1					; if no string has yet been loaded giReady will be zero
 Smessage sprintfk "file(%s)", gSfilepath			; print sound file to viewer
 chnset Smessage, "filer1"

 /* WRITE FILE NAME TO GUI */
 Sname FileNameFromPath	gSfilepath				; Call UDO to extract file name from the full path
 Smessage sprintfk "text(%s)",Sname
 chnset Smessage, "stringbox"

endin

instr	2	; triggered by 'play/stop' button
 if gkPlayStop==0&&gkMOUSE_DOWN_RIGHT==0 then
  turnoff
 endif
 if giReady = 1 then						; i.e. if a file has been loaded
  
  /* ENVELOPE */
  iAttTim	chnget	"AttTim"				; read in widgets
  iRelTim	chnget	"RelTim"
  if iAttTim>0 then						; is amplitude envelope attack time is greater than zero...
   kenv	linsegr	0,iAttTim,1,iRelTim,0				; create an amplitude envelope with an attack, a sustain and a release segment (senses realtime release)
  else            
   kenv	linsegr	1,iRelTim,0					; create an amplitude envelope with a sustain and a release segment (senses realtime release)
  endif
  kenv	expcurve	kenv,8					; remap amplitude value with a more natural curve
  aenv	interp		kenv					; interpolate and create a-rate envelope

  kporttime	linseg	0,0.001,0.05				; portamento time function. (Rises quickly from zero to a held value.)

  kSwitch		changed	gkTransMode
  if	kSwitch==1	then		;IF I-RATE VARIABLE CHANGE TRIGGER IS '1'...
  	reinit	START			;BEGIN A REINITIALISATION PASS FROM LABEL 'START'
  endif
  START:

  kPmdRnd	unirand	gkpmd
  
  if gkPhsMode==1||gkMOUSE_DOWN_RIGHT==1 then
   kptr		portk	gkphs+kPmdRnd, kporttime	; PORTAMENTO IS APPLIED TO SMOOTH VALUE CHANGES VIA THE FLTK SLIDERS
   kptr		mirror	kptr,0,1
   kptr		=	kptr * (nsamp(1)/ftlen(1))
   aptr		interp	kptr				; A NEW A-RATE VARIABLE (aptr) IS CREATED BASE ON kptr
  else
   if gkshape==1 then
    kptr		phasor	(gkspd * sr * (1-gkfreeze))/(nsamp(1) * gkrange)
   elseif gkshape==2 then
    kptr		oscili	1,(gkspd * sr * (1-gkfreeze))/(nsamp(1) * gkrange),giTriangle
   elseif gkshape==3 then
    kptr		oscili	0.5,(gkspd * sr * (1-gkfreeze))/(nsamp(1) * gkrange)
    kptr		+=		0.5
   endif
   kptr	=	kptr * (nsamp(1)/ftlen(1)) * gkrange
   kptr	+=	(gkphs+kPmdRnd) * (nsamp(1)/ftlen(1))
   kptr	mirror	kptr,0,nsamp(1)/ftlen(1)
  endif
  aptr		interp	kptr
  
  iNumOverLaps	=	2000
  itotdur		=	3600
  
  kPchRnd	bexprnd	gkfmd					; random pitch
  kpch		=	gkpch * octave(kPchRnd)

  kRndTrig	init	1
  ;kdens		init	30					; set to initial widget value
  kDensRnd	bexprnd	gkDensRnd	;randomh	-gkDensRnd, gkDensRnd, kdens
  kdens	=	gkdens * octave(kDensRnd)
  kRndTrig	metro	kdens

  /* amplitude random modulation */
  kAmpRnd	random	0,gkAmpRnd
  klevel	=		gklevel-sqrt(kAmpRnd)

  /* LFO */
  kDensLFO	poscil	gkDensLFODep,gkLFORte
  kdens	=		kdens * octave(kDensLFO)
  kAmpLFO	poscil	gkAmpLFODep*0.5,gkLFORte
  klevel	*=		1-((kAmpLFO+(abs(gkAmpLFODep)*0.5))^2)

  if gichans==1 then						; if mono...
  a1	fog	klevel, kdens, kpch, aptr, gkOctDiv, gkband, gkris, gkdur, gkdec, iNumOverLaps, 1, giattdec, itotdur, 0, i(gkTransMode)-1, 1
   if gkDualOnOff==1 then
    a1b	fog	klevel, kdens*gkDensRatio, kpch*octave(gkTransDiff), aptr+(gkPtrDiff*nsamp(1)/ftlen(1)), gkOctDiv, gkband, gkris, gkdur, gkdec, iNumOverLaps, 1, giattdec, itotdur, 0, i(gkTransMode)-1, 1
    if gkDelay>0 then
     a1b	vdelay	a1b,(gkDelay*1000)/gkdens,1000
    endif
    a1	+=	a1b
   endif
 	outs	a1*aenv,a1*aenv				; send mono audio to both outputs 
  elseif gichans==2 then						; otherwise, if stereo...
   a1	fog	klevel, kdens, kpch, aptr, gkOctDiv, gkband, gkris, gkdur, gkdec, iNumOverLaps, 1, giattdec, itotdur, 0, i(gkTransMode)-1, 1
   a2	fog	klevel, kdens, kpch, aptr, gkOctDiv, gkband, gkris, gkdur, gkdec, iNumOverLaps, 2, giattdec, itotdur, 0, i(gkTransMode)-1, 1
   if gkDualOnOff==1 then
    a1b	fog	klevel, kdens*gkDensRatio, kpch*octave(gkTransDiff), aptr+(gkPtrDiff*nsamp(1)/ftlen(1)), gkOctDiv, gkband, gkris, gkdur, gkdec, iNumOverLaps, 1, giattdec, itotdur, 0, i(gkTransMode)-1, 1
    a2b	fog	klevel, kdens*gkDensRatio, kpch*octave(gkTransDiff), aptr+(gkPtrDiff*nsamp(1)/ftlen(1)), gkOctDiv, gkband, gkris, gkdur, gkdec, iNumOverLaps, 2, giattdec, itotdur, 0, i(gkTransMode)-1, 1
    if gkDelay>0 then
     a1b	vdelay	a1b,(gkDelay*1000)/gkdens,1000
     a2b	vdelay	a2b,(gkDelay*1000)/gkdens,1000
    endif
    a1	+=	a1b
    a2	+=	a2b
   endif
 	outs	a1*aenv,a2*aenv				; send stereo signal to outputs
  endif
  rireturn

 endif
endin

instr	3
 icps	cpsmidi							; read in midi note data as cycles per second
 iamp	ampmidi	1						; read in midi velocity (as a value within the range 0 - 1)
 iAttTim	chnget	"AttTim"				; read in widgets
 iRelTim	chnget	"RelTim"
 iMidiRef	chnget	"MidiRef"
 iFrqRatio		=	icps/cpsmidinn(iMidiRef)	; derive playback speed from note played in relation to a reference note (MIDI note 60 / middle C)

 if giReady = 1 then						; i.e. if a file has been loaded
  iAttTim	chnget	"AttTim"				; read in widgets
  iRelTim	chnget	"RelTim"
  if iAttTim>0 then						; is amplitude envelope attack time is greater than zero...
   kenv	linsegr	0,iAttTim,1,iRelTim,0				; create an amplitude envelope with an attack, a sustain and a release segment (senses realtime release)
  else            
   kenv	linsegr	1,iRelTim,0					; create an amplitude envelope with a sustain and a release segment (senses realtime release)
  endif
  kenv	expcurve	kenv,8					; remap amplitude value with a more natural curve
  aenv	interp		kenv					; interpolate and create a-rate envelope

  kporttime	linseg	0,0.001,0.05				; portamento time function. (Rises quickly from zero to a held value.)

  kSwitch		changed	gkTransMode
  if	kSwitch==1	then		;IF I-RATE VARIABLE CHANGE TRIGGER IS '1'...
  	reinit	START			;BEGIN A REINITIALISATION PASS FROM LABEL 'START'
  endif
  START:

  kPmdRnd	unirand	gkpmd
  
  if gkPhsMode==1 then
   kptr		portk	gkphs+kPmdRnd, kporttime	; PORTAMENTO IS APPLIED TO SMOOTH VALUE CHANGES VIA THE FLTK SLIDERS
   kptr		mirror	kptr,0,1
   kptr		=	kptr * (nsamp(1)/ftlen(1))
   aptr		interp	kptr				; A NEW A-RATE VARIABLE (aptr) IS CREATED BASE ON kptr
  else
   if gkshape==1 then
    kptr		phasor	(gkspd * sr * (1-gkfreeze))/(nsamp(1) * gkrange)
   elseif gkshape==2 then
    kptr		oscili	1,(gkspd * sr * (1-gkfreeze))/(nsamp(1) * gkrange),giTriangle
   elseif gkshape==3 then
    kptr		oscili	0.5,(gkspd * sr * (1-gkfreeze))/(nsamp(1) * gkrange)
    kptr		+=		0.5
   endif
   kptr	=	kptr * (nsamp(1)/ftlen(1)) * gkrange
   kptr	+=	(gkphs+kPmdRnd) * (nsamp(1)/ftlen(1))
   kptr	mirror	kptr,0,nsamp(1)/ftlen(1)
  endif
  aptr		interp	kptr
  
  iNumOverLaps	=	2000
  itotdur		=	3600
  
  kPchRnd	bexprnd	gkfmd					; random pitch
  kpch		=	iFrqRatio * octave(kPchRnd)
  gklevel	*=	iamp
  
  kRndTrig	init	1
  kDensRnd	bexprnd	gkDensRnd
  kdens	=	gkdens * octave(kDensRnd)
  kRndTrig	metro	kdens

  /* amplitude random modulation */
  kAmpRnd	random	0,gkAmpRnd
  klevel	=		gklevel-sqrt(kAmpRnd)

  /* LFO */
  kDensLFO	poscil	gkDensLFODep,gkLFORte
  kdens	=		gkdens * octave(kDensLFO)
  kAmpLFO	poscil	gkAmpLFODep*0.5,gkLFORte
  klevel	*=		1-((kAmpLFO+(abs(gkAmpLFODep)*0.5))^2)
    
  if gichans==1 then						; if mono...
  a1	fog	klevel, kdens, kpch, aptr, gkOctDiv, gkband, gkris, gkdur, gkdec, iNumOverLaps, 1, giattdec, itotdur, 0, i(gkTransMode)-1, 1
   if gkDualOnOff==1 then
    a1b	fog	klevel, kdens*gkDensRatio, kpch*octave(gkTransDiff), aptr+(gkPtrDiff*nsamp(1)/ftlen(1)), gkOctDiv, gkband, gkris, gkdur, gkdec, iNumOverLaps, 1, giattdec, itotdur, 0, i(gkTransMode)-1, 1
    if gkDelay>0 then
     a1b	vdelay	a1b,(gkDelay*1000)/gkdens,1000
    endif
    a1	+=	a1b
   endif
 	outs	a1*aenv,a1*aenv				; send mono audio to both outputs 
  elseif gichans==2 then						; otherwise, if stereo...
   a1	fog	klevel, kdens, kpch, aptr, gkOctDiv, gkband, gkris, gkdur, gkdec, iNumOverLaps, 1, giattdec, itotdur, 0, i(gkTransMode)-1, 1
   a2	fog	klevel, kdens, kpch, aptr, gkOctDiv, gkband, gkris, gkdur, gkdec, iNumOverLaps, 2, giattdec, itotdur, 0, i(gkTransMode)-1, 1
   if gkDualOnOff==1 then
    a1b	fog	klevel, kdens*gkDensRatio, kpch*octave(gkTransDiff), aptr+(gkPtrDiff*nsamp(1)/ftlen(1)), gkOctDiv, gkband, gkris, gkdur, gkdec, iNumOverLaps, 1, giattdec, itotdur, 0, i(gkTransMode)-1, 1
    a2b	fog	klevel, kdens*gkDensRatio, kpch*octave(gkTransDiff), aptr+(gkPtrDiff*nsamp(1)/ftlen(1)), gkOctDiv, gkband, gkris, gkdur, gkdec, iNumOverLaps, 2, giattdec, itotdur, 0, i(gkTransMode)-1, 1
    if gkDelay>0 then
     a1b	vdelay	a1b,(gkDelay*1000)/gkdens,1000
     a2b	vdelay	a2b,(gkDelay*1000)/gkdens,1000
    endif
    a1	+=	a1b
    a2	+=	a2b
   endif
 	outs	a1*aenv,a2*aenv				; send stereo signal to outputs
  endif
  rireturn


 endif

endin

</CsInstruments>  

<CsScore>
i 1 0 [60*60*24*7]
</CsScore>

</CsoundSynthesizer>
; Grain3FilePlayer.csd
; Written by Iain McCurdy, 2015

; File player based around the granualr synthesis opcode, 'grain3'.
; A second voice can be activated (basically another parallel granular synthesiser) with parameter variations of density, transposition, pointer location (Phs) and delay.
; Two modes of playback are available: manual pointer and speed
; The pointer and grain density can also be modulated by clicking and dragging on the waveform view.
;  * This will also start and stop the grain producing instrument.
;  * In click-and-drag mode mouse X position equates to pointer position and mouse Y position equates to grain density. 
; If played from the MIDI keyboard, note number translates to 'Transposition' and key velocity translates to amplitude for the grain stream for that note.

; In 'Pointer' mode pointer position is controlled by the long 'Manual' slider with an optional amount of randomisation determined ny the 'Phs.Mod' slider.  

; Selecting 'Speed' pointer mode bring up some additional controls:
; Speed		-	speed ratio
; Freeze	-	freezes the pointer at its present locations 
; Range		-	ratio of the full sound file duration that will be played back. 1=the_entire_file, 0.5=half_the_file, etc. 
; Shape		-	shape of playback function: 	'Phasor' looping in a single direction
;							'Tri' back and forth looping
; The 'Manual' control functions as an pointer offset when using 'Speed' pointer mode

; Size		-	size of the grains
; Density	-	grains per second
; Transpose	-	transposition in semitones
; Window	-	window shape that envelopes each individual grain

; --Randomisation--
; Trans.Mod.	-	randomisation of transposition (in octaves)
; Ptr.Mod.	-	randomisation of pointer position
; Dens Mod.	-	randomisation of grain density
; Size Mod.	-	randomisation of grain size

; --Density LFO--
; Density	-	depth of LFO modulation of grain density
; Amplitude	-	depth of LFO modulation of grain amplitude
; Size		-	depth of LFO modulation of grain size
; Rate		-	rate of LFO modulation of grain density

; --Voice 2--
; Dens.Ratio	-	ratio of grain density of voice 2 with respect to the main voice (also adjustable using the adjacent number box for precise value input)
; Ptr.Diff.	-	pointer position offset of voice 2 with respect to the main voice (also adjustable using the adjacent number box for precise value input)
; Trans.Diff.	-	transposition offset of voice 2 with respect to the main voice (also adjustable using the adjacent number box for precise value input)
; Delay		-	a delay applied to voice 2 which is defined as a ratio of the gap between grains (therefore delay time will be inversely proportional to garin density)
;			 This is a little like a phase offset for voice 2 with respect to that of the main voice.
;			 When using this control 'Dens.Ratio' should be '1' otherwise continuous temporally shifting between the grains of voice 2 and the main voice will be occurring anyway.

; --Envelope--
; Attack	-	amplitude envelope attack time for the envelope applied to complete notes
; Release	-	amplitude envelope release time for the envelope applied to complete notes

; --Control--
; MIDI Ref.	-	MIDI note that represent unison (no transposition) for when using the MIDI keyboard
; Level	-	output amplitude control


<Cabbage>
form caption("grain3 File Player") size(1040,440), colour(0,0,0), pluginid("G3FP"), guirefresh(16)	; guirefresh value adjusts how often the cabbage valuators are read. This can affect the usability of parameters used in realtime gesturing. style("legacy")

#define RSliderStyle # trackercolour(170,135,130), textcolour("white"), outlinecolour( 50, 15, 10), colour( 90, 45, 50)#

image       bounds(  0,  0,1040,440), colour( 70, 35, 30), outlinecolour("White"), shape("sharp"), line(3)	; main panel colouration    
soundfiler  bounds(  5,  5,1030,175), channel("beg","len"), identchannel("filer1"),  colour(0, 255, 255, 255), fontcolour(160, 160, 160, 255), 
label bounds(7, 5, 560, 14), text(""), align(left), colour(0,0,0,0), fontcolour(200,200,200), identchannel("stringbox")

hslider    bounds(  0,180,1030, 15), channel("phs"),   range( 0,1,0,1,0.0001), $RSliderStyle
label      bounds(  0,195,1030, 13), text("Manual"), fontcolour("white")

filebutton bounds(  5,210,  80, 25), text("Open File","Open File"), fontcolour("white") channel("filename"), shape("ellipse")
checkbox   bounds(  5,240,  95, 20), channel("PlayStop"), text("Play/Stop"), fontcolour("white")
label      bounds(  5,263, 145, 12), text("[or right-click and drag]"), fontcolour("white"), align("left")

label       bounds( 90,215, 75, 13), text("Ptr.Mode"), fontcolour("white")
combobox    bounds( 90,230, 75, 18), channel("PhsMode"), items("Manual", "Speed"), value(2),fontcolour("white")

rslider     bounds(170,215, 60, 60), channel("spd"),     range( -2.00, 2.00, 1), text("Speed"), identchannel("spdID"), visible(0), $RSliderStyle
button      bounds(230,230, 60, 18), channel("freeze"),  colour(  0,  0,  0), text("Freeze","Freeze"), fontcolour:0(70,70,70), fontcolour:1(255,255,255), identchannel("freezeID"), visible(0)
rslider     bounds(290,215, 60, 60), channel("range"),   range(0.01,  1,  1),              text("Range"),  identchannel("rangeID"), visible(0), $RSliderStyle
label       bounds(350,215, 60, 13), text("Shape"), fontcolour("white"), identchannel("shapelabelID")
combobox    bounds(350,230, 60, 18), channel("shape"), items("phasor", "tri."), value(1),fontcolour("white"), identchannel("shapeID"), visible(0)

rslider     bounds(410,215, 60, 60), channel("dur"),     range(0.01,5.00,0.05,0.5,0.001), text("Size"), $RSliderStyle
rslider     bounds(470,215, 60, 60), channel("dens"),    range( 0.2, 500,  20, 0.5),     text("Density"), $RSliderStyle
rslider     bounds(530,215, 60, 60), channel("pch"),     range(-2,2,1,1,0.001),              text("Transpose"), $RSliderStyle
label       bounds(595,210, 75, 13), text("Window"), fontcolour("white")
combobox    bounds(595,225, 75, 18), channel("wfn"), items("Hanning","Perc. 1","Perc. 2","Perc. 3","Gate","Rev Perc. 1","Rev.Perc 2","Rev.Perc 3"), value(1),fontcolour("white")

image       bounds(680,202,260,75), colour(0,0,0,0), outlinecolour("grey"), outlinethickness(1), shape("sharp"), plant("randomise"), { 
label       bounds(  0,  3,260, 8), text("R  A  N  D  O  M  I  S  E"), fontcolour("white")
rslider     bounds( 10, 13, 60, 60), channel("fmd"),     range(    0, 8,    0), text("Trans.Mod."), $RSliderStyle
rslider     bounds( 70, 13, 60, 60), channel("pmd"),     range(    0, 1,    0,0.25,0.00001),  text("Ptr.Mod."), $RSliderStyle
rslider     bounds(130, 13, 60, 60), channel("DensRnd"), range(    0, 2,    0), text("Dens.Mod."), $RSliderStyle
rslider     bounds(190, 13, 60, 60), channel("SizeRnd"), range(    0, 8,    0), text("Size.Mod."), $RSliderStyle
}

image      bounds(  5,282,505,75), colour(0,0,0,0), outlinecolour("grey"), outlinethickness(1), shape("sharp"), plant("dual"), { 
label      bounds(  0,  3,505, 8), text("V  O  I  C  E     2"), fontcolour("white")
checkbox   bounds( 10, 30, 70, 20), channel("DualOnOff"), text("On/Off"), fontcolour("white")
rslider    bounds( 80, 13, 60, 60), channel("DensRatio"),   range(0.5,2,1,0.64,0.00001), text("Dens.Ratio"), $RSliderStyle
nslider  bounds(140, 25, 60, 20), channel("DensRatio"),   range(0.5,2,1,0.64,0.00001),  textcolour("white"), trackercolour(190,170,130), outlinecolour(100,100,100)
rslider    bounds(200, 13, 60, 60), channel("PtrDiff"),   range(-1,1,0,1,0.00001), text("Ptr.Diff."), $RSliderStyle
nslider  bounds(260, 25, 60, 20), channel("PtrDiff"),   range(-1,1,0,1,0.00001), textcolour("white"), trackercolour(190,170,130), outlinecolour(100,100,100)
rslider    bounds(320, 13, 60, 60), channel("TransDiff"),   range(-2,2,0,1,0.00001), text("Trans.Diff."), $RSliderStyle
nslider  bounds(380, 25, 60, 20), channel("TransDiff"),   range(-2,2,0,1,0.00001), textcolour("white"), trackercolour(190,170,130), outlinecolour(100,100,100)
rslider    bounds(440, 13, 60, 60), channel("Delay"),       range(0,1,0,1,0.00001), text("Delay"), $RSliderStyle
}

image      bounds(515,282,250,75), colour(0,0,0,0), outlinecolour("grey"), outlinethickness(1), shape("sharp"), plant("LFO"), { 
label      bounds(  0,  3,250, 8), text("L  F  O"), fontcolour("white")
rslider    bounds(  5, 13, 60, 60), channel("DensLFODep"), range(-4, 4, 0, 1, 0.001),       text("Density"),   $RSliderStyle
rslider    bounds( 65, 13, 60, 60), channel("AmpLFODep"),  range(-1, 1, 0, 1, 0.001),       text("Amplitude"), $RSliderStyle
rslider    bounds(125, 13, 60, 60), channel("SizeLFODep"), range(-2, 2, 0, 1, 0.001),       text("Size"),      $RSliderStyle
rslider    bounds(185, 13, 60, 60), channel("LFORte"),     range(0.01, 8, 0.1, 0.5, 0.001), text("Rate"),      $RSliderStyle
}

image      bounds(770,282,130,75), colour(0,0,0,0), outlinecolour("grey"), outlinethickness(1), shape("sharp"), plant("envelope"), { 
label      bounds(  0,  3,140, 8), text("E   N   V   E   L   O   P   E"), fontcolour("white")
rslider    bounds(  5, 13, 60, 60), channel("AttTim"),    range(0, 5, 0, 0.5, 0.001),       text("Attack"), $RSliderStyle
rslider    bounds( 65, 13, 60, 60), channel("RelTim"),    range(0.01, 5, 0.05, 0.5, 0.001), text("Release"), $RSliderStyle
}

image      bounds(905,282,130,75), colour(0,0,0,0), outlinecolour("grey"), outlinethickness(1), shape("sharp"), plant("control"), { 
label      bounds(  0,  3,140, 8), text("C   O   N   T   R   O   L"), fontcolour("white")
rslider    bounds(  5, 13, 60, 60), channel("MidiRef"),   range(0,127,60, 1, 1),   text("MIDI Ref."), $RSliderStyle
rslider    bounds( 65, 13, 60, 60), channel("level"),     range(  0,  3.00, 0.7, 0.5, 0.001), text("Level"), $RSliderStyle
}
                                  
keyboard bounds(5,360,1030, 75)
}
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-n -+rtmidi=NULL -M0 -dm0
</CsOptions>

<CsInstruments>

sr = 44100
ksmps = 64
nchnls = 2
0dbfs=1

massign	0,3
gichans		init	0
giReady		init	0
gSfilepath	init	""

; WINDOWING FUNCTIONS USED TO DYNAMICALLY SHAPE THE GRAINS
; NUM | INIT_TIME | SIZE | GEN_ROUTINE | PARTIAL_NUM | STRENGTH | PHASE
; GRAIN ENVELOPE WINDOW FUNCTION TABLES:
giwfn1	ftgen	0,  0, 131072,  20,   2, 1 									; HANNING
iTime	=	15000
giwfn2	ftgen	0,  0, 131072,  7,    0, iTime, 1, 131072-iTime, 0			; PERCUSSIVE - GEN08
giwfn3	ftgen	0,  0, 131072,  7,    0, 3072,   1, 128000,    0			; PERCUSSIVE - STRAIGHT SEGMENTS
giwfn4	ftgen	0,  0, 131072,  5,0.001, 3072,   1, 128000,0.001			; PERCUSSIVE - EXPONENTIAL SEGMENTS
giwfn5	ftgen	0,  0, 131072,  7,    0, 1536,   1, 128000,    1, 1536, 0	; GATE - WITH DE-CLICKING RAMP UP AND RAMP DOWN SEGMENTS
giwfn6	ftgen	0,  0, 131072,  7,    0, 131072-iTime, 1, iTime, 0			; REVERSE PERCUSSIVE - GEN08
giwfn7	ftgen	0,  0, 131072,  7,    0, 128000, 1, 3072,      0			; REVERSE PERCUSSIVE - STRAIGHT SEGMENTS
giwfn8	ftgen	0,  0, 131072,  5,0.001, 128000, 1, 3072,  0.001			; REVERSE PERCUSSIVE - EXPONENTIAL SEGMENTS

giTriangle	ftgen	0, 0, 4097,  20, 3


opcode	Grain3b,a,kkkkkkkkkkiiikkiiikk
	kpch, kphs, kspd, kfreeze, krange, kshape, kfmd, kpmd, kdur, kdens, imaxovr, isfn, iwfn, kfrpow, kprpow , iseed, imode, iPhsMode, kDensRnd, kSizeRnd	xin

	if iPhsMode==1 then
	 kptr 		= 	kphs * (nsamp(isfn)/ftlen(isfn))	;MATHEMATICALLY REINTERPRET USER INPUTTED PHASE VALUE INTO A FORMAT THAT IS USABLE AS AN INPUT ARGUMENT  BY THE grain3 OPCODE

	elseif iPhsMode==2 then
	 kspd	*=	1-kfreeze
	 if kshape==1 then
	  kptr		phasor	(kspd*sr)/(nsamp(isfn)*krange)
	  kpch		=	kpch-kspd
	 elseif kshape==2 then
	  kptr		oscili	1,(kspd*sr)/(nsamp(isfn)*krange*2),giTriangle
	  kptrPrev	init	0
	  kpch		=	kptr>kptrPrev?kpch-kspd:kpch+kspd
	  kptrPrev	=	kptr
	 endif
	 kptr		*=	krange	 
	 kptr		mirror	kptr+kphs,0,1

	 kptr 		= 	kptr*(nsamp(isfn)/ftlen(isfn))	;MATHEMATICALLY REINTERPRET USER INPUTTED PHASE VALUE INTO A FORMAT THAT IS USABLE AS AN INPUT ARGUMENT  BY THE grain3 OPCODE

	endif

	kpch 		= 	(sr*kpch)/(ftlen(isfn))		;MATHEMATICALLY REINTERPRET USER INPUTTED PITCH RATIO VALUE INTO A FORMAT THAT IS USABLE AS AN INPUT ARGUMENT BY THE grain3 OPCODE - ftlen(x) FUNCTION RETURNS THE LENGTH OF A FUNCTION TABLE (no. x), REFER TO MANUAL FOR MORE INFO.	
	kfmd		=	(sr*(kfmd*kpch))/ftlen(isfn)

	ktrig		metro	kdens				;TRIGGERS IN SYNC WITH GRAIN GENERATION
	
	kDensRnd 	trandom ktrig,-kDensRnd,kDensRnd	;CREATE A RANDOM OFFSET FACTOR THAT WILL BE APPLIED TO FOR DENSITY
	kdens		*=	octave(kDensRnd)

	kSizeRnd 	trandom ktrig,-kSizeRnd,kSizeRnd	;CREATE A RANDOM OFFSET FACTOR THAT WILL BE APPLIED TO FOR DENSITY
	kdur		*=	octave(kSizeRnd)
	
	asig	grain3	kpch, kptr, kfmd, kpmd, kdur, kdens, imaxovr, isfn, iwfn, kfrpow, kprpow , iseed, imode
	xout	asig

endop

opcode	NextPowerOf2i,i,i
 iInVal	xin
 icount	=	1
 LOOP:
 if 2^icount>iInVal then
  goto DONE
 else
  icount	=	icount + 1
  goto LOOP
 endif
 DONE:
 	xout	2^icount
endop

opcode FileNameFromPath,S,S		; Extract a file name (as a string) from a full path (also as a string)
 Ssrc	xin				; Read in the file path string
 icnt	strlen	Ssrc			; Get the length of the file path string
 LOOP:					; Loop back to here when checking for a backslash
 iasc	strchar Ssrc, icnt		; Read ascii value of current letter for checking
 if iasc==92 igoto ESCAPE		; If it is a backslash, escape from loop
 loop_gt	icnt,1,0,LOOP		; Loop back and decrement counter which is also used as an index into the string
 ESCAPE:				; Escape point once the backslash has been found
 Sname	strsub Ssrc, icnt+1, -1		; Create a new string of just the file name
	xout	Sname			; Send it back to the caller instrument
endop

instr	1
 gkloop		chnget	"loop"
 gkPlayStop	chnget	"PlayStop"

 gkPhsMode	chnget	"PhsMode"
 gkPhsMode	init	1
 gklevel	chnget	"level"
 gklevel	port	gklevel,0.05
 gkdur		chnget	"dur"
 gkpch		chnget	"pch"
 
 gkwfn		chnget	"wfn"
 gkwfn		init	1
 gkspd		chnget	"spd"
 gkfreeze	chnget	"freeze"
 gkrange	chnget	"range"
 gkshape	chnget	"shape"
 gkfmd		chnget	"fmd"
 gkpmd		chnget	"pmd"
 gkDensRnd	chnget	"DensRnd"
 gkSizeRnd	chnget	"SizeRnd"
 gkDensLFODep	chnget	"DensLFODep"
 gkAmpLFODep	chnget	"AmpLFODep"
 gkSizeLFODep	chnget	"SizeLFODep"
 gkLFORte	chnget	"LFORte"
 gkDualOnOff	chnget	"DualOnOff"
 gkDensRatio	chnget	"DensRatio"
 gkPtrDiff	chnget	"PtrDiff"
 gkTransDiff	chnget	"TransDiff"
 gkDelay	chnget	"Delay"
 gkDelay	port	gkDelay,0.1
 
 if changed(gkPhsMode)==1 then
  if gkPhsMode==1 then
   	chnset	"visible(0)", "spdID"
   	chnset	"visible(0)", "freezeID"
   	chnset	"visible(0)", "rangeID"
   	chnset	"visible(0)", "shapeID"
   	chnset	"visible(0)", "shapelabelID"
  elseif gkPhsMode==2 then
   	chnset	"visible(1)", "spdID"
   	chnset	"visible(1)", "freezeID"
   	chnset	"visible(1)", "rangeID"
   	chnset	"visible(1)", "shapeID"
   	chnset	"visible(1)", "shapelabelID"
  endif
 endif
 
 gSfilepath	chnget	"filename"
 kNewFileTrg	changed	gSfilepath		; if a new file is loaded generate a trigger
 if kNewFileTrg==1 then				; if a new file has been loaded...
  event	"i",99,0,0				; call instrument to update sample storage function table 
 endif  

 /* START/STOP SOUNDING INSTRUMENT */
 ktrig	trigger	gkPlayStop,0.5,0
 schedkwhen	ktrig,0,0,2,0,-1

 /* MOUSE SCRUBBING */
 gkMOUSE_DOWN_RIGHT	chnget	"MOUSE_DOWN_RIGHT"	; Read in mouse left click status
 kStartScrub		trigger	gkMOUSE_DOWN_RIGHT,0.5,0
 if gkMOUSE_DOWN_RIGHT==1 then
  if kStartScrub==1 then 
   reinit RAMP_FUNC
  endif
  RAMP_FUNC:
  krampup	linseg	0,0.001,1
  rireturn
  kMOUSE_X	chnget	"MOUSE_X"
  kMOUSE_Y	chnget	"MOUSE_Y"
  kMOUSE_X	=	(kMOUSE_X - 5) / 930
  kMOUSE_Y	portk	1 - ((kMOUSE_Y - 5) / 170), krampup*0.05		; SOME SMOOTHING OF DENSITY CHANGES VIA THE MOUSE ENHANCES PERFORMANCE RESULTS. MAKE ANY ADJUSTMENTS WITH ADDITIONAL CONSIDERATION OF guirefresh VALUE 
  gkphs		limit	kMOUSE_X,0,1
  gkdens	limit	((kMOUSE_Y^3) * 499) + 1, 1, 500
  schedkwhen	kStartScrub,0,0,2,0,-1
 else
  gkphs		chnget	"phs"
  gkdens	chnget	"dens"
 endif
 
endin

instr	99	; load sound file
 gichans	filenchnls	gSfilepath			; derive the number of channels (mono=1,stereo=2) in the sound file
 iFtlen		NextPowerOf2i	filelen:i(gSfilepath)*sr
 gitableL	ftgen	1,0,iFtlen,1,gSfilepath,0,0,1
 if gichans==2 then
  gitableR	ftgen	2,0,iFtlen,1,gSfilepath,0,0,2
 endif
 giReady 	=	1					; if no string has yet been loaded giReady will be zero
 Smessage sprintfk "file(%s)", gSfilepath			; print sound file to viewer
 chnset Smessage, "filer1"

 /* WRITE FILE NAME TO GUI */
 Sname FileNameFromPath	gSfilepath				; Call UDO to extract file name from the full path
 Smessage sprintfk "text(%s)",Sname
 chnset Smessage, "stringbox"

endin

instr	2	; triggered by 'play/stop' button
 if gkPlayStop==0&&gkMOUSE_DOWN_RIGHT==0 then
  turnoff
 endif
 if giReady = 1 then						; i.e. if a file has been loaded
  
  /* ENVELOPE */
  iAttTim	chnget	"AttTim"				; read in widgets
  iRelTim	chnget	"RelTim"
  if iAttTim>0 then							; is amplitude envelope attack time is greater than zero...
   kenv	linsegr	0,iAttTim,1,iRelTim,0		; create an amplitude envelope with an attack, a sustain and a release segment (senses realtime release)
  else            
   kenv	linsegr	1,iRelTim,0					; create an amplitude envelope with a sustain and a release segment (senses realtime release)
  endif
  kenv	expcurve	kenv,8					; remap amplitude value with a more natural curve
  aenv	interp		kenv					; interpolate and create a-rate envelope

  kporttime	linseg	0,0.001,0.05			; portamento time function. (Rises quickly from zero to a held value.)

  kSwitch		changed	gkPhsMode, gkwfn
  if	kSwitch==1	then					; IF I-RATE VARIABLE CHANGE TRIGGER IS '1'...
  	reinit	START							; BEGIN A REINITIALISATION PASS FROM LABEL 'START'
  endif
  START:
  iwfn		=	giwfn1 + i(gkwfn) - 1
  
  /* LFO */
  kDensLFO	poscil	gkDensLFODep,gkLFORte
  kdens	=		gkdens * octave(kDensLFO)
  kAmpLFO	poscil	gkAmpLFODep*0.5,gkLFORte
  klevel	=		gklevel*(1-((kAmpLFO+(abs(gkAmpLFODep)*0.5))^2))
  kSizeLFO	poscil	gkSizeLFODep,gkLFORte
  kdur	=		gkdur * octave(kSizeLFO)
  
  iPhsMode	=	i(gkMOUSE_DOWN_RIGHT)==1?1:i(gkPhsMode)
  
  if gichans==1 then						; if mono...
   a1	Grain3b		gkpch, gkphs, gkspd, gkfreeze, gkrange, gkshape, gkfmd, gkpmd, kdur, kdens, 600, 1, iwfn, -2, -2 , rnd(1000), 8, iPhsMode, gkDensRnd, gkSizeRnd
   if gkDualOnOff==1 then
    a1b	Grain3b		gkpch+gkTransDiff, gkphs+gkPtrDiff, gkspd, gkfreeze, gkrange, gkshape, gkfmd, gkpmd, kdur, kdens*gkDensRatio, 600, 1, iwfn, -2, -2 , rnd(1000), 8, iPhsMode, gkDensRnd, gkSizeRnd
    if gkDelay>0 then
     a1b	vdelay	a1b,(gkDelay*1000)/kdens,5000
    endif
    a1	+=	a1b
   endif
 	outs	a1*aenv*klevel,a1*aenv*klevel		; send mono audio to both outputs 
  elseif gichans==2 then						; otherwise, if stereo...
   a1	Grain3b		gkpch, gkphs, gkspd, gkfreeze, gkrange, gkshape, gkfmd, gkpmd, kdur, kdens, 600, 1, iwfn, -2, -2 , rnd(1000), 8, iPhsMode, gkDensRnd, gkSizeRnd
   a2	Grain3b		gkpch, gkphs, gkspd, gkfreeze, gkrange, gkshape, gkfmd, gkpmd, kdur, kdens, 600, 2, iwfn, -2, -2 , rnd(1000), 8, iPhsMode, gkDensRnd, gkSizeRnd
   if gkDualOnOff==1 then
    a1b	Grain3b		gkpch+gkTransDiff, gkphs+gkPtrDiff, gkspd, gkfreeze, gkrange, gkshape, gkfmd, gkpmd, kdur, kdens*gkDensRatio, 600, 1, iwfn, -2, -2 , rnd(1000), 8, iPhsMode, gkDensRnd, gkSizeRnd
    a2b	Grain3b		gkpch+gkTransDiff, gkphs+gkPtrDiff, gkspd, gkfreeze, gkrange, gkshape, gkfmd, gkpmd, kdur, kdens*gkDensRatio, 600, 2, iwfn, -2, -2 , rnd(1000), 8, iPhsMode, gkDensRnd, gkSizeRnd
    if gkDelay>0 then
     a1b	vdelay	a1b,(gkDelay*1000)/kdens,5000
     a2b	vdelay	a2b,(gkDelay*1000)/kdens,5000
    endif
    a1	+=	a1b
    a2	+=	a2b
   endif
 	outs	a1*aenv*klevel,a2*aenv*klevel		; send stereo signal to outputs
  endif
  rireturn

 endif
endin

instr	3
 icps	cpsmidi									; read in midi note data as cycles per second
 iamp	ampmidi	1								; read in midi velocity (as a value within the range 0 - 1)
 iAttTim	chnget	"AttTim"					; read in widgets
 iRelTim	chnget	"RelTim"
 iMidiRef	chnget	"MidiRef"
 iFrqRatio		=	icps/cpsmidinn(iMidiRef)	; derive playback speed from note played in relation to a reference note (MIDI note 60 / middle C)

 if giReady = 1 then							; i.e. if a file has been loaded
  iAttTim	chnget	"AttTim"					; read in widgets
  iRelTim	chnget	"RelTim"
  if iAttTim>0 then								; is amplitude envelope attack time is greater than zero...
   kenv	linsegr	0,iAttTim,1,iRelTim,0			; create an amplitude envelope with an attack, a sustain and a release segment (senses realtime release)
  else            
   kenv	linsegr	1,iRelTim,0						; create an amplitude envelope with a sustain and a release segment (senses realtime release)
  endif
  kenv	expcurve	kenv,8						; remap amplitude value with a more natural curve
  aenv	interp		kenv						; interpolate and create a-rate envelope
  kporttime	linseg	0,0.001,0.05				; portamento time function. (Rises quickly from zero to a held value.)

  kSwitch		changed	gkPhsMode, gkwfn
  if	kSwitch==1	then						; IF I-RATE VARIABLE CHANGE TRIGGER IS '1'...
  	reinit	START								; BEGIN A REINITIALISATION PASS FROM LABEL 'START'
  endif
  START:
  iwfn		=	giwfn1 + i(gkwfn) - 1

  /* LFO */
  kDensLFO	poscil	gkDensLFODep,gkLFORte
  kdens	=		gkdens * octave(kDensLFO)
  kAmpLFO	poscil	gkAmpLFODep*0.5,gkLFORte
  klevel	=		gklevel*(1-((kAmpLFO+(abs(gkAmpLFODep)*0.5))^2))
  kSizeLFO	poscil	gkSizeLFODep,gkLFORte
  kdur	=		gkdur * octave(kSizeLFO)

  iPhsMode	=	i(gkMOUSE_DOWN_RIGHT)==1?1:i(gkPhsMode)

  if gichans==1 then							; if mono...
   a1	Grain3b		iFrqRatio, gkphs, gkspd, gkfreeze, gkrange, gkshape, gkfmd, gkpmd, kdur, kdens, 600, 1, iwfn, -2, -2 , rnd(1000), 8, iPhsMode, gkDensRnd, gkSizeRnd
   if gkDualOnOff==1 then
    a1b	Grain3b		iFrqRatio+gkTransDiff, gkphs+gkPtrDiff, gkspd, gkfreeze, gkrange, gkshape, gkfmd, gkpmd, kdur, kdens*gkDensRatio, 600, 1, iwfn, -2, -2 , rnd(1000), 8, iPhsMode, gkDensRnd, gkSizeRnd
    if gkDelay>0 then
     a1b	vdelay	a1b,(gkDelay*1000)/kdens,5000
    endif
    a1	+=	a1b
   endif
 	outs	a1*aenv*klevel,a1*aenv*klevel		; send mono audio to both outputs 
  elseif gichans==2 then						; otherwise, if stereo...
   a1	Grain3b		iFrqRatio, gkphs, gkspd, gkfreeze, gkrange, gkshape, gkfmd, gkpmd, kdur, kdens, 600, 1, iwfn, -2, -2 , rnd(1000), 8, iPhsMode, gkDensRnd, gkSizeRnd
   a2	Grain3b		iFrqRatio, gkphs, gkspd, gkfreeze, gkrange, gkshape, gkfmd, gkpmd, kdur, kdens, 600, 2, iwfn, -2, -2 , rnd(1000), 8, iPhsMode, gkDensRnd, gkSizeRnd
   if gkDualOnOff==1 then
    a1b	Grain3b		iFrqRatio+gkTransDiff, gkphs+gkPtrDiff, gkspd, gkfreeze, gkrange, gkshape, gkfmd, gkpmd, kdur, kdens*gkDensRatio, 600, 1, iwfn, -2, -2 , rnd(1000), 8, iPhsMode, gkDensRnd, gkSizeRnd
    a2b	Grain3b		iFrqRatio+gkTransDiff, gkphs+gkPtrDiff, gkspd, gkfreeze, gkrange, gkshape, gkfmd, gkpmd, kdur, kdens*gkDensRatio, 600, 2, iwfn, -2, -2 , rnd(1000), 8, iPhsMode, gkDensRnd, gkSizeRnd
    if gkDelay>0 then
     a1b	vdelay	a1b,(gkDelay*1000)/kdens,5000
     a2b	vdelay	a2b,(gkDelay*1000)/kdens,5000
    endif
    a1	+=	a1b
    a2	+=	a2b
   endif
 	outs	a1*aenv*klevel,a2*aenv*klevel		; send stereo signal to outputs
  endif
  rireturn

 endif

endin

</CsInstruments>  

<CsScore>
i 1 0 [60*60*24*7]
</CsScore>

</CsoundSynthesizer>
; LoscilFilePlayer.csd
; Written by Iain McCurdy, 2014
; 
; Load a user selected sound file into a GEN 01 function table and plays it back using loscil3. 
; This file player is best suited for polyphonic playback and is less well suited for the playback of very long sound files .
; 
; The sound file can be played back using the Play/Stop button (and the 'Transpose' / 'Speed' buttons to implement pitch/speed change)
;  or it can be played back using the MIDI keyboard.
; 
; The loop points can be set either by using the loop 'Start' and 'End' sliders or by clicking and dragging on the waveform view -
;  - loscil will take the values from the last control input moved.

<Cabbage>
form caption("Loscil File Player") size(685,340), colour(0,0,0) pluginid("Losc") style("legacy")
image                    bounds(  0,  0,685,340), colour(30, 70, 30), outlinecolour("White"), line(3), shape("sharp")	; main panel colouration    

soundfiler bounds(  5,  5,675,175), channel("beg","len"), identchannel("filer1"),  colour(0, 255, 255, 255), fontcolour(160, 160, 160, 255), 

image    bounds(  0,180,685,160), colour(0,0,0,0), outlinecolour("white"), line(2), shape("sharp"), plant("controls"){
filebutton bounds(  5, 10, 80, 25), text("Open File","Open File"), fontcolour("white") channel("filename"), shape("ellipse")
checkbox   bounds(  5, 40, 95, 25), channel("PlayStop"), text("Play/Stop"), colour("yellow"), fontcolour("white")

label      bounds(110, 12, 80, 12), text("Looping Mode"), fontcolour("white")
combobox   bounds(110, 25, 80, 20), channel("loop"), items("None", "Forward", "Fwd./Bwd."), value(1), fontcolour("white")

label      bounds(241,  4, 43, 8), text("L   O   O   P"), fontcolour("white")
rslider    bounds(205, 15, 60, 60), channel("LoopStart"), range(0, 1, 0),                   colour( 50, 90, 50), text("Start"),     textcolour("white")
rslider    bounds(260, 15, 60, 60), channel("LoopEnd"),   range(0, 1, 1),                   colour( 50, 90, 50), text("End"),       textcolour("white")
line       bounds(320, 10,  2, 65), colour("Grey")

label      bounds(357,  4, 53, 8), text("S   P   E   E   D"), fontcolour("white")
rslider    bounds(325, 15, 60, 60), channel("transpose"), range(-24, 24, 0,1,1),            colour( 50, 90, 50), text("Transpose"), textcolour("white")
rslider    bounds(380, 15, 60, 60), channel("speed"),     range( 0, 4.00, 1, 0.5),          colour( 50, 90, 50), text("Speed"),     textcolour("white")
line       bounds(440, 10,  2, 65), colour("Grey")

label      bounds(456,  4, 90, 8), text("E   N   V   E   L   O   P   E"), fontcolour("white")
rslider    bounds(445, 15, 60, 60), channel("AttTim"),    range(0, 5, 0, 0.5, 0.001),       colour( 50, 90, 50), text("Att.Tim"),   textcolour("white")
rslider    bounds(500, 15, 60, 60), channel("RelTim"),    range(0.01, 5, 0.05, 0.5, 0.001), colour( 50, 90, 50), text("Rel.Tim"),   textcolour("white")
line       bounds(560, 10,  2, 65), colour("Grey")

label      bounds(580,  4, 80, 8), text("C   O   N   T   R   O   L"), fontcolour("white")
rslider    bounds(565, 15, 60, 60), channel("MidiRef"),   range(0,127,60, 1, 1),            colour( 50, 90, 50), text("MIDI Ref."), textcolour("white")
rslider    bounds(620, 15, 60, 60), channel("level"),     range(  0,  3.00, 1, 0.5),        colour( 50, 90, 50), text("Level"),     textcolour("white")

keyboard bounds(5, 80, 675, 75)
}
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-n -+rtmidi=NULL -M0 -dm0
</CsOptions>

<CsInstruments>

sr = 44100
ksmps = 64
nchnls = 2
0dbfs = 1

		massign	0,3
gichans		init	0
giReady		init	0
gSfilepath	init	""
gkTabLen	init	2

instr	1
 gkloop		chnget	"loop"
 kLoopStart	chnget	"LoopStart"
 kLoopEnd	chnget	"LoopEnd"
 kLoopEnd	limit	kLoopEnd,kLoopStart+0.01,1	; limit loop end to prevent crashes
 kbeg		chnget	"beg"				; click and drag
 klen		chnget	"len"				;  "

 ; loop points defined by sliders or click and drag...
 kTrigSlid	changed	kLoopStart,kLoopEnd	
 kTrigCAD	changed	kbeg,klen
 if kTrigSlid==1 then
  gkLoopStart	=	kLoopStart
  gkLoopEnd	=	kLoopEnd
 elseif kTrigCAD==1 then
  gkLoopStart	=	kbeg/gkTabLen
  gkLoopEnd	=	(kbeg+klen)/gkTabLen
 endif


 gkPlayStop	chnget	"PlayStop"
 gktranspose	chnget	"transpose"
 gkspeed	chnget	"speed"
 gklevel	chnget	"level"

 gSfilepath	chnget	"filename"
 kNewFileTrg	changed	gSfilepath		; if a new file is loaded generate a trigger
 if kNewFileTrg==1 then				; if a new file has been loaded...
  event	"i",99,0,0				; call instrument to update sample storage function table 
 endif  
 
 ktrig	trigger	gkPlayStop,0.5,0		; if play button changes to 'play', generate a trigger
 schedkwhen	ktrig,0,0,2,0,-1		; start instr 2 playing a held note

 ktrig1	changed	gktranspose			; if 'transpose' button is changed generate a '1' trigger
 ktrig2	changed	gkspeed				; if 'speed' button is changed generate a '1' trigger
 
 if ktrig1==1 then				; if transpose control has been changed...
  chnset	semitone(gktranspose),"speed"	; set speed according to transpose value
 elseif ktrig2==1 then		; if speed control has been changed...
  chnset	log2(gkspeed)*12,"transpose"	; set transpose control according to speed value
 endif

endin

instr	99	; load sound file
 gitable	ftgen	1,0,0,1,gSfilepath,0,0,0		; load sound file into a GEN 01 function table 
 gichans	filenchnls	gSfilepath			; derive the number of channels (mono=1,stereo=2) in the sound file
 giReady 	=	1					; if no string has yet been loaded giReady will be zero
 gkTabLen	init		ftlen(gitable)/gichans		; table length in sample frames
 Smessage sprintfk "file(%s)", gSfilepath			; print sound file to viewer
 chnset Smessage, "filer1"	
endin

instr	2	; sample triggered by 'play/stop' button
 if gkPlayStop==0 then
  turnoff
 endif
 ktrig changed	gkloop,gkLoopStart,gkLoopEnd
 if ktrig==1 then
  reinit RESTART
 endif
 RESTART:
 if giReady = 1 then						; i.e. if a file has been loaded
  iAttTim	chnget	"AttTim"				; read in widgets
  iRelTim	chnget	"RelTim"
  if iAttTim>0 then						; is amplitude envelope attack time is greater than zero...
   kenv	linsegr	0,iAttTim,1,iRelTim,0				; create an amplitude envelope with an attack, a sustain and a release segment (senses realtime release)
  else
   kenv	linsegr	1,iRelTim,0					; create an amplitude envelope with a sustain and a release segment (senses realtime release)
  endif
  kenv	expcurve	kenv,8					; remap amplitude value with a more natural curve
  aenv	interp		kenv					; interpolate and create a-rate envelope
  kporttime	linseg	0,0.001,0.05				; portamento time function. (Rises quickly from zero to a held value.)
  kspeed	portk	gkspeed,kporttime			; apply portamento smoothing to changes in speed
  klevel	portk	gklevel,kporttime			; apply portamento smoothing to changes in level
  if gichans==1 then						; if mono...
   a1	loscil3	klevel,kspeed,gitable,1,i(gkloop)-1,nsamp(gitable)*i(gkLoopStart),nsamp(gitable)*i(gkLoopEnd)	; use a mono loscil3
 	outs	a1*aenv,a1*aenv					; send mono audio to both outputs 
  elseif gichans==2 then						; otherwise, if stereo...
   a1,a2	loscil3	klevel,kspeed,gitable,1,i(gkloop)-1,nsamp(gitable)*i(gkLoopStart),nsamp(gitable)*i(gkLoopEnd)	; use stereo loscil3
 	outs	a1*aenv,a2*aenv					; send stereo signal to outputs
  endif               
 endif
endin

instr	3	; sample triggered by midi note
 icps	cpsmidi							; read in midi note data as cycles per second
 iamp	ampmidi	1						; read in midi velocity (as a value within the range 0 - 1)
 iMidiRef	chnget	"MidiRef"

 if giReady = 1 then						; i.e. if a file has been loaded
  iAttTim	chnget	"AttTim"				; read in widgets
  iRelTim	chnget	"RelTim"
  if iAttTim>0 then						; is amplitude envelope attack time is greater than zero...
   kenv	linsegr	0,iAttTim,1,iRelTim,0				; create an amplitude envelope with an attack, a sustain and a release segment (senses realtime release)
  else
   kenv	linsegr	1,iRelTim,0					; create an amplitude envelope with a sustain and a release segment (senses realtime release)
  endif
  kenv	expcurve	kenv,8					; remap amplitude value with a more natural curve
  aenv	interp		kenv					; interpolate and create a-rate envelope
  kporttime	linseg	0,0.001,0.05				; portamento time function. (Rises quickly from zero to a held value.)
  ispeed	=	icps/cpsmidinn(iMidiRef)	; derive playback speed from note played in relation to a reference note (MIDI note 60 / middle C)
  klevel	portk	gklevel,kporttime		; apply portamento smoothing to changes in level
  if gichans==1 then						; if mono...
   a1	loscil3	klevel*aenv*iamp,ispeed,gitable,1,i(gkloop)-1,nsamp(gitable)*i(gkLoopStart),nsamp(gitable)*i(gkLoopEnd)	; use a mono loscil3
 	outs	a1,a1						; send mono audio to both outputs 
  elseif gichans==2 then						; otherwise, if stereo...
   a1,a2	loscil3	klevel*aenv*iamp,ispeed,gitable,1,i(gkloop)-1,nsamp(gitable)*i(gkLoopStart),nsamp(gitable)*i(gkLoopEnd)	; use stereo loscil3
 	outs	a1,a2						; send stereo signal to outputs
  endif
 endif
endin
 
</CsInstruments>  

<CsScore>
i 1 0 [60*60*24*7]
</CsScore>

</CsoundSynthesizer>
; MincerFilePlayer.csd
; Written by Iain McCurdy, 2014

; Three modes of playback are offered:
; 1. Manual Pointer
;     Pointer position is determined by the long horizontal slider 'Manual Pointer'.
; 2. Mouse Scrubber
;     Pointer position is determined by the mouse's X position over the waveform view. Playback is also started and stopped using right-click.
; 3. Loop Region
;     A region that has been highlighted using left-click and drag is looped using a method and speed chosen in the 'LOOP REGION' GUI area.
;     Speed can be random-modulated by increasing Mod.Range. The nature of the modulation is changed using 'Rate 1' and 'Rate 2'. The random function generator is jspline.

; Transpose can be expressed either in semitones or a simple ratio. Select mode 'Semitones' or 'Ratio'

; MOD. POINTER section contains controls which modulate the pointer position using a 'sample-and-hold' type random function
; 
 
; All three of the above methods are playable from a MIDI keyboard (first activate the 'MIDI' checkbox).
;  Transposition for MIDI activated notes is governed bu both the MIDI key played and the setting for 'Transpose'


<Cabbage>
form caption("Mincer File Player") size(1055,370), colour(  0,  0,  0) pluginid("Minc"), guirefresh(10) style("legacy")
image                    bounds(  0,  0,1055,370), colour( 50,100,100), outlinecolour("White"), line(3), shape("sharp")

soundfiler bounds(  5,  5,1045,150), channel("beg","len"), channel("pos1","end1"), identchannel("filer1"),  colour(0, 255, 255, 255), fontcolour(160, 160, 160, 255), 
label bounds(6, 4, 560, 14), text(""), align(left), colour(0,0,0,0), fontcolour(200,200,200), identchannel("stringbox")

hslider    bounds(  0,150,1055, 30), channel("pointer"), range( 0,  1.00, 0.1), colour( 40, 80, 80),  trackercolour("white"), fontcolour("white")
label      bounds(  0,172,1055, 12), text("Manual Pointer"), fontcolour("white")

filebutton bounds(  5,185, 80, 22), text("Open File","Open File"), fontcolour("white"), channel("filename"), shape("ellipse")

checkbox bounds(  5,218,120, 12), text("Manual Pointer"), channel("r1"), fontcolour("white"), colour(yellow), radiogroup(1)
checkbox bounds(  5,232,120, 12), text("Mouse Scrubber"), channel("r2"), fontcolour("white"), colour(yellow), radiogroup(1), value(1) 
label    bounds( 19,246,100, 10), text("[right click and drag]"), fontcolour("white"), align("left")
checkbox bounds(  5,256,120, 12), text("Loop Region"),    channel("r3"), fontcolour("white"), colour(yellow), radiogroup(1) 
label    bounds( 19,270,100, 10), text("[left click and drag]"), fontcolour("white"), align("left")

checkbox   bounds(125,223, 60, 12), channel("lock"), text("Lock"), colour("yellow"), fontcolour("white"), value(1)
checkbox   bounds(125,243, 60, 12), channel("MIDI"), text("MIDI"), colour("yellow"), fontcolour("white")

label      bounds(105,183, 48, 12), text("FFT Size"), fontcolour("white")
combobox   bounds( 95,195, 70, 20), channel("FFTSize"), text("32768", "16384", "8192", "4096", "2048", "1024", "512", "256", "128", "64", "32", "16", "8", "4"), value(5), fontcolour("white")

combobox   bounds(170,175, 80, 20), text("Semitone","Ratio"), channel("IntervalMode"),       value(1)

image      bounds(175,200, 70, 70), colour(0,0,0,0), plant("Semitones"), identchannel("SemitonesPlant_ident"), visible(1) {
rslider    bounds(  0,  0, 70, 70), channel("Semitones"), range(-48, 48, 0,1,1), colour( 40, 80, 80), trackercolour("white"), text("Semitones"), textcolour("white")
}

image      bounds(175,200, 70, 70), colour(0,0,0,0), plant("Ratio"), identchannel("RatioPlant_ident"), visible(0) {
nslider bounds( 20,  0, 25, 18), channel("Numerator"),        range(1,99,3,1,1)
image     bounds( 15, 26, 35,  1), shape("sharp") 
nslider bounds( 20, 35, 25, 18), channel("Denominator"),      range(1,99,2,1,1)
}


rslider    bounds(240,200, 70, 70), channel("portamento"),range(0, 20,0.05,0.5,0.01), colour( 40, 80, 80), trackercolour("white"), text("Port.Time"), textcolour("white")

image      bounds(320,188, 305,90), colour(0,0,0,0), outlinecolour("silver"), outlinethickness(1), shape("sharp"), plant("LoopRegion") {
label      bounds(  0,  2, 305,10), text("L   O   O   P       R   E   G   I   O   N"), fontcolour("white")
label      bounds( 10, 24, 85, 12), text("Shape"), fontcolour("white")
combobox   bounds( 10, 37, 85, 20), channel("LoopMode"), text("Forward","Backward","Triangle","Sine"), value(1), fontcolour("white")
rslider    bounds(100, 17, 70, 70), channel("Speed"), range(-2, 2, 1,1,0.001),            colour( 40, 80, 80)), trackercolour("white"), text("Speed"), textcolour("white")
nslider  bounds(170, 35, 60, 30), channel("ModRange"), range(0,2,0,1,0.001),  colour(  0,  0,  0), text("Mod.Range"), textcolour("white")
nslider  bounds(235, 20, 60, 30), channel("Rate1"),    range(0,30,1,1,0.001), colour(  0,  0,  0), text("Rate 1"),    textcolour("white")
nslider  bounds(235, 50, 60, 30), channel("Rate2"),    range(0,30,2,1,0.001), colour(  0,  0,  0), text("Rate 2"),    textcolour("white")
}

image      bounds(630,188, 145,90), colour(0,0,0,0), outlinecolour("silver"), outlinethickness(1), shape("sharp"), plant("ModPtr") {
label      bounds(  0,  2, 135,10), text("M  O  D.     P  O  I  N  T  E  R"), fontcolour("white")
nslider  bounds( 10, 35, 60, 30), channel("PtrModRange"), range(0,1,0,1,0.001),  colour(  0,  0,  0), text("Mod.Range"), textcolour("white")
nslider  bounds( 75, 20, 60, 30), channel("PtrRate1"),    range(0,500,1,1,0.001), colour(  0,  0,  0), text("Rate 1"),    textcolour("white")
nslider  bounds( 75, 50, 60, 30), channel("PtrRate2"),    range(0,500,2,1,0.001), colour(  0,  0,  0), text("Rate 2"),    textcolour("white")
}

image      bounds(785,200,265, 70), colour(0,0,0,0), plant("output") {
rslider    bounds(  0,  0, 70, 70), channel("AttTim"),    range(0, 5, 0, 0.5, 0.001),       colour( 40, 80, 80),  trackercolour("white"), text("Att.Tim"),   textcolour("white")
rslider    bounds( 65,  0, 70, 70), channel("RelTim"),    range(0.01, 5, 0.05, 0.5, 0.001), colour( 40, 80, 80),  trackercolour("white"), text("Rel.Tim"),   textcolour("white")
rslider    bounds(130,  0, 70, 70), channel("MidiRef"),   range(0,127,60, 1, 1),            colour( 40, 80, 80),  trackercolour("white"), text("MIDI Ref."), textcolour("white")
rslider    bounds(195,  0, 70, 70), channel("level"),     range(  0,  1.00, 1, 0.5),        colour( 40, 80, 80),  trackercolour("white"), text("Level"),     textcolour("white")
}

keyboard bounds(  5,290,1045, 75)
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-n -+rtmidi=NULL -M0 -d
</CsOptions>

<CsInstruments>

sr = 44100
ksmps = 64
nchnls = 2
0dbfs=1

massign	0,3

gichans		init	0		; 
giReady		init	0		; flag to indicate function table readiness

giFFTSizes[]	array	32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4	; an array is used to store FFT window sizes
giTriangle		ftgen	0,0,4097,7,0,2048,1,2048,0
giRectSine		ftgen	0,0,4097,19,1,0.5,0,1
gSfilepath	init	""
gkFileLen	init	0

opcode FileNameFromPath,S,S		; Extract a file name (as a string) from a full path (also as a string)
 Ssrc	xin				; Read in the file path string
 icnt	strlen	Ssrc			; Get the length of the file path string
 LOOP:					; Loop back to here when checking for a backslash
 iasc	strchar Ssrc, icnt		; Read ascii value of current letter for checking
 if iasc==92 igoto ESCAPE		; If it is a backslash, escape from loop
 loop_gt	icnt,1,0,LOOP		; Loop back and decrement counter which is also used as an index into the string
 ESCAPE:				; Escape point once the backslash has been found
 Sname	strsub Ssrc, icnt+1, -1		; Create a new string of just the file name
	xout	Sname			; Send it back to the caller instrument
endop

instr	1
 /* PORTAMENTO TIME FUNCTION */
 kporttimeW	chnget	"portamento"
 krampup	linseg	0,0.001,1
 kporttime	=	krampup * kporttimeW	

 /* SHOW HIDE INTERVAL MODE (SEMITONES OR RATIO) WIDGETS */
 kIntervalMode	chnget	"IntervalMode"
 if changed(kIntervalMode)==1 then				; semitones mode
  if kIntervalMode==1 then
  	chnset	"visible(0)","RatioPlant_ident"
  	chnset	"visible(1)","SemitonesPlant_ident"
  else								; ratio mode
  	chnset	"visible(1)","RatioPlant_ident"
  	chnset	"visible(0)","SemitonesPlant_ident"
  endif
 endif
 /* DEFINE TRANSPOSITION RATIO BASED ON INTERVAL MODE CHOICE */
 if kIntervalMode==1 then					; semitones mode
 	kSemitones	chnget	"Semitones"
 	;kSnap		chnget	"Snap"
 	;if kSnap==1 then
 	; if frac(kSemitones)!=0 then
 	;  kSemitones	=	round(kSemitones)
 	;  		chnset	kSemitones,"Semitones"
 	; endif
 	;endif
  	kSemitones	portk	kSemitones,kporttime
  	gktranspose	=	semitone(kSemitones)	
 else								; ratio mode
 	kNumerator	chnget	"Numerator"
 	kDenominator	chnget	"Denominator"
 	gkRatio		=	kNumerator/kDenominator
 	gktranspose	portk	gkRatio,kporttime	
 endif

 gkr1		chnget	"r1"	; pointer/note mode select (radio buttons):	manual
 gkr2		chnget	"r2"	; 						mouse
 gkr3		chnget	"r3"	; 						loop
 gkmode		=	(gkr1) + (gkr2*2) + (gkr3*3)
 gkloop		chnget	"loop"
 gkMIDI		chnget	"MIDI"
 gklock		chnget	"lock"
 gkfreeze	chnget	"freeze"
 gkfreeze	=	1-gkfreeze
 gklevel	chnget	"level"
 gkFFTSize	chnget	"FFTSize"
 gSfilepath	chnget	"filename"
 kNewFileTrg	changed	gSfilepath		; if a new file is loaded generate a trigger
 gkLoopStart	chnget	"beg"			; Click-and-drag region beginning in sample frames
 gkLoopLen	chnget	"len"			; Click-and-drag region length in sample frames
 gkLoopLen	limit	gkLoopLen,1,gkFileLen	
 gkLoopMode	chnget	"LoopMode"
 gkSpeed	chnget	"Speed"
 gkModRange	chnget	"ModRange"
 if gkModRange>0 then
  gkRate1	chnget	"Rate1"
  gkRate2	chnget	"Rate2"
  kMod		jspline	gkModRange,gkRate1,gkRate2
  kSpeed2	=	gkSpeed + kMod
  gkSpeed	=	kSpeed2
 endif
 gkPtrModRange	chnget	"PtrModRange"
 gkPtrRate1	chnget	"PtrRate1"
 gkPtrRate2	chnget	"PtrRate2"

 gkMOUSE_DOWN_RIGHT	chnget	"MOUSE_DOWN_RIGHT"		; Read in mouse right click status
 kStartScrub		trigger	gkMOUSE_DOWN_RIGHT,0.5,0	; generate a momentary trigger whenver right mouse button is clicked
 
 if gkMOUSE_DOWN_RIGHT==1 && gkmode==2 then
  kMOUSE_X	chnget	"MOUSE_X"
  kMOUSE_Y	chnget	"MOUSE_Y"
  if kStartScrub==1 then 					; prevent initial portamento when a new note is started using right click
   reinit RAMP_FUNC
  endif
  RAMP_FUNC:
  krampup	linseg	0,0.001,1
  rireturn
  kMOUSE_X	portk	(kMOUSE_X - 5) / 1045, kporttime			; Mouse X to pointer position
  kMOUSE_Y	limit	1 - ((kMOUSE_Y - 5) / 150), 0, 1		; Mouse Y transposition
  gapointer	interp	kMOUSE_X
  kSemitones	chnget	"Semitones"
  gktranspose	portk	((kMOUSE_Y*2)-1)*kSemitones,kporttime		; Transposition is scaled using transposition value derived either from 'Semitone' slider or 'Ratio' nslideres
  gktranspose	=	semitone(gktranspose)
  gklevel	portk	kMOUSE_Y*gklevel + (1-gklevel), kporttime*krampup
  schedkwhen	kStartScrub,0,0,2,0,-1
 else
  kpointer	chnget	"pointer"
  kpointer	portk	kpointer,kporttime
  gapointer	interp	kpointer
 endif
                                
 if kNewFileTrg==1 then				; if a new file has been loaded...
  event	"i",99,0,0				; call instrument to update sample storage function table 
 endif  
 
 if changed(gkmode+gkMIDI)==1 then
  if gkmode==1||gkmode==3&&gkMIDI==0 then
   event	"i",2,0,-1
  endif
 endif
endin

instr	99	; load sound file
 gichans	filenchnls	gSfilepath			; derive the number of channels (mono=1,stereo=2) in the sound file
 gitableL	ftgen	1,0,0,1,gSfilepath,0,0,1
 if gichans==2 then
  gitableR	ftgen	2,0,0,1,gSfilepath,0,0,2
 endif
 giReady 	=	1					; if no string has yet been loaded giReady will be zero
 gkFileLen	init	ftlen(1)
 
 Smessage sprintfk "file(%s)", gSfilepath			; print sound file image to fileplayer
 chnset Smessage, "filer1"
 
 /* WRITE FILE NAME TO GUI */
 Sname FileNameFromPath	gSfilepath				; Call UDO to extract file name from the full path
 Smessage sprintfk "text(%s)",Sname
 chnset Smessage, "stringbox"

endin

instr	2	; non-midi
 if gkmode!=1 && gkmode!=3 && gkMOUSE_DOWN_RIGHT!=1 || gkMIDI==1 then
  turnoff
 endif
 if giReady = 1 then				; i.e. if a file has been loaded
  aenv	linsegr	0,0.01,1,0.01,0			; simple de-click envelope
    
  iFileLen	=	ftlen(gitableL)/sr
  
  if i(gkmode)==3 then
   if gkLoopMode==1 then
    apointer	phasor	(sr*gkSpeed)/gkLoopLen
   elseif gkLoopMode==2 then
    apointer	phasor	-(sr*gkSpeed)/gkLoopLen
   elseif gkLoopMode==3 then
    apointer	poscil	1,(sr*gkSpeed*0.5)/gkLoopLen,giTriangle
   elseif gkLoopMode==4 then
    apointer	poscil	1,(sr*gkSpeed*0.5)/gkLoopLen,giRectSine
   endif
   apointer	=		(apointer * (gkLoopLen/sr)) + (gkLoopStart/sr)
  else
   apointer	=	gapointer*iFileLen
  endif

  /* RANDOM POINTER MODULATION */
  if gkPtrModRange>0 then
   kRndPtrRate	init	random(i(gkPtrRate1),i(gkPtrRate2))
   kRndPtrTrig	metro	kRndPtrRate
   kRndPtrRate	trandom	kRndPtrTrig,gkPtrRate1,gkPtrRate2
   kRndPtrPos	trandom	kRndPtrTrig,-gkPtrModRange*iFileLen,gkPtrModRange*iFileLen
   apointer	+=	interp(kRndPtrPos)
  endif
  
  ktrig	changed		gkFFTSize
  if ktrig==1 then
   reinit RESTART
  endif
  RESTART:
  if gichans=1 then
   a1	mincer		apointer, gklevel, gktranspose, gitableL, gklock, giFFTSizes[i(gkFFTSize)-1]
  	outs	a1*aenv,a1*aenv                                                                                                                                          
  elseif gichans=2 then
   a1	mincer		apointer, gklevel, gktranspose, gitableL, gklock, giFFTSizes[i(gkFFTSize)-1]
   a2	mincer		apointer, gklevel, gktranspose, gitableR, gklock, giFFTSizes[i(gkFFTSize)-1]
  	outs	a1*aenv,a2*aenv
 endif
endif
endin

instr	3	; midi triggered instrument
 if giReady = 1 then						; i.e. if a file has been loaded
  icps	cpsmidi							; read in midi note data as cycles per second
  iamp	ampmidi	1						; read in midi velocity (as a value within the range 0 - 1)
  iMidiRef	chnget	"MidiRef"				; MIDI unison reference note
  iFrqRatio		=	icps/cpsmidinn(iMidiRef)	; derive playback speed from note played in relation to a reference note (MIDI note 60 / middle C)                                          
 
  iAttTim	chnget	"AttTim"		; read in amplitude envelope attack time widget
  iRelTim	chnget	"RelTim"		; read in amplitude envelope attack time widget                                                                                                                                   
  if iAttTim>0 then				;                                       
   kenv	linsegr	0,iAttTim,1,iRelTim,0
  else								
   kenv	linsegr	1,iRelTim,0			; attack time is zero so ignore this segment of the envelope (a segment of duration zero is not permitted
  endif
  kenv	expcurve	kenv,8			; remap amplitude value with a more natural curve
  aenv	interp		kenv			; interpolate and create a-rate envelope

  iFileLen	=	ftlen(gitableL)/sr

  if i(gkmode)==3 then
   if gkLoopMode==1 then
    apointer	phasor	(sr*gkSpeed)/gkLoopLen
   elseif gkLoopMode==2 then
    apointer	phasor	-(sr*gkSpeed)/gkLoopLen
   elseif gkLoopMode==3 then
    apointer	poscil	1,(sr*gkSpeed*0.5)/gkLoopLen,giTriangle
   elseif gkLoopMode==4 then
    apointer	poscil	1,(sr*gkSpeed*0.5)/gkLoopLen,giRectSine
   endif
   apointer	=		(apointer * (gkLoopLen/sr)) + (gkLoopStart/sr)
  else                                                
   apointer	=	gapointer*iFileLen
  endif

  /* RANDOM POINTER MODULATION */
  if gkPtrModRange>0 then
   kRndPtrRate	init	random(i(gkPtrRate1),i(gkPtrRate2))
   kRndPtrTrig	metro	kRndPtrRate
   kRndPtrRate	trandom	kRndPtrTrig,gkPtrRate1,gkPtrRate2
   kRndPtrPos	trandom	kRndPtrTrig,-gkPtrModRange*iFileLen,gkPtrModRange*iFileLen
   apointer	+=	interp(kRndPtrPos)
  endif
                                                                        
  ktrig	changed		gkFFTSize
  if ktrig==1 then
   reinit RESTART
  endif
  RESTART:
  if gichans=1 then
   a1	mincer		apointer, gklevel*iamp, iFrqRatio*gktranspose, gitableL, gklock, giFFTSizes[i(gkFFTSize)-1]
  	outs	a1*aenv,a1*aenv
  elseif gichans=2 then
   a1	mincer		apointer, gklevel*iamp, iFrqRatio*gktranspose, gitableL, gklock, giFFTSizes[i(gkFFTSize)-1]
   a2	mincer		apointer, gklevel*iamp, iFrqRatio*gktranspose, gitableR, gklock, giFFTSizes[i(gkFFTSize)-1]
  	outs	a1*aenv,a2*aenv
  endif
 endif
endin

</CsInstruments>  

<CsScore>
i 1 0 10000
</CsScore>

</CsoundSynthesizer>
; SoundwarpFilePlayer.csd
; Written by Iain McCurdy, 2014

; Player can also be activated by using right-click and drag upon the waveform display panel.
;  In this mode, X position equates to pointer position and Y position equates to amplitude (level) and transposition.
;   (Transposition range when using mouse clicking-and-dragging is controlled using the 'Transposition' knob. Therefore if 'Transposition' = zero, no transposition occurs.)

<Cabbage>
form caption("Soundwarp File Player") size(835,340), colour(0,0,0) pluginid("SWPl"), guirefresh(32) style("legacy")
image                       bounds(  0,  0,835,340), colour( 30, 90, 60), outlinecolour("White"), line(3), shape("sharp")	; main panel colouration    

soundfiler bounds(  5,  5,825,175), channel("beg","len"), channel("pos1","end1"), identchannel("filer1"),  colour(0, 255, 255, 255), fontcolour(160, 160, 160, 255), 

filebutton bounds(  5,185, 80, 22), text("Open File","Open File"), fontcolour("white") channel("filename"), shape("ellipse")
checkbox   bounds(  5,210, 95, 17), channel("PlayStop"), text("Play/Stop"), fontcolour("white")
label      bounds(  5,228,115, 10), text("[or right-click-and-drag]"), fontcolour("white")
checkbox   bounds(  5,240,100, 17), channel("freeze"), text("Freeze"), colour("LightBlue"), fontcolour("white")

label      bounds(245,184,180, 8), text("G   R   A   I   N   S"), fontcolour("white")
rslider    bounds(120,195, 60, 60), channel("overlap"),     range( 1, 100, 20, 1,1),            colour( 50,110, 80), text("Overlaps"),     textcolour("white"), trackercolour(150,210,180)
rslider    bounds(175,195, 60, 60), channel("grsize"),      range( 1, 40000, 800, 0.5,1),       colour( 50,110, 80), text("Size"),         textcolour("white"), trackercolour(150,210,180)
rslider    bounds(230,195, 60, 60), channel("grsizeOS"),    range( 0, 2.00,   0.5,  0.5),       colour( 50,110, 80), text("Size OS"),      textcolour("white"), trackercolour(150,210,180)
rslider    bounds(285,195, 60, 60), channel("transpose"),   range(-48, 48, 0,1,0.001),          colour( 50,110, 80), text("Transpose"),    textcolour("white"), trackercolour(150,210,180)

label      bounds(367,198, 35, 10), text("M o d e"), fontcolour("white")
combobox   bounds(348,208, 74, 17), channel("mode"), items("Speed", "Pointer", "Region"), value(1), fontcolour("white")
label      bounds(364,227, 40, 10), text("S h a p e"), fontcolour("white")
combobox   bounds(348,237, 74, 17), channel("shape"), items("Hanning", "Perc.1", "Perc.2", "Gate", "Rev.Perc.1", "Rev.Perc.2"), value(1), fontcolour("white")

rslider    bounds(425,195, 60, 60), channel("speed"),       range( 0.00, 5.00, 1,0.5,0.001),           colour( 50,110, 80), text("Speed"),   textcolour("white"), trackercolour(150,210,180), visible(1), identchannel("SpeedID")
rslider    bounds(425,195, 60, 60), channel("ptr"),         range(     0,1.00, 0.5,1,0.001),           colour( 50,110, 80), text("Pointer"), textcolour("white"), trackercolour(150,210,180), visible(0), identchannel("PtrID")
rslider    bounds(480,195, 60, 60), channel("ptrOS"),       range(     0, 1.000, 0, 0.5, 0.001),       colour( 50,110, 80), text("Ptr.OS"),  textcolour("white"), trackercolour(150,210,180), visible(0), identchannel("PtrOSID")
rslider    bounds(535,195, 60, 60), channel("port"),        range(     0,30.000,0.01, 0.5,0.001),      colour( 50,110, 80), text("Port."),   textcolour("white"), trackercolour(150,210,180), visible(0), identchannel("PortID")
rslider    bounds(535,195, 60, 60), channel("inskip"),      range(     0, 1.00, 0),                    colour( 50,110, 80), text("inskip"),  textcolour("white"), trackercolour(150,210,180), visible(1), identchannel("inskipID")

line       bounds(595,190,  2, 65), colour("Grey")

label      bounds(595,184,120, 8), text("E   N   V   E   L   O   P   E"), fontcolour("white")
rslider    bounds(598,195, 60, 60), channel("AttTim"),    range(0, 5.00, 0.01, 0.5, 0.001),  colour( 50,110, 80), text("Att.Tim"), textcolour("white"), trackercolour(150,210,180)
rslider    bounds(650,195, 60, 60), channel("RelTim"),    range(0.01, 5, 0.05, 0.5, 0.001),  colour( 50,110, 80), text("Rel.Tim"), textcolour("white"), trackercolour(150,210,180)

line       bounds(711,190,  2, 65), colour("Grey")

label      bounds(732,184, 80, 8), text("C   O   N   T   R   O   L"), fontcolour("white")
rslider    bounds(715,195, 60, 60), channel("MidiRef"),   range(0,127,60, 1, 1),            colour( 50,110, 80), text("MIDI Ref."), textcolour("white"), trackercolour(150,210,180)
rslider    bounds(770,195, 60, 60), channel("level"),     range(  0,  1.00, 0.4, 0.5),      colour( 50,110, 80), text("Level"),     textcolour("white"), trackercolour(150,210,180)

keyboard   bounds(5,260,825, 75)
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-n -+rtmidi=NULL -M0 -dm0
</CsOptions>

<CsInstruments>

sr = 48000
ksmps = 64
nchnls = 2
0dbfs=1

massign	0,3
gichans		init	0
giFileLen	init	0
giReady		init	0
gSfilepath	init	""

; WINDOWING FUNCTIONS USED TO DYNAMICALLY SHAPE THE GRAINS
; NUM | INIT_TIME | SIZE | GEN_ROUTINE | PARTIAL_NUM | STRENGTH | PHASE
; GRAIN ENVELOPE WINDOW FUNCTION TABLES:
;giwfn1	ftgen	0,  0, 131072,  20,   1, 1 					; HANNING
giwfn1	ftgen	0,  0, 131072,  9,    0.5, 1,0 					; HALF SINE
giwfn2	ftgen	0,  0, 131072,  7,    0, 3072,   1, 128000,    0		; PERCUSSIVE - STRAIGHT SEGMENTS
giwfn3	ftgen	0,  0, 131072,  5, .001, 3072,   1, 128000, .001		; PERCUSSIVE - EXPONENTIAL SEGMENTS
giwfn4	ftgen	0,  0, 131072,  7,    0, 1536,   1, 128000,    1, 1536, 0	; GATE - WITH DE-CLICKING RAMP UP AND RAMP DOWN SEGMENTS
giwfn5	ftgen	0,  0, 131072,  7,    0, 128000, 1, 3072,      0		; REVERSE PERCUSSIVE - STRAIGHT SEGMENTS
giwfn6	ftgen	0,  0, 131072,  5, .001, 128000, 1, 3072,   .001		; REVERSE PERCUSSIVE - EXPONENTIAL SEGMENTS

instr	1
 gkloop		chnget	"loop"
 gkPlayStop	chnget	"PlayStop"
 gkfreeze	chnget	"freeze"
 gkfreeze	=	1-gkfreeze
 gktranspose	chnget	"transpose"
 gkoverlap	chnget	"overlap"
 gkgrsize	chnget	"grsize"
 gkgrsizeOS	chnget	"grsizeOS"
 gkshape	chnget	"shape"
 gkmode		chnget	"mode"
 gkmode		init	1
 gkspeed	chnget	"speed"
 gkptrOS	chnget	"ptrOS"
 gkport		chnget	"port"
 kporttime	linseg	0,0.001,1
 gkinskip	chnget	"inskip"
 gklevel	chnget	"level"
 gkLoopStart	chnget	"beg"		;from soundfiler
 gkLoopEnd	chnget	"len"			;from soundfiler
 
 
 ; SHOW OR HIDE WIDGETS -------------------------------------
 kchange	changed	gkmode
 if(kchange==1) then
	if gkmode==1 then
	 chnset "visible(1)", "SpeedID"
	 chnset "visible(0)", "PtrOSID"
	 chnset "visible(0)", "PtrID"
	 chnset "visible(0)", "PortID"
	 chnset "visible(1)", "inskipID"
	endif
	if gkmode==2 then
	 chnset "visible(0)", "SpeedID"
	 chnset "visible(1)", "PtrOSID"
	 chnset "visible(1)", "PtrID"
	 chnset "visible(1)", "PortID"
	 chnset "visible(0)", "inskipID"
	endif
	if gkmode==3 then
	 chnset "visible(0)", "SpeedID"
	 chnset "visible(0)", "PtrOSID"
	 chnset "visible(0)", "PtrID"
	 chnset "visible(0)", "PortID"
	 chnset "visible(0)", "inskipID"
	endif
endif
; -----------------------------------------------------------

 gSfilepath	chnget	"filename"
 kNewFileTrg	changed	gSfilepath		; if a new file is loaded generate a trigger
 if kNewFileTrg==1 then				; if a new file has been loaded...
  event	"i",99,0,0				; call instrument to update sample storage function table 
 endif  

 ktrig	trigger	gkPlayStop,0.5,0
 schedkwhen	ktrig,0,0,2,0,-1

 /* MOUSE SCRUBBING */
 gkMOUSE_DOWN_RIGHT	chnget	"MOUSE_DOWN_RIGHT"	; Read in mouse left click status
 kStartScrub		trigger	gkMOUSE_DOWN_RIGHT,0.5,0
 if gkMOUSE_DOWN_RIGHT==1 then
  gkmode	=	2
  if kStartScrub==1 then 
   reinit RAMP_FUNC
  endif
  RAMP_FUNC:
  krampup	linseg	0,0.001,1
  rireturn
  kMOUSE_X	chnget	"MOUSE_X"
  kMOUSE_Y	chnget	"MOUSE_Y"
  kMOUSE_X	=	(kMOUSE_X - 5) / 825
  kMOUSE_Y	portk	1 - ((kMOUSE_Y - 5) / 175), krampup*0.05		; SOME SMOOTHING OF DENSITY CHANGES VIA THE MOUSE ENHANCES PERFORMANCE RESULTS. MAKE ANY ADJUSTMENTS WITH ADDITIONAL CONSIDERATION OF guirefresh VALUE 
  gkptr		limit	kMOUSE_X,0,1
  gklevel	limit	kMOUSE_Y^2, 0, 1
  gktranspose	=	((kMOUSE_Y*2)-1)*gktranspose	;, -gktranspose, gktranspose
  schedkwhen	kStartScrub,0,0,2,0,-1
 else
  kptr		chnget	"ptr"
  gkptr		portk	kptr,gkport*kporttime
  gklevel	chnget	"level"
 endif 
 
endin



instr	99	; load sound file
 gichans	filenchnls	gSfilepath			; derive the number of channels (mono=1,stereo=2) in the sound file
 giFileLen	filelen		gSfilepath			; derive the number of channels (mono=1,stereo=2) in the sound file
 gitableL	ftgen	1,0,0,1,gSfilepath,0,0,1
 if gichans==2 then
  gitableR	ftgen	2,0,0,1,gSfilepath,0,0,2
 endif
 giReady 	=	1					; if no string has yet been loaded giReady will be zero

 Smessage sprintfk "file(%s)", gSfilepath
 chnset Smessage, "filer1"	

endin



instr	2	; triggered by 'play/stop' button
 if gkPlayStop==0&&gkMOUSE_DOWN_RIGHT==0 then
  turnoff
 endif
 if giReady = 1 then						; i.e. if a file has been loaded
  iAttTim	chnget	"AttTim"				; read in widgets
  iRelTim	chnget	"RelTim"
  if iAttTim>0 then						; is amplitude envelope attack time is greater than zero...
   kenv	linsegr	0,iAttTim,1,iRelTim,0				; create an amplitude envelope with an attack, a sustain and a release segment (senses realtime release)
  else            
   kenv	linsegr	1,iRelTim,0					; create an amplitude envelope with a sustain and a release segment (senses realtime release)
  endif
  kenv	expcurve	kenv,8					; remap amplitude value with a more natural curve
  aenv	interp		kenv					; interpolate and create a-rate envelope

  kporttime	linseg	0,0.001,0.02				; portamento time function. (Rises quickly from zero to a held value.)

  kspeed	portk	gkspeed, kporttime
  kptr		portk	gkptr, kporttime
  
  ktranspose	portk	gktranspose,kporttime*3			; 
  
  ktrig	changed	gkshape,gkoverlap,gkgrsize,gkgrsizeOS,gkmode,gkinskip
  if ktrig==1 then
   reinit	UPDATE
  endif
  UPDATE:
  
  iwfn		=	i(gkshape) + giwfn1 - 1
  imode		=	i(gkmode) - 1

  if imode==0 then						; timestretch mode
   kwarp	=	1/(kspeed*gkfreeze)
   ibeg		=	i(gkinskip) * giFileLen
   kscrubber	init	ibeg*sr
   kscrubber	+=	kspeed*ksmps*gkfreeze
  elseif imode==1 then						; pointer mode
   kwarp	=	giFileLen * kptr
   ibeg		=	0
   kptrOS	random	0, (giFileLen - kwarp) * gkptrOS
   kwarp	=	kwarp + kptrOS
   kscrubber	=	(kwarp + kptrOS) * sr
  else								; region mode
   imode	=	1					; sndwarp mode used in region mode will be pointer mode
   kwarp	random	gkLoopStart/sr,(gkLoopStart+gkLoopEnd)/sr
   ibeg		=	0
   kscrubber	=	kwarp * sr
  endif

  apch		interp	semitone(ktranspose)
  klevel	portk	gklevel/(i(gkoverlap)^0.25), kporttime		; apply portamento smoothing to changes in level
  
  if gichans==1 then						; if mono...   
   a1	sndwarp		klevel, kwarp, apch, gitableL, ibeg, i(gkgrsize), i(gkgrsize) * i(gkgrsizeOS), i(gkoverlap), iwfn, imode
 	outs	a1*aenv,a1*aenv					; send mono audio to both outputs 
  elseif gichans==2 then						; otherwise, if stereo...
   a1	sndwarp		klevel, kwarp, apch, gitableL, ibeg, i(gkgrsize), i(gkgrsize) * i(gkgrsizeOS), i(gkoverlap), iwfn, imode
   a2	sndwarp		klevel, kwarp, apch, gitableR, ibeg, i(gkgrsize), i(gkgrsize) * i(gkgrsizeOS), i(gkoverlap), iwfn, imode
 	outs	a1*aenv,a2*aenv					; send stereo signal to outputs
  endif
  rireturn
 endif

 ; print scrubber
 if(metro(10)==1) then
  Smessage sprintfk "scrubberposition(%d)", kscrubber
  chnset Smessage, "filer1"
 endif

endin

instr	3
 icps	cpsmidi							; read in midi note data as cycles per second
 iamp	ampmidi	1						; read in midi velocity (as a value within the range 0 - 1)
 iAttTim	chnget	"AttTim"				; read in widgets
 iRelTim	chnget	"RelTim"
 iMidiRef	chnget	"MidiRef"
 iFrqRatio		=	icps/cpsmidinn(iMidiRef)	; derive playback speed from note played in relation to a reference note (MIDI note 60 / middle C)

 if giReady = 1 then						; i.e. if a file has been loaded
  iAttTim	chnget	"AttTim"				; read in widgets
  iRelTim	chnget	"RelTim"
  if iAttTim>0 then						; is amplitude envelope attack time is greater than zero...
   kenv	linsegr	0,iAttTim,1,iRelTim,0				; create an amplitude envelope with an attack, a sustain and a release segment (senses realtime release)
  else            
   kenv	linsegr	1,iRelTim,0					; create an amplitude envelope with a sustain and a release segment (senses realtime release)
  endif
  kenv	expcurve	kenv,8					; remap amplitude value with a more natural curve
  aenv	interp		kenv					; interpolate and create a-rate envelope

  kporttime	linseg	0,0.001,0.05				; portamento time function. (Rises quickly from zero to a held value.)

  kspeed	portk	gkspeed,kporttime
  kptr		portk	gkptr, kporttime
  
  ktranspose	portk	gktranspose,kporttime			; 
  
  ktrig	changed	gkshape,gkoverlap,gkgrsize,gkgrsizeOS,gkmode,gkinskip
  if ktrig==1 then
   reinit	UPDATE
  endif
  UPDATE:
  
  iwfn		=	i(gkshape) + giwfn1 - 1
  imode		=	i(gkmode) - 1
  
  if imode==0 then						; timestretch mode
   kwarp	=	1/(kspeed*gkfreeze)
   ibeg		=	i(gkinskip) * giFileLen
   kscrubber	init	ibeg*sr
   kscrubber	+=	kspeed*ksmps*gkfreeze
  elseif imode==1 then						; pointer mode
   kwarp	=	giFileLen * kptr
   kptrOS	random	0, (giFileLen - kwarp) * gkptrOS
   kwarp	=	kwarp + kptrOS
   ibeg		=	0
   kscrubber	=	(kwarp + kptrOS) * sr
  else								; region mode
   imode	=	1					; sndwarp mode used in region mode will be pointer mode
   kwarp	random	gkLoopStart/sr,(gkLoopStart+gkLoopEnd)/sr
   ibeg		=	0
   kscrubber	=	kwarp * sr
  endif


  apch		interp	semitone(ktranspose)
  klevel	portk	gklevel/(i(gkoverlap)^0.25), kporttime		; apply portamento smoothing to changes in level

  if gichans==1 then						; if mono...
   a1	sndwarp		klevel*iamp, kwarp, iFrqRatio, gitableL, ibeg, i(gkgrsize), i(gkgrsize) * i(gkgrsizeOS), i(gkoverlap), iwfn, imode
 	outs	a1*aenv,a1*aenv					; send mono audio to both outputs 
  elseif gichans==2 then						; otherwise, if stereo...
   a1	sndwarp		klevel*iamp, kwarp, iFrqRatio, gitableL, ibeg, i(gkgrsize), i(gkgrsize) * i(gkgrsizeOS), i(gkoverlap), iwfn, imode
   a2	sndwarp		klevel*iamp, kwarp, iFrqRatio, gitableR, ibeg, i(gkgrsize), i(gkgrsize) * i(gkgrsizeOS), i(gkoverlap), iwfn, imode
 	outs	a1*aenv,a2*aenv					; send stereo signal to outputs
  endif
  rireturn
 endif


 iactive	active	p1
 if iactive==1 then 
  if imode==0 then						; timestretch mode
   kscrubber	init	0
   kscrubber	+=	kspeed*ksmps*gkfreeze
  else								; pointer mode
   kptrOS	random	0, (giFileLen - kwarp) * gkptrOS
   kwarp	=	kwarp + kptrOS
   kscrubber	=	(kwarp + kptrOS) * sr
  endif
 
  ; print scrubber
 if(metro(10)==1) then
  Smessage sprintfk "scrubberposition(%d)", kscrubber
  chnset Smessage, "filer1"
 endif

 endif
endin

/*
event_i	"i",999,0,3600
instr	999
 aL,aR	monitor
 		fout	"SndWarpOut.wav",4,aL,aR
endin
*/

</CsInstruments>  

<CsScore>
i 1 0 [60*60*24*7]
</CsScore>

</CsoundSynthesizer>
; SyncgrainFilePlayer.csd
; Written by Iain McCurdy, 2014
; 
; The internal pointer used by syncgrain to track progress through the sound file is affected by grain size and density as well as speed 
;  so on accaount of this complication a scrubber line in the waveform view is not yet implemented.

<Cabbage>
form caption("Syncgrain File Player") size(800,340), colour(0,0,0) pluginid("SGFP") style("legacy")
image                       bounds(  0,  0,800,340), colour( 90, 60, 30), outlinecolour("White"), shape("sharp"), line(3)	; main panel colouration    
soundfiler                  bounds(  5,  5,790,175), channel("beg","len"), identchannel("filer1"),  colour(0, 255, 255, 255), fontcolour(160, 160, 160, 255), 

image    bounds(  0,180,800,160), colour(0,0,0,0), outlinecolour("white"), line(0), shape("sharp"), plant("controls"){
filebutton bounds(  5, 10, 80, 25), text("Open File","Open File"), fontcolour("white") channel("filename"), shape("ellipse")
checkbox   bounds(  5, 40, 95, 25), channel("PlayStop"), text("Play/Stop"), fontcolour("white")
label      bounds(225,  4, 65, 8), text("G   R   A   I   N   S"), fontcolour("white")
rslider    bounds( 90, 15, 60, 60), channel("density"),   range( 0.5,400.00,20, 0.5),          colour( 70, 40, 10), text("Density"),     textcolour("white"), trackercolour(190,170,130), outlinecolour(100,100,100)
rslider    bounds(145, 15, 60, 60), channel("DensOS"),     range( 0, 5.00, 0),                 colour( 70, 40, 10), text("Dens.OS"),     textcolour("white"), trackercolour(190,170,130), outlinecolour(100,100,100)
rslider    bounds(200, 15, 60, 60), channel("grsize"),   range( 0.001,1.00, 0.04, 0.5),        colour( 70, 40, 10), text("Size"),        textcolour("white"), trackercolour(190,170,130), outlinecolour(100,100,100)
rslider    bounds(255, 15, 60, 60), channel("SizeOS"),   range( 0, 5.00, 0, 0.5),              colour( 70, 40, 10), text("Size OS"),     textcolour("white"), trackercolour(190,170,130), outlinecolour(100,100,100)
rslider    bounds(310, 15, 60, 60), channel("transpose"), range(-24, 24, 0,1,1),               colour( 70, 40, 10), text("Transpose"),   textcolour("white"), trackercolour(190,170,130), outlinecolour(100,100,100)
rslider    bounds(365, 15, 60, 60), channel("TransposeOS"), range(0, 12.00, 0),                colour( 70, 40, 10), text("Trans.OS"),    textcolour("white"), trackercolour(190,170,130), outlinecolour(100,100,100)
rslider    bounds(420, 15, 60, 60), channel("speed"),     range( -2.00, 2.00, 1),              colour( 70, 40, 10), text("Speed"),       textcolour("white"), trackercolour(190,170,130), outlinecolour(100,100,100)
label      bounds(495, 12, 40, 10), text("S h a p e"), fontcolour("white")
combobox   bounds(478, 22, 74, 18), channel("shape"), items("Hanning", "Perc.1", "Perc.2", "Gate", "Rev.Perc.1", "Rev.Perc.2"), value(1),fontcolour("white")
checkbox   bounds(478, 45,100, 18), channel("freeze"), text("Freeze"), colour("LightBlue"), fontcolour("white")

line       bounds(559, 10,  2, 65), colour("Grey")

label      bounds(578,  4, 86, 8), text("E   N   V   E   L   O   P   E"), fontcolour("white")
rslider    bounds(565, 15, 60, 60), channel("AttTim"),    range(0, 5, 0, 0.5, 0.001),       colour( 70, 40, 10), text("Att.Tim"),   textcolour("white"), trackercolour(190,170,130), outlinecolour(100,100,100)
rslider    bounds(620, 15, 60, 60), channel("RelTim"),    range(0.01, 5, 0.05, 0.5, 0.001), colour( 70, 40, 10), text("Rel.Tim"),   textcolour("white"), trackercolour(190,170,130), outlinecolour(100,100,100)

line       bounds(684, 10,  2, 65), colour("Grey")

label      bounds(702,  4, 76, 8), text("C   O   N   T   R   O   L"), fontcolour("white")
rslider    bounds(685, 15, 60, 60), channel("MidiRef"),   range(0,127,60, 1, 1),            colour( 70, 40, 10), text("MIDI Ref."), textcolour("white"), trackercolour(190,170,130), outlinecolour(100,100,100)
rslider    bounds(740, 15, 60, 60), channel("level"),     range(  0,  3.00, 1, 0.5),        colour( 70, 40, 10), text("Level"),     textcolour("white"), trackercolour(190,170,130), outlinecolour(100,100,100)

keyboard bounds(5, 80,790, 75)
}
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-n -+rtmidi=NULL -M0 -dm0
</CsOptions>

<CsInstruments>

sr = 48000
ksmps = 64
nchnls = 2
0dbfs=1

massign	0,3
gichans		init	0
giReady		init	0
gSfilepath	init	""

; WINDOWING FUNCTIONS USED TO DYNAMICALLY SHAPE THE GRAINS
; NUM | INIT_TIME | SIZE | GEN_ROUTINE | PARTIAL_NUM | STRENGTH | PHASE
; GRAIN ENVELOPE WINDOW FUNCTION TABLES:
giwfn1	ftgen	0,  0, 131072,  20,   2, 1 					; HANNING
giwfn2	ftgen	0,  0, 131072,  7,    0, 3072,   1, 128000,    0		; PERCUSSIVE - STRAIGHT SEGMENTS
giwfn3	ftgen	0,  0, 131072,  5, .001, 3072,   1, 128000, .001		; PERCUSSIVE - EXPONENTIAL SEGMENTS
giwfn4	ftgen	0,  0, 131072,  7,    0, 1536,   1, 128000,    1, 1536, 0	; GATE - WITH DE-CLICKING RAMP UP AND RAMP DOWN SEGMENTS
giwfn5	ftgen	0,  0, 131072,  7,    0, 128000, 1, 3072,      0		; REVERSE PERCUSSIVE - STRAIGHT SEGMENTS
giwfn6	ftgen	0,  0, 131072,  5, .001, 128000, 1, 3072,   .001		; REVERSE PERCUSSIVE - EXPONENTIAL SEGMENTS

instr	1
 gkloop		chnget	"loop"
 gkPlayStop	chnget	"PlayStop"
 gktranspose	chnget	"transpose"
 gkTransposeOS	chnget	"TransposeOS"
 gkdensity	chnget	"density"
 gkDensOS	chnget	"DensOS"
 gkgrsize	chnget	"grsize"
 gkSizeOS	chnget	"SizeOS"
 gkshape	chnget	"shape"
 gkspeed	chnget	"speed"
 gklevel	chnget	"level"
 gkfreeze	chnget	"freeze"
 gkfreeze	=	1-gkfreeze
        
 gSfilepath	chnget	"filename"
 kNewFileTrg	changed	gSfilepath		; if a new file is loaded generate a trigger
 if kNewFileTrg==1 then				; if a new file has been loaded...
  event	"i",99,0,0				; call instrument to update sample storage function table 
 endif  

 ktrig	trigger	gkPlayStop,0.5,0
 schedkwhen	ktrig,0,0,2,0,-1
endin

instr	99	; load sound file
 gichans	filenchnls	gSfilepath			; derive the number of channels (mono=1,stereo=2) in the sound file
 gitableL	ftgen	1,0,0,1,gSfilepath,0,0,1
 if gichans==2 then
  gitableR	ftgen	2,0,0,1,gSfilepath,0,0,2
 endif
 giReady 	=	1					; if no string has yet been loaded giReady will be zero
 Smessage sprintfk "file(%s)", gSfilepath			; print sound file to viewer
 chnset Smessage, "filer1"
endin

instr	2	; triggered by 'play/stop' button
 if gkPlayStop==0 then
  turnoff
 endif
 if giReady = 1 then						; i.e. if a file has been loaded
  iAttTim	chnget	"AttTim"				; read in widgets
  iRelTim	chnget	"RelTim"
  if iAttTim>0 then						; is amplitude envelope attack time is greater than zero...
   kenv	linsegr	0,iAttTim,1,iRelTim,0				; create an amplitude envelope with an attack, a sustain and a release segment (senses realtime release)
  else            
   kenv	linsegr	1,iRelTim,0					; create an amplitude envelope with a sustain and a release segment (senses realtime release)
  endif
  kenv	expcurve	kenv,8					; remap amplitude value with a more natural curve
  aenv	interp		kenv					; interpolate and create a-rate envelope
  kporttime	linseg	0,0.001,0.05				; portamento time function. (Rises quickly from zero to a held value.)
  kdensity	portk	gkdensity,kporttime			; apply portamento smoothing to changes in speed
  kprate	portk	gkspeed,kporttime
  klevel	portk	gklevel,kporttime			; apply portamento smoothing to changes in level

  kDensOS	gauss	gkDensOS
  kDensMlt	=	octave(kDensOS)
  kdensity	=	kdensity * kDensMlt
  
  ktranspose	portk	gktranspose,kporttime			; 
  kTransposeOS	gauss	gkTransposeOS
  ktranspose	=	ktranspose + kTransposeOS
  
  kSizeOS	rand	gkSizeOS
  kgrsize	=	gkgrsize * octave(kSizeOS)
  
  giolaps	=	5000
  
  ktrig	changed	gkshape
  if ktrig==1 then
   reinit	UPDATE
  endif
  UPDATE:
  
  iwfn		=	i(gkshape) + giwfn1 - 1
  if gichans==1 then						; if mono...
   a1	syncgrain	klevel, kdensity, semitone(ktranspose), kgrsize, kprate*gkfreeze, gitableL, iwfn, giolaps
 	outs	a1*aenv,a1*aenv					; send mono audio to both outputs 
  elseif gichans==2 then						; otherwise, if stereo...
   a1	syncgrain	klevel, kdensity, semitone(ktranspose), kgrsize, kprate*gkfreeze, gitableL, iwfn, giolaps
   a2	syncgrain	klevel, kdensity, semitone(ktranspose), kgrsize, kprate*gkfreeze, gitableR, iwfn, giolaps
 	outs	a1*aenv,a2*aenv					; send stereo signal to outputs
  endif
  rireturn
 endif
endin

instr	3
 icps	cpsmidi							; read in midi note data as cycles per second
 iamp	ampmidi	1						; read in midi velocity (as a value within the range 0 - 1)
 iAttTim	chnget	"AttTim"				; read in widgets
 iRelTim	chnget	"RelTim"
 iMidiRef	chnget	"MidiRef"
 iFrqRatio		=	icps/cpsmidinn(iMidiRef)	; derive playback speed from note played in relation to a reference note (MIDI note 60 / middle C)

 if giReady = 1 then						; i.e. if a file has been loaded
  iAttTim	chnget	"AttTim"				; read in widgets
  iRelTim	chnget	"RelTim"
  if iAttTim>0 then						; is amplitude envelope attack time is greater than zero...
   kenv	linsegr	0,iAttTim,1,iRelTim,0				; create an amplitude envelope with an attack, a sustain and a release segment (senses realtime release)
  else            
   kenv	linsegr	1,iRelTim,0					; create an amplitude envelope with a sustain and a release segment (senses realtime release)
  endif
  kenv	expcurve	kenv,8					; remap amplitude value with a more natural curve
  aenv	interp		kenv					; interpolate and create a-rate envelope
  kporttime	linseg	0,0.001,0.05				; portamento time function. (Rises quickly from zero to a held value.)
  kdensity	portk	gkdensity,kporttime			; apply portamento smoothing to changes in speed
  kprate	portk	gkspeed,kporttime
  klevel	portk	gklevel,kporttime			; apply portamento smoothing to changes in level

  kDensOS	gauss	gkDensOS
  kDensMlt	=	octave(kDensOS)
  kdensity	=	kdensity * kDensMlt
    
  kSizeOS	rand	gkSizeOS
  kgrsize	=	gkgrsize * octave(kSizeOS)

  giolaps	=	5000
  
  ktrig	changed	gkshape
  if ktrig==1 then
   reinit	UPDATE
  endif
  UPDATE:
  
  iwfn		=	i(gkshape) + giwfn1 - 1
  if gichans==1 then						; if mono...
   a1	syncgrain	klevel*iamp, kdensity, iFrqRatio, kgrsize, kprate*gkfreeze, gitableL, iwfn, giolaps
 	outs	a1*aenv,a1*aenv					; send mono audio to both outputs 
  elseif gichans==2 then						; otherwise, if stereo...
   a1	syncgrain	klevel*iamp, kdensity, iFrqRatio, kgrsize, kprate*gkfreeze, gitableL, iwfn, giolaps
   a2	syncgrain	klevel*iamp, kdensity, iFrqRatio, kgrsize, kprate*gkfreeze, gitableR, iwfn, giolaps
 	outs	a1*aenv,a2*aenv					; send stereo signal to outputs
  endif
  rireturn
 endif

endin

</CsInstruments>  

<CsScore>
i 1 0 [60*60*24*7]
</CsScore>

</CsoundSynthesizer>
; Table3FilePlayer.csd
; Written by Iain McCurdy, 2014

; Load a user selected sound file into a GEN 01 function table and plays it back using loscil3. 
; This file player is suited for polyphonic playback and is less well suited for the playback of very long sound files .
;                                 
; Loop points can be edited by using either the sliders 'Start' and 'End' or by clicking and dragging on the waveform view.
;  Edit mode is selected automatically according to the last method used.
; 
; 
; Things still to do:
;  Add loop direction function when using sliders to edit loop points
;  Portamento control for loop points when using sliders to edit loop points
;  Add instructions in viewer panel.
;  MIDI note loop play in click-and-drag mode not working properly
 
 
<Cabbage>
form caption("Table3 File Player") size(740,340), colour(0,0,0) pluginid("T3Pl"), guirefresh(64) style("legacy")
image                    bounds(  0,  0,740,340), colour(30, 30, 70), outlinecolour("White"), line(3), shape("sharp")	; main panel colouration    
soundfiler               bounds(  5,  5,730,175), channel("beg","len"), identchannel("filer1"),  colour(0, 255, 255, 255), fontcolour(160, 160, 160, 255), 
label bounds(6, 4, 560, 14), text(""), align(left), colour(0,0,0,0), fontcolour(200,200,200), identchannel("stringbox")

filebutton bounds(  5,190, 80, 25), text("Open File","Open File"), fontcolour("white") channel("filename"), shape("ellipse")
checkbox   bounds(  5,220, 95, 25), channel("PlayStop"), text("Play/Stop"), colour("yellow"), fontcolour("white")

label      bounds(178,184, 45, 8), text("L   O   O   P"), fontcolour("white")

groupbox   bounds(100,200,100, 50), plant("looping"), text("Looping Mode"), fontcolour("white"){
combobox   bounds( 10, 25, 80, 20), channel("mode"), items("Forward", "Backward", "Fwd./Bwd."), value(1), fontcolour("white")
}
rslider    bounds(205,195, 60, 60), channel("LoopStart"), range(0, 1, 0),                   colour(60, 60,100), text("Start"),     textcolour("white"), trackercolour(210,210,250)
rslider    bounds(260,195, 60, 60), channel("LoopEnd"),   range(0, 1, 1),                   colour(60, 60,100), text("End"),       textcolour("white"), trackercolour(210,210,250)
rslider    bounds(315,195, 60, 60), channel("Portamento"),   range(0,0.1,0.01),                   colour(60, 60,100), text("Portamento"),       textcolour("white"), trackercolour(210,210,250)

line       bounds(375,190,  2, 65), colour("Grey")

label      bounds(409,184, 55, 8), text("S   P   E   E   D"), fontcolour("white")
rslider    bounds(380,195, 60, 60), channel("transpose"), range(-24, 24, 0,1,1),            colour(60, 60,100), text("Transpose"), textcolour("white"), trackercolour(210,210,250)
rslider    bounds(435,195, 60, 60), channel("speed"),     range(0, 4.00, 1, 0.5, 0.001),    colour(60, 60,100), text("Speed"),     textcolour("white"), trackercolour(210,210,250)

line       bounds(495,190,  2, 65), colour("Grey")

label      bounds(511,184, 90, 8), text("E   N   V   E   L   O   P   E"), fontcolour("white")
rslider    bounds(500,195, 60, 60), channel("AttTim"),    range(0, 5, 0.01, 0.5, 0.001),    colour(60, 60,100), text("Att.Tim"),   textcolour("white"), trackercolour(210,210,250)
rslider    bounds(555,195, 60, 60), channel("RelTim"),    range(0.01, 5, 0.05, 0.5, 0.001), colour(60, 60,100), text("Rel.Tim"),   textcolour("white"), trackercolour(210,210,250)
line       bounds(615,190,  2, 65), colour("Grey")

label      bounds(636,184, 80, 8), text("C   O   N   T   R   O   L"), fontcolour("white")
rslider    bounds(620,195, 60, 60), channel("MidiRef"),   range(0,127,60, 1, 1),            colour(60, 60,100), text("MIDI Ref."), textcolour("white"), trackercolour(210,210,250)
rslider    bounds(675,195, 60, 60), channel("level"),     range(  0,  3.00, 1, 0.5),        colour(60, 60,100), text("Level"),     textcolour("white"), trackercolour(210,210,250)

keyboard bounds(5,260, 730, 75)
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-n -+rtmidi=NULL -M0 -dm0
</CsOptions>

<CsInstruments>

sr = 44100
ksmps = 32
nchnls = 2
0dbfs = 1

		massign	0,3
gichans		init	0
giFileLen	init	0
giReady		init	0
gSfilepath	init	""
gkTabLen	init	2
gitri		ftgen	0,0,131072,7,0,131072/2,1,131072/2,0
gkEditMode	init	2	; 1 = CAD 2 = sliders

opcode FileNameFromPath,S,S		; Extract a file name (as a string) from a full path (also as a string)
 Ssrc	xin				; Read in the file path string
 icnt	strlen	Ssrc			; Get the length of the file path string
 LOOP:					; Loop back to here when checking for a backslash
 iasc	strchar Ssrc, icnt		; Read ascii value of current letter for checking
 if iasc==92 igoto ESCAPE		; If it is a backslash, escape from loop
 loop_gt	icnt,1,0,LOOP		; Loop back and decrement counter which is also used as an index into the string
 ESCAPE:				; Escape point once the backslash has been found
 Sname	strsub Ssrc, icnt+1, -1		; Create a new string of just the file name
	xout	Sname			; Send it back to the caller instrument
endop

instr	1	; Read in widgets
 gkMOUSE_DOWN_LEFT	chnget	"MOUSE_DOWN_LEFT"

 gkloop		chnget	"loop"

 gkLoopStart	chnget	"beg"		; Click-and-drag
 gkLoopLen	chnget	"len"
 
 gkLoopStart2	chnget	"LoopStart"	; Sliders
 gkLoopEnd2	chnget	"LoopEnd"
 gkPortamento	chnget	"Portamento"

 gkMOUSE_DOWN_RIGHT	chnget	"MOUSE_DOWN_RIGHT"			; Read in mouse left click status

 if changed(gkLoopStart,gkLoopLen)==1 then
  gkEditMode	=	1	; Click-and-drag
 elseif  changed(gkLoopStart2,gkLoopEnd2)==1||gkMOUSE_DOWN_RIGHT==1 then
  gkEditMode	=	2	; sliders
 endif
 
 gkPlayStop	chnget	"PlayStop"
 gktranspose	chnget	"transpose"
 gkspeed	chnget	"speed"
 gklevel	chnget	"level"
 gkmode		chnget	"mode"
 
 gSfilepath	chnget	"filename"
 kNewFileTrg	changed	gSfilepath		; if a new file is loaded generate a trigger
 if kNewFileTrg==1 then					; if a new file has been loaded...
  event	"i",99,0,0						; call instrument to update sample storage function table 
 endif  
 
 ktrig	trigger	gkPlayStop,0.5,0		; if play button changes to 'play', generate a trigger
 schedkwhen	ktrig,0,0,2,0,-1			; start instr 2 playing a held note

 ktrig1	changed	gktranspose				; if 'transpose' button is changed generate a '1' trigger
 ktrig2	changed	gkspeed					; if 'speed' button is changed generate a '1' trigger
 
 if ktrig1==1 then								; if transpose control has been changed...
  chnset	semitone(gktranspose),"speed"		; set speed according to transpose value
 elseif ktrig2==1 then							; if speed control has been changed...
  chnset	log2(abs(gkspeed))*12,"transpose"	; set transpose control according to speed value
 endif

  /* MOUSE SCRUBBING */
 kStartScrub		trigger	gkMOUSE_DOWN_RIGHT,0.5,0
 if gkMOUSE_DOWN_RIGHT==1 then
  if kStartScrub==1 then 
   reinit RAMP_FUNC
  endif
  RAMP_FUNC:
  krampup	linseg	0,0.001,1
  rireturn
  kMOUSE_X	chnget	"MOUSE_X"
  kMOUSE_Y	chnget	"MOUSE_Y"
  kMOUSE_X	=	(kMOUSE_X - 5) / 730
  kMOUSE_Y	portk	1 - ((kMOUSE_Y - 5) / 175), krampup*0.05		; SOME SMOOTHING OF DENSITY CHANGES VIA THE MOUSE ENHANCES PERFORMANCE RESULTS. MAKE ANY ADJUSTMENTS WITH ADDITIONAL CONSIDERATION OF guirefresh VALUE 
  gkLoopStart2		limit	kMOUSE_X,0,1
  gkLoopEnd2		limit	((kMOUSE_Y^2) * (1-kMOUSE_X)) + kMOUSE_X, 0, 1
  gktranspose	=	((kMOUSE_Y*2)-1)*gktranspose	;, -gktranspose, gktranspose
  schedkwhen	kStartScrub,0,0,2,0,-1
 else
  gkptr		chnget	"ptr"
  gklevel	chnget	"level"
 endif 

endin

instr	99	; load sound file
 gichans	filenchnls	gSfilepath			; derive the number of channels (mono=1,stereo=2) in the sound file
 gitableL	ftgen	1,0,0,1,gSfilepath,0,0,1
 giFileSamps	=		nsamp(gitableL)			; derive the file duration in samples
 giFileLen	filelen		gSfilepath			; derive the file duration in seconds
 gkTabLen	init		ftlen(gitableL)			; table length in sample frames
 if gichans==2 then
  gitableR	ftgen	2,0,0,1,gSfilepath,0,0,2
 endif
 giReady 	=	1					; if no string has yet been loaded giReady will be zero
 Smessage sprintfk "file(%s)", gSfilepath			; print file to viewer
 chnset Smessage, "filer1"	

 /* WRITE FILE NAME TO GUI */
 Sname FileNameFromPath	gSfilepath				; Call UDO to extract file name from the full path
 Smessage sprintfk "text(%s)",Sname
 chnset Smessage, "stringbox"

endin




instr	2	; Sample triggered by 'play/stop' button
 if gkPlayStop==0&&gkMOUSE_DOWN_RIGHT==0 then
  turnoff
 endif

 if giReady = 1 then						; i.e. if a file has been loaded

  iAttTim	chnget	"AttTim"				; read in widgets
  iRelTim	chnget	"RelTim"
  if iAttTim>0 then						; is amplitude envelope attack time is greater than zero...
   kenv	linsegr	0,iAttTim,1,iRelTim,0				; create an amplitude envelope with an attack, a sustain and a release segment (senses realtime release)
  else
   kenv	linsegr	1,iRelTim,0					; create an amplitude envelope with a sustain and a release segment (senses realtime release)
  endif
  kenv	expcurve	kenv,8					; remap amplitude value with a more natural curve
  aenv	interp		kenv					; interpolate and create a-rate envelope
  kporttime	linseg	0,0.001,1				; portamento time function. (Rises quickly from zero to a held value.)
  kspeed	portk	gkspeed,kporttime*gkPortamento			; apply portamento smoothing to changes in speed
  klevel	portk	gklevel,kporttime*0.1			; apply portamento smoothing to changes

  if gkEditMode==1 then						; click and drag edit mode
   gkLoopLen	limit	gkLoopLen,1,giFileSamps			; prevent loop lengths of zero
   
   krate		=	(kspeed * sr) / gkLoopLen
   arate		interp	krate
   
   if gkmode==1 then
    aphasor	phasor	arate
   elseif gkmode==2 then
    aphasor	phasor	-arate
   else
    aphasor	poscil	1,-arate*0.5,gitri
   endif
   rireturn
   
   aLoopStart	interp	gkLoopStart
   aLoopEnd	interp	gkLoopLen
   aphasor	=	(aphasor*aLoopEnd)+aLoopStart
   
   if gichans==1 then						; if mono...
    a1	table3	aphasor, gitableL
 	 outs	a1*aenv*klevel, a1*aenv*klevel			; send mono audio to both outputs 
   elseif gichans==2 then					; otherwise, if stereo...
    a1	table3	aphasor, gitableL
    a2	table3	aphasor, gitableR
 	 outs	a1*aenv*klevel, a2*aenv*klevel			; send stereo signal to outputs
   endif               
  
  elseif gkEditMode==2 then		; sliders edit mode
  
   kLoopStart	portk	gkLoopStart2,kporttime*gkPortamento
   kLoopEnd	portk	gkLoopEnd2,kporttime*gkPortamento
   kLoopEnd	=	(kLoopEnd=kLoopStart?kLoopEnd+0.001:kLoopEnd)
   
   kLoopLen	=	abs(kLoopEnd-kLoopStart)
   kdir		=	(kLoopEnd>kLoopStart?1:-1)
   
   krate		divz	kspeed, kLoopLen*giFileLen, 1
   arate		interp	krate
   aphasor	phasor	arate*kdir
   kLoopStart	min	kLoopStart,kLoopEnd
   aLoopStart	interp	kLoopStart
   aLoopLen	interp	kLoopLen
   aphasor	=	(aphasor*aLoopLen)+aLoopStart
   
   if gichans==1 then						; if mono...
    a1	table3	aphasor, gitableL, 1
 	 outs	a1*aenv*klevel, a1*aenv*klevel			; send mono audio to both outputs 
   elseif gichans==2 then					; otherwise, if stereo...
    a1	table3	aphasor, gitableL, 1
    a2	table3	aphasor, gitableR, 1
 	 outs	a1*aenv*klevel, a2*aenv*klevel			; send stereo signal to outputs
   endif               
   
   
  endif
  
 endif

 ; print scrubber
 if(metro(20)==1) then
  kscrubber	downsamp	aphasor
  Smessage sprintfk "scrubberposition(%d)", kscrubber
  chnset Smessage, "filer1"
 endif

endin




instr	3	; sample triggered by midi note
 icps	cpsmidi							; read in midi note data as cycles per second
 iamp	ampmidi	1						; read in midi velocity (as a value within the range 0 - 1)
 iMidiRef	chnget	"MidiRef"

 if giReady = 1 then						; i.e. if a file has been loaded
  iAttTim	chnget	"AttTim"				; read in widgets
  iRelTim	chnget	"RelTim"
  if iAttTim>0 then						; is amplitude envelope attack time is greater than zero...
   kenv	linsegr	0,iAttTim,1,iRelTim,0				; create an amplitude envelope with an attack, a sustain and a release segment (senses realtime release)
  else
   kenv	linsegr	1,iRelTim,0					; create an amplitude envelope with a sustain and a release segment (senses realtime release)
  endif
  kenv	expcurve	kenv,8					; remap amplitude value with a more natural curve
  aenv	interp		kenv					; interpolate and create a-rate envelope
  kporttime	linseg	0,0.001,0.05				; portamento time function. (Rises quickly from zero to a held value.)
  ispeed	=	icps/cpsmidinn(iMidiRef)		; derive playback speed from note played in relation to a reference note (MIDI note 60 / middle C)
  klevel	portk	gklevel,kporttime			; apply portamento smoothing to changes in level
    

  if gkEditMode==1 then						; click and drag edit mode

   gkLoopLen	limit	gkLoopLen,1,giFileSamps			; prevent loop lengths of zero
 
   krate		=	ispeed * sr / gkLoopLen
   arate		interp	krate
 
   if gkmode==1 then
    aphasor	phasor	arate
   elseif gkmode==2 then
    aphasor	phasor	-arate
   else
    aphasor	poscil	1,-arate*0.5,gitri
   endif
   
   aLoopStart	interp	gkLoopStart
   aLoopEnd	interp	gkLoopLen
   aphasor	=	(aphasor*aLoopEnd)+aLoopStart
 
   if gichans==1 then						; if mono...
    a1	table3	aphasor, gitableL
  	outs	a1*aenv*klevel*iamp*(1-gkMOUSE_DOWN_LEFT), a1*aenv*klevel*iamp*(1-gkMOUSE_DOWN_LEFT)	; send mono audio to both outputs 
   elseif gichans==2 then					; otherwise, if stereo...
    a1	table3	aphasor, gitableL
    a2	table3	aphasor, gitableR
  	outs	a1*aenv*klevel*iamp*(1-gkMOUSE_DOWN_LEFT), a2*aenv*klevel*iamp*(1-gkMOUSE_DOWN_LEFT)	; send stereo signal to outputs
   endif

  elseif gkEditMode==2 then		; sliders edit mode

   kLoopStart	portk	gkLoopStart2,kporttime
   kLoopEnd	portk	gkLoopEnd2,kporttime
   kLoopEnd	=	(kLoopEnd=kLoopStart?kLoopEnd+0.001:kLoopEnd)
   
   kLoopLen	=	abs(kLoopEnd-kLoopStart)
   kdir		=	(kLoopEnd>kLoopStart?1:-1)
   
   krate		divz	ispeed, kLoopLen*giFileLen, 1
   arate		interp	krate
   aphasor	phasor	arate*kdir
   kLoopStart	min	kLoopStart,kLoopEnd
   aLoopStart	interp	kLoopStart
   aLoopLen	interp	kLoopLen
   aphasor	=	(aphasor*aLoopLen)+aLoopStart
   
   if gichans==1 then						; if mono...
    a1	table3	aphasor, gitableL, 1
 	 outs	a1*aenv*klevel*iamp, a1*aenv*klevel*iamp	; send mono audio to both outputs 
   elseif gichans==2 then					; otherwise, if stereo...
    a1	table3	aphasor, gitableL, 1
    a2	table3	aphasor, gitableR, 1
 	 outs	a1*aenv*klevel*iamp, a2*aenv*klevel*iamp	; send stereo signal to outputs
   endif               




  endif

 endif

 if active(p1)==1 then						; only print scrubber for first note
  if(metro(20)==1) then
   kscrubber	downsamp	aphasor
   Smessage sprintfk "scrubberposition(%d)", kscrubber
   chnset Smessage, "filer1"
  endif
 endif
endin
 
</CsInstruments>  

<CsScore>
i 1 0 [60*60*24*7]
</CsScore>

</CsoundSynthesizer>TemposcalFilePlayer.csd
Written by Iain McCurdy, 2014.

Load a user selected sound file into a GEN 01 function table and plays it back using temposcal.

The sound file can be played back using the Play/Stop button (and the 'Transpose' and 'Speed' buttons to implement pitch abd speed changes independently.
Playing back using the MIDI keyboard will implement pitch changes based on key played.

<Cabbage>
form caption("Temposcal File Player") size(570,340), colour(0,0,0) pluginid("TScl") style("legacy")
image                       bounds(  0,  0,570,340), colour( 30, 70, 70), outlinecolour("White"), shape("sharp"), line(3)

soundfiler bounds(  5,  5,560,175), channel("beg","len"), identchannel("filer1"),  colour(0, 255, 255, 255), fontcolour(160, 160, 160, 255), 
label bounds(6, 4, 560, 14), text(""), align(left), colour(0,0,0,0), fontcolour(200,200,200), identchannel("stringbox")

image    bounds(  0,180,570,160), colour(0,0,0,0), outlinecolour("white"), line(2), shape("sharp"), plant("controls"){
filebutton bounds(  5, 10, 80, 25), text("Open","Open"), fontcolour("white") channel("filename"), shape("ellipse")
checkbox   bounds(  5, 40, 95, 25), channel("PlayStop"), text("Play/Stop"), fontcolour("white")

checkbox   bounds( 95, 43,100, 15), channel("lock"), text("Phase Lock"), colour("red"), fontcolour("white")
checkbox   bounds( 95, 60,100, 15), channel("freeze"), text("Freeze"), colour("LightBlue"), fontcolour("white")

label      bounds(105,  8, 48, 12), text("FFT Size"), fontcolour("white")
combobox   bounds( 95, 20, 70, 20), channel("FFTSize"), items("32768", "16384", "8192", "4096", "2048", "1024", "512", "256", "128", "64", "32", "16", "8", "4"), value(5), fontcolour("white")

rslider    bounds(175,  5, 70, 70), channel("transpose"), range(-48, 48, 0,1,1),            colour( 50, 90, 90)), trackercolour("silver"), text("Transpose"), textcolour("white")
rslider    bounds(240,  5, 70, 70), channel("speed"),     range( -2,  2.00, 1),             colour( 50, 90, 90),  trackercolour("silver"), text("Speed"),     textcolour("white")
rslider    bounds(305,  5, 70, 70), channel("AttTim"),    range(0, 5, 0, 0.5, 0.001),       colour( 50, 90, 90),  trackercolour("silver"), text("Att.Tim"),   textcolour("white")
rslider    bounds(370,  5, 70, 70), channel("RelTim"),    range(0.01, 5, 0.05, 0.5, 0.001), colour( 50, 90, 90),  trackercolour("silver"), text("Rel.Tim"),   textcolour("white")
rslider    bounds(435,  5, 70, 70), channel("MidiRef"),   range(0,127,60, 1, 1),            colour( 50, 90, 90), trackercolour("silver"),  text("MIDI Ref."), textcolour("white")
rslider    bounds(500,  5, 70, 70), channel("level"),     range(  0,  3.00, 1, 0.5),        colour( 50, 90, 90),  trackercolour("silver"), text("Level"),     textcolour("white")

keyboard bounds( 5, 80, 560, 75)
}
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-n -+rtmidi=NULL -M0
</CsOptions>

<CsInstruments>

sr = 44100
ksmps = 64
nchnls = 2
0dbfs=1

massign	0,3

gichans		init	0		; 
giReady		init	0		; flag to indicate function table readiness

giFFTSizes[]	array	32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4	; an array is used to store FFT window sizes

gSfilepath	init	""

opcode FileNameFromPath,S,S		; Extract a file name (as a string) from a full path (also as a string)
 Ssrc	xin				; Read in the file path string
 icnt	strlen	Ssrc			; Get the length of the file path string
 LOOP:					; Loop back to here when checking for a backslash
 iasc	strchar Ssrc, icnt		; Read ascii value of current letter for checking
 if iasc==92 igoto ESCAPE		; If it is a backslash, escape from loop
 loop_gt	icnt,1,0,LOOP		; Loop back and decrement counter which is also used as an index into the string
 ESCAPE:				; Escape point once the backslash has been found
 Sname	strsub Ssrc, icnt+1, -1		; Create a new string of just the file name
	xout	Sname			; Send it back to the caller instrument
endop

instr	1
gkPlayStop	chnget	"PlayStop"
gkloop		chnget	"loop"
gktranspose	chnget	"transpose"
gklevel		chnget	"level"
gkspeed		chnget	"speed"
gklock		chnget	"lock"
gkfreeze	chnget	"freeze"
gkfreeze	=	1-gkfreeze
gkFFTSize	chnget	"FFTSize"
 gSfilepath	chnget	"filename"
 kNewFileTrg	changed	gSfilepath		; if a new file is loaded generate a trigger
 if kNewFileTrg==1 then				; if a new file has been loaded...
  event	"i",99,0,0				; call instrument to update sample storage function table 
 endif  

ktrig	trigger	gkPlayStop,0.5,0
schedkwhen	ktrig,0,0,2,0,-1
endin

instr	99	; load sound file
 gichans	filenchnls	gSfilepath			; derive the number of channels (mono=1,stereo=2) in the sound file
 gitableL	ftgen	1,0,0,1,gSfilepath,0,0,1
 if gichans==2 then
  gitableR	ftgen	2,0,0,1,gSfilepath,0,0,2
 endif
 giReady 	=	1					; if no string has yet been loaded giReady will be zero
 Smessage sprintfk "file(%s)", gSfilepath			; print sound file to viewer
 chnset Smessage, "filer1"

 /* WRITE FILE NAME TO GUI */
 Sname FileNameFromPath	gSfilepath				; Call UDO to extract file name from the full path
 Smessage sprintfk "text(%s)",Sname
 chnset Smessage, "stringbox"

endin

instr	2
 if gkPlayStop==0 then
  turnoff
 endif
 if giReady = 1 then				; i.e. if a file has been loaded
  iAttTim	chnget	"AttTim"		; read in amplitude envelope attack time widget
  iRelTim	chnget	"RelTim"		; read in amplitude envelope attack time widget
  if iAttTim>0 then				; 
   kenv	linsegr	0,iAttTim,1,iRelTim,0
  else								
   kenv	linsegr	1,iRelTim,0			; attack time is zero so ignore this segment of the envelope (a segment of duration zero is not permitted
  endif
  kenv	expcurve	kenv,8			; remap amplitude value with a more natural curve
  aenv	interp		kenv			; interpolate and create a-rate envelope

  kporttime	linseg	0,0.001,0.05
  ktranspose	portk	gktranspose,kporttime
  
  ktrig	changed		gkFFTSize
  if ktrig==1 then
   reinit RESTART
  endif
  RESTART:
  if gichans=1 then
   a1	temposcal	gkspeed*gkfreeze, gklevel, semitone(ktranspose), gitableL, gklock, giFFTSizes[i(gkFFTSize)-1]
  	outs	a1*aenv,a1*aenv
  elseif gichans=2 then
   a1	temposcal	gkspeed*gkfreeze, gklevel, semitone(ktranspose), gitableL, gklock, giFFTSizes[i(gkFFTSize)-1]
   a2	temposcal	gkspeed*gkfreeze, gklevel, semitone(ktranspose), gitableR, gklock, giFFTSizes[i(gkFFTSize)-1]
  	outs	a1*aenv,a2*aenv
 endif
endif

 ; print scrubber
 kscrubber	phasor	(gkspeed*gkfreeze*sr)/ftlen(gitableL)
 if(metro(20)==1) then
  Smessage sprintfk "scrubberposition(%d)", kscrubber*ftlen(gitableL)
  chnset Smessage, "filer1"
 endif

endin




instr	3	; midi triggered instrument
 if giReady = 1 then						; i.e. if a file has been loaded
  icps	cpsmidi							; read in midi note data as cycles per second
  iamp	ampmidi	1						; read in midi velocity (as a value within the range 0 - 1)
  iMidiRef	chnget	"MidiRef"				; MIDI unison reference note
  iFrqRatio		=	icps/cpsmidinn(iMidiRef)	; derive playback speed from note played in relation to a reference note (MIDI note 60 / middle C)
 
  iAttTim	chnget	"AttTim"		; read in amplitude envelope attack time widget
  iRelTim	chnget	"RelTim"		; read in amplitude envelope attack time widget
  if iAttTim>0 then				; 
   kenv	linsegr	0,iAttTim,1,iRelTim,0
  else								
   kenv	linsegr	1,iRelTim,0			; attack time is zero so ignore this segment of the envelope (a segment of duration zero is not permitted
  endif
  kenv	expcurve	kenv,8			; remap amplitude value with a more natural curve
  aenv	interp		kenv			; interpolate and create a-rate envelope
  
  ktrig	changed		gkFFTSize
  if ktrig==1 then
   reinit RESTART
  endif
  RESTART:
  if gichans=1 then
   a1	temposcal	gkspeed*gkfreeze, gklevel*iamp, iFrqRatio, gitableL, gklock, giFFTSizes[i(gkFFTSize)-1]
  	outs	a1*aenv,a1*aenv
  elseif gichans=2 then
   a1	temposcal	gkspeed*gkfreeze, gklevel*iamp, iFrqRatio, gitableL, gklock, giFFTSizes[i(gkFFTSize)-1]
   a2	temposcal	gkspeed*gkfreeze, gklevel*iamp, iFrqRatio, gitableR, gklock, giFFTSizes[i(gkFFTSize)-1]
  	outs	a1*aenv,a2*aenv
  endif
 endif
endin

</CsInstruments>  

<CsScore>
i 1 0 10000
</CsScore>

</CsoundSynthesizer>
; Bubbles.csd
; Written by Iain McCurdy, 2014

; A simple game that is intended to demonstrate moving Cabbage widgets in this case 'image' and interacting with those moving widgets using the mouse.

; The user bursts rising bubbles by clicking on them (a 'burst' is rewraded with a pizzicato-type sound).
; The higher up the panel a bubble is burst, the higher the note it produces.
; Horizontal position across the panel corresponds to panning location of the sound produced.
; The size of the bubble corresponds to the loudness of the burst sound it produces: The larger the bubble, the louder the sound.
; The number of bubbles in circulation gradually increases from 1 to 10 
  

<Cabbage>
form caption("Bubbles"), scrollbars(0), size(1000, 540), pluginid("Bubl"),colour(170,170,255), guirefresh(32)				; guirefresh might have some bearing on the smoothness of movement of the balloons (traded against CPU efficiency) style("legacy")
label bounds(  0,250,1000, 30), text("Burst the Bubbles..."), align(centre), fontcolour(0,0,0,0), identchannel("instructions")		; Instructions

image bounds(  0,  0,  0, 0), colour(0,0,0), shape("ellipse"), widgetarray("bubble",10)		; The bubbles
image bounds(  0,  0,  0, 0), colour(0,0,0), shape("ellipse"), widgetarray("specular",10)	; Specular highlights

label    bounds(  5,  2, 45, 15), text("Burst:"), align(left), fontcolour(0,0,0,100)					; Burst label
label    bounds( 50,  2, 40, 15), text("0"), align(left), fontcolour(0,0,0,150), identchannel("burstID")			; Burst value
label    bounds( 90,  2, 55, 15), text("Missed:"), align(left), fontcolour(0,0,0,100)					; Missed label
label    bounds(145,  2, 40, 15), text("0"), align(left), fontcolour(0,0,0,150), identchannel("missedID")			; Missed value

label    bounds(  1,530,100, 10), text("Iain McCurdy 2014"), align(left), fontcolour(0,0,0,150)
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n
</CsOptions>

<CsInstruments>

sr 		= 	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1
seed	0

gaSendL,gaSendR	init	0				; Global audio send variables used to send audio to the reverb effect.
gisine	ftgen	0,0,131072,10,1
giImp	ftgen	0,0,4097,9,0.5,1,0			; Shape for the impulse.
gipanel_width	=	1000				; Panel width (should correspond with the value given in the Cabbage GUI code)
gipanel_height	=	540				; Panel height (should correspond with the value given in the Cabbage GUI code)
giNBalloons	=	10				; Number of balloons.
giBurstScore	=	0				; Number of bubbles burst
giMissedScore	=	0				; Number of bubbles missed
gkactive	init	0
giPolyLimit	=	3
giWobbleShape	ftgen	0,0,4096,10,1,0.3

;				yellow	violet	red	green	d.blue	l.blue	orange	pink	purple	white	black
giR	ftgen	0,0,-11,-2,	255,	255,	255,	0,	0,	100,	255,	255,	100,	255,	20
giG	ftgen	0,0,-11,-2,	255,	0,	0,	255,	0,	100,	100,	75,	0,	255,	20
giB	ftgen	0,0,-11,-2,	255,	255,	0,	0,	255,	255,	9,	255,	100,	255,	20
giColourIndex	init	0

opcode	Oscil1a,a,iii					; an oscillator that plays a single cycle of an audio waveform at a-rate
 iamp,ifrq,ifn	xin
 aptr	line	0,1/ifrq,1
 asig	tablei	aptr,ifn,1
 aenv	linseg	1,1/ifrq,1,0.001,0
	xout	asig*iamp*aenv
endop

opcode	scale_i,i,iii					; UDO for an i-rate version of the 'scale' opcode
 ival,imax,imin	xin
 ival	=	(ival * (imax-imin)) + imin
	xout	ival
endop


instr	1	; Always on
 ; Attributes change over time. I.e. game gets harder.
 gkSizeMin	linseg	60	,30,	60	,180,	30		; Minimum possible size for a bubble
 gkSizeMax	linseg	250	,30,	250	,180,	150		; Maximum possible size for a bubble
 gkMinTime	linseg	9	,30,	9	,180,	3		; Minimum possible time it might take a bubble to rise to the top of the panel
 gkMaxTime	linseg	16	,30,	16	,180,	4		; Maximum possible time it might take a bubble to rise to the top of the panel

 gkSizeMin	init	60
 gkSizeMax	init	250
 gkMinTime	init	9
 gkMaxTime	init	16

 gkMOUSE_X		chnget	"MOUSE_X"		; Read in mouse X position (in pixels across the panel)
 gkMOUSE_Y		chnget	"MOUSE_Y"		; Read in mouse Y position (in pixels across the panel)
 gkMOUSE_DOWN_LEFT	chnget	"MOUSE_DOWN_LEFT"	; Read in mouse left click status

 gkRefreshTrig	metro	ksmps/2				; Rate of GUI refresh
 
 icount	=	1
 LOOP:
  event_i	"i",icount+1,20*(icount-1),rnd(i(gkMaxTime)-i(gkMinTime))+i(gkMinTime)		; Start balloons
 loop_le	icount,1,giNBalloons,LOOP
 
 gkbreeze	rspline	-0.02,0.02,0.2,0.4	; A bit of breeze pushing all bubbles off course simultaneously.
endin

#define	BUBBLE(INSTR'N)
#
instr	$INSTR
 isize_norm	=	rnd(1)^2				; Normalised size for this bubble (i.e. range 0 - 1).
 isize_x	scale_i	isize_norm,i(gkSizeMax),i(gkSizeMin)	; Actual size (in pixels).
 isize_y	=	isize_x					; Vertical size.
 ix		random	gipanel_width*0.1,gipanel_width*0.9	; Starting horizontal position for this bubble.
 ky		line	625,p3,-isize_y-5			; Vertical position for this bubble.
 
 if trigger(ky,-isize_y,1)==1 then		; If bubble reaches the top...
  event	"i",101,0,0				; increment and print to 'missed' counter
 endif 
 
 giColourIndex	wrap	giColourIndex + 1 + int(rnd(4)), 0, 11
 iR		table	giColourIndex,giR			; Colours randomised each time bubble is relaunched.
 iG		table	giColourIndex,giG
 iB		table	giColourIndex,giB
 iAlpha		random	150,225
 kWobFreq	randomi	2,6,0.5,1				; Size wobble
 ksize_x	oscil	0.02,kWobFreq,giWobbleShape,0
 ksize_x	=	(1 + ksize_x) * isize_x
 ksize_y	oscil	0.02,kWobFreq,giWobbleShape,0.5
 ksize_y	=	(1 + ksize_y) * isize_y
 
 krel		release				; Sense note ending (either by bursting or by exiting the panel).
 if krel==1 then
  event	"i",100,0,0.01,p1			; Call instrument that will restart this instrument (after some delay).
 endif

 
 kx$N		init	ix
 iSizeRat$N	=	isize_x / (i(gkSizeMax)-i(gkSizeMin))							; Size ratio (0 = smallest possible, 1 = largest possible)
 kx$N		limit	kx$N + (gkbreeze*(1+(iSizeRat$N*2))), -isize_x*1.1, gipanel_width + (isize_x*0.1)	; Blown by the breeze. Limit the bubbles from leaving the panel completely. Larger bubbles are affected more than small ones.
 
 if gkRefreshTrig==1 then											; If a trigger has been generated...
  Sbubble	sprintfk "bubble_ident%d",$N
  Smessage sprintfk "bounds(%d,%d,%d,%d),colour(%d,%d,%d,%d), outlinethickness(0)", kx$N, ky, ksize_x, ksize_y,iR,iG,iB,int(iAlpha)	; Create a string with updated attributes that will be sent to the widget.
  chnset Smessage, Sbubble												; Send updated attributes to the bubble widget.

  Sspecular	sprintfk "specular_ident%d",$N
  Smessage sprintfk "bounds(%d,%d,%d,%d),colour(255,255,255,%d)", kx$N+(ksize_x*0.6), ky+(ksize_y*0.22), ksize_x*0.2, ksize_y*0.2,40	; Create a string with updated attributes that will be sent to the widget.
  chnset Smessage, Sspecular														; Send updated attributes to the widget.

 endif
 
 ktrig	trigger	gkMOUSE_DOWN_LEFT,0.5,0
 if ktrig==1 then

  kx_centre	=	kx$N + (isize_x*0.5)		; x centre of bubble
  ky_centre	=	ky + (isize_y*0.5)  		; y centre of bubble
  kx_dist	=	abs(gkMOUSE_X - kx_centre)	; x distance from centre of this bubble of mouse click
  ky_dist	=	abs(gkMOUSE_Y - ky_centre)	; y distance from centre of this bubble of mouse click
  kdist		=	(kx_dist^2 + ky_dist^2) ^ 0.5	; apply pythagoras to discern distance of mouse click from the centre of this bubble
  
  if kdist<=(isize_x*0.5) then	; if distance of mouse click is less than or equal to radius of the bubble...
   event	"i",200,0,0.4,(gkMOUSE_X-kx$N)/isize_x, 1-(ky/gipanel_height), isize_norm, kx$N/gipanel_width	; Create a 'burst' sound and send current mouse x and y locations and size (normalised)
   chnset "outlinethickness(1), colour(0,0,0,0),outlinecolour(240,240,240)", Sbubble						; Send updated attributes to the widget, i.e. 'burst' bubble.
    chnset "bounds(0,0,0,0)", Sspecular										; Send updated attributes to the widget, i.e.render specular highligh invisiblee.
   ;chnset "bounds(0,0,0,0)", Sbubble										; Send updated attributes to the widget, i.e. 'burst' bubble.
   turnoff
  endif
 endif 
endin
#

;Expand macro for the number of bubbles required
;        INSTR COUNTER
$BUBBLE(2'1)
$BUBBLE(3'2)
$BUBBLE(4'3)
$BUBBLE(5'4)
$BUBBLE(6'5)
$BUBBLE(7'6)
$BUBBLE(8'7)
$BUBBLE(9'8)
$BUBBLE(10'9)
$BUBBLE(11'10)


instr	100	; Trigger the start of a new bubble
  p3	=	0.1
  event_i "i",p4,p3,rnd(i(gkMaxTime)-i(gkMinTime))+i(gkMinTime)
endin

instr	101	; Missed bubble
 ; Update score
 giMissedScore	+=	1
 S1	sprintf	"text(%d)",giMissedScore
 chnset	S1,"missedID"
endin

instr	200	; Burst sound
 /* POLYPHONY CONTROL */
 gkactive init i(gkactive) + 1	;INCREMENT NOTE COUNTER
 if gkactive>giPolyLimit then		;IF POLYPHONY IS EXCEEDED (THROUGH THE ADDITION OF NEW NOTE)
  turnoff				;REMOVE THIS NOTE
 endif
 krel release				;IF NOTE HELD = 0, IF NOTE RELEASED = 1
 ktrig trigger krel,0.5,0		;WHEN RELEASE FLAG CROSSES 0.5 UPWARDS, I.E. NOTE HAS BEEN RELEASED...	
 if ktrig==1 then		
  gkactive = gkactive - 1		;...DECREMENT ACTIVE NOTES COUNTER
 endif

 ; Update score
 giBurstScore	+=	1
 S1	sprintf	"text(%d)",giBurstScore
 chnset	S1,"burstID"


 iX_Burst_Loc	=	p4	; Where within the width of the bubble it was burst. Normalised 0 - 1. (not currently used for anything).
 iY		=	p5	; Where within the height of the panel the bubble was burst.  Normalised 0 - 1.
 iSize		=	p6	; Bubble size (normalised 0 - 1).
 iX		=	p7	; Location across the panel this bubble was travelling in (normalised 0 - 1).
 
 icps	=	cpsmidinn(int(iY*72)+12)

 ; Impulse signal
 iAmpVel	=	(((iSize)*0.5)+0.5)^3
 ifrq	limit	icps,200,600							; Freq. of impulse
 aImpls	Oscil1a	iAmpVel*2,ifrq,giImp						; Single cycle half sine impulse (UDO)
 aImpls	buthp	aImpls,300							; Remove some low freq. energy

 ; Waveguide impulse processer
 aWg1	wguide1	aImpls,icps, icps*4, 0.999995					; Pizz note
 aWg2	wguide1	aImpls,icps*cent(rnd(50)), limit(icps*4,20,3000), 0.999995	; Pizz note unison detuned
 aWg3	wguide1	aImpls,icps*2, limit(icps*8,20,3000), 0.999995			; Pizz note up an octave
 aWg4	wguide1	aImpls,icps*2*cent(rnd(50)), limit(icps*8,20,3000), 0.999995	; Pizz note up an octave detuned
 aWg2	delay	aWg2,rnd(0.02)+0.0001						; 2nd note delayed
 aWg3	delay	aWg3,rnd(0.05)+0.0001						; 3rd note delayed
 aWg4	delay	aWg4,rnd(0.05)+0.0001						; 4th note delayed
 aMix	sum	aWg1, aWg2, aWg3, aWg4						; Mix all 4 notes
 aEnv	linsegr	1,p3,0,0.05,0
 aMix	=	aMix*aEnv
 aL,aR	pan2	aMix,iX								; Create panned stereo signal, location based on x-location of balloon
	outs	aL,aR
	
 gaSendL	=	gaSendL + (aL*0.3)	; Send some to the reverb instrument
 gaSendR	=	gaSendR + (aR*0.3)
endin





instr	1000	; Reverb
 aL,aR	reverbsc	gaSendL,gaSendR,0.9,5000
 	outs		aL,aR
 	clear		gaSendL,gaSendR
endin





instr	2000	; Print initial text instructions then fading away.
 kAlpha	transeg	0,0.75,4,255, p3-1.5,0,255, 0.75,-4,-1 ; Colour alpha decreases as event progresses, i.e. transparency increases

 ktrig	metro	ksmps*0.5					; Create a metronome which will define the rate of graphical update of the text
 
 if ktrig==1 then						; If a trigger has been generated...
   Smess1 sprintfk "fontcolour(0,0,50,%d)",kAlpha		; Create a string with updated attributes that will be sent to the instructions widget.
   chnset Smess1, "instructions"														; Send updated attributes to the widget.
 endif

 event_i	"i",1,p3-2,3600					; Start bubbles once instructions have vanished.
endin

</CsInstruments>

<CsScore>
i 1000 0 [3600*24*7]	; Reverb
i 2000 0 3		; Instructions fade up then down (currently not working)
</CsScore>

</CsoundSynthesizer>
; Electricity.csd
; Written by Iain McCurdy, 2015

; click and drag to generate sparks

; This example makes use of Cabbage's ability to rotate widgets and to make them visible and invisible
; to create the sparking effect.
; It also demonstrates how rate-of-change of mouse position (position delta) is used as a control input (spark density).
; The tonal variation of the sparks is implemented using 2 comb filters,
;   the loop times of which are linked to the mouse x and y positions.

<Cabbage>
form size(1000,540), text("Electricity"), guirefresh(32), colour(0,0,0), pluginid("Elec")
image bound(0,0,0,0), shape("sharp"), visible(0), widgetarray("spark",10)	; widget array (10 image widgets with a single line of code)
label bounds(0,530,100,10), text("Iain McCurdy |2015|")
label bounds(  0,230,1000,70), text("Click and Drag..."), fontcolour(255,255,255), identchannel("instructions")
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n
</CsOptions>

<CsInstruments>

sr = 44100
ksmps = 32
nchnls = 2
0dbfs = 1
seed 0

giPanelWidth	=	1000	; panel width in pixel (declared here to be used later in the code)
giPanelHeight	=	540 	; panel height in pixel (declared here to be used later in the code)

; i-rate version of scale opcode
opcode	scale_i,i,iii
 ival,imax,imin	xin
 ival	=	(ival * (imax-imin)) + imin
	xout	ival
endop

opcode TriggerToGatek,k,kki
 ktrig,kdur,imax xin
 kdlytrig  vdelayk	ktrig,kdur,imax
 kgate	   samphold	ktrig,ktrig + kdlytrig
           xout         kgate
endop

instr 1
 gkMOUSE_X		chnget	"MOUSE_X"		; read in mouse x position in pixels
 gkMOUSE_Y		chnget	"MOUSE_Y"       	; read in mouse y position in pixels
 kx_ratio	=	gkMOUSE_X/giPanelWidth		; mouse x position as a ratio of the entire panel (0-1)
 ky_ratio	=	gkMOUSE_Y/giPanelHeight		; mouse y position as a ratio of the entire panel (0-1)
 kMOUSE_DOWN_LEFT	chnget	"MOUSE_DOWN_LEFT"	; mouse left click status (0 or 1)
 if trigger(kMOUSE_DOWN_LEFT,0.5,0)==1 then		; if mouse button is pressed...
  koldx	random	gkMOUSE_X-10,gkMOUSE_X+10		; reset 'previous' x position value
  koldy	random	gkMOUSE_Y-10,gkMOUSE_Y+10		; reset 'previous' y position value
 endif
 if kMOUSE_DOWN_LEFT==1 then				; if mouse left button is held...
  koldx,koldy	init	0				; previous mouse positions initialised
  kdeltax	=	abs(gkMOUSE_X-koldx)		; mouse x position change (in pixels)
  kdeltay	=	abs(gkMOUSE_Y-koldy)		; mouse y position change (in pixels)
  kdelta	=	kdeltax + kdeltay		; sum of mouse position changes
  koldx		=	gkMOUSE_X			; set 'previous' mouse positions for next iteration
  koldy		=	gkMOUSE_Y
  kdens		init	300
  ktrig	metro	kdens * kdelta				; generate a trigger
  if ktrig==1 then
   kdens	=	exprand:k(300) + 50
  endif
  schedkwhen	ktrig,0,0,2,0,0.01,kx_ratio,ky_ratio	; spark sound
  schedkwhen	ktrig,0,0,11,        0,0,1,kdelta	; visual sparks...
  schedkwhen	ktrig,0,0,11,rnd(0.01)*3,0,2,kdelta
  schedkwhen	ktrig,0,0,11,rnd(0.02)*3,0,3,kdelta
  if kdelta<1 kgoto SKIP
  schedkwhen	ktrig,0,0,11,rnd(0.03)*3,0,4,kdelta
  schedkwhen	ktrig,0,0,11,rnd(0.04)*3,0,5,kdelta
  if kdelta<5 kgoto SKIP
  schedkwhen	ktrig,0,0,11,rnd(0.05)*3,0,6,kdelta
  schedkwhen	ktrig,0,0,11,rnd(0.06)*3,0,7,kdelta
  if kdelta<10 kgoto SKIP
  schedkwhen	ktrig,0,0,11,rnd(0.07)*3,0,8,kdelta
  schedkwhen	ktrig,0,0,11,rnd(0.08)*3,0,9,kdelta
  schedkwhen	ktrig,0,0,11,rnd(0.09)*3,0,10,kdelta
  SKIP:
 endif

 ; 50 Hz mains hum
 aamp	interp	(1-(ktrig*0.5)) * (0.005 + (kMOUSE_DOWN_LEFT*0.03))	; amplitude derives from mouse down position and inversely to trigger impulses
 kpw	rspline	0.89-(ky_ratio*0.88),0.99-(ky_ratio*0.98),0.2,0.4	; slight pulse width shift
 kjit	rspline	-10,10,1,5					; frequency jitter
 asq	vco2	1, 50*cent(kjit), 4, kpw, 0, 0.125		; square wave
 asq	*=	aamp						; scale amplitude
 kpan	rspline	kx_ratio*0.5,0.5+(kx_ratio*0.5),0.5,5		; panning function
 aL1,aR1	pan2	asq,kpan				; create stereo output
 ; a second hum signal
 kpw	rspline	0.89-(ky_ratio*0.88),0.99-(ky_ratio*0.98),0.2,0.4	; slight pulse width shift
 kjit	rspline	-10,10,1,5					; frequency jitter
 asq	vco2	1, 50*cent(kjit), 4, kpw, 0, 0.125		; square wave
 asq	*=	aamp                                        	; scale amplitude
 kpan	rspline	kx_ratio*0.5,0.5+(kx_ratio*0.5),0.5,5      	; panning function
 aL2,aR2	pan2	asq,kpan                    		; create stereo output

 	outs	aL1+aL2, aR1+aR2				; mix hum signals and send to output

endin

gasendL,gasendR	init	0					; reverb send variables

instr	2
 iamp	exprand	1						; random amplitude
 asig	mpulse	iamp,0						; a click impulse
 asig	buthp	asig,500					; highpass filter it
 icfoct	random	9,14						; random freq (oct format)
 asig	wguide1	asig,cpsoct(icfoct),sr/4,0.5			; send click through a waveguide filter
 iDT1	scale_i	p4,0.00001,0.005				; delay time for a comb filter derived from mouse x position
 a1	comb	asig,0.01,iDT1					; comb filter (1)
 iDT2	scale_i	p5,0.00001,0.005				; delay time for a comb filter derived from mouse y position
 a2	comb	asig,0.005,iDT2					; comb filter (2)
 asig	sum	a1,a2						; mix the two comb filter outputs
 aL,aR	pan2	asig,rnd(1)					; random pan click
 	outs	aL,aR						; send stereo audio to outputs
 gasendL	+=	aL/(2+rnd(3))				; send some audio to the reverb send channels
 gasendR	+=	aR/(2+rnd(3))
endin

instr	11 ; show spark and move and set colour
 Sident	sprintf	"spark_ident%d",p4			; define indent channel string
 irad	random	0, 2 * $M_PI				; random rotation value (range: 0 to 2*pi)
 ilen	unirand	p5/30					; random length (0-1)
 irnd	random	4,20
 ilen	=	(ilen * 250) + irnd			; random length (in pixels)
 icol	linrand	100					; colour intensity value
 ialpha	random	100,255
 ; create string with changes
 Smsg	sprintf	"bounds(%d,%d,%d,%d), rotate(%f,0,0), colour(255,255,%d,%d), visible(1)",i(gkMOUSE_X),i(gkMOUSE_Y),ilen,rnd(2)+1,irad,255-icol,ialpha
 	chnset	Smsg,Sident				; send string to widget
 event_i "i",12,0.04,0,p4				; call instrument to 'hide' spark after a short delay
endin

instr	12 ; hide spark
 Sident	sprintf	"spark_ident%d",p4			; define indent channel string
 chnset	"visible(0)",Sident				; send string to widget
endin

instr	99	; reverb
 aL,aR	reverbsc	gasendL,gasendR,0.7,7000
 	outs		aL,aR
 	clear		gasendL,gasendR
endin

instr	1000	; flash instructions
 ktrig	init	1			; trigger intially '1' in order to create the first random 'rate' value
 krate	trandom	ktrig,1,10		; metronome rate values: a new random value upon each metronome beat
 ktrig	metro	krate			; create a metronome
 kdur	trandom	ktrig,0.03,0.2		; a new 'flash' duration upon each new beat
 kvis	TriggerToGatek	ktrig, kdur,0.2	; extend the trigger to a pulse of 'kdur' duration (using a UDO - see instr 0 above)
 kcol	randomi	0,255,2,1		; colour opacity changing continuously and randomly
 if changed(kvis)==1 then		; if flash changing from on to off or vice versa
  Smsg	sprintfk	"visible(%d), fontcolour(255,255,255,%d)",kvis,kcol	; create string
  	chnset	Smsg,"instructions"	; send string to widget
 endif

 ; 50 Hz mains hum
 khum	TriggerToGatek	ktrig, kdur, 0.2
 aamp	interp	khum*0.4					; amplitude derives from mouse down position and inversely to trigger impulses
 kpw	rspline	0.01,0.04,2,6					; slight pulse width shift
 kjit	rspline	-10,10,.1,.5					; frequency jitter
 asq	vco2	1, 50*cent(kjit), 4, kpw, 0			; square wave
 asq	*=	aamp						; scale amplitude
 asq	atone	asq,2000
 kpan	rspline	0.3,0.7,1,5					; panning function
 aL1,aR1	pan2	asq,kpan				; create stereo output
 ; a second hum signal
 kpw	rspline	0.01,0.1,0.2,0.6				; slight pulse width shift
 kjit	rspline	-10,10,.1,.5					; frequency jitter
 asq	vco2	1, 50*cent(kjit), 4, kpw, 0			; square wave
 asq	*=	aamp                                        	; scale amplitude
 asq	atone	asq,2000
 kpan	rspline	0.3,0.7,1,5					; panning function
 aL2,aR2	pan2	asq,kpan                    		; create stereo output

 	outs	aL1+aL2, aR1+aR2				; mix hum signals and send to output

 ; turn off this instrument and hide instructions when the mouse is first left-clicked.
 kMOUSE_DOWN_LEFT	chnget	"MOUSE_DOWN_LEFT"		; sense mouse left click
 if kMOUSE_DOWN_LEFT==1 then					; if left clicked...
  chnset	"visible(0)","instructions"			; ...hide instructions
  event	"i",1,0,3600						; start the 'sparks and hum' instrument
  turnoff							; turn off this instrument
 endif
endin

</CsInstruments>

<CsScore>
;i 99 0 [3600*24*7]	; reverb
i 1000 0 [3600*24*7]	; instructions
</CsScore>

</CsoundSynthesizer>
; PebblesInAPond .csd
; Written by Iain McCurdy, 2014

; This instrument is a demonstration of Cabbage's ability to modify its widgets' appearance in realtime from within the Csound orchestra. 
; Five circles are drawn at start-up but are initially invisible.
; Upon clicking within the panel this will trigger a circle to become visble and to expand from the point where clicking occured until it again becomes invisible.
; In synchrony with this, a 'plip' sound is produced to continue to imitation of dropping pebbles into a pond.
; Various aspects of the 'plip' sound are dependent upon where within the panel the click that triggered it occured.
; Colours for the circles are simply chosen randomly.
; The reason 5 circles created, and triggering cycles through these, is to allow circles to overlap. It is assumed that the user won't trigger more that five at once.

<Cabbage>
form caption("Pebbles in a Pond"), scrollbars(0), size(900, 520), pluginid("Pond"),colour(0,10,20), guirefresh(64) style("legacy")
image bounds(0,0,0,0), colour(0,0,0), widgetarray("circle",70), shape("ellipse"), outlinecolour("white"), line(0)
label    bounds(  0, 0,0, 0), text("Drop a pebble into the pond..."), align(centre), fontcolour(0,0,0,0), identchannel("instructions")
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n
</CsOptions>

<CsInstruments>

sr 		=  	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE (higher values will cause quantisation noise in the mode filter)
nchnls 		= 	2	;NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1

gisine	ftgen	0,0,131072,10,1
giPanelSizeX	=	900		; Should correspond to the size of the Cabbage panel
giPanelSizeY	=	520		; Should correspond to the size of the Cabbage panel
giCircleNdx	init	1		; Starting value for circle index counter. This mechanism allows multiple circles to overlap.
gaSendL,gaSendR	init	0		; Global audio send variables used to send audio to the reverb effect.
giSizeInit	=	5		; Initial circle diameter (in pixels)
giSizeFinal	=	1000		; Final circle diameter (in pixels)
giCurve		=	2


opcode	scale_i,i,iii				; UDO for an i-rate version of the 'scale' opcode
 ival,imax,imin	xin
 ival	=	(ival * (imax-imin)) + imin
	xout	ival
endop

instr	1	; Sense mouse activity and trigger note events for instr 2
 kMOUSE_X		chnget	"MOUSE_X"		; Read in mouse X position (in pixels across the panel)
 kMOUSE_Y		chnget	"MOUSE_Y"		; Read in mouse Y position (in pixels across the panel)
 kMOUSE_DOWN_LEFT	chnget	"MOUSE_DOWN_LEFT"	; Read in mouse left click status
 
 kOffTrig	trigger	kMOUSE_DOWN_LEFT,0.5,0		; Generate a trigger whenever mouse button is clicked (on the way down)
 schedkwhen	kOffTrig,0,0,2,0,4,kMOUSE_X,kMOUSE_Y	; Trigger a note event when mouse is clicked. Send mouse position X/Y as p4 and p5.
endin



instr	2	; Draw an expanding circle and create a 'plip' sound 
 ; Named variables for X and Y position (in pixels) derived from p4 and p5
 iHorPosInit	init	p4
 iVertPosInit	init	p5

 ; Normalised x/y position (range 0 - 1)
 iXNorm	limit	iHorPosInit/giPanelSizeX, 0.001,1
 iYNorm	limit	iVertPosInit/giPanelSizeY, 0.001,1
 
 ; Draw an expanding and fading circle 
 kSize		transeg	giSizeInit,p3-0.1,giCurve,giSizeFinal, 0.1, giCurve, 1, 1,giCurve,1		; Circle diameter increasing as time progress
 kHorPos	transeg	iHorPosInit-(giSizeInit/2),p3,giCurve,iHorPosInit-(giSizeFinal/2)	; Horizontal position needs to compensate for the expanding circle so that the circle center remains fixed.
 kVertPos	transeg	iVertPosInit-(giSizeInit/2),p3,giCurve,iVertPosInit-(giSizeFinal/2)	; Vertical position needs to compensate for the expanding circle so that the circle center remains fixed.
 
 iRed		random	100,255				; Colours are set randomly once per event
 iGreen		random	100,255				; Colours are set randomly once per event
 iBlue		random	100,255				; Colours are set randomly once per event
 kAlpha		transeg	255,0.4,0,100 ,p3-0.5,-6, 0,1,0,0	; Colour alpha decreases as event progresses, i.e. transparency increases
 
 gkRefreshTrig	metro	ksmps				; Create a metronome which will define the rate of graphical update of the expanding circles
 
 if gkRefreshTrig==1 then															; If a trigger has been generated...  
  SCircle	sprintf		"circle_ident%d",giCircleNdx
   Smessage 	sprintfk 	"bounds(%d,%d,%d,%d),colour(%d,%d,%d,%d)", kHorPos, kVertPos, kSize, kSize, iRed, iGreen, iBlue, kAlpha	; Create a string with updated attributes that will be sent to the circle widget.
   chnset	Smessage,SCircle                                         
 endif 

 ; Ripples echoes (comment out event_i's to alleviate performance issues)
 idel	=	0.35	; time gap between ripple echoes
 event_i "i",3,idel,   4-0.3  , p4, p5, iRed, iGreen, iBlue, giCircleNdx+10, idel  , 55
 event_i "i",3,idel*2, 4-0.3*2, p4, p5, iRed, iGreen, iBlue, giCircleNdx+20, idel*2, 44
 event_i "i",3,idel*3, 4-0.3*3, p4, p5, iRed, iGreen, iBlue, giCircleNdx+30, idel*3, 33
 event_i "i",3,idel*4, 4-0.3*4, p4, p5, iRed, iGreen, iBlue, giCircleNdx+40, idel*4, 22
 event_i "i",3,idel*5, 4-0.3*5, p4, p5, iRed, iGreen, iBlue, giCircleNdx+50, idel*5, 11
 event_i "i",3,idel*6, 4-0.3*6, p4, p5, iRed, iGreen, iBlue, giCircleNdx+60, idel*6,  1
 
 giCircleNdx	wrap	giCircleNdx+1,1,11	; Increment circle index counter for next circle. Wrap around whenever last circle in the cycle is reached. This facilitates multiple circles to be drawn.

 ; Produce a sound
 idur		scale_i	iYNorm,2,0.2		; 'Plip' duration varies according to mouse X position.
 iStartOct	scale_i	(iXNorm+(1-iYNorm))*0.5,11,5.5
 iStartCPS	=	cpsoct(iStartOct)
 iEndOct	scale_i	1-iYNorm,13.8,9.6
 iEndCPS	=	cpsoct(iEndOct)
 iCPSCurve	=	5			; Shape of CPS envelope. Higher values will delay its curve upwards.
 kCPS	transeg	iStartCPS,idur,iCPSCurve,iEndCPS,1,0,iEndCPS	; CPS curve used by the mode filter
 aEnv	transeg	1,idur,-6,0,1,0,0		; Amplitude envelope. Used by both the impulse noise and the filtered output. 
 aNse	pinkish	aEnv*0.05			; Some pink noise.
 aNse	buthp	aNse,250			; Highpass filter the noise to remove some of the rumble.
 aImp	mpulse	1,0				; A Click impulse. Used to augment the attack of the sound.
 aNse	=	aNse+aImp			; Mix the pink noise and the click.
 kCPS	limit	kCPS, 20, sr/$M_PI
 aDrop	mode	aNse,kCPS,kCPS/3			; Mode filter the noise and click mixture. Note that Q (p3) will increase as CPS increases - higher frequencies will ring for longer.
 aDrop	=	aDrop * aEnv			; Apply envelope to mode filtered signal.
 aL,aR	pan2	aDrop,iXNorm			; Create stereo panned version of 'plip'
 aL	delay	aL,iXNorm  *0.01		; Some Haas effect delay 
 aR	delay	aR,(1-iXNorm)*0.01		; Some Haas effect delay
 	outs	aL,aR				; Send dry 'plip' signal to speakers.
 gaSendL	=	gaSendL + aL*0.15	; Send some to the reverb instrument
 gaSendR	=	gaSendR + aR*0.15	; "    "    "  "   "      "
endin

instr	3 ; Echo ripple
 ; Named variables for X and Y position (in pixels) derived from p4 and p5
 iHorPosInit	init	p4
 iVertPosInit	init	p5
 iDel		init	p10
 
 ; Normalised x/y position (range 0 - 1)
 iXNorm	=	iHorPosInit/giPanelSizeX
 iYNorm	=	iVertPosInit/giPanelSizeY
 
 ; Draw an expanding and fading circle 
 kSize		transeg	giSizeInit,p3-0.1,giCurve,giSizeFinal, 0.1, giCurve, 1, 1,giCurve,1		; Circle diameter increasing as time progress
 kHorPos	transeg	iHorPosInit-(giSizeInit/2),p3,giCurve,iHorPosInit-(giSizeFinal/2)		; Horizontal position needs to compensate for the expanding circle so that the circle center remains fixed.
 kVertPos	transeg	iVertPosInit-(giSizeInit/2),p3,giCurve,iVertPosInit-(giSizeFinal/2)	; Vertical position needs to compensate for the expanding circle so that the circle center remains fixed.
 
 iRed		=	p6
 iGreen		=	p7
 iBlue		=	p8
 iAlpha		=	p11
 kAlpha	transeg	iAlpha,0.4,0,iAlpha*(100/255) ,p3-0.5,-3, 0,1,0,0	; Colour alpha decreases as event progresses, i.e. transparency increases
 
 iCircleNdx	=	p9

 if gkRefreshTrig==1 then															; If a trigger has been generated...  
  SCircle	sprintf		"circle_ident%d",iCircleNdx+1
   Smessage 	sprintfk 	"bounds(%d,%d,%d,%d),colour(%d,%d,%d,%d)", kHorPos, kVertPos, kSize, kSize, iRed, iGreen, iBlue, kAlpha	; Create a string with updated attributes that will be sent to the circle widget.
   chnset	Smessage,SCircle                                         
 endif 


endin


instr	99	; Delay-Reverb
 aL		delayr		0.7
 aR		delayr		0.973
		delayw		gaSendL*0.8 + aL*0.35 + aR*0.35
		delayw		gaSendR*0.8 + aR*0.35 + aL*0.35
 aL,aR	reverbsc	gaSendL+aL,gaSendR+aR,0.8,3000
 		outs		aL, aR			; Send delay signal to outputs
 		clear		gaSendL, gaSendR	; Clear global audio send variables
endin


instr	1000	; Print initial text instructions, expanding and disappearing.
 iSizeInit	=	14			; Initial size (in pixels)
 iSizeFinal	=	60			; Final size (in pixels)
 kSize		linseg	iSizeInit,p3-0.001,iSizeFinal,0.001,0	; Text Size increasing as time progresses
  
 kAlpha		transeg	0,0.1,4,255,p3-0.1,-4,0,1,0,0		; Colour alpha decreases as event progresses, i.e. transparency increases
 
 ktrig	metro	ksmps				; Create a metronome which will define the rate of graphical update of the text
 
 if ktrig==1 then				; If a trigger has been generated...
  reinit UPDATE
  UPDATE:
  Smessage sprintfk "bounds(-200, 245,%d, %d),fontcolour(255,255,255,%d)", giPanelSizeX+400, i(kSize), i(kAlpha)	; Create a string with updated attributes that will be sent to the instructions widget.
  rireturn
  chnset Smessage, "instructions"														; Send updated attributes to the widget.
 endif

endin
	
</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]	; Instrument to sense mouse activity
i 99 0 [3600*24*7]	; Reverb instrument
i 1000 0 5		; Instructions
</CsScore>


</CsoundSynthesizer>



























; PingClang.csd
; Written by Iain McCurdy, 2014
;
; A musical toy.
;
; Blocks can be moved using left click and drag, and can be resized using right click and drag.
;
; The nature of the sound produced by the blocks is altered by their shape.
; Thin blocks will produce a more harmonic and sustaining sound. Thick blocks will produce inharmonic and less sustained sounds.
;
; Once balls come to rest on the floor they are rethrown from the top.
; New balls can also be launched using the 'New Ball' button.
;
; CONTROLS
; --------
; Damping		-	damping of energy that occurs when the ball hits a surface. e.g. low values = rubber ball, high values = cannon ball
; Friction	-	damping of horizonatal movement that occurs when the ball strikes the floor. e.g. low values = hard surface, high values = thick carpet
; Speed		-	speed of the game
; Size		-	size of the ball. Also has a bearing on the sound produced when the ball rebounds off the walls or the floor.
; Angle		-	range of possible angles (in both directions) in which the ball can be thrown. i.e. when zero, all throws will be straight down.
; Resonance	-	resonating time of the blocks when struck. This will also be affected by the shape of the blocks. Thinner blocks resonate for a longer time.
; Blocks		-	number of blocks used in the game
; Notch		-	turns on a notch filter operating at the fundemental frequency of the 'clang' sounds

<Cabbage>
form caption("Ping Clang") size(610,500), guirefresh(32), pluginid("PinC") style("legacy")
image              bounds(0,  0,610,500), shape("sharp"), colour("black") ;background
image              bounds(0,465,610,35), shape("sharp"), colour(100,100,100) 		; floor
image bounds( 0, 0, 0,0), shape("sharp"), colour(255,255, 50), identchannel("block1")	; blocks: yellow
image bounds( 0, 0, 0,0), shape("sharp"), colour( 75,255, 75), identchannel("block2")	; green
image bounds( 0, 0, 0,0), shape("sharp"), colour( 65, 65,255), identchannel("block3")	; blue
image bounds( 0, 0, 0,0), shape("sharp"), colour(255, 15, 15), identchannel("block4")	; red
image bounds( 0, 0, 0,0), shape("sharp"), colour(255,100, 50), identchannel("block5")	; orange
image bounds( 0, 0, 0,0), shape("sharp"), colour(155, 50,255), identchannel("block6")	; purple
image bounds( 0, 0, 0,0), shape("sharp"), colour(  0,230,255), identchannel("block7")	; turquoise
image bounds( 0, 0, 0,0), shape("sharp"), colour(255,  0,255), identchannel("block8")	; pink
image bounds( 0, 0, 0,0), shape("sharp"), colour(155,155,155), identchannel("block9")	; grey

image bounds(0,0,0,0), shape("ellipse"), colour(255,230,220), identchannel("ball")	; ball

nslider  bounds( 20,465,60,34), channel("damping"),    range(0.00, 0.999, 0.1,1,0.001),     textcolour(white),         text("Damping"),   colour(0,0,0)
nslider  bounds( 90,465,60,34), channel("friction"),   range(0.001, 0.999, 0.03,1,0.001),   textcolour(white),         text("Friction"),  colour(0,0,0)
nslider  bounds(160,465,50,34), channel("speed"),      range(0.01,  20, 1,1,0.01),          textcolour(white),         text("Speed"),     colour(0,0,0)
nslider  bounds(220,465,40,34), channel("size"),       range(2, 80, 15,1,1),                textcolour(white),         text("Size"),      colour(0,0,0)
nslider  bounds(270,465,50,34), channel("angle"),      range(0, 5, 3,1,0.001),              textcolour(white),         text("Angle"),     colour(0,0,0)
nslider  bounds(330,465,70,34), channel("resonance"),  range(0.1, 30, 2,1,0.1),             textcolour(white),         text("Resonance"), colour(0,0,0)
;nslider  bounds(410,415,40,34), channel("NBlocks"),    range(0, 7, 5,1,1),                 textcolour(white),         text("Blocks"),    colour(0,0,0)
button     bounds(460,473,60,21), text("Notch","Notch"), channel("fundemental"), value(0),    fontcolour:0( 50, 50, 50), fontcolour:1(white)
button     bounds(530,473,60,21), text("New Ball"), channel("NewBall"), value(0), latched(0), fontcolour:0(200,200,200), fontcolour:1(white)

label      bounds(410,466,45,14), text("Blocks"), align(centre), fontcolour(white)
button     bounds(410,483,15,14), text("<"), channel("NBlocksDn"), value(0), latched(0)
button     bounds(440,483,15,14), text(">"), channel("NBlocksUp"), value(0), latched(0)
label      bounds(425,483,15,14), text("5"), align(centre), colour(black), fontcolour(white), identchannel("NBlocksID")

label    bounds(  0, 0,  0, 0), text("Use left click and drag to move blocks."), align(centre), fontcolour(white), identchannel("instructions1")		; Instructions
label    bounds(  0, 0,  0, 0), text("Right click and drag to resize blocks."), align(centre), fontcolour(white), identchannel("instructions2")		; Instructions

label    bounds(  1,454,100, 10), text("Iain McCurdy 2014"), align(left), fontcolour(255,255,255,100)
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-n -dm0
</CsOptions>

<CsInstruments>

sr = 44100
ksmps = 16
nchnls = 2
0dbfs=1
seed	0

giNumBlocks		=	9
giPanelWidth	=	610
giPanelHeight	=	500
giFloorDepth	=	35
gisine	ftgen	0,0,131072,10,1
gal,gar	init	0
gkactive0,gkactive1,gkactive2,gkactive3,gkactive4,gkactive5,gkactive6,gkactive7,gkactive8,gkactive9	init	0	; used for polyphony control. Add further variables if additional blocks are needed. NB each block has its own polyphony control mechanism.
giGravAccel	=	2*ksmps						; Acceleration due to gravity
giStopThreshold	=	1.2						; Speed threshold below which the current ball will be removed and a new ball will be thrown. Values from 1 to 5 are appropriate. Higher values for ball to be thrown quicker.
giWallFloorAmp	=	0.2						; Amplitude of bounce sound effects off the walls and floor

instr	1	; Track mouse position and clicks and move objects as appropriate
 kMOUSE_X		chnget	"MOUSE_X"
 kMOUSE_Y		chnget	"MOUSE_Y"
 kMOUSE_DOWN_LEFT	chnget	"MOUSE_DOWN_LEFT"
 kMOUSE_DOWN_MIDDLE	chnget	"MOUSE_DOWN_MIDDLE"
 kMOUSE_DOWN_RIGHT	chnget	"MOUSE_DOWN_RIGHT"
 kprevX	init	i(kMOUSE_X)	; Mouse position from previous k-pass
 kprevY	init	i(kMOUSE_Y)

 gkNBlocks	init	5				; number of blocks counter
 kNBlocksDn	chnget	"NBlocksDn"			; read in widgets
 kNBlocksUp	chnget	"NBlocksUp"			;
 if trigger(kNBlocksDn,0.5,0)==1 then			; if 'down' button is triggered...
  gkNBlocks	limit	gkNBlocks-1,0,giNumBlocks			; increment counter up one step (within limits)
  Smess		sprintfk	"text(%d)",gkNBlocks	; create message to change value indicator (a text label)
  chnset	Smess,"NBlocksID"			; send message to widget
 elseif trigger(kNBlocksUp,0.5,0)==1 then		; do the same for  the 'up' counter button
  gkNBlocks	limit	gkNBlocks+1,0,giNumBlocks
  Smess		sprintfk	"text(%d)",gkNBlocks
  chnset	Smess,"NBlocksID"
 endif

 gkdamping	chnget	"damping"
 gkfriction	chnget	"friction"
 gkspeed	chnget	"speed"
 gksize		chnget	"size"
 gkangle	chnget	"angle"
 gkresonance	chnget	"resonance"
 ;gkNBlocks	chnget	"NBlocks"
 gkfundemental	chnget	"fundemental"
 gkNewBall	chnget	"NewBall"

 ktrig	metro	kr/(ksmps)
 if ktrig==1 then

 kMOUSE_DOWN_LEFT_trig	trigger	kMOUSE_DOWN_LEFT,0.5,0
 kMOUSE_DOWN_RIGHT_trig	trigger	kMOUSE_DOWN_RIGHT,0.5,0

 gkDeltaX	=	kMOUSE_X - kprevX	; Change in mouse x position
 gkDeltaY	=	kMOUSE_Y - kprevY	; Change in mouse y position

#define BLOCK(N)
 #
 kcount		=	$N
 gkSizeX$N	init	random(1,170)						; Initial x-size of object
 gkSizeY$N	init	random(1,170)						; Initial y=size of object
 gkLocX$N	init	random(0,giPanelWidth-i(gkSizeX$N))			; Initial x-location of object
 gkLocY$N	init	random(150,giPanelHeight-i(gkSizeY$N)-giFloorDepth)	; Initial y-location of object

 kMoveFlag$N	init	0

 kRelL	trigger	kMOUSE_DOWN_LEFT,0.5,1		; If either click button is released, exit click and drag mode.
 kRelR	trigger	kMOUSE_DOWN_RIGHT,0.5,1
 if kRelL==1||kRelR==1 then
  kMoveFlag$N	=	0			; When left or right click are released, exit click and drag mode
 endif

 if ((kMOUSE_DOWN_LEFT_trig==1||kMOUSE_DOWN_RIGHT_trig==1) && kMOUSE_X>=(gkLocX$N-1) && kMOUSE_X<=(gkLocX$N+gkSizeX$N+1) && kMOUSE_Y>=(gkLocY$N-1) && kMOUSE_Y<=(gkLocY$N+gkSizeY$N+1)) || kMoveFlag$N==1 then	; If we are in click and drag mode
  kMoveFlag$N	=	1	; Set click and drag flag to 'on'

  if changed(gkDeltaX,gkDeltaY)==1 then								; if a change in mouse position during click
   if kMOUSE_DOWN_LEFT==1 then									; CHANGE LOCATION
    gkLocX$N	limit	gkLocX$N + gkDeltaX, 0, giPanelWidth - gkSizeX$N			; Set new x location of object with limits
    gkLocY$N	limit	gkLocY$N + gkDeltaY, 0, giPanelHeight - gkSizeY$N - giFloorDepth	; Set new y location of object with limits
   elseif kMOUSE_DOWN_RIGHT==1 then								; CHANGE SIZE
    gkSizeX$N	limit	gkSizeX$N + gkDeltaX, 2,giPanelWidth-gkLocX$N				; Set new x size of object with limits
    gkSizeY$N	limit	gkSizeY$N + gkDeltaY, 2,giPanelHeight-gkLocY$N-giFloorDepth		; Set new x size of object with limits
   endif
   kSizeX$N	=	(kcount>gkNBlocks?0:gkSizeX$N)						; If this block is not needed set size to zero
   kSizeY$N	=	(kcount>gkNBlocks?0:gkSizeY$N)
   Smess	sprintfk	"bounds(%d,%d,%d,%d)",gkLocX$N,gkLocY$N,kSizeX$N,kSizeY$N	; String for new object bounds
   chnset	Smess,"block$N"   								; Send new string to object
  endif

 endif

 if changed(gkNBlocks)==1 then
  kSizeX$N	=	(kcount>gkNBlocks?0:gkSizeX$N)					; If this block is not needed set size to zero
  kSizeY$N	=	(kcount>gkNBlocks?0:gkSizeY$N)
  Smess	sprintfk	"bounds(%d,%d,%d,%d)",gkLocX$N,gkLocY$N,kSizeX$N,kSizeY$N	; String for new object bounds
  chnset	Smess, "block$N"   							; Send new string to object
 endif

 #
 $BLOCK(1)
 $BLOCK(2)
 $BLOCK(3)
 $BLOCK(4)
 $BLOCK(5)
 $BLOCK(6)
 $BLOCK(7)
 $BLOCK(8)
 $BLOCK(9)

 SKIP:

 kprevX	=	kMOUSE_X	; Set 'previous' mouse x and y for next k-pass
 kprevY	=	kMOUSE_Y
endif

endin


instr	2
 isize	=	i(gksize)	;15		; Size of ball
 icps_floor	init	500*(15/isize)		; Floor bounce noise frequency (also dependent upon ball size)
 icps_wall	init	300*(15/isize)		; Wall bounce noise frequency (also dependent upon ball size)
 iBlipDur	=	0.05*(isize/15)		; Duration of wall bounce noise
 Sid	=	"ball"				; Ball ident
 ky	init	-isize				; Initial y location of ball
 kx	init	random(isize,giPanelWidth-isize); Initial x location of ball
 kxIncr	init	random(-i(gkangle)*ksmps,i(gkangle)*ksmps)	; Initial x increment - left/right direction of throw
 kyIncr	init	0				; Initial y increment. Zero means ball is dropped

 irate	=	ksmps*2				; Rate of gui refresh and data checking
 ktrig	metro	irate

 if ktrig==1 then
  ky	limit	ky + (kyIncr*gkspeed), -isize, giPanelHeight-giFloorDepth-isize	; increment x and y locations
  kx 	limit	kx + (kxIncr*gkspeed), 0, giPanelWidth - isize

   if( (abs(kyIncr)+abs(kxIncr))<giStopThreshold && ky>=(giPanelHeight-giFloorDepth-isize-1)) || changed(gkNewBall)==1 then	; if ball has come to rest...
    event	"i",100,0,0	; launch a new ball
    turnoff
   endif

  if ky>=(giPanelHeight-giFloorDepth-isize) then	; hitting floor
   event	"i",20,0,iBlipDur,kyIncr,icps_floor,kx/giPanelWidth
   kyIncr	=	-kyIncr*(1-gkdamping)	; flip direction and absorb some energy in the bounce
   kxIncr	=	kxIncr*(1-gkfriction)	; absorb some horizontal energy in the bounce
  endif

  if kx>=(giPanelWidth-isize) || kx<=0 then	; flip x direction when hitting a wall
   kxIncr	=	-kxIncr*(1-gkdamping)
   event	"i",20,0,iBlipDur,kyIncr,icps_wall,kx/giPanelWidth
  endif



  #define CHECK_OBJECT_STRIKE(N)
  #
  kcount	=	$N
  if kcount>gkNBlocks kgoto SKIP
  if trigger(ky+isize,gkLocY$N,0)==1 && (kx+isize)>=gkLocX$N && kx<=(gkLocX$N+gkSizeX$N) then			; Striking upper edge
   kyIncr	=	(-kyIncr*(1-gkdamping)) - gkDeltaY
   kxIncr	=	kxIncr*(1-gkfriction)	; absorb some horizontal energy in the bounce
   event	"i",90+$N,0,gkresonance,kx,kxIncr,kyIncr
   ky		=	gkLocY$N-isize
  elseif trigger(kx,gkLocX$N+gkSizeX$N,1)==1 && (ky+isize)>=gkLocY$N && ky<=(gkLocY$N+gkSizeY$N) then		; Striking right hand edge
   kxIncr	=	(-kxIncr*(1-gkdamping)) - gkDeltaX
   event	"i",90+$N,0,gkresonance,kx,kxIncr,kyIncr
   kx		=	gkLocX$N+gkSizeX$N
  elseif trigger(kx+isize,gkLocX$N,0)==1 && (ky+isize)>=gkLocY$N && ky<=(gkLocY$N+gkSizeY$N) then		; Striking left hand edge
   kxIncr	=	(-kxIncr*(1-gkdamping)) - gkDeltaX
   event	"i",90+$N,0,gkresonance,kx,kxIncr,kyIncr
   kx		=	gkLocX$N-isize
  elseif trigger(ky,gkLocY$N+gkSizeY$N,1)==1 && (kx+isize)>=gkLocX$N && kx<=(gkLocX$N+gkSizeX$N) then		; Striking lower edge
   kyIncr	=	(-kyIncr*(1-gkdamping)) - gkDeltaY
   event	"i",90+$N,0,gkresonance,kx,kxIncr,kyIncr
   ky		=	gkLocY$N+gkSizeY$N
  endif
  #
  $CHECK_OBJECT_STRIKE(1)
  $CHECK_OBJECT_STRIKE(2)
  $CHECK_OBJECT_STRIKE(3)
  $CHECK_OBJECT_STRIKE(4)
  $CHECK_OBJECT_STRIKE(5)
  $CHECK_OBJECT_STRIKE(6)
  $CHECK_OBJECT_STRIKE(7)
  $CHECK_OBJECT_STRIKE(8)
  $CHECK_OBJECT_STRIKE(9)
  SKIP:				; Escape to here if finished checking for block collisions
  Smess	sprintfk	"bounds(%d,%d,%d,%d)",kx,ky,isize,isize
  chnset	Smess,Sid

  kyIncr	=	kyIncr + (giGravAccel/irate)
 endif

endin



instr	20	; wall ricochet sound effect
 /* POLYPHONY CONTROL */
 gkactive0 init i(gkactive0) + 1	;INCREMENT NOTE COUNTER
 if gkactive0>1 then			;IF POLYPHONY IS EXCEEDED (THROUGH THE ADDITION OF NEW NOTE)
  turnoff				;REMOVE THIS NOTE
 endif
 krel release				;IF NOTE HELD = 0, IF NOTE RELEASED = 1
 ktrig trigger krel,0.5,0		;WHEN RELEASE FLAG CROSSES 0.5 UPWARDS, I.E. NOTE HAS BEEN RELEASED...
 if ktrig==1 then
  gkactive0 = gkactive0 - 1		;...DECREMENT ACTIVE NOTES COUNTER
 endif
 aenv	expon	giWallFloorAmp,p3,giWallFloorAmp*0.001
 asig	poscil	aenv*((p4/50)^2)*gkspeed,p5
 al,ar	pan2	asig,p6
 	outs	al,ar
 	gal	+= al
 	gar	+= ar
endin



; Object ricochet sound effect
#define CLANG_INSTR(I'N)
#
instr	$I	; object bounce
 p3		=	p3 * ((1-(i(gkSizeY$N)/giPanelHeight))^4)	; duration of the sound scaled by the height of the object. Taller objects sustain for shorter time.

 /* POLYPHONY CONTROL */
 gkactive$N init i(gkactive$N) + 1	;INCREMENT NOTE COUNTER
 if gkactive$N>1 then			;IF POLYPHONY IS EXCEEDED (THROUGH THE ADDITION OF NEW NOTE)
  turnoff				;REMOVE THIS NOTE
 endif
 krel release				;IF NOTE HELD = 0, IF NOTE RELEASED = 1
 ktrig trigger krel,0.5,0		;WHEN RELEASE FLAG CROSSES 0.5 UPWARDS, I.E. NOTE HAS BEEN RELEASED...
 if ktrig==1 then
  gkactive$N = gkactive$N - 1		;...DECREMENT ACTIVE NOTES COUNTER
 endif

 iamp	=	(abs(p5) + abs(p6)) * 0.006				; amplitude dependent upon the speed of the ball at the time of the collision.
 aenv	expsegr	iamp,p3,iamp*0.001,0.05,iamp*0.001			; amplitude envelope
 kndx	expsegr	(abs(p5)+abs(p6))*0.01,p3,0.0001,0.05,0.0001		; index of modulation envelope. Overall envelope amplitude (therefore spectral brightness) influenced by the speed of the ball when the object was struck.
 kporttime	linseg	0,0.001,0.05
 kcps		=	cpsoct(((1-(gkSizeX$N/giPanelWidth))*8)+4)	; base frequency defined by width of the object
 kcps	portk	kcps,kporttime
 kmod		=	1 + ((gkSizeY$N-1)/300)				; modulator frequency defined by the height of the object: the taller the object the more inharmonic the spectrum. At minimum thinness ratio = 1.
 kmod	portk	kmod,kporttime
 acar	expseg	0.993,0.04,1,5,1					; carrier ratio envelope. Helps to create a bit of spectral distortion when the objecrt is struck

 kampscale	=	(gkspeed-0.01)/(20-0.01)
 kampscale	scale	kampscale,3,0.1
 asig 	foscil 	aenv*kampscale, kcps, acar, kmod, kndx, gisine, 0

 /* Fundemental notch filtering */
 abr	butbr	asig*3,kcps,kcps*0.1
 asig	ntrpol	asig,abr,gkfundemental

 al,ar	pan2	asig,p4
 gal	+=	al
 gar	+=	ar
 	outs	al,ar
endin
#
$CLANG_INSTR(91'1)
$CLANG_INSTR(92'2)
$CLANG_INSTR(93'3)
$CLANG_INSTR(94'4)
$CLANG_INSTR(95'5)
$CLANG_INSTR(96'6)
$CLANG_INSTR(97'7)
$CLANG_INSTR(98'8)
$CLANG_INSTR(99'9)



instr	100	; Launch a new ball
 event_i	"i",2,0,300
endin


instr	999
	iChoRte		=	1.2
	iChoDep		=	0.01
	kporttime	linseg	0,0.001,1
	kporttime	=	kporttime/iChoRte
	kdlt1	randomi	ksmps/sr,iChoDep,iChoRte,1
	kdlt1	portk	kdlt1,kporttime
	adlt1	interp	kdlt1
	acho1	vdelay	gal,adlt1*1000,1*1000

	kdlt2	randomi	ksmps/sr,iChoDep,iChoRte,1
	kdlt2	portk	kdlt2,kporttime
	adlt2	interp	kdlt2
	acho2	vdelay	gal,adlt2*1000,1*1000

		outs	acho1, acho2
	gal	+=	acho1
	gar	+=	acho2
endin


instr	1000	; Reverb
 al,ar	reverbsc	gal,gar,0.7,5000
 	outs	al*0.3,ar*0.3
 	clear	gal,gar
endin

instr	1001	; Print and then hide instructions
 kMOUSE_DOWN_LEFT	chnget	"MOUSE_DOWN_LEFT"	; sense left click
 kEscapeTrig	trigger	kMOUSE_DOWN_LEFT,0.5,0		; trigger of left click is pressed
 krel release						; release flag - normally 0, 1 at note release
 kalpha	transeg	0,0.5,4,255,p3-1,0,255,0.5,-4,-1	; colour alpha channel: fades in, holds, fades out

 if metro(ksmps)==1||krel==1 then			; peg updates or interrupt if mouse has been clicked
  Smess1	sprintfk	"bounds(%d,%d,400,17), fontcolour(255,255,255,%d)", (giPanelWidth*0.5) - 200, (giPanelHeight*0.5) - 50, kalpha*(1-krel)
  Smess2	sprintfk	"bounds(%d,%d,400,17), fontcolour(255,255,255,%d)", (giPanelWidth*0.5) - 200, (giPanelHeight*0.5) - 25, kalpha*(1-krel)
  chnset	Smess1,"instructions1"
  chnset	Smess2,"instructions2"
 endif

 ktime		times					; note elapsed time in seconds
 if trigger(ktime,p3-0.2,0)==1||kEscapeTrig==1 then	; if time is up mouse has been clicked...
  event "i",1,0,3600*24*7	; track mouse, move and resize blocks, and read in widgets
  event "i",2,0.1,3600		; first throw
  turnoff
 endif

endin


</CsInstruments>

<CsScore>
i 1001 0 4		; Instructions fade up then down (currently not working)
i 999  0    [3600*24*7]	; chorus
i 1000 0    [3600*24*7]	; reverb

</CsScore>

</CsoundSynthesizer>
; Rhythmicon.csd
; Written by Iain McCurdy, 2013.

; Recreation of Henry Cowell and Leon Theremin's Rhythmicon instrument (http://en.wikipedia.org/wiki/Rhythmicon)

; CONTROLS
; --------
; BASE	--	note number of the fundemental (lowest note)
; RATE	--	base rate (same as rate for fundemental)
; LEVEL	--	output level

; DESCRIPTION
; -----------
; Each note above the fundemental (C3) divides the base rate increasingly according to the arithmetic progression: 2,3,4,5...
; Therefore if C3 plays crotchets (quarter notes), C#3 plays quavers (eighth notes), D3 triplets and so on.
; The pitches of each note (in cycles per second) follow a simlar progression.
; If C3 plays a 200Hz tone, C#3 plays 400Hz, D 600Hz and so on.

; The 17th note (E4) does not play a note but instead engages a syncopation effect.  
; I have been unable to find a clear technical specification of how this was implemented but have nonetheless made my 'best guess'.

<Cabbage>
form caption("...") size(159, 180), pluginid("basl"), scrollbars(0) style("legacy")

label   bounds(  5,  3, 18, 22), text("R"), fontcolour(red)
label   bounds( 20,  5, 18, 22), text("H"), fontcolour(yellow)
label   bounds( 35,  2, 18, 22), text("Y"), fontcolour(orchid)
label   bounds( 50,  4, 18, 22), text("T"), fontcolour(LightGreen)
label   bounds( 65,  2, 18, 22), text("H"), fontcolour(OrangeRed)
label   bounds( 82,  6, 18, 22), text("M"), fontcolour(orange)
label   bounds( 97,  1, 18, 22), text("I"), fontcolour(SkyBlue)
label   bounds(110,  4, 18, 22), text("C"), fontcolour(Tomato)
label   bounds(125,  1, 18, 22), text("O"), fontcolour(LightGreen)
label   bounds(140,  3, 18, 22), text("N"), fontcolour(violet)

label   bounds( 81, 24,  78, 8), text("Iain McCurdy [2013]"), FontColour("white")

rslider bounds(  3, 45, 55, 55), channel("base"), textBox(1), range(0, 127,36, 1,1),fontcolour("white"),textcolour("white"),colour(orange), trackercolour(orange)
label   bounds( 19, 34, 30, 10), text("BASE"), fontcolour(white)
rslider bounds( 52, 45, 55, 55), channel("rate"), textBox(1), range(0.1, 5.00, 0.5, 0.5, 0.01),fontcolour("white"),textcolour("white"),colour(orange), trackercolour(orange)
label   bounds( 68, 34, 30, 10), text("RATE"), fontcolour(white)
rslider bounds(102, 45, 55, 54), channel("level"), textBox(1), range(0, 1.00, 0.5, 0.5, 0.01),fontcolour("white"),textcolour("white"),colour(orange), trackercolour(orange)
label   bounds(115, 34, 30, 10), text("LEVEL"), fontcolour(white)


checkbox bounds(  0, 101,  9, 10), channel("k1")  value(0) shape(square) colour(yellow)
checkbox bounds(  9, 101, 10, 10), channel("k2")  value(0) shape(square) colour(yellow)
checkbox bounds( 19, 101,  9, 10), channel("k3")  value(0) shape(square) colour(yellow)
checkbox bounds( 28, 101, 10, 10), channel("k4")  value(0) shape(square) colour(yellow)
checkbox bounds( 38, 101, 10, 10), channel("k5")  value(0) shape(square) colour(yellow)
checkbox bounds( 48, 101,  8, 10), channel("k6")  value(0) shape(square) colour(yellow)
checkbox bounds( 56, 101, 10, 10), channel("k7")  value(0) shape(square) colour(yellow)
checkbox bounds( 66, 101,  8, 10), channel("k8")  value(0) shape(square) colour(yellow)
checkbox bounds( 74, 101, 10, 10), channel("k9") value(0) shape(square) colour(yellow)
checkbox bounds( 84, 101,  9, 10), channel("k10") value(0) shape(square) colour(yellow)
checkbox bounds( 93, 101, 10, 10), channel("k11") value(0) shape(square) colour(yellow)
checkbox bounds(103, 101,  9, 10), channel("k12") value(0) shape(square) colour(yellow)
checkbox bounds(112, 101,  9, 10), channel("k13") value(0) shape(square) colour(yellow)
checkbox bounds(121, 101, 10, 10), channel("k14") value(0) shape(square) colour(yellow)
checkbox bounds(131, 101,  9, 10), channel("k15") value(0) shape(square) colour(yellow)
checkbox bounds(140, 101, 10, 10), channel("k16") value(0) shape(square) colour(yellow)
checkbox bounds(150, 101, 10, 10), channel("k17") value(0) shape(square) colour(red)

keyboard bounds(-561, 110,1200, 70)
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>
sr 	= 	44100
ksmps 	= 	64
nchnls 	= 	2
0dbfs	=	1
massign	0,1

; Author: Iain McCurdy (2013)

giAmpScl	ftgen	0,0,-20000,-16, 1,100,0,1, 20000-100,-100,0.2

opcode	SwitchPort, k, kkk
	kin,kUpPort,kDnPort	xin
	kold			init	0
	kporttime		=	(kin<kold?kDnPort:kUpPort)
	kout			portk	kin, kporttime
	kold			=	kout
				xout	kout
endop

	instr	1	; Listen for midi note changes. Turn lights on or off. Start the rhymicon of at least 1 note is held.
inum	notnum				; read in midi note number

#define	LightToggle(N)	#		; define a macro to reduce code repetition
if inum=(59+$N) then			; if note number played on the keyboard corresponds to 'this' toggle light... (note that first note will be C3 (59 + 1)
 ik$N	chnget	"k$N"			; read current value for 'this' toggle light (at i-time)
 	chnset	1-ik$N,"k$N"		; write the inverse to it (i.e. toggle it)
endif#
$LightToggle(1)				; expand macro for all 16 layers
$LightToggle(2)
$LightToggle(3)
$LightToggle(4)
$LightToggle(5)
$LightToggle(6)
$LightToggle(7)
$LightToggle(8)
$LightToggle(9)
$LightToggle(10)
$LightToggle(11)
$LightToggle(12)
$LightToggle(13)
$LightToggle(14)
$LightToggle(15)
$LightToggle(16)
$LightToggle(17)

kk1	chnget	"k1"
kk2	chnget	"k2"
kk3	chnget	"k3"
kk4	chnget	"k4"
kk5	chnget	"k5"
kk6	chnget	"k6"
kk7	chnget	"k7"
kk8	chnget	"k8"
kk9	chnget	"k9"
kk10	chnget	"k10"
kk11	chnget	"k11"
kk12	chnget	"k12"
kk13	chnget	"k13"
kk14	chnget	"k14"
kk15	chnget	"k15"
kk16	chnget	"k16"

ksum	=	kk1 + kk2 + kk3 + kk4 + kk5 + kk6 + kk7 + kk8 + kk9 + kk10 + kk11 + kk12 + kk13 + kk14 + kk15 + kk16
if ksum>0 then
 schedkwhen	1,0,1,2,0,-1
else
 turnoff2	2,0,1
endif
	endin

	instr	2
kporttime	linseg	0,0.001,0.05
kbase	chnget	"base"			; base pitch as a note number
krate	chnget	"rate"			; rate of pulsation of fundemental
krate	portk	krate, kporttime
klevel	chnget	"level"			; output amplitude level
ksync	chnget	"k17"			; syncopation mode
kBaseFrq	=	cpsmidinn(kbase)
kBaseFrq	portk	kBaseFrq,kporttime
iamp		=	0.6
amix		=	0

#define	LAYER(N)#					; use a macro to reduce code repetition
kk$N	chnget	"k$N"
kk$N	SwitchPort	kk$N,kporttime*0.01,kporttime*0.5
ktrig	metro	krate * $N
kn	=	$N					; layer number as a variable
if ksync=1&&kn>1 then					; if syncopation is on and this isn't the first layer (syncopation irrelevant for first layer)
 ktrig	vdelayk	ktrig, (1/(krate*$N))/$N    , 1/0.1	; add a syncopation delay for the metronome trigger for this layer
endif
kenv loopseg $N/60, ktrig, 0, 0,0.025, 1,0.84/krate, 0,60, 0 ; retriggering envelope
aenv	interp	kenv*kk$N					; interpolate to a-rate (for better smoothness)
kcps	=	kBaseFrq*$N				; pitch for this layer (in cycles per second)
kscl	table	kcps,giAmpScl				; amp scaling value (to quieten higher sounds)
kamp	=	iamp*kscl				; apply on/off switch for this layer to its amplitude
asig	vco2	kamp,kcps,2,0.1				; generate a tone (pulse wave)
kcf	limit	cpsoct(octcps(kcps*3)*kenv),1,10000	; filter envelope
asig	clfilt	asig,kcf,0,2				; butterworth lowpass filter the sound
asig	=	asig*aenv				; apply amplitude envelope
amix	=	amix + asig#				; add to 'mix' signal with the other layers

$LAYER(1)						; expand macro multiple times. Once for each layer
$LAYER(2)
$LAYER(3)
$LAYER(4)
$LAYER(5)
$LAYER(6)
$LAYER(7)
$LAYER(8)
$LAYER(9)
$LAYER(10)
$LAYER(11)
$LAYER(12)
$LAYER(13)
$LAYER(14)
$LAYER(15)
$LAYER(16)
	xtratim	0.5
	outs	amix*klevel, amix*klevel
	endin	


</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]		;read widgets
;i 2 0 [3600*24*7]		;read widgets
</CsScore>

</CsoundSynthesizer>; SonicLavaLamp.csd
; Written by Iain McCurdy, 2012.

<Cabbage>
form caption("Sonic Lava Lamp") size(510, 450), pluginid("sonl") style("legacy")
image bounds(  5,  0,250, 210), colour(255,255, 50,100),shape("rounded"), oulinecolour("white"), line(0)
image bounds(255,  0,250, 210), colour(  0,  0,255,100),shape("rounded"), oulinecolour("white"), line(0)
image bounds(  5,210,250, 210), colour(  5,255,  0,100),shape("rounded"), oulinecolour("white"), line(0)
image bounds(255,210,250, 210), colour(255,  0,200,100),shape("rounded"), oulinecolour("white"), line(0)

xypad bounds(5, 0, 250, 210), channel("LFOspeed", "LFO_OS"), rangex(0, 1.00, 0.01), rangey(5, 11, 8), text("Speed/OS")
xypad bounds(255, 0, 250, 210), channel("LFOshape", "LFOdepth"), rangex(0, 1, 0.7), rangey(0.1, 4, 2), text("Shape/Depth")
xypad bounds(5, 210, 250, 210), channel("pan", "amp"), rangex(0, 1, 0.5), rangey(0, 1, 0.8), text("pan/amp")
xypad bounds(255, 210, 250, 210), channel("DelTim", "DelSnd"), rangex(0, 1.00, 0.5), rangey(0, 1.00, 0.5), text("Delay Time/Send")
infobutton bounds(5,425, 100, 20), text("Help"), file("SonicLavaLampHelp.html")
image bounds(105, 425, 300, 20), colour(75, 85, 90, 100), plant("credit"), line(0){
label bounds(0.03, 0.1, .9, .7), text("Author: Iain McCurdy |2012|"), fontcolour("white")
}
</Cabbage>
<CsoundSynthesizer>
<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>
<CsInstruments>
sr 	= 	44100
ksmps 	= 	32
nchnls 	= 	2
0dbfs	=	1

;Author: Iain McCurdy (2012)

gisine		ftgen	0, 0, 4096, 10, 1				;SINE WAVE
giSawUp		ftgen	0, 0, 4096, -7, -1, 4096, 1
giTri		ftgen	0, 0, 4096, -7,  -1, 2048, 1, 2048, -1
giSawDn		ftgen	0, 0, 4096, -7, 1, 4096, -1
giSq		ftgen	0, 0, 4096, -7, 1, 2048, 1, 0, -1, 2048, -1
giMorfTab	ftgen	0, 0, 4096, -7, 1, 2048, 1, 0, -1, 2048, -1
giTabs4Morf	ftgen	0, 0, 8, -2, giSq, giSawUp, giTri, giSawDn, giSq, giSq, giSq, giSq
giAmpCurve	ftgen	0, 0, 16, -16,   1, 6, 0, 1,   5, -4, 0.2,   5, 0, 0.2
giEnv		ftgen	0, 0, 4096, 20,3,1	;9, 0.5, 1, 0

opcode	PingPongDelay, aa,aakk
	ainL,ainR,ktime,kfeedback	xin
	atime		interp	ktime					;INTERPOLATED A-RATE VERSION OF DELAY TIME
	aL_OS		vdelay	ainL,(atime*1000)/2,(10*1000)/2	;DELAYED OFFSET OF LEFT CHANNEL (FIRST 'PING')
	;LEFT CHANNEL
	abuf		delayr	10					;ESTABLISH DELAY BUFFER
	aDelL		deltapi	atime					;TAP BUFFER
			delayw	aL_OS+(aDelL*kfeedback)			;WRITE INPUT AUDIO INTO BUFFER
	;RIGHT CHANNEL
	abuf		delayr	10					;ESTABLISH DELAY BUFFER
	aDelR		deltapi	atime					;TAP BUFFER
			delayw	ainR+(aDelR*kfeedback)			;WRITE INPUT AUDIO INTO BUFFER
			xout	aDelL+aL_OS,aDelR
endop

instr	InitialiseXYpads
; xypads output zeroes until they are moved (regardless of any initialisation done within the widget)
; a workaround is to initialise the xypad using chnset within an instrument
; here I have used a macro so cut down on code repetition
#define	SET_XYPAD_INIT(NAME'VAL)#
	kval	=	$VAL
	chnset	kval,"$NAME"#
$SET_XYPAD_INIT(LFOspeed'0.01)
$SET_XYPAD_INIT(LFO_OS'8)
$SET_XYPAD_INIT(LFOshape'0.7)
$SET_XYPAD_INIT(LFOdepth'2)
$SET_XYPAD_INIT(pan'0.5)
$SET_XYPAD_INIT(amp'0.8)
$SET_XYPAD_INIT(DelTim'0.5)
$SET_XYPAD_INIT(DelSnd'0.5)
endin

instr	1
	kLFOspeed	chnget	"LFOspeed"
	kLFO_OS		chnget	"LFO_OS"
	kLFOshape	chnget	"LFOshape"
	kLFOdepth	chnget	"LFOdepth"
	kamp		chnget	"amp"
	kpan		chnget	"pan"
	kDelTim		chnget	"DelTim"
	kDelSnd		chnget	"DelSnd"

	kLFOspeed	expcurve	kLFOspeed,6
	kLFOspeed	scale	kLFOspeed, 40,0.01
	kDelTim		expcurve	kDelTim,6
	kDelTim		scale	kDelTim, 0.5,0.01

	kporttime	linseg	0,0.01,0.03
	kDelSnd		portk	kDelSnd,kporttime*3
	kLFOdepth	portk	kLFOdepth,kporttime
	kLFO_OS		portk	kLFO_OS,kporttime
	kLFOshape	portk	kLFOshape,kporttime
	kamp		portk	kamp,kporttime
	kamp		expcurve	kamp,2
	kpan		portk	kpan,kporttime
			ftmorf	kLFOshape*5, giTabs4Morf, giMorfTab
	aoctLFO		oscili	kLFOdepth,kLFOspeed,giMorfTab
	aoct		=	aoctLFO+kLFO_OS
	koct		downsamp	aoct
	kAmpCurve	tablei	koct,giAmpCurve
	kcps		=	cpsoct(koct)
	aamp		interp	kAmpCurve/3
	asig		oscili	aamp,kcps,gisine	;AUDIO OSCILLATOR
	aenv		oscili	1,kLFOspeed,giEnv
	kEnvXFade	jspline	1,0.2,0.6
	kEnvXFade	limit	kEnvXFade,0,1
	asig		ntrpol	asig*aenv,asig,kEnvXFade

	
	aL,aR		pan2	asig,kpan
	aRvbL,aRvbR	reverbsc	aL,aR,0.8,4000
	aL		sum	(aL*kamp),(aRvbL*0.1)
	aR		sum	(aR*kamp),(aRvbR*0.1)
	kDelTim		portk	kDelTim,kporttime*10
	aDlyL,aDlyR	PingPongDelay	aL*kDelSnd,aR*kDelSnd,2*kDelTim,0.6
	aL		sum	aL,(aDlyL*0.5)
	aR		sum	aR,(aDlyR*0.5)

			outs	aL, aR
endin

</CsInstruments>

<CsScore>
i "InitialiseXYpads" 0.1 0.01
i 1 0.2 [3600*24*7]
</CsScore>

</CsoundSynthesizer>
; Splat.csd
; Written by Iain McCurdy, 2014.
;
; Left click somewhere within the swarm to splat the flies.
; Left click again somewhere within the field of splatted flies to unsplat them and bring them back to life.
;
; Population	-	the number of flies in the swarm
; Liveliness	-	the speed with which flies will move about within the swarm
; Excursion	-	how far flies will move away from the centre of the swarm, therefore this also defines the area covered by the swarm.
; Fly Size	-	doesn't affect the physical size of flies but instead affects the central frequency of the buzzing tone they produce.
; Swarm Speed	-	the speed with which the swarm moves around the panel. The swarm can exit the panel completely.
;
; If the swarm area (excursion) is very small it can become difficult to splat (and unsplat) it.
; If this becomes a problem, simply raise the value for excursion, even while the swarm is splatted.

<Cabbage>
form caption("Splat!"), size(1000,530), colour(230,230,230),guirefresh(64), pluginid("Splt") style("legacy")
image bounds(0,   0, 0, 0), colour(white), shape(ellipse), widgetarray("fly",500)
nslider  bounds(  5,495,60,34), channel("Population"),    range(1,100, 10,1,1),       textcolour(black), fontcolour(black), text("Population"), colour(white)
nslider  bounds( 70,495,60,34), channel("Liveliness"),    range(0.1,10.00, 4,1,0.1),  textcolour(black), fontcolour(black), text("Liveliness"), colour(white)
nslider  bounds(135,495,60,34), channel("Excursion"),     range(2,300, 50,1,1),       textcolour(black), fontcolour(black), text("Excursion"),  colour(white)
nslider  bounds(200,495,60,34), channel("FlySize"),       range(2,12, 5,1,0.001),     textcolour(black), fontcolour(black), text("Fly Size"),   colour(white)
nslider  bounds(265,495,80,34), channel("SwarmSpeed"),    range(0.1,10, 0.3,1,0.001), textcolour(black), fontcolour(black), text("Swarm Speed"),colour(white)
label    bounds(  0, 0,  0, 0), text("Click swarm to splat. Click again to unsplat."), align(centre), fontcolour(white), identchannel("instructions1")		; Instructions
label    bounds(350,519,100, 10), text("Iain McCurdy 2014"), align(left), fontcolour(0,0,0,150)
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-n -dm0
</CsOptions>

<CsInstruments>

sr = 44100
ksmps = 32
nchnls = 2
0dbfs = 1
seed	0

giPanelWidth	=	1000
giPanelHeight	=	530
gisine	ftgen	0,0,131072,10,1
giMaxFlies	=	500

; UDO that provide different portamento times whether a value is rising or falling
opcode	SwitchPort, k, kkk
	kin,kUpPort,kDnPort	xin
	kold			init	0
	kporttime		=	(kin<kold?kDnPort:kUpPort)
	kout			portk	kin, kporttime
	kold			=	kout
				xout	kout
endop

; UDO for an i-rate version of the 'scale' opcode
opcode	scale_i,i,iii
 ival,imax,imin	xin
 ival	=	(ival * (imax-imin)) + imin
	xout	ival
endop

; UDO for moving fly and creating its buzzing sound
opcode	Fly,aa,kkkkkkkip
 kSplat,kExcursion,kLiveliness,koct,kFlySize,kOffX,kOffY,iMaxFlies,iCount	xin

 if kSplat==0 then							; if flies are living...
  kX	rspline	-kExcursion,kExcursion,kLiveliness,kLiveliness*2	; variables for fly movement within the swarm
  kY	rspline	-kExcursion,kExcursion,kLiveliness,kLiveliness*2
  kDist	rspline	0.5,1.5,0.02,0.03						; z-plane distance of the fly. Really just a bit of size modulation.
 endif

 kamp	=	((kY*0.5)/kExcursion) + 0.5				; amplitude of the buzzing sound varie according to the distance of the fly along the y-axis from the front of the swarm
 kamp	scale	kamp,1,0.1						; amplitude value scaled so that flies never audibly disappear entirely
 asig	vco2	0.01*kamp,cpsoct(koct)*semitone((kX+kY)*0.02),6		; the buzzing sound: a pulse wave

 kpan	=	((kX*0.5)/kExcursion) + 0.5				; buzzing sounds are panned according to their left/right position within the swarm
 aL,aR	pan2	asig,kpan						; panned

 kFlySizeL	scale	(kFlySize-1)/9,3,0.5		; this layer's fly size

 kRefreshTrig	metro	ksmps,iCount/giMaxFlies				; frame rate with which flies will be graphically moved. A different trigger (each with a different phase offset) for each fly so that all chnsets don't happen at the same time and cripple performance.
 if kRefreshTrig==1 && kSplat==0 then					; if a refresh trigger has occured...
 	Smess	sprintfk	"bounds(%d,%d,%d,%d), colour(0,0,0,200)",kOffX+kX,kOffY+kY,kDist*kFlySizeL,kDist*kFlySizeL	; generate message for fly widget
 	Sident	sprintfk	"fly_ident%d", iCount							; generate ident string appropriate to this fly
 	chnset Smess, Sident						; update the fly
 endif

 aMixL	=	0
 aMixR	=	0

 if iCount<iMaxFlies then
  aMixL,aMixR	Fly	kSplat,kExcursion,kLiveliness,koct,kFlySize,kOffX,kOffY,iMaxFlies,iCount+1
 endif

	xout	aL+aMixL, aR+aMixR
endop

instr	1
 kMOUSE_X		chnget	"MOUSE_X"		; track mouse activity
 kMOUSE_Y		chnget	"MOUSE_Y"
 kMOUSE_DOWN_LEFT	chnget	"MOUSE_DOWN_LEFT"
 kMOUSE_DOWN_RIGHT	chnget	"MOUSE_DOWN_RIGHT"

 kSplat	init	0					; splat status: 0 = alive, 1 = splatted

 aMixL,aMixR	init	0				; audio mix of all buzzing sounds (initialised)
 kLiveliness	chnget	"Liveliness"			; speed with which flies move within the swarm
 kExcursion	chnget	"Excursion"			; range (in pixels) that individual flies might go from the the centre of the swarm
 kFlySize	chnget	"FlySize"			; fly size (affects pitch of buzzing only)
 koct		scale	(kFlySize-1)/9,7,12		; scale buzzing pitch (oct format)
 kporttime	linseg	0,0.001,0.05			; portamento time rises from zero to a held value
 koct		portk	koct,kporttime			; smooth chages to buzzing frequency
 kSwarmSpeed	chnget	"SwarmSpeed"			;

 if kSplat==0 then					; if flies are alive...
  gkPopulation	chnget	"Population"			; read changes to population. This widget is only read while flies are alive so that splatted flies don't appear or disappear while splatted.
 endif

 if changed(gkPopulation)==1 then			; if a change to the number of flies is made by the user. (Changes made while flies are dead will only register once the flies are unsplatted.)
  event	"i",10,0,0					; call instrument that hides all active flies. This is done so to ensure that deactivated flies are no longer visible. Flies that should be active flies will be made visible immediately after in this instrument.
 endif

 if trigger(kSplat,0.5,0)==1 then			; if a succesful splatting has been made...
  event	"i",20,0,0					; call the instrument that splats all active flies
 endif

 if kSplat==0 then					; if flies are living...
  kOffX		rspline	0,giPanelWidth,kSwarmSpeed,kSwarmSpeed*2		; generate variables that move the entire swarm. i.e. the swarm should not move while all flies are splatted.
  kOffY		rspline	0,giPanelHeight,kSwarmSpeed,kSwarmSpeed*2
 endif

 ; if a left click is made within the boundaries of the swarm it will be alternately splatted or unsplatted as appropriate
 if trigger(kMOUSE_DOWN_LEFT,0.5,0)==1 && kMOUSE_X>=(kOffX-kExcursion) && kMOUSE_X<=(kOffX+kExcursion)  && kMOUSE_Y>=(kOffY-kExcursion) && kMOUSE_Y<=(kOffY+kExcursion) then
  kSplat	=	(kSplat==1?0:1)
 endif

 ; Call UDO for moving fly and creating buzzing sound
 if changed:k(gkPopulation)==1 then
  reinit ChangedPopulation
 endif
 ChangedPopulation:
 aMixL,aMixR	Fly	kSplat,kExcursion,kLiveliness,koct,kFlySize,kOffX,kOffY,i(gkPopulation)
 rireturn

 kenv	linseg	0,4,1	; initial rise in amplitude
 aMixL	*=	SwitchPort((1-kSplat),0.5,0.001)*kenv	; turn audio on an off according to splat status. When splatted audio is interrupted suddenly, when unsplatted audio rises more slowly.
 aMixR	*=	SwitchPort((1-kSplat),0.5,0.001)*kenv	;
	outs	aMixL,aMixR	; send audio to outputs
	clear	aMixL,aMixR	; clear audio mix variables
endin

instr	10	; hide all flies
 iCount	=	1
 while iCount<=giMaxFlies do
 Sid	sprintf	"fly_ident%d",iCount
 chnset	"bounds(-100,-100,0,0), colour(0,0,0,0)",Sid
 iCount	+=	1
 od
endin


instr	20	; graphically splat flies
 event_i "i",21,0,0.1	; call instrument that produces the sound effect
 iCount	=	1
 while iCount<=giMaxFlies do
 isize	random	4,20		; splat size randomised
 ialpha	random	80,180		; alpha (transparency) randomised
 ired	random	30,150		; add in a random amount of red to give it a bit of gore
 Smess	sprintf	"size(%d,%d), colour(%d,0,0,%d)",isize,isize,ired,ialpha	; create message for graphical splat
 Sid	sprintf	"fly_ident%d",iCount
 chnset	Smess,Sid	; send message to the fly widget
 iCount	+=	1
 od
endin

instr	21	; splat sound effect
 idur	scale_i	rnd(1)^2,0.15,0.08	; random duration
 p3	=	idur			; assign to p3
 imin	random	8,10			; minimum frequency for splat filter (in oct)
 anoise	dust2	10,100*gkPopulation	; some crackly noise, the density of which is dependent upon the fly population
 kcf	random	cpsoct(imin),cpsoct(imin+3)	; cutoff frequency is a random function moving to a new value every k-cycle
 anoise	moogladder	anoise,kcf,0.7	; filter the crackly noise using moogladder to give it a bit of squelch
 anoise	buthp	anoise,200		; highpass filter to remove some of the lower frequencies
 aenv	expon	1,p3,0.1		; amplitude envelope which will give the splat sound a percussive shape
 anoise	*=	aenv			; apply envelope
 	outch	1,anoise		; send this signal to the left channel

 anoise	dust2	10,1000			; repeat for the left channel. Doing both channels completely seperately create a nice stereo effect
 kcf	random	cpsoct(imin),cpsoct(imin+3)
 anoise	moogladder	anoise,kcf,0.7
 anoise	buthp	anoise,200
 aenv	expon	1,p3,0.1
 anoise	*=	aenv
 	outch	2,anoise
endin


instr	1001	; Print and then hide instructions
 kMOUSE_DOWN_LEFT	chnget	"MOUSE_DOWN_LEFT"	; sense left click
 kEscapeTrig	trigger	kMOUSE_DOWN_LEFT,0.5,0		; trigger of left click is pressed
 krel release						; release flag - normally 0, 1 at note release
 kalpha	transeg	0,0.2,4,255,p3-0.4,0,255,0.2,-4,-1	; colour alpha channel: fades in, holds, fades out

 if metro(ksmps)==1||krel==1 then			; peg updates or interrupt if mouse has been clicked
  Smess1	sprintfk	"bounds(%d,%d,400,17), fontcolour(0,0,0,%d)", (giPanelWidth*0.5) - 200, (giPanelHeight*0.5)-10, kalpha*(1-krel)
  chnset	Smess1,"instructions1"
 endif

 ktime		times					; note elapsed time in seconds
 if trigger(ktime,p3-0.2,0)==1||kEscapeTrig==1 then	; if time is up mouse has been clicked...
  event "i",1,0,3600*24*7	; start swarm
  turnoff
 endif

endin

</CsInstruments>

<CsScore>
i 1001 0 3		; Instructions fade up then down (currently not working)
</CsScore>

</CsoundSynthesizer>
; Windmills.csd
; Written by Iain McCurdy, 2014
;
; This doesn't make sound yet!

<Cabbage>
form caption("Windmills") size(700,500), colour(150,150,255), scrollbars(0), guirefresh(32), pluginid("WinM") style("legacy")
; SUN
image bounds(610, 20,70,70), colour(250,250,100), shape(ellipse)			; sun

; CLOUDS
image bounds( 30,50,40,40), colour(240,240,240), shape(ellipse), identchannel(cloud1_a)
image bounds( 50,30,60,60), colour(240,240,240), shape(ellipse), identchannel(cloud1_b)
image bounds( 90,50,40,40), colour(240,240,240), shape(ellipse), identchannel(cloud1_c)
image bounds( 52,70,56,20), colour(240,240,240), shape(sharp),   identchannel(cloud1_d)

image bounds(125, 90, 60,60), colour(240,240,240), shape(ellipse), identchannel(cloud2_a)
image bounds(155, 60, 90,90), colour(240,240,240), shape(ellipse), identchannel(cloud2_b)
image bounds(215, 90, 60,60), colour(240,240,240), shape(ellipse), identchannel(cloud2_c)
image bounds(160,120, 80,30), colour(240,240,240), shape(sharp),   identchannel(cloud2_d)

image bounds(290, 80, 25, 25), colour(240,240,240), shape(ellipse), identchannel(cloud3_a)
image bounds(305, 65, 35, 35), colour(240,240,240), shape(ellipse), identchannel(cloud3_b)
image bounds(330, 80, 25, 25), colour(240,240,240), shape(ellipse), identchannel(cloud3_c)
image bounds(302, 90, 36, 15), colour(240,240,240), shape(sharp),   identchannel(cloud3_d)

; WINDMILL 1
image bounds( 96,150,  8,200), colour(white), shape(sharp) 				; post
image bounds( 92,142, 16, 16), colour(white), shape(ellipse)				; joint
image bounds( 98,154,  0,  0), colour(white), shape(ellipse), identchannel("Axle1")	; axle
image bounds(  0,  0,  0,  0), colour(white), shape(ellipse), widgetarray("CircleSix1",6)


; WINDMILL 3
image bounds(548,220, 4, 200), colour(white), shape(sharp) 				; post
image bounds(546,216, 8,   8), colour(white), shape(ellipse)				; joint
image bounds(548,224,  0,  0), colour(white), shape(ellipse),   identchannel("Axle3")	; axle
image bounds(  0,  0,  0,  0), colour(white), shape(ellipse), widgetarray("CircleNine3",9)


; HILLS
image bounds( 100,310,750,500),  colour(  0,170,100), shape(ellipse)			; hill
image bounds( 350,280,1050,500), colour(  0,160, 50), shape(ellipse)			; hill
image bounds(-400,300,900,500),  colour(  0,150,  0), shape(ellipse)			; hill


; WINDMILL 2
image bounds(296,170, 8, 200), colour(white), shape(sharp) 				; post
image bounds(296,368, 8,   4), colour(white), shape(ellipse) 				; base
image bounds(292,162,16,  16), colour(white), shape(ellipse)				; joint
image bounds(298,174,  0,  0), colour(white), shape(ellipse),   identchannel("Axle2")	; axle
image bounds(  0,  0,  0,  0), colour(white), shape(ellipse), widgetarray("CircleSeven2",7)


; WINDMILL 4
image bounds(594,470, 12, 200), colour(white), shape(sharp) 				; post
image bounds(588,458, 24, 24), colour(white), shape(ellipse)				; joint
image bounds(600,474,  0,  0), colour(white), shape(ellipse),   identchannel("Axle4")	; axle
image bounds(  0,  0,  0,  0), colour(white), shape(ellipse), widgetarray("CircleSeven4",7)

; BLACK OUT SCREEN
image bounds(  0,  0,700,500), colour("black"), shape(sharp), identchannel("Blackout")

; INSTRUCTIONS
label    bounds(  0, 0,  0, 0), text("Blow into your microphone..."), align(centre), fontcolour(white), identchannel("instructions1")		; Instructions

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-n -dm0
</CsOptions>

<CsInstruments>

sr = 44100
ksmps = 32
nchnls = 2
0dbfs=1

gisine	ftgen	0,0,4096,10,1
giPanelWidth	=	700
giPanelHeight	=	500
giRefreshRate	=	1024

instr	1
 aL,aR	ins
 krms	rms	(aL+aR)*4

 ; Move clouds
 kCloudOffset1,kCloudOffset2,kCloudOffset3	init	0
 kCloudTrig1	metro	(giRefreshRate/ksmps)*0.05,(kr-1)/kr
 kCloudTrig2	metro	(giRefreshRate/ksmps)*0.1,(kr-1)/kr
 kCloudTrig3	metro	(giRefreshRate/ksmps)*0.15,(kr-1)/kr
 if kCloudTrig1==1 then
  Smess1a	sprintfk	"bounds( %d,50,40,40)",30+kCloudOffset1
  Smess1b	sprintfk	"bounds( %d,30,60,60)",50+kCloudOffset1
  Smess1c	sprintfk	"bounds( %d,50,40,40)",90+kCloudOffset1
  Smess1d	sprintfk	"bounds( %d,70,56,20)",52+kCloudOffset1
  		chnset		Smess1a,"cloud1_a"
  		chnset		Smess1b,"cloud1_b"
  		chnset		Smess1c,"cloud1_c"
  		chnset		Smess1d,"cloud1_d"
  kCloudOffset1	wrap	kCloudOffset1+1,-200,giPanelWidth
 elseif kCloudTrig2==1 then
  Smess2a	sprintfk	"bounds(%d, 90, 60,60)",125+kCloudOffset2
  Smess2b	sprintfk	"bounds(%d, 60, 90,90)",155+kCloudOffset2
  Smess2c	sprintfk	"bounds(%d, 90, 60,60)",215+kCloudOffset2
  Smess2d	sprintfk	"bounds(%d,120, 80,30)",160+kCloudOffset2
  		chnset		Smess2a,"cloud2_a"
  		chnset		Smess2b,"cloud2_b"
  		chnset		Smess2c,"cloud2_c"
  		chnset		Smess2d,"cloud2_d"
  kCloudOffset2	wrap	kCloudOffset2+1,-250,giPanelWidth
 elseif kCloudTrig3==1 then
  Smess3a	sprintfk	"bounds(%d, 80, 25, 25)",290+kCloudOffset3
  Smess3b	sprintfk	"bounds(%d, 65, 35, 35)",305+kCloudOffset3
  Smess3c	sprintfk	"bounds(%d, 80, 25, 25)",330+kCloudOffset3
  Smess3d	sprintfk	"bounds(%d, 90, 40, 15)",302+kCloudOffset3
  		chnset		Smess3a,"cloud3_a"
  		chnset		Smess3b,"cloud3_b"
  		chnset		Smess3c,"cloud3_c"
  		chnset		Smess3d,"cloud3_d"
  kCloudOffset3	wrap	kCloudOffset3+1,-300,giPanelWidth
 endif

 ; MACRO FOR AN INDIVIDUAL CIRCLE
 #define INDIVIDUAL_CIRCLE(N'P'NUMBER'WIDTH'X'Y'NUM)
 #

 kwidth$N	=	$WIDTH
 kspeed2	portk	kspeed,limit((ksize*kMaxWidth)/1000,0,2)

 kx$N	oscil	kwidth$N*(1-abs(kSwing2)),kspeed2,gisine,$P
 ky$N	oscil	kwidth$N,kspeed2,gisine,$P+0.25

 ; Create a sound
 ;ktrig	trigger	kx$N,0,0
 ;schedkwhen	ktrig,0,0,100+$NUM,0,0.05,$GroupNum,$N,kspeed2,kSwing2

 if kRefreshTrig==1 then
  Smess$N	sprintfk	"bounds(%d,%d,%d,%d), colour(%d,%d,%d)", kx$N+$X+kX_Offset+(kAxleLenMax*kSwing2)-(ksize*0.5) - (ksize*0.5*abs(kSwing2)), ky$N+$Y-(ksize*0.5), ksize*ktilt, ksize, kR, kG, kB
  Sident	sprintfk	"Circle$NUMBER.%d_ident%d",$NUM,$N
  chnset	Smess$N,Sident
 endif
 #




 #define CIRCLE_OF_FIVE(SIZE'WIDTH'X'Y'NUM)
 #
  $INDIVIDUAL_CIRCLE(1'0/5'Five'$WIDTH'$X'$Y'$NUM)
  $INDIVIDUAL_CIRCLE(2'1/5'Five'$WIDTH'$X'$Y'$NUM)
  $INDIVIDUAL_CIRCLE(3'2/5'Five'$WIDTH'$X'$Y'$NUM)
  $INDIVIDUAL_CIRCLE(4'3/5'Five'$WIDTH'$X'$Y'$NUM)
  $INDIVIDUAL_CIRCLE(5'4/5'Five'$WIDTH'$X'$Y'$NUM)
 #

 #define CIRCLE_OF_SIX(SIZE'WIDTH'X'Y'NUM)
 #
  $INDIVIDUAL_CIRCLE(1'0/6'Six'$WIDTH'$X'$Y'$NUM)
  $INDIVIDUAL_CIRCLE(2'1/6'Six'$WIDTH'$X'$Y'$NUM)
  $INDIVIDUAL_CIRCLE(3'2/6'Six'$WIDTH'$X'$Y'$NUM)
  $INDIVIDUAL_CIRCLE(4'3/6'Six'$WIDTH'$X'$Y'$NUM)
  $INDIVIDUAL_CIRCLE(5'4/6'Six'$WIDTH'$X'$Y'$NUM)
  $INDIVIDUAL_CIRCLE(6'5/6'Six'$WIDTH'$X'$Y'$NUM)
 #

 #define CIRCLE_OF_SEVEN(SIZE'WIDTH'X'Y'NUM)
 #
  $INDIVIDUAL_CIRCLE(1'0/7'Seven'$WIDTH'$X'$Y'$NUM)
  $INDIVIDUAL_CIRCLE(2'1/7'Seven'$WIDTH'$X'$Y'$NUM)
  $INDIVIDUAL_CIRCLE(3'2/7'Seven'$WIDTH'$X'$Y'$NUM)
  $INDIVIDUAL_CIRCLE(4'3/7'Seven'$WIDTH'$X'$Y'$NUM)
  $INDIVIDUAL_CIRCLE(5'4/7'Seven'$WIDTH'$X'$Y'$NUM)
  $INDIVIDUAL_CIRCLE(6'5/7'Seven'$WIDTH'$X'$Y'$NUM)
  $INDIVIDUAL_CIRCLE(7'6/7'Seven'$WIDTH'$X'$Y'$NUM)
 #

 #define CIRCLE_OF_NINE(SIZE'WIDTH'X'Y'NUM)
 #
  $INDIVIDUAL_CIRCLE(1'0/9'Nine'$WIDTH'$X'$Y'$NUM)
  $INDIVIDUAL_CIRCLE(2'1/9'Nine'$WIDTH'$X'$Y'$NUM)
  $INDIVIDUAL_CIRCLE(3'2/9'Nine'$WIDTH'$X'$Y'$NUM)
  $INDIVIDUAL_CIRCLE(4'3/9'Nine'$WIDTH'$X'$Y'$NUM)
  $INDIVIDUAL_CIRCLE(5'4/9'Nine'$WIDTH'$X'$Y'$NUM)
  $INDIVIDUAL_CIRCLE(6'5/9'Nine'$WIDTH'$X'$Y'$NUM)
  $INDIVIDUAL_CIRCLE(7'6/9'Nine'$WIDTH'$X'$Y'$NUM)
  $INDIVIDUAL_CIRCLE(8'7/9'Nine'$WIDTH'$X'$Y'$NUM)
  $INDIVIDUAL_CIRCLE(9'8/9'Nine'$WIDTH'$X'$Y'$NUM)
 #



 #define WINDMILL(NUM'X'Y'SIZE'WIDTH'R'G'B'AXLE_WIDTH'AXLE_LENGTH)
 #
 ; WINDMILL 1
 kX	=	$X
 kY	=	$Y
 ksize	=	$SIZE
 kMaxWidth	=	$WIDTH
 kSwing2	portk kSwing,limit((ksize*kMaxWidth)/1000,0,2)
 ktilt	=	1 - abs(kSwing2)

 ; printk	0.5,ktilt	; 1 = full 0.5 = tilted
 ; printk	0.5,kspeed		; 1 = full 0.5 = tilted

 kWidth		=	(1-abs(kSwing2))*kMaxWidth
 kX_Offset	=	(kMaxWidth - kWidth) * 0.5

 kColour	=	(kSwing2+1)*0.5
 kR		scale	kColour, $R, 10
 kG		scale	kColour, $G,  0
 kB		scale	kColour, $B,  0

 iAxle_Width$NUM	=	$AXLE_WIDTH

 kAxleLenMax	=	$AXLE_LENGTH
 kAxleLen	=	kAxleLenMax*abs(kSwing2)
 kAxleX		=	limit(kSwing2,-1,0) * kAxleLenMax

 kRefreshTrig	metro	giRefreshRate/ksmps,$NUM/4
 if kRefreshTrig==1 then
  Smess2	sprintfk	"bounds(%d,%d,%d,%d)",kX+kAxleX, kY-(iAxle_Width$NUM*0.5), kAxleLen ,iAxle_Width$NUM
  Sident	sprintfk	"Axle%d",$NUM
  chnset	Smess2,Sident
 endif
 #


 kspeed	rspline	-5,5,0.025,0.1
 kSwing	rspline	-0.95,0.95,0.05,0.2
 kspeed	=	kspeed * krms
 ;kSwing	=	kSwing * krms

 ;         NUM  X   Y SIZE WIDTH R G B Ax_WID AX_LEN
 $WINDMILL(1  '100'150'20'50'255'70'70'8'30)
 ;               SIZE'WIDTH'X'Y
 $CIRCLE_OF_SIX(ksize'kMaxWidth'kX'kY'1)

 ;         NUM  X   Y SIZE WIDTH R G B Ax_WID AX_LEN
 $WINDMILL(2  '300'170'40'80'70'70'255'8'30)
 ;                SIZE'WIDTH'X'Y
 $CIRCLE_OF_SEVEN(ksize'kMaxWidth'kX'kY'2)

 ;         NUM  X   Y SIZE WIDTH R G B Ax_WID AX_LEN
 $WINDMILL(3  '550'220'12'30'255'0'200'4'15)
 ;               SIZE'WIDTH'X'Y
 $CIRCLE_OF_NINE(ksize'kMaxWidth'kX'kY'3)

 ;         NUM  X   Y SIZE WIDTH R G B Ax_WID AX_LEN
 $WINDMILL(4  '600'470'90'200'200'  0'250'12'50)
 ;                SIZE'WIDTH'X'Y
 $CIRCLE_OF_SEVEN(ksize'kMaxWidth'kX'kY'4)
endin





instr	1001	; Print and then hide instructions
 p3	=	3.5

 kalpha		linseg	1,0.5,255,1,255,0.5,0		; Writing transparency
 kalpha2	linseg	255,2,255,1.5,0			; Blacking screen transparency

 if metro(giRefreshRate/ksmps)==1 then			; peg updates or interrupt if mouse has been clicked
  Smess1	sprintfk	"bounds(%d,%d,400,25), fontcolour(255,255,255,%d)", (giPanelWidth*0.5) - 200, (giPanelHeight*0.5)-20, kalpha
  chnset	Smess1,"instructions1"
  Smess2	sprintfk	"colour(0,0,0,%d)", kalpha2
  chnset	Smess2,"Blackout"
 endif

endin


</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
i 1001 0 0
</CsScore>

</CsoundSynthesizer>
; GEN02
; demonstration of writing to GEN02 function tables and also a demonstration of Cabbage's 'gentable' widget
; the example creates an 8-note sequence of notes which can be played and looped in various ways

; The sequen

; Harm.		factor which controls a frequency shift applied to each note. Value here is arbitrary as freq shift is also dependent upon note number. Even number will produce harmonic results, odd numbers inharmonic results. Zero will result in no frequency shift.
; Filt.		shifts all filter cutoff envelopes up or down. (Zero = no shift). Value here is in octaves.
; Res.		resonance of the moogladder lowpass filter
; Dur.		duration of the filter envelope applied to each note (in seconds).
; Echo		amount of synth signal sent to the echo (delay) effect
; Repeats	number of echo/delay repeats. Actually the amount of feedback in the delay effect.
; Time		time spacing of echos. Related to tempo and numbers here are arbitary. 0 = 1/4 beat, 1 = 1/2 beat, 2 = 3/4 beat, 3 = 1 beat, 4 = 5/4 beats and so on
; Direction	three-way toggle switch to choose direction of the sequence looping: Forward, Forward/Backward or Backward
; Tempo		in beats per minute

<Cabbage>
form caption("GEN02"), size(720, 440), scrollbars(0), colour( 50, 50, 50),pluginid("gn02"), guirefresh(32) style("legacy")

#define RSliderStyle1 # colour("yellow"), outlinecolour(100,100,100), trackercolour(150,150,150) #
#define RSliderStyle2 # colour("green"),  outlinecolour(100,100,100), trackercolour(150,150,150) #
#define RSliderStyle3 # colour("blue"),   outlinecolour(100,100,100), trackercolour(150,150,150) #
                                                                                  
gentable bounds(  5,  5, 400,140), identchannel("table1"),  tablenumber(1), tablecolour("yellow"),amprange(36,108,1,1), zoom(-1), tablegridcolour(0,0,0,0), active(1)
gentable bounds(  5,150, 400,140), identchannel("table2"),  tablenumber(2), tablecolour("green"), amprange(0,1,2), zoom(-1), tablegridcolour(0,0,0,0), active(1)
gentable bounds(  5,295, 400,140), identchannel("table3"),  tablenumber(3), tablecolour("blue"),  amprange(1,4,3,1), zoom(-1), tablegridcolour(0,0,0,0), active(1)
label    bounds(  7,  5, 100, 12), text("NOTES"),      align("left"), fontcolour(255,255,255,100)
label    bounds(  7,150, 100, 12), text("AMPLITUDES"), align("left"), fontcolour(255,255,255,100)
label    bounds(  7,295, 100, 12), text("DURATIONS"),  align("left"), fontcolour(255,255,255,100)

image   bounds(  5, 5, 50,430), colour(255,255,255,50), shape("sharp"), identchannel("ScrubberID")

image   bounds(410,  5,400,430), colour( 50, 50, 50), plant("controls"), shape("sharp"), {
rslider bounds(  0,  0, 75, 75), channel("fshift"), text("Harm."),   range(0, 32, 0,1,1),       $RSliderStyle1
rslider bounds( 75,  0, 75, 75), channel("filt"),   text("Filt."),   range(-4.00, 4.00, 0),     $RSliderStyle1
rslider bounds(150,  0, 75, 75), channel("res"),    text("Res."),    range(0, 0.99, 0.7),       $RSliderStyle1
rslider bounds(225,  0, 75, 75), channel("dur"),    text("Dur."),    range(0.10, 4, 1,0.5),     $RSliderStyle1

rslider bounds( 40, 75, 75, 75), channel("echo"),   text("Echo"),    range(0, 1.00, 0.3),       $RSliderStyle2
rslider bounds(115, 75, 75, 75), channel("rpts"),   text("Repeats"), range(0, 1.00, 0.4),       $RSliderStyle2
rslider bounds(190, 75, 75, 75), channel("time"),   text("Time"),    range(0, 7, 3,1,1),        $RSliderStyle2

rslider  bounds(115,160,75,75), channel("tempo"), text("Tempo"), range(10,500,150, 1, 1), $RSliderStyle3
rslider  bounds(190,160,75,75), channel("amp"),   text("Level"), range(0, 1.00, 0.5),     $RSliderStyle3

button  bounds( 10,160, 80,20), text("Bwd.","Bwd."),           channel("bwd"),    value(0), fontcolour:0(255,255,255,50), fontcolour:1(105,255,105,250), radiogroup(1)
button  bounds( 10,180, 80,20), text("Fwd./Bwd.","Fwd./Bwd."), channel("fwdbwd"), value(1), fontcolour:0(255,255,255,50), fontcolour:1(105,255,105,250), radiogroup(1)
button  bounds( 10,200, 80,20), text("Fwd.","Fwd."),           channel("fwd"),    value(0), fontcolour:0(255,255,255,50), fontcolour:1(105,255,105,250), radiogroup(1)
button  bounds( 10,220, 80,20), text("Freeze","Freeze"),       channel("freeze"), value(0), fontcolour:0(255,255,255,50), fontcolour:1(155,155,255,250), radiogroup(1)
button  bounds( 10,240, 80,20), text("Random","Random"),       channel("rnd"),    value(0), fontcolour:0(255,255,255,50), fontcolour:1(125,175,155,250), radiogroup(1)
button  bounds( 10,260, 80,20), text("Stop","Stop"),           channel("stop"),   value(0), fontcolour:0(255,255,255,50), fontcolour:1(255, 55, 55,250), radiogroup(1)
}
</Cabbage>                                                   
                    
<CsoundSynthesizer>                                                                                                 

<CsOptions>                                                     
-dm0 -n -+rtmidi=null -M0                                        
</CsOptions>
                                  
<CsInstruments>

sr 		= 	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (1=MONO)
0dbfs		=	1	;MAXIMUM AMPLITUDE     

gisine		ftgen	0,0,4096,10,1

; tables for note numbers, velocities and speeds **gentable and ftgen seems unreliable at the moment. Tables created in score instead.**
;ginotes		ftgen	1,0, 8,-2, 48,50,46,48,54,53,51,42
;giamps		ftgen	2,0, 8,-2, 0.8 ,0.37,0.4 ,0.7 ,0.4 ,0.8 ,0.45,0.5
;gispeeds	ftgen	3,0, 8,-2, 2,2,2,1,1,2,1,1

; function table numbers (tables created in score)
ginotes		=	1
giamps		=	2
gispeeds	=	3


/* UDOs */
opcode	scale_i, i, iii					; i-rate version of the 'scale' opcode
	ival,imax,imin	xin
	ival		=	(ival*(imax-imin))+imin
			xout	ival
endop

opcode	FreqShifter,a,aki					; frequency shifter
	ain,kfshift,ifn	xin					;READ IN INPUT ARGUMENTS
	areal, aimag hilbert ain				;HILBERT OPCODE OUTPUTS TWO PHASE SHIFTED SIGNALS, EACH 90 OUT OF PHASE WITH EACH OTHER
	asin 	oscili       1,    kfshift,     ifn,          0
	acos 	oscili       1,    kfshift,     ifn,          0.25	
	;RING MODULATE EACH SIGNAL USING THE QUADRATURE OSCILLATORS AS MODULATORS
	amod1	=		areal * acos
	amod2	=		aimag * asin	
	;UPSHIFTING OUTPUT
	aFS	= (amod1 - amod2)
		xout	aFS				;SEND AUDIO BACK TO CALLER INSTRUMENT
endop

instr	1							; play note sequence
	gktempo	chnget	"tempo"					; read tempo from widget
	kstop	chnget	"stop"
	gkspeed	init	1					; initialise speed value (may be changed later in instrument 3)
	gkdir	chnget	"dir"
	gindx	init	0					; initialise index to the start of the sequence
	ginotecount	init	0				; initialise note counter (counts all the notes that have occured without wrapping)
	ktrig	metro	(gktempo*gkspeed)/60			; metronome
	schedkwhen	ktrig*(1-kstop),0,0,2,0,-1		; trigger instr 2
endin

instr	2
	inote	table	gindx,ginotes				; read note number from table (range: 0 - 1)
	inote	=	int(inote)
	gknote	init	inote             			; set global krate variable for note number
	iamp	table	gindx,giamps				; read amplitude from table (range: 0 - 1)
	gkamp	init	iamp					; set global krate variable for amplitude
	ispeed	table	gindx,gispeeds        			; read speed from table (range: 0 - 1)
	ispeed	limit	ispeed,1,4
	ispeed	=	int(ispeed)
	gkspeed	init	ispeed					; set global krate variable for speed
	idur	chnget	"dur"					; read envelope duration from table
	gkcf	expseg	inote+(60*iamp),idur,inote,1,inote	; create filter cutoff envelope
	kfilt	chnget	"filt"					; read filter envelope shift from widget
	gkcf	limit	cpsmidinn(gkcf+(12*kfilt)),20,20000	; convert envelope from note number to CPS, shift up or down and limit to prevent out of range values

	ibwd	chnget	"bwd"
	ifwdbwd	chnget	"fwdbwd"
	ifwd	chnget	"fwd"
	irnd	chnget	"rnd"
	ifreeze	chnget	"freeze"
	istop	chnget	"stop"
	if ibwd==1 then
	 idir	=	3
	elseif ifwdbwd==1 then
	 idir	=	2
	elseif ifwd==1 then
	 idir	=	1
	elseif irnd==1 then
	 idir	=	(int(random:i(0,2))*2)+1
	 print	idir
	elseif ifreeze==1 then
	 idir	=	0
	elseif istop==1 then
	 idir	=	0
	endif
	


	/* MOVE AND PRINT SCRUBBER HIGHLIGHTER */
	iScrubPos	=	5 + (gindx*50)			; derive x-position
	Smsg	sprintf	"pos(%d,5)",iScrubPos			; create message string
	chnset	Smsg,"ScrubberID"				; send new position to widget
	
		
	/* SHIFT INDEX FOR NEXT NOTE */
	if(idir==1) then					; FWD
	 ginotecount	=	ginotecount+1			; increment note index
	 gindx	wrap	ginotecount,0,ftlen(ginotes)		; wrap out of range values
	 gindx	=	int(gindx)
	elseif(idir==2) then					; FWD/BWD
	 ginotecount	=	ginotecount+1			; increment note index 
	 gindx	mirror	ginotecount,0,ftlen(ginotes)-1		; mirror out of range values
	 gindx	=	int(gindx)
	elseif(idir==3) then					; BWD
	 ginotecount	=	ginotecount-1			; decrement note index 
	 gindx	wrap	ginotecount,-0.5,ftlen(ginotes)-0.5	; wrap out of range values
	 gindx	=	int(gindx)
	endif
endin

instr	3
	kres		chnget	"res"				; read in widgets...
	klev		chnget	"amp"
	kecho		chnget	"echo"
	krpts		chnget	"rpts"
	kfshift		chnget	"fshift"
	kporttime	linseg	0,0.001,1			; portamento time ramps up quickly from zero, holds at '1'                                 
	knote	portk	gknote,kporttime*0.001			; portamento smoothing to note number changes         
	kcf	portk	gkcf,kporttime*0.001			; portamento smoothing to filter cutoff frequency (prevents clicks resulting from discontinuities)
	kamp	portk	gkamp,kporttime				; portamento smoothing to amplitude (prevents clicks resulting from discontinuities)
	a1	vco2	gkamp*klev,cpsmidinn(knote),0,0.5	; VCO audio signal generator
	a1	moogladder	a1,kcf,kres			; moogladder lowpass filter                                                                                                                                                                                                                
	a1	FreqShifter	a1,cpsmidinn(knote)*kfshift*0.5,gisine	; frequency shift applied to audio signal (using a UDO: see above). Frequency is a function of note number of the sequence and the on-screen control 'harm.'
	idry	ftgen	0,0,1024,7,1,512,1,512,0		; table used to shape amplitude control of the 'dry' signal level
	kdry	table	kecho,idry,1				; read 'dry' signal level
	aR	=	a1 * klev * kdry			; scale audio signal with 'Level' and 'Echo' controls
	aL	delay	aR,0.002				; slightly delay audio signal (used to create a stereo effect)
		outs	aL,aR					; send audio to outputs (left channel slightly delayed)
	
	/* DELAY EFFECT */
	ktime	chnget	"time"					; read delay time from widget (arbitrary value)
	itimes	ftgen	0,0,8, -2, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2	; table of delay time multipliers
	kmult	table	ktime,itimes				; read delay time multiplier
	ktempo	portk	gktempo,kporttime			; long portamento smoothing to changes in tempo
	kmult	portk	kmult,kporttime*0.001			; very short portamento smoothing to changes to delay time using the 'Time' widget
	kdeltim	=	(60/ktempo)*kmult			; calculate delay time
	adeltim	interp	kdeltim					; convert to a-rate with interpolation  
	abuf	delayr	(60*2)/10				; create an audio delay buffer
	atapL	deltapi	adeltim					; tap delay buffer
		delayw	(aL*kecho)+(atapL*krpts)		; write audio into delay buffer. Add in a bit of feedback
	abuf	delayr	(60*2)/10				; create an audio delay buffer
	atapR	deltapi	adeltim					; tap delay buffer
		delayw	(aR*kecho)+(atapR*krpts)		; write audio into delay buffer. Add in a bit of feedback
		outs	atapL,atapR				; send audio to outputs (right channel slightly delayed)
endin                                                                                                                     


</CsInstruments>

<CsScore>
; tables for note numbers, velocities and speeds
f 1 0  8 -2  48 50 46 48 54 53 51 42
f 2 0  8 -2  0.8  0.37 0.4  0.7  0.4  0.8  0.45 0.5
f 3 0  8 -2  2 2 2 1 1 2 1 1

i 1 0 [3600*24*7]		; instrument to play note sequence
i 3 0 [3600*24*7]		; instrument to play note sequence
</CsScore>                            

</CsoundSynthesizer>
; GEN05.csd
; Demonstration of GEN05
; Written by Iain McCurdy, 2014
; 
; GEN05 generates breakpoint functions by joining user-defined values using exponential curves each of user-definable duration.
; Node values must be non-zero and alike in sign.
; 
; In this example the user can input node values of zero but these will be offset using the value of the 'Offset' control.
; It can be observed how changing this offset value will vary the curvature of segments.
; 
; An audio test generator uses this function table as a repeating amplitude envelope. 
; The offset value is subtracted so that the envelope can experience values of zero. 

<Cabbage>
form caption("GEN05"), size(245, 390), pluginid("gn05"), colour(13, 50, 67,50) style("legacy")

label    bounds( 10,  8, 95, 15), text("Edit Method:")
combobox bounds(105,  5, 80, 20), text("sliders","drawing"), value(1), channel("mode")

gentable bounds( 10, 30, 225, 120), tablenumber(1), tablecolour("silver"), identchannel("table"), amprange(0,1.1,1), zoom(-1), active(1)

rslider bounds( 10,150, 50, 70), channel("val1"), text("Value.1"), textBox(1), range(0, 1, 0), colour(100,130,130,250), trackercolour("silver")
rslider bounds( 70,150, 50, 70), channel("val2"), text("Value.2"), textBox(1), range(0, 1, 1), colour(100,130,130,250), trackercolour("silver")
rslider bounds(130,150, 50, 70), channel("val3"), text("Value.3"), textBox(1), range(0, 1, 0), colour(100,130,130,250), trackercolour("silver")

rslider bounds(190,150, 50, 70), channel("offset"), text("Offset"), textBox(1), range(0.0001, 0.1, 0.001), colour(200,130,130, 50), trackercolour("silver")

rslider bounds( 40,225, 50, 70), channel("dur1"), text("Dur.1"), textBox(1), range(0, 4096, 0, 1, 1), colour(130,100,130,250), trackercolour("silver")
rslider bounds(100,225, 50, 70), channel("dur2"), text("Dur.2"), textBox(1), range(0, 4096, 4096, 1, 1), colour(130,100,130,250), trackercolour("silver")
              
line     bounds( 10,300,225,  2), colour("Grey")
checkbox bounds( 15,310,80, 17), channel("TestGen"), text("Test"),  value(1), colour("yellow"), shape("square")
rslider  bounds( 60,310, 70, 70), channel("speed"), text("Speed"), textBox(1), range(0.25, 8.00, 1,0.5,0.001),   colour(250,230,250,250), trackercolour("silver")
rslider  bounds(120,310, 70, 70), channel("freq"),  text("Freq."), textBox(1), range(50, 5000, 500,0.5,0.1),     colour(250,230,250,250), trackercolour("silver")
rslider  bounds(180,310, 70, 70), channel("lev"),   text("Level"), textBox(1), range(0, 1.00, 0.5),              colour(250,230,250,250), trackercolour("silver")

</Cabbage>
                    
<CsoundSynthesizer>

<CsOptions>   
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (1=MONO)
0dbfs		=	1	;MAXIMUM AMPLITUDE

instr	1
	kmode	chnget	"mode"
	if kmode==1 then

		; read in widgets
		gkval1	chnget	"val1"
		gkval2	chnget	"val2"
		gkval3	chnget	"val3"
        	
		gkdur1	chnget	"dur1"
		gkdur2	chnget	"dur2"
        	
		gkoffset	chnget	"offset"
		gkoffset	init	0.001
		
		; if any of the variables in the input list are changed, a momentary '1' trigger is generated at the output. This trigger is used to update function tables.
		ktrig	changed		gkval1,gkval2,gkval3,gkdur1,gkdur2,gkoffset
		if ktrig==1 then
		 reinit	UPDATE
		endif
		UPDATE:
		; Update function table
		  if	(i(gkdur1)+i(gkdur2))>4096 then				; if sum of segments exceeds table size...
		   idur1	=	i(gkdur1)* (4096/(i(gkdur1)+i(gkdur2)))	; ...scale segment durations down
		   idur2	=	i(gkdur2)* (4096/(i(gkdur1)+i(gkdur2)))
		   irem		=	0					; remainder duration of table
		  else								; if sum of segments is less than table size...
		   idur1	=	i(gkdur1)
		   idur2	=	i(gkdur2)
		   irem		=	4096 - (i(gkdur1) + i(gkdur2))		; remainder duration of table
		  endif
		gi1	ftgen	1, 0,   4096, -5, i(gkval1)+i(gkoffset), idur1, i(gkval2)+i(gkoffset), idur2, i(gkval3)+i(gkoffset), irem, i(gkoffset)
		chnset	"tablenumber(1)", "table"	; update table display	
		rireturn
	endif

	kTestGen	chnget	"TestGen"				; test generator on/off
	kspeed	chnget	"speed"
	kamp	chnget	"lev"
	kfreq	chnget	"freq"
	aphasor	phasor	kspeed
	aenv	tablei	aphasor,gi1,1
	asig	vco2	0.4*kamp*kTestGen,kfreq,4,0.5			; triangle audio wave
	asig	=	asig * (aenv - gkoffset)			; remove GEN05 offset
		outs	asig, asig
endin

</CsInstruments>

<CsScore>
; create the function table
f 1 0    4096 -16  1 0 0
; play instrument 1 for 1 hour
i 1 0 3600
</CsScore>

</CsoundSynthesizer>
; GEN07.csd
; Demonstration of GEN07
; Written by Iain McCurdy, 2014
;
; GEN07 generates breakpoint functions by joining user-defined values using straight lines each of user-definable duration.
; The user can toggle between using the sliders to input data for the envelope or by drawing and clicking and dragging on 
; the actual waveform. 
;
; An audio test generator uses this function table as a repeating amplitude envelope. 
; The offset value is subtracted so that the envelope can experience values of zero. 

<Cabbage>
form caption("GEN07"), size(250,400), pluginid("gn07"), colour(13, 50, 67,50) style("legacy")

label    bounds( 10,  8, 95, 15), text("Edit Method:")
combobox bounds(105,  5, 80, 20), text("sliders","drawing"), value(1), channel("mode")

gentable bounds( 15, 30, 225, 120), tablenumbers(1), tablecolour("blue"), tablebackgroundcolour("white"), tablegridcolour(230,230,230), identchannel("table"), amprange(0,1,1), zoom(-1), active(1)
label    bounds(  0, 26,15,9), text("1")
label    bounds(  0, 38,15,9), text("0.9")
label    bounds(  0, 50,15,9), text("0.8")
label    bounds(  0, 62,15,9), text("0.7")
label    bounds(  0, 74,15,9), text("0.6")
label    bounds(  0, 86,15,9), text("0.5")
label    bounds(  0, 99,15,9), text("0.4")
label    bounds(  0,110,15,9), text("0.3")
label    bounds(  0,122,15,9), text("0.2")
label    bounds(  0,134,15,9), text("0.1")
label    bounds(  0,146,15,9), text("0")
label    bounds( 31,151,15,9), text("0.1")
label    bounds( 54,151,15,9), text("0.2")
label    bounds( 77,151,15,9), text("0.3")
label    bounds( 99,151,15,9), text("0.4")
label    bounds(122,151,15,9), text("0.5")
label    bounds(145,151,15,9), text("0.6")
label    bounds(167,151,15,9), text("0.7")
label    bounds(189,151,15,9), text("0.8")
label    bounds(212,151,15,9), text("0.9")
label    bounds(232,151,15,9), text("1")

rslider  bounds( 40,160, 50, 70), channel("val1"), text("Value.1"), textBox(1), range(0, 1, 0), colour(100,130,130,250), trackercolour("silver")
rslider  bounds(100,160, 50, 70), channel("val2"), text("Value.2"), textBox(1), range(0, 1, 1), colour(100,130,130,250), trackercolour("silver")
rslider  bounds(160,160, 50, 70), channel("val3"), text("Value.3"), textBox(1), range(0, 1, 0), colour(100,130,130,250), trackercolour("silver")

rslider  bounds( 70,235, 50, 70), channel("dur1"), text("Dur.1"), textBox(1), range(0, 1, 0.2, 1, 0.001), colour(130,100,130,250), trackercolour("silver")
rslider  bounds(130,235, 50, 70), channel("dur2"), text("Dur.2"), textBox(1), range(0, 1, 0.8, 1, 0.001), colour(130,100,130,250), trackercolour("silver")

line     bounds( 10,310,225,  2), colour("Grey")
checkbox bounds( 15,320,80, 17), channel("TestGen"), text("Test"),  value(1), colour("yellow"), shape("square")
rslider  bounds( 60,320, 70, 70), channel("speed"), text("Speed"), textBox(1), range(0.25, 8.00, 1,0.5,0.001),   colour(250,230,250,250), trackercolour("silver")
rslider  bounds(120,320, 70, 70), channel("freq"),  text("Freq."), textBox(1), range(50, 5000, 500,0.5,0.1),     colour(250,230,250,250), trackercolour("silver")
rslider  bounds(180,320, 70, 70), channel("lev"),   text("Level"), textBox(1), range(0, 1.00, 0.5),              colour(250,230,250,250), trackercolour("silver")

</Cabbage>
                    
<CsoundSynthesizer>

<CsOptions>   
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (1=MONO)
0dbfs		=	1	;MAXIMUM AMPLITUDE

giTabLen	=	1024

instr	1
	kmode	chnget	"mode"
	if kmode==1 then

		; read in widgets
		gkval1	chnget	"val1"
		gkval2	chnget	"val2"
		gkval3	chnget	"val3"
        	
		gkdur1	chnget	"dur1"
		gkdur2	chnget	"dur2"
		
		gkdur1	*=	giTabLen
		gkdur2	*=	giTabLen
		
		; if any of the variables in the input list are changed, a momentary '1' trigger is generated at the output. This trigger is used to update function tables.
		ktrig	changed		gkval1,gkval2,gkval3,gkdur1,gkdur2
		if ktrig==1 then
		 reinit	UPDATE
		endif
		UPDATE:
		; Update function table
		  if	(i(gkdur1)+i(gkdur2))>giTabLen then				; if sum of segments exceeds table size...
		   idur1	=	i(gkdur1)* (giTabLen/(i(gkdur1)+i(gkdur2)))	; ...scale segment durations down
		   idur2	=	i(gkdur2)* (giTabLen/(i(gkdur1)+i(gkdur2)))
		   irem		=	0					; remainder duration of table
		  else								; if sum of segments is less than table size...
		   idur1	=	i(gkdur1)
		   idur2	=	i(gkdur2)
		   irem		=	giTabLen - (i(gkdur1) + i(gkdur2))		; remainder duration of table
		  endif
		gi1	ftgen	1, 0,   giTabLen, -7, i(gkval1), idur1, i(gkval2), idur2, i(gkval3), irem, 0
		chnset	"tablenumber(1)", "table"	; update table display	
		rireturn
	endif

	kTestGen	chnget	"TestGen"				; test generator on/off
	kspeed	chnget	"speed"
	kamp	chnget	"lev"
	kfreq	chnget	"freq"
	aphasor	phasor	kspeed
	aenv	tablei	aphasor,gi1,1
	asig	vco2	0.4*kamp*kTestGen,kfreq,4,0.5			; triangle audio wave
	asig	=	asig * aenv					; 
		outs	asig, asig
endin

</CsInstruments>

<CsScore>
; play instrument 1 for 1 hour
i 1 0 3600
</CsScore>

</CsoundSynthesizer>
; GEN08.csd
; Written by Iain McCurdy, 2013

; Demonstration of GEN08 (generates as smooth a line as possible between a sequence of user-defined break points)
; The user defines a number of nodes (the amplitude values at these nodes are modulated randomly)
; Random value sequence can be wrapped so that values are repeated for higher nodes.

; Nodes		-	number of nodes
; Wrap		-	number of nodes before wrap-around
; Speed		-	speed of random modulation
; Level		-	amplitude level of the synthesizer
; Reverb	-	amount of reverb 
; Env.Shape	-	Duration of attack and release of synthesizer notes 

<Cabbage>
form caption("GEN08"), size(410, 300), pluginid("gn08"), colour(120,70,170,150) style("legacy")

gentable bounds(  5,  5, 400, 120), identchannel("table1"), tablenumber(1), tablecolour("yellow"), amprange(-1,1,1), outlinethickness(2), tablegridcolour(0,0,0,0), zoom(-1), fill(1)

rslider bounds( 15,130, 80, 80), channel("nodes"), text("Nodes"), textbox(1), valuetextbox(1), range(1, 16, 16,1,1),        colour(160,110,210,200), trackercolour("yellow"), outlinecolour(100,100,100), fontcolour("white"), textcolour("white")
rslider bounds( 75,130, 80, 80), channel("wrap"), text("Repeat"), textbox(1), valuetextbox(1), range(2, 16,16,1,1),         colour(160,110,210,200), trackercolour("yellow"), outlinecolour(100,100,100), fontcolour("white"), textcolour("white")
rslider bounds(135,130, 80, 80), channel("speed"), text("Speed"), textbox(1), valuetextbox(1), range(1, 5.00, 1),           colour(160,110,210,200), trackercolour("yellow"), outlinecolour(100,100,100), fontcolour("white"), textcolour("white")
rslider bounds(195,130, 80, 80), channel("level"), text("Level"), textbox(1), valuetextbox(1), range(0, 1.00,0.1),          colour(160,110,210,200), trackercolour("yellow"), outlinecolour(100,100,100), fontcolour("white"), textcolour("white")
rslider bounds(255,130, 80, 80), channel("reverb"), text("Reverb"), textbox(1), valuetextbox(1), range(0, 1.00,0.1),        colour(160,110,210,200), trackercolour("yellow"), outlinecolour(100,100,100), fontcolour("white"), textcolour("white")
rslider bounds(315,130, 80, 80), channel("EnvShape"), text("Env.Shape"), textbox(1), valuetextbox(1), range(0, 2.00,0.5),   colour(160,110,210,200), trackercolour("yellow"), outlinecolour(100,100,100), fontcolour("white"), textcolour("white")

keyboard bounds(  0,220,410, 80)
</Cabbage>
                    
<CsoundSynthesizer>

<CsOptions>   
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100	; SAMPLE RATE
ksmps 		= 	8	; NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	; NUMBER OF CHANNELS (1=MONO)
0dbfs		=	1	; MAXIMUM AMPLITUDE
		massign	0,3	; send all midi notes to instr 3 
		zakinit	16,16

; default waveform		
giwave	ftgen	1,0, 512, 8, 0, 512/16,rnd(2)-1, 512/16,rnd(2)-1, 512/16,rnd(2)-1, 512/16,rnd(2)-1, 512/16,rnd(2)-1, 512/16,rnd(2)-1, 512/16,rnd(2)-1, 512/16,rnd(2)-1, 512/16,rnd(2)-1, 512/16,rnd(2)-1, 512/16,rnd(2)-1, 512/16,rnd(2)-1, 512/16,rnd(2)-1, 512/16,rnd(2)-1, 512/16,rnd(2)-1, 512/16, 0

instr	1
	; read in widgets
	gknodes	chnget	"nodes"
	gknodes	init	16
	kwrap	chnget	"wrap"
	kwrap	init	16
	kspeed		chnget	"speed"
	gklevel		chnget	"level"
	gkreverb	chnget	"reverb"
	gkEnvShape	chnget	"EnvShape"
	
	iftlen	=	ftlen(1)		; length of function  table


; define a macro that will be used create a random amplitude
#define	RandStr(N)	
#
	kstr$N	rspline	-0.9,0.9,0.1*kspeed,1*kspeed
		zkw	kstr$N, $N
#
; expand macro multiple times
$RandStr(1)
$RandStr(2)
$RandStr(3)
$RandStr(4)
$RandStr(5)
$RandStr(6)
$RandStr(7)
$RandStr(8)
$RandStr(9)
$RandStr(10)
$RandStr(11)
$RandStr(12)
$RandStr(13)
$RandStr(14)
$RandStr(15)
$RandStr(16)


; define macro for reading random amplitude values		
#define	ReadStr(N)
#
kndx	wrap	$N,1,kwrap
kstr$N	zkr	kndx
#
; expand macro multiple times
$ReadStr(1) 
$ReadStr(2) 
$ReadStr(3) 
$ReadStr(4) 
$ReadStr(5) 
$ReadStr(6) 
$ReadStr(7) 
$ReadStr(8) 
$ReadStr(9) 
$ReadStr(10)
$ReadStr(11)
$ReadStr(12)
$ReadStr(13)
$ReadStr(14)
$ReadStr(15)
$ReadStr(16)

	if metro(200)==1 then	; peg rate of update. Tables updated at this rate. If too slow, glitching will be heard in the output, particularly if random movement speed is high. If too high CPU performance will suffer.
	 reinit	UPDATE
	endif
	UPDATE:
	
	; generation of wave for each configuration of number of nodes
	; 1 node
	#define	N	#1#
	if i(gknodes)==$N then
	 giwave	ftgen	1,0, iftlen, 8, 0, iftlen/($N+1),i(kstr1),   iftlen/($N+1),   0

	#define	N	#2#
	; 2 nodes
	elseif i(gknodes)==$N then
	 giwave	ftgen	1,0, iftlen, 8, 0, iftlen/($N+1),i(kstr1), iftlen/($N+1),i(kstr2),   iftlen/($N+1),   0

	#define	N	#3#
	elseif i(gknodes)==$N then
	 giwave	ftgen	1,0, iftlen, 8, 0, iftlen/($N+1),i(kstr1), iftlen/($N+1),i(kstr2), iftlen/($N+1),i(kstr3),   iftlen/($N+1),   0

	#define	N	#4#
	elseif i(gknodes)==$N then
	 giwave	ftgen	1,0, iftlen, 8, 0, iftlen/($N+1),i(kstr1), iftlen/($N+1),i(kstr2), iftlen/($N+1),i(kstr3), iftlen/($N+1),i(kstr4),   iftlen/($N+1),   0

	#define	N	#5#
	elseif i(gknodes)==$N then
	 giwave	ftgen	1,0, iftlen, 8, 0, iftlen/($N+1),i(kstr1), iftlen/($N+1),i(kstr2), iftlen/($N+1),i(kstr3), iftlen/($N+1),i(kstr4), iftlen/($N+1),i(kstr5),   iftlen/($N+1),   0

	#define	N	#6#
	elseif i(gknodes)==$N then
	 giwave	ftgen	1,0, iftlen, 8, 0, iftlen/($N+1),i(kstr1), iftlen/($N+1),i(kstr2), iftlen/($N+1),i(kstr3), iftlen/($N+1),i(kstr4), iftlen/($N+1),i(kstr5), iftlen/($N+1),i(kstr6),   iftlen/($N+1),   0

	#define	N	#7#
	elseif i(gknodes)==$N then
	 giwave	ftgen	1,0, iftlen, 8, 0, iftlen/($N+1),i(kstr1), iftlen/($N+1),i(kstr2), iftlen/($N+1),i(kstr3), iftlen/($N+1),i(kstr4), iftlen/($N+1),i(kstr5), iftlen/($N+1),i(kstr6), iftlen/($N+1),i(kstr7),   iftlen/($N+1),   0

	#define	N	#8#
	elseif i(gknodes)==$N then
	 giwave	ftgen	1,0, iftlen, 8, 0, iftlen/($N+1),i(kstr1), iftlen/($N+1),i(kstr2), iftlen/($N+1),i(kstr3), iftlen/($N+1),i(kstr4), iftlen/($N+1),i(kstr5), iftlen/($N+1),i(kstr6), iftlen/($N+1),i(kstr7), iftlen/($N+1),i(kstr8),   iftlen/($N+1),   0

	#define	N	#9#
	elseif i(gknodes)==$N then
	 giwave	ftgen	1,0, iftlen, 8, 0, iftlen/($N+1),i(kstr1), iftlen/($N+1),i(kstr2), iftlen/($N+1),i(kstr3), iftlen/($N+1),i(kstr4), iftlen/($N+1),i(kstr5), iftlen/($N+1),i(kstr6), iftlen/($N+1),i(kstr7), iftlen/($N+1),i(kstr8), iftlen/($N+1),i(kstr9),   iftlen/($N+1),   0

	#define	N	#10#
	elseif i(gknodes)==$N then
	 giwave	ftgen	1,0, iftlen, 8, 0, iftlen/($N+1),i(kstr1), iftlen/($N+1),i(kstr2), iftlen/($N+1),i(kstr3), iftlen/($N+1),i(kstr4), iftlen/($N+1),i(kstr5), iftlen/($N+1),i(kstr6), iftlen/($N+1),i(kstr7), iftlen/($N+1),i(kstr8), iftlen/($N+1),i(kstr9), iftlen/($N+1),i(kstr10),   iftlen/($N+1),   0

	#define	N	#11#
	elseif i(gknodes)==$N then
	 giwave	ftgen	1,0, iftlen, 8, 0, iftlen/($N+1),i(kstr1), iftlen/($N+1),i(kstr2), iftlen/($N+1),i(kstr3), iftlen/($N+1),i(kstr4), iftlen/($N+1),i(kstr5), iftlen/($N+1),i(kstr6), iftlen/($N+1),i(kstr7), iftlen/($N+1),i(kstr8), iftlen/($N+1),i(kstr9), iftlen/($N+1),i(kstr10), iftlen/($N+1),i(kstr11),   iftlen/($N+1),   0

	#define	N	#12#
	elseif i(gknodes)==$N then
	 giwave	ftgen	1,0, iftlen, 8, 0, iftlen/($N+1),i(kstr1), iftlen/($N+1),i(kstr2), iftlen/($N+1),i(kstr3), iftlen/($N+1),i(kstr4), iftlen/($N+1),i(kstr5), iftlen/($N+1),i(kstr6), iftlen/($N+1),i(kstr7), iftlen/($N+1),i(kstr8), iftlen/($N+1),i(kstr9), iftlen/($N+1),i(kstr10), iftlen/($N+1),i(kstr11), iftlen/($N+1),i(kstr12),   iftlen/($N+1),   0

	#define	N	#13#
	elseif i(gknodes)==$N then
	 giwave	ftgen	1,0, iftlen, 8, 0, iftlen/($N+1),i(kstr1), iftlen/($N+1),i(kstr2), iftlen/($N+1),i(kstr3), iftlen/($N+1),i(kstr4), iftlen/($N+1),i(kstr5), iftlen/($N+1),i(kstr6), iftlen/($N+1),i(kstr7), iftlen/($N+1),i(kstr8), iftlen/($N+1),i(kstr9), iftlen/($N+1),i(kstr10), iftlen/($N+1),i(kstr11), iftlen/($N+1),i(kstr12), iftlen/($N+1),i(kstr13),   iftlen/($N+1),   0

	#define	N	#14#
	elseif i(gknodes)==$N then
	 giwave	ftgen	1,0, iftlen, 8, 0, iftlen/($N+1),i(kstr1), iftlen/($N+1),i(kstr2), iftlen/($N+1),i(kstr3), iftlen/($N+1),i(kstr4), iftlen/($N+1),i(kstr5), iftlen/($N+1),i(kstr6), iftlen/($N+1),i(kstr7), iftlen/($N+1),i(kstr8), iftlen/($N+1),i(kstr9), iftlen/($N+1),i(kstr10), iftlen/($N+1),i(kstr11), iftlen/($N+1),i(kstr12), iftlen/($N+1),i(kstr13), iftlen/($N+1),i(kstr14),   iftlen/($N+1),   0

	#define	N	#15#
	elseif i(gknodes)==$N then
	 giwave	ftgen	1,0, iftlen, 8, 0, iftlen/($N+1),i(kstr1), iftlen/($N+1),i(kstr2), iftlen/($N+1),i(kstr3), iftlen/($N+1),i(kstr4), iftlen/($N+1),i(kstr5), iftlen/($N+1),i(kstr6), iftlen/($N+1),i(kstr7), iftlen/($N+1),i(kstr8), iftlen/($N+1),i(kstr9), iftlen/($N+1),i(kstr10), iftlen/($N+1),i(kstr11), iftlen/($N+1),i(kstr12), iftlen/($N+1),i(kstr13), iftlen/($N+1),i(kstr14), iftlen/($N+1),i(kstr15),   iftlen/($N+1),   0

	#define	N	#16#
	elseif i(gknodes)==$N then
	 giwave	ftgen	1,0, iftlen, 8, 0, iftlen/($N+1),i(kstr1), iftlen/($N+1),i(kstr2), iftlen/($N+1),i(kstr3), iftlen/($N+1),i(kstr4), iftlen/($N+1),i(kstr5), iftlen/($N+1),i(kstr6), iftlen/($N+1),i(kstr7), iftlen/($N+1),i(kstr8), iftlen/($N+1),i(kstr9), iftlen/($N+1),i(kstr10), iftlen/($N+1),i(kstr11), iftlen/($N+1),i(kstr12), iftlen/($N+1),i(kstr13), iftlen/($N+1),i(kstr14), iftlen/($N+1),i(kstr15), iftlen/($N+1),i(kstr16),   iftlen/($N+1),   0

	endif
	
	rireturn

	if metro(32)==1 then			; peg table display rate. Audio quality is unaffected by this.
	 chnset	"tablenumber(1)", "table1"	; update table display	
	endif
endin

gaSendL,gaSendR	init	0	; initialise reverb send variables

instr	3
	icps	cpsmidi					; CPS from midi note played
	iamp	ampmidi	1				; amplitude from midi note velocity 
	
	a1	oscili	iamp*gklevel,icps/4,giwave	; audio oscillator read GEN08 wave created
	a1	*=		oscili:a(1,(icps/4)+oscili:a(icps/100,icps/4,giwave),giwave)	; ring modulate it with itself
		
	a2	delay	-a1,0.01

	aenv	transegr	0,2*i(gkEnvShape),-4,1,4*i(gkEnvShape),-4,0	; amplitude envelope

	a1	=	a1 * aenv			; apply envelope
	a2	=	a2 * aenv			; apply envelope
	
	gaSendL	=	gaSendL + (a1*gkreverb)
	gaSendR	=	gaSendR + (a2*gkreverb)
		outs	a1*(1-gkreverb), a2*(1-gkreverb)	; send audio to outputs
endin


instr	Reverb
	a1,a2	reverbsc	gaSendL,gaSendR, 0.85, 8000
		outs		a1,a2
		clear		gaSendL,gaSendR
endin

</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
i "Reverb" 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>
; GEN08_Envelopes.csd
; Written by Iain McCurdy, 2015.

; A method of editing GEN08 function tables by clicking and dragging breakpoints.
; GEN08 generates function tables by drawing the smoothest possible curve between defined breakpoints.
; Note that this can often result in the function extending well above the highest breakpoint or well below the lowest breakpoint.
; In the example when the functions are used as amplitude envelopes they are clipped at zero and 1 to prevent out of range amplitudes.
; It is also to normalise the function to fit within the range 0 to 1. In this case the curve will probably not pass through the breakpoints.

; In this example two envelopes are created: one with 3 breakpoints and the other with 4.
; The first and last breakpoints can only be moved up or down.
; The two envelope types are encapsulated within UDOs to facilitate easy transplantation and reuse.

; Input arguments for the 3-breakpoint envelope are: knorm,iTabX,iTabY,iTabWidth,iTabHeight,iNodeSize,ifn,STabIdent,Snode1,Snode2,Snode3
; iTabX		-	table X location in pixels (from upper panel edge)
; iTabY		-	table Y location in pixels (from left panel edge)
; iTabWidth	-	table width in pixels
; iTabHeight	-	table height in pixels
; iNodeSize	-	node widget radius in pixels
; ifn		-	function table used to store the ADSR (only used for GUI - output values used to create envelope)
; STabIdent	-	a string representing the ident channel of the gentable
; Snode1	-	a string representing the ident channel of the first node
; Snode2	-	a string representing the ident channel of the second node
; Snode3	-	a string representing the ident channel of the third node

; The output arguments are: gky1,gkx2,gky2,gky3
; gky1		-	first breakpoint value	
; gkx2		-	second breakpoint location (0 - 1)
; gky2		-	second breakpoint value	
; gky3		-	third breakpoint value

; The input arguments for the 4-breakpoint envelope are the same except for the addition of an extra node ident channel
; The output arguments for the 4-breakpoint envelope are the same except for the addition of the location and value of the additional breakpoint


<Cabbage>
form caption("GEN08 Envelopes"), size(800, 510), pluginid("G8En"), guirefresh(32), colour(0,0,0) style("legacy")

gentable bounds( 10,  5,380,290), tablenumber(1), tablecolour("silver"), identchannel("table1"), amprange(0,1,1), zoom(-1), tablegridcolour(0,0,0,0), tablebackgroundcolour(20,20,20), outlinethickness(2), identchannel("table1")
label bounds(10, 5,140,12), text("3 Break-point Envelope"), align("left")

gentable bounds(410,  5,380,290), tablenumber(2), tablecolour("silver"), identchannel("table2"), amprange(0,1,2), zoom(-1), tablegridcolour(0,0,0,0), tablebackgroundcolour(20,20,20), outlinethickness(2), identchannel("table2")
label bounds(410, 5,140,12), text("4 Break-point Envelope"), align("left")

label   bounds( -5, -5, 10, 10), text("1"), colour("white"), fontcolour("black"), identchannel("node1")
label   bounds( -5, -5, 10, 10), text("2"), colour("white"), fontcolour("black"), identchannel("node2")
label   bounds( -5, -5, 10, 10), text("3"), colour("white"), fontcolour("black"), identchannel("node3")

nslider  bounds( 10,300, 50,30), text("Value 1"), channel("aV1"), range(0,1,0,1,0.001)
nslider  bounds( 60,300, 50,30), text("Dur. 1"),  channel("aD1"), range(0,1024,0,1,1)
nslider  bounds(110,300, 50,30), text("Value 2"), channel("aV2"), range(0,1,0,1,0.001)
nslider  bounds(160,300, 50,30), text("Dur. 2"),  channel("aD2"), range(0,1024,0,1,1)
nslider  bounds(210,300, 50,30), text("Value 3"), channel("aV3"), range(0,1,0,1,0.001)
nslider  bounds(290,300, 50,30), text("Max"), channel("aMax"), range(0,1000,0,1,0.001)
nslider  bounds(340,300, 50,30), text("Min"), channel("aMin"), range(-1000,0,0,1,0.001)

label   bounds( -5, -5, 10, 10), text("1"), colour("white"), fontcolour("black"), identchannel("node4")
label   bounds( -5, -5, 10, 10), text("2"), colour("white"), fontcolour("black"), identchannel("node5")
label   bounds( -5, -5, 10, 10), text("3"), colour("white"), fontcolour("black"), identchannel("node6")
label   bounds( -5, -5, 10, 10), text("4"), colour("white"), fontcolour("black"), identchannel("node7")

nslider  bounds(410,300, 50,30), text("Value 1"), channel("bV1"), range(0,1,0,1,0.001)
nslider  bounds(460,300, 50,30), text("Dur. 1"),  channel("bD1"), range(0,1024,0,1,1)
nslider  bounds(510,300, 50,30), text("Value 2"), channel("bV2"), range(0,1,0,1,0.001)
nslider  bounds(560,300, 50,30), text("Dur. 2"),  channel("bD2"), range(0,1024,0,1,1)
nslider  bounds(610,300, 50,30), text("Value 3"), channel("bV3"), range(0,1,0,1,0.001)
nslider  bounds(660,300, 50,30), text("Dur. 2"),  channel("bD3"), range(0,1024,0,1,1)
nslider  bounds(710,300, 50,30), text("Value 3"), channel("bV4"), range(0,1,0,1,0.001)
nslider  bounds(690,335, 50,30), text("Max"),     channel("bMax"), range(0,1000,0,1,0.001)
nslider  bounds(740,335, 50,30), text("Min"),     channel("bMin"), range(-1000,0,0,1,0.001)

image bounds( 10,375,780,1), shape("ellipse")

checkbox bounds( 10,350,100, 15), channel("norm"), text("Normalise")

label    bounds(150,390, 90,15) text("Synth uses:"), align("right")
combobox bounds(240,389,130,17), text("3 point envelope","4 point envelope"), channel("env")

hslider  bounds(405,387,390,10), channel("dur"), range(0.2,10,1,0.5,0.001)
label    bounds(405,399,380,12), text("Total Duration")

keyboard bounds( 10, 420, 780, 80)
</Cabbage>
                    
<CsoundSynthesizer>

<CsOptions>   
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100
ksmps 		= 	32
nchnls 		= 	2
0dbfs		=	1
massign	0,2	; all midi plays instr 2



	      opcode         tabmaxk,kk,i		; UDO for deriving maximum value and its index from a table
itabnum       xin     
inumitems     =              ftlen(itabnum)             ; derive number of items in table
kmax          table          0,itabnum                  ; maximum value starts as first table items
kcount        =              1                          ; counter starts at 1 (we've already read item 0)
loop:                                                   ; loop 1 beginning
kval          table          kcount,itabnum             ; read value from table
if kval>=kmax then					; if value read from table is higher than (or equal to) current maximum...
 kmax	=	kval					; ...values becomes new maximum
 kndx	=	kcount					; index of maximum becomes the index of this value
endif							; end of conditional branch
              loop_lt        kcount,1,inumitems,loop    ; conditionally loop back
	      xout           kmax,kndx			; return maximium value to caller instrument
              endop


	      opcode         tabmink,kk,i		; UDO for deriving maximum value and its index from a table
itabnum       xin     
inumitems     =              ftlen(itabnum)             ; derive number of items in table
kmin          table          0,itabnum                  ; maximum value starts as first table items
kcount        =              1                          ; counter starts at 1 (we've already read item 0)
loop:                                                   ; loop 1 beginning
kval          table          kcount,itabnum             ; read value from table
if kval<kmin then					; if value read from table is higher than (or equal to) current maximum...
 kmin	=	kval					; ...values becomes new maximum
 kndx	=	kcount					; index of maximum becomes the index of this value
endif							; end of conditional branch
              loop_lt        kcount,1,inumitems,loop    ; conditionally loop back
	      xout           kmin,kndx			; return maximium value to caller instrument
              endop


opcode	GEN08_3NodeEnvelope,kkkk,kiiiiiiSSSS
 knorm, iTabX, iTabY, iTabWidth, iTabHeight, iNodeSize, ifn, STabIdent, Snode1, Snode2, Snode3	xin

 kMOUSE_X		chnget	"MOUSE_X"
 kMOUSE_Y		chnget	"MOUSE_Y"
 kMOUSE_DOWN_LEFT	chnget	"MOUSE_DOWN_LEFT"
 
 ky1	init	iTabY+iTabHeight-(iNodeSize*0.5)
 kx2	init	iTabX+(iTabWidth*0.5)-(iNodeSize*0.5)
 ky2	init	(iTabHeight*0.5)-(iNodeSize*0.5)
 ky3	init	iTabY+iTabHeight-(iNodeSize*0.5)
 kin1,kin2,kin3	init	0

 kclick		trigger	kMOUSE_DOWN_LEFT,0.5,2
 
 ; test whether click is in widget or not
 if kclick==1 then
  kin1	=	(kMOUSE_X>iTabX-(iNodeSize*0.5)            && kMOUSE_X<iTabX+(iNodeSize*0.5)           && kMOUSE_Y>iTabY+ky1-(iNodeSize*0.5) && kMOUSE_Y<iTabY+ky1+(iNodeSize*0.5) && kMOUSE_DOWN_LEFT==1) ? 1 : 0
  kin2	=	(kMOUSE_X>kx2-(iNodeSize)                  && kMOUSE_X<kx2+(iNodeSize)                 && kMOUSE_Y>iTabY+ky2-(iNodeSize*0.5) && kMOUSE_Y<iTabY+ky2+(iNodeSize*0.5) && kMOUSE_DOWN_LEFT==1) ? 1 : 0
  kin3	=	(kMOUSE_X>iTabX+iTabWidth-(iNodeSize*0.5)  && kMOUSE_X<iTabX+iTabWidth+(iNodeSize*0.5) && kMOUSE_Y>iTabY+ky3-(iNodeSize*0.5) && kMOUSE_Y<iTabY+ky3+(iNodeSize*0.5) && kMOUSE_DOWN_LEFT==1) ? 1 : 0
 endif
 
 ; click and drag
 if kin1==1 then
  ky1	limit	kMOUSE_Y - (iNodeSize*0.5), iTabY-(iNodeSize*0.5), iTabY+iTabHeight-(iNodeSize*0.5)
 endif
 if kin2==1 then
  kx2	limit	kMOUSE_X - (iNodeSize*0.5), iTabX-(iNodeSize*0.5), iTabX+iTabWidth-(iNodeSize*0.5)
  ky2	limit	kMOUSE_Y - (iNodeSize*0.5), iTabY-(iNodeSize*0.5), iTabY+iTabHeight-(iNodeSize*0.5)
 endif
 if kin3==1 then
  ky3	limit	kMOUSE_Y - (iNodeSize*0.5), iTabY-(iNodeSize*0.5), iTabY+iTabHeight-(iNodeSize*0.5)
 endif
  
 kmetro	metro	ksmps

 if kmetro==1 then				; slow down checking
  if changed(knorm)==1 then			; normalise check box changed
   reinit REBUILD_TABLE
  endif
  ktrig	changed	ky1				; node 1 (beginning) moved
  if ktrig==1 then
   Smsg	sprintfk	"pos(%d,%d)", iTabX-(iNodeSize*0.5), ky1
   	chnset	Smsg,Snode1
   reinit REBUILD_TABLE
  endif
  ktrig	changed	kx2,ky2				; node 2 moved
  if ktrig==1 then
   Smsg	sprintfk	"pos(%d,%d)", kx2, ky2
   	chnset	Smsg,Snode2
   reinit REBUILD_TABLE
  endif
  ktrig	changed	ky3				; node 3 (end) moved
  if ktrig==1 then
   Smsg	sprintfk	"pos(%d,%d)", iTabX+iTabWidth-(iNodeSize*0.5), ky3
   	chnset	Smsg,Snode3
   reinit REBUILD_TABLE
  endif
  
  REBUILD_TABLE:
  inorm		=	(i(knorm)*2)-1
  iy1		limit	1-((i(ky1)+(iNodeSize*0.5)-iTabY)/iTabHeight), 0, 1
  ix2		limit	((i(kx2)+(iNodeSize*0.5)-iTabX)/iTabWidth * ftlen(ifn)),1,1022
  iy2		limit	1-((i(ky2)+(iNodeSize*0.5)-iTabY)/iTabHeight), 0, 1
  iy3		limit	1-((i(ky3)+(iNodeSize*0.5)-iTabY)/iTabHeight), 0, 1
  gitable1	ftgen	ifn,0,1024,8*inorm,	iy1, ix2, iy2, 1023-ix2, iy3
  Smsg		sprintf	"tablenumber(%d)",ifn
  	 	chnset	Smsg,STabIdent
  rireturn
 endif

 ky1o	=	1-((ky1+iTabY-(iNodeSize*0.5))/iTabHeight)
 kx2o	=	(kx2-(iNodeSize*0.5))/iTabWidth
 ky2o	=	1-((ky2+iTabY-(iNodeSize*0.5))/iTabHeight)
 ky3o	=	1-((ky3+iTabY-(iNodeSize*0.5))/iTabHeight)
 xout	ky1o,kx2o,ky2o,ky3o

endop














opcode	GEN08_4NodeEnvelope,kkkkkk,kiiiiiiSSSSS
 knorm, iTabX, iTabY, iTabWidth, iTabHeight, iNodeSize, ifn, STabIdent, Snode1, Snode2, Snode3, Snode4	xin

 kMOUSE_X		chnget	"MOUSE_X"
 kMOUSE_Y		chnget	"MOUSE_Y"
 kMOUSE_DOWN_LEFT	chnget	"MOUSE_DOWN_LEFT"
 
 ky1	init	iTabY+iTabHeight-(iNodeSize*0.5)
 kx2	init	iTabX+(iTabWidth*0.33)-(iNodeSize*0.5)
 ky2	init	(iTabHeight*0.5)-(iNodeSize*0.5)
 kx3	init	iTabX+(iTabWidth*0.67)-(iNodeSize*0.5)
 ky3	init	(iTabHeight*0.5)-(iNodeSize*0.5)
 ky4	init	iTabY+iTabHeight-(iNodeSize*0.5)
 kin1,kin2,kin3,kin4	init	0

 kclick		trigger	kMOUSE_DOWN_LEFT,0.5,2
 
 ; test whether click is in widget or not
 if kclick==1 then
  kin1	=	(kMOUSE_X>iTabX-(iNodeSize*0.5)            && kMOUSE_X<iTabX+(iNodeSize*0.5)           && kMOUSE_Y>iTabY+ky1-(iNodeSize*0.5) && kMOUSE_Y<iTabY+ky1+(iNodeSize*0.5) && kMOUSE_DOWN_LEFT==1) ? 1 : 0
  kin2	=	(kMOUSE_X>kx2-iNodeSize                    && kMOUSE_X<kx2+iNodeSize                   && kMOUSE_Y>iTabY+ky2-(iNodeSize*0.5) && kMOUSE_Y<iTabY+ky2+(iNodeSize*0.5) && kMOUSE_DOWN_LEFT==1) ? 1 : 0
  kin3	=	(kMOUSE_X>kx3-iNodeSize                    && kMOUSE_X<kx3+iNodeSize                   && kMOUSE_Y>iTabY+ky3-(iNodeSize*0.5) && kMOUSE_Y<iTabY+ky3+(iNodeSize*0.5) && kMOUSE_DOWN_LEFT==1) ? 1 : 0
  kin4	=	(kMOUSE_X>iTabX+iTabWidth-(iNodeSize*0.5)  && kMOUSE_X<iTabX+iTabWidth+(iNodeSize*0.5) && kMOUSE_Y>iTabY+ky4-(iNodeSize*0.5) && kMOUSE_Y<iTabY+ky4+(iNodeSize*0.5) && kMOUSE_DOWN_LEFT==1) ? 1 : 0
 endif

 ; click and drag
 if kin1==1 then
  ky1	limit	kMOUSE_Y - (iNodeSize*0.5), iTabY-(iNodeSize*0.5), iTabY+iTabHeight-(iNodeSize*0.5)
 endif
 if kin2==1 then
  kx2	limit	kMOUSE_X - (iNodeSize*0.5), iTabX-(iNodeSize*0.5), kx3
  ky2	limit	kMOUSE_Y - (iNodeSize*0.5), iTabY-(iNodeSize*0.5), iTabY+iTabHeight-(iNodeSize*0.5)
 endif
 if kin3==1 then
  kx3	limit	kMOUSE_X - (iNodeSize*0.5), kx2, iTabX+iTabWidth-(iNodeSize*0.5)
  ky3	limit	kMOUSE_Y - (iNodeSize*0.5), iTabY-(iNodeSize*0.5), iTabY+iTabHeight-(iNodeSize*0.5)
 endif
 if kin4==1 then
  ky4	limit	kMOUSE_Y - (iNodeSize*0.5), iTabY-(iNodeSize*0.5), iTabY+iTabHeight-(iNodeSize*0.5)
 endif
  
 kmetro	metro	ksmps

 if kmetro==1 then				; slow down checking
  if changed(knorm)==1 then			; normalise check box changed
   reinit REBUILD_TABLE
  endif
  ktrig	changed	ky1				; node 1 (beginning) moved
  if ktrig==1 then
   Smsg	sprintfk	"pos(%d,%d)", iTabX-(iNodeSize*0.5), ky1
   	chnset	Smsg,Snode1
   reinit REBUILD_TABLE
  endif
  ktrig	changed	kx2,ky2				; node 2 moved
  if ktrig==1 then
   Smsg	sprintfk	"pos(%d,%d)", kx2, ky2
   	chnset	Smsg,Snode2
   reinit REBUILD_TABLE
  endif
  ktrig	changed	kx3,ky3				; node 3 moved
  if ktrig==1 then
   Smsg	sprintfk	"pos(%d,%d)", kx3, ky3
   	chnset	Smsg,Snode3
   reinit REBUILD_TABLE
  endif
  ktrig	changed	ky4				; node 4 (end) moved
  if ktrig==1 then
   Smsg	sprintfk	"pos(%d,%d)", iTabX+iTabWidth-(iNodeSize*0.5), ky4
   	chnset	Smsg,Snode4
   reinit REBUILD_TABLE
  endif
  
  REBUILD_TABLE:
  inorm		=	(i(knorm)*2)-1
  iy1		limit	1-((i(ky1)+(iNodeSize*0.5)-iTabY)/iTabHeight), 0, 1
  ix2		limit	((i(kx2)+(iNodeSize*0.5)-iTabX)/iTabWidth * ftlen(ifn)),1,1022
  iy2		limit	1-((i(ky2)+(iNodeSize*0.5)-iTabY)/iTabHeight), 0, 1
  ix3		limit	((i(kx3)+(iNodeSize*0.5)-iTabX)/iTabWidth * ftlen(ifn))-ix2,1,1022
  iy3		limit	1-((i(ky3)+(iNodeSize*0.5)-iTabY)/iTabHeight), 0, 1
  iy4		limit	1-((i(ky4)+(iNodeSize*0.5)-iTabY)/iTabHeight), 0, 1
  gitable1	ftgen	ifn,0,1024,8*inorm,	iy1, ix2, iy2, ix3, iy3, 1023-ix2-ix3, iy4
  Smsg		sprintf	"tablenumber(%d)",ifn
  	 	chnset	Smsg,STabIdent
  kx2o	init	ix2/ftlen(ifn)
  kx3o	init	ix3/ftlen(ifn)
  rireturn
 endif

 ky1o	=	1-((ky1+iTabY-(iNodeSize*0.5))/iTabHeight)

 ky2o	=	1-((ky2+iTabY-(iNodeSize*0.5))/iTabHeight)
 ky3o	=	1-((ky3+iTabY-(iNodeSize*0.5))/iTabHeight)
 ky4o	=	1-((ky4+iTabY-(iNodeSize*0.5))/iTabHeight)
 xout	ky1o,kx2o,ky2o,kx3o,ky3o,ky4o
endop







instr	1	; create envelopes and interact with Cabbage GUI (via UDOs)
 knorm			chnget	"norm"		; normalise value (0 = don't normalise, 1 = do normalise)
 iTabX			init	10		; table x location in pixels 
 iTabY			init	5		; table y location in pixels
 iTabWidth		init	380		; width of the table in pixels
 iTabHeight		init	290		; height of the table in pixels
 iNodeSize		init	10 		; size of the breakpoint widget in pixels
 ifn			=	1		; function table number

 gky1,gkx2,gky2,gky3	GEN08_3NodeEnvelope	knorm, iTabX,     iTabY, iTabWidth, iTabHeight, iNodeSize, ifn,   "table1", "node1", "node2", "node3"

 if metro(16)==1 then
  if	changed(gky1,gkx2,gky2,gky3,knorm)==1 then
   chnset	gky1,"aV1"
   chnset	gkx2*1024,"aD1"
   chnset	gky2,"aV2"
   chnset	1024*(1-gkx2),"aD2"
   chnset	gky3,"aV3"
   kmin,kndx	tabmink	ifn
   chnset	kmin,"aMin"
   kmax,kndx	tabmaxk	ifn
   chnset	kmax,"aMax"
  endif
 endif
 
;; optional - print out output arguments from envelope
; if changed(gky1,gkx2,gky2,gky3)==1 then
;  Senv	sprintfk	"y1:%f x2:%f y2:%f y3:%f\n",gky1,gkx2,gky2,gky3
;  printks	Senv,0
; endif

 gky1,gkx2,gky2,gkx3,gky3,gky4	GEN08_4NodeEnvelope	knorm, iTabX+400, iTabY, iTabWidth, iTabHeight, iNodeSize, ifn+1, "table2", "node4", "node5", "node6", "node7"

 if metro(16)==1 then
  if	changed(gky1,gkx2,gky2,gkx3,gky3,gky4,knorm)==1 then
   chnset	gky1,"bV1"
   chnset	gkx2*1024,"bD1"
   chnset	gky2,"bV2"
   chnset	gkx3*1024,"bD2"
   chnset	gky3,"bV3"
   chnset	(1-gkx3-gkx2)*1024,"bD3"
   chnset	gky4,"bV4"
   kmin,kndx	tabmink	ifn+1
   chnset	kmin,"bMin"
   kmax,kndx	tabmaxk	ifn+1
   chnset	kmax,"bMax"
  endif
 endif

;; optional - print out output arguments from envelope
; if changed(gky1,gkx2,gky2,gkx3,gky3,gky4)==1 then
;  Senv	sprintfk	"y1:%f x2:%f y2:%f x3:%f y3:%f y4:%f\n",gky1,gkx2,gky2,gkx3,gky3,gky4
;  printks	Senv,0
; endif
 
endin



instr	2
 idur	chnget	"dur"			; envelope duration
 
 if timeinsts()>=idur then		; if full duration is achieved...
  turnoff				; turn instrument off
 endif
 
 kphr	phasor	1/idur			; phasor reads through once
 ienv	chnget	"env"			; envelope type selection (1 or 2, 1 = 3_point, 2 = 4_point)
 kenv	tablei	kphr,ienv,1		; read values from function table. Amplitude envelope.
 kenv	limit	kenv,0,1		; limit to prevent amplitude values that might produce out of range samples
 kenv	expcurve	kenv,8		; shape the dynamics of the envelope to be more musical
 aenv	interp		kenv		; interpolate and create a-rate version of envelope. (Less 'zipper' noise)
 icps	cpsmidi				; read in midi pitch in cps
 asig	vco2	0.2,icps,4,0.5		; create a triangle wave oscillator
 aDeClick	linsegr	1,0.01,0	; de-click envelope (if note is stopped before envelope has completed
 	outs	asig*aenv*aDeClick, asig*aenv*aDeClick	; send audio to outputs, apply amplitude envelope and de-clicking envelope
endin

</CsInstruments>

<CsScore>
i 1 0 3600
</CsScore>

</CsoundSynthesizer>; GEN09.csd
; Written by Iain McCurdy
; "P.N.1-8" 	sets the partial number for each of the 8 partials. Note that "Base" and "Int" will also have an influence upon the partial number values.
; "Str.1-8" 	sets the strengths for the 8 partials.
; "Mute 1-8"	allow the user to mute individual partials
; "Solo 1-8"	allow the user to solo individual partials (multiple solos can be employed)
; "Ph.1-8" 	sets the initial phases (in degrees) for the 8 partials.
; "Base" 	sets a base offset (integer) for all partial numbers. The oscillator frequency will also be divided by this value.
; "Int." 	defines an additional cumulative interval (integer) between partials. E.g. if "Int." is '2', partials 1 will be unaffected, an additional interval of '2' will be added to partial 2, an additional interval of '4' will be added to partial 3 and so on. 
; Table Size	size of the table used by the synthesizer.
;		If table size is reduced quantisation artefacts will become more prevalent, particularly if partial numbers are high. This 'lo-fi' effect may be desirable. 
; 		In actual fact, separate tables are used for each table size but the table display widget only ever displays the ninth table.

; 		The frequency of the audio oscillator is always scaled down according to the lowest partial number defined. This is to ensure that an audible fundemental is always played, something that may not otherwise occur if all partial numbers are high.
; 		The user can choose between three opcodes for synthesis: oscil, oscili or poscil. 
;		The interpolating opcodes oscili and poscil are less likely to produce quantisation artifacts when small table sizes are used.
;		The waveform can be played back using oscbnk (if 'voices' is greater than 1), in which case 'spread' and 'speed' can be used to modify the texture of the tone cluster.

<Cabbage>
form caption("GEN09"), size(420, 555), pluginid("gn09") style("legacy")

gentable bounds( 10,  5, 400, 120), tablenumber(8), tablecolour("LightBlue"), identchannel("table"), zoom(-1)

rslider bounds( 13,130, 43, 43), channel("pn1"), range(1, 200, 1,1,1), colour(230,230,230,200)
rslider bounds( 63,130, 43, 43), channel("pn2"), range(1, 200, 2,1,1), colour(230,230,230,200)
rslider bounds(113,130, 43, 43), channel("pn3"), range(1, 200, 3,1,1), colour(230,230,230,200)
rslider bounds(163,130, 43, 43), channel("pn4"), range(1, 200, 4,1,1), colour(230,230,230,200)
rslider bounds(213,130, 43, 43), channel("pn5"), range(1, 200, 5,1,1), colour(230,230,230,200)
rslider bounds(263,130, 43, 43), channel("pn6"), range(1, 200, 6,1,1), colour(230,230,230,200)
rslider bounds(313,130, 43, 43), channel("pn7"), range(1, 200, 7,1,1), colour(230,230,230,200)
rslider bounds(363,130, 43, 43), channel("pn8"), range(1, 200, 8,1,1), colour(230,230,230,200)

rslider  bounds(  0,175, 70, 26), text("P.N.1"), textbox(1), valuetextbox(1), channel("pn1_out"), range(1, 10000, 1, 1, 1)
rslider  bounds( 50,175, 70, 26), text("P.N.2"), textbox(1), valuetextbox(1), channel("pn2_out"), range(1, 10000, 1, 1, 1)
rslider  bounds(100,175, 70, 26), text("P.N.3"), textbox(1), valuetextbox(1), channel("pn3_out"), range(1, 10000, 1, 1, 1)
rslider  bounds(150,175, 70, 26), text("P.N.4"), textbox(1), valuetextbox(1), channel("pn4_out"), range(1, 10000, 1, 1, 1)
rslider  bounds(200,175, 70, 26), text("P.N.5"), textbox(1), valuetextbox(1), channel("pn5_out"), range(1, 10000, 1, 1, 1)
rslider  bounds(250,175, 70, 26), text("P.N.6"), textbox(1), valuetextbox(1), channel("pn6_out"), range(1, 10000, 1, 1, 1)
rslider  bounds(300,175, 70, 26), text("P.N.7"), textbox(1), valuetextbox(1), channel("pn7_out"), range(1, 10000, 1, 1, 1)
rslider  bounds(350,175, 70, 26), text("P.N.8"), textbox(1), valuetextbox(1), channel("pn8_out"), range(1, 10000, 1, 1, 1)

rslider bounds( 10,205, 50, 70), channel("str1"), text("Str.1"), textbox(1), valuetextbox(1), range(0, 1, 1, 0.5, 0.001), colour(200,200,200,200)
rslider bounds( 60,205, 50, 70), channel("str2"), text("Str.2"), textbox(1), valuetextbox(1), range(0, 1, 0.5, 0.5, 0.001), colour(200,200,200,200)
rslider bounds(110,205, 50, 70), channel("str3"), text("Str.3"), textbox(1), valuetextbox(1), range(0, 1, 0.3, 0.5, 0.001), colour(200,200,200,200)
rslider bounds(160,205, 50, 70), channel("str4"), text("Str.4"), textbox(1), valuetextbox(1), range(0, 1, 0.25, 0.5, 0.001), colour(200,200,200,200)
rslider bounds(210,205, 50, 70), channel("str5"), text("Str.5"), textbox(1), valuetextbox(1), range(0, 1, 0.2, 0.5, 0.001), colour(200,200,200,200)
rslider bounds(260,205, 50, 70), channel("str6"), text("Str.6"), textbox(1), valuetextbox(1), range(0, 1, 0.16, 0.5, 0.001), colour(200,200,200,200)
rslider bounds(310,205, 50, 70), channel("str7"), text("Str.7"), textbox(1), valuetextbox(1), range(0, 1, 0.14287, 0.5, 0.001), colour(200,200,200,200)
rslider bounds(360,205, 50, 70), channel("str8"), text("Str.8"), textbox(1), valuetextbox(1), range(0, 1, 0.125, 0.5, 0.001), colour(200,200,200,200)

checkbox bounds( 29,275, 12, 12), channel("mute1"),  value(0), colour("red"), shape("square")
checkbox bounds( 79,275, 12, 12), channel("mute2"),  value(0), colour("red"), shape("square")
checkbox bounds(129,275, 12, 12), channel("mute3"),  value(0), colour("red"), shape("square")
checkbox bounds(179,275, 12, 12), channel("mute4"),  value(0), colour("red"), shape("square")
checkbox bounds(229,275, 12, 12), channel("mute5"),  value(0), colour("red"), shape("square")
checkbox bounds(279,275, 12, 12), channel("mute6"),  value(0), colour("red"), shape("square")
checkbox bounds(329,275, 12, 12), channel("mute7"),  value(0), colour("red"), shape("square")
checkbox bounds(379,275, 12, 12), channel("mute8"),  value(0), colour("red"), shape("square")

checkbox bounds( 29,297, 12, 12), channel("solo1"),  value(0), colour("yellow"), shape("square")
checkbox bounds( 79,297, 12, 12), channel("solo2"),  value(0), colour("yellow"), shape("square")
checkbox bounds(129,297, 12, 12), channel("solo3"),  value(0), colour("yellow"), shape("square")
checkbox bounds(179,297, 12, 12), channel("solo4"),  value(0), colour("yellow"), shape("square")
checkbox bounds(229,297, 12, 12), channel("solo5"),  value(0), colour("yellow"), shape("square")
checkbox bounds(279,297, 12, 12), channel("solo6"),  value(0), colour("yellow"), shape("square")
checkbox bounds(329,297, 12, 12), channel("solo7"),  value(0), colour("yellow"), shape("square")
checkbox bounds(379,297, 12, 12), channel("solo8"),  value(0), colour("yellow"), shape("square")

label    bounds( 23,286, 24, 10), text("Mute"),  fontcolour("white")
label    bounds( 73,286, 24, 10), text("Mute"),  fontcolour("white")
label    bounds(123,286, 24, 10), text("Mute"),  fontcolour("white")
label    bounds(173,286, 24, 10), text("Mute"),  fontcolour("white")
label    bounds(223,286, 24, 10), text("Mute"),  fontcolour("white")
label    bounds(273,286, 24, 10), text("Mute"),  fontcolour("white")
label    bounds(323,286, 24, 10), text("Mute"),  fontcolour("white")
label    bounds(373,286, 24, 10), text("Mute"),  fontcolour("white")

label    bounds( 24,307, 21, 10), text("Solo"),  fontcolour("white")
label    bounds( 74,307, 21, 10), text("Solo"),  fontcolour("white")
label    bounds(124,307, 21, 10), text("Solo"),  fontcolour("white")
label    bounds(174,307, 21, 10), text("Solo"),  fontcolour("white")
label    bounds(224,307, 21, 10), text("Solo"),  fontcolour("white")
label    bounds(274,307, 21, 10), text("Solo"),  fontcolour("white")
label    bounds(324,307, 21, 10), text("Solo"),  fontcolour("white")
label    bounds(374,307, 21, 10), text("Solo"),  fontcolour("white")

rslider bounds( 10,320, 50, 70), channel("ph1"), text("Ph.1"), textbox(1), valuetextbox(1), range(0, 360, 0), colour(150,150,150,200)
rslider bounds( 60,320, 50, 70), channel("ph2"), text("Ph.2"), textbox(1), valuetextbox(1), range(0, 360, 0), colour(150,150,150,200)
rslider bounds(110,320, 50, 70), channel("ph3"), text("Ph.3"), textbox(1), valuetextbox(1), range(0, 360, 0), colour(150,150,150,200)
rslider bounds(160,320, 50, 70), channel("ph4"), text("Ph.4"), textbox(1), valuetextbox(1), range(0, 360, 0), colour(150,150,150,200)
rslider bounds(210,320, 50, 70), channel("ph5"), text("Ph.5"), textbox(1), valuetextbox(1), range(0, 360, 0), colour(150,150,150,200)
rslider bounds(260,320, 50, 70), channel("ph6"), text("Ph.6"), textbox(1), valuetextbox(1), range(0, 360, 0), colour(150,150,150,200)
rslider bounds(310,320, 50, 70), channel("ph7"), text("Ph.7"), textbox(1), valuetextbox(1), range(0, 360, 0), colour(150,150,150,200)
rslider bounds(360,320, 50, 70), channel("ph8"), text("Ph.8"), textbox(1), valuetextbox(1), range(0, 360, 0), colour(150,150,150,200)

rslider  bounds( 10,395, 50, 70), channel("base"), text("Base"), textbox(1), valuetextbox(1), range(0, 200, 1, 1,1), colour(110,110,110,200)
rslider  bounds( 60,395, 50, 70), channel("int"), text("Int."), textbox(1), valuetextbox(1), range(0, 200, 2, 1,1) , colour(110,110,110,200)
label    bounds(120,400, 95, 13), text("Table Size")
combobox bounds(120,415, 95, 20), channel("tabsize"), value(8), text("32","64","128","256","512","1024","2048","4096","8192")
label    bounds(195,400, 95, 13), text("Opcode")
combobox bounds(195,415, 95, 20), channel("opcode"), value(3), text("oscil","oscili","poscil")
button   bounds(285,395,120, 20), text("EXPORT TABLE"), channel("export"), value(0), fontcolour("yellow")

rslider bounds(283,420, 45, 40), channel("spread"), text("Spread"), range(0, 1, 0.05,0.5,0.00001), colour("yellow")
rslider bounds(323,420, 45, 40), channel("voices"), text("Voices"), range(1, 20, 8,1,1), colour("yellow")
rslider bounds(363,420, 45, 40), channel("speed"), text("Speed"), range(0,100, 1.5,0.5,0.001), colour("yellow")

keyboard bounds(  0,475,420, 80)

</Cabbage>
                    
<CsoundSynthesizer>

<CsOptions>   
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (1=MONO)
0dbfs		=	1	;MAXIMUM AMPLITUDE
		massign	0,3	; send all midi notes to instr 3

gicos		ftgen	0,0,4096,11,1		;COSINE WAVE (USED BY THE LFOS)
gieqffn		ftgen	0,0,4097,7,-1,4096,1
gieqlfn		ftgen	0,0,4097,7,-1,4096,1
gieqqfn		ftgen	0,0,4097,7,-1,4096,1

instr	1
	; read in widgets
	gkpn1	chnget	"pn1"
	gkpn2	chnget	"pn2"
	gkpn3	chnget	"pn3"
	gkpn4	chnget	"pn4"
	gkpn5	chnget	"pn5"
	gkpn6	chnget	"pn6"
	gkpn7	chnget	"pn7"
	gkpn8	chnget	"pn8"

	gkstr1	chnget	"str1"
	gkstr2	chnget	"str2"
	gkstr3	chnget	"str3"
	gkstr4	chnget	"str4"
	gkstr5	chnget	"str5"
	gkstr6	chnget	"str6"
	gkstr7	chnget	"str7"
	gkstr8	chnget	"str8"

	gkmute1	chnget	"mute1"
	gkmute2	chnget	"mute2"
	gkmute3	chnget	"mute3"
	gkmute4	chnget	"mute4"
	gkmute5	chnget	"mute5"
	gkmute6	chnget	"mute6"
	gkmute7	chnget	"mute7"
	gkmute8	chnget	"mute8"

	gksolo1	chnget	"solo1"
	gksolo2	chnget	"solo2"
	gksolo3	chnget	"solo3"
	gksolo4	chnget	"solo4"
	gksolo5	chnget	"solo5"
	gksolo6	chnget	"solo6"
	gksolo7	chnget	"solo7"
	gksolo8	chnget	"solo8"

	kSoloSum	=	gksolo1+gksolo2+gksolo3+gksolo4+gksolo5+gksolo6+gksolo7+gksolo8

#define	SOLO_MUTE_STATUS(N)	
	#
	if gksolo$N==1 then
	 kstatus$N	=	1
	elseif kSoloSum>0 then
	 kstatus$N	=	0
	else
	 kstatus$N	=	(1-gkmute$N)
	endif
	#
	$SOLO_MUTE_STATUS(1)
	$SOLO_MUTE_STATUS(2)
	$SOLO_MUTE_STATUS(3)
	$SOLO_MUTE_STATUS(4)
	$SOLO_MUTE_STATUS(5)
	$SOLO_MUTE_STATUS(6)
	$SOLO_MUTE_STATUS(7)
	$SOLO_MUTE_STATUS(8)

	gkph1	chnget	"ph1"
	gkph2	chnget	"ph2"
	gkph3	chnget	"ph3"
	gkph4	chnget	"ph4"
	gkph5	chnget	"ph5"
	gkph6	chnget	"ph6"
	gkph7	chnget	"ph7"
	gkph8	chnget	"ph8"

	gkbase	chnget	"base"
	gkint	chnget	"int"
	gkopcode	chnget	"opcode"
	gkopcode	init	3		; init pass value for gkopcode
	
	; if any of the variables in the input list are changed, a momentary '1' trigger is generated at the output. This trigger is used to update function tables.
	ktrig	changed	gkpn1,gkpn2,gkpn3,gkpn4,gkpn5,gkpn6,gkpn7,gkpn8,gkstr1,gkstr2,gkstr3,gkstr4,gkstr5,gkstr6,gkstr7,gkstr8,kstatus1,kstatus2,kstatus3,kstatus4,kstatus5,kstatus6,kstatus7,kstatus8,gkph1,gkph2,gkph3,gkph4,gkph5,gkph6,gkph7,gkph8,gkbase,gkint

	if ktrig==1 then
	 reinit	UPDATE
	endif
	UPDATE:
	; Update function tables.
	gi1	ftgen	1, 0,   32,9, i(gkbase)+i(gkpn1),i(gkstr1)*i(kstatus1),i(gkph1), i(gkbase)+i(gkpn2)+i(gkint),i(gkstr2)*i(kstatus2),i(gkph2), i(gkbase)+i(gkpn3)+(i(gkint)*2),i(gkstr3)*i(kstatus3),i(gkph3), i(gkbase)+i(gkpn4)+(i(gkint)*3),i(gkstr4)*i(kstatus4),i(gkph4), i(gkbase)+i(gkpn5)+(i(gkint)*4),i(gkstr5)*i(kstatus5),i(gkph5), i(gkbase)+i(gkpn6)+(i(gkint)*5),i(gkstr6)*i(kstatus6),i(gkph6), i(gkbase)+i(gkpn7)+(i(gkint)*6),i(gkstr7)*i(kstatus7),i(gkph7), i(gkbase)+i(gkpn8)+(i(gkint)*7),i(gkstr8)*i(kstatus8),i(gkph8)
	gi2	ftgen	2, 0,   64,9, i(gkbase)+i(gkpn1),i(gkstr1)*i(kstatus1),i(gkph1), i(gkbase)+i(gkpn2)+i(gkint),i(gkstr2)*i(kstatus2),i(gkph2), i(gkbase)+i(gkpn3)+(i(gkint)*2),i(gkstr3)*i(kstatus3),i(gkph3), i(gkbase)+i(gkpn4)+(i(gkint)*3),i(gkstr4)*i(kstatus4),i(gkph4), i(gkbase)+i(gkpn5)+(i(gkint)*4),i(gkstr5)*i(kstatus5),i(gkph5), i(gkbase)+i(gkpn6)+(i(gkint)*5),i(gkstr6)*i(kstatus6),i(gkph6), i(gkbase)+i(gkpn7)+(i(gkint)*6),i(gkstr7)*i(kstatus7),i(gkph7), i(gkbase)+i(gkpn8)+(i(gkint)*7),i(gkstr8)*i(kstatus8),i(gkph8)
	gi3	ftgen	3, 0,  128,9, i(gkbase)+i(gkpn1),i(gkstr1)*i(kstatus1),i(gkph1), i(gkbase)+i(gkpn2)+i(gkint),i(gkstr2)*i(kstatus2),i(gkph2), i(gkbase)+i(gkpn3)+(i(gkint)*2),i(gkstr3)*i(kstatus3),i(gkph3), i(gkbase)+i(gkpn4)+(i(gkint)*3),i(gkstr4)*i(kstatus4),i(gkph4), i(gkbase)+i(gkpn5)+(i(gkint)*4),i(gkstr5)*i(kstatus5),i(gkph5), i(gkbase)+i(gkpn6)+(i(gkint)*5),i(gkstr6)*i(kstatus6),i(gkph6), i(gkbase)+i(gkpn7)+(i(gkint)*6),i(gkstr7)*i(kstatus7),i(gkph7), i(gkbase)+i(gkpn8)+(i(gkint)*7),i(gkstr8)*i(kstatus8),i(gkph8)
	gi4	ftgen	4, 0,  256,9, i(gkbase)+i(gkpn1),i(gkstr1)*i(kstatus1),i(gkph1), i(gkbase)+i(gkpn2)+i(gkint),i(gkstr2)*i(kstatus2),i(gkph2), i(gkbase)+i(gkpn3)+(i(gkint)*2),i(gkstr3)*i(kstatus3),i(gkph3), i(gkbase)+i(gkpn4)+(i(gkint)*3),i(gkstr4)*i(kstatus4),i(gkph4), i(gkbase)+i(gkpn5)+(i(gkint)*4),i(gkstr5)*i(kstatus5),i(gkph5), i(gkbase)+i(gkpn6)+(i(gkint)*5),i(gkstr6)*i(kstatus6),i(gkph6), i(gkbase)+i(gkpn7)+(i(gkint)*6),i(gkstr7)*i(kstatus7),i(gkph7), i(gkbase)+i(gkpn8)+(i(gkint)*7),i(gkstr8)*i(kstatus8),i(gkph8)
	gi5	ftgen	5, 0,  512,9, i(gkbase)+i(gkpn1),i(gkstr1)*i(kstatus1),i(gkph1), i(gkbase)+i(gkpn2)+i(gkint),i(gkstr2)*i(kstatus2),i(gkph2), i(gkbase)+i(gkpn3)+(i(gkint)*2),i(gkstr3)*i(kstatus3),i(gkph3), i(gkbase)+i(gkpn4)+(i(gkint)*3),i(gkstr4)*i(kstatus4),i(gkph4), i(gkbase)+i(gkpn5)+(i(gkint)*4),i(gkstr5)*i(kstatus5),i(gkph5), i(gkbase)+i(gkpn6)+(i(gkint)*5),i(gkstr6)*i(kstatus6),i(gkph6), i(gkbase)+i(gkpn7)+(i(gkint)*6),i(gkstr7)*i(kstatus7),i(gkph7), i(gkbase)+i(gkpn8)+(i(gkint)*7),i(gkstr8)*i(kstatus8),i(gkph8)
	gi6	ftgen	6, 0, 1024,9, i(gkbase)+i(gkpn1),i(gkstr1)*i(kstatus1),i(gkph1), i(gkbase)+i(gkpn2)+i(gkint),i(gkstr2)*i(kstatus2),i(gkph2), i(gkbase)+i(gkpn3)+(i(gkint)*2),i(gkstr3)*i(kstatus3),i(gkph3), i(gkbase)+i(gkpn4)+(i(gkint)*3),i(gkstr4)*i(kstatus4),i(gkph4), i(gkbase)+i(gkpn5)+(i(gkint)*4),i(gkstr5)*i(kstatus5),i(gkph5), i(gkbase)+i(gkpn6)+(i(gkint)*5),i(gkstr6)*i(kstatus6),i(gkph6), i(gkbase)+i(gkpn7)+(i(gkint)*6),i(gkstr7)*i(kstatus7),i(gkph7), i(gkbase)+i(gkpn8)+(i(gkint)*7),i(gkstr8)*i(kstatus8),i(gkph8)
	gi7	ftgen	7, 0, 2048,9, i(gkbase)+i(gkpn1),i(gkstr1)*i(kstatus1),i(gkph1), i(gkbase)+i(gkpn2)+i(gkint),i(gkstr2)*i(kstatus2),i(gkph2), i(gkbase)+i(gkpn3)+(i(gkint)*2),i(gkstr3)*i(kstatus3),i(gkph3), i(gkbase)+i(gkpn4)+(i(gkint)*3),i(gkstr4)*i(kstatus4),i(gkph4), i(gkbase)+i(gkpn5)+(i(gkint)*4),i(gkstr5)*i(kstatus5),i(gkph5), i(gkbase)+i(gkpn6)+(i(gkint)*5),i(gkstr6)*i(kstatus6),i(gkph6), i(gkbase)+i(gkpn7)+(i(gkint)*6),i(gkstr7)*i(kstatus7),i(gkph7), i(gkbase)+i(gkpn8)+(i(gkint)*7),i(gkstr8)*i(kstatus8),i(gkph8)
	gi8	ftgen	8, 0, 4096,9, i(gkbase)+i(gkpn1),i(gkstr1)*i(kstatus1),i(gkph1), i(gkbase)+i(gkpn2)+i(gkint),i(gkstr2)*i(kstatus2),i(gkph2), i(gkbase)+i(gkpn3)+(i(gkint)*2),i(gkstr3)*i(kstatus3),i(gkph3), i(gkbase)+i(gkpn4)+(i(gkint)*3),i(gkstr4)*i(kstatus4),i(gkph4), i(gkbase)+i(gkpn5)+(i(gkint)*4),i(gkstr5)*i(kstatus5),i(gkph5), i(gkbase)+i(gkpn6)+(i(gkint)*5),i(gkstr6)*i(kstatus6),i(gkph6), i(gkbase)+i(gkpn7)+(i(gkint)*6),i(gkstr7)*i(kstatus7),i(gkph7), i(gkbase)+i(gkpn8)+(i(gkint)*7),i(gkstr8)*i(kstatus8),i(gkph8)
	gi9	ftgen	9, 0, 8192,9, i(gkbase)+i(gkpn1),i(gkstr1)*i(kstatus1),i(gkph1), i(gkbase)+i(gkpn2)+i(gkint),i(gkstr2)*i(kstatus2),i(gkph2), i(gkbase)+i(gkpn3)+(i(gkint)*2),i(gkstr3)*i(kstatus3),i(gkph3), i(gkbase)+i(gkpn4)+(i(gkint)*3),i(gkstr4)*i(kstatus4),i(gkph4), i(gkbase)+i(gkpn5)+(i(gkint)*4),i(gkstr5)*i(kstatus5),i(gkph5), i(gkbase)+i(gkpn6)+(i(gkint)*5),i(gkstr6)*i(kstatus6),i(gkph6), i(gkbase)+i(gkpn7)+(i(gkint)*6),i(gkstr7)*i(kstatus7),i(gkph7), i(gkbase)+i(gkpn8)+(i(gkint)*7),i(gkstr8)*i(kstatus8),i(gkph8)
	rireturn
	if ktrig==1 then
	 chnset	"tablenumber(8)", "table"	; update table display	
	endif
	; update "P.N.1-8" (partial numbers) value display boxes.
	chnset	i(gkbase)+i(gkpn1),"pn1_out"
	chnset	i(gkbase)+i(gkpn2)+i(gkint),"pn2_out"
	chnset	i(gkbase)+i(gkpn3)+(i(gkint)*2),"pn3_out"
	chnset	i(gkbase)+i(gkpn4)+(i(gkint)*3),"pn4_out"
	chnset	i(gkbase)+i(gkpn5)+(i(gkint)*4),"pn5_out"
	chnset	i(gkbase)+i(gkpn6)+(i(gkint)*5),"pn6_out"
	chnset	i(gkbase)+i(gkpn7)+(i(gkint)*6),"pn7_out"
	chnset	i(gkbase)+i(gkpn8)+(i(gkint)*7),"pn8_out"
	gkscal	min	gkbase+gkpn1, gkbase+gkpn2, gkbase+gkpn3, gkbase+gkpn4, gkbase+gkpn5, gkbase+gkpn6, gkbase+gkpn7, gkbase+gkpn8
	rireturn

	kexport	chnget	"export"
	ktrig	changed	kexport
		schedkwhen	ktrig,0,0,4,0,0.01

	gktabsize	init	9		; init pass value for gktabsize
endin


instr	3	; sound producing instrument

	gktabsize	chnget	"tabsize"
	gktabsize	init	9		; init pass value for gktabsize

	icps	cpsmidi				; CPS from midi note played
	iamp	ampmidi	0.3			; amplitude from midi note velocity 
	ifn	init	i(gktabsize)		; function table to be used by the oscillator. This will be dependent upon tables size selected.

	kvoices	chnget	"voices"
	ktrig	changed	kvoices
	if ktrig==1 then
	 reinit update
	endif
	update:
	ivoices	init	i(kvoices)
	iscal	=	i(gkscal)
	aenv	linsegr	0,0.01,1,0.1,0		; amplitude envelope to prevent clicks


	if ivoices==1 then	
	 if gkopcode==1 then			; if option 1 is selected by the "Opcode" combo box...
	  asig	oscil	iamp,icps/gkscal,ifn	; use oscil
	 elseif gkopcode==2 then		; if option 2 is selected by the "Opcode" combo box...
	  asig	oscili	iamp,icps/gkscal,ifn	; use oscili                                         
	 elseif gkopcode==3 then		; if option 3 is selected by the "Opcode" combo box...
	  asig	poscil	iamp,icps/gkscal,ifn	; use poscil                                         
	 endif					; end of conditional
	 asig	=	asig * aenv		; apply envelope
	  	outs	asig,asig
        else
         kwave	init	ifn
         kspread	chnget	"spread"
         kspeed		chnget	"speed"
        	;OUTPUT	OPCODE  CPS  | AMD  |    FMD    |  PMD  | OVERLAPS   | SEED | L1MINF  | L1MAXF  | L2MINF  | L2MAXF  | LFOMODE | EQMINF  | EQMAXF | EQMINL | EQMAXL | EQMINQ | EQMAXQ  | EQMODE | KFN  | L1FN | L2FN | EQFFN  | EQLF   |  EQQFN |  TABL  | OUTFN
	 aL	oscbnk	icps/(gkscal),   0,      0,      kspread,     ivoices,   rnd(1),      0,   kspeed,      0,        0,       238,      0,       8000,      1,       1,       1,       1,       -1,   kwave, gicos, gicos, gieqffn, gieqlfn, gieqqfn
	 aR	oscbnk	icps/(gkscal),   0,      0,     -kspread,     ivoices,   rnd(1),      0,  -kspeed,      0,        0,       238,      0,       8000,      1,       1,       1,       1,       -1,   kwave, gicos, gicos, gieqffn, gieqlfn, gieqqfn
	 aL	=	(aL * aenv * iamp) / (ivoices^0.5) 		; apply envelope
	 aR	=	(aR * aenv * iamp) / (ivoices^0.5)		; apply envelope
	  	outs	aL, aR
        endif
endin

instr	4
	ifn	chnget	"tabsize"
	isize	=	ftlen(ifn)
	fprints	"GEN09Table.txt", "giGEN09wave ftgen 0,0,%d,9,%d,%f,%f,%d,%f,%f,%d,%f,%f,%d,%f,%f,%d,%f,%f,%d,%f,%f,%d,%f,%f,%d,%f,%f",isize, i(gkbase)+i(gkpn1), i(gkstr1), i(gkph1), i(gkbase)+i(gkpn2)+i(gkint), i(gkstr2), i(gkph2), i(gkbase)+i(gkpn3)+(i(gkint)*2), i(gkstr3), i(gkph3), i(gkbase)+i(gkpn4)+(i(gkint)*3), i(gkstr4), i(gkph4), i(gkbase)+i(gkpn5)+(i(gkint)*4), i(gkstr5), i(gkph5), i(gkbase)+i(gkpn6)+(i(gkint)*5), i(gkstr6), i(gkph6), i(gkbase)+i(gkpn7)+(i(gkint)*6), i(gkstr7), i(gkph7), i(gkbase)+i(gkpn8)+(i(gkint)*7), i(gkstr8), i(gkph8)

endin

</CsInstruments>

<CsScore>
; create the function tables
f1 0    32 9  1 0 0
f2 0    64 9  1 0 0
f3 0   128 9  1 0 0
f4 0   256 9  1 0 0
f5 0   512 9  1 0 0
f6 0  1024 9  1 0 0
f7 0  2048 9  1 0 0
f8 0  4096 9  1 0 0
f9 0  8192 9  1 0 0
; play instrument 1 for 1 hour
i 1 0 3600
</CsScore>

</CsoundSynthesizer>
; GEN10.csd
; Written by Iain McCurdy, 2013
; Demonstration of GEN10
; Create a wave and then play it using the keyboard
; Negative strength values result in inverted phase

<Cabbage>
form caption("GEN10"), size(410, 340), pluginid("gn10"), colour("20,70,170,150") style("legacy")

gentable bounds(  5,  5, 400, 120), identchannel("table1"), tablenumber(1), tablecolour("yellow"), zoom(-1)

rslider bounds(  5,130, 50, 70), channel("str1"), text("Str.1"), valuetextbox(1), textbox(1), range(-1.00, 1.00, 1), colour(100,100,250,200)
rslider bounds( 55,130, 50, 70), channel("str2"), text("Str.2"), valuetextbox(1), textbox(1), range(-1.00, 1.00, 0), colour(100,100,250,200)
rslider bounds(105,130, 50, 70), channel("str3"), text("Str.3"), valuetextbox(1), textbox(1), range(-1.00, 1.00, 0), colour(100,100,250,200)
rslider bounds(155,130, 50, 70), channel("str4"), text("Str.4"), valuetextbox(1), textbox(1), range(-1.00, 1.00, 0), colour(100,100,250,200)
rslider bounds(205,130, 50, 70), channel("str5"), text("Str.5"), valuetextbox(1), textbox(1), range(-1.00, 1.00, 0), colour(100,100,250,200)
rslider bounds(255,130, 50, 70), channel("str6"), text("Str.6"), valuetextbox(1), textbox(1), range(-1.00, 1.00, 0), colour(100,100,250,200)
rslider bounds(305,130, 50, 70), channel("str7"), text("Str.7"), valuetextbox(1), textbox(1), range(-1.00, 1.00, 0), colour(100,100,250,200)
rslider bounds(355,130, 50, 70), channel("str8"), text("Str.8"), valuetextbox(1), textbox(1), range(-1.00, 1.00, 0), colour(100,100,250,200)

checkbox bounds( 24,203, 12, 12), channel("mute1"),  value(0), colour("red"), shape("square")
checkbox bounds( 74,203, 12, 12), channel("mute2"),  value(0), colour("red"), shape("square")
checkbox bounds(124,203, 12, 12), channel("mute3"),  value(0), colour("red"), shape("square")
checkbox bounds(174,203, 12, 12), channel("mute4"),  value(0), colour("red"), shape("square")
checkbox bounds(224,203, 12, 12), channel("mute5"),  value(0), colour("red"), shape("square")
checkbox bounds(274,203, 12, 12), channel("mute6"),  value(0), colour("red"), shape("square")
checkbox bounds(324,203, 12, 12), channel("mute7"),  value(0), colour("red"), shape("square")
checkbox bounds(374,203, 12, 12), channel("mute8"),  value(0), colour("red"), shape("square")

checkbox bounds( 24,228, 12, 12), channel("solo1"),  value(0), colour("yellow"), shape("square")
checkbox bounds( 74,228, 12, 12), channel("solo2"),  value(0), colour("yellow"), shape("square")
checkbox bounds(124,228, 12, 12), channel("solo3"),  value(0), colour("yellow"), shape("square")
checkbox bounds(174,228, 12, 12), channel("solo4"),  value(0), colour("yellow"), shape("square")
checkbox bounds(224,228, 12, 12), channel("solo5"),  value(0), colour("yellow"), shape("square")
checkbox bounds(274,228, 12, 12), channel("solo6"),  value(0), colour("yellow"), shape("square")
checkbox bounds(324,228, 12, 12), channel("solo7"),  value(0), colour("yellow"), shape("square")
checkbox bounds(374,228, 12, 12), channel("solo8"),  value(0), colour("yellow"), shape("square")

label    bounds( 19,216, 24, 10), text("Mute"),  FontColour("white")
label    bounds( 69,216, 24, 10), text("Mute"),  FontColour("white")
label    bounds(119,216, 24, 10), text("Mute"),  FontColour("white")
label    bounds(169,216, 24, 10), text("Mute"),  FontColour("white")
label    bounds(219,216, 24, 10), text("Mute"),  FontColour("white")
label    bounds(269,216, 24, 10), text("Mute"),  FontColour("white")
label    bounds(319,216, 24, 10), text("Mute"),  FontColour("white")
label    bounds(369,216, 24, 10), text("Mute"),  FontColour("white")

label    bounds( 20,241, 21, 10), text("Solo"),  FontColour("white")
label    bounds( 70,241, 21, 10), text("Solo"),  FontColour("white")
label    bounds(120,241, 21, 10), text("Solo"),  FontColour("white")
label    bounds(170,241, 21, 10), text("Solo"),  FontColour("white")
label    bounds(220,241, 21, 10), text("Solo"),  FontColour("white")
label    bounds(270,241, 21, 10), text("Solo"),  FontColour("white")
label    bounds(320,241, 21, 10), text("Solo"),  FontColour("white")
label    bounds(370,241, 21, 10), text("Solo"),  FontColour("white")

keyboard bounds(  0,260,410, 80)
</Cabbage>
                    
<CsoundSynthesizer>

<CsOptions>   
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100	; SAMPLE RATE
ksmps 		= 	32	; NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	; NUMBER OF CHANNELS (1=MONO)
0dbfs		=	1	; MAXIMUM AMPLITUDE
		massign	0,3	; send all midi notes to instr 3 
			
giwave	ftgen	1,0, 4096,10, 0	; GEN10 generated wave

instr	1
	; read in widgets
	gkstr1	chnget	"str1"
	gkstr2	chnget	"str2"
	gkstr3	chnget	"str3"
	gkstr4	chnget	"str4"
	gkstr5	chnget	"str5"
	gkstr6	chnget	"str6"
	gkstr7	chnget	"str7"
	gkstr8	chnget	"str8"

	gkmute1	chnget	"mute1"
	gkmute2	chnget	"mute2"
	gkmute3	chnget	"mute3"
	gkmute4	chnget	"mute4"
	gkmute5	chnget	"mute5"
	gkmute6	chnget	"mute6"
	gkmute7	chnget	"mute7"
	gkmute8	chnget	"mute8"

	gksolo1	chnget	"solo1"
	gksolo2	chnget	"solo2"
	gksolo3	chnget	"solo3"
	gksolo4	chnget	"solo4"
	gksolo5	chnget	"solo5"
	gksolo6	chnget	"solo6"
	gksolo7	chnget	"solo7"
	gksolo8	chnget	"solo8"

	kSoloSum	=	gksolo1+gksolo2+gksolo3+gksolo4+gksolo5+gksolo6+gksolo7+gksolo8	; sum of all solo buttons

#define	SOLO_MUTE_STATUS(N) 
	#
	if gksolo$N==1 then			; if solo for this voice is on...
	 kstatus$N	=	1		; this partial will be active
	elseif kSoloSum>0 then			; if any other solo is on...
	 kstatus$N	=	0		; this partial will be inactive
	else					; other wise
	 kstatus$N	=	(1-gkmute$N)	; partial will be on if mute is inactive
	endif
	#
	$SOLO_MUTE_STATUS(1)			; expand macro
	$SOLO_MUTE_STATUS(2)
	$SOLO_MUTE_STATUS(3)
	$SOLO_MUTE_STATUS(4)
	$SOLO_MUTE_STATUS(5)
	$SOLO_MUTE_STATUS(6)
	$SOLO_MUTE_STATUS(7)
	$SOLO_MUTE_STATUS(8)
	; generate a trigger if any of the input variables changes
	ktrig	changed	gkstr1,gkstr2,gkstr3,gkstr4,gkstr5,gkstr6,gkstr7,gkstr8,kstatus1,kstatus2,kstatus3,kstatus4,kstatus5,kstatus6,kstatus7,kstatus8
	if ktrig==1 then
	 reinit UPDATE
	endif
	UPDATE:	
	giwave	ftgen	1,0, 4096,10, i(gkstr1)*i(kstatus1),i(gkstr2)*i(kstatus2),i(gkstr3)*i(kstatus3),i(gkstr4)*i(kstatus4),i(gkstr5)*i(kstatus5),i(gkstr6)*i(kstatus6),i(gkstr7)*i(kstatus7),i(gkstr8)*i(kstatus8)
	rireturn
	if ktrig==1 then
	 chnset	"tablenumber(1)", "table1"	; update table display	
	endif
endin

instr	3
	icps	cpsmidi				; CPS from midi note played
	iamp	ampmidi	0.5			; amplitude from midi note velocity 
	a1	oscili	iamp,icps,giwave	; audio oscillator read GEN10 wave created
	aenv	linsegr	0,0.01,1,0.1,0		; amplitude envelope to prevent clicks
	a1	=	a1 * aenv		; apply envelope
		outs	a1, a1			; send audio to outputs
endin

</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>
; GEN16.csd
; Written by Iain McCurdy, 2013
; Demonstration of GEN16
; Envelope repeats once every two seconds therefore 1 second = 2048 table points
; Value 1 and Value 4 should probably be zero.
; Durations are specified in table points - 2048 = 1 second
; If the sum of durations exceeds table size they are automatically scaled down in order to prevent crashes.


<Cabbage>
form caption("GEN16"), size(325, 360), pluginid("gn16"), colour(100,100,110) style("legacy")

gentable bounds( 10,  5, 305, 120), tablenumber(1), tablecolour("lime"), identchannel("table"), zoom(-1), amprange(1,0,1)

#define SLIDER_SETTINGS #textBox(1), fontcolour("white"), textcolour("white"), trackercolour("silver")#

rslider bounds( 10,130, 50, 70), channel("val1"), text("Value.1"), range(0, 1, 0),   colour(80,80,80), $SLIDER_SETTINGS
rslider bounds( 70,130, 50, 70), channel("val2"), text("Value.2"), range(0, 1, 1),   colour(80,80,80), $SLIDER_SETTINGS
rslider bounds(130,130, 50, 70), channel("val3"), text("Value.3"), range(0, 1, 0.2), colour(80,80,80), $SLIDER_SETTINGS
rslider bounds(190,130, 50, 70), channel("val4"), text("Value.4"), range(0, 1, 0),   colour(80,80,80), $SLIDER_SETTINGS

rslider bounds( 40,205, 50, 70), channel("dur1"), text("Dur.1"), range(1, 4096, 80, 1, 1),   colour(80,80,80), $SLIDER_SETTINGS
rslider bounds(100,205, 50, 70), channel("dur2"), text("Dur.2"), range(1, 4096, 1000, 1, 1), colour(80,80,80), $SLIDER_SETTINGS
rslider bounds(160,205, 50, 70), channel("dur3"), text("Dur.3"), range(1, 4096, 3016, 1, 1), colour(80,80,80), $SLIDER_SETTINGS

rslider bounds( 40,280, 50, 70), channel("shp1"), text("Shape.1"), range(-20, 20, 3),   colour(80,80,80), $SLIDER_SETTINGS
rslider bounds(100,280, 50, 70), channel("shp2"), text("Shape.2"), range(-20, 20, -3),  colour(80,80,80), $SLIDER_SETTINGS
rslider bounds(160,280, 50, 70), channel("shp3"), text("Shape.3"), range(-20, 20, 1.5), colour(80,80,80), $SLIDER_SETTINGS

rslider bounds(265,130, 50, 70), channel("speed"), text("Speed"), range(0.25, 8.00, 0.5,0.5,0.001),  colour(80,80,80), $SLIDER_SETTINGS
rslider bounds(265,205, 50, 70), channel("freq"),  text("Freq."), range(50, 5000, 300,0.5,0.1),      colour(80,80,80), $SLIDER_SETTINGS
rslider bounds(265,280, 50, 70), channel("lev"),   text("Level"), range(0, 1.00, 0.5),               colour(80,80,80), $SLIDER_SETTINGS

line bounds(250,130,  2,220), colour("Grey")

</Cabbage>
                    
<CsoundSynthesizer>

<CsOptions>   
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100	; SAMPLE RATE
ksmps 	= 	32		; NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 	= 	2		; NUMBER OF CHANNELS (1=MONO)
0dbfs	=	1		; MAXIMUM AMPLITUDE

opcode	butlpsr,a,aa					; butterworth lowpass filter with audio-rate variable cutoff frequency
	asig,acf	xin
		setksmps	1
	kcf	downsamp	acf
	asig	butlp	asig,kcf
		xout	asig
endop

instr	1
	; read in widgets
	gkval1	chnget	"val1"
	gkval2	chnget	"val2"
	gkval3	chnget	"val3"
	gkval4	chnget	"val4"

	gkdur1	chnget	"dur1"
	gkdur2	chnget	"dur2"
	gkdur3	chnget	"dur3"

	gkshp1	chnget	"shp1"
	gkshp2	chnget	"shp2"
	gkshp3	chnget	"shp3"

	; if any of the variables in the input list are changed, a momentary '1' trigger is generated at the output. This trigger is used to update function tables.
	ktrig	changed		gkval1,gkval2,gkval3,gkval4,gkdur1,gkdur2,gkdur3,gkshp1,gkshp2,gkshp3
	schedkwhen	ktrig,0,0,2,0,0.01	; call instrument 2 to update tables and some widgets
	
	kspeed	chnget	"speed"
	aphs	phasor	kspeed
	aamp	tablei	aphs,1,1
	kphs	downsamp	aphs
	;		chnset	kphs,"table"
	kamp	chnget	"lev"
	kfreq	chnget	"freq"
	asig	vco2	kamp, kfreq
	acf	=	cpsoct((aamp*5)+7)
	asig	butlpsr	asig, acf
	asig	=	asig * aamp

		outs	asig,asig
endin

instr	2
	; Update function table
	  if	(i(gkdur1)+i(gkdur2)+i(gkdur3))>4096 then
	   idur1	=	i(gkdur1)* (4096/(i(gkdur1)+i(gkdur2)+i(gkdur3)))
	   idur2	=	i(gkdur2)* (4096/(i(gkdur1)+i(gkdur2)+i(gkdur3)))
	   idur3	=	i(gkdur3)* (4096/(i(gkdur1)+i(gkdur2)+i(gkdur3)))
	  else
	   idur1	=	i(gkdur1)
	   idur2	=	i(gkdur2)
	   idur3	=	i(gkdur3)
	  endif
	gi1	ftgen	1, 0,   4096,-16, i(gkval1), idur1, i(gkshp1), i(gkval2), idur2, i(gkshp2), i(gkval3), idur3, i(gkshp3), i(gkval4)
	chnset	"tablenumber(1)", "table"	; update table display	
endin

</CsInstruments>

<CsScore>
; create the function table
f 1 0    4096 -16  1 0 0
; play instrument 1 for 1 hour
i 1 0 3600
</CsScore>

</CsoundSynthesizer>
; Demonstration of GEN17
; Written by Iain McCurdy, 2014.

; GEN17 is used to create histograms (step functions) in which the use defines locations and values. That value is then held until the next location is specified.

; In this example the histogram is used as a probability distribution from which notes are randomly chosen. Values define (midi) note numbers.

<Cabbage>
form caption("GEN17"), size(420, 395), pluginid("gn17"), colour(120,170,200, 50) style("legacy")

gentable bounds(  5,  5, 410, 115), identchannel("table1"), tablenumber(1), tablecolour("yellow"), amprange(24,72,1), zoom(-1), fill(0), outlinethickness(2)

groupbox bounds(0, 125,420,170), text("Histogram"), plant("histogram"), fontcolour("white"){
rslider bounds( 50, 25, 70, 70), channel("loc1"), text("Len. 1"), valuetextbox(1), textbox(1), range(1, 512, 24,1,1), colour(120,170,200,50), trackercolour("white")
rslider bounds(100, 25, 70, 70), channel("loc2"), text("Len. 2"), valuetextbox(1), textbox(1), range(1, 512, 64,1,1), colour(120,170,200,50), trackercolour("white")
rslider bounds(150, 25, 70, 70), channel("loc3"), text("Len. 3"), valuetextbox(1), textbox(1), range(1, 512, 64,1,1), colour(120,170,200,50), trackercolour("white")
rslider bounds(200, 25, 70, 70), channel("loc4"), text("Len. 4"), valuetextbox(1), textbox(1), range(1, 512, 34,1,1), colour(120,170,200,50), trackercolour("white")
rslider bounds(250, 25, 70, 70), channel("loc5"), text("Len. 5"), valuetextbox(1), textbox(1), range(1, 512, 64,1,1), colour(120,170,200,50), trackercolour("white")
rslider bounds(300, 25, 70, 70), channel("loc6"), text("Len. 6"), valuetextbox(1), textbox(1), range(1, 512, 84,1,1), colour(120,170,200,50), trackercolour("white")
rslider bounds(350, 25, 70, 70), channel("loc7"), text("Len. 7"), valuetextbox(1), textbox(1), range(1, 512, 64,1,1), colour(120,170,200,50), trackercolour("white")

rslider bounds(  0, 95, 70, 70), channel("val0"), text("Value 0"), valuetextbox(1), textbox(1), range(24, 127, 50,1,1), colour(120,170,200, 50), trackercolour("white")
rslider bounds( 50, 95, 70, 70), channel("val1"), text("Value 1"), valuetextbox(1), textbox(1), range(24, 72, 62,1,1),  colour(120,170,200, 50), trackercolour("white")
rslider bounds(100, 95, 70, 70), channel("val2"), text("Value 2"), valuetextbox(1), textbox(1), range(24, 72, 48,1,1),  colour(120,170,200, 50), trackercolour("white")
rslider bounds(150, 95, 70, 70), channel("val3"), text("Value 3"), valuetextbox(1), textbox(1), range(24, 72, 44,1,1),  colour(120,170,200, 50), trackercolour("white")
rslider bounds(200, 95, 70, 70), channel("val4"), text("Value 4"), valuetextbox(1), textbox(1), range(24, 72, 66,1,1),  colour(120,170,200, 50), trackercolour("white")
rslider bounds(250, 95, 70, 70), channel("val5"), text("Value 5"), valuetextbox(1), textbox(1), range(24, 72, 54,1,1),  colour(120,170,200, 50), trackercolour("white")
rslider bounds(300, 95, 70, 70), channel("val6"), text("Value 6"), valuetextbox(1), textbox(1), range(24, 72, 52,1,1),  colour(120,170,200, 50), trackercolour("white")
rslider bounds(350, 95, 70, 70), channel("val7"), text("Value 7"), valuetextbox(1), textbox(1), range(24, 72, 46,1,1),  colour(120,170,200, 50), trackercolour("white")
}


groupbox bounds(0, 295,420,100), text("Synthesiser"), plant("synth"), fontcolour("white"){
checkbox bounds( 15, 50,115, 17), channel("SynthOnOff"), text("On/Off"),  value(0), colour("yellow"), shape("square")
rslider  bounds( 75, 25, 70, 70), channel("lev"),  text("Level"), valuetextbox(1), textbox(1), range(0, 1.00, 0.7), colour(120,170,200, 50), trackercolour("white")
rslider  bounds(125, 25, 70, 70), channel("rate"), text("Rate"), valuetextbox(1),  textbox(1), range(0.2, 5.00, 1), colour(120,170,200, 50), trackercolour("white")
rslider  bounds(175, 25, 70, 70), channel("dur"),  text("Dur."), valuetextbox(1),  textbox(1), range(0.1, 3.00, 2), colour(120,170,200, 50), trackercolour("white")
}
</Cabbage>
                    
<CsoundSynthesizer>

<CsOptions>   
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100	; SAMPLE RATE
ksmps 		= 	32	; NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	; NUMBER OF CHANNELS (1=MONO)
0dbfs		=	1	; MAXIMUM AMPLITUDE

; default histogram		
gihist	ftgen	1,0, 512, -17, 0, 48, 128, 84, 256, 72

instr	1
	iftlen	=	ftlen(1)		; length of function  table
	kftlen	init	iftlen
	
	; read in widgets
	kval0	chnget	"val0"
	kval1	chnget	"val1"
	kval2	chnget	"val2"
	kval3	chnget	"val3"
	kval4	chnget	"val4"
	kval5	chnget	"val5"
	kval6	chnget	"val6"
	kval7	chnget	"val7"

	kloc1	chnget	"loc1"
	kloc2	chnget	"loc2"
	kloc3	chnget	"loc3"
	kloc4	chnget	"loc4"
	kloc5	chnget	"loc5"
	kloc6	chnget	"loc6"
	kloc7	chnget	"loc7"

	kloc1	init	64
	kloc2	init	64
	kloc3	init	64
	kloc4	init	64
	kloc5	init	64
	kloc6	init	64
	kloc7	init	64

	gklev	chnget	"lev"
	gkSynthOnOff	chnget	"SynthOnOff"
	gkrate	chnget	"rate"
	gkdur	chnget	"dur"
	
	ktrig	changed		kval0,kval1,kval2,kval3,kval4,kval5,kval6,kval7, kloc1,kloc2,kloc3,kloc4,kloc5,kloc6,kloc7
	if ktrig==1 then	; peg rate of update. Tables updated at this rate. If too slow, glitching will be heard in the output, particularly if random movement speed is high. If too high CPU performance will suffer.
	 reinit	UPDATE
	endif
	UPDATE:
	gihist	ftgen	1,0, iftlen, -17, 0, i(kval0), i(kloc1),\ 
	                                     i(kval1), i(kloc1)+i(kloc2), \
	                                     i(kval2), i(kloc1)+i(kloc2)+i(kloc3), \
	                                     i(kval3), i(kloc1)+i(kloc2)+i(kloc3)+i(kloc4), \
	                                     i(kval4), i(kloc1)+i(kloc2)+i(kloc3)+i(kloc4)+i(kloc5), \
	                                     i(kval5), i(kloc1)+i(kloc2)+i(kloc3)+i(kloc4)+i(kloc5)+i(kloc6), \
	                                     i(kval6), i(kloc1)+i(kloc2)+i(kloc3)+i(kloc4)+i(kloc5)+i(kloc6)+i(kloc7), \
	                                     i(kval7)
	rireturn

	if ktrig==1 then			; 
	 chnset	"tablenumber(1)", "table1"	; update table display	
	endif
	
	; TRIGGER SOME NOTES
	kNoteTrig	init	1
	krate	rspline	0.5,2,0.01,0.1
	krhy	trandom	kNoteTrig,0,3
	kNoteTrig	metro	gkrate*krate*(2^int(krhy))
	schedkwhen	kNoteTrig*gkSynthOnOff,0,0,2,0,gkdur
endin

; SCALE FOR REFLECTION DEPENDENT UPON MIDI NOTE NUMBER (LESS DAMPING FOR HIGHER NOTES)
giScal	ftgen	0,0,128, -27,  0, 0.9, 24, 0.9, 36, 0.85, 48, 0.75, 60, 0.65, 72, 0.35, 84, 0.001, 96, 0.001, 127;, 0.001
;giScal	ftgen	0,0,128, -27,  0, 0.983, 24, 0.983, 36, 0.971, 48, 0.939, 60, 0.855, 72, 0.747, 84, 0.364, 96, 0.001, 127


instr	2
	iNote table     rnd(1),gihist,1					; read a random value from the function table
	aEnv  linsegr	0, 0.005, 1, p3-0.105, 1, 0.1, 0		; amplitude envelope
	iPlk  random	0.1, 0.3					; point at which to pluck the string
	iDtn  random    -0.05, 0.05					; random detune
	irefl	table	iNote, giScal					; read reflection value from giScal table according to note number  
	aSig  wgpluck2  0.58, gklev*0.5, cpsmidinn(iNote+iDtn), iPlk, irefl	; generate Karplus-Strong plucked string audio 
	kcf	expon	cpsoct(rnd(6)+6),p3,50				; filter cutoff frequency envelope
	aSig	clfilt	aSig, kcf, 0, 2					; butterworth lowpass filter	
	aL,aR pan2      aSig * aEnv, rnd(0.5)+0.5			; random panning   
	      outs      aL, aR						; send audio to outputs
endin


</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>
; GEN19.csd
; Written by Iain McCurdy, 2015

; GEN19 is an elaboration of GEN10 and GEN09 in that as well as offering control over partial number, strength and
; phase, we also have control over DC offset.

; In this example the GEN19 table is used as a 'terrain' rather than as an audio waveform.
; A small ball travels along the function as if threaded onto it. It responds to the contours of the wave 
; as if under the influence of gravity. As it travels it plays short sound pulses. The faster it moves the more 
; more frequently these pulses are generated and the louder they are, the higher it is, the higher in pitch these 
; pulses are.
; The shape of the GEN19 function is continually modulated by rspline random functions. The frequency of modulation
; for partial strength, phase and DC offset are set globally for all partials. Note that if an rspline frequency value
; is low, changes to frequency can take longer to take effect. The amplitude of modulation for the three partial 
; attributes can be set individually for each partial.

; CONTROLS
; --------
; Str.Rate	-	rate of partial strength modulation for all partials
; Phase Rate	-	rate of phase modulation for all partials
; DC Rate	-	rate of DC offset modulation for all partials
; Normalise	-	turns normalisation on or off for the GEN19 function
;			note that if normalisation is, off strength amplitudes may need to be lowered in order to keep
;			the function within the range of the gentable viewer.
; Sound On/Off	-	turns the sound on or off
; Speed		-	overall speed control for the sliding ball
; Friction	-	increasing this beyond zero adds an increasing amount of friction damping the movement of the 
;			ball. This can be useful to prevent constant movment of the ball in one direction.
; Density	-	Density of the sound impulses

; For each partial there are the following controls:
; Active	-	turns each partial on or off
; P.N.		-	partial number
; Str.		-	Amplitude of the random modulations of strength
; Phs.		-	Amplitude of the random modulations of phase
; DC		-	Amplitude of the random modulations of DC offset

			 
<Cabbage>
form caption("GEN19"), size(560, 490), pluginid("gn19"), guirefresh(32), colour(0,0,0) style("legacy")

gentable bounds(  0,  5, 560, 120), tablenumber(1), tablecolour("silver"), identchannel("table"), outlinethickness(2), amprange(-1,1,1), zoom(-1), tablegridcolour(0,0,0,0), tablebackgroundcolour(0,0,0), fill(0)
image   bounds(-50,-50, 10, 10), colour(250,150, 55), identchannel("ball"), shape("ellipse")

rslider  bounds(  5,140, 60, 60), channel("AmpRte"), text("Str.Rate"),   range(0.1, 5, 0.2,0.5,0.001)
rslider  bounds( 65,140, 60, 60), channel("PhsRte"), text("Phase Rate"), range(0.1, 5, 0.2,0.5,0.001)
rslider  bounds(125,140, 60, 60), channel("DCRte"),  text("DC Rate"),    range(0.1, 5, 0.2,0.5,0.001)
checkbox bounds(200,150,130,15), channel("Norm"), text("Normalise"), value(1)
checkbox bounds(200,170,130,15), channel("Sound"), text("Sound On/Off"), value(1)
rslider  bounds(315,140, 60, 60), channel("Speed"),  text("Speed"),    range(0.1, 16,   1,0.5,0.001)
rslider  bounds(375,140, 60, 60), channel("Friction"),  text("Friction"),    range(0,1,0.03,0.5,0.001)
rslider  bounds(435,140, 60, 60), channel("Density"),  text("Density"),    range(10,200,50,1,1)
rslider  bounds(495,140, 60, 60), channel("Level"),  text("Level"),    range(0,2,1,0.5,0.001)
line     bounds( 20,210,520,  3), colour("Grey")

button   bounds( 10,225, 50, 20), channel("On1"), text("Active"), value(1), fontcolour:0(50,50,50), fontcolour:1(255,255,0)
combobox bounds( 10,250, 50, 20), channel("PN1"), text(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16), value(1)
label    bounds( 15,270, 40, 12), text("P.N.")
rslider  bounds(  5,290, 60, 60), channel("Amp1"), text("Str."),   range(0, 1, 0.5,1,0.001)
rslider  bounds(  5,355, 60, 60), channel("Phs1"), text("Phs."),   range(0,360,180,1,0.001)
rslider  bounds(  5,420, 60, 60),  channel("DC1"),  text("DC."),   range(0, 1, 0.5,1,0.001)

button   bounds( 80,225, 50, 20), channel("On2"), text("Active"), value(1), fontcolour:0(50,50,30), fontcolour:1(255,255,0)
combobox bounds( 80,250, 50, 20), channel("PN2"), text(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16), value(2)
label    bounds( 85,270, 40, 12), text("P.N.")
rslider  bounds( 75,290, 60, 60), channel("Amp2"), text("Str."),   range(0, 1, 0.5,1,0.001)
rslider  bounds( 75,355, 60, 60), channel("Phs2"), text("Phs."),   range(0,360,180,1,0.001)
rslider  bounds( 75,420, 60, 60),  channel("DC2"),  text("DC."),   range(0, 1, 0.5,1,0.001)

button   bounds(150,225, 50, 20), channel("On3"), text("Active"), value(1), fontcolour:0(50,50,30), fontcolour:1(255,255,0)
combobox bounds(150,250, 50, 20), channel("PN3"), text(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16), value(3)
label    bounds(155,270, 40, 12), text("P.N.")
rslider  bounds(145,290, 60, 60), channel("Amp3"), text("Str."),   range(0, 1, 0.5,1,0.001)
rslider  bounds(145,355, 60, 60), channel("Phs3"), text("Phs."),   range(0,360,180,1,0.001)
rslider  bounds(145,420, 60, 60),  channel("DC3"),  text("DC."),   range(0, 1, 0.5,1,0.001)

button   bounds(220,225, 50, 20), channel("On4"), text("Active"), value(1), fontcolour:0(50,50,30), fontcolour:1(255,255,0)
combobox bounds(220,250, 50, 20), channel("PN4"), text(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16), value(4)
label    bounds(225,270, 40, 12), text("P.N.")
rslider  bounds(215,290, 60, 60), channel("Amp4"), text("Str."),   range(0, 1, 0.5,1,0.001)
rslider  bounds(215,355, 60, 60), channel("Phs4"), text("Phs."),   range(0,360,180,1,0.001)
rslider  bounds(215,420, 60, 60),  channel("DC4"),  text("DC."),   range(0, 1, 0.5,1,0.001)

button   bounds(290,225, 50, 20), channel("On5"), text("Active"), value(0), fontcolour:0(50,50,30), fontcolour:1(255,255,0)
combobox bounds(290,250, 50, 20), channel("PN5"), text(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16), value(5)
label    bounds(295,270, 40, 12), text("P.N.")
rslider  bounds(285,290, 60, 60), channel("Amp5"), text("Str."),   range(0, 1, 0.5,1,0.001)
rslider  bounds(285,355, 60, 60), channel("Phs5"), text("Phs."),   range(0,360,180,1,0.001)
rslider  bounds(285,420, 60, 60),  channel("DC5"),  text("DC."),   range(0, 1, 0.5,1,0.001)

button   bounds(360,225, 50, 20), channel("On6"), text("Active"), value(0), fontcolour:0(50,50,30), fontcolour:1(255,255,0)
combobox bounds(360,250, 50, 20), channel("PN6"), text(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16), value(6)
label    bounds(365,270, 40, 12), text("P.N.")
rslider  bounds(355,290, 60, 60), channel("Amp6"), text("Str."),   range(0, 1, 0.5,1,0.001)
rslider  bounds(355,355, 60, 60), channel("Phs6"), text("Phs."),   range(0,360,180,1,0.001)
rslider  bounds(355,420, 60, 60),  channel("DC6"),  text("DC."),   range(0, 1, 0.5,1,0.001)

button   bounds(430,225, 50, 20), channel("On7"), text("Active"), value(0), fontcolour:0(50,50,30), fontcolour:1(255,255,0)
combobox bounds(430,250, 50, 20), channel("PN7"), text(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16), value(7)
label    bounds(435,270, 40, 12), text("P.N.")
rslider  bounds(425,290, 60, 60), channel("Amp7"), text("Str."),   range(0, 1, 0.5,1,0.001)
rslider  bounds(425,355, 60, 60), channel("Phs7"), text("Phs."),   range(0,360,180,1,0.001)
rslider  bounds(425,420, 60, 60),  channel("DC7"),  text("DC."),   range(0, 1, 0.5,1,0.001)

button   bounds(500,225, 50, 20), channel("On8"), text("Active"), value(0), fontcolour:0(50,50,30), fontcolour:1(255,255,0)
combobox bounds(500,250, 50, 20), channel("PN8"), text(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16), value(8)
label    bounds(505,270, 40, 12), text("P.N.")
rslider  bounds(495,290, 60, 60), channel("Amp8"), text("Str."),   range(0, 1, 0.5,1,0.001)
rslider  bounds(495,355, 60, 60), channel("Phs8"), text("Phs."),   range(0,360,180,1,0.001)
rslider  bounds(495,420, 60, 60),  channel("DC8"),  text("DC."),   range(0, 1, 0.5,1,0.001)

label bounds(0,480,100,10), text("Iain McCurdy |2015|")
</Cabbage>
                    
<CsoundSynthesizer>

<CsOptions>   
-dm0 -n
</CsOptions>

<CsInstruments>

sr 		= 	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (1=MONO)
0dbfs		=	1	;MAXIMUM AMPLITUDE

seed	0	; seed random number generators for the system clock
opcode	scale_i,i,iii
 ival,imax,imin	xin
 ival	=	(ival * (imax-imin)) + imin
	xout	ival
endop

instr	1
	kPhsrSpd	init	0.1		; initial phasor speed
	kSpeed		chnget	"Speed"		; speed
	kphasor	phasor	kPhsrSpd		; phasor that moves the 'ball'
	kAmpMod	chnget	"AmpRte"		; random partial strength modulation frequency
	kPhsMod	chnget	"PhsRte"		; random phase modulation frequency
	kDCMod	chnget	"DCRte"			; random DC offset modulation frequency
	kNorm	chnget	"Norm"			; normalise on/off
	kSound	chnget	"Sound"			; sound on/off
	kFriction	chnget	"Friction"	; friction
	kDensity	chnget	"Density"	; sound pulse density

	; define a macro to read in and process attributes for each partial
	#define	MOD_PARTIAL(N)
	#
	kOn$N	chnget	"On$N"						; partial on/off (active switch)
	kPN$N	chnget	"PN$N"						; partial number
	kamp	chnget	"Amp$N"						; amount of strength modulation
	kphs	chnget	"Phs$N"						; amount of phase modulation
	kDC	chnget	"DC$N"						; amount of DC offset modulation
	kamp$N	rspline		0,kamp,    kAmpMod,kAmpMod		; random partial strength function
	kamp$N	limit		kamp$N,-1,1				; limit it (rspline can otherwise exceed its given limits)
	kphs$N	rspline		-kphs,kphs,    kPhsMod,kPhsMod		; random phase function
	kDC$N	rspline		-kDC,kDC,      kDCMod, kDCMod		; random DC offset function
	kDC$N	limit		kDC$N,-1,1				; limit it (rspline can otherwise exceed its given limits)
	#
	; expand macro for each partial required
	$MOD_PARTIAL(1)
	$MOD_PARTIAL(2)
	$MOD_PARTIAL(3)
	$MOD_PARTIAL(4)
	$MOD_PARTIAL(5)
	$MOD_PARTIAL(6)
	$MOD_PARTIAL(7)
	$MOD_PARTIAL(8)
	
	kmetro	metro	16			; a metronome trigger used to restrict the rate of updates
	if kmetro==1 then			; if trigger is generated...
	 reinit REBUILD_TABLE			; ... do a reinit in order to rebuild the table
	endif
	REBUILD_TABLE:
	 iNorm	=	(i(kNorm) * 2) -1	; Normalise value: 0 to 1 mapped to -1 to 1
	 ; create the new updated table
	 gifun	ftgen	1,0,512,19*iNorm,	i(kPN1),i(kamp1)*i(kOn1),i(kphs1),i(kDC1)*i(kOn1),	\
	  					i(kPN2),i(kamp2)*i(kOn2),i(kphs2),i(kDC2)*i(kOn2),	\
	  					i(kPN3),i(kamp3)*i(kOn3),i(kphs3),i(kDC3)*i(kOn3),	\
	  					i(kPN4),i(kamp4)*i(kOn4),i(kphs4),i(kDC4)*i(kOn4),	\
	  					i(kPN5),i(kamp5)*i(kOn5),i(kphs5),i(kDC5)*i(kOn5),	\
	  					i(kPN6),i(kamp6)*i(kOn6),i(kphs6),i(kDC6)*i(kOn6),	\
	  					i(kPN7),i(kamp7)*i(kOn7),i(kphs7),i(kDC7)*i(kOn7),	\
	  					i(kPN8),i(kamp8)*i(kOn8),i(kphs8),i(kDC8)*i(kOn8)
	rireturn				; out of reinit
	if kmetro==1 then			; if trigger was '1' (i.e. and table was updated...
	 chnset	"tablenumber(1)", "table"	; update the table 'view'
	 kndx	=	ftlen(gifun)*kphasor	; convert phasor (0 to 1) to raw index (0 to 512(table size))
	 kval	table	kphasor,gifun,1		; read value from table (used to calculate ball graphical height
	 k1	table	kndx-1,gifun		; read the value before the widget location
	 k2	table	kndx+1,gifun		; read the value after the widget location
	 kDlta	=	k2 - k1					; difference between the next table value and the previous table value to the ball location. This indicates slope (magnitude) and direction (sign)
	 kPhsrSpd	=	kPhsrSpd - (kDlta*kSpeed)	; acceleration/deceleration due to gravity 
	 kPhsrSpd	=	kPhsrSpd * (1-(0.1*kFriction*(kSpeed^0.25)))	; friction
	 
	 ; move the 'ball' widget (account for ball size, n.b. widget location refers to the top left hand corner)
	 Smsg	sprintfk	"pos(%d,%d)", (kphasor*560)-5, 60+(120*-(kval*0.5))
	 	chnset		Smsg,"ball"
	endif
	
	ktrig	metro	abs(kPhsrSpd)*kDensity	; trigger for sound pulses. Density depends on ball speed (regardless of direction (abs)) and Density slider
	schedkwhen	ktrig*kSound,0,0,2,0,0.3,kval,abs(kPhsrSpd),kphasor	; trigger a sound pulse and send it table value (height), widget speed and y position as p4,p5 and p6

endin

instr	2	; sound pulse
	ispd	limit	p5,0.05,0.4		; limit speed values. Otherwise when the ball move very fast the sound sound gets too loud.
	asig	mpulse	0.2*(ispd^2),0		; generate a click
	icfoct	scale_i	(p4*0.5)+1,10,5		; derive a pitch value (in oct) from ball height
	icfoct	limit	icfoct,4,12		; convert to CPS (and limit - use of unnormalised GEN19 can result in tables that extend way beyond the graphical limits)
	iLevel	chnget	"Level"
	asig	reson	asig*100*iLevel,cpsoct(icfoct),cpsoct(icfoct)*0.05,2	; filter the click to produce a note
	aL,aR	pan2	asig,p6		; pan the click
	aL	delay	aL,0.01*(1-p6)		; spatialise
	aR	delay	aR,0.01*p6		;
		outs	aL,aR
endin


</CsInstruments>

<CsScore>
i 1 0 3600
</CsScore>

</CsoundSynthesizer>
; GEN20.csd
; Written by Iain McCurdy, 2014

<Cabbage>
form caption("GEN20"), size(410, 230), pluginid("gn20"), colour("20,70,170,150") style("legacy")

gentable bounds(  5,  5, 400, 120), tablenumber(1), identchannel("table1"), zoom(-1), amprange(0,1,1), tablecolour("LightSlateGrey"), zoom(-1), tablebackgroundcolour("white"), fill(0), outlinethickness(2) tablegridcolour(220,220,220)

combobox bounds(130, 130, 175,20), channel("window"), value(1), text("Hamming","Hanning","Bartlett [Triangle]","Blackman [3-term]","Blackman-Harris [4-term]","Gaussian","Kaiser","Rectangle","Sync.")

hslider  bounds(  5,150,340, 30), text("Option"), channel("opt"), range(0, 10.00, 1, 0.5), valuetextbox(1), textbox(1), trackercolour("yellow"), fontcolour("white")
label    bounds(  3,172,110, 11), text("[Gaussian & Kaiser]"),  fontcolour("white")
checkbox bounds(345,158, 55, 13), text("x 100") channel("x100"), colour("yellow"), fontcolour("white"),  value(0)

image bounds(-5,-125,4,4), colour("red"), identchannel("scrubber"), shape("sharp")

nslider  bounds(  5,190, 50, 30), text("Index"), channel("ndx"), range(0, 4095,1024, 1,1),      fontcolour("white")
nslider  bounds( 65,190, 50, 30), text("Value"), channel("val"), range(0,    1, 0, 1,0.0001), fontcolour("white")

checkbox bounds(160,200,100, 13), text("Tone On/Off") channel("ToneOnOff"), colour("yellow"), fontcolour("white"),  value(0)

</Cabbage>
                    
<CsoundSynthesizer>

<CsOptions>   
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100	; SAMPLE RATE
ksmps 		= 	32	; NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	; NUMBER OF CHANNELS (1=MONO)
0dbfs		=	1	; MAXIMUM AMPLITUDE
			
giwindow	ftgen	1,0,4096,20,1,1,1

instr	1
	iTabSize	=	ftlen(giwindow)
	
	; read in widgets
	gkwindow	chnget	"window"
	gkndx		chnget	"ndx"
	gkndx		init	1024
	gkwindow	init	1
	gkopt	chnget	"opt"
	gkopt	init	1
	gkx100	chnget	"x100"
	gkToneOnOff	chnget	"ToneOnOff"
	
	ktrig1	changed	gkwindow
	ktrig2	changed	gkopt,gkx100
	if ktrig1==1 || ( (ktrig2==1&&(gkwindow==6||gkwindow==7))) then
	 reinit UPDATE
	endif
	UPDATE:
	 giwindow	ftgen	1,0,ftlen(giwindow),20,i(gkwindow),1,i(gkopt)* ((i(gkx100)*99)+1)
	rireturn
	if ktrig1==1||ktrig2==1 then
	 chnset	"tablenumber(1)", "table1"	; update table display	
	endif
	
	; Read index input and print value
	kval	table	gkndx,giwindow
	if changed(kval)==1||changed(gkndx)==1 then
	 kval	table	gkndx,giwindow
	 	chnset	kval,"val"
	 kxpos	=	5 + (400 * (gkndx/iTabSize))
	 kypos	=	5 + (120 * (1-kval))	 
	 Smess	sprintfk	"bounds(%d,%d,2,%d)",kxpos-2,kypos+1,125-kypos-2
	 	chnset		Smess,"scrubber"
	endif
	
	; CREATE A SOUND
	aenv	poscil	0.05*gkToneOnOff,1,giwindow
	asig	vco2	1,440,4,0.5
	asig	*=		aenv
			outs	asig,asig
endin

</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
e
</CsScore>

</CsoundSynthesizer>
; GEN21.csd
; Written by Iain McCurdy

; demonstration of the GEN21 opcode, used to create various random distributions

; changing the value given for giTabSize (in instrument header area) and the value for 'drawmode' (part of the table widget) can change the appearance of the distribution.

; display is set between -1 and 1. Certain distributions may require reduction of the 'level' control in order for them to be fully displayed

<Cabbage>
form caption("GEN21"), size(410, 220), pluginid("gn21"), colour( 40,110, 80) style("legacy")

gentable bounds(  5,  5, 400, 120), tablenumber(1), tablecolour("lime"), identchannel("table1"), amprange(-1,1,1), fill(0)

combobox bounds( 10, 130, 200,20), channel("dist"), value(1), text("Uniform [pos.]","Linear [pos.]","Triangular [pos. and neg.]","Exponential [pos.]","Biexponential [pos. and neg.]","Gaussian [pos. and neg.]","Cauchy [pos. and neg.]","Cauchy [pos.]","Beta","Weibull","Poisson")
checkbox bounds( 10, 160, 100,14), channel("AudOnOff"), text("Audio On/Off")
rslider  bounds(210, 130, 80, 80), text("Level"), channel("level"), range(0, 1.00, 1,0.5,0.001), textbox(1), valuetextbox(1), colour(20, 90, 60), trackercolour("yellow"), fontcolour("white")
rslider  bounds(270, 130, 80, 80), text("Arg.1"), channel("arg1"),  range(0, 1.00, 1), textbox(1), valuetextbox(1), colour(20, 90, 60), trackercolour("yellow"), fontcolour("white"), visible(0), identchannel("ident_arg1")
rslider  bounds(330, 130, 80, 80), text("Arg.2"), channel("arg2"),  range(0, 1.00, 1), textbox(1), valuetextbox(1), colour(20, 90, 60), trackercolour("yellow"), fontcolour("white"), visible(0), identchannel("ident_arg2")

</Cabbage>
                    
<CsoundSynthesizer>

<CsOptions>   
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100	; SAMPLE RATE
ksmps 		= 	32	; NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	; NUMBER OF CHANNELS (1=MONO)
0dbfs		=	1	; MAXIMUM AMPLITUDE

giTabSize	=	128	

gi_ ftgen	1,0,giTabSize,10,1

instr	1
	; read in widgets
	gkdist	chnget	"dist"
	gklevel	chnget	"level"
	gkarg1	chnget	"arg1"
	gkarg2	chnget	"arg2"
	gkdist	init	1
	
	ktrig	changed	gkdist,gklevel,gkarg1,gkarg2
	if ktrig==1 then
	 reinit UPDATE
	endif
	UPDATE:
	if i(gkdist)==9 then
	 chnset "visible(1)", "ident_arg1"
	 chnset "visible(1)", "ident_arg2"
	elseif i(gkdist)==10 then
	 chnset "visible(1)", "ident_arg1"
	 chnset "visible(0)", "ident_arg2"
	else
	 chnset "visible(0)", "ident_arg1"
	 chnset "visible(0)", "ident_arg2"
	endif
	idist	ftgen	1,0,giTabSize,-21,i(gkdist),i(gklevel),i(gkarg1),i(gkarg2)
	iaud	ftgen	2,0,2^18,-21,i(gkdist),i(gklevel),i(gkarg1),i(gkarg2)
	rireturn
	if ktrig==1 then
	 chnset	"tablenumber(1)", "table1"	; update table display	
	endif
	
	kAudOnOff	chnget	"AudOnOff"
	asig	poscil	0.1*kAudOnOff, sr/(2^18), iaud
			outs	asig,asig
endin

</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
e
</CsScore>

</CsoundSynthesizer>
; GEN30.csd
; Written by Iain McCurdy, 2014
; 
; GEN30 creates band limited versions of input harmonic waveforms. 
; Typically an input waveform is created using GEN07.
; The user can then define the limits, in terms of partial numbers, in the output waveform.
; If 'Interpolation' is on fractional settings for minimum and maximum partial numbers will fade the partials at the extremities of the spectrum in or out smoothly. 
; The input waveform is displayed in green, the output in yellow.

<Cabbage>
form caption("GEN30"), size(410, 290), pluginid("gn30"), colour(80, 30, 50) style("legacy")
gentable bounds(  5,  5, 400, 120), identchannel("table1"), tablenumber(1,2), tablecolour("lime","yellow"), tablecolour:0("lime"), tablecolour:1("yellow"), fill(0), outlinethickness(2), tablegridcolour(0,0,0,0)

label    bounds(348,130, 60, 10), text("SOURCE"), fontcolour("lime"), align("right")
label    bounds(348,140, 60, 10), text("RESULT"), fontcolour("yellow"), align("right")

label    bounds(  5, 136, 80, 12), text("Source")
combobox bounds(  5, 150, 80, 20), channel("src"), value(1), text("Sawtooth","Square","Triangle","Pulse")

rslider  bounds( 90,140, 80, 80), channel("minh"), text("Min.Harm."), textbox(1), valuetextbox(1), range(1.00, 100, 1), TrackerColour("yellow")
rslider  bounds(170,140, 80, 80), channel("maxh"), text("Max.Harm."), textbox(1), valuetextbox(1), range(1.00, 100, 20), TrackerColour("yellow")
rslider  bounds( 20,170, 50, 50), channel("pw"), text("P.W."), textbox(1), valuetextbox(1), range(1, 2048, 16,1,1), TrackerColour("yellow"), identchannel("pwID")
label    bounds(250,138, 80, 12), text("Listen to:")
button   bounds(250,152, 80, 18), text("SOURCE","RESULT"), channel("ListenTo"), value(1), fontcolour:0("yellow"), fontcolour:1("lime")
checkbox bounds(250,172,100, 14), channel("OnOff"),  value(0), text("Tone On/Off"), colour("yellow")
checkbox bounds(250,188,100, 14), channel("interp"),  value(1), text("Interpolate")
checkbox bounds(250,204,100, 14), channel("norm"),  value(1), text("Normalise"), colour("LightBlue")
hslider  bounds(  5,220,400, 30), channel("frq"), text("Freq."), textbox(1), valuetextbox(1), range(1, 5000, 200,0.5,1), TrackerColour("yellow")
hslider  bounds(  5,250,400, 30), channel("amp"), text("Ampl."), textbox(1), valuetextbox(1), range(0,    1, 0.1), TrackerColour("yellow")
</Cabbage>
                    
<CsoundSynthesizer>

<CsOptions>   
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100	; SAMPLE RATE
ksmps 		= 	32	; NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	; NUMBER OF CHANNELS (1=MONO)
0dbfs		=	1	; MAXIMUM AMPLITUDE

gisaw	ftgen	101,0,4096,7,1,4096,-1
gisq	ftgen	102,0,4096,7,1,2048,1,0,-1,2048,-1
gitri	ftgen	103,0,4096,7,0,1024,1,2048,-1,1024,0
gipls	ftgen	104,0,4096,7,1,16,1,0,0,4096-16,0

gidisp	ftgen	2,0,4096,7,1,4096,-1

instr	1
 gkminh		chnget	"minh"
 gkmaxh		chnget	"maxh"
 gkinterp	chnget	"interp"
 gknorm		chnget	"norm"
 gksrc		chnget	"src"
 gkOnOff	chnget	"OnOff"
 gkfrq		chnget	"frq"
 gkamp		chnget	"amp"
 gkpw		chnget	"pw"
 gkListenTo	chnget	"ListenTo"
 gksrc	init	1
 kporttime	linseg	0,0.001,0.05
 gkfrq		portk	gkfrq, kporttime
 gkamp		portk	gkamp, kporttime
   
 if ( (gkfrq*gkmaxh) >= (sr/2) ) then
  chnset	gkmaxh-1,"maxh"
 endif 
    
 ; SHOW OR HIDE WIDGETS -------------------------------------
 kchange	changed	gksrc
 if(kchange==1) then
	if gksrc==4 then
	 chnset "visible(1)", "pwID"
	else
	 chnset "visible(0)", "pwID"
	endif
 endif
; -----------------------------------------------------------

 ktrig	changed	gkminh,gkmaxh,gksrc,gkinterp,gknorm, gkpw	; If any of the input arguments are changed generate a trigger (momentary '1').
 if ktrig==1 then					; If a trigger has been generated...
  reinit	REBUILD_WAVEFORM			; ...reinitialise from label
 endif
 REBUILD_WAVEFORM:
 inorm	=	(i(gknorm)==1?1:-1)
 gipls	ftgen	104, 0, 4096, 7, 1,i(gkpw),1,0,0,4096-i(gkpw),0
 ifn	ftgen	1, 0, 4096, 30*inorm, gisaw+i(gksrc)-1, i(gkminh), i(gkmaxh),sr,i(gkinterp)	; generate a waveform based on chosen source waveform with user-set modifications
 	tableicopy gidisp, gisaw+i(gksrc)-1
 rireturn

 if ktrig==1 then
  chnset	"tablenumber(2,1)", "table1"	; update table display	
 endif

 if gkOnOff==1 then					; if 'Play Tone' is activated
  if gkListenTo==0 then
   asig	oscili	gkamp, gkfrq, 2				; audio oscillator using GEN30 waveform
  else
   asig	oscili	gkamp, gkfrq, 1				; audio oscillator using GEN30 waveform
  endif  
 	outs	asig,asig
 endif
endin

</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>
; GEN33.csd
; Written by Iain McCurdy, 2014
; 
; GEN33 generates a harmonic waveform based on data stored in another table. 
; The data for each partial in the second table is stored in the form: Strength, Partial Number / Frequency, Phase, for each partial.
; Therefore data for 10 partials would be stored using 30 items of data. GEN02 is normally used for this purpose.
; 
; In this example the user can select from a number of data sets of partial using a combobox.
; The number of partials contained within the chosen data set is displayed below the combobox.
; 
; When the GEN33 table is created the user can choose to limit the number of partials used.
; 
; In this example the GEN33 table can be auditioned and interacted with manually using the controls in the first groupbox
; or it can be played from the MIDI keyboard in which case key velocity is mapped to the number of partials used by GEN33
; thereby implementing a kind of velocity to brightness mechanism.


<Cabbage>
form caption("GEN33"), size(520, 320), pluginid("gn33") style("legacy")
gentable bounds(  0,  0, 520, 120), identchannel("table1"), tablenumber(1), tablecolour("yellow"), zoom(-1), , fill(0), amprange(1,-1,1)


groupbox bounds(0, 120,370,120), text("Manual Control"), plant("Manual"), fontcolour("white"){
checkbox bounds( 10, 30,110, 20), channel("ManualOnOff"),  value(0), text("Test On/Off")
label    bounds( 10, 50,140, 11), text("Source")
combobox bounds( 10, 61,140, 20), channel("source"), value(1), text("Tubular Bell","Chladni Plates","Tibetan Bowl 180mm","Tibetan Bowl 152mm","Tibetan Bowl 140mm","Small Handbell","Spinel Sphere","Clarinet")

label     bounds( 10, 82,100, 11), text("Maximum Harms:"), fontcolour("white"), align(left)
nslider bounds( 110, 81, 40, 15), text(""), fontcolour(white), channel("NumPartials"), range(0, 100, 0,1,1)

rslider  bounds(150, 30, 80, 80), channel("nh"), text("Num.Harms."), valuetextbox(1), textbox(1), range(1,25,25,1,1), TrackerColour("yellow"), colour(200,200,200)
rslider  bounds(220, 30, 80, 80), channel("amp"), text("Amp."), valuetextbox(1), textbox(1), range(0,1.000,0.1,0.5), TrackerColour("yellow"), colour(200,200,200)
rslider  bounds(290, 30, 80, 80), channel("frq"), text("Freq."), valuetextbox(1), textbox(1), range(5,1000.000,520,0.5), TrackerColour("yellow"), colour(200,200,200)
}

groupbox bounds(370,120,150,120), text("MIDI [Keyboard]"), plant("MIDI"), fontcolour("white"){
rslider  bounds(  0, 30, 80, 80), channel("DecTim"), text("Dec.Time"), valuetextbox(1), textbox(1), range(0.1,15.00,8,0.5), TrackerColour("yellow"), colour(200,200,200)
rslider  bounds( 70, 30, 80, 80), channel("RelTim"), text("Rel.Tim"), valuetextbox(1),  textbox(1), range(0.1,15.00,8,0.5), TrackerColour("yellow"), colour(200,200,200)
}

keyboard bounds(  0,240,520, 80)
</Cabbage>
                    
<CsoundSynthesizer>

<CsOptions>   
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100	; SAMPLE RATE
ksmps 		= 	32	; NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	; NUMBER OF CHANNELS (1=MONO)
0dbfs		=	1	; MAXIMUM AMPLITUDE
	massign	0,3	; assign midi notes on all channels to instrument 3

; partial frequency data 		strength	frequency	phase
; tubular bell
gidata1		ftgen	0,0,-10*3,-2,	1,		272,		0,\ 
					1,		538,		0,\ 
					1,		874,		0,\ 
					1,		1281,		0,\ 
					1,		1755,		0,\ 
					1,		2264,		0,\ 
					1,		2813,		0,\ 
					1,		3389,		0,\ 
					1,		4822,		0,\ 
					1,		5255,		0

;Chladni plates 	
gidata2		ftgen	0,0,-5*3,-2,	1,		62,		0,\
					1,		107,            0,\
					1,		360,            0,\
					1,		460,            0,\
					1,		863,            0

;tibetan bowl (180mm) 	
gidata3		ftgen	0,0,-7*3,-2,	1,		221,		0,\
					1,		614,            0,\
					1,		1145,           0,\
					1,		1804,           0,\
					1,		2577,           0,\
					1,		3456,           0,\
					1,		4419,           0

;tibetan bowl (152 mm)
gidata4		ftgen	0,0,-7*3,-2,	1,		314,		0,\
					1,		836,            0,\
					1,		1519,           0,\
					1,		2360,           0,\
					1,		3341,           0,\
					1,		4462,           0,\
					1,		5696,           0

;tibetan bowl (140 mm) 	
gidata5		ftgen	0,0,-5*3,-2,	1,		528,		0,\
					1,		1460,           0,\
					1,		2704,           0,\
					1,		4122,           0,\
					1,		5694,           0

;small handbell
gidata6		ftgen	0,0,-22*3,-2,	1,		1312.0,		0,\ 
					1,		1314.5,         0,\
					1,		2353.3,         0,\
					1,		2362.9,         0,\
					1,		3306.5,         0,\
					1,		3309.4,         0,\
					1,		3923.8,         0,\
					1,		3928.2,         0,\
					1,		4966.6,         0,\
					1,		4993.7,         0,\
					1,		5994.4,         0,\
					1,		6003.0,         0,\
					1,		6598.9,         0,\
					1,		6619.7,         0,\
					1,		7971.7,         0,\
					1,		7753.2,         0,\
					1,		8413.1,         0,\
					1,		8453.3,         0,\
					1,		9292.4,         0,\
					1,		9305.2,         0,\
					1,		9602.3,         0,\
					1,		9912.4,         0

;spinel sphere
gidata7		ftgen	0,0,-25*3,-2,	1,		977.25,		0,\
					1,		1003.16,        0,\
					1,		1390.13,        0,\
					1,		1414.93,        0,\
					1,		1432.84,        0,\
					1,		1465.34,        0,\
					1,		1748.48,        0,\
					1,		1834.20,        0,\
					1,		1919.90,        0,\
					1,		1933.64,        0,\
					1,		1987.20,        0,\
					1,		2096.48,        0,\
					1,		2107.10,        0,\
					1,		2202.08,        0,\
					1,		2238.40,        0,\
					1,		2280.10,        0,\
					1,		2290.53,        0,\
					1,		2400.88,        0,\
					1,		2435.85,        0,\
					1,		2507.80,        0,\
					1,		2546.30,        0,\
					1,		2608.55,        0,\
					1,		2652.35,        0,\
					1,		2691.70,        0,\
					1,		2708.00,        0
			
;clarinet
gidata8		ftgen	0,0,-24*3,-2,		0.753504,	100,	rnd(1),\
						0.011446,	200,	rnd(1),\
						0.501720,	300,	rnd(1),\
						0.055791,	400,	rnd(1),\
						0.241768,	500,	rnd(1),\
						0.037889,	600,	rnd(1),\
						0.027203,	700,	rnd(1),\
						0.062793,	800,	rnd(1),\
						0.102494,	900,	rnd(1),\
						0.030506,	1000,	rnd(1),\
						0.042453,	1100,	rnd(1),\
						0.050202,	1200,	rnd(1),\
						0.031077,	1300,	rnd(1),\
						0.027208,	1400,	rnd(1),\
						0.020897,	1500,	rnd(1),\
						0.022205,	1600,	rnd(1),\
						0.012154,	1700,	rnd(1),\
						0.008160,	1800,	rnd(1),\
						0.004886,	1900,	rnd(1),\
						0.005076,	2000,	rnd(1),\
						0.003805,	2100,	rnd(1),\
						0.001322,	2200,	rnd(1),\
						0.001149,	2300,	rnd(1),\
						0.001450,	2300,	rnd(1),\
						0.001450,	2400,	rnd(1)


giTabSize	=	(2^15) +1	; function table size of the GEN33 table

instr	1	; manual instrument
 gknh		chnget	"nh"			; read in widgets
 gkamp		chnget	"amp"
 gkfrq		chnget	"frq"
 gkManualOnOff	chnget	"ManualOnOff"
 gksource	chnget	"source"
 gksource	init	1
 
 kporttime	linseg	0,0.001,0.05
 gkfrq		portk	gkfrq, kporttime
 gkamp		portk	gkamp, kporttime
 
 ktrig		changed	gknh,gkManualOnOff,gksource	; if listed widgets are changed generate a trigger

 if ktrig==1 then				; if a trigger has been generated...
  reinit UPDATE_WAVEFORM			; ...begin a reinitialisation pass from the label UPDATE_WAVEFORM
 endif
 UPDATE_WAVEFORM:				; begin reinitialisation from here
  gisource	=	gidata1+i(gksource)-1	; derive number of source function table from combo box and number of first table in the list 
  iNumPartials	=	ftlen(gisource)/3
  		chnset	iNumPartials,"NumPartials"	; write number of partials for this algorithm to number box
  giwave	ftgen	1,0, giTabSize,-33,gisource,i(gknh),1,-1  ; create a GEN33 function table / waveform from the source function table data and make use of the user defined number of partials
 rireturn
 
 
 if ktrig==1 then				; if a widget for 'Num.Harms' or 'Manual On/Off' has been changed...
   chnset	"tablenumber(1)", "table1"	; ...update table display	
 endif
 
 if gkManualOnOff==1 then			; if 'Manual On/Off' button is on...
  aL		oscil3	gkamp,gkfrq/400,giwave	; create an audio oscillator using the GEN33 waveform
  aR		oscil3	gkamp,gkfrq/400,giwave,0.13	; create an audio oscillator using the GEN33 waveform
 		outs	aL,aR		
 endif
 
endin


instr	3	; midi / keyboard instrument
 iDecTim	chnget	"DecTim"
 iRelTim	chnget	"RelTim"
 
 iNumH	ampmidi	(ftlen(gisource)/3)+1			; midi velocity mapped to a value between zero (min velocity) and the number of partials in the data table (max velocity)
 
 	chnset	int(iNumH),"nh"
 ivel	ampmidi	1					; midi velocity mapped to a value in the range zero to 1 
 iwave	ftgentmp	0,0, giTabSize,-33,gisource,iNumH,1,-1	; create a local and temporary waveform using GEN33 (overlapping notes may need different tables)
 	tableicopy	giwave, iwave			; copy local table to global table at i-time
 
 ktrig	init	1					; only update table during the first k period of a note (to conserve resources)
 if  ktrig==1 then
  chnset	"tablenumber(1)", "table1"		; update table display	
 endif
 ktrig	=	0	

 ; CREATE SOME SOUND
 icps	cpsmidi						; midi note number
 aL	oscil3	gkamp,icps/400,iwave	; create an audio oscilator
 aR	oscil3	gkamp,icps/400,iwave,0.13; create an audio oscilator
 acf	expsegr	10000,iDecTim,   50,iRelTim,50		; filter cutoff envelope (percussive decay)
 aenv	expsegr	1,    iDecTim,0.001,iRelTim,0.001	; amplitude envelope
 aL	butlp	aL,acf					; filter audio
 aR	butlp	aR,acf					; filter audio
 aL	=	aL * (aenv-0.001) * ivel		; scale amplitude of audio using envelope and midi velocity
 aR	=	aR * (aenv-0.001) * ivel		; scale amplitude of audio using envelope and midi velocity
 	outs	aL, aR
 
endin

</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
;f 0 3600
</CsScore>

</CsoundSynthesizer>
; GEN41.csd
; Written by Iain McCurdy, 2014.

; Demonstration of GEN41
; GEN41 can be used to genrate histogram-like function tables in which the number of times each value is repeated is defined by its associated probability value.
; The actual probabilities as fractions of 1 are the value divided by the sum of all probability values. (a total of '1' indicates all possibilities are represented.)

; In this example the histogram is used as a probability distribution from which notes are randomly chosen. Values define (midi) note numbers.

<Cabbage>
form caption("GEN41"), size(420, 395), pluginid("gn41"), colour(120,70,170,150) style("legacy")

gentable bounds(  5,  5, 410, 115), identchannel("table1"), tablenumber(1), tablecolour("yellow"), outlinethickness(2), amprange(36,84,1), zoom(-1), fill(0)

groupbox bounds(0, 125,420,170), text("Histogram"), plant("histogram"), fontcolour("white"){
rslider bounds(  0, 25, 70, 70), channel("prob1"), text("Prob. 1"), valuetextbox(1), textbox(1), range(0, 100, 70,1,1), colour(160,110,210,200), trackercolour("white")
rslider bounds( 50, 25, 70, 70), channel("prob2"), text("Prob. 2"), valuetextbox(1), textbox(1), range(0, 100,  5,1,1), colour(160,110,210,200), trackercolour("white")
rslider bounds(100, 25, 70, 70), channel("prob3"), text("Prob. 3"), valuetextbox(1), textbox(1), range(0, 100,  5,1,1), colour(160,110,210,200), trackercolour("white")
rslider bounds(150, 25, 70, 70), channel("prob4"), text("Prob. 4"), valuetextbox(1), textbox(1), range(0, 100, 15,1,1), colour(160,110,210,200), trackercolour("white")
rslider bounds(200, 25, 70, 70), channel("prob5"), text("Prob. 5"), valuetextbox(1), textbox(1), range(0, 100, 15,1,1), colour(160,110,210,200), trackercolour("white")
rslider bounds(250, 25, 70, 70), channel("prob6"), text("Prob. 6"), valuetextbox(1), textbox(1), range(0, 100,  5,1,1), colour(160,110,210,200), trackercolour("white")
rslider bounds(300, 25, 70, 70), channel("prob7"), text("Prob. 7"), valuetextbox(1), textbox(1), range(0, 100,  5,1,1), colour(160,110,210,200), trackercolour("white")
rslider bounds(350, 25, 70, 70), channel("prob8"), text("Prob. 8"), valuetextbox(1), textbox(1), range(0, 100, 70,1,1), colour(160,110,210,200), trackercolour("white")

rslider bounds(  0, 95, 70, 70), channel("val1"), text("Value 1"), valuetextbox(1), textbox(1), range(36, 84, 60,1,1), colour(160,110,210,200), trackercolour("white")
rslider bounds( 50, 95, 70, 70), channel("val2"), text("Value 2"), valuetextbox(1), textbox(1), range(36, 84, 62,1,1), colour(160,110,210,200), trackercolour("white")
rslider bounds(100, 95, 70, 70), channel("val3"), text("Value 3"), valuetextbox(1), textbox(1), range(36, 84, 64,1,1), colour(160,110,210,200), trackercolour("white")
rslider bounds(150, 95, 70, 70), channel("val4"), text("Value 4"), valuetextbox(1), textbox(1), range(36, 84, 65,1,1), colour(160,110,210,200), trackercolour("white")
rslider bounds(200, 95, 70, 70), channel("val5"), text("Value 5"), valuetextbox(1), textbox(1), range(36, 84, 67,1,1), colour(160,110,210,200), trackercolour("white")
rslider bounds(250, 95, 70, 70), channel("val6"), text("Value 6"), valuetextbox(1), textbox(1), range(36, 84, 69,1,1), colour(160,110,210,200), trackercolour("white")
rslider bounds(300, 95, 70, 70), channel("val7"), text("Value 7"), valuetextbox(1), textbox(1), range(36, 84, 71,1,1), colour(160,110,210,200), trackercolour("white")
rslider bounds(350, 95, 70, 70), channel("val8"), text("Value 8"), valuetextbox(1), textbox(1), range(36, 84, 72,1,1), colour(160,110,210,200), trackercolour("white")
}

groupbox bounds(0, 295,420,100), text("Synthesiser"), plant("synth"), fontcolour("white"){
checkbox bounds( 15, 50,115, 17), channel("SynthOnOff"), text("On/Off"),  value(0), colour("yellow"), shape("square")
rslider  bounds( 75, 25, 70, 70), channel("lev"),  text("Level"), valuetextbox(1), textbox(1), range(0, 1.00, 0.7), colour(160,110,210,200), trackercolour("white")
rslider  bounds(125, 25, 70, 70), channel("rate"), text("Rate"), valuetextbox(1),  textbox(1), range(0.2, 5.00, 2), colour(160,110,210,200), trackercolour("white")
rslider  bounds(175, 25, 70, 70), channel("dur"),  text("Dur."), valuetextbox(1),  textbox(1), range(0.1, 3.00, 2), colour(160,110,210,200), trackercolour("white")
}

</Cabbage>
                    
<CsoundSynthesizer>

<CsOptions>   
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100	; SAMPLE RATE
ksmps 		= 	32	; NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	; NUMBER OF CHANNELS (1=MONO)
0dbfs		=	1	; MAXIMUM AMPLITUDE

; default waveform		
gihist	ftgen	1,0, 512, -41, 0, 100, 84, 256, 72, 128

instr	1
	iftlen	=	ftlen(1)		; length of function  table
	kftlen	init	iftlen
	
	; read in widgets
	kval1	chnget	"val1"
	kval2	chnget	"val2"
	kval3	chnget	"val3"
	kval4	chnget	"val4"
	kval5	chnget	"val5"
	kval6	chnget	"val6"
	kval7	chnget	"val7"
	kval8	chnget	"val8"

	kprob1	chnget	"prob1"
	kprob2	chnget	"prob2"
	kprob3	chnget	"prob3"
	kprob4	chnget	"prob4"
	kprob5	chnget	"prob5"
	kprob6	chnget	"prob6"
	kprob7	chnget	"prob7"
	kprob8	chnget	"prob8"

	kprob1	init	64
	kprob2	init	64
	kprob3	init	64
	kprob4	init	64
	kprob5	init	64
	kprob6	init	64
	kprob7	init	64
	kprob8	init	64

	gklev	chnget	"lev"
	gkSynthOnOff	chnget	"SynthOnOff"
	gkrate	chnget	"rate"
	gkdur	chnget	"dur"

	ktrig	changed		kval1,kval2,kval3,kval4,kval5,kval6,kval7,kval8, kprob1,kprob2,kprob3,kprob4,kprob5,kprob6,kprob7,kprob8
	if ktrig==1 then	; peg rate of update. Tables updated at this rate. If too slow, glitching will be heard in the output, particularly if random movement speed is high. If too high CPU performance will suffer.
	 reinit	UPDATE
	endif
	UPDATE:
	gihist	ftgen	1,0, iftlen, -41, i(kval1), i(kprob1), i(kval2), i(kprob2),   i(kval3),i(kprob3),   i(kval4),i(kprob4),   i(kval5),i(kprob5),   i(kval6),i(kprob6),   i(kval7),i(kprob7),   i(kval8),i(kprob8)
	rireturn

	if ktrig==1 then			; 
	 chnset	"tablenumber(1)", "table1"	; update table display	
	endif

	; TRIGGER SOME NOTES
	kNoteTrig	init	1
	krhy	trandom	kNoteTrig,0,3
	kNoteTrig	metro	gkrate*(2^int(krhy))
	schedkwhen	kNoteTrig*gkSynthOnOff,0,0,2,0,gkdur
endin

; SCALE FOR REFLECTION DEPENDENT UPON MIDI NOTE NUMBER
giScal	ftgen	0,0,128, -27,  0, 0.9, 24, 0.9, 36, 0.85, 48, 0.75, 60, 0.65, 72, 0.35, 84, 0.001, 96, 0.001, 127;, 0.001


gisine	ftgen	0,0,4096,10,1

instr	2
	iNote 	table     	rnd(1),gihist,1                 	; read a random value from the function table
	aEnv  	linsegr		0, 0.005, 1, p3-0.105, 1, 0.1, 0 	; amplitude envelope
	iPlk  	random		0.1, 0.3                         	; point at which to pluck the string
	iDtn  	random    	-0.05, 0.05                      	; random detune
	irefl	table		iNote, giScal
	aSig  	wgpluck2  	0.58, 0.5*gklev, cpsmidinn(iNote+iDtn), iPlk, irefl   
	kcf		expon		cpsoct(rnd(6)+6),p3,50
	aSig	clfilt		aSig, kcf, 0, 2						; butterworth lowpass filter	
	aL,aR 	pan2		aSig * aEnv, rnd(0.5)+0.5        	; random panning   
	      	outs		aL, aR
endin

</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>
; GEN42.csd
; Demonstration of GEN42
; Written by Iain McCurdy, 2014.

<Cabbage>
form caption("GEN42"), size(420,495), pluginid("gn42"), colour(210,110, 80,200) style("legacy")

gentable bounds(  5,  5, 410, 145), identchannel("table1"), tablenumber(1), outlinethickness(2), tablecolour("yellow"), amprange(24,96,1), zoom(-1), fill(0)

groupbox bounds(0, 155,420,240), text("Histogram"), plant("histogram"), fontcolour("white"){
rslider bounds(  0, 25, 70, 70), channel("prob1"), text("Prob. 1"), valuetextbox(1), textbox(1), range(0, 100, 24,1,1), colour(210,110, 80,200), trackercolour("white")
rslider bounds( 50, 25, 70, 70), channel("prob2"), text("Prob. 2"), valuetextbox(1), textbox(1), range(0, 100, 64,1,1), colour(210,110, 80,200), trackercolour("white")
rslider bounds(100, 25, 70, 70), channel("prob3"), text("Prob. 3"), valuetextbox(1), textbox(1), range(0, 100, 64,1,1), colour(210,110, 80,200), trackercolour("white")
rslider bounds(150, 25, 70, 70), channel("prob4"), text("Prob. 4"), valuetextbox(1), textbox(1), range(0, 100, 34,1,1), colour(210,110, 80,200), trackercolour("white")
rslider bounds(200, 25, 70, 70), channel("prob5"), text("Prob. 5"), valuetextbox(1), textbox(1), range(0, 100, 64,1,1), colour(210,110, 80,200), trackercolour("white")
rslider bounds(250, 25, 70, 70), channel("prob6"), text("Prob. 6"), valuetextbox(1), textbox(1), range(0, 100, 84,1,1), colour(210,110, 80,200), trackercolour("white")
rslider bounds(300, 25, 70, 70), channel("prob7"), text("Prob. 7"), valuetextbox(1), textbox(1), range(0, 100, 64,1,1), colour(210,110, 80,200), trackercolour("white")
rslider bounds(350, 25, 70, 70), channel("prob8"), text("Prob. 8"), valuetextbox(1), textbox(1), range(0, 100, 64,1,1), colour(210,110, 80,200), trackercolour("white")

rslider bounds(  0, 95, 70, 70), channel("min1"), text("Min 1"), valuetextbox(1), textbox(1), range(24, 96, 50,1,1), colour(210,110, 80,200), trackercolour("white")
rslider bounds( 50, 95, 70, 70), channel("min2"), text("Min 2"), valuetextbox(1), textbox(1), range(24, 96, 62,1,1), colour(210,110, 80,200), trackercolour("white")
rslider bounds(100, 95, 70, 70), channel("min3"), text("Min 3"), valuetextbox(1), textbox(1), range(24, 96, 48,1,1), colour(210,110, 80,200), trackercolour("white")
rslider bounds(150, 95, 70, 70), channel("min4"), text("Min 4"), valuetextbox(1), textbox(1), range(24, 96, 44,1,1), colour(210,110, 80,200), trackercolour("white")
rslider bounds(200, 95, 70, 70), channel("min5"), text("Min 5"), valuetextbox(1), textbox(1), range(24, 96, 56,1,1), colour(210,110, 80,200), trackercolour("white")
rslider bounds(250, 95, 70, 70), channel("min6"), text("Min 6"), valuetextbox(1), textbox(1), range(24, 96, 54,1,1), colour(210,110, 80,200), trackercolour("white")
rslider bounds(300, 95, 70, 70), channel("min7"), text("Min 7"), valuetextbox(1), textbox(1), range(24, 96, 52,1,1), colour(210,110, 80,200), trackercolour("white")
rslider bounds(350, 95, 70, 70), channel("min8"), text("Min 8"), valuetextbox(1), textbox(1), range(24, 96, 76,1,1), colour(210,110, 80,200), trackercolour("white")

rslider bounds(  0,165, 70, 70), channel("max1"), text("Max 1"), valuetextbox(1), textbox(1), range(24, 96, 51,1,1), colour(210,110, 80,200), trackercolour("white")
rslider bounds( 50,165, 70, 70), channel("max2"), text("Max 2"), valuetextbox(1), textbox(1), range(24, 96, 61,1,1), colour(210,110, 80,200), trackercolour("white")
rslider bounds(100,165, 70, 70), channel("max3"), text("Max 3"), valuetextbox(1), textbox(1), range(24, 96, 49,1,1), colour(210,110, 80,200), trackercolour("white")
rslider bounds(150,165, 70, 70), channel("max4"), text("Max 4"), valuetextbox(1), textbox(1), range(24, 96, 44,1,1), colour(210,110, 80,200), trackercolour("white")
rslider bounds(200,165, 70, 70), channel("max5"), text("Max 5"), valuetextbox(1), textbox(1), range(24, 96, 57,1,1), colour(210,110, 80,200), trackercolour("white")
rslider bounds(250,165, 70, 70), channel("max6"), text("Max 6"), valuetextbox(1), textbox(1), range(24, 96, 53,1,1), colour(210,110, 80,200), trackercolour("white")
rslider bounds(300,165, 70, 70), channel("max7"), text("Max 7"), valuetextbox(1), textbox(1), range(24, 96, 53,1,1), colour(210,110, 80,200), trackercolour("white")
rslider bounds(350,165, 70, 70), channel("max8"), text("Max 8"), valuetextbox(1), textbox(1), range(24, 96, 75,1,1), colour(210,110, 80,200), trackercolour("white")
}

groupbox bounds(0, 395,420,100), text("Synthesiser"), plant("synth"), fontcolour("white"){
checkbox bounds( 15, 50,115, 17), channel("SynthOnOff"), text("On/Off"),  value(0), colour:1("yellow"), colour:0("black"), shape("square")
rslider  bounds( 75, 25, 70, 70), channel("lev"),  text("Level"), valuetextbox(1), textbox(1), textbox(1), range(0, 1.00, 0.7), colour(210,110, 80,200), trackercolour("white")
rslider  bounds(125, 25, 70, 70), channel("rate"), text("Rate"), valuetextbox(1), textbox(1),  textbox(1), range(0.2, 5.00, 2), colour(210,110, 80,200), trackercolour("white")
rslider  bounds(175, 25, 70, 70), channel("dur"),  text("Dur."), valuetextbox(1), textbox(1),  textbox(1), range(0.1, 3.00, 2), colour(210,110, 80,200), trackercolour("white")
}

</Cabbage>
                    
<CsoundSynthesizer>

<CsOptions>   
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100	; SAMPLE RATE
ksmps 		= 	32	; NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	; NUMBER OF CHANNELS (1=MONO)
0dbfs		=	1	; MAXIMUM AMPLITUDE

; default waveform		
gihist	ftgen	1,0, 512, -42, 0,0, 100 ;

instr	1
	iftlen	=	ftlen(1)		; length of function  table
	kftlen	init	iftlen
	
	; read in widgets
	kmin1	chnget	"min1"
	kmin2	chnget	"min2"
	kmin3	chnget	"min3"
	kmin4	chnget	"min4"
	kmin5	chnget	"min5"
	kmin6	chnget	"min6"
	kmin7	chnget	"min7"
	kmin8	chnget	"min8"

	kmax1	chnget	"max1"
	kmax2	chnget	"max2"
	kmax3	chnget	"max3"
	kmax4	chnget	"max4"
	kmax5	chnget	"max5"
	kmax6	chnget	"max6"
	kmax7	chnget	"max7"
	kmax8	chnget	"max8"

	kprob1	chnget	"prob1"
	kprob2	chnget	"prob2"
	kprob3	chnget	"prob3"
	kprob4	chnget	"prob4"
	kprob5	chnget	"prob5"
	kprob6	chnget	"prob6"
	kprob7	chnget	"prob7"
	kprob8	chnget	"prob8"

	gklev	chnget	"lev"
	gkSynthOnOff	chnget	"SynthOnOff"
	gkrate	chnget	"rate"
	gkdur	chnget	"dur"

	ktrig	changed		kmin1,kmin2,kmin3,kmin4,kmin5,kmin6,kmin7,kmin8, kmax1,kmax2,kmax3,kmax4,kmax5,kmax6,kmax7,kmax8, kprob1,kprob2,kprob3,kprob4,kprob5,kprob6,kprob7,kprob8
	if ktrig==1 then	; peg rate of update. Tables updated at this rate. If too slow, glitching will be heard in the output, particularly if random movement speed is high. If too high CPU performance will suffer.
	 reinit	UPDATE
	endif
	UPDATE:
	gihist	ftgen	1,0, iftlen, -42, i(kmin1), i(kmax1), i(kprob1),\
	                                  i(kmin2), i(kmax2), i(kprob2),\
	                                  i(kmin3), i(kmax3), i(kprob3),\
	                                  i(kmin4), i(kmax4), i(kprob4),\
	                                  i(kmin5), i(kmax5), i(kprob5),\
	                                  i(kmin6), i(kmax6), i(kprob6),\
	                                  i(kmin7), i(kmax7), i(kprob7),\
	                                  i(kmin8), i(kmax8), i(kprob8)


	rireturn

	if ktrig==1 then			; 
	 chnset	"tablenumber(1)", "table1"	; update table display	
	endif

	; TRIGGER SOME NOTES
	kNoteTrig	init	1
	krhy	trandom	kNoteTrig,0,3
	kNoteTrig	metro	gkrate*(2^int(krhy))
	krate		randomi	0.5,4,1,1
	schedkwhen	kNoteTrig*gkSynthOnOff,0,0,2,0,gkdur
endin

; SCALE FOR REFLECTION DEPENDENT UPON MIDI NOTE NUMBER
;giScal	ftgen	0,0,128, -27,  0, 0.9, 24, 0.9, 36, 0.85, 48, 0.75, 60, 0.65, 72, 0.35, 84, 0.001, 96, 0.001, 127;, 0.001
giScal	ftgen	0,0,128, -27,  0, 0.983, 24, 0.983, 36, 0.971, 48, 0.939, 60, 0.855, 72, 0.747, 84, 0.364, 96, 0.001, 127

gasendL,gasendR	init	0

instr	2
	iNote table     rnd(1),gihist,1                 ; read a random value from the function table
	aEnv  linsegr	0, 0.005, 1, p3-0.105, 1, 0.1, 0 ; amplitude envelope
	iPlk  random	0.1, 0.3                         ; point at which to pluck the string
	iDtn  random    -0.05, 0.05                      ; random detune
	irefl	table	iNote, giScal
	aSig  wgpluck2  0.58, 0.5*gklev, cpsmidinn(iNote+iDtn), iPlk, irefl    	
	kcf	expon	cpsoct(rnd(6)+6),p3,50
	aSig	clfilt	aSig, kcf, 0, 2					; butterworth lowpass filter	 
	aL,aR pan2      aSig * aEnv, rnd(0.5)+0.5        ; random panning   
	      outs      aL, aR
	gasendL	=	gasendL + aL*0.2
	gasendR	=	gasendR + aR*0.2
	                                                                             
endin

instr	99
	aL,aR	reverbsc	gasendL,gasendR,0.82,7000
		outs		aL,aR
		clear		gasendL,gasendR
endin

</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
i 99 0 [3600*24*7]
f 0 3600
</CsScore>

</CsoundSynthesizer>

<Cabbage>
form caption("Drum Pads") size(850, 430), pluginid("DPds") style("legacy")
image bounds( 10, 10, 200, 200),     colour(150,150,170), shape("rounded"), outlinecolour("white"), line(0)
image bounds(220, 10, 200, 200),     colour(150,150,170), shape("rounded"), outlinecolour("white"), line(0)
image bounds(430, 10, 200, 200),     colour(150,150,170), shape("rounded"), outlinecolour("white"), line(0)
image bounds(640, 10, 200, 200),     colour(150,150,170), shape("rounded"), outlinecolour("white"), line(0)
image bounds( 10,220, 200, 200),     colour(150,150,170), shape("rounded"), outlinecolour("white"), line(0)
image bounds(220,220, 200, 200),     colour(150,150,170), shape("rounded"), outlinecolour("white"), line(0)
image bounds(430,220, 200, 200),     colour(150,150,170), shape("rounded"), outlinecolour("white"), line(0)
image bounds(640,220, 200, 200),     colour(150,150,170), shape("rounded"), outlinecolour("white"), line(0)

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-n -dm0
</CsOptions>

<CsInstruments>

sr	= 	44100
ksmps	= 	16
nchnls	= 	2
0dbfs	=	1

gisine		ftgen	0,0,1024,10,1		; A SINE WAVE
gicos		ftgen	0,0,65536,9,1,1,90	; A COSINE WAVE

instr	1

 gkMOUSE_X	chnget	"MOUSE_X"
 gkMOUSE_Y	chnget	"MOUSE_Y"
 gkMOUSE_DOWN_LEFT	chnget	"MOUSE_DOWN_LEFT"

#define PAD(N'X'Y'INSTR)
 #
 ix$N	=	$X
 iy$N	=	$Y
 if (gkMOUSE_X > ix$N)  && (gkMOUSE_X < (ix$N+200))  && (gkMOUSE_Y > iy$N)  && (gkMOUSE_Y < (iy$N+200)) then
  kinside$N	=	1
 else
  kinside$N	=	0
 endif

 if kinside$N = 1 then
  gkx	=	(gkMOUSE_X - ix$N) / 200	; normalised coordinates
  gky	=	(gkMOUSE_Y - iy$N) / 200
  gky	expcurve	1-gky,8
  ktrig	trigger	gkMOUSE_DOWN_LEFT,0.5,0
  schedkwhen	ktrig,0,0,$INSTR,0,0.01,gkx,gky
 endif
 #

$PAD(1'10'10'101)
$PAD(2'220'10'102)
$PAD(3'430'10'103)
$PAD(4'640'10'104)
$PAD(5'10'220'105)
$PAD(6'220'220'106)
$PAD(7'430'220'107)
$PAD(8'640'220'108)

endin


instr	101	;BASS DRUM
	p3	=	2								;NOTE DURATION. SCALED USING GUI 'Decay' KNOB

	;SUSTAIN AND BODY OF THE SOUND
	kmul	transeg	0.2,p3*0.5,-15,0.01, p3*0.5,0,0					;PARTIAL STRENGTHS MULTIPLIER USED BY GBUZZ. DECAYS FROM A SOUND WITH OVERTONES TO A SINE TONE.
	kbend	transeg	0.5,1.2,-4, 0,1,0,0						;SLIGHT PITCH BEND AT THE START OF THE NOTE 
	asig	gbuzz	0.5,50*semitone(kbend),20,1,kmul,gicos				;GBUZZ TONE
	aenv	transeg	1,p3-0.004,-6,0							;AMPLITUDE ENVELOPE FOR SUSTAIN OF THE SOUND
	aatt	linseg	0,0.004,1							;SOFT ATTACK
	asig	=	asig*aenv*aatt

	;HARD, SHORT ATTACK OF THE SOUND
	aenv	linseg	1,0.07,0							;AMPLITUDE ENVELOPE (FAST DECAY)						
	acps	expsega	400,0.07,0.001,1,0.001						;FREQUENCY OF THE ATTACK SOUND. QUICKLY GLISSES FROM 400 Hz TO SUB-AUDIO
	aimp	oscili	aenv,acps,gisine						;CREATE ATTACK SOUND
	
	amix	=	((asig*0.5)+(aimp*0.35))*p5			;MIX SUSTAIN AND ATTACK SOUND ELEMENTS AND SCALE USING GUI 'Level' KNOB
	
	aL,aR	pan2	amix,p4							;PAN THE MONOPHONIC SOUND
		outs	aL,aR								;SEND AUDIO TO OUTPUTS
endin

instr	102	;SNARE DRUM
	;SOUND CONSISTS OF TWO SINE TONES, AN OCTAVE APART AND A NOISE SIGNAL
	ifrq  	=	342		;FREQUENCY OF THE TONES
	iNseDur	=	0.3		;DURATION OF THE NOISE COMPONENT
	iPchDur	=	0.1		;DURATION OF THE SINE TONES COMPONENT
	p3	=	iNseDur 	;p3 DURATION TAKEN FROM NOISE COMPONENT DURATION (ALWATS THE LONGEST COMPONENT)
	
	;SINE TONES COMPONENT
	aenv1	expseg	1,iPchDur,0.0001,p3-iPchDur,0.0001		;AMPLITUDE ENVELOPE
	apitch1	oscili	1,ifrq,gisine			;SINE TONE 1
	apitch2	oscili	0.25,ifrq*0.5,gisine		;SINE TONE 2 (AN OCTAVE LOWER)
	apitch	=	(apitch1+apitch2)*0.75				;MIX THE TWO SINE TONES

	;NOISE COMPONENT
	aenv2	expon	1,p3,0.0005					;AMPLITUDE ENVELOPE
	anoise	noise	0.75,0						;CREATE SOME NOISE
	anoise	butbp	anoise,10000,10000		;BANDPASS FILTER THE NOISE SIGNAL
	anoise	buthp	anoise,1000					;HIGHPASS FILTER THE NOISE SIGNAL
	kcf	expseg	5000,0.1,3000,p3-0.2,3000			;CUTOFF FREQUENCY FOR A LOWPASS FILTER
	anoise	butlp	anoise,kcf					;LOWPASS FILTER THE NOISE SIGNAL
	amix	=	((apitch*aenv1)+(anoise*aenv2))*p5		;MIX AUDIO SIGNALS AND SCALE ACCORDING TO GUI 'Level' CONTROL
	aL,aR	pan2	amix,p4						;PAN THE MONOPHONIC AUDIO SIGNAL
		outs	aL,aR						;SEND AUDIO TO OUTPUTS
endin

instr	103	;OPEN HIGH HAT
	kFrq1	=	296 	;FREQUENCIES OF THE 6 OSCILLATORS
	kFrq2	=	285 	
	kFrq3	=	365 	
	kFrq4	=	348 	
	kFrq5	=	420 	
	kFrq6	=	835 	
	p3	=	0.5			;DURATION OF THE NOTE
	
	;SOUND CONSISTS OF 6 PULSE OSCILLATORS MIXED WITH A NOISE COMPONENT
	;PITCHED ELEMENT
	aenv	linseg	1,p3-0.05,0.1,0.05,0		;AMPLITUDE ENVELOPE FOR THE PULSE OSCILLATORS
	ipw	=	0.25				;PULSE WIDTH
	a1	vco2	0.5,kFrq1,2,ipw			;PULSE OSCILLATORS...
	a2	vco2	0.5,kFrq2,2,ipw
	a3	vco2	0.5,kFrq3,2,ipw
	a4	vco2	0.5,kFrq4,2,ipw
	a5	vco2	0.5,kFrq5,2,ipw
	a6	vco2	0.5,kFrq6,2,ipw
	amix	sum	a1,a2,a3,a4,a5,a6		;MIX THE PULSE OSCILLATORS
	amix	reson	amix,5000,5000,1		;BANDPASS FILTER THE MIXTURE
	amix	buthp	amix,5000			;HIGHPASS FILTER THE SOUND...
	amix	buthp	amix,5000			;...AND AGAIN
	amix	=	amix*aenv			;APPLY THE AMPLITUDE ENVELOPE
	
	;NOISE ELEMENT
	anoise	noise	0.8,0				;GENERATE SOME WHITE NOISE
	aenv	linseg	1,p3-0.05,0.1,0.05,0		;CREATE AN AMPLITUDE ENVELOPE
	kcf	expseg	20000,0.7,9000,p3-0.1,9000	;CREATE A CUTOFF FREQ. ENVELOPE
	anoise	butlp	anoise,kcf			;LOWPASS FILTER THE NOISE SIGNAL
	anoise	buthp	anoise,8000			;HIGHPASS FILTER THE NOISE SIGNAL
	anoise	=	anoise*aenv			;APPLY THE AMPLITUDE ENVELOPE
	
	;MIX PULSE OSCILLATOR AND NOISE COMPONENTS
	amix	=	(amix+anoise)*p5*0.55
	aL,aR	pan2	amix,p4				;PAN MONOPHONIC SIGNAL
		outs	aL,aR				;SEND TO OUTPUTS
	kactive	active	p1+1				;CHECK NUMBER OF ACTIVE INSTANCES OF CLOSED HIGH HAT INSTRUMENT
	if kactive>0 then			;IF HIGH-HAT CLOSED IS ACTIVE...
	 turnoff				;TURN OFF THIS INSTRUMENT
	endif
endin

instr	104	;CLOSED HIGH HAT
	kFrq1	=	296		 	;FREQUENCIES OF THE 6 OSCILLATORS
	kFrq2	=	285 	
	kFrq3	=	365 	
	kFrq4	=	348 	
	kFrq5	=	420 	
	kFrq6	=	835 	
	idur	=	0.088			;DURATION OF THE NOTE
	p3	=	idur

	iactive	active	p1-1			;SENSE ACTIVITY OF PREVIOUS INSTRUMENT (OPEN HIGH HAT) 
	if iactive>0 then			;IF 'OPEN HIGH HAT' IS ACTIVE...
	 turnoff2	p1-1,0,0		;TURN IT OFF (CLOSED HIGH HAT TAKES PRESIDENCE)
	endif

	;PITCHED ELEMENT
	aenv	expsega	1,idur,0.001,1,0.001		;AMPLITUDE ENVELOPE FOR THE PULSE OSCILLATORS
	ipw	=	0.25				;PULSE WIDTH
	a1	vco2	0.5,kFrq1,2,ipw			;PULSE OSCILLATORS...			
	a2	vco2	0.5,kFrq2,2,ipw
	a3	vco2	0.5,kFrq3,2,ipw
	a4	vco2	0.5,kFrq4,2,ipw
	a5	vco2	0.5,kFrq5,2,ipw
	a6	vco2	0.5,kFrq6,2,ipw
	amix	sum	a1,a2,a3,a4,a5,a6		;MIX THE PULSE OSCILLATORS
	amix	reson	amix,5000,5000,1		;BANDPASS FILTER THE MIXTURE
	amix	buthp	amix,5000			;HIGHPASS FILTER THE SOUND...
	amix	buthp	amix,5000			;...AND AGAIN
	amix	=	amix*aenv			;APPLY THE AMPLITUDE ENVELOPE
	
	;NOISE ELEMENT
	anoise	noise	0.8,0				;GENERATE SOME WHITE NOISE
	aenv	expsega	1,idur,0.001,1,0.001		;CREATE AN AMPLITUDE ENVELOPE
	kcf	expseg	20000,0.7,9000,idur-0.1,9000	;CREATE A CUTOFF FREQ. ENVELOPE
	anoise	butlp	anoise,kcf			;LOWPASS FILTER THE NOISE SIGNAL
	anoise	buthp	anoise,8000			;HIGHPASS FILTER THE NOISE SIGNAL
	anoise	=	anoise*aenv			;APPLY THE AMPLITUDE ENVELOPE
	
	;MIX PULSE OSCILLATOR AND NOISE COMPONENTS
	amix	=	(amix+anoise)*p5*0.55
	aL,aR	pan2	amix,p4			;PAN MONOPHONIC SIGNAL
		outs	aL,aR				;SEND TO OUTPUTS
endin

instr	105	;HIGH TOM
	ifrq     	=	200				;FREQUENCY
	p3	  	=	0.5				;DURATION OF THIS NOTE

	;SINE TONE SIGNAL
	aAmpEnv	transeg	1,p3,-10,0.001				;AMPLITUDE ENVELOPE FOR SINE TONE SIGNAL
	afmod	expsega	5,0.125/ifrq,1,1,1			;FREQUENCY MODULATION ENVELOPE. GIVES THE TONE MORE OF AN ATTACK.
	asig	oscili	-aAmpEnv*0.6,ifrq*afmod,gisine		;SINE TONE SIGNAL

	;NOISE SIGNAL
	aEnvNse	transeg	1,p3,-6,0.001				;AMPLITUDE ENVELOPE FOR NOISE SIGNAL
	anoise	dust2	0.4, 8000				;GENERATE NOISE SIGNAL
	anoise	reson	anoise,400,800,1			;BANDPASS FILTER THE NOISE SIGNAL
	anoise	buthp	anoise,100				;HIGHPASS FILTER THE NOSIE SIGNAL
	anoise	butlp	anoise,1000				;LOWPASS FILTER THE NOISE SIGNAL
	anoise	=	anoise * aEnvNse			;SCALE NOISE SIGNAL WITH AMPLITUDE ENVELOPE
	
	;MIX THE TWO SOUND COMPONENTS
	amix	=	(asig + anoise)*p5
	aL,aR	pan2	amix,p4					;PAN MONOPHONIC SIGNAL
		outs	aL,aR					;SEND AUDIO TO OUTPUTS
endin

instr	106	;MID TOM
	ifrq     	=	133		 		;FREQUENCY
	p3	  	=	0.6				;DURATION OF THIS NOTE

	;SINE TONE SIGNAL
	aAmpEnv	transeg	1,p3,-10,0.001				;AMPLITUDE ENVELOPE FOR SINE TONE SIGNAL
	afmod	expsega	5,0.125/ifrq,1,1,1			;FREQUENCY MODULATION ENVELOPE. GIVES THE TONE MORE OF AN ATTACK.
	asig	oscili	-aAmpEnv*0.6,ifrq*afmod,gisine		;SINE TONE SIGNAL

	;NOISE SIGNAL
	aEnvNse	transeg	1,p3,-6,0.001				;AMPLITUDE ENVELOPE FOR NOISE SIGNAL
	anoise	dust2	0.4, 8000				;GENERATE NOISE SIGNAL
	anoise	reson	anoise, 400,800,1			;BANDPASS FILTER THE NOISE SIGNAL
	anoise	buthp	anoise,100				;HIGHPASS FILTER THE NOSIE SIGNAL
	anoise	butlp	anoise,600				;LOWPASS FILTER THE NOISE SIGNAL
	anoise	=	anoise * aEnvNse			;SCALE NOISE SIGNAL WITH AMPLITUDE ENVELOPE
	
	;MIX THE TWO SOUND COMPONENTS
	amix	=	(asig + anoise)*p5
	aL,aR	pan2	amix,p4					;PAN MONOPHONIC SIGNAL
		outs	aL,aR					;SEND AUDIO TO OUTPUTS
endin

instr	107	;LOW TOM
	ifrq     	=	90				;FREQUENCY
	p3 	 	=	0.7		 		;DURATION OF THIS NOTE

	;SINE TONE SIGNAL
	aAmpEnv	transeg	1,p3,-10,0.001				;AMPLITUDE ENVELOPE FOR SINE TONE SIGNAL
	afmod	expsega	5,0.125/ifrq,1,1,1			;FREQUENCY MODULATION ENVELOPE. GIVES THE TONE MORE OF AN ATTACK.
	asig	oscili	-aAmpEnv*0.6,ifrq*afmod,gisine		;SINE TONE SIGNAL

	;NOISE SIGNAL
	aEnvNse	transeg	1,p3,-6,0.001				;AMPLITUDE ENVELOPE FOR NOISE SIGNAL
	anoise	dust2	0.4, 8000				;GENERATE NOISE SIGNAL
	anoise	reson	anoise,40,800,1				;BANDPASS FILTER THE NOISE SIGNAL
	anoise	buthp	anoise,100				;HIGHPASS FILTER THE NOSIE SIGNAL
	anoise	butlp	anoise,600				;LOWPASS FILTER THE NOISE SIGNAL
	anoise	=	anoise * aEnvNse			;SCALE NOISE SIGNAL WITH AMPLITUDE ENVELOPE
	
	;MIX THE TWO SOUND COMPONENTS
	amix	=	(asig + anoise)*p5
	aL,aR	pan2	amix,p4				;PAN MONOPHONIC SIGNAL
		outs	aL,aR					;SEND AUDIO TO OUTPUTS
endin

instr	108	;CYMBAL
	kFrq1	=	296 			;FREQUENCIES OF THE 6 OSCILLATORS
	kFrq2	=	285
	kFrq3	=	365
	kFrq4	=	348     
	kFrq5	=	420
	kFrq6	=	835
	p3	=	2			;DURATION OF THE NOTE

	;SOUND CONSISTS OF 6 PULSE OSCILLATORS MIXED WITH A NOISE COMPONENT
	;PITCHED ELEMENT
	aenv	expon	1,p3,0.0001		;AMPLITUDE ENVELOPE FOR THE PULSE OSCILLATORS 
	ipw	=	0.25			;PULSE WIDTH      
	a1	vco2	0.5,kFrq1,2,ipw		;PULSE OSCILLATORS...  
	a2	vco2	0.5,kFrq2,2,ipw
	a3	vco2	0.5,kFrq3,2,ipw
	a4	vco2	0.5,kFrq4,2,ipw
	a5	vco2	0.5,kFrq5,2,ipw                                                                   
	a6	vco2	0.5,kFrq6,2,ipw
	amix	sum	a1,a2,a3,a4,a5,a6		;MIX THE PULSE OSCILLATORS
	amix	reson	amix,5000,5000,1		;BANDPASS FILTER THE MIXTURE
	amix	buthp	amix,10000			;HIGHPASS FILTER THE SOUND
	amix	butlp	amix,12000			;LOWPASS FILTER THE SOUND...
	amix	butlp	amix,12000			;AND AGAIN...
	amix	=	amix*aenv			;APPLY THE AMPLITUDE ENVELOPE
	
	;NOISE ELEMENT
	anoise	noise	0.8,0				;GENERATE SOME WHITE NOISE
	aenv	expsega	1,0.3,0.07,p3-0.1,0.00001	;CREATE AN AMPLITUDE ENVELOPE
	kcf	expseg	14000,0.7,7000,p3-0.1,5000	;CREATE A CUTOFF FREQ. ENVELOPE
	anoise	butlp	anoise,kcf			;LOWPASS FILTER THE NOISE SIGNAL
	anoise	buthp	anoise,8000			;HIGHPASS FILTER THE NOISE SIGNAL
	anoise	=	anoise*aenv			;APPLY THE AMPLITUDE ENVELOPE            

	;MIX PULSE OSCILLATOR AND NOISE COMPONENTS
	amix	=	(amix+anoise)*p5*0.85
	aL,aR	pan2	amix,p4			;PAN MONOPHONIC SIGNAL
		outs	aL,aR				;SEND TO OUTPUTS
endin

</CsInstruments>

<CsScore>
i 1 0 3600	;INSTRUMENT 1 PLAYS A NOTE FOR 1 HOUR (AND KEEPS REAL-TIME PERFORMANCE GOING)
</CsScore>

</CsoundSynthesizer>;  MiniPops.csd
;  Written by Iain McCurdy, 2014.
;
;  Emulation of the Korg/Univibe Mini Pops 7

; The Mini Pops 7 was an early non-programmable drum machine from the Japanese company Korg. It is perhaps most through 
; its use by Jean Michel Jarre in his early work. I have tried to retain as close a tie as possible with the original 
; design whilst making some additions and modifications for convenience.
; Preset rhythms are selected using the large black buttons. The lower row of rhythms (in red) are selected by first 
; setting the 'Lower' checkbox to 'on'.
; Additional effects are 'O.D.' - clipping distortion, 'Dec' - sample rate decimation and 'Mash' - break-beat style cut
; ups.
; The 'Rhythm' selector buttons were radio buttons (depressing one would release any others) but a popular trick was to 
; force more than one to stay depressed and to create a combination of two or more rhythms. The rhythms would combine in
; a rather enigmatic way. Unfortunately I quite figured out how this worked yet so in my implementation they simply mix.



<Cabbage>
form size(840,250), caption("Mini Pops"), pluginid("MPop"), colour(255,255,205), guirefresh(64) style("legacy")

checkbox bounds( 13,  6,   45,   44), colour("tomato"), channel("Act1"),  value(0), shape("ellipse")
checkbox bounds( 68,  6,   45,   44), colour("tomato"), channel("Act2"),  value(0), shape("ellipse")
checkbox bounds(123,  6,   45,   44), colour("tomato"), channel("Act3"),  value(0), shape("ellipse")
checkbox bounds(178,  6,   45,   44), colour("tomato"), channel("Act4"),  value(0), shape("ellipse")
checkbox bounds(233,  6,   45,   44), colour("tomato"), channel("Act5"),  value(0), shape("ellipse")
checkbox bounds(288,  6,   45,   44), colour("tomato"), channel("Act6"),  value(0), shape("ellipse")
checkbox bounds(343,  6,   45,   44), colour("tomato"), channel("Act7"),  value(0), shape("ellipse")
checkbox bounds(398,  6,   45,   44), colour("tomato"), channel("Act8"),  value(0), shape("ellipse")
checkbox bounds(453,  6,   45,   44), colour("tomato"), channel("Act9"),  value(0), shape("ellipse")
checkbox bounds(508,  6,   45,   44), colour("tomato"), channel("Act10"),  value(0), shape("ellipse")
checkbox bounds(563,  6,   45,   44), colour("tomato"), channel("Act11"),  value(0), shape("ellipse")
checkbox bounds(618,  6,   45,   44), colour("tomato"), channel("Act12"),  value(0), shape("ellipse")
checkbox bounds(673,  6,   45,   44), colour("tomato"), channel("Act13"),  value(0), shape("ellipse")
checkbox bounds(728,  6,   45,   44), colour("tomato"), channel("Act14"),  value(0), shape("ellipse")
checkbox bounds(783,  6,   45,   44), colour("tomato"), channel("Act15"),  value(0), shape("ellipse")

rslider  bounds(  5,  5, 60, 60), text("Bass Drum"),  textcolour("black"), colour(255,220,155), alpha(0.75), channel("bassdrum"),    range(0, 1, 0.6), trackercolour(white)
rslider  bounds( 60,  5, 60, 60), text("Snare 1"),    textcolour("black"), colour(255,220,155), alpha(0.75), channel("snare1"),      range(0, 1, 0.6), trackercolour(255,255,205)
rslider  bounds(115,  5, 60, 60), text("Snare 2"),    textcolour("black"), colour(255,220,155), alpha(0.75), channel("snare2"),      range(0, 1, 0.6), trackercolour(255,255,205)
rslider  bounds(170,  5, 60, 60), text("Rimshot"),    textcolour("black"), colour(255,220,155), alpha(0.75), channel("rimshot"),     range(0, 1, 0.6), trackercolour(255,255,205)
rslider  bounds(225,  5, 60, 60), text("Cymbal 1"),   textcolour("black"), colour(255,220,155), alpha(0.75), channel("cymbal1"),     range(0, 1, 0.6), trackercolour(255,255,205)
rslider  bounds(280,  5, 60, 60), text("Cymbal 2"),   textcolour("black"), colour(255,220,155), alpha(0.75), channel("cymbal2"),     range(0, 1, 0.6), trackercolour(255,255,205)
rslider  bounds(335,  5, 60, 60), text("Bongo 1"),    textcolour("black"), colour(255,220,155), alpha(0.75), channel("bongo1"),      range(0, 1, 0.6), trackercolour(255,255,205)
rslider  bounds(390,  5, 60, 60), text("Bongo 2"),    textcolour("black"), colour(255,220,155), alpha(0.75), channel("bongo2"),      range(0, 1, 0.6), trackercolour(255,255,205)
rslider  bounds(445,  5, 60, 60), text("Bongo 3"),    textcolour("black"), colour(255,220,155), alpha(0.75), channel("bongo3"),      range(0, 1, 0.6), trackercolour(255,255,205)
rslider  bounds(500,  5, 60, 60), text("Claves"),     textcolour("black"), colour(255,220,155), alpha(0.75), channel("claves"),      range(0, 1, 0.6), trackercolour(255,255,205)
rslider  bounds(555,  5, 60, 60), text("Cowbell"),    textcolour("black"), colour(255,220,155), alpha(0.75), channel("cowbell"),     range(0, 1, 0.6), trackercolour(255,255,205)
rslider  bounds(610,  5, 60, 60), text("Guiro"),      textcolour("black"), colour(255,220,155), alpha(0.75), channel("guiro"),       range(0, 1, 0.6), trackercolour(255,255,205)
rslider  bounds(665,  5, 60, 60), text("Maracas"),    textcolour("black"), colour(255,220,155), alpha(0.75), channel("maracas"),     range(0, 1, 0.6), trackercolour(255,255,205)
rslider  bounds(720,  5, 60, 60), text("Quijada"),    textcolour("black"), colour(255,220,155), alpha(0.75), channel("quijada"),     range(0, 1, 0.6), trackercolour(255,255,205)
rslider  bounds(775,  5, 60, 60), text("Tamb."),      textcolour("black"), colour(255,220,155), alpha(0.75), channel("tambourine"),  range(0, 1, 0.6), trackercolour(255,255,205)

checkbox bounds( 13, 66, 60, 10), text("mute"), channel("mute1"), fontcolour("black"), colour(red),value(0)
checkbox bounds( 13, 78, 60, 10), text("solo"), channel("solo1"), fontcolour("black"), colour(lime),value(0)
checkbox bounds( 68, 66, 60, 10), text("mute"), channel("mute2"), fontcolour("black"), colour(red),value(0)
checkbox bounds( 68, 78, 60, 10), text("solo"), channel("solo2"), fontcolour("black"), colour(lime),value(0)
checkbox bounds(123, 66, 60, 10), text("mute"), channel("mute3"), fontcolour("black"), colour(red),value(0)
checkbox bounds(123, 78, 60, 10), text("solo"), channel("solo3"), fontcolour("black"), colour(lime),value(0)
checkbox bounds(178, 66, 60, 10), text("mute"), channel("mute4"), fontcolour("black"), colour(red),value(0)
checkbox bounds(178, 78, 60, 10), text("solo"), channel("solo4"), fontcolour("black"), colour(lime),value(0)
checkbox bounds(233, 66, 60, 10), text("mute"), channel("mute5"), fontcolour("black"), colour(red),value(0)
checkbox bounds(233, 78, 60, 10), text("solo"), channel("solo5"), fontcolour("black"), colour(lime),value(0)
checkbox bounds(288, 66, 60, 10), text("mute"), channel("mute6"), fontcolour("black"), colour(red),value(0)
checkbox bounds(288, 78, 60, 10), text("solo"), channel("solo6"), fontcolour("black"), colour(lime),value(0)
checkbox bounds(343, 66, 60, 10), text("mute"), channel("mute7"), fontcolour("black"), colour(red),value(0)
checkbox bounds(343, 78, 60, 10), text("solo"), channel("solo7"), fontcolour("black"), colour(lime),value(0)
checkbox bounds(398, 66, 60, 10), text("mute"), channel("mute8"), fontcolour("black"), colour(red),value(0)
checkbox bounds(398, 78, 60, 10), text("solo"), channel("solo8"), fontcolour("black"), colour(lime),value(0)
checkbox bounds(453, 66, 60, 10), text("mute"), channel("mute9"), fontcolour("black"), colour(red),value(0)
checkbox bounds(453, 78, 60, 10), text("solo"), channel("solo9"), fontcolour("black"), colour(lime),value(0)
checkbox bounds(508, 66, 60, 10), text("mute"), channel("mute10"), fontcolour("black"), colour(red),value(0)
checkbox bounds(508, 78, 60, 10), text("solo"), channel("solo10"), fontcolour("black"), colour(lime),value(0)
checkbox bounds(563, 66, 60, 10), text("mute"), channel("mute11"), fontcolour("black"), colour(red),value(0)
checkbox bounds(563, 78, 60, 10), text("solo"), channel("solo11"), fontcolour("black"), colour(lime),value(0)
checkbox bounds(618, 66, 60, 10), text("mute"), channel("mute12"), fontcolour("black"), colour(red),value(0)
checkbox bounds(618, 78, 60, 10), text("solo"), channel("solo12"), fontcolour("black"), colour(lime),value(0)
checkbox bounds(673, 66, 60, 10), text("mute"), channel("mute13"), fontcolour("black"), colour(red),value(0)
checkbox bounds(673, 78, 60, 10), text("solo"), channel("solo13"), fontcolour("black"), colour(lime),value(0)
checkbox bounds(728, 66, 60, 10), text("mute"), channel("mute14"), fontcolour("black"), colour(red),value(0)
checkbox bounds(728, 78, 60, 10), text("solo"), channel("solo14"), fontcolour("black"), colour(lime),value(0)
checkbox bounds(783, 66, 60, 10), text("mute"), channel("mute15"), fontcolour("black"), colour(red),value(0)
checkbox bounds(783, 78, 60, 10), text("solo"), channel("solo15"), fontcolour("black"), colour(lime),value(0)

;control
image    bounds(620,100, 220,150), colour(0,0,0,0), line(0), plant("control"){
;combobox bounds( 15, 20, 60, 18), channel("UpperLower"), value(1), text("Upper", "Lower")

checkbox bounds( 15, 16, 12, 13), channel("r1") fontcolour("white") colour(yellow) value(1)
checkbox bounds( 15, 28, 12, 13), channel("r2") fontcolour("white") colour(yellow) 
label    bounds( 28, 17, 60, 12), text("Upper"), fontcolour("black"), align("left")
label    bounds( 28, 29, 60, 12), text("Lower"), fontcolour(205,0,0), align("left")


rslider  bounds( 85,  5, 60, 60), text("O.D."), textcolour("black"), colour(200,160, 80), trackercolour(120,100, 52), outlinecolour(60,50,26), channel("dist"),      range(0, 1, 0)
rslider  bounds(145,  5, 60, 60), text("Dec."), textcolour("black"), colour(200,160, 80), trackercolour(120,100, 52), outlinecolour(60,50,26), channel("fold"),      range(0, 1, 0, 0.5, 0.0001)

checkbox bounds(130,  2,  7,  7), channel("DistOn"), value(0), colour(red), shape("ellipse")
checkbox bounds(190,  2,  7,  7), channel("FoldOn"), value(0), colour(red), shape("ellipse")

checkbox bounds( 15, 45, 70, 12), channel("cutup"), text("Mash"), fontcolour("black"), colour("yellow"),value(0)

rslider  bounds(  0, 70, 70, 70), text("Volume"),     textcolour("black"), colour(200,160, 80), trackercolour(120,100, 52), outlinecolour(60,50,26), channel("volume"),      range(0, 1.00, .4)
rslider  bounds( 70, 70, 70, 70), text("Tempo"),      textcolour("black"), colour(200,160, 80), trackercolour(120,100, 52), outlinecolour(60,50,26), channel("tempo"),       range(40, 480, 115, 1, 1)
checkbox bounds(153, 77, 45, 45), channel("OnOff"), fontcolour("black"), colour("yellow"),value(1)
label    bounds(148,127, 60, 11), text("Start/Stop"),     FontColour("black"), align("left")
}

;rhythms
image bounds(  0,  100, 640, 65), colour(0,0,0,0), line(0), plant("rhythms"){
checkbox bounds( 10,  0, 60, 20), channel("but1"), colour(250,250,105), value(0), text("")
checkbox bounds( 70,  0, 60, 20), channel("but2"), colour(250,250,105), value(0), text("")
checkbox bounds(130,  0, 60, 20), channel("but3"), colour(250,250,105), value(0), text("")
checkbox bounds(190,  0, 60, 20), channel("but4"), colour(250,250,105), value(0), text("")
checkbox bounds(250,  0, 60, 20), channel("but5"), colour(250,250,105), value(0), text("")
checkbox bounds(310,  0, 60, 20), channel("but6"), colour(250,250,105), value(0), text("")
checkbox bounds(370,  0, 60, 20), channel("but7"), colour(250,250,105), value(0), text("")
checkbox bounds(430,  0, 60, 20), channel("but8"), colour(250,250,105), value(0), text("")
checkbox bounds(490,  0, 60, 20), channel("but9"), colour(250,250,105), value(0), text("")
checkbox bounds(550,  0, 60, 20), channel("but10"), colour(250,250,105), value(0), text("")

label    bounds( 10, 20, 60, 10), text("WALTZ"),     fontcolour("black"), align("centre")
label    bounds( 70, 20, 60, 10), text("SAMBA"),     fontcolour("black"), align("centre")
label    bounds(130, 20, 60, 10), text("MAMBO"),     fontcolour("black"), align("centre")
label    bounds(190, 20, 60, 10), text("RUMBA"),     fontcolour("black"), align("centre")
label    bounds(250, 20, 60, 10), text("TANGO"),     fontcolour("black"), align("centre")
label    bounds(310, 20, 60, 10), text("BOSSANOVA"), fontcolour("black"), align("centre")
label    bounds(370, 20, 60, 10), text("ROCK 1"),    fontcolour("black"), align("centre")
label    bounds(430, 20, 60, 10), text("ROCK 2"),    fontcolour("black"), align("centre")
label    bounds(490, 20, 60, 10), text("MARCH 2/4"), fontcolour("black"), align("centre")
label    bounds(550, 20, 60, 10), text("SWING"),     fontcolour("black"), align("centre")

label    bounds( 10, 30, 60, 10), text("JAZZ WALTZ"),  fontcolour(205,  0,  0), align("centre")
label    bounds( 70, 30, 60, 10), text("MERINGUE"),    fontcolour(205,  0,  0), align("centre")
label    bounds(130, 30, 60, 10), text("CHA CHA"),     fontcolour(205,  0,  0), align("centre")
label    bounds(190, 30, 60, 10), text("BEGUINE"),     fontcolour(205,  0,  0), align("centre")
label    bounds(250, 30, 60, 10), text("HABANERA"),    fontcolour(205,  0,  0), align("centre")
label    bounds(310, 30, 60, 10), text("SLOW ROCK"),   fontcolour(205,  0,  0), align("centre")
label    bounds(370, 30, 60, 10), text("ROCK 3"),      fontcolour(205,  0,  0), align("centre")
label    bounds(430, 30, 60, 10), text("ROCK 4"),      fontcolour(205,  0,  0), align("centre")
label    bounds(490, 30, 60, 10), text("MARCH 6/8"),   fontcolour(205,  0,  0), align("centre")
label    bounds(550, 30, 65, 10), text("LATIN SWING"), fontcolour(205,  0,  0), align("centre")

checkbox bounds(618, 19, 10, 10), channel("Indic1"), value(0), colour( 70,255, 70), shape("ellipse"), active(0)
checkbox bounds(618, 30, 10, 10), channel("Indic2"), value(0), colour(255, 30, 30), shape("ellipse"), active(0)
}

keyboard bounds( 10,155, 600, 80)

label   bounds(695,239, 145, 10), text("Author: Iain McCurdy |2014|"), FontColour("DarkSlateGrey"), align("left")
</Cabbage>
              
<CsoundSynthesizer>
<CsOptions>
-n -dm0 -+rtmidi=NULL -M0
</CsOptions>
<CsInstruments>
sr = 44100
ksmps = 64
nchnls = 2
0dbfs=1

massign	0,2	;MIDI notes assigned to instr 2

;UDOs---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

opcode	CabbageRadio2,k,SS			; change opcode name and number is string variable inputs
S1,S2	xin					; add string inputs for the required number of inputs 
kon		=	1
koff		=	0
ksum		=	0
ktrigsum	=	0
#define READ_CHANGES(NAME)	#
k$NAME	chnget	$NAME
ksum	=	ksum + k$NAME			; sum of values
kon$NAME	trigger	k$NAME,0.5,0		; trigger that a checkbox has been turned on
ktrigsum	=	ktrigsum + kon$NAME#	; sum of all on triggers

#define WRITE_CHANGES(NAME'COUNT)	#
if kon$NAME!=1 then
 chnset	koff,$NAME
else
 kval	=	$COUNT
endif#

#define PREVENT_ALL_OFF(NAME)	#
koff$NAME	trigger	k$NAME,0.5,1		; trigger that a checkbox has been turned on
if koff$NAME==1&&ksum==0 then
 chnset	kon,$NAME
endif#

$READ_CHANGES(S1) 
$READ_CHANGES(S2)				; add macro expansions for the required number of radio buttons

if ktrigsum>0 then
 $WRITE_CHANGES(S1'1)
 $WRITE_CHANGES(S2'2)				; add macro expansions for the required number of radio buttons
endif

$PREVENT_ALL_OFF(S1)
$PREVENT_ALL_OFF(S2)				; add macro expansions for the required number of radio buttons

kval	=	(ksum=0?0:kval)
	xout	kval
endop
;-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




gisine	ftgen	0,0,131072,10,1

gasend	init	0			; global audio send variable

giOn	=	1			; ivals for on and off values
giOff	=	0


;PRESET_RHYTHMS-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

;1: WALTZ (in 3)
;				instr	strt	dur	amp
giBD01	ftgen	0,0,-12,-2,	101,	1,	1,	1,\
				101,	4,	1,	1,\
				-1,	4,	-1,	-1
				
giSn201	ftgen	0,0,-16,-2,	0,	1,	0,	1,\
				103,	2,	1,	1,\
				103,	3,	1,	1,\
				-1,	4,	-1,	-1
				
giCy201	ftgen	0,0,-12,-2,	106,	1,	1,	1,\
				106,	4,	1,	1,\
				-1,	4,	-1,	-1
				
giGu01	ftgen	0,0,-36,-2,	112,	1,	1,	0.7,\
				112,	2,	1,	0.7,\
				112,	3,	0.125,	1,\
				112,	3.5,	0.125,	1,\
				112,	4,	1,	0.7,\
				-1,	4,	-1,	-1
				
giQu01	ftgen	0,0,-12,-2,	0,	1,	0,	1,\
				114,	3,	1,	1,\
				-1,	4,	-1,	-1                                                     

giTa01	ftgen	0,0,-40,-2,	115,	1,	0.5,	1,\
				115,	1.5,	0.5,	1,\
				115,	2,	0.5,	1,\
				115,	2.5,	0.5,	1,\
				115,	3,	0.5,	1,\
				115,	3.5,	0.5,	1,\
				115,	4,	0.5,	1,\
				115,	4.5,	0.5,	1,\
				115,	4,	0.5,	1,\
				-1,	4,	-1,	-1

;2: SAMBA (4/4)
;				instr	strt	dur	amp
giBD02	ftgen	0,0,-16,-2,	101,	1,	1,	1,\
				101,	3,	1,	1,\
				101,	5,	1,	1,\
				-1,	5,	-1,	-1
				
giBo302	ftgen	0,0,-12,-2,	0,	1,	0,	1,\
				109,	4,	1,	1,\
				-1,	5,	-1,	-1         

giCo02	ftgen	0,0,-20,-2,	111,	1,	.1,	1,\
				111,	2.5,	.1,	1,\
				111,	4,	.1,	1,\
				111,	5,	.1,	0,\
				-1,	5,	-1,	-1

				
giGu02	ftgen	0,0,-32,-2,	112,	1,	1,	0.7,\
				112,	2,	0.125,	1,\
				112,	2.5,	0.125,	1,\
				112,	3,	1,	0.7,\
				112,	4,	0.125,	1,\
				112,	4.5,	0.125,	1,\
				112,	5,	1,	0.7,\
				-1,	5,	-1,	-1

giQu02	ftgen	0,0,-12,-2,	0,	1,	0,	1,\
				114,	4,	1,	1,\
				-1,	5,	-1,	-1         
				
giTa02	ftgen	0,0,40,-2,	115,	1,	0.5,	1,\
				115,	1.5,	0.5,	1,\
				115,	2,	0.5,	1,\
				115,	2.5,	0.5,	1,\
				115,	3,	0.5,	1,\
				115,	3.5,	0.5,	1,\
				115,	4,	0.5,	1,\
				115,	4.5,	0.5,	1,\
				115,	5,	0.5,	1,\
				-1,	5,	-1,	-1


;3: MAMBO (4/4)
;				instr	strt	dur	amp
giBD03	ftgen	0,0,-24,-2,	101,	1,	1,	1,\
				101,	2.5,	0.5,	1,\
				101,	3,	1,	1,\
				101,	4,	1,	1,\
				101,	5,	1,	1,\
				-1,	5,	-1,	-1
				
giBo303	ftgen	0,0,16,-2,	0,	1,	0,	1,\
				109,	4,	0.5,	1,\
				109,	4.5,	0.5,	1,\
				-1,	5,	-1,	-1         

giCo03	ftgen	0,0,-24,-2,	111,	1,	.1,	1,\
				111,	2,	.1,	1,\
				111,	3,	.1,	1,\
				111,	4,	.1,	1,\
				111,	5,	.1,	1,\
				-1,	5,	-1,	-1

				
giGu03	ftgen	0,0,-32,-2,	112,	1,	1,	0.7,\
				112,	2,	0.125,	1,\
				112,	2.5,	0.125,	1,\
				112,	3,	1,	0.7,\
				112,	4,	0.125,	1,\
				112,	4.5,	0.125,	1,\
				112,	5,	1,	0.7,\
				-1,	5,	-1,	-1

giQu03	ftgen	0,0,12,-2,	0,	1,	0,	1,\
				114,	4,	1,	1,\
				-1,	5,	-1,	-1         
				
giTa03	ftgen	0,0,40,-2,	115,	1,	0.5,	1,\
				115,	1.5,	0.5,	1,\
				115,	2,	0.5,	1,\
				115,	2.5,	0.5,	1,\
				115,	3,	0.5,	1,\
				115,	3.5,	0.5,	1,\
				115,	4,	0.5,	1,\
				115,	4.5,	0.5,	1,\
				115,	5,	0.5,	1,\
				-1,	5,	-1,	-1


;4: RUMBA (4/4)
;				instr	strt	dur	amp
giBD04	ftgen	0,0,-20,-2,	101,	1,	1,	1,\
				101,	3,	1,	1,\
				101,	4,	1,	1,\
				101,	5,	1,	1,\
				-1,	5,	-1,	-1
				
giCy104	ftgen	0,0,-28,-2,	105,	1,	0.5,	1,\
				105,	1.75,	0.5,	1,\
				105,	2,	0.5,	1,\
				105,	3,	0.5,	1,\
				105,	4,	0.5,	1,\
				105,	5,	0.5,	1,\
				-1,	5,	-1,	-1

giBo104	ftgen	0,0,-12,-2,	0,	1,	0,	1,\
				107,	2,	0.5,	1,\
				-1,	5,	-1,	-1         

giBo204	ftgen	0,0,-20,-2,	108,	1,	0,	1,\
				108,	2.5,	0.5,	1,\
				108,	3,	0.5,	1,\
				108,	5,	0.5,	1,\
				-1,	5,	-1,	-1         


giBo304	ftgen	0,0,-16,-2,	0,	1,	0,	1,\
				109,	4,	0.5,	1,\
				109,	4.5,	0.5,	1,\
				-1,	5,	-1,	-1         

giCl04	ftgen	0,0,-16,-2,	110,	1,	.1,	1,\
				110,	3,	.1,	1,\
				110,	5,	.1,	1,\
				-1,	5,	-1,	-1
				
giGu04	ftgen	0,0,-32,-2,	112,	1,	1,	0.7,\
				112,	2,	0.125,	1,\
				112,	2.5,	0.125,	1,\
				112,	3,	1,	0.7,\
				112,	4,	0.125,	1,\
				112,	4.5,	0.125,	1,\
				112,	5,	1,	0.7,\
				-1,	5,	-1,	-1

giQu04	ftgen	0,0,-12,-2,	0,	1,	0,	1,\
				114,	4,	1,	1,\
				-1,	5,	-1,	-1         
				
giTa04	ftgen	0,0,-40,-2,	115,	1,	0.5,	1,\
				115,	1.5,	0.5,	1,\
				115,	2,	0.5,	1,\
				115,	2.5,	0.5,	1,\
				115,	3,	0.5,	1,\
				115,	3.5,	0.5,	1,\
				115,	4,	0.5,	1,\
				115,	4.5,	0.5,	1,\
				115,	5,	0.5,	1,\
				-1,	5,	-1,	-1


;5: TANGO (4/4)
;				instr	strt	dur	amp
giBD05	ftgen	0,0,-24,-2,	101,	1,	1,	1,\
				101,	2,	1,	1,\
				101,	3,	1,	1,\
				101,	4,	1,	1,\
				101,	5,	1,	1,\
				-1,	5,	-1,	-1

giCy205	ftgen	0,0,-12,-2,	0,	1,	1,	1,\
				106,	4.5,	1,	1,\
				-1,	5,	-1,	-1
				
				
giGu05	ftgen	0,0,-32,-2,	112,	1,	1,	0.7,\
				112,	2,	0.125,	1,\
				112,	2.5,	0.125,	1,\
				112,	3,	1,	0.7,\
				112,	4,	0.125,	1,\
				112,	4.5,	0.125,	1,\
				112,	5,	1,	0.7,\
				-1,	5,	-1,	-1

giQu05	ftgen	0,0,-12,-2,	0,	1,	0,	1,\
				114,	4,	1,	1,\
				-1,	5,	-1,	-1         
				
giTa05	ftgen	0,0,-40,-2,	115,	1,	0.5,	1,\
				115,	1.5,	0.5,	1,\
				115,	2,	0.5,	1,\
				115,	2.5,	0.5,	1,\
				115,	3,	0.5,	1,\
				115,	3.5,	0.5,	1,\
				115,	4,	0.5,	1,\
				115,	4.5,	0.5,	1,\
				115,	5,	0.5,	1,\
				-1,	5,	-1,	-1

;6: BOSSANOVA (4/4)
;				instr	strt	dur	amp
giBD06	ftgen	0,0,-24,-2,	101,	1,	1,	1,\
				101,	2.5,	1,	1,\
				101,	3,	1,	1,\
				101,	4.5,	1,	1,\
				101,	5,	1,	1,\
				-1,	5,	-1,	-1

giRS06	ftgen	0,0,-12,-2,	104,	1,	1,	1,\
				104,	5,	1,	1,\
				-1,	5,	-1,	-1
				
				
giGu06	ftgen	0,0,-32,-2,	112,	1,	1,	0.7,\
				112,	2,	0.125,	1,\
				112,	2.5,	0.125,	1,\
				112,	3,	1,	0.7,\
				112,	4,	0.125,	1,\
				112,	4.5,	0.125,	1,\
				112,	5,	1,	0.7,\
				-1,	5,	-1,	-1

giQu06	ftgen	0,0,-12,-2,	0,	1,	0,	1,\
				114,	4,	1,	1,\
				-1,	5,	-1,	-1         
				
giTa06	ftgen	0,0,-40,-2,	115,	1,	0.5,	1,\
				115,	1.5,	0.5,	1,\
				115,	2,	0.5,	1,\
				115,	2.5,	0.5,	1,\
				115,	3,	0.5,	1,\
				115,	3.5,	0.5,	1,\
				115,	4,	0.5,	1,\
				115,	4.5,	0.5,	1,\
				115,	5,	0.5,	1,\
				-1,	5,	-1,	-1

;7: ROCK 1 (4/4)
;				instr	strt	dur	amp
giBD07	ftgen	0,0,-24,-2,	101,	1,	1,	1,\
				101,	2.5,	1,	1,\
				101,	3,	1,	1,\
				101,	4.5,	1,	1,\
				101,	5,	1,	1,\
				-1,	5,	-1,	-1

giSn107	ftgen	0,0,-12,-2,	0,	1,	1,	1,\
				102,	2,	1,	1,\
				-1,	5,	-1,	-1

giSn207	ftgen	0,0,-12,-2,	0,	1,	1,	1,\
				103,	4,	1,	1,\
				-1,	5,	-1,	-1
				
				
giGu07	ftgen	0,0,-32,-2,	112,	1,	1,	0.7,\
				112,	2,	0.125,	1,\
				112,	2.5,	0.125,	1,\
				112,	3,	1,	0.7,\
				112,	4,	0.125,	1,\
				112,	4.5,	0.125,	1,\
				112,	5,	1,	0.7,\
				-1,	5,	-1,	-1

giMa07	ftgen	0,0,-40,-2,	113,	1,	0.5,	1,\
				113,	1.5,	0.5,	1,\
				113,	2,	0.5,	1,\
				113,	2.5,	0.5,	1,\
				113,	3,	0.5,	1,\
				113,	3.5,	0.5,	1,\
				113,	4,	0.5,	1,\
				113,	4.5,	0.5,	1,\
				113,	5,	0.5,	1,\
				-1,	5,	-1,	-1

giQu07	ftgen	0,0,-12,-2,	0,	1,	0,	1,\
				114,	4,	1,	1,\
				-1,	5,	-1,	-1         
				
giTa07	ftgen	0,0,-40,-2,	115,	1,	0.5,	1,\
				115,	1.5,	0.5,	1,\
				115,	2,	0.5,	1,\
				115,	2.5,	0.5,	1,\
				115,	3,	0.5,	1,\
				115,	3.5,	0.5,	1,\
				115,	4,	0.5,	1,\
				115,	4.5,	0.5,	1,\
				115,	5,	0.5,	1,\
				-1,	5,	-1,	-1

;8: ROCK 2 (4/4)
;				instr	strt	dur	amp
giBD08	ftgen	0,0,-24,-2,	101,	1,	1,	1,\
				101,	2.5,	1,	1,\
				101,	3,	1,	1,\
				101,	4.5,	1,	1,\
				101,	5,	1,	1,\
				-1,	5,	-1,	-1

giSn108	ftgen	0,0,-16,-2,	0,	1,	1,	1,\
				102,	2,	1,	1,\
				102,	4,	1,	1,\
				-1,	5,	-1,	-1

giSn208	ftgen	0,0,-16,-2,	0,	1,	1,	1,\
				103,	2.75,	1,	1,\
				103,	3.25,	1,	1,\
				-1,	5,	-1,	-1
				
				
giGu08	ftgen	0,0,-32,-2,	112,	1,	1,	0.7,\
				112,	2,	0.125,	1,\
				112,	2.5,	0.125,	1,\
				112,	3,	1,	0.7,\
				112,	4,	0.125,	1,\
				112,	4.5,	0.125,	1,\
				112,	5,	1,	0.7,\
				-1,	5,	-1,	-1

giMa08	ftgen	0,0,-40,-2,	113,	1,	0.5,	1,\
				113,	1.5,	0.5,	1,\
				113,	2,	0.5,	1,\
				113,	2.5,	0.5,	1,\
				113,	3,	0.5,	1,\
				113,	3.5,	0.5,	1,\
				113,	4,	0.5,	1,\
				113,	4.5,	0.5,	1,\
				113,	5,	0.5,	1,\
				-1,	5,	-1,	-1

giQu08	ftgen	0,0,-12,-2,	0,	1,	0,	1,\
				114,	4,	1,	1,\
				-1,	5,	-1,	-1         
				
giTa08	ftgen	0,0,-40,-2,	115,	1,	0.5,	1,\
				115,	1.5,	0.5,	1,\
				115,	2,	0.5,	1,\
				115,	2.5,	0.5,	1,\
				115,	3,	0.5,	1,\
				115,	3.5,	0.5,	1,\
				115,	4,	0.5,	1,\
				115,	4.5,	0.5,	1,\
				115,	5,	0.5,	1,\
				-1,	5,	-1,	-1

;9: MARCH 2/4 (12/8?!)
;				instr	strt	dur	amp
giBD09	ftgen	0,0,-16,-2,	101,	1,	1,	1,\
				101,	3,	1,	1,\
				101,	5,	1,	1,\
				-1,	5,	-1,	-1

giSn209	ftgen	0,0,-16,-2,	0,	1,	1,	1,\
				103,	2,	1,	1,\
				103,	4,	1,	1,\
				-1,	5,	-1,	-1

giMa09	ftgen	0,0,-40,-2,	115,	1,	0.5,	1,\
				115,	1.667,	0.5,	1,\
				115,	2,	0.5,	1,\
				115,	2.667,	0.5,	1,\
				115,	3,	0.5,	1,\
				115,	3.667,	0.5,	1,\
				115,	4,	0.5,	1,\
				115,	4.667,	0.5,	1,\
				115,	5,	0.5,	1,\
				-1,	5,	-1,	-1				
				
giGu09	ftgen	0,0,-32,-2,	112,	1,	1,	0.7,\
				112,	2,	0.125,	1,\
				112,	2.667,	0.125,	1,\
				112,	3,	1,	0.7,\
				112,	4,	0.125,	1,\
				112,	4.667,	0.125,	1,\
				112,	5,	1,	0.7,\
				-1,	5,	-1,	-1

giQu09	ftgen	0,0,-12,-2,	0,	1,	0,	1,\
				114,	4,	1,	1,\
				-1,	5,	-1,	-1         

;10: Swing (4/4)
;				instr	strt	dur	amp
giBD10	ftgen	0,0,-24,-2,	101,	1,	1,	1,\
				101,	2,	1,	1,\
				101,	3,	1,	1,\
				101,	4,	1,	1,\
				101,	5,	1,	1,\
				-1,	5,	-1,	-1

giCy110	ftgen	0,0,-32,-2,	105,	1,	0.5,	1,\
				105,	2,	0.5,	1,\
				105,	2.75,	0.5,	1,\
				105,	3,	0.5,	1,\
				105,	4,	0.5,	1,\
				105,	4.75,	0.5,	1,\
				105,	5,	0.5,	1,\
				-1,	5,	-1,	-1				
				
giGu10	ftgen	0,0,-32,-2,	112,	1,	1,	0.7,\
				112,	2,	0.125,	1,\
				112,	2.75,	0.125,	1,\
				112,	3,	1,	0.7,\
				112,	4,	0.125,	1,\
				112,	4.75,	0.125,	1,\
				112,	5,	1,	0.7,\
				-1,	5,	-1,	-1

giQu10	ftgen	0,0,-12,-2,	0,	1,	0,	1,\
				114,	4,	1,	1,\
				-1,	5,	-1,	-1         

;11: Jazz Waltz (3/4)
;				instr	strt	dur	amp
giBD11	ftgen	0,0,-12,-2,	101,	1,	1,	1,\
				101,	4,	1,	1,\
				-1,	4,	-1,	-1

giSn211	ftgen	0,0,-16,-2,	0,	1,	0.5,	1,\
				103,	1.5,	0.5,	1,\
				103,	2,	0.5,	1,\
				-1,	4,	-1,	-1				

giCy211	ftgen	0,0,-12,-2,	106,	1,	1,	1,\
				106,	4,	1,	1,\
				-1,	4,	-1,	-1				

				
giGu11	ftgen	0,0,-20,-2,	112,	1,	1,	0.7,\
				112,	2.5,	0.125,	1,\
				112,	3.5,	0.125,	1,\
				112,	4,	1,	0.7,\
				-1,	4,	-1,	-1

giQu11	ftgen	0,0,-12,-2,	0,	1,	0,	1,\
				114,	3,	1,	1,\
				-1,	4,	-1,	-1         

giTa11	ftgen	0,0,-32,-2,	115,	1,	0.5,	1,\
				115,	1.5,	0.5,	1,\
				115,	2,	0.5,	1,\
				115,	2.5,	0.5,	1,\
				115,	3,	0.5,	1,\
				115,	3.5,	0.5,	1,\
				115,	4,	0.5,	1,\
				-1,	4,	-1,	-1

;12: Meringue (4/4)
;				instr	strt	dur	amp
giBD12	ftgen	0,0,-16,-2,	101,	1,	1,	1,\
				101,	2.5,	1,	1,\
				101,	3,	1,	1,\
				-1,	5,	-1,	-1

giBo312	ftgen	0,0,-16,-2,	0,	1,	1,	1,\
				109,	4,	1,	1,\
				0,	5,	1,	1,\
				-1,	5,	-1,	-1				


giCo12	ftgen	0,0,-16,-2,	111,	1,	1,	1,\
				111,	2.5,	1,	1,\
				111,	3,	1,	1,\
				-1,	5,	-1,	-1				

				
giGu12	ftgen	0,0,-32,-2,	112,	1,	1,	0.7,\
				112,	2,	0.125,	1,\
				112,	2.5,	0.125,	1,\
				112,	3,	1,	0.7,\
				112,	4,	0.125,	1,\
				112,	4.5,	0.125,	1,\
				112,	5,	1,	0.7,\
				-1,	5,	-1,	-1

giQu12	ftgen	0,0,-12,-2,	0,	1,	0,	1,\
				114,	4,	1,	1,\
				-1,	5,	-1,	-1         

giTa12	ftgen	0,0,-40,-2,	115,	1,	0.5,	1,\
				115,	1.5,	0.5,	1,\
				115,	2,	0.5,	1,\
				115,	2.5,	0.5,	1,\
				115,	3,	0.5,	1,\
				115,	3.5,	0.5,	1,\
				115,	4,	0.5,	1,\
				115,	4.5,	0.5,	1,\
				115,	5,	0.5,	1,\
				-1,	5,	-1,	-1

;13: Cha Cha (4/4)
;				instr	strt	dur	amp
giBD13	ftgen	0,0,-20,-2,	101,	1,	1,	1,\
				101,	2.5,	1,	1,\
				101,	3,	1,	1,\
				101,	4,	1,	1,\
				-1,	5,	-1,	-1

giBo313	ftgen	0,0,-16,-2,	0,	1,	1,	1,\
				109,	4,	1,	1,\
				109,	4.5,	1,	1,\
				-1,	5,	-1,	-1				

giCo13	ftgen	0,0,-28,-2,	111,	1,	1,	1,\
				111,	2,	1,	1,\
				111,	3,	0.5,	1,\
				111,	3.5,	0.5,	1,\
				111,	4,	1,	1,\
				111,	5,	1,	1,\
				-1,	5,	-1,	-1				

giGu13	ftgen	0,0,-32,-2,	112,	1,	1,	0.7,\
				112,	2,	0.125,	1,\
				112,	2.5,	0.125,	1,\
				112,	3,	1,	0.7,\
				112,	4,	0.125,	1,\
				112,	4.5,	0.125,	1,\
				112,	5,	1,	0.7,\
				-1,	5,	-1,	-1

giQu13	ftgen	0,0,-12,-2,	0,	1,	0,	1,\
				114,	4,	1,	1,\
				-1,	5,	-1,	-1         

giTa13	ftgen	0,0,-40,-2,	115,	1,	0.5,	1,\
				115,	1.5,	0.5,	1,\
				115,	2,	0.5,	1,\
				115,	2.5,	0.5,	1,\
				115,	3,	0.5,	1,\
				115,	3.5,	0.5,	1,\
				115,	4,	0.5,	1,\
				115,	4.5,	0.5,	1,\
				115,	5,	0.5,	1,\
				-1,	5,	-1,	-1


;14: Beguine (4/4)
;				instr	strt	dur	amp
giBD14	ftgen	0,0,-20,-2,	101,	1,	1,	1,\
				101,	2.5,	1,	1,\
				101,	3,	1,	1,\
				101,	4,	1,	1,\
				-1,	5,	-1,	-1

giCy214	ftgen	0,0,-12,-2,	0,	1,	1,	1,\
				106,	1.5,	1,	1,\
				-1,	5,	-1,	-1

giBo114	ftgen	0,0,-24,-2,	0,	1,	1,	1,\
				107,	1.5,	1,	1,\
				107,	2.5,	1,	1,\
				107,	3.5,	1,	1,\
				107,	4.5,	1,	1,\
				-1,	5,	-1,	-1				

giBo214	ftgen	0,0,-20,-2,	108,	1,	1,	1,\
				108,	3,	1,	1,\
				108,	4,	1,	1,\
				108,	5,	1,	1,\
				-1,	5,	-1,	-1				

giBo314	ftgen	0,0,-16,-2,	0,	1,	1,	1,\
				109,	4,	0.5,	1,\
				109,	4.5,	0.5,	1,\
				-1,	5,	-1,	-1				

giGu14	ftgen	0,0,-32,-2,	112,	1,	1,	0.7,\
				112,	2,	0.125,	1,\
				112,	2.5,	0.125,	1,\
				112,	3,	1,	0.7,\
				112,	4,	0.125,	1,\
				112,	4.5,	0.125,	1,\
				112,	5,	1,	0.7,\
				-1,	5,	-1,	-1

giQu14	ftgen	0,0,-12,-2,	0,	1,	0,	1,\
				114,	4,	1,	1,\
				-1,	5,	-1,	-1         

giTa14	ftgen	0,0,-40,-2,	115,	1,	0.5,	1,\
				115,	1.5,	0.5,	1,\
				115,	2,	0.5,	1,\
				115,	2.5,	0.5,	1,\
				115,	3,	0.5,	1,\
				115,	3.5,	0.5,	1,\
				115,	4,	0.5,	1,\
				115,	4.5,	0.5,	1,\
				115,	5,	0.5,	1,\
				-1,	5,	-1,	-1

;15: Habanera (4/4)
;				instr	strt	dur	amp
giBD15	ftgen	0,0,-20,-2,	101,	1,	1,	1,\
				101,	2.5,	1,	1,\
				101,	3,	1,	1,\
				101,	4,	1,	1,\
				-1,	5,	-1,	-1

giCy215	ftgen	0,0,-12,-2,	106,	1,	1,	1,\
				106,	5,	1,	1,\
				-1,	5,	-1,	-1
				
giGu15	ftgen	0,0,-32,-2,	112,	1,	1,	0.7,\
				112,	2,	0.125,	1,\
				112,	2.5,	0.125,	1,\
				112,	3,	1,	0.7,\
				112,	4,	0.125,	1,\
				112,	4.5,	0.125,	1,\
				112,	5,	1,	0.7,\
				-1,	5,	-1,	-1

giQu15	ftgen	0,0,-12,-2,	0,	1,	0,	1,\
				114,	4,	1,	1,\
				-1,	5,	-1,	-1         

giTa15	ftgen	0,0,-40,-2,	115,	1,	0.5,	1,\
				115,	1.5,	0.5,	1,\
				115,	2,	0.5,	1,\
				115,	2.5,	0.5,	1,\
				115,	3,	0.5,	1,\
				115,	3.5,	0.5,	1,\
				115,	4,	0.5,	1,\
				115,	4.5,	0.5,	1,\
				115,	5,	0.5,	1,\
				-1,	5,	-1,	-1

;16: Slow Rock (4/4)
;				instr	strt	dur	amp
giBD16	ftgen	0,0,-24,-2,	101,	1,	1,	1,\
				101,	2.667,	0.333,	1,\
				101,	3,	1,	1,\
				101,	4.667,	0.333,	1,\
				101,	5,	1,	1,\
				-1,	5,	-1,	-1

giRS16	ftgen	0,0,-16,-2,	0,	1,	1,	1,\
				104,	2,	1,	1,\
				104,	4,	1,	1,\
				-1,	5,	-1,	-1


giCy216	ftgen	0,0,-12,-2,	106,	1,	1,	1,\
				106,	5,	1,	1,\
				-1,	5,	-1,	-1
				
giGu16	ftgen	0,0,-32,-2,	112,	1,	1,	0.7,\
				112,	2,	0.125,	1,\
				112,	2.5,	0.125,	1,\
				112,	3,	1,	0.7,\
				112,	4,	0.125,	1,\
				112,	4.5,	0.125,	1,\
				112,	5,	1,	0.7,\
				-1,	5,	-1,	-1

giQu16	ftgen	0,0,-12,-2,	0,	1,	0,	1,\
				114,	4,	1,	1,\
				-1,	5,	-1,	-1         

giTa16	ftgen	0,0,-(14*4),-2,	115,	1,	0.3,	1,\
				115,	1.333,	0.3,	1,\
				115,	1.667,	0.3,	1,\
				115,	2,	0.3,	1,\
				115,	2.333,	0.3,	1,\
				115,	2.667,	0.3,	1,\
				115,	3,	0.3,	1,\
				115,	3.333,	0.3,	1,\
				115,	3.667,	0.3,	1,\
				115,	4,	0.3,	1,\
				115,	4.333,	0.3,	1,\
				115,	4.667,	0.3,	1,\
				115,	5,	0.3,	1,\
				-1,	5,	-1,	-1

;17: Rock 3 (4/4)
;				instr	strt	dur	amp
giBD17	ftgen	0,0,-24,-2,	101,	1,	1,	1,\
				101,	2.5,	0.5,	1,\
				101,	3,	1,	1,\
				101,	4.5,	0.5,	1,\
				101,	5,	1,	1,\
				-1,	5,	-1,	-1

giSn117	ftgen	0,0,-16,-2,	0,	1,	1,	1,\
				102,	2,	1,	1,\
				102,	3.5,	1,	1,\
				-1,	5,	-1,	-1
				
giGu17	ftgen	0,0,-32,-2,	112,	1,	1,	0.7,\
				112,	2,	0.125,	1,\
				112,	2.5,	0.125,	1,\
				112,	3,	1,	0.7,\
				112,	4,	0.125,	1,\
				112,	4.5,	0.125,	1,\
				112,	5,	1,	0.7,\
				-1,	5,	-1,	-1

giQu17	ftgen	0,0,-12,-2,	0,	1,	0,	1,\
				114,	4,	1,	1,\
				-1,	5,	-1,	-1         

giTa17	ftgen	0,0,-40,-2,	115,	1,	0.5,	1,\
				115,	1.5,	0.5,	1,\
				115,	2,	0.5,	1,\
				115,	2.5,	0.5,	1,\
				115,	3,	0.5,	1,\
				115,	3.5,	0.5,	1,\
				115,	4,	0.5,	1,\
				115,	4.5,	0.5,	1,\
				115,	5,	0.5,	1,\
				-1,	5,	-1,	-1

;18: Rock 4 (4/4)
;				instr	strt	dur	amp
giBD18	ftgen	0,0,-24,-2,	101,	1,	1,	1,\
				101,	3,	1,	1,\
				101,	4,	0.5,	1,\
				101,	4.5,	1,	1,\
				101,	5,	1,	1,\
				-1,	5,	-1,	-1

giSn118	ftgen	0,0,-16,-2,	0,	1,	1,	1,\
				102,	2,	1,	1,\
				102,	3.5,	1,	1,\
				-1,	5,	-1,	-1

giSn218	ftgen	0,0,-12,-2,	0,	1,	1,	1,\
				103,	2.75,	1,	1,\
				-1,	5,	-1,	-1
				
giGu18	ftgen	0,0,-32,-2,	112,	1,	1,	0.7,\
				112,	2,	0.125,	1,\
				112,	2.5,	0.125,	1,\
				112,	3,	1,	0.7,\
				112,	4,	0.125,	1,\
				112,	4.5,	0.125,	1,\
				112,	5,	1,	0.7,\
				-1,	5,	-1,	-1

giQu18	ftgen	0,0,-12,-2,	0,	1,	0,	1,\
				114,	4,	1,	1,\
				-1,	5,	-1,	-1         

giTa18	ftgen	0,0,-40,-2,	115,	1,	0.5,	1,\
				115,	1.5,	0.5,	1,\
				115,	2,	0.5,	1,\
				115,	2.5,	0.5,	1,\
				115,	3,	0.5,	1,\
				115,	3.5,	0.5,	1,\
				115,	4,	0.5,	1,\
				115,	4.5,	0.5,	1,\
				115,	5,	0.5,	1,\
				-1,	5,	-1,	-1


;19: March 6/8 (4/4)
;				instr	strt	dur	amp
giBD19	ftgen	0,0,-24,-2,	101,	1,	1,	1,\
				101,	2,	1,	1,\
				101,	3,	1,	1,\
				101,	4,	1,	1,\
				101,	5,	1,	1,\
				-1,	5,	-1,	-1

giCy119	ftgen	0,0,-40,-2,	105,	1,	0.3,	1,\
				105,	1.667,	0.3,	1,\
				105,	2,	0.3,	1,\
				105,	2.667,	0.3,	1,\
				105,	3,	0.3,	1,\
				105,	3.667,	0.3,	1,\
				105,	4,	0.3,	1,\
				105,	4.667,	0.3,	1,\
				105,	5,	0.3,	1,\
				-1,	5,	-1,	-1

giGu19	ftgen	0,0,-32,-2,	112,	1,	1,	0.7,\
				112,	2,	0.125,	1,\
				112,	2.667,	0.125,	1,\
				112,	3,	1,	0.7,\
				112,	4,	0.125,	1,\
				112,	4.667,	0.125,	1,\
				112,	5,	1,	0.7,\
				-1,	5,	-1,	-1

giQu19	ftgen	0,0,-12,-2,	0,	1,	0,	1,\
				114,	4,	1,	1,\
				-1,	5,	-1,	-1         


;20: Latin Swing (4/4)
;				instr	strt	dur	amp
giBD20	ftgen	0,0,-20,-2,	101,	1,	1,	1,\
				101,	3,	1,	1,\
				101,	4,	1,	1,\
				101,	5,	1,	1,\
				-1,	5,	-1,	-1

giCy120	ftgen	0,0,-32,-2,	105,	1,	0.3,	1,\
				105,	2,	0.3,	1,\
				105,	2.75,	0.3,	1,\
				105,	3,	0.3,	1,\
				105,	4,	0.3,	1,\
				105,	4.75,	0.3,	1,\
				105,	5,	0.3,	1,\
				-1,	5,	-1,	-1

giBo120	ftgen	0,0,-12,-2,	0,	1,	0.3,	1,\
				107,	2,	0.3,	1,\
				-1,	5,	-1,	-1

giBo320	ftgen	0,0,-16,-2,	0,	1,	0.5,	1,\
				109,	4,	0.5,	1,\
				109,	4.75,	0.25,	1,\
				-1,	5,	-1,	-1

				
giGu20	ftgen	0,0,-32,-2,	112,	1,	1,	0.7,\
				112,	2,	0.125,	1,\
				112,	2.5,	0.125,	1,\
				112,	3,	1,	0.7,\
				112,	4,	0.125,	1,\
				112,	4.5,	0.125,	1,\
				112,	5,	1,	0.7,\
				-1,	5,	-1,	-1

giQu20	ftgen	0,0,-12,-2,	0,	1,	0,	1,\
				114,	4,	1,	1,\
				-1,	5,	-1,	-1         

giTa20	ftgen	0,0,-40,-2,	115,	1,	0.5,	1,\
				115,	1.5,	0.5,	1,\
				115,	2,	0.5,	1,\
				115,	2.5,	0.5,	1,\
				115,	3,	0.5,	1,\
				115,	3.5,	0.5,	1,\
				115,	4,	0.5,	1,\
				115,	4.5,	0.5,	1,\
				115,	5,	0.5,	1,\
				-1,	5,	-1,	-1

;-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

instr	1	; read widgets
	gktempo		chnget	"tempo"

	; volume controls
	gkbassdrum	chnget	"bassdrum"
	gksnare1	chnget	"snare1"    
	gksnare2	chnget	"snare2"    
	gkrimshot	chnget	"rimshot"   
	gkcymbal1	chnget	"cymbal1"   
	gkcymbal2	chnget	"cymbal2"   
	gkbongo1	chnget	"bongo1"    
	gkbongo2	chnget	"bongo2"    
	gkbongo3	chnget	"bongo3"    
	gkclaves	chnget	"claves"    
	gkcowbell	chnget	"cowbell"   
	gkguiro		chnget	"guiro"     
	gkmaracas	chnget	"maracas"   
	gkquijada	chnget	"quijada"   
	gktambourine	chnget	"tambourine"

	; mute switches
	gkmute1		chnget	"mute1"
	gkmute2		chnget	"mute2"
	gkmute3		chnget	"mute3"
	gkmute4		chnget	"mute4"
	gkmute5		chnget	"mute5"
	gkmute6		chnget	"mute6"
	gkmute7		chnget	"mute7"
	gkmute8		chnget	"mute8"
	gkmute9		chnget	"mute9"
	gkmute10	chnget	"mute10"
	gkmute11	chnget	"mute11"
	gkmute12	chnget	"mute12"
	gkmute13	chnget	"mute13"
	gkmute14	chnget	"mute14"
	gkmute15	chnget	"mute15"

	; solo switches
	gksolo1		chnget	"solo1"
	gksolo2		chnget	"solo2"
	gksolo3		chnget	"solo3"
	gksolo4		chnget	"solo4"
	gksolo5		chnget	"solo5"
	gksolo6		chnget	"solo6"
	gksolo7		chnget	"solo7"
	gksolo8		chnget	"solo8"	
	gksolo9		chnget	"solo9"	
	gksolo10	chnget	"solo10"	
	gksolo11	chnget	"solo11"	
	gksolo12	chnget	"solo12"	
	gksolo13	chnget	"solo13"	
	gksolo14	chnget	"solo14"	
	gksolo15	chnget	"solo15"	

	; add up all solo switch values (if greater than '1' then a solo button must be active)
	kSoloSum	=	gksolo1+gksolo2+gksolo3+gksolo4+gksolo5+gksolo6+gksolo7+gksolo8+gksolo9+gksolo10+gksolo11+gksolo12+gksolo13+gksolo14+gksolo15

	; macro in which the play/don't play status for each instrument is defined
#define	SOLO_MUTE_STATUS(N)	
	#
	if gksolo$N==1 then			; if solo button is on...
	 gkstatus$N	=	1		; ... definitely play this instrument
	elseif kSoloSum>0 then			; otherwise if any one or more of the other solo buttons is active
	 gkstatus$N	=	0		; mute this instrument
	else					; otherwise
	 gkstatus$N	=	(1-gkmute$N)	; status defined by the inverse of the mute button value
	endif
	#
	; expand macro for each instrument
	$SOLO_MUTE_STATUS(1)
	$SOLO_MUTE_STATUS(2)
	$SOLO_MUTE_STATUS(3)
	$SOLO_MUTE_STATUS(4)
	$SOLO_MUTE_STATUS(5)
	$SOLO_MUTE_STATUS(6)
	$SOLO_MUTE_STATUS(7)
	$SOLO_MUTE_STATUS(8)
	$SOLO_MUTE_STATUS(9)
	$SOLO_MUTE_STATUS(10)
	$SOLO_MUTE_STATUS(11)
	$SOLO_MUTE_STATUS(12)
	$SOLO_MUTE_STATUS(13)
	$SOLO_MUTE_STATUS(14)
	$SOLO_MUTE_STATUS(15)
	
	; rhythm buttons
	gkbut1		chnget	"but1"
	gkbut2		chnget	"but2"
	gkbut3		chnget	"but3"
	gkbut4		chnget	"but4"
	gkbut5		chnget	"but5"
	gkbut6		chnget	"but6"
	gkbut7		chnget	"but7"
	gkbut8		chnget	"but8"
	gkbut9		chnget	"but9"
	gkbut10		chnget	"but10"

	; derive a value for upper/lower row by using the two switches (r1 and r2) as radio buttons
	gkUpperLower	CabbageRadio2	"r1","r2"	; call UDO

	; miscellaneos controls	
	gkvolume	chnget	"volume"
	gkdist		chnget	"dist"
	gkcomp		chnget	"comp"
	gkfold		chnget	"fold"
	gkOnOff		chnget	"OnOff"  
	gkcutup		chnget	"cutup"

	ktrig1	trigger	gkOnOff,0.5,0		; if on/off switch is turned 'on' generate a '1'
	ktrig2	trigger	gkcutup,0.5,0		; if 'Mash' button is turned 'on' generate a '1'

	schedkwhen	ktrig1+ktrig2,0,0,  3,0,-1	; start rhythm generater instrument (with a held note) whenever either the on/off or the 'Mash' button are turned on.

	schedkwhen	ktrig2,0,0,199,0,-1		; start bbcut instrument if Mash button is turned on.
endin


instr	2	;READ MIDI AND TRIGGER NOTES
	inum	notnum						;READ IN MIDI NOTE NUMBER
	idb	veloc	-30,0					;READ IN MIDI NOTE VELOCITY (WILL BE USED AS A DECIBEL VALUE)
	iinstr	wrap	inum,0,15				;MAP MIDI NOTE NUMBERS (RANGE: 0 - 127) TO DRUM SOUND NUMBER (0 - 14)
	if iinstr==11 then					;if this is instr 11 (guiro). i.e. sustains and responds to midi note release...
	 event_i	"i",101+iinstr,0,3600,ampdbfs(idb)	;CALL guiro INSTRUMENT AND SEND AMPLITUDE VALUE AS p4
	 krel	release						;sense not release
	 if krel==1 then					;if this note is released...
	  turnoff2	101+iinstr,0,1				;...turn off the subinstrumet
	 endif
	else							;otherwise (any instrument besides the guiro) i.e. no sustain and no midi release
	 event_i	"i",101+iinstr,0,0.956,ampdbfs(idb)	;CALL THE RELEVANT INSTRUMENT AND SEND AMPLITUDE VALUE AS p4
	endif
endin

instr	3	; rhythm sequencer instrument
	if gkOnOff==0 then	; if on/off switch is off...
	 turnoff		; turnoff this instrument
	endif
	
	if i(gkcutup)==1 then				;start bbcut instr when sequencer is started (if Mash button is on)
	 event_i	"i",199,0,-1
	endif
	
	kBPS	=	gktempo/60			;DERIVE BEATS-PER-SECOND 

	if gkcutup==1 then				;while bbcut is active...
	 ktrig	changed	gktempo				;sense for changes in the tempo button
	 if ktrig==1 then				;if the tempo has changed...
	  reinit RESTART_PHASORS			;restart the rhythm sequencer phasors
	  event	"i",199,0,-1				;restart bbcut instrument
	 endif
	 RESTART_PHASORS:
	endif
	kphase3    phasor  kBPS/3			;3/4 phasor (range 0 - 1)
	kphase3	=	kphase3 * 3			;rescale to the range 0 - 3
	kphase4    phasor  kBPS/4			;4/4 phasor (range 0 - 1)
	kphase4	=	kphase4 * 4			;rescale tot he range 0 - 4
	rireturn
	
	kphase	=	kphase4				;default phase mode (4/4)
	
	;lower buttons always take precedence so start with higher button in 'if' interrogations
	if     gkbut10==1 then
	 kphase	=	kphase4
	endif
	if     gkbut9==1 then
	 kphase	=	kphase4
	endif
	if     gkbut8==1 then
	 kphase	=	kphase4
	endif
	if     gkbut7==1 then
	 kphase	=	kphase4
	endif
	if     gkbut6==1 then
	 kphase	=	kphase4
	endif
	if     gkbut5==1 then
	 kphase	=	kphase4
	endif
	if     gkbut4==1 then
	 kphase	=	kphase4
	endif
	if     gkbut3==1 then
	 kphase	=	kphase4
	endif
	if     gkbut2==1 then
	 kphase	=	kphase4
	endif
	if     gkbut1==1 then
	 kphase	=	kphase3
	endif
	
	;initialise the p fields (timedseqs p-field outputs are also input variables)
	kpBD_1		init	0
	kpBD_2		init	0
	kpBD_3		init	0
	kpBD_4		init	0

	kpSn1_1		init	0
	kpSn1_2		init	0
	kpSn1_3		init	0
	kpSn1_4		init	0

	kpSn2_1		init	0
	kpSn2_2		init	0
	kpSn2_3		init	0
	kpSn2_4		init	0

	kpRS_1		init	0
	kpRS_2		init	0
	kpRS_3		init	0
	kpRS_4		init	0

	kpCy1_1		init	0
	kpCy1_2		init	0
	kpCy1_3		init	0
	kpCy1_4		init	0
	
	kpCy2_1		init	0
	kpCy2_2		init	0
	kpCy2_3		init	0
	kpCy2_4		init	0
	
	kpBo1_1		init	0
	kpBo1_2		init	0
	kpBo1_3		init	0
	kpBo1_4		init	0
	
	kpBo2_1		init	0
	kpBo2_2		init	0
	kpBo2_3		init	0
	kpBo2_4		init	0
	
	kpBo3_1		init	0
	kpBo3_2		init	0
	kpBo3_3		init	0
	kpBo3_4		init	0
	
	kpCl_1		init	0
	kpCl_2		init	0
	kpCl_3		init	0
	kpCl_4		init	0
	
	kpCo_1		init	0
	kpCo_2		init	0
	kpCo_3		init	0
	kpCo_4		init	0
	
	kpGu_1		init	0
	kpGu_2		init	0
	kpGu_3		init	0
	kpGu_4		init	0
	
	kpMa_1		init	0
	kpMa_2		init	0
	kpMa_3		init	0
	kpMa_4		init	0
	
	kpQu_1		init	0
	kpQu_2		init	0
	kpQu_3		init	0
	kpQu_4		init	0
	
	kpTa_1		init	0
	kpTa_2		init	0
	kpTa_3		init	0
	kpTa_4		init	0


	;initialise note triggers
	ktriggerBD	=	0
	ktriggerSn1	=	0
	ktriggerSn2	=	0
	ktriggerRS	=	0
	ktriggerCy1	=	0
	ktriggerCy2	=	0
	ktriggerBo1	=	0
	ktriggerBo2	=	0
	ktriggerBo3	=	0
	ktriggerCo	=	0
	ktriggerCl	=	0
	ktriggerMa	=	0
	ktriggerGu	=	0
	ktriggerQu	=	0
	ktriggerTa	=	0
	
	kmintim	init	0.01	;minimum allowed time between note triggering (to prevent erroneous double triggerings)
	
	; macro within which an instrument is scanned
#define	SCAN_INSTRUMENT(NAME'NUM)
	#
	ktrigger	timedseq	kphase+0.99, gi$NAME.$NUM, kp$NAME._1, kp$NAME._2,kp$NAME._3,kp$NAME._4	; read table using phasor
	ktrigger$NAME	=	ktrigger$NAME + ktrigger							; add trigger for this instrument to the accumulator for all instruments 
	#
	
	; read instrument rhythm tables
	if gkUpperLower==1 then			; upper rhythm selected

	 if gkbut1==1 then	;WALTZ
	  $SCAN_INSTRUMENT(BD'01)
	  $SCAN_INSTRUMENT(Sn2'01)
	  $SCAN_INSTRUMENT(Cy2'01)
	  $SCAN_INSTRUMENT(Gu'01)
	  $SCAN_INSTRUMENT(Qu'01)
	  $SCAN_INSTRUMENT(Ta'01)
	 endif  


	 if gkbut2==1 then	;SAMBA
	  $SCAN_INSTRUMENT(BD'02)
	  $SCAN_INSTRUMENT(Bo3'02)
	  $SCAN_INSTRUMENT(Co'02)
	  $SCAN_INSTRUMENT(Qu'02)
	  $SCAN_INSTRUMENT(Gu'02)
	  $SCAN_INSTRUMENT(Ta'02)
	 endif

	 if gkbut3==1 then	;MAMBO
	  $SCAN_INSTRUMENT(BD'03)
	  $SCAN_INSTRUMENT(Bo3'03)
	  $SCAN_INSTRUMENT(Co'03)
	  $SCAN_INSTRUMENT(Qu'03)
	  $SCAN_INSTRUMENT(Gu'03)
	  $SCAN_INSTRUMENT(Ta'03)
	 endif

	 if gkbut4==1 then	;RUMBA
	  $SCAN_INSTRUMENT(BD'04)
	  $SCAN_INSTRUMENT(Cy1'04)
	  $SCAN_INSTRUMENT(Bo1'04)
	  $SCAN_INSTRUMENT(Bo2'04)
	  $SCAN_INSTRUMENT(Bo3'04)
	  $SCAN_INSTRUMENT(Cl'04)
	  $SCAN_INSTRUMENT(Qu'04)
	  $SCAN_INSTRUMENT(Gu'04)
	  $SCAN_INSTRUMENT(Ta'04)
	 endif

	 if gkbut5==1 then	;TANGO
	  $SCAN_INSTRUMENT(BD'05)
	  $SCAN_INSTRUMENT(Cy2'05)
	  $SCAN_INSTRUMENT(Qu'04)
	  $SCAN_INSTRUMENT(Gu'04)
	  $SCAN_INSTRUMENT(Ta'05)
	 endif

 	 if gkbut6==1 then	;BOSSANOVA
	  $SCAN_INSTRUMENT(BD'06)
	  $SCAN_INSTRUMENT(RS'06)
	  $SCAN_INSTRUMENT(Qu'06)
	  $SCAN_INSTRUMENT(Gu'06)
	  $SCAN_INSTRUMENT(Ta'06)
	 endif

 	 if gkbut7==1 then	;ROCK 1
	  $SCAN_INSTRUMENT(BD'07)
	  $SCAN_INSTRUMENT(Sn1'07)
	  $SCAN_INSTRUMENT(Sn2'07)
	  $SCAN_INSTRUMENT(Ma'08)
	  $SCAN_INSTRUMENT(Qu'07)
	  $SCAN_INSTRUMENT(Gu'07)
	  $SCAN_INSTRUMENT(Ta'07)
	 endif

 	 if gkbut8==1 then	;ROCK 2
	  $SCAN_INSTRUMENT(BD'08)
	  $SCAN_INSTRUMENT(Sn1'08)
	  $SCAN_INSTRUMENT(Sn2'08)
	  $SCAN_INSTRUMENT(Ma'08)
	  $SCAN_INSTRUMENT(Qu'08)
	  $SCAN_INSTRUMENT(Gu'08)
	  $SCAN_INSTRUMENT(Ta'08)
	 endif

 	 if gkbut9==1 then	;MARCH 2/4
	  $SCAN_INSTRUMENT(BD'09)
	  $SCAN_INSTRUMENT(Sn2'09)
	  $SCAN_INSTRUMENT(Ma'09)
	  $SCAN_INSTRUMENT(Qu'09)
	  $SCAN_INSTRUMENT(Gu'09)
	 endif

 	 if gkbut10==1 then	;SWING
	  $SCAN_INSTRUMENT(BD'10)
	  $SCAN_INSTRUMENT(Cy1'10)
	  $SCAN_INSTRUMENT(Qu'10)
	  $SCAN_INSTRUMENT(Gu'10)
	 endif

	 ; START OF BAR GREEN LED INDICATOR	
  	 ktrigger	trigger	kphase,0.01,0		; indicator trigger
	 schedkwhen	ktrigger, 0, 0, 150, 0, 0	; call indicator 'on' instrument (which then calls indicator off instrument)

	else						; lower rhythm selected

	 if gkbut1==1 then	;JAZZ WALTZ
	  $SCAN_INSTRUMENT(BD'11)
	  $SCAN_INSTRUMENT(Sn2'11)
	  $SCAN_INSTRUMENT(Cy2'11)
	  $SCAN_INSTRUMENT(Gu'11)
	  $SCAN_INSTRUMENT(Qu'11)
	  $SCAN_INSTRUMENT(Ta'11)
	 endif  

	 if gkbut2==1 then	;MERINGUE
	  $SCAN_INSTRUMENT(BD'12)
	  $SCAN_INSTRUMENT(Bo3'12)
	  $SCAN_INSTRUMENT(Co'12)
	  $SCAN_INSTRUMENT(Gu'12)
	  $SCAN_INSTRUMENT(Qu'12)
	  $SCAN_INSTRUMENT(Ta'12)
	 endif  

	 if gkbut3==1 then	;CHA CHA
	  $SCAN_INSTRUMENT(BD'13)
	  $SCAN_INSTRUMENT(Bo3'13)
	  $SCAN_INSTRUMENT(Co'13)
	  $SCAN_INSTRUMENT(Gu'13)
	  $SCAN_INSTRUMENT(Qu'13)
	  $SCAN_INSTRUMENT(Ta'13)
	 endif  

	 if gkbut4==1 then	;BEGUINE
	  $SCAN_INSTRUMENT(BD'14)
	  $SCAN_INSTRUMENT(Cy2'14)
	  $SCAN_INSTRUMENT(Bo1'14)
	  $SCAN_INSTRUMENT(Bo2'14)
	  $SCAN_INSTRUMENT(Bo3'14)
	  $SCAN_INSTRUMENT(Gu'14)
	  $SCAN_INSTRUMENT(Qu'14)
	  $SCAN_INSTRUMENT(Ta'14)
	 endif  

	 if gkbut5==1 then	;HABANERA
	  $SCAN_INSTRUMENT(BD'15)
	  $SCAN_INSTRUMENT(Cy2'15)
	  $SCAN_INSTRUMENT(Gu'15)
	  $SCAN_INSTRUMENT(Qu'15)
	  $SCAN_INSTRUMENT(Ta'15)
	 endif  

	 if gkbut6==1 then	;SLOW ROCK
	  $SCAN_INSTRUMENT(BD'16)
	  $SCAN_INSTRUMENT(RS'16)
	  $SCAN_INSTRUMENT(Gu'16)
	  $SCAN_INSTRUMENT(Qu'16)
	  $SCAN_INSTRUMENT(Ta'16)
	 endif  

	 if gkbut7==1 then	;ROCK 3
	  $SCAN_INSTRUMENT(BD'17)
	  $SCAN_INSTRUMENT(Sn1'17)
	  $SCAN_INSTRUMENT(Gu'17)
	  $SCAN_INSTRUMENT(Qu'17)
	  $SCAN_INSTRUMENT(Ta'17)
	 endif  

	 if gkbut8==1 then	;ROCK 4
	  $SCAN_INSTRUMENT(BD'18)
	  $SCAN_INSTRUMENT(Sn1'18)
	  $SCAN_INSTRUMENT(Sn2'18)
	  $SCAN_INSTRUMENT(Gu'18)
	  $SCAN_INSTRUMENT(Qu'18)
	  $SCAN_INSTRUMENT(Ta'18)
	 endif  

	 if gkbut9==1 then	;MARCH 6/8
	  $SCAN_INSTRUMENT(BD'19)
	  $SCAN_INSTRUMENT(Cy1'19)
	  $SCAN_INSTRUMENT(Gu'19)
	  $SCAN_INSTRUMENT(Qu'19)
	 endif  

	 if gkbut10==1 then	;LATIN SWING
	  $SCAN_INSTRUMENT(BD'20)
	  $SCAN_INSTRUMENT(Cy1'20)
	  $SCAN_INSTRUMENT(Bo1'20)
	  $SCAN_INSTRUMENT(Bo3'20)
	  $SCAN_INSTRUMENT(Gu'20)
	  $SCAN_INSTRUMENT(Qu'20)
	  $SCAN_INSTRUMENT(Ta'20)
	 endif  


	 ; START OF BAR RED LED INDICATOR	
  	 ktrigger	trigger	kphase,0.01,0		; indicator trigger
	 schedkwhen	ktrigger, 0, 0, 160, 0, 0	; call indicator 'on' instrument (which then calls indicator off instrument)

	endif

	; play instruments according to triggers and p-fields read from the tables
	schedkwhen	ktriggerBD*kpBD_1*gkstatus1, kmintim, 0, kpBD_1, 0, 0.001,kpBD_4
	schedkwhen	ktriggerSn1*kpSn1_1*gkstatus2, kmintim, 0, kpSn1_1, 0, 0.001,kpSn1_4
	schedkwhen	ktriggerSn2*kpSn2_1*gkstatus3, kmintim, 0, kpSn2_1, 0, 0.001,kpSn2_4
	schedkwhen	ktriggerRS*kpRS_1*gkstatus4, kmintim, 0, kpRS_1, 0, 0.001,kpRS_4
	schedkwhen	ktriggerCy1*kpCy1_1*gkstatus5, kmintim, 0, kpCy1_1, 0, 0.001,kpCy1_4
	schedkwhen	ktriggerCy2*kpCy2_1*gkstatus6, kmintim, 0, kpCy2_1, 0, 0.001,kpCy2_4
	schedkwhen	ktriggerBo1*kpBo1_1*gkstatus7, kmintim, 0, kpBo1_1, 0, 0.001,kpBo1_4
	schedkwhen	ktriggerBo2*kpBo2_1*gkstatus8, kmintim, 0, kpBo2_1, 0, 0.001,kpBo2_4
	schedkwhen	ktriggerBo3*kpBo3_1*gkstatus9, kmintim, 0, kpBo3_1, 0, 0.001,kpBo3_4
	schedkwhen	ktriggerCo*kpCo_1*gkstatus10, kmintim, 0, kpCo_1, 0, 0.001,kpCo_4
	schedkwhen	ktriggerCl*kpCl_1*gkstatus11, kmintim, 0, kpCl_1, 0, 0.001,kpCl_4
	kpGu_3		limit		kpGu_3*(60/gktempo),0.04,300				;duration of guiro read from table and is also dependent upon tempo
	schedkwhen	ktriggerGu*kpGu_1*gkstatus12, kmintim, 0, kpGu_1, 0, kpGu_3,kpGu_4
	schedkwhen	ktriggerMa*kpMa_1*gkstatus13, kmintim, 0, kpMa_1, 0, 0.001,kpMa_4
	schedkwhen	ktriggerQu*kpQu_1*gkstatus14, kmintim, 0, kpQu_1, 0, 0.001,kpQu_4
	schedkwhen	ktriggerTa*kpTa_1*gkstatus15, kmintim, 0, kpTa_1, 0, 0.001,kpTa_4
endin

giFlashTime	=	0.1

instr	101	; Korg Minipops 7: Bass Drum
;	chnset	giOn,"Act1"					; turn instrument indicator on
;	scoreline_i	{{ i 201 0.1 0 "Act1"}}			; call instrument to turn off indicator after a short delay
	xtratim	giFlashTime
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act1"               	;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	p3	=	0.437
	kactive active	p1					; turnoff older active notes
	;if kactive>1 then
	; turnoff
	;endif
	ifrq	=	64					; fundemantal pitch
	asig	mpulse	1,0					; generate a click impulse
	asig	reson	asig,ifrq,ifrq*0.001,2			; reson filter it
	asig	tone	asig,500				; lowpass filter it
	aenv	transeg	1,p3,-14,0				; create an amplitude envelope
	asig	=	asig * aenv * 225 * p4 * i(gkbassdrum)	; scale signal
	gasend	=	gasend + asig				; add to accumulating global audio send variable
endin

instr	102	; Korg Minipops 7: Snare 1
;	chnset	giOn,"Act2"					; turn instrument indicator on
;	scoreline_i	{{ i 201 0.1 0 "Act2"}}         	; call instrument to turn off indicator after a short delay
	xtratim	giFlashTime
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act2"               	;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	kactive active	p1					; turnoff older overlapping notes
	;if kactive>1 then
	; turnoff
	;endif
	p3	=	0.387
	
	; body of the sound (duration governed by p3)
	anoise	pinkish	1					; generate some pink noise
	asig	reson	anoise,6250,9000,1			; reson filter it
	aenv	transeg	1,p3,-5,0				; create an amplitude envelope
	asig	=	asig * aenv				
	asig	buthp	asig,3000
	
	; 'crack' at the beginning of the sound (duration governed by idur)
	idur	=	0.006
	acps	transeg	800,idur,-4,60				; pitch envelope
	astrike	poscil	1,acps,gisine				; sine oscillator 'crack'
	aenv2	transeg	1,idur,-2,0				; amplitude envelope
	astrike	=	astrike * aenv2				; apply amplitude envelope
	asig	=	( ( astrike * 0.7 ) + (asig * 2 ) ) * p4 * i(gksnare1)	; balance the two sound components and scale the sound mixture
	gasend	=	gasend + asig				; add to accumulating global audio send variable
endin

instr	103	; Korg Minipops 7: Snare 2
;	chnset	giOn,"Act3"				; turn instrument indicator on                             
;	scoreline_i	{{ i 201 0.1 0 "Act3"}}         ; call instrument to turn off indicator after a short delay
	xtratim	giFlashTime
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act3"               	;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	kactive active	p1
	;if kactive>1 then
	; turnoff
	;endif
	p3	=	0.4
	
	anoise	pinkish	1
	;asig	reson	anoise,5200,5000,1
	asig	butbp	anoise,5000,8000
	aenv	transeg	1,p3,-8,0
	asig	=	asig * aenv*p4
	asig	buthp	asig,3000
	
	idur	=	0.005
	acps	transeg	800,idur,-4,200
	astrike	poscil	1,acps,gisine
	aenv2	transeg	1,idur,-2,0             
	astrike	=	astrike * aenv2
	asig	=	((astrike*0.5) + (asig*2.3)) * p4 * i(gksnare2)
	gasend	=	gasend + asig
endin

instr	104	;  Korg Minipops 7: Rimshot
;	chnset	giOn,"Act4"				; turn instrument indicator on                             
;	scoreline_i	{{ i 201 0.1 0 "Act4"}}         ; call instrument to turn off indicator after a short delay
	xtratim	giFlashTime
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act4"               	;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	kactive active	p1
	;if kactive>1 then
	; turnoff
	;endif
	p3	=	0.005
	icps	=	1700
	aenv	expon	1,p3,0.0001
	iphs	=	0.2
	asig	oscili	aenv,icps,gisine,iphs
	asig2	reson	asig,icps,1500,2
	asig	buthp	( (asig2 * 0.4 ) + asig ) * 0.3 * p4 * i(gkrimshot), 500
	gasend	=	gasend + asig
endin

instr	105	; Korg Minipops 7: Cymbal 1
;	chnset	giOn,"Act5"				; turn instrument indicator on                             
;	scoreline_i	{{ i 201 0.1 0 "Act5"}}         ; call instrument to turn off indicator after a short delay
	xtratim	giFlashTime
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act5"               	;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	kactive active	p1
	;if kactive>1 then
	; turnoff
	;endif
	p3	=	0.304
	aenv	transeg	1,p3,-2,0
	anoise	dust2	1, 30000			;CREATE NOISE SIGNAL	
	icf	=	6000
	asig1	reson	anoise*aenv,icf,icf*0.7,1
	asig1	butlp	asig1,14000
	asig2	buthp	(asig1+(anoise*0.001))*aenv,6000
	asig	=	asig2 * aenv * 0.5 * p4 * i(gkcymbal1)
	gasend	=	gasend + asig
endin

instr	106	; Korg Minipops 7: Cymbal 2
;	chnset	giOn,"Act6"				; turn instrument indicator on                             
;	scoreline_i	{{ i 201 0.1 0 "Act6"}}         ; call instrument to turn off indicator after a short delay
	xtratim	giFlashTime
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act6"               	;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	kactive active	p1
	;if kactive>1 then
	; turnoff
	;endif
	p3	=	1.404

	aenv	transeg	1,p3,-2,0
	anoise	dust2	1, 10000
	icf	=	5000
	asig	reson	anoise*aenv,icf,icf*0.9,1
	asig	tone	asig,12000
	asig	buthp	asig*aenv,6000
	asig	=	asig*aenv

	idur	=	0.004
	acps	transeg	1000,idur,-4,400
	astrike	poscil	1,acps,gisine
	aenv2	transeg	1,idur,-2,0
	astrike	=	astrike * aenv2

	asig	=	( (astrike * 0.2 ) + (asig * 1.5 ) ) * p4 * i(gkcymbal2)
	gasend	=	gasend + asig
endin

instr	107	; Minipops: Bongo 1
;	chnset	giOn,"Act7"				; turn instrument indicator on                             
;	scoreline_i	{{ i 201 0.1 0 "Act7"}}         ; call instrument to turn off indicator after a short delay
	xtratim	giFlashTime
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act7"               	;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	kactive active	p1
	;if kactive>1 then
	; turnoff
	;endif
	p3	=	0.2
	aenv	transeg	1,p3,13,0
	asig	mpulse	1,0
	icps	=	630;588
	asig	reson	asig,icps,icps*0.03,2
	asig	buthp	asig,300
	asig	butlp	asig,8000	
	asig	=	asig * 4 * aenv * p4 * i(gkbongo1)
	gasend	=	gasend + asig
endin

instr	108	; Korg Minipops 7: Bongo 2
;	chnset	giOn,"Act8"				; turn instrument indicator on                             
;	scoreline_i	{{ i 201 0.1 0 "Act8"}}         ; call instrument to turn off indicator after a short delay
	xtratim	giFlashTime
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act8"               	;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	kactive active	p1
	;if kactive>1 then
	; turnoff
	;endif
	p3	=	0.3
	kcps	expon	400,p3,390	; bongo 2 freq. and that of claves (body) should correspond
	aenv	transeg	1,p3-0.005,0,0.1,0.005,0, 0
	asig	mpulse	1,0
	asig	reson	asig,kcps,kcps*0.03,2
	asig	tone	asig,5000
	asig	buthp	asig,100
	asig	=	asig * 4 * aenv * p4 * i(gkbongo2)
	gasend	=	gasend + asig
endin

instr	109	; Korg Minipops 7: Bongo 3
;	chnset	giOn,"Act9"				; turn instrument indicator on                             
;	scoreline_i	{{ i 201 0.1 0 "Act9"}}         ; call instrument to turn off indicator after a short delay
	xtratim	giFlashTime
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act9"               	;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	kactive active	p1
	;if kactive>1 then
	; turnoff
	;endif
	p3	=	1.229
	icps	=	194;187
	aenv	transeg	0, 0.001, -2, 1, p3-0.001, -2, 0
	asig	mpulse	1,0
	kbw	linseg	0.05,0.01,0.008
	asig	reson	asig,icps,icps*kbw,2
	asig	butlp	asig,11000
	asig	=	asig * 5 * aenv * p4 * i(gkbongo3)
	gasend	=	gasend + asig
endin

instr	110	; Korg Minipops 7: Claves
;	chnset	giOn,"Act10"				; turn instrument indicator on                             
;	scoreline_i	{{ i 201 0.1 0 "Act10"}}        ; call instrument to turn off indicator after a short delay
	xtratim	giFlashTime
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act10"               	;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	kactive active	p1
	;if kactive>1 then
	; turnoff
	;endif
	p3	=	0.186
	aenv	line	1,p3,0
	asig	mpulse	1,0
	icps1	=	400;410	; body - 		; bongo 2 freq. and that of claves (body) should correspond
	asig1	reson	asig,icps1,icps1*0.025,2
	icps2	=	2180	; strike
	asig2	reson	asig,icps2,icps2*0.03,2
	asig	=	(asig1 + (asig2 * 1.3) ) * 3.2 * aenv * p4 * i(gkclaves)
	gasend	=	gasend + asig
endin

instr	111	; Korg Minipops 7: Cowbell
;	chnset	giOn,"Act11"				; turn instrument indicator on                             
;	scoreline_i	{{ i 201 0.1 0 "Act11"}}        ; call instrument to turn off indicator after a short delay
	xtratim	giFlashTime
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act11"               	;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	kactive active	p1
	;if kactive>1 then
	; turnoff
	;endif
	p3	=	0.3
	aenv	line	1,p3,0
	astrike	mpulse	1,0
	icps1	=	850
	asig1	reson	astrike,icps1,icps1*0.007,2	;low (body)
	icps2	=	4707
	asig2	reson	astrike,icps2,icps2*0.03,2	;high (strike)
	amix	=	asig1 + (asig2 * 0.8)
	amix	buthp	amix, 100
	asig	=	amix * aenv * p4 * i(gkcowbell) * 3
	gasend	=	gasend + asig
endin

instr	112	; Korg Minipops 7: Guiro
;	chnset	giOn,"Act12"				; turn instrument indicator on                             
;	scoreline_i	{{ i 201 0.1 0 "Act12"}}        ; call instrument to turn off indicator after a short delay
	xtratim	giFlashTime
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act12"               	;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	kactive active	p1
	;if kactive>1 then        
	; turnoff
	;endif
	idur	=	(p3=3600?0.256:p3*0.9)	
	kcps	transeg	66,idur,2,77
	asig	vco2	0.1,kcps,6;,0.0005
	icf	=	2000
	asig	reson	asig,4300,3000,1
	asig	buthp	asig,1000
	aenv	linseg	0,0.001,1,p3-0.111,0.6,0.1,1,0.01,0
	asig	=	asig * 0.012 * aenv * i(gkguiro) * p4
	gasend	=	gasend + asig
endin

instr	113	; Korg Minipops 7: Maracas
;	chnset	giOn,"Act13"				; turn instrument indicator on                             
;	scoreline_i	{{ i 201 0.1 0 "Act13"}}        ; call instrument to turn off indicator after a short delay
	xtratim	giFlashTime
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act13"               	;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	kactive active	p1
	;if kactive>1 then
	; turnoff
	;endif
	p3	=	0.05
	asig	noise	1,0.04
	icf	=	5000
	asig	reson	asig,9000,4000,2
	asig	buthp	asig,2000
	aenv	transeg	1,p3,-4,0
	asig	=	asig * aenv * 0.35 * p4 * i(gkmaracas)
	gasend	=	gasend + asig
endin

instr	114	; Korg Minipops 7: Quijada
;	chnset	giOn,"Act14"				; turn instrument indicator on                             
;	scoreline_i	{{ i 201 0.1 0 "Act14"}}        ; call instrument to turn off indicator after a short delay
	xtratim	giFlashTime
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act14"               	;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	kactive active	p1
	;if kactive>1 then
	; turnoff
	;endif
	p3	=	0.817

	idur1	=	0.817
	apulse1	mpulse	1,1/22.7272
	kenv1	transeg	0.8,0.05,1, 1,idur1-0.05,-6,0
	apulse1	reson	apulse1,2727,400,1

	idur2	=	0.32
	apulse2	mpulse	1,1/13.1579
	kenv2	transeg	0.8,0.05,1, 1,idur2-0.05,-6,0
	apulse2	reson	apulse2,2727,400,1
	
	amix	=	((apulse1 * kenv1 * 4) + (apulse2 * kenv2 * 4)) * i(gkquijada) * p4
	asig	buthp	amix, 550
	gasend	=	gasend + asig
endin

instr	115	; Korg Minipops 7: Tambourine
;	chnset	giOn,"Act15"				; turn instrument indicator on                             
;	scoreline_i	{{ i 201 0.1 0 "Act15"}}        ; call instrument to turn off indicator after a short delay
	xtratim	giFlashTime
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act15"               	;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	kactive active	p1
	;if kactive>1 then
	; turnoff
	;endif
	p3	=	0.271
	aenv	transeg	1,p3,-8,0
	;aenv	linseg	1, 0.02, 1, 0.01, 0.4, p3-0.02-0.01, 0 
	anoise	noise	1,0
	asig	reson	anoise*aenv,4600, 100,2
	asig	buthp	asig+(anoise*0.1*aenv),7000
	asig	reson	asig,9000,3000,1
	asig	=	asig * aenv * 1.5 * i(gktambourine) * p4
	gasend	=	gasend + asig
endin




instr	150	; green indicator on
	chnset	giOn,"Indic1"
	event_i	"i",p1+1,0.1,0
endin

instr	151	; green indicator off
	chnset	giOff,"Indic1"
endin

instr	160	; green indicator on
	chnset	giOn,"Indic2"
	event_i	"i",p1+1,0.1,0
endin

instr	161	; green indicator off
	chnset	giOff,"Indic2"
endin

instr	199
	if gkcutup==0 then	; if 'mash' button is off...
	 turnoff		; ...turn this instrument off
	endif
	
	; input parameters for bbcut 
	;; << 4/4 >>
	isubdiv        =	8
	ibarlen        =	2 	
	iphrase        =	8 	
	irepeats       =	2 	
	istutspd       =	4 	
	istutchnc      =	1 	

	;; << 12/8 >>
	;isubdiv        =	12
	;ibarlen        =	4 	
	;iphrase        =	4 	
	;irepeats       =	3 	
	;istutspd       =	3 	
	;istutchnc      =	1 	

 	asig	bbcutm	gasend,   i(gktempo)/60, isubdiv,  ibarlen,  iphrase, irepeats, istutspd, istutchnc
	gasend	=	gasend + asig

	if gkOnOff==0 then	; if main on/off button is turned off...
	 turnoff		; ... turn this instrument off too
	endif
endin

instr	200	; output
	kon	=	1
	koff	=	0

	kporttime	linseg	0,0.001,0.05

	gasend	=	gasend * 3

	 ktrig	changed	gkdist
	 if ktrig==1 then
	  reinit RESTART_DIST
	 endif
	 RESTART_DIST:
	 if i(gkdist)>0 then
	  chnset	giOn,"DistOn"
	 else
	  chnset	giOff,"DistOn"
	 endif
	 if gkdist>0 then
	  gasend	clip		gasend,0,1-(i(gkdist)*0.99)
	  rireturn
	  gasend	dam 		gasend, 0.25,1,   1.35,   0.01, 0.01	; compress the signal (whenever distortion is on) 
	 endif
	 ;                              thr  rat1 rat2 tim1  tim2


	; foldover effect (downsampling)
	if gkfold>0 then
	 chnset	kon,"FoldOn"
	else
	 chnset	koff,"FoldOn"
	endif
	gkfold	portk	gkfold,kporttime
	if gkfold>0 then
	 gasend	fold		gasend,1+(gkfold*300)	
	endif
	ktrig	changed	gkfold

	gasend	tone		gasend,10000	; cut high frequencies
	gasend	atone		gasend,100	; cut low frequencies
	
	gasend	=	gasend * gkvolume

		outs	gasend,gasend
		clear	gasend
endin


instr	201
	Sname	=	p4
	chnset	giOff,Sname
endin


</CsInstruments>  
<CsScore>
i 1 0 [3600*24*7]	; read widgets
i 200 0 [3600*24*7]	; output
</CsScore>
</CsoundSynthesizer>; TR-808.csd
; Written by Iain McCurdy, 2012
; 
; Saving patterns saves tables as text file to the pwd. Each save to a new pattern number creates a new text file on disk for that pattern.

; Choosing 'Host Control' allows the VST plugin host to decide 'Tempo' and 'Run/Stop' status

<Cabbage>
form caption("TR-808") size(800, 400), colour("SlateGrey"), pluginid("T808"), guirefresh(32) style("legacy")

label 		bounds(  5,385,120, 12), text("Iain McCurdy |2012|"), fontcolour("black")

groupbox bounds( 0,  0,  50, 225), text("B.Drum"),fontcolour("black"), colour(192,192,192), plant(1) {
checkbox bounds(10, 24,   5,   5), colour("yellow"), channel("Act1"),  value(0), shape("ellipse"), active(0)
rslider  bounds( 5, 25,  45,  45), text("Level"), textcolour("black"), colour(80,100,150), channel("level1"), range(0, 2, 1,1,0.01)
rslider  bounds( 5, 75,  45,  45), text("Tune"),  textcolour("black"), colour(80,100,150), channel("tune1"),  range(-2, 2, 0,1,0.01)
rslider  bounds( 5,125,  45,  45), text("Decay"), textcolour("black"), colour(80,100,150), channel("dur1"),   range(0.25, 2, 1, 0.8)
rslider  bounds( 5,175,  45,  45), text("Pan"),   textcolour("black"), colour(80,100,150), channel("pan1"),   range(0, 1, 0.5,1,0.01)
}
groupbox bounds(50,  0,  50, 225), text("Snare"), fontcolour("black"),colour(202,202,202), plant(2) {
checkbox bounds(10, 24,   5,   5), colour("yellow"), channel("Act2"),  value(0), shape("ellipse"), active(0)
rslider  bounds( 5, 25,  45,  45), text("Level"), textcolour("black"), colour(80,100,150), channel("level2"), range(0, 2, 1,1,0.01)
rslider  bounds( 5, 75,  45,  45), text("Tune"),  textcolour("black"), colour(80,100,150), channel("tune2"),  range(-2, 2, 0,1,0.01)
rslider  bounds( 5,125,  45,  45), text("Decay"), textcolour("black"), colour(80,100,150), channel("dur2"),   range(0.25, 2, 1, 0.8)
rslider  bounds( 5,175,  45,  45), text("Pan"),   textcolour("black"), colour(80,100,150), channel("pan2"),   range(0, 1, 0.5,1,0.01)
}
groupbox bounds(100,  0,  50, 225), text("O. HH"), fontcolour("black"), colour(212,212,212), plant(3) {
checkbox bounds(10, 24,   5,   5), colour("yellow"), channel("Act3"),  value(0), shape("ellipse"), active(0)
rslider  bounds( 5, 25,  45,  45), text("Level"),  textcolour("black"), colour(80,100,150), channel("level3"), range(0, 2, 1,1,0.01)
rslider  bounds( 5, 75,  45,  45), text("Tune"),   textcolour("black"), colour(80,100,150), channel("tune3"),  range(-2, 2, 0,1,0.01)
rslider  bounds( 5,125,  45,  45), text("Decay"),  textcolour("black"), colour(80,100,150), channel("dur3"),   range(0.25, 2, 1, 0.8)
rslider  bounds( 5,175,  45,  45), text("Pan"),    textcolour("black"), colour(80,100,150), channel("pan3"),  range(0, 1, 0.5,1,0.01)
}                                
groupbox bounds(150,  0,  50, 225), text("Cl. HH"),fontcolour("black"),colour(222,222,222), plant(4) {
checkbox bounds(10, 24,   5,   5), colour("yellow"), channel("Act4"),  value(0), shape("ellipse"), active(0)
rslider  bounds( 5, 25,  45,  45), text("Level"),  textcolour("black"), colour(80,100,150), channel("level4"), range(0, 2, 1,1,0.01)
rslider  bounds( 5, 75,  45,  45), text("Tune"),   textcolour("black"), colour(80,100,150), channel("tune4"),  range(-2, 2, 0,1,0.01)
rslider  bounds( 5,125,  45,  45), text("Decay"),  textcolour("black"), colour(80,100,150), channel("dur4"),   range(0.25, 2, 1, 0.8)
rslider  bounds( 5,175,  45,  45), text("Pan"),    textcolour("black"), colour(80,100,150), channel("pan4"),  range(0, 1, 0.5,1,0.01)
}
groupbox bounds(200,  0,  50, 225), text("H. Tom"), fontcolour("black"),colour(232,232,232), plant(5) {
checkbox bounds(10, 24,   5,   5), colour("yellow"), channel("Act5"),  value(0), shape("ellipse"), active(0)
rslider  bounds( 5, 25,  45,  45), text("Level"),  textcolour("black"), colour(80,100,150), channel("level5"), range(0, 2, 1,1,0.01)
rslider  bounds( 5, 75,  45,  45), text("Tune"),   textcolour("black"), colour(80,100,150), channel("tune5"), range(-2, 2, 0,1,0.01)
rslider  bounds( 5,125,  45,  45), text("Decay"),  textcolour("black"), colour(80,100,150), channel("dur5"),   range(0.25, 2, 1, 0.8)
rslider  bounds( 5,175,  45,  45), text("Pan"),    textcolour("black"), colour(80,100,150), channel("pan5"),  range(0, 1, 0.5,1,0.01)
}
groupbox bounds(250,  0,  50, 225), text("M. Tom"),fontcolour("black"), colour(242,242,242), plant(6) {
checkbox bounds(10, 24,   5,   5), colour("yellow"), channel("Act6"),  value(0), shape("ellipse"), active(0)
rslider  bounds( 5, 25,  45,  45), text("Level"),  textcolour("black"), colour(80,100,150), channel("level6"), range(0, 2, 1,1,0.01)
rslider  bounds( 5, 75,  45,  45), text("Tune"),   textcolour("black"), colour(80,100,150), channel("tune6"), range(-2, 2, 0,1,0.01)
rslider  bounds( 5,125,  45,  45), text("Decay"),  textcolour("black"), colour(80,100,150), channel("dur6"), range(0.25, 2, 1, 0.8)
rslider  bounds( 5,175,  45,  45), text("Pan"),    textcolour("black"), colour(80,100,150), channel("pan6"),  range(0, 1, 0.5,1,0.01)
}
groupbox bounds(300,  0,  50, 225), text("L. Tom"),fontcolour("black"), colour(232,232,232), plant(7) {
checkbox bounds(10, 24,   5,   5), colour("yellow"), channel("Act7"),  value(0), shape("ellipse"), active(0)
rslider  bounds( 5, 25,  45,  45), text("Level"),  textcolour("black"), colour(80,100,150), channel("level7"), range(0, 2, 1,1,0.01)
rslider  bounds( 5, 75,  45,  45), text("Tune"),   textcolour("black"), colour(80,100,150), channel("tune7"), range(-2, 2, 0,1,0.01)
rslider  bounds( 5,125,  45,  45), text("Decay"),  textcolour("black"), colour(80,100,150), channel("dur7"), range(0.25, 2, 1, 0.8)
rslider  bounds( 5,175,  45,  45), text("Pan"),    textcolour("black"), colour(80,100,150), channel("pan7"),  range(0, 1, 0.5,1,0.01)
}
groupbox bounds(350,  0,  50, 225), text("Cymbal"), fontcolour("black"),colour(222,222,222), plant(8) {
checkbox bounds(10, 24,   5,   5), colour("yellow"), channel("Act8"),  value(0), shape("ellipse"), active(0)
rslider  bounds( 5, 25,  45,  45), text("Level"),  textcolour("black"), colour(80,100,150), channel("level8"), range(0, 2, 1,1,0.01)
rslider  bounds( 5, 75,  45,  45), text("Tune"),   textcolour("black"), colour(80,100,150), channel("tune8"),  range(-2, 2, 0,1,0.01)
rslider  bounds( 5,125,  45,  45), text("Decay"),  textcolour("black"), colour(80,100,150), channel("dur8"),  range(0.25, 2, 1, 0.8)
rslider  bounds( 5,175,  45,  45), text("Pan"),    textcolour("black"), colour(80,100,150), channel("pan8"),  range(0, 1, 0.5,1,0.01)
}
groupbox bounds(400,  0,  50, 225), text("Rim Shot"),fontcolour("black"), colour(212,212,212), plant(9) {
checkbox bounds(10, 24,   5,   5), colour("yellow"), channel("Act9"),  value(0), shape("ellipse"), active(0)
rslider  bounds( 5, 25,  45,  45), text("Level"),   textcolour("black"), colour(80,100,150), channel("level9"), range(0, 2, 1,1,0.01)
rslider  bounds( 5, 75,  45,  45), text("Tune"),    textcolour("black"), colour(80,100,150), channel("tune9"),  range(-2, 2, 0,1,0.01)
rslider  bounds( 5,125,  45,  45), text("Decay"),   textcolour("black"), colour(80,100,150), channel("dur9"),  range(0.25, 2, 1, 0.8)
rslider  bounds( 5,175,  45,  45), text("Pan"),     textcolour("black"), colour(80,100,150), channel("pan9"),  range(0, 1, 0.5,1,0.01)
}
groupbox bounds(450,  0,  50, 225), text("Claves"), fontcolour("black"),colour(202,202,202), plant(10) {
checkbox bounds(10, 24,   5,   5), colour("yellow"), channel("Act10"),  value(0), shape("ellipse"), active(0)
rslider  bounds( 5, 25,  45,  45), text("Level"),  textcolour("black"), colour(80,100,150), channel("level10"), range(0, 2, 1,1,0.01)
rslider  bounds( 5, 75,  45,  45), text("Tune"),   textcolour("black"), colour(80,100,150), channel("tune10"),  range(-2, 2, 0,1,0.01)
rslider  bounds( 5,125,  45,  45), text("Decay"),  textcolour("black"), colour(80,100,150), channel("dur10"),  range(0.25, 2, 1, 0.8)
rslider  bounds( 5,175,  45,  45), text("Pan"),    textcolour("black"), colour(80,100,150), channel("pan10"), range(0, 1, 0.5,1,0.01)
}
groupbox bounds(500,  0,  50, 225), text("Cowbell"),fontcolour("black"), colour(192,192,192), plant(11) {
checkbox bounds(10, 24,   5,   5), colour("yellow"), channel("Act11"),  value(0), shape("ellipse"), active(0)
rslider  bounds( 5, 25,  45,  45), text("Level"),  textcolour("black"), colour(80,100,150), channel("level11"), range(0, 2, 1,1,0.01)
rslider  bounds( 5, 75,  45,  45), text("Tune"),   textcolour("black"), colour(80,100,150), channel("tune11"),  range(-2, 2, 0,1,0.01)
rslider  bounds( 5,125,  45,  45), text("Decay"),  textcolour("black"), colour(80,100,150), channel("dur11"),  range(0.25, 2, 1, 0.8)
rslider  bounds( 5,175,  45,  45), text("Pan"),    textcolour("black"), colour(80,100,150), channel("pan11"), range(0, 1, 0.5,1,0.01)
}
groupbox bounds(550,  0,  50, 225), text("Clap"), fontcolour("black"),colour(182,182,182), plant(12) {
checkbox bounds(10, 24,   5,   5), colour("yellow"), channel("Act12"),  value(0), shape("ellipse"), active(0)
rslider  bounds( 5, 25,  45,  45), text("Level"), textcolour("black"), colour(80,100,150), channel("level12"), range(0, 2, 1,1,0.01)
rslider  bounds( 5, 75,  45,  45), text("Tune"),  textcolour("black"), colour(80,100,150), channel("tune12"),  range(-2, 2, 0,1,0.01)
rslider  bounds( 5,125,  45,  45), text("Decay"), textcolour("black"), colour(80,100,150), channel("dur12"),  range(0.25, 2, 1, 0.8)
rslider  bounds( 5,175,  45,  45), text("Pan"),   textcolour("black"), colour(80,100,150), channel("pan12"), range(0, 1, 0.5,1,0.01)
}
groupbox bounds(600,  0,  50, 225), text("Maraca"),fontcolour("black"), colour(172,172,172), plant(13) {
checkbox bounds(10, 24,   5,   5), colour("yellow"), channel("Act13"),  value(0), shape("ellipse"), active(0)
rslider  bounds( 5, 25,  45,  45), text("Level"), textcolour("black"), colour(80,100,150), channel("level13"), range(0, 2, 1,1,0.01)
rslider  bounds( 5, 75,  45,  45), text("Tune"),  textcolour("black"), colour(80,100,150), channel("tune13"),  range(-2, 2, 0,1,0.01)
rslider  bounds( 5,125,  45,  45), text("Decay"), textcolour("black"), colour(80,100,150), channel("dur13"),  range(0.25, 2, 1, 0.8)
rslider  bounds( 5,175,  45,  45), text("Pan"),   textcolour("black"), colour(80,100,150), channel("pan13"), range(0, 1, 0.5,1,0.01)
}
groupbox bounds(650,  0,  50, 225), text("Hi Conga"),fontcolour("black"), colour(162,162,162), plant(14) {
checkbox bounds(10, 24,   5,   5), colour("yellow"), channel("Act14"),  value(0), shape("ellipse"), active(0)
rslider  bounds( 5, 25,  45,  45), text("Level"),   textcolour("black"), colour(80,100,150), channel("level14"), range(0, 2, 1,1,0.01)
rslider  bounds( 5, 75,  45,  45), text("Tune"),    textcolour("black"), colour(80,100,150), channel("tune14"),  range(-2, 2, 0,1,0.01)
rslider  bounds( 5,125,  45,  45), text("Decay"),   textcolour("black"), colour(80,100,150), channel("dur14"),   range(0.25, 2, 1, 0.8)
rslider  bounds( 5,175,  45,  45), text("Pan"),     textcolour("black"), colour(80,100,150), channel("pan14"), range(0, 1, 0.5,0.01)
}
groupbox bounds(700,  0,  50, 225), text("Md Cnga"),fontcolour("black"), colour(152,152,152), plant(15) {
checkbox bounds(10, 24,   5,   5), colour("yellow"), channel("Act15"),  value(0), shape("ellipse"), active(0)
rslider  bounds( 5, 25,  45,  45), text("Level"),  textcolour("black"), colour(80,100,150), channel("level15"), range(0, 2, 1,1,0.01)
rslider  bounds( 5, 75,  45,  45), text("Tune"),   textcolour("black"), colour(80,100,150), channel("tune15"),  range(-2, 2, 0,1,0.01)
rslider  bounds( 5,125,  45,  45), text("Decay"),  textcolour("black"), colour(80,100,150), channel("dur15"),   range(0.25, 2, 1, 0.8)
rslider  bounds( 5,175,  45,  45), text("Pan"),    textcolour("black"), colour(80,100,150), channel("pan15"), range(0, 1, 0.5,1,0.01)
}
groupbox bounds(750,  0,  50, 225), text("Lo Cnga"),fontcolour("black"), colour(142,142,142), plant(16) {
checkbox bounds(10, 24,   5,   5), colour("yellow"), channel("Act16"),  value(0), shape("ellipse"), active(0)
rslider  bounds( 5, 25,  45,  45), text("Level"),  textcolour("black"), colour(80,100,150), channel("level16"), range(0, 2, 1,1,0.01)
rslider  bounds( 5, 75,  45,  45), text("Tune"),   textcolour("black"), colour(80,100,150), channel("tune16"),  range(-2, 2, 0,1,0.01)
rslider  bounds( 5,125,  45,  45), text("Decay"),  textcolour("black"), colour(80,100,150), channel("dur16"),   range(0.25, 2, 1, 0.8)
rslider  bounds( 5,175,  45,  45), text("Pan"),    textcolour("black"), colour(80,100,150), channel("pan16"), range(0, 1, 0.5,1,0.01)
}

keyboard bounds(0, 225, 800, 80)
button   bounds( 10,315, 40, 25), fontcolour:0(50,50,50), fontcolour:1(205,255,205), colour:0(0,10,0), colour:1(0,150,0), text("Play","Play"), channel("Play"), latched(1), radiogroup(1), identchannel("PlayButton")
button   bounds( 50,315, 40, 25), fontcolour:0(50,50,50), fontcolour:1(255,205,205), colour:0(10,0,0), colour:1(150,0,0), text("Stop","Stop"), channel("Stop"), latched(1), radiogroup(1), value(1), identchannel("StopButton")


combobox bounds( 10,345, 80, 15), channel("sound"), value(1), text("Bass Drum","Snare","Open HH","Cl. HH","Hi Tom","Mid Tom","Lo Tom","Cymbal","Rimshot","Claves","Cowbell","Clap","Maraca","Hi Conga","Mid Conga","Lo Conga")
button   bounds(462,315, 80, 20), text("Clear","Clear"), channel("clear"), value(0)
button   bounds(462,338, 38, 20), text("Save","Save"), channel("save"), value(0)
button   bounds(502,338, 38, 20), text("Load","Load"), channel("load"), value(0)
label    bounds(542,328, 48, 10), text("PATTERN"), fontcolour("black")
combobox bounds(544,338, 45, 20), channel("pattern"), value(1), text("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16")
rslider  bounds(593,310, 60, 60), text("Accent"),  textcolour("black"), colour(80,100,150), channel("AccLev"), range(0, 1.00, 0.4)
rslider  bounds(643,310, 60, 60), text("Tempo"),   textcolour("black"), colour(80,100,150), channel("tempo"), range(10, 500, 70, 1, 1)
rslider  bounds(693,310, 60, 60), text("Swing"),   textcolour("black"), colour(80,100,150), channel("swing"), range(0, 0.50, 0)
rslider  bounds(743,310, 60, 60), text("Level"),   textcolour("black"), colour(80,100,150), channel("level"), range(0, 2.00, 1)

label    bounds(143,312,  6, 10), text("1"), fontcolour("black")
label    bounds(163,312,  6, 10), text("2"), fontcolour("black")
label    bounds(183,312,  6, 10), text("3"), fontcolour("black")
label    bounds(203,312,  6, 10), text("4"), fontcolour("black")
label    bounds(223,312,  6, 10), text("5"), fontcolour("black")
label    bounds(243,312,  6, 10), text("6"), fontcolour("black")
label    bounds(263,312,  6, 10), text("7"), fontcolour("black")
label    bounds(283,312,  6, 10), text("8"), fontcolour("black")
label    bounds(303,312,  6, 10), text("9"), fontcolour("black")
label    bounds(320,312, 12, 10), text("10"), fontcolour("black")
label    bounds(340,312, 12, 10), text("11"), fontcolour("black")
label    bounds(360,312, 12, 10), text("12"), fontcolour("black")
label    bounds(380,312, 12, 10), text("13"), fontcolour("black")
label    bounds(400,312, 12, 10), text("14"), fontcolour("black")
label    bounds(420,312, 12, 10), text("15"), fontcolour("black")
label    bounds(440,312, 12, 10), text("16"), fontcolour("black")

label    bounds(120, 325, 17, 12), text("On"), fontcolour("black")
checkbox bounds(140, 325, 12, 12), channel("On1"),  value(1)
checkbox bounds(160, 325, 12, 12), channel("On2"),  value(0)
checkbox bounds(180, 325, 12, 12), channel("On3"),  value(0)
checkbox bounds(200, 325, 12, 12), channel("On4"),  value(1)
checkbox bounds(220, 325, 12, 12), channel("On5"),  value(1)
checkbox bounds(240, 325, 12, 12), channel("On6"),  value(0)
checkbox bounds(260, 325, 12, 12), channel("On7"),  value(0)
checkbox bounds(280, 325, 12, 12), channel("On8"),  value(0)
checkbox bounds(300, 325, 12, 12), channel("On9"),  value(1)
checkbox bounds(320, 325, 12, 12), channel("On10"), value(0)
checkbox bounds(340, 325, 12, 12), channel("On11"), value(0)
checkbox bounds(360, 325, 12, 12), channel("On12"), value(1)
checkbox bounds(380, 325, 12, 12), channel("On13"), value(0)
checkbox bounds(400, 325, 12, 12), channel("On14"), value(1)
checkbox bounds(420, 325, 12, 12), channel("On15"), value(0)
checkbox bounds(440, 325, 12, 12), channel("On16"), value(0)

label    bounds( 98, 345, 38, 12), text("Accent"), fontcolour("black")
checkbox bounds(140, 345, 12, 12), channel("Acc1"),  value(1), colour("yellow")
checkbox bounds(160, 345, 12, 12), channel("Acc2"),  value(0), colour("yellow")
checkbox bounds(180, 345, 12, 12), channel("Acc3"),  value(0), colour("yellow")
checkbox bounds(200, 345, 12, 12), channel("Acc4"),  value(0), colour("yellow")
checkbox bounds(220, 345, 12, 12), channel("Acc5"),  value(0), colour("yellow")
checkbox bounds(240, 345, 12, 12), channel("Acc6"),  value(0), colour("yellow")
checkbox bounds(260, 345, 12, 12), channel("Acc7"),  value(0), colour("yellow")
checkbox bounds(280, 345, 12, 12), channel("Acc8"),  value(0), colour("yellow")
checkbox bounds(300, 345, 12, 12), channel("Acc9"),  value(0), colour("yellow")
checkbox bounds(320, 345, 12, 12), channel("Acc10"), value(0), colour("yellow")
checkbox bounds(340, 345, 12, 12), channel("Acc11"), value(0), colour("yellow")
checkbox bounds(360, 345, 12, 12), channel("Acc12"), value(0), colour("yellow")
checkbox bounds(380, 345, 12, 12), channel("Acc13"), value(0), colour("yellow")
checkbox bounds(400, 345, 12, 12), channel("Acc14"), value(0), colour("yellow")
checkbox bounds(420, 345, 12, 12), channel("Acc15"), value(0), colour("yellow")
checkbox bounds(440, 345, 12, 12), channel("Acc16"), value(0), colour("yellow")

button   bounds(458,362, 90, 18), text("Local Control","Host Control"), channel("control"), value(0)

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-n -+rtmidi=null -M0 -dm0
</CsOptions>

<CsInstruments>

sr 		= 	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1
massign	0,2

;Author: Iain McCurdy (2012)

gisine		ftgen	0,0,1024,10,1		;A SINE WAVE
gicos		ftgen	0,0,65536,9,1,1,90	;A COSINE WAVE
gkoff	init	0
;				1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16
giOn1	ftgen	0,0,16,2,	1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0	;BD
giOn2	ftgen	0,0,16,2,	0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0	;SN
giOn3	ftgen	0,0,16,2,	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0  ;HHO
giOn4	ftgen	0,0,16,2,	1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1  ;HHCl
giOn5	ftgen	0,0,16,2,	0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  ;Hi Tom
giOn6	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0  ;Mid Tom
giOn7	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0  ;Lo Tom
giOn8	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0  ;Cym
giOn9	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  ;Rimshot
giOn10	ftgen	0,0,16,2,	1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0  ;Claves
giOn11	ftgen	0,0,16,2,	1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1  ;Cowbell
giOn12	ftgen	0,0,16,2,	0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0  ;Clap
giOn13	ftgen	0,0,16,2,	1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0  ;Maraca
giOn14	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0  ;Hi Conga
giOn15	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0  ;Mid Conga
giOn16	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1  ;Lo Conga
giAcc1	ftgen	0,0,16,2,	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	;BD
giAcc2	ftgen	0,0,16,2,	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	;SN
giAcc3	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  ;HHO
giAcc4	ftgen	0,0,16,2,	1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0  ;HHCl
giAcc5	ftgen	0,0,16,2,	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  ;Hi Tom
giAcc6	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  ;Mid Tom
giAcc7	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0  ;Lo Tom
giAcc8	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0  ;Cym
giAcc9	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  ;Rimshot
giAcc10	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  ;Claves
giAcc11	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  ;Cowbell
giAcc12	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  ;Clap
giAcc13	ftgen	0,0,16,2,	1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0  ;Maraca
giAcc14	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0  ;Hi Conga
giAcc15	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0  ;Mid Conga
giAcc16	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0  ;Lo Conga
giblank	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  ;blank

instr	1	;READ IN WIDGETS, SCAN MIDI NOTES PLAYED AND RELAY TO DRUM SOUNDS 
	gkPlay		chnget	"Play"
	gkStop		chnget	"Stop"
	if trigger(gkPlay,0.5,0)==1 then
	 gkOnOff	=	1
	elseif trigger(gkStop,0.5,0)==1 then
	 gkOnOff	=	0
	endif

	;READ IN WIDGETS
	gklevel1	chnget	"level1"
	gklevel2	chnget	"level2"
	gklevel3	chnget	"level3"
	gklevel4	chnget	"level4"
	gklevel5	chnget	"level5"
	gklevel6	chnget	"level6"
	gklevel7	chnget	"level7"
	gklevel8	chnget	"level8"
	gklevel9	chnget	"level9"
	gklevel10	chnget	"level10"	
	gklevel11	chnget	"level11"	
	gklevel12	chnget	"level12"	
	gklevel13	chnget	"level13"	
	gklevel14	chnget	"level14"	
	gklevel15	chnget	"level15"	
	gklevel16	chnget	"level16"	
	gktune1		chnget	"tune1"	
	gktune2		chnget	"tune2"	
	gktune3		chnget	"tune3"	
	gktune4		chnget	"tune4"	
	gktune5		chnget	"tune5"	
	gktune6		chnget	"tune6"	
	gktune7		chnget	"tune7"	
	gktune8		chnget	"tune8"	
	gktune9		chnget	"tune9"	
	gktune10	chnget	"tune10"	
	gktune11	chnget	"tune11"	
	gktune12	chnget	"tune12"	
	gktune13	chnget	"tune13"	
	gktune14	chnget	"tune14"	
	gktune15	chnget	"tune15"	
	gktune16	chnget	"tune16"
	gkdur1	chnget	"dur1"
	gkdur2	chnget	"dur2"
	gkdur3	chnget	"dur3"
	gkdur4	chnget	"dur4"
	gkdur5	chnget	"dur5"
	gkdur6	chnget	"dur6"
	gkdur7	chnget	"dur7"
	gkdur8	chnget	"dur8"
	gkdur9	chnget	"dur9"
	gkdur10	chnget	"dur10"	
	gkdur11	chnget	"dur11"	
	gkdur12	chnget	"dur12"	
	gkdur13	chnget	"dur13"	
	gkdur14	chnget	"dur14"	
	gkdur15	chnget	"dur15"	
	gkdur16	chnget	"dur16"	
	gkpan1		chnget	"pan1"	
	gkpan2		chnget	"pan2"	
	gkpan3		chnget	"pan3"	
	gkpan4		chnget	"pan4"	
	gkpan5		chnget	"pan5"	
	gkpan6		chnget	"pan6"	
	gkpan7		chnget	"pan7"	
	gkpan8		chnget	"pan8"	
	gkpan9		chnget	"pan9"	
	gkpan10		chnget	"pan10"	
	gkpan11		chnget	"pan11"	
	gkpan12		chnget	"pan12"	
	gkpan13		chnget	"pan13"	
	gkpan14		chnget	"pan14"	
	gkpan15		chnget	"pan15"	
	gkpan16		chnget	"pan16"
	gksound		chnget	"sound"
	gkOn1		chnget	"On1"
	gkOn2		chnget	"On2"
	gkOn3		chnget	"On3"
	gkOn4		chnget	"On4"
	gkOn5		chnget	"On5"
	gkOn6		chnget	"On6"
	gkOn7		chnget	"On7"
	gkOn8		chnget	"On8"
	gkOn9		chnget	"On9"
	gkOn10		chnget	"On10"
	gkOn11		chnget	"On11"
	gkOn12		chnget	"On12"
	gkOn13		chnget	"On13"
	gkOn14		chnget	"On14"
	gkOn15		chnget	"On15"
	gkOn16		chnget	"On16"
	gkAcc1		chnget	"Acc1"
	gkAcc2		chnget	"Acc2"
	gkAcc3		chnget	"Acc3"
	gkAcc4		chnget	"Acc4"
	gkAcc5		chnget	"Acc5"
	gkAcc6		chnget	"Acc6"
	gkAcc7		chnget	"Acc7"
	gkAcc8		chnget	"Acc8"
	gkAcc9		chnget	"Acc9"
	gkAcc10		chnget	"Acc10"
	gkAcc11		chnget	"Acc11"
	gkAcc12		chnget	"Acc12"
	gkAcc13		chnget	"Acc13"
	gkAcc14		chnget	"Acc14"
	gkAcc15		chnget	"Acc15"
	gkAcc16		chnget	"Acc16"
	gkclear		chnget	"clear"
	gksave		chnget	"save"
	gkload		chnget	"load"
	gkpattern	chnget	"pattern"
	gkAccLev	chnget	"AccLev"
	gktempo		chnget	"tempo"
	gkswing		chnget	"swing"
	gklevel		chnget	"level"

	kcontrol	chnget	"control"
	if kcontrol==1 then			; host control over start stop and tempo
	 gktempo	chnget	"HOST_BPM"
	 gkOnOff	chnget	"IS_PLAYING"
	 if changed(gktempo)==1 then
	  chnset	gktempo, "tempo"
	 endif
	 if changed(gkOnOff)==1 then
	  chnset	gkOnOff, "OnOff"
	 endif
	endif
	
	;START/STOP SEQUENCER
	ktrig	changed	gkOnOff		;if Run/Stop button is changed...
	if ktrig==1 then		;
	 if gkOnOff==1 then		;...if Run/Stop has been changed to 'Run'...
	  event	"i",3,0,-1		;...start instr 3 playing a held note
	 else				;otherwise...
	  event	"i",-3,0,0		;...stop instr 3 playing
	 endif
	endif
	
	;CLEAR SEQUENCES FOR ALL DRUM SOUNDS
	ktrig changed	gkclear		
	if ktrig==1 then
	 tablecopy	giOn1,	giblank	 ;copy blank table over existing sequence for voice 1
	 tablecopy	giOn2,	giblank	 ;repeat for every other voice
	 tablecopy	giOn3,	giblank	 
	 tablecopy	giOn4,	giblank	 
	 tablecopy	giOn5,	giblank	 
	 tablecopy	giOn6,	giblank	 
	 tablecopy	giOn7,	giblank	 
	 tablecopy	giOn8,	giblank	 
	 tablecopy	giOn9,	giblank	 
	 tablecopy	giOn10,	giblank	 
	 tablecopy	giOn11,	giblank	 
	 tablecopy	giOn12,	giblank	 
	 tablecopy	giOn13,	giblank	 
	 tablecopy	giOn14,	giblank	 
	 tablecopy	giOn15,	giblank	 
	 tablecopy	giOn16,	giblank	 
	 tablecopy	giAcc1,		giblank	 
	 tablecopy	giAcc2,		giblank	 
	 tablecopy	giAcc3,		giblank	 
	 tablecopy	giAcc4,		giblank	 
	 tablecopy	giAcc5,		giblank	 
	 tablecopy	giAcc6,		giblank	 
	 tablecopy	giAcc7,		giblank	 
	 tablecopy	giAcc8,		giblank	 
	 tablecopy	giAcc9,		giblank	 
	 tablecopy	giAcc10,	giblank	 
	 tablecopy	giAcc11,	giblank	 
	 tablecopy	giAcc12,	giblank	 
	 tablecopy	giAcc13,	giblank	 
	 tablecopy	giAcc14,	giblank	 
	 tablecopy	giAcc15,	giblank	 
	 tablecopy	giAcc16,	giblank	 
	endif
	
	;STORE SEQUENCE TABLES
	ktrig changed	gksave	;if save button is toggled...
	igoto	SKIP
	if ktrig==1 then
	 reinit	SAVE_TABLES	;begin a reinitialisation pass from label (ftsave operates only at i-time)
	endif
	SAVE_TABLES:
	SFileName sprintf "TR-808_pattern.%d.txt", i(gkpattern)	;create the file name (string variable) that will be used to name the text file that will contain the pattern data
	ftsave SFileName, 1, giOn1, giOn2, giOn3, giOn4, giOn5, giOn6, giOn7, giOn8, giOn9, giOn10, giOn11, giOn12, giOn13, giOn14, giOn15, giOn16, giAcc1, giAcc2, giAcc3, giAcc4, giAcc5, giAcc6, giAcc7, giAcc8, giAcc9, giAcc10, giAcc11, giAcc12, giAcc13, giAcc14, giAcc15, giAcc16	;save all tables (on information and accents) to a text file in the pwd
	rireturn	
	SKIP:
	
	;LOAD SEQUENCE TABLES
	ktrig changed	gkload	;if load button is toggled...
	igoto	SKIP2
	if ktrig==1 then
	 reinit	LOAD_TABLES	;begin a reinitialisation pass from label (ftload operates only at i-time)
	endif
	LOAD_TABLES:
	SFileName sprintf "TR-808_pattern.%d.txt", i(gkpattern)	;create the file name (string variable) that will be the name of the file from which data will be retrieved
	ftload SFileName, 1, giOn1, giOn2, giOn3, giOn4, giOn5, giOn6, giOn7, giOn8, giOn9, giOn10, giOn11, giOn12, giOn13, giOn14, giOn15, giOn16, giAcc1, giAcc2, giAcc3, giAcc4, giAcc5, giAcc6, giAcc7, giAcc8, giAcc9, giAcc10, giAcc11, giAcc12, giAcc13, giAcc14, giAcc15, giAcc16	;load all tables (on information and accents) to a text file in the pwd
	rireturn	
	SKIP2:
	
	;UPDATE SEQUENCE DISPLAY
	ktrig	changed	gksound,gkclear,gkload
	if ktrig==1 then
#define	UPDATE_SEQUENCE(N)
	 #
	 kval	tablekt	$N-1,giOn1+gksound-1
	 chnset	kval,"On$N"
	 kval	tablekt	$N-1,giAcc1+gksound-1
	 chnset	kval,"Acc$N"
	 #
	 $UPDATE_SEQUENCE(1)
	 $UPDATE_SEQUENCE(2)
	 $UPDATE_SEQUENCE(3)
	 $UPDATE_SEQUENCE(4)
	 $UPDATE_SEQUENCE(5)
	 $UPDATE_SEQUENCE(6)
	 $UPDATE_SEQUENCE(7)
	 $UPDATE_SEQUENCE(8)
	 $UPDATE_SEQUENCE(9)
	 $UPDATE_SEQUENCE(10)
	 $UPDATE_SEQUENCE(11)
	 $UPDATE_SEQUENCE(12)
	 $UPDATE_SEQUENCE(13)
	 $UPDATE_SEQUENCE(14)
	 $UPDATE_SEQUENCE(15)
	 $UPDATE_SEQUENCE(16)
	endif
	
	;UPDATE TABLE IF SEQUENCE BUTTON CHANGED
#define	UPDATE_TABLE(N)
	#
	ktrig	changed	gkOn$N
	if ktrig==1 then
	 tablewkt	gkOn$N,$N-1,giOn1+gksound-1
	endif
	ktrig	changed	gkAcc$N
	if ktrig==1 then
	 tablewkt	gkAcc$N,$N-1,giAcc1+gksound-1
	endif
	#
	$UPDATE_TABLE(1)
	$UPDATE_TABLE(2)
	$UPDATE_TABLE(3)
	$UPDATE_TABLE(4)
	$UPDATE_TABLE(5)
	$UPDATE_TABLE(6)
	$UPDATE_TABLE(7)
	$UPDATE_TABLE(8)
	$UPDATE_TABLE(9)
	$UPDATE_TABLE(10)
	$UPDATE_TABLE(11)
	$UPDATE_TABLE(12)
	$UPDATE_TABLE(13)
	$UPDATE_TABLE(14)
	$UPDATE_TABLE(15)
	$UPDATE_TABLE(16)
endin

instr	2	;READ MIDI AND TRIGGER NOTES
	inum	notnum					;READ IN MIDI NOTE NUMBER
	idb	veloc	-30,0				;READ IN MIDI NOTE VELOCITY (WILL BE USED AS A DECIBEL VALUE)
	iinstr	wrap	inum,0,16			;MAP MIDI NOTE NUMBERS (RANGE: 0 - 127) TO DRUM SOUND NUMBER (0 - 15)
	event_i	"i",101+iinstr,0,0.001,ampdbfs(idb)	;CALL THE RELEVANT INSTRUMENT AND SEND AMPLITUDE VALUE AS p4
endin

instr	3	;PLAY SEQUENCE	
	gindx	init	0
	ktick	metro		(gktempo*4)/60
	
	;SWING
	kSwingBeat init	0
	kSwingTime	=	(kSwingBeat==1?(60*gkswing)/(gktempo*4):0)
	if ktick==1 then
	 kSwingBeat	=	abs(kSwingBeat-1)	;FLIP BETWEEN ZERO AND 1
	endif
	
		schedkwhen	ktick, 0, 0, 4, kSwingTime, 0.001
endin

instr	4	;TEST FOR NOTE ON SEQUENCE STEP
#define	VOICE(N)	
	#
	iOnOff$N	table		gindx, giOn$N
	if iOnOff$N==1 then
	 iAcc	table	gindx,giAcc$N
	 event_i	"i", 100+$N, 0, 0.001, 0.4 + (iAcc*i(gkAccLev))
	endif
	#
$VOICE(1)
$VOICE(2)
$VOICE(3)
$VOICE(4)
$VOICE(5)
$VOICE(6)
$VOICE(7)
$VOICE(8)
$VOICE(9)
$VOICE(10)
$VOICE(11)
$VOICE(12)
$VOICE(13)
$VOICE(14)
$VOICE(15)
$VOICE(16)
	gindx		wrap	gindx+1, 0, 16
			turnoff
endin

instr	101	;BASS DRUM
	xtratim	0.1
	krelease	release		;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)
	chnset	1-krelease,"Act1"	;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS

	p3	=	2*i(gkdur1)							;NOTE DURATION. SCALED USING GUI 'Decay' KNOB

	;SUSTAIN AND BODY OF THE SOUND
	kmul	transeg	0.2,p3*0.5,-15,0.01, p3*0.5,0,0					;PARTIAL STRENGTHS MULTIPLIER USED BY GBUZZ. DECAYS FROM A SOUND WITH OVERTONES TO A SINE TONE.
	kbend	transeg	0.5,1.2,-4, 0,1,0,0						;SLIGHT PITCH BEND AT THE START OF THE NOTE 
	asig	gbuzz	0.5,50*octave(gktune1)*semitone(kbend),20,1,kmul,gicos		;GBUZZ TONE
	aenv	transeg	1,p3-0.004,-6,0							;AMPLITUDE ENVELOPE FOR SUSTAIN OF THE SOUND
	aatt	linseg	0,0.004,1							;SOFT ATTACK
	asig	=	asig*aenv*aatt

	;HARD, SHORT ATTACK OF THE SOUND
	aenv	linseg	1,0.07,0							;AMPLITUDE ENVELOPE (FAST DECAY)						
	acps	expsega	400,0.07,0.001,1,0.001						;FREQUENCY OF THE ATTACK SOUND. QUICKLY GLISSES FROM 400 Hz TO SUB-AUDIO
	aimp	oscili	aenv,acps*octave(gktune1*0.25),gisine				;CREATE ATTACK SOUND
	
	amix	=	((asig*0.5)+(aimp*0.35))*gklevel1*p4*gklevel			;MIX SUSTAIN AND ATTACK SOUND ELEMENTS AND SCALE USING GUI 'Level' KNOB
	
	aL,aR	pan2	amix,gkpan1							;PAN THE MONOPHONIC SOUND
		outs	aL,aR								;SEND AUDIO TO OUTPUTS
endin

instr	102	;SNARE DRUM
	xtratim	0.1
	krelease	release		;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act2"       ;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	
	;SOUND CONSISTS OF TWO SINE TONES, AN OCTAVE APART AND A NOISE SIGNAL
	ifrq  	=	342		;FREQUENCY OF THE TONES
	iNseDur	=	0.3 * i(gkdur2)	;DURATION OF THE NOISE COMPONENT
	iPchDur	=	0.1 * i(gkdur2)	;DURATION OF THE SINE TONES COMPONENT
	p3	=	iNseDur 	;p3 DURATION TAKEN FROM NOISE COMPONENT DURATION (ALWATS THE LONGEST COMPONENT)
	
	;SINE TONES COMPONENT
	aenv1	expseg	1,iPchDur,0.0001,p3-iPchDur,0.0001		;AMPLITUDE ENVELOPE
	apitch1	oscili	1,ifrq*octave(gktune2),gisine			;SINE TONE 1
	apitch2	oscili	0.25,ifrq*0.5*octave(gktune2),gisine		;SINE TONE 2 (AN OCTAVE LOWER)
	apitch	=	(apitch1+apitch2)*0.75				;MIX THE TWO SINE TONES

	;NOISE COMPONENT
	aenv2	expon	1,p3,0.0005					;AMPLITUDE ENVELOPE
	anoise	noise	0.75,0						;CREATE SOME NOISE
	anoise	butbp	anoise,10000*octave(gktune2),10000		;BANDPASS FILTER THE NOISE SIGNAL
	anoise	buthp	anoise,1000					;HIGHPASS FILTER THE NOISE SIGNAL
	kcf	expseg	5000,0.1,3000,p3-0.2,3000			;CUTOFF FREQUENCY FOR A LOWPASS FILTER
	anoise	butlp	anoise,kcf					;LOWPASS FILTER THE NOISE SIGNAL
	amix	=	((apitch*aenv1)+(anoise*aenv2))*gklevel2*p4*gklevel	;MIX AUDIO SIGNALS AND SCALE ACCORDING TO GUI 'Level' CONTROL
	aL,aR	pan2	amix,i(gkpan2)					;PAN THE MONOPHONIC AUDIO SIGNAL
		outs	aL,aR						;SEND AUDIO TO OUTPUTS
endin

instr	103	;OPEN HIGH HAT
	xtratim	0.1
	kFrq1	=	296*octave(gktune3) 	;FREQUENCIES OF THE 6 OSCILLATORS
	kFrq2	=	285*octave(gktune3) 	
	kFrq3	=	365*octave(gktune3) 	
	kFrq4	=	348*octave(gktune3) 	
	kFrq5	=	420*octave(gktune3) 	
	kFrq6	=	835*octave(gktune3) 	
	p3	=	0.5*i(gkdur3)		;DURATION OF THE NOTE
	
	;SOUND CONSISTS OF 6 PULSE OSCILLATORS MIXED WITH A NOISE COMPONENT
	;PITCHED ELEMENT
	aenv	linseg	1,p3-0.05,0.1,0.05,0		;AMPLITUDE ENVELOPE FOR THE PULSE OSCILLATORS
	ipw	=	0.25				;PULSE WIDTH
	a1	vco2	0.5,kFrq1,2,ipw			;PULSE OSCILLATORS...
	a2	vco2	0.5,kFrq2,2,ipw
	a3	vco2	0.5,kFrq3,2,ipw
	a4	vco2	0.5,kFrq4,2,ipw
	a5	vco2	0.5,kFrq5,2,ipw
	a6	vco2	0.5,kFrq6,2,ipw
	amix	sum	a1,a2,a3,a4,a5,a6		;MIX THE PULSE OSCILLATORS
	amix	reson	amix,5000*octave(gktune3),5000,1	;BANDPASS FILTER THE MIXTURE
	amix	buthp	amix,5000			;HIGHPASS FILTER THE SOUND...
	amix	buthp	amix,5000			;...AND AGAIN
	amix	=	amix*aenv			;APPLY THE AMPLITUDE ENVELOPE
	
	;NOISE ELEMENT
	anoise	noise	0.8,0				;GENERATE SOME WHITE NOISE
	aenv	linseg	1,p3-0.05,0.1,0.05,0		;CREATE AN AMPLITUDE ENVELOPE
	kcf	expseg	20000,0.7,9000,p3-0.1,9000	;CREATE A CUTOFF FREQ. ENVELOPE
	anoise	butlp	anoise,kcf			;LOWPASS FILTER THE NOISE SIGNAL
	anoise	buthp	anoise,8000			;HIGHPASS FILTER THE NOISE SIGNAL
	anoise	=	anoise*aenv			;APPLY THE AMPLITUDE ENVELOPE
	
	;MIX PULSE OSCILLATOR AND NOISE COMPONENTS
	amix	=	(amix+anoise)*gklevel3*p4*0.55*gklevel
	aL,aR	pan2	amix,gkpan3			;PAN MONOPHONIC SIGNAL
		outs	aL,aR				;SEND TO OUTPUTS
	;kactive	active	p1+1				;CHECK NUMBER OF ACTIVE INSTANCES OF CLOSED HIGH HAT INSTRUMENT
	;if kactive>0 then			;IF HIGH-HAT CLOSED IS ACTIVE...
	; turnoff				;TURN OFF THIS INSTRUMENT
	;endif
	krelease	release			;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act3"       	;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
endin

instr	104	;CLOSED HIGH HAT
	xtratim	0.1
	krelease	release			;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act4"       	;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	kFrq1	=	296*octave(gktune4) 	;FREQUENCIES OF THE 6 OSCILLATORS
	kFrq2	=	285*octave(gktune4) 	
	kFrq3	=	365*octave(gktune4) 	
	kFrq4	=	348*octave(gktune4) 	
	kFrq5	=	420*octave(gktune4) 	
	kFrq6	=	835*octave(gktune4) 	
	idur	=	0.088*i(gkdur4)		;DURATION OF THE NOTE
	p3	limit	idur,0.1,10		;LIMIT THE MINIMUM DURATION OF THE NOTE (VERY SHORT NOTES CAN RESULT IN THE INDICATOR LIGHT ON-OFF NOTE BEING TO0 SHORT)

	iactive	active	p1-1			;SENSE ACTIVITY OF PREVIOUS INSTRUMENT (OPEN HIGH HAT) 
	if iactive>0 then			;IF 'OPEN HIGH HAT' IS ACTIVE...
	 turnoff2	p1-1,0,0		;TURN IT OFF (CLOSED HIGH HAT TAKES PRESIDENCE)
	 chnset	gkoff,"Act3"       	;TURN OFF ACTIVE LIGHT FOR OPEN HIGH HAT
	endif

	;PITCHED ELEMENT
	aenv	expsega	1,idur,0.001,1,0.001		;AMPLITUDE ENVELOPE FOR THE PULSE OSCILLATORS
	ipw	=	0.25				;PULSE WIDTH
	a1	vco2	0.5,kFrq1,2,ipw			;PULSE OSCILLATORS...			
	a2	vco2	0.5,kFrq2,2,ipw
	a3	vco2	0.5,kFrq3,2,ipw
	a4	vco2	0.5,kFrq4,2,ipw
	a5	vco2	0.5,kFrq5,2,ipw
	a6	vco2	0.5,kFrq6,2,ipw
	amix	sum	a1,a2,a3,a4,a5,a6		;MIX THE PULSE OSCILLATORS
	amix	reson	amix,5000*octave(gktune4),5000,1	;BANDPASS FILTER THE MIXTURE
	amix	buthp	amix,5000			;HIGHPASS FILTER THE SOUND...
	amix	buthp	amix,5000			;...AND AGAIN
	amix	=	amix*aenv			;APPLY THE AMPLITUDE ENVELOPE
	
	;NOISE ELEMENT
	anoise	noise	0.8,0				;GENERATE SOME WHITE NOISE
	aenv	expsega	1,idur,0.001,1,0.001		;CREATE AN AMPLITUDE ENVELOPE
	kcf	expseg	20000,0.7,9000,idur-0.1,9000	;CREATE A CUTOFF FREQ. ENVELOPE
	anoise	butlp	anoise,kcf			;LOWPASS FILTER THE NOISE SIGNAL
	anoise	buthp	anoise,8000			;HIGHPASS FILTER THE NOISE SIGNAL
	anoise	=	anoise*aenv			;APPLY THE AMPLITUDE ENVELOPE
	
	;MIX PULSE OSCILLATOR AND NOISE COMPONENTS
	amix	=	(amix+anoise)*gklevel4*p4*0.55*gklevel
	aL,aR	pan2	amix,gkpan4			;PAN MONOPHONIC SIGNAL
		outs	aL,aR				;SEND TO OUTPUTS
endin

instr	105	;HIGH TOM
	xtratim	0.1
	krelease	release					;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act5"       			;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	ifrq     	=	200 * octave(i(gktune5))	;FREQUENCY
	p3	  	=	0.5 * i(gkdur5)			;DURATION OF THIS NOTE

	;SINE TONE SIGNAL
	aAmpEnv	transeg	1,p3,-10,0.001				;AMPLITUDE ENVELOPE FOR SINE TONE SIGNAL
	afmod	expsega	5,0.125/ifrq,1,1,1			;FREQUENCY MODULATION ENVELOPE. GIVES THE TONE MORE OF AN ATTACK.
	asig	oscili	-aAmpEnv*0.6,ifrq*afmod,gisine		;SINE TONE SIGNAL

	;NOISE SIGNAL
	aEnvNse	transeg	1,p3,-6,0.001				;AMPLITUDE ENVELOPE FOR NOISE SIGNAL
	anoise	dust2	0.4, 8000				;GENERATE NOISE SIGNAL
	anoise	reson	anoise,400*octave(i(gktune5)),800,1	;BANDPASS FILTER THE NOISE SIGNAL
	anoise	buthp	anoise,100*octave(i(gktune5))		;HIGHPASS FILTER THE NOSIE SIGNAL
	anoise	butlp	anoise,1000*octave(i(gktune5))		;LOWPASS FILTER THE NOISE SIGNAL
	anoise	=	anoise * aEnvNse			;SCALE NOISE SIGNAL WITH AMPLITUDE ENVELOPE
	
	;MIX THE TWO SOUND COMPONENTS
	amix	=	(asig + anoise)*gklevel5*p4*gklevel
	aL,aR	pan2	amix,gkpan5				;PAN MONOPHONIC SIGNAL
		outs	aL,aR					;SEND AUDIO TO OUTPUTS
endin

instr	106	;MID TOM
	xtratim	0.1
	krelease	release					;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act6"               		;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	ifrq     	=	133*octave(i(gktune6)) 		;FREQUENCY
	p3	  	=	0.6 * i(gkdur6)			;DURATION OF THIS NOTE

	;SINE TONE SIGNAL
	aAmpEnv	transeg	1,p3,-10,0.001				;AMPLITUDE ENVELOPE FOR SINE TONE SIGNAL
	afmod	expsega	5,0.125/ifrq,1,1,1			;FREQUENCY MODULATION ENVELOPE. GIVES THE TONE MORE OF AN ATTACK.
	asig	oscili	-aAmpEnv*0.6,ifrq*afmod,gisine		;SINE TONE SIGNAL

	;NOISE SIGNAL
	aEnvNse	transeg	1,p3,-6,0.001				;AMPLITUDE ENVELOPE FOR NOISE SIGNAL
	anoise	dust2	0.4, 8000				;GENERATE NOISE SIGNAL
	anoise	reson	anoise, 400*octave(i(gktune6)),800,1	;BANDPASS FILTER THE NOISE SIGNAL
	anoise	buthp	anoise,100*octave(i(gktune6))		;HIGHPASS FILTER THE NOSIE SIGNAL
	anoise	butlp	anoise,600*octave(i(gktune6))		;LOWPASS FILTER THE NOISE SIGNAL
	anoise	=	anoise * aEnvNse			;SCALE NOISE SIGNAL WITH AMPLITUDE ENVELOPE
	
	;MIX THE TWO SOUND COMPONENTS
	amix	=	(asig + anoise)*gklevel6*p4*gklevel
	aL,aR	pan2	amix,i(gkpan6)				;PAN MONOPHONIC SIGNAL
		outs	aL,aR					;SEND AUDIO TO OUTPUTS
endin

instr	107	;LOW TOM
	xtratim	0.1
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act7"               	;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	ifrq     	=	90 * octave(i(gktune7))	;FREQUENCY
	p3 	 	=	0.7*i(gkdur7) 		;DURATION OF THIS NOTE

	;SINE TONE SIGNAL
	aAmpEnv	transeg	1,p3,-10,0.001				;AMPLITUDE ENVELOPE FOR SINE TONE SIGNAL
	afmod	expsega	5,0.125/ifrq,1,1,1			;FREQUENCY MODULATION ENVELOPE. GIVES THE TONE MORE OF AN ATTACK.
	asig	oscili	-aAmpEnv*0.6,ifrq*afmod,gisine		;SINE TONE SIGNAL

	;NOISE SIGNAL
	aEnvNse	transeg	1,p3,-6,0.001				;AMPLITUDE ENVELOPE FOR NOISE SIGNAL
	anoise	dust2	0.4, 8000				;GENERATE NOISE SIGNAL
	anoise	reson	anoise,40*octave(gktune7),800,1		;BANDPASS FILTER THE NOISE SIGNAL
	anoise	buthp	anoise,100*octave(i(gktune7))		;HIGHPASS FILTER THE NOSIE SIGNAL
	anoise	butlp	anoise,600*octave(i(gktune7))		;LOWPASS FILTER THE NOISE SIGNAL
	anoise	=	anoise * aEnvNse			;SCALE NOISE SIGNAL WITH AMPLITUDE ENVELOPE
	
	;MIX THE TWO SOUND COMPONENTS
	amix	=	(asig + anoise)*gklevel7*p4*gklevel
	aL,aR	pan2	amix,i(gkpan7)				;PAN MONOPHONIC SIGNAL
		outs	aL,aR					;SEND AUDIO TO OUTPUTS
endin

instr	108	;CYMBAL
	xtratim	0.1
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act8"                       ;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	kFrq1	=	296*octave(gktune8) 	;FREQUENCIES OF THE 6 OSCILLATORS
	kFrq2	=	285*octave(gktune8)
	kFrq3	=	365*octave(gktune8)
	kFrq4	=	348*octave(gktune8)     
	kFrq5	=	420*octave(gktune8)
	kFrq6	=	835*octave(gktune8)
	p3	=	2*i(gkdur8)		;DURATION OF THE NOTE

	;SOUND CONSISTS OF 6 PULSE OSCILLATORS MIXED WITH A NOISE COMPONENT
	;PITCHED ELEMENT
	aenv	expon	1,p3,0.0001		;AMPLITUDE ENVELOPE FOR THE PULSE OSCILLATORS 
	ipw	=	0.25			;PULSE WIDTH      
	a1	vco2	0.5,kFrq1,2,ipw		;PULSE OSCILLATORS...  
	a2	vco2	0.5,kFrq2,2,ipw
	a3	vco2	0.5,kFrq3,2,ipw
	a4	vco2	0.5,kFrq4,2,ipw
	a5	vco2	0.5,kFrq5,2,ipw                                                                   
	a6	vco2	0.5,kFrq6,2,ipw
	amix	sum	a1,a2,a3,a4,a5,a6		;MIX THE PULSE OSCILLATORS
	amix	reson	amix,5000 *octave(gktune8),5000,1	;BANDPASS FILTER THE MIXTURE
	amix	buthp	amix,10000			;HIGHPASS FILTER THE SOUND
	amix	butlp	amix,12000			;LOWPASS FILTER THE SOUND...
	amix	butlp	amix,12000			;AND AGAIN...
	amix	=	amix*aenv			;APPLY THE AMPLITUDE ENVELOPE
	
	;NOISE ELEMENT
	anoise	noise	0.8,0				;GENERATE SOME WHITE NOISE
	aenv	expsega	1,0.3,0.07,p3-0.1,0.00001	;CREATE AN AMPLITUDE ENVELOPE
	kcf	expseg	14000,0.7,7000,p3-0.1,5000	;CREATE A CUTOFF FREQ. ENVELOPE
	anoise	butlp	anoise,kcf			;LOWPASS FILTER THE NOISE SIGNAL
	anoise	buthp	anoise,8000			;HIGHPASS FILTER THE NOISE SIGNAL
	anoise	=	anoise*aenv			;APPLY THE AMPLITUDE ENVELOPE            

	;MIX PULSE OSCILLATOR AND NOISE COMPONENTS
	amix	=	(amix+anoise)*gklevel8*p4*0.85*gklevel
	aL,aR	pan2	amix,i(gkpan8)			;PAN MONOPHONIC SIGNAL
		outs	aL,aR				;SEND TO OUTPUTS
endin

instr	109	;RIM SHOT
	xtratim	0.1
	iTR808RimShot	ftgenonce	0,0,1024,10,	0.971,0.269,0.041,0.054,0.011,0.013,0.08,0.0065,0.005,0.004,0.003,0.003,0.002,0.002,0.002,0.002,0.002,0.001,0.001,0.001,0.001,0.001,0.002,0.001,0.001	;WAVEFORM FOR TR808 RIMSHOT
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act9"                       ;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	idur 	=	0.027*i(gkdur9) 		;NOTE DURATION
	p3	limit	idur,0.1,10			;LIMIT THE MINIMUM DURATION OF THE NOTE (VERY SHORT NOTES CAN RESULT IN THE INDICATOR LIGHT ON-OFF NOTE BEING TO0 SHORT)

	;RING
	aenv1	expsega	1,idur,0.001,1,0.001		;AMPLITUDE ENVELOPE FOR SUSTAIN ELEMENT OF SOUND
	ifrq1	=	1700*octave(i(gktune9))		;FREQUENCY OF SUSTAIN ELEMENT OF SOUND
	aring	oscili	1,ifrq1,iTR808RimShot,0		;CREATE SUSTAIN ELEMENT OF SOUND	
	aring	butbp	aring,ifrq1,ifrq1*8	
	aring	=	aring*(aenv1-0.001)*0.5			;APPLY AMPLITUDE ENVELOPE

	;NOISE
	anoise	noise	1,0					;CREATE A NOISE SIGNAL
	aenv2	expsega	1, 0.002, 0.8, 0.005, 0.5, idur-0.002-0.005, 0.0001, 1, 0.0001	;CREATE AMPLITUDE ENVELOPE
	anoise	buthp	anoise,800			;HIGHPASS FILTER THE NOISE SOUND
	kcf	expseg	4000,p3,20				;CUTOFF FREQUENCY FUNCTION FOR LOWPASS FILTER
	anoise	butlp	anoise,kcf			;LOWPASS FILTER THE SOUND
	anoise	=	anoise*(aenv2-0.001)	;APPLY ENVELOPE TO NOISE SIGNAL

	;MIX
	amix	=	(aring+anoise)*gklevel9*p4*0.8*gklevel
	aL,aR	pan2	amix,gkpan9			;PAN MONOPHONIC SIGNAL  
		outs	aL,aR				;SEND TO OUTPUTS
endin

instr	110	;CLAVES
	xtratim	0.1
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act10"                      ;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	ifrq	=	2500*octave(i(gktune10))	;FREQUENCY OF OSCILLATOR
	idur	=	0.045 	* i(gkdur10)		;DURATION OF THE NOTE
	p3	limit	idur,0.1,10			;LIMIT THE MINIMUM DURATION OF THE NOTE (VERY SHORT NOTES CAN RESULT IN THE INDICATOR LIGHT ON-OFF NOTE BEING TO0 SHORT)			
	aenv	expsega	1,idur,0.001,1,0.001		;AMPLITUDE ENVELOPE
	afmod	expsega	3,0.00005,1,1,1			;FREQUENCY MODULATION ENVELOPE. GIVES THE SOUND A LITTLE MORE ATTACK.
	asig	oscili	-(aenv-0.001),ifrq*afmod,gisine,0	;AUDIO OSCILLATOR
	asig	=	asig*0.4*gklevel10*p4*gklevel		;RESCALE AMPLITUDE
	aL,aR	pan2	asig,gkpan10			;PAN MONOPHONIC AUDIO SIGNAL
		outs	aL,aR				;SEND AUDIO TO OUTPUTS
endin

instr	111	;COWBELL
	xtratim	0.1
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act11"              	;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	ifrq1	=	562 * octave(i(gktune11))	;FREQUENCIES OF THE TWO OSCILLATORS
	ifrq2	=	845 * octave(i(gktune11))	;
	ipw  	=	0.5 				;PULSE WIDTH OF THE OSCILLATOR	
	idur 	=	0.7 				;NOTE DURATION
	ishp 	=	-30 	
	idur 	=	0.7 				;NOTE DURATION
	p3	=	idur*i(gkdur11)			;LIMIT THE MINIMUM DURATION OF THE NOTE (VERY SHORT NOTES CAN RESULT IN THE INDICATOR LIGHT ON-OFF NOTE BEING TO0 SHORT)
	ishape	=	-30				;SHAPE OF THE CURVES IN THE AMPLITUDE ENVELOPE
	kenv1	transeg	1,p3*0.3,ishape,0.2, p3*0.7,ishape,0.2	;FIRST AMPLITUDE ENVELOPE - PRINCIPALLY THE ATTACK OF THE NOTE
	kenv2	expon	1,p3,0.0005				;SECOND AMPLITUDE ENVELOPE - THE SUSTAIN PORTION OF THE NOTE
	kenv	=	kenv1*kenv2			;COMBINE THE TWO ENVELOPES
	itype	=	2				;WAVEFORM FOR VCO2 (2=PULSE)
	a1	vco2	0.65,ifrq1,itype,ipw		;CREATE THE TWO OSCILLATORS
	a2	vco2	0.65,ifrq2,itype,ipw
	amix	=	a1+a2				;MIX THE TWO OSCILLATORS 
	iLPF2	=	10000				;LOWPASS FILTER RESTING FREQUENCY
	kcf	expseg	12000,0.07,iLPF2,1,iLPF2	;LOWPASS FILTER CUTOFF FREQUENCY ENVELOPE
	alpf	butlp	amix,kcf			;LOWPASS FILTER THE MIX OF THE TWO OSCILLATORS (CREATE A NEW SIGNAL)
	abpf	reson	amix, ifrq2, 25			;BANDPASS FILTER THE MIX OF THE TWO OSCILLATORS (CREATE A NEW SIGNAL)
	amix	dcblock2	(abpf*0.06*kenv1)+(alpf*0.5)+(amix*0.9)	;MIX ALL SIGNALS AND BLOCK DC OFFSET
	amix	buthp	amix,700			;HIGHPASS FILTER THE MIX OF ALL SIGNALS
	amix	=	amix*0.07*kenv*p4*gklevel11*gklevel	;RESCALE AMPLITUDE
	aL,aR	pan2	amix,i(gkpan11)			;PAN THE MONOPHONIC AUDIO SIGNAL
		outs	aL,aR				;SEND AUDIO TO OUTPUTS
endin

instr	112	;CLAP
	;;xtratim	0.1
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act12"              	;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	iTimGap	=	0.01				;GAP BETWEEN EVENTS DURING ATTACK PORTION OF CLAP
	idur1  	=	0.02				;DURING OF THE THREE INITIAL 'CLAPS'
	idur2  	=	2*i(gkdur12)			;DURATION OF THE FOURTH, MAIN, CLAP
	idens  	=	8000				;DENSITY OF THE NOISE SIGNAL USED TO FORM THE CLAPS
	iamp1  	=	0.5				;AMPLITUDE OF AUDIO BEFORE BANDPASS FILTER IN OUTPUT
	iamp2  	=	1				;AMPLITUDE OF AUDIO AFTER BANDPASS FILTER IN OUTPUT
	if frac(p1)==0 then				;IF THIS IS THE INITIAL NOTE (p1 WILL BE AN INTEGER)
	 ;	        del.  dur  env.shape
	 event_i	"i", p1+0.1, 0,          idur1, p4	;CALL THIS INSTRUMENT 4 TIMES. ADD A FRACTION ONTO p1 TO BE ABLE TO DIFFERENTIATE THESE SUBSEQUENT NOTES
	 event_i	"i", p1+0.1, iTimGap,    idur1, p4
	 event_i	"i", p1+0.1, iTimGap*2,  idur1, p4
	 event_i	"i", p1+0.1, iTimGap*3,  idur2, p4
	else
	 kenv	transeg	1,p3,-25,0				;AMPLITUDE ENVELOPE
	 iamp	random	0.7,1					;SLIGHT RANDOMISATION OF AMPLITUDE	
	 anoise	dust2	kenv*iamp, idens			;CREATE NOISE SIGNAL
	
	 iBPF   	=	1100*octave(i(gktune12))	;FREQUENCY OF THE BANDPASS FILTER
	 ibw    	=	2000*octave(i(gktune12))	;BANDWIDTH OF THE BANDPASS FILTER
	 iHPF   	=	1000				;FREQUENCY OF A HIGHPASS FILTER
	 iLPF   	=	1				;SCALER FOR FREQUENCY OF A LOWPASS FILTER
	 kcf	expseg	8000,0.07,1700,1,800,2,500,1,500	;CREATE CUTOFF FREQUENCY ENVELOPE
	 asig	butlp	anoise,kcf*iLPF				;LOWPASS FILTER THE SOUND
	 asig	buthp	asig,iHPF				;HIGHPASS FILTER THE SOUND
	 ares	reson	asig,iBPF,ibw,1				;BANDPASS FILTER THE SOUND (CREATE A NEW SIGNAL)
	 asig	dcblock2	(asig*iamp1)+(ares*iamp2)	;MIX BANDPASS FILTERED AND NON-BANDPASS FILTERED SOUND ELEMENTS
	 asig	=	asig*p4*i(gklevel12)*1.75*gklevel	;SCALE AMPLITUDE
	 aL,aR	pan2	asig,i(gkpan12)				;PAN MONOPHONIC SIGNAL
		outs	aL,aR					;SEND AUDIO TO OUTPUTS
	endif
endin

instr	113	;MARACA
	xtratim	0.1
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act13"                      ;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	idur	=	0.07*i(gkdur13)				;DURATION 3
	p3	limit	idur,0.1,10				;LIMIT THE MINIMUM DURATION OF THE NOTE (VERY SHORT NOTES CAN RESULT IN THE INDICATOR LIGHT ON-OFF NOTE BEING TO0 SHORT)
	iHPF 	limit	6000*octave(i(gktune13)),20,sr/2	;HIGHPASS FILTER FREQUENCY	
	iLPF 	limit	12000*octave(i(gktune13)),20,sr/3	;LOWPASS FILTER FREQUENCY. (LIMIT MAXIMUM TO PREVENT OUT OF RANGE VALUES)
	;AMPLITUDE ENVELOPE
	iBP1 	=	0.4					;BREAK-POINT 1
	iDur1	=	0.014*i(gkdur13) 			;DURATION 1
	iBP2 	=	1					;BREAKPOINT 2
	iDur2	=	0.01 *i(gkdur13)			;DURATION 2
	iBP3 	=	0.05 					;BREAKPOINT 3
	p3	limit	idur,0.1,10				;LIMIT THE MINIMUM DURATION OF THE NOTE (VERY SHORT NOTES CAN RESULT IN THE INDICATOR LIGHT ON-OFF NOTE BEING TO0 SHORT)
	aenv	expsega	iBP1,iDur1,iBP2,iDur2,iBP3		;CREATE AMPLITUDE ENVELOPE
	anoise	noise	0.75,0					;CREATE A NOISE SIGNAL
	anoise	buthp	anoise,iHPF				;HIGHPASS FILTER THE SOUND
	anoise	butlp	anoise,iLPF				;LOWPASS FILTER THE SOUND
	anoise	=	anoise*aenv*p4*gklevel13*gklevel	;SCALE THE AMPLITUDE
	aL,aR	pan2	anoise,i(gkpan13)			;PAN THE MONOPONIC SIGNAL
		outs	aL,aR					;SEND AUDIO TO OUTPUTS
endin

instr	114	;HIGH CONGA
	xtratim	0.1
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act14"                      ;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	ifrq  	=	420*octave(i(gktune14))		;FREQUENCY OF NOTE
	p3  	=	0.22*i(gkdur14)			;DURATION OF NOTE
	aenv	transeg	0.7,1/ifrq,1,1,p3,-6,0.001	;AMPLITUDE ENVELOPE
	afrq	expsega	ifrq*3,0.25/ifrq,ifrq,1,ifrq	;FREQUENCY ENVELOPE (CREATE A SHARPER ATTACK)
	asig	oscili	-aenv*0.25,afrq,gisine		;CREATE THE AUDIO OSCILLATOR
	asig	=	asig*p4*gklevel14*gklevel	;SCALE THE AMPLITUDE
	aL,aR	pan2	asig,gkpan14			;PAN THE MONOPHONIC AUDIO SIGNAL
		outs	aL,aR				;SEND AUDIO TO THE OUTPUTS
endin

instr	115	;MID CONGA
	xtratim	0.1
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act15"                      ;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	ifrq   	=	310*octave(i(gktune15))		;FREQUENCY OF NOTE
	p3   	=	0.33*i(gkdur15)			;DURATION OF NOTE
	aenv	transeg	0.7,1/ifrq,1,1,p3,-6,0.001	;AMPLITUDE ENVELOPE	
	afrq	expsega	ifrq*3,0.25/ifrq,ifrq,1,ifrq	;FREQUENCY ENVELOPE (CREATE A SHARPER ATTACK)
	asig	oscili	-aenv*0.25,afrq,gisine		;CREATE THE AUDIO OSCILLATOR
	asig	=	asig*p4*gklevel15*gklevel		;SCALE THE AMPLITUDE
	aL,aR	pan2	asig,gkpan15			;PAN THE MONOPHONIC AUDIO SIGNAL
		outs	aL,aR				;SEND AUDIO TO THE OUTPUTS
endin

instr	116	;LOW CONGA
	xtratim	0.1
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act16"                      ;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	ifrq   	=	227*octave(i(gktune16))		;FREQUENCY OF NOTE
	p3   	=	0.41*i(gkdur16)			;DURATION OF NOTE 	
	aenv	transeg	0.7,1/ifrq,1,1,p3,-6,0.001	;AMPLITUDE ENVELOPE	
	afrq	expsega	ifrq*3,0.25/ifrq,ifrq,1,ifrq	;FREQUENCY ENVELOPE (CREATE A SHARPER ATTACK)
	asig	oscili	-aenv*0.25,afrq,gisine		;CREATE THE AUDIO OSCILLATOR
	asig	=	asig*p4*gklevel16*gklevel	;SCALE THE AMPLITUDE
	aL,aR	pan2	asig,gkpan16			;PAN THE MONOPHONIC AUDIO SIGNAL
		outs	aL,aR				;SEND AUDIO TO THE OUTPUTS
endin

</CsInstruments>

<CsScore>
f 0 [3600*24*7]
i 1 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer> ; TR-808.csd
; Written by Iain McCurdy, 2012
; 
; Saving patterns saves tables as text file to the pwd. Each save to a new pattern number creates a new text file on disk for that pattern.

; Choosing 'Host Control' allows the VST plugin host to decide 'Tempo' and 'Run/Stop' status

<Cabbage>
form caption("TR-808") size(800, 400), colour("SlateGrey"), pluginid("808B"), guirefresh(32) style("legacy")

label 		bounds(  5,385,120, 12), text("Iain McCurdy |2012|"), fontcolour("black")

groupbox bounds( 0,  0,  50, 225), text("B.Drum"),FontColour("black"), colour(192,192,192)
checkbox bounds(10, 24,   5,   5), colour("yellow"), channel("Act1"),  value(0), shape("ellipse"), active(0)
rslider  bounds( 5, 25,  45,  45), text("Level"), textcolour("black"), colour(80,100,150), channel("level1"), range(0, 2, 1,1,0.01)
rslider  bounds( 5, 75,  45,  45), text("Tune"),  textcolour("black"), colour(80,100,150), channel("tune1"),  range(-2, 2, 0,1,0.01)
rslider  bounds( 5,125,  45,  45), text("Decay"), textcolour("black"), colour(80,100,150), channel("dur1"),   range(0.25, 2, 1, 0.8)
rslider  bounds( 5,175,  45,  45), text("Pan"),   textcolour("black"), colour(80,100,150), channel("pan1"),   range(0, 1, 0.5,1,0.01)

groupbox bounds(50,  0,  50, 225), text("Snare"), FontColour("black"),colour(202,202,202)
checkbox bounds(60, 24,   5,   5), colour("yellow"), channel("Act2"),  value(0), shape("ellipse"), active(0)
rslider  bounds(55, 25,  45,  45), text("Level"), textcolour("black"), colour(80,100,150), channel("level2"), range(0, 2, 1,1,0.01)
rslider  bounds(55, 75,  45,  45), text("Tune"),  textcolour("black"), colour(80,100,150), channel("tune2"),  range(-2, 2, 0,1,0.01)
rslider  bounds(55,125,  45,  45), text("Decay"), textcolour("black"), colour(80,100,150), channel("dur2"),   range(0.25, 2, 1, 0.8)
rslider  bounds(55,175,  45,  45), text("Pan"),   textcolour("black"), colour(80,100,150), channel("pan2"),   range(0, 1, 0.5,1,0.01)

groupbox bounds(100,  0,  50, 225), text("Open HH"), FontColour("black"), colour(212,212,212)
checkbox bounds(110, 24,   5,   5), colour("yellow"), channel("Act3"),  value(0), shape("ellipse"), active(0)
rslider  bounds(105, 25,  45,  45), text("Level"),  textcolour("black"), colour(80,100,150), channel("level3"), range(0, 2, 1,1,0.01)
rslider  bounds(105, 75,  45,  45), text("Tune"),   textcolour("black"), colour(80,100,150), channel("tune3"),  range(-2, 2, 0,1,0.01)
rslider  bounds(105,125,  45,  45), text("Decay"),  textcolour("black"), colour(80,100,150), channel("dur3"),   range(0.25, 2, 1, 0.8)
rslider  bounds(105,175,  45,  45), text("Pan"),    textcolour("black"), colour(80,100,150), channel("pan3"),  range(0, 1, 0.5,1,0.01)
<<<<<<< HEAD
                                
=======

>>>>>>> audio_graph
groupbox bounds(150,  0,  50, 225), text("Cl. HH"),FontColour("black"),colour(222,222,222)
checkbox bounds(160, 24,   5,   5), colour("yellow"), channel("Act4"),  value(0), shape("ellipse"), active(0)
rslider  bounds(155, 25,  45,  45), text("Level"),  textcolour("black"), colour(80,100,150), channel("level4"), range(0, 2, 1,1,0.01)
rslider  bounds(155, 75,  45,  45), text("Tune"),   textcolour("black"), colour(80,100,150), channel("tune4"),  range(-2, 2, 0,1,0.01)
rslider  bounds(155,125,  45,  45), text("Decay"),  textcolour("black"), colour(80,100,150), channel("dur4"),   range(0.25, 2, 1, 0.8)
rslider  bounds(155,175,  45,  45), text("Pan"),    textcolour("black"), colour(80,100,150), channel("pan4"),  range(0, 1, 0.5,1,0.01)

groupbox bounds(200,  0,  50, 225), text("Hi Tom"), FontColour("black"),colour(232,232,232)
checkbox bounds(210, 24,   5,   5), colour("yellow"), channel("Act5"),  value(0), shape("ellipse"), active(0)
rslider  bounds(205, 25,  45,  45), text("Level"),  textcolour("black"), colour(80,100,150), channel("level5"), range(0, 2, 1,1,0.01)
rslider  bounds(205, 75,  45,  45), text("Tune"),   textcolour("black"), colour(80,100,150), channel("tune5"), range(-2, 2, 0,1,0.01)
rslider  bounds(205,125,  45,  45), text("Decay"),  textcolour("black"), colour(80,100,150), channel("dur5"),   range(0.25, 2, 1, 0.8)
rslider  bounds(205,175,  45,  45), text("Pan"),    textcolour("black"), colour(80,100,150), channel("pan5"),  range(0, 1, 0.5,1,0.01)

groupbox bounds(250,  0,  50, 225), text("Mid Tom"),FontColour("black"), colour(242,242,242)
checkbox bounds(260, 24,   5,   5), colour("yellow"), channel("Act6"),  value(0), shape("ellipse"), active(0)
rslider  bounds(255, 25,  45,  45), text("Level"),  textcolour("black"), colour(80,100,150), channel("level6"), range(0, 2, 1,1,0.01)
rslider  bounds(255, 75,  45,  45), text("Tune"),   textcolour("black"), colour(80,100,150), channel("tune6"), range(-2, 2, 0,1,0.01)
rslider  bounds(255,125,  45,  45), text("Decay"),  textcolour("black"), colour(80,100,150), channel("dur6"), range(0.25, 2, 1, 0.8)
rslider  bounds(255,175,  45,  45), text("Pan"),    textcolour("black"), colour(80,100,150), channel("pan6"),  range(0, 1, 0.5,1,0.01)

groupbox bounds(300,  0,  50, 225), text("Low Tom"),FontColour("black"), colour(232,232,232)
checkbox bounds(310, 24,   5,   5), colour("yellow"), channel("Act7"),  value(0), shape("ellipse"), active(0)
rslider  bounds(305, 25,  45,  45), text("Level"),  textcolour("black"), colour(80,100,150), channel("level7"), range(0, 2, 1,1,0.01)
rslider  bounds(305, 75,  45,  45), text("Tune"),   textcolour("black"), colour(80,100,150), channel("tune7"), range(-2, 2, 0,1,0.01)
rslider  bounds(305,125,  45,  45), text("Decay"),  textcolour("black"), colour(80,100,150), channel("dur7"), range(0.25, 2, 1, 0.8)
rslider  bounds(305,175,  45,  45), text("Pan"),    textcolour("black"), colour(80,100,150), channel("pan7"),  range(0, 1, 0.5,1,0.01)

groupbox bounds(350,  0,  50, 225), text("Cymbal"), FontColour("black"),colour(222,222,222)
checkbox bounds(360, 24,   5,   5), colour("yellow"), channel("Act8"),  value(0), shape("ellipse"), active(0)
rslider  bounds(355, 25,  45,  45), text("Level"),  textcolour("black"), colour(80,100,150), channel("level8"), range(0, 2, 1,1,0.01)
rslider  bounds(355, 75,  45,  45), text("Tune"),   textcolour("black"), colour(80,100,150), channel("tune8"),  range(-2, 2, 0,1,0.01)
rslider  bounds(355,125,  45,  45), text("Decay"),  textcolour("black"), colour(80,100,150), channel("dur8"),  range(0.25, 2, 1, 0.8)
rslider  bounds(355,175,  45,  45), text("Pan"),    textcolour("black"), colour(80,100,150), channel("pan8"),  range(0, 1, 0.5,1,0.01)

groupbox bounds(400,  0,  50, 225), text("Rim Shot"),FontColour("black"), colour(212,212,212)
checkbox bounds(410, 24,   5,   5), colour("yellow"), channel("Act9"),  value(0), shape("ellipse"), active(0)
rslider  bounds(405, 25,  45,  45), text("Level"),   textcolour("black"), colour(80,100,150), channel("level9"), range(0, 2, 1,1,0.01)
rslider  bounds(405, 75,  45,  45), text("Tune"),    textcolour("black"), colour(80,100,150), channel("tune9"),  range(-2, 2, 0,1,0.01)
rslider  bounds(405,125,  45,  45), text("Decay"),   textcolour("black"), colour(80,100,150), channel("dur9"),  range(0.25, 2, 1, 0.8)
rslider  bounds(405,175,  45,  45), text("Pan"),     textcolour("black"), colour(80,100,150), channel("pan9"),  range(0, 1, 0.5,1,0.01)

groupbox bounds(450,  0,  50, 225), text("Claves"), FontColour("black"),colour(202,202,202)
checkbox bounds(460, 24,   5,   5), colour("yellow"), channel("Act10"),  value(0), shape("ellipse"), active(0)
rslider  bounds(455, 25,  45,  45), text("Level"),  textcolour("black"), colour(80,100,150), channel("level10"), range(0, 2, 1,1,0.01)
rslider  bounds(455, 75,  45,  45), text("Tune"),   textcolour("black"), colour(80,100,150), channel("tune10"),  range(-2, 2, 0,1,0.01)
rslider  bounds(455,125,  45,  45), text("Decay"),  textcolour("black"), colour(80,100,150), channel("dur10"),  range(0.25, 2, 1, 0.8)
rslider  bounds(455,175,  45,  45), text("Pan"),    textcolour("black"), colour(80,100,150), channel("pan10"), range(0, 1, 0.5,1,0.01)

groupbox bounds(500,  0,  50, 225), text("Cowbell"),FontColour("black"), colour(192,192,192)
checkbox bounds(510, 24,   5,   5), colour("yellow"), channel("Act11"),  value(0), shape("ellipse"), active(0)
rslider  bounds(505, 25,  45,  45), text("Level"),  textcolour("black"), colour(80,100,150), channel("level11"), range(0, 2, 1,1,0.01)
rslider  bounds(505, 75,  45,  45), text("Tune"),   textcolour("black"), colour(80,100,150), channel("tune11"),  range(-2, 2, 0,1,0.01)
rslider  bounds(505,125,  45,  45), text("Decay"),  textcolour("black"), colour(80,100,150), channel("dur11"),  range(0.25, 2, 1, 0.8)
rslider  bounds(505,175,  45,  45), text("Pan"),    textcolour("black"), colour(80,100,150), channel("pan11"), range(0, 1, 0.5,1,0.01)

groupbox bounds(550,  0,  50, 225), text("Clap"), FontColour("black"),colour(182,182,182)
checkbox bounds(560, 24,   5,   5), colour("yellow"), channel("Act12"),  value(0), shape("ellipse"), active(0)
rslider  bounds(555, 25,  45,  45), text("Level"), textcolour("black"), colour(80,100,150), channel("level12"), range(0, 2, 1,1,0.01)
rslider  bounds(555, 75,  45,  45), text("Tune"),  textcolour("black"), colour(80,100,150), channel("tune12"),  range(-2, 2, 0,1,0.01)
rslider  bounds(555,125,  45,  45), text("Decay"), textcolour("black"), colour(80,100,150), channel("dur12"),  range(0.25, 2, 1, 0.8)
rslider  bounds(555,175,  45,  45), text("Pan"),   textcolour("black"), colour(80,100,150), channel("pan12"), range(0, 1, 0.5,1,0.01)

groupbox bounds(600,  0,  50, 225), text("Maraca"),FontColour("black"), colour(172,172,172)
checkbox bounds(610, 24,   5,   5), colour("yellow"), channel("Act13"),  value(0), shape("ellipse"), active(0)
rslider  bounds(605, 25,  45,  45), text("Level"), textcolour("black"), colour(80,100,150), channel("level13"), range(0, 2, 1,1,0.01)
rslider  bounds(605, 75,  45,  45), text("Tune"),  textcolour("black"), colour(80,100,150), channel("tune13"),  range(-2, 2, 0,1,0.01)
rslider  bounds(605,125,  45,  45), text("Decay"), textcolour("black"), colour(80,100,150), channel("dur13"),  range(0.25, 2, 1, 0.8)
rslider  bounds(605,175,  45,  45), text("Pan"),   textcolour("black"), colour(80,100,150), channel("pan13"), range(0, 1, 0.5,1,0.01)

groupbox bounds(650,  0,  50, 225), text("Hi Conga"),FontColour("black"), colour(162,162,162)
checkbox bounds(660, 24,   5,   5), colour("yellow"), channel("Act14"),  value(0), shape("ellipse"), active(0)
rslider  bounds(655, 25,  45,  45), text("Level"),   textcolour("black"), colour(80,100,150), channel("level14"), range(0, 2, 1,1,0.01)
rslider  bounds(655, 75,  45,  45), text("Tune"),    textcolour("black"), colour(80,100,150), channel("tune14"),  range(-2, 2, 0,1,0.01)
rslider  bounds(655,125,  45,  45), text("Decay"),   textcolour("black"), colour(80,100,150), channel("dur14"),   range(0.25, 2, 1, 0.8)
rslider  bounds(655,175,  45,  45), text("Pan"),     textcolour("black"), colour(80,100,150), channel("pan14"), range(0, 1, 0.5,0.01)

groupbox bounds(700,  0,  50, 225), text("Md Cnga"),FontColour("black"), colour(152,152,152)
checkbox bounds(710, 24,   5,   5), colour("yellow"), channel("Act15"),  value(0), shape("ellipse"), active(0)
rslider  bounds(705, 25,  45,  45), text("Level"),  textcolour("black"), colour(80,100,150), channel("level15"), range(0, 2, 1,1,0.01)
rslider  bounds(705, 75,  45,  45), text("Tune"),   textcolour("black"), colour(80,100,150), channel("tune15"),  range(-2, 2, 0,1,0.01)
rslider  bounds(705,125,  45,  45), text("Decay"),  textcolour("black"), colour(80,100,150), channel("dur15"),   range(0.25, 2, 1, 0.8)
rslider  bounds(705,175,  45,  45), text("Pan"),    textcolour("black"), colour(80,100,150), channel("pan15"), range(0, 1, 0.5,1,0.01)

groupbox bounds(750,  0,  50, 225), text("Lo Cnga"),FontColour("black"), colour(142,142,142)
checkbox bounds(760, 24,   5,   5), colour("yellow"), channel("Act16"),  value(0), shape("ellipse"), active(0)
rslider  bounds(755, 25,  45,  45), text("Level"),  textcolour("black"), colour(80,100,150), channel("level16"), range(0, 2, 1,1,0.01)
rslider  bounds(755, 75,  45,  45), text("Tune"),   textcolour("black"), colour(80,100,150), channel("tune16"),  range(-2, 2, 0,1,0.01)
rslider  bounds(755,125,  45,  45), text("Decay"),  textcolour("black"), colour(80,100,150), channel("dur16"),   range(0.25, 2, 1, 0.8)
rslider  bounds(755,175,  45,  45), text("Pan"),    textcolour("black"), colour(80,100,150), channel("pan16"), range(0, 1, 0.5,1,0.01)


keyboard pos(0, 225), size(800, 80)
button   bounds( 10,315, 40, 25), fontcolour:0(50,50,50), fontcolour:1(205,255,205), colour:0(0,10,0), colour:1(0,150,0), text("Play","Play"), channel("Play"), latched(1), radiogroup(1), identchannel("PlayButton")
button   bounds( 50,315, 40, 25), fontcolour:0(50,50,50), fontcolour:1(255,205,205), colour:0(10,0,0), colour:1(150,0,0), text("Stop","Stop"), channel("Stop"), latched(1), radiogroup(1), value(1), identchannel("StopButton")


combobox bounds( 10,345, 80, 15), channel("sound"), value(1), text("Bass Drum","Snare","Open HH","Cl. HH","Hi Tom","Mid Tom","Lo Tom","Cymbal","Rimshot","Claves","Cowbell","Clap","Maraca","Hi Conga","Mid Conga","Lo Conga")
button   bounds(462,315, 80, 20), text("Clear","Clear"), channel("clear"), value(0)
button   bounds(462,338, 38, 20), text("Save","Save"), channel("save"), value(0)
button   bounds(502,338, 38, 20), text("Load","Load"), channel("load"), value(0)
label    bounds(542,328, 48, 10), text("PATTERN"), FontColour("black")
combobox bounds(544,338, 45, 20), channel("pattern"), value(1), text("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16")
rslider  bounds(593,310, 60, 60), text("Accent"),  textcolour("black"), colour(80,100,150), channel("AccLev"), range(0, 1.00, 0.4)
rslider  bounds(643,310, 60, 60), text("Tempo"),   textcolour("black"), colour(80,100,150), channel("tempo"), range(10, 500, 70, 1, 1)
rslider  bounds(693,310, 60, 60), text("Swing"),   textcolour("black"), colour(80,100,150), channel("swing"), range(0, 0.50, 0)
rslider  bounds(743,310, 60, 60), text("Level"),   textcolour("black"), colour(80,100,150), channel("level"), range(0, 2.00, 1)

label    bounds(143,312,  6, 10), text("1"), FontColour("black")
label    bounds(163,312,  6, 10), text("2"), FontColour("black")
label    bounds(183,312,  6, 10), text("3"), FontColour("black")
label    bounds(203,312,  6, 10), text("4"), FontColour("black")
label    bounds(223,312,  6, 10), text("5"), FontColour("black")
label    bounds(243,312,  6, 10), text("6"), FontColour("black")
label    bounds(263,312,  6, 10), text("7"), FontColour("black")
label    bounds(283,312,  6, 10), text("8"), FontColour("black")
label    bounds(303,312,  6, 10), text("9"), FontColour("black")
label    bounds(320,312, 12, 10), text("10"), FontColour("black")
label    bounds(340,312, 12, 10), text("11"), FontColour("black")
label    bounds(360,312, 12, 10), text("12"), FontColour("black")
label    bounds(380,312, 12, 10), text("13"), FontColour("black")
label    bounds(400,312, 12, 10), text("14"), FontColour("black")
label    bounds(420,312, 12, 10), text("15"), FontColour("black")
label    bounds(440,312, 12, 10), text("16"), FontColour("black")

label    bounds(120, 325, 17, 12), text("On"), FontColour("black")
checkbox bounds(140, 325, 12, 12), channel("On1"),  value(1)
checkbox bounds(160, 325, 12, 12), channel("On2"),  value(0)
checkbox bounds(180, 325, 12, 12), channel("On3"),  value(0)
checkbox bounds(200, 325, 12, 12), channel("On4"),  value(1)
checkbox bounds(220, 325, 12, 12), channel("On5"),  value(1)
checkbox bounds(240, 325, 12, 12), channel("On6"),  value(0)
checkbox bounds(260, 325, 12, 12), channel("On7"),  value(0)
checkbox bounds(280, 325, 12, 12), channel("On8"),  value(0)
checkbox bounds(300, 325, 12, 12), channel("On9"),  value(1)
checkbox bounds(320, 325, 12, 12), channel("On10"), value(0)
checkbox bounds(340, 325, 12, 12), channel("On11"), value(0)
checkbox bounds(360, 325, 12, 12), channel("On12"), value(1)
checkbox bounds(380, 325, 12, 12), channel("On13"), value(0)
checkbox bounds(400, 325, 12, 12), channel("On14"), value(1)
checkbox bounds(420, 325, 12, 12), channel("On15"), value(0)
checkbox bounds(440, 325, 12, 12), channel("On16"), value(0)

label    bounds( 98, 345, 38, 12), text("Accent"), FontColour("black")
checkbox bounds(140, 345, 12, 12), channel("Acc1"),  value(1), colour("yellow")
checkbox bounds(160, 345, 12, 12), channel("Acc2"),  value(0), colour("yellow")
checkbox bounds(180, 345, 12, 12), channel("Acc3"),  value(0), colour("yellow")
checkbox bounds(200, 345, 12, 12), channel("Acc4"),  value(0), colour("yellow")
checkbox bounds(220, 345, 12, 12), channel("Acc5"),  value(0), colour("yellow")
checkbox bounds(240, 345, 12, 12), channel("Acc6"),  value(0), colour("yellow")
checkbox bounds(260, 345, 12, 12), channel("Acc7"),  value(0), colour("yellow")
checkbox bounds(280, 345, 12, 12), channel("Acc8"),  value(0), colour("yellow")
checkbox bounds(300, 345, 12, 12), channel("Acc9"),  value(0), colour("yellow")
checkbox bounds(320, 345, 12, 12), channel("Acc10"), value(0), colour("yellow")
checkbox bounds(340, 345, 12, 12), channel("Acc11"), value(0), colour("yellow")
checkbox bounds(360, 345, 12, 12), channel("Acc12"), value(0), colour("yellow")
checkbox bounds(380, 345, 12, 12), channel("Acc13"), value(0), colour("yellow")
checkbox bounds(400, 345, 12, 12), channel("Acc14"), value(0), colour("yellow")
checkbox bounds(420, 345, 12, 12), channel("Acc15"), value(0), colour("yellow")
checkbox bounds(440, 345, 12, 12), channel("Acc16"), value(0), colour("yellow")

button   bounds(458,362, 90, 18), text("Local Control","Host Control"), channel("control"), value(0)


</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-n -+rtmidi=null -M0 -dm0
</CsOptions>

<CsInstruments>

sr 		= 	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1
massign	0,2

;Author: Iain McCurdy (2012)

gisine		ftgen	0,0,1024,10,1		;A SINE WAVE
gicos		ftgen	0,0,65536,9,1,1,90	;A COSINE WAVE
gkoff	init	0
;				1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16
giOn1	ftgen	0,0,16,2,	1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0	;BD
giOn2	ftgen	0,0,16,2,	0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0	;SN
giOn3	ftgen	0,0,16,2,	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0  ;HHO
giOn4	ftgen	0,0,16,2,	1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1  ;HHCl
giOn5	ftgen	0,0,16,2,	0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  ;Hi Tom
giOn6	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0  ;Mid Tom
giOn7	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0  ;Lo Tom
giOn8	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0  ;Cym
giOn9	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  ;Rimshot
giOn10	ftgen	0,0,16,2,	1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0  ;Claves
giOn11	ftgen	0,0,16,2,	1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1  ;Cowbell
giOn12	ftgen	0,0,16,2,	0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0  ;Clap
giOn13	ftgen	0,0,16,2,	1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0  ;Maraca
giOn14	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0  ;Hi Conga
giOn15	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0  ;Mid Conga
giOn16	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1  ;Lo Conga
giAcc1	ftgen	0,0,16,2,	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	;BD
giAcc2	ftgen	0,0,16,2,	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	;SN
giAcc3	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  ;HHO
giAcc4	ftgen	0,0,16,2,	1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0  ;HHCl
giAcc5	ftgen	0,0,16,2,	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  ;Hi Tom
giAcc6	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  ;Mid Tom
giAcc7	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0  ;Lo Tom
giAcc8	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0  ;Cym
giAcc9	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  ;Rimshot
giAcc10	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  ;Claves
giAcc11	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  ;Cowbell
giAcc12	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  ;Clap
giAcc13	ftgen	0,0,16,2,	1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0  ;Maraca
giAcc14	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0  ;Hi Conga
giAcc15	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0  ;Mid Conga
giAcc16	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0  ;Lo Conga
giblank	ftgen	0,0,16,2,	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  ;blank

instr	1	;READ IN WIDGETS, SCAN MIDI NOTES PLAYED AND RELAY TO DRUM SOUNDS 
	gkPlay		chnget	"Play"
	gkStop		chnget	"Stop"
	if trigger(gkPlay,0.5,0)==1 then
	 gkOnOff	=	1
	elseif trigger(gkStop,0.5,0)==1 then
	 gkOnOff	=	0
	endif

	;READ IN WIDGETS
	gklevel1	chnget	"level1"
	gklevel2	chnget	"level2"
	gklevel3	chnget	"level3"
	gklevel4	chnget	"level4"
	gklevel5	chnget	"level5"
	gklevel6	chnget	"level6"
	gklevel7	chnget	"level7"
	gklevel8	chnget	"level8"
	gklevel9	chnget	"level9"
	gklevel10	chnget	"level10"	
	gklevel11	chnget	"level11"	
	gklevel12	chnget	"level12"	
	gklevel13	chnget	"level13"	
	gklevel14	chnget	"level14"	
	gklevel15	chnget	"level15"	
	gklevel16	chnget	"level16"	
	gktune1		chnget	"tune1"	
	gktune2		chnget	"tune2"	
	gktune3		chnget	"tune3"	
	gktune4		chnget	"tune4"	
	gktune5		chnget	"tune5"	
	gktune6		chnget	"tune6"	
	gktune7		chnget	"tune7"	
	gktune8		chnget	"tune8"	
	gktune9		chnget	"tune9"	
	gktune10	chnget	"tune10"	
	gktune11	chnget	"tune11"	
	gktune12	chnget	"tune12"	
	gktune13	chnget	"tune13"	
	gktune14	chnget	"tune14"	
	gktune15	chnget	"tune15"	
	gktune16	chnget	"tune16"
	gkdur1	chnget	"dur1"
	gkdur2	chnget	"dur2"
	gkdur3	chnget	"dur3"
	gkdur4	chnget	"dur4"
	gkdur5	chnget	"dur5"
	gkdur6	chnget	"dur6"
	gkdur7	chnget	"dur7"
	gkdur8	chnget	"dur8"
	gkdur9	chnget	"dur9"
	gkdur10	chnget	"dur10"	
	gkdur11	chnget	"dur11"	
	gkdur12	chnget	"dur12"	
	gkdur13	chnget	"dur13"	
	gkdur14	chnget	"dur14"	
	gkdur15	chnget	"dur15"	
	gkdur16	chnget	"dur16"	
	gkpan1		chnget	"pan1"	
	gkpan2		chnget	"pan2"	
	gkpan3		chnget	"pan3"	
	gkpan4		chnget	"pan4"	
	gkpan5		chnget	"pan5"	
	gkpan6		chnget	"pan6"	
	gkpan7		chnget	"pan7"	
	gkpan8		chnget	"pan8"	
	gkpan9		chnget	"pan9"	
	gkpan10		chnget	"pan10"	
	gkpan11		chnget	"pan11"	
	gkpan12		chnget	"pan12"	
	gkpan13		chnget	"pan13"	
	gkpan14		chnget	"pan14"	
	gkpan15		chnget	"pan15"	
	gkpan16		chnget	"pan16"
	gksound		chnget	"sound"
	gkOn1		chnget	"On1"
	gkOn2		chnget	"On2"
	gkOn3		chnget	"On3"
	gkOn4		chnget	"On4"
	gkOn5		chnget	"On5"
	gkOn6		chnget	"On6"
	gkOn7		chnget	"On7"
	gkOn8		chnget	"On8"
	gkOn9		chnget	"On9"
	gkOn10		chnget	"On10"
	gkOn11		chnget	"On11"
	gkOn12		chnget	"On12"
	gkOn13		chnget	"On13"
	gkOn14		chnget	"On14"
	gkOn15		chnget	"On15"
	gkOn16		chnget	"On16"
	gkAcc1		chnget	"Acc1"
	gkAcc2		chnget	"Acc2"
	gkAcc3		chnget	"Acc3"
	gkAcc4		chnget	"Acc4"
	gkAcc5		chnget	"Acc5"
	gkAcc6		chnget	"Acc6"
	gkAcc7		chnget	"Acc7"
	gkAcc8		chnget	"Acc8"
	gkAcc9		chnget	"Acc9"
	gkAcc10		chnget	"Acc10"
	gkAcc11		chnget	"Acc11"
	gkAcc12		chnget	"Acc12"
	gkAcc13		chnget	"Acc13"
	gkAcc14		chnget	"Acc14"
	gkAcc15		chnget	"Acc15"
	gkAcc16		chnget	"Acc16"
	gkclear		chnget	"clear"
	gksave		chnget	"save"
	gkload		chnget	"load"
	gkpattern	chnget	"pattern"
	gkAccLev	chnget	"AccLev"
	gktempo		chnget	"tempo"
	gkswing		chnget	"swing"
	gklevel		chnget	"level"

	kcontrol	chnget	"control"
	if kcontrol==1 then			; host control over start stop and tempo
	 gktempo	chnget	"HOST_BPM"
	 gkOnOff	chnget	"IS_PLAYING"
	 if changed(gktempo)==1 then
	  chnset	gktempo, "tempo"
	 endif
	 if changed(gkOnOff)==1 then
	  chnset	gkOnOff, "OnOff"
	 endif
	endif
	
	;START/STOP SEQUENCER
	ktrig	changed	gkOnOff		;if Run/Stop button is changed...
	if ktrig==1 then		;
	 if gkOnOff==1 then		;...if Run/Stop has been changed to 'Run'...
	  event	"i",3,0,-1		;...start instr 3 playing a held note
	 else				;otherwise...
	  event	"i",-3,0,0		;...stop instr 3 playing
	 endif
	endif
	
	;CLEAR SEQUENCES FOR ALL DRUM SOUNDS
	ktrig changed	gkclear		
	if ktrig==1 then
	 tablecopy	giOn1,	giblank	 ;copy blank table over existing sequence for voice 1
	 tablecopy	giOn2,	giblank	 ;repeat for every other voice
	 tablecopy	giOn3,	giblank	 
	 tablecopy	giOn4,	giblank	 
	 tablecopy	giOn5,	giblank	 
	 tablecopy	giOn6,	giblank	 
	 tablecopy	giOn7,	giblank	 
	 tablecopy	giOn8,	giblank	 
	 tablecopy	giOn9,	giblank	 
	 tablecopy	giOn10,	giblank	 
	 tablecopy	giOn11,	giblank	 
	 tablecopy	giOn12,	giblank	 
	 tablecopy	giOn13,	giblank	 
	 tablecopy	giOn14,	giblank	 
	 tablecopy	giOn15,	giblank	 
	 tablecopy	giOn16,	giblank	 
	 tablecopy	giAcc1,		giblank	 
	 tablecopy	giAcc2,		giblank	 
	 tablecopy	giAcc3,		giblank	 
	 tablecopy	giAcc4,		giblank	 
	 tablecopy	giAcc5,		giblank	 
	 tablecopy	giAcc6,		giblank	 
	 tablecopy	giAcc7,		giblank	 
	 tablecopy	giAcc8,		giblank	 
	 tablecopy	giAcc9,		giblank	 
	 tablecopy	giAcc10,	giblank	 
	 tablecopy	giAcc11,	giblank	 
	 tablecopy	giAcc12,	giblank	 
	 tablecopy	giAcc13,	giblank	 
	 tablecopy	giAcc14,	giblank	 
	 tablecopy	giAcc15,	giblank	 
	 tablecopy	giAcc16,	giblank	 
	endif
	
	;STORE SEQUENCE TABLES
	ktrig changed	gksave	;if save button is toggled...
	igoto	SKIP
	if ktrig==1 then
	 reinit	SAVE_TABLES	;begin a reinitialisation pass from label (ftsave operates only at i-time)
	endif
	SAVE_TABLES:
	SFileName sprintf "TR-808_pattern.%d.txt", i(gkpattern)	;create the file name (string variable) that will be used to name the text file that will contain the pattern data
	ftsave SFileName, 1, giOn1, giOn2, giOn3, giOn4, giOn5, giOn6, giOn7, giOn8, giOn9, giOn10, giOn11, giOn12, giOn13, giOn14, giOn15, giOn16, giAcc1, giAcc2, giAcc3, giAcc4, giAcc5, giAcc6, giAcc7, giAcc8, giAcc9, giAcc10, giAcc11, giAcc12, giAcc13, giAcc14, giAcc15, giAcc16	;save all tables (on information and accents) to a text file in the pwd
	rireturn	
	SKIP:
	
	;LOAD SEQUENCE TABLES
	ktrig changed	gkload	;if load button is toggled...
	igoto	SKIP2
	if ktrig==1 then
	 reinit	LOAD_TABLES	;begin a reinitialisation pass from label (ftload operates only at i-time)
	endif
	LOAD_TABLES:
	SFileName sprintf "TR-808_pattern.%d.txt", i(gkpattern)	;create the file name (string variable) that will be the name of the file from which data will be retrieved
	ftload SFileName, 1, giOn1, giOn2, giOn3, giOn4, giOn5, giOn6, giOn7, giOn8, giOn9, giOn10, giOn11, giOn12, giOn13, giOn14, giOn15, giOn16, giAcc1, giAcc2, giAcc3, giAcc4, giAcc5, giAcc6, giAcc7, giAcc8, giAcc9, giAcc10, giAcc11, giAcc12, giAcc13, giAcc14, giAcc15, giAcc16	;load all tables (on information and accents) to a text file in the pwd
	rireturn	
	SKIP2:
	
	;UPDATE SEQUENCE DISPLAY
	ktrig	changed	gksound,gkclear,gkload
	if ktrig==1 then
#define	UPDATE_SEQUENCE(N)
	 #
	 kval	tablekt	$N-1,giOn1+gksound-1
	 chnset	kval,"On$N"
	 kval	tablekt	$N-1,giAcc1+gksound-1
	 chnset	kval,"Acc$N"
	 #
	 $UPDATE_SEQUENCE(1)
	 $UPDATE_SEQUENCE(2)
	 $UPDATE_SEQUENCE(3)
	 $UPDATE_SEQUENCE(4)
	 $UPDATE_SEQUENCE(5)
	 $UPDATE_SEQUENCE(6)
	 $UPDATE_SEQUENCE(7)
	 $UPDATE_SEQUENCE(8)
	 $UPDATE_SEQUENCE(9)
	 $UPDATE_SEQUENCE(10)
	 $UPDATE_SEQUENCE(11)
	 $UPDATE_SEQUENCE(12)
	 $UPDATE_SEQUENCE(13)
	 $UPDATE_SEQUENCE(14)
	 $UPDATE_SEQUENCE(15)
	 $UPDATE_SEQUENCE(16)
	endif
	
	;UPDATE TABLE IF SEQUENCE BUTTON CHANGED
#define	UPDATE_TABLE(N)
	#
	ktrig	changed	gkOn$N
	if ktrig==1 then
	 tablewkt	gkOn$N,$N-1,giOn1+gksound-1
	endif
	ktrig	changed	gkAcc$N
	if ktrig==1 then
	 tablewkt	gkAcc$N,$N-1,giAcc1+gksound-1
	endif
	#
	$UPDATE_TABLE(1)
	$UPDATE_TABLE(2)
	$UPDATE_TABLE(3)
	$UPDATE_TABLE(4)
	$UPDATE_TABLE(5)
	$UPDATE_TABLE(6)
	$UPDATE_TABLE(7)
	$UPDATE_TABLE(8)
	$UPDATE_TABLE(9)
	$UPDATE_TABLE(10)
	$UPDATE_TABLE(11)
	$UPDATE_TABLE(12)
	$UPDATE_TABLE(13)
	$UPDATE_TABLE(14)
	$UPDATE_TABLE(15)
	$UPDATE_TABLE(16)
endin

instr	2	;READ MIDI AND TRIGGER NOTES
	inum	notnum					;READ IN MIDI NOTE NUMBER
	idb	veloc	-30,0				;READ IN MIDI NOTE VELOCITY (WILL BE USED AS A DECIBEL VALUE)
	iinstr	wrap	inum,0,16			;MAP MIDI NOTE NUMBERS (RANGE: 0 - 127) TO DRUM SOUND NUMBER (0 - 15)
	event_i	"i",101+iinstr,0,0.001,ampdbfs(idb)	;CALL THE RELEVANT INSTRUMENT AND SEND AMPLITUDE VALUE AS p4
endin

instr	3	;PLAY SEQUENCE	
	gindx	init	0
	ktick	metro		(gktempo*4)/60
	
	;SWING
	kSwingBeat init	0
	kSwingTime	=	(kSwingBeat==1?(60*gkswing)/(gktempo*4):0)
	if ktick==1 then
	 kSwingBeat	=	abs(kSwingBeat-1)	;FLIP BETWEEN ZERO AND 1
	endif
	
		schedkwhen	ktick, 0, 0, 4, kSwingTime, 0.001
endin

instr	4	;TEST FOR NOTE ON SEQUENCE STEP
#define	VOICE(N)	
	#
	iOnOff$N	table		gindx, giOn$N
	if iOnOff$N==1 then
	 iAcc	table	gindx,giAcc$N
	 event_i	"i", 100+$N, 0, 0.001, 0.4 + (iAcc*i(gkAccLev))
	endif
	#
$VOICE(1)
$VOICE(2)
$VOICE(3)
$VOICE(4)
$VOICE(5)
$VOICE(6)
$VOICE(7)
$VOICE(8)
$VOICE(9)
$VOICE(10)
$VOICE(11)
$VOICE(12)
$VOICE(13)
$VOICE(14)
$VOICE(15)
$VOICE(16)
	gindx		wrap	gindx+1, 0, 16
			turnoff
endin

instr	101	;BASS DRUM
	xtratim	0.1
	krelease	release		;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)
	chnset	1-krelease,"Act1"	;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS

	p3	=	2*i(gkdur1)							;NOTE DURATION. SCALED USING GUI 'Decay' KNOB

	;SUSTAIN AND BODY OF THE SOUND
	kmul	transeg	0.2,p3*0.5,-15,0.01, p3*0.5,0,0					;PARTIAL STRENGTHS MULTIPLIER USED BY GBUZZ. DECAYS FROM A SOUND WITH OVERTONES TO A SINE TONE.
	kbend	transeg	0.5,1.2,-4, 0,1,0,0						;SLIGHT PITCH BEND AT THE START OF THE NOTE 
	asig	gbuzz	0.5,50*octave(gktune1)*semitone(kbend),20,1,kmul,gicos		;GBUZZ TONE
	aenv	transeg	1,p3-0.004,-6,0							;AMPLITUDE ENVELOPE FOR SUSTAIN OF THE SOUND
	aatt	linseg	0,0.004,1							;SOFT ATTACK
	asig	=	asig*aenv*aatt

	;HARD, SHORT ATTACK OF THE SOUND
	aenv	linseg	1,0.07,0							;AMPLITUDE ENVELOPE (FAST DECAY)						
	acps	expsega	400,0.07,0.001,1,0.001						;FREQUENCY OF THE ATTACK SOUND. QUICKLY GLISSES FROM 400 Hz TO SUB-AUDIO
	aimp	oscili	aenv,acps*octave(gktune1*0.25),gisine				;CREATE ATTACK SOUND
	
	amix	=	((asig*0.5)+(aimp*0.35))*gklevel1*p4*gklevel			;MIX SUSTAIN AND ATTACK SOUND ELEMENTS AND SCALE USING GUI 'Level' KNOB
	
	aL,aR	pan2	amix,gkpan1							;PAN THE MONOPHONIC SOUND
		outs	aL,aR								;SEND AUDIO TO OUTPUTS
endin

instr	102	;SNARE DRUM
	xtratim	0.1
	krelease	release		;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act2"       ;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	
	;SOUND CONSISTS OF TWO SINE TONES, AN OCTAVE APART AND A NOISE SIGNAL
	ifrq  	=	342		;FREQUENCY OF THE TONES
	iNseDur	=	0.3 * i(gkdur2)	;DURATION OF THE NOISE COMPONENT
	iPchDur	=	0.1 * i(gkdur2)	;DURATION OF THE SINE TONES COMPONENT
	p3	=	iNseDur 	;p3 DURATION TAKEN FROM NOISE COMPONENT DURATION (ALWATS THE LONGEST COMPONENT)
	
	;SINE TONES COMPONENT
	aenv1	expseg	1,iPchDur,0.0001,p3-iPchDur,0.0001		;AMPLITUDE ENVELOPE
	apitch1	oscili	1,ifrq*octave(gktune2),gisine			;SINE TONE 1
	apitch2	oscili	0.25,ifrq*0.5*octave(gktune2),gisine		;SINE TONE 2 (AN OCTAVE LOWER)
	apitch	=	(apitch1+apitch2)*0.75				;MIX THE TWO SINE TONES

	;NOISE COMPONENT
	aenv2	expon	1,p3,0.0005					;AMPLITUDE ENVELOPE
	anoise	noise	0.75,0						;CREATE SOME NOISE
	anoise	butbp	anoise,10000*octave(gktune2),10000		;BANDPASS FILTER THE NOISE SIGNAL
	anoise	buthp	anoise,1000					;HIGHPASS FILTER THE NOISE SIGNAL
	kcf	expseg	5000,0.1,3000,p3-0.2,3000			;CUTOFF FREQUENCY FOR A LOWPASS FILTER
	anoise	butlp	anoise,kcf					;LOWPASS FILTER THE NOISE SIGNAL
	amix	=	((apitch*aenv1)+(anoise*aenv2))*gklevel2*p4*gklevel	;MIX AUDIO SIGNALS AND SCALE ACCORDING TO GUI 'Level' CONTROL
	aL,aR	pan2	amix,i(gkpan2)					;PAN THE MONOPHONIC AUDIO SIGNAL
		outs	aL,aR						;SEND AUDIO TO OUTPUTS
endin

instr	103	;OPEN HIGH HAT
	xtratim	0.1
	kFrq1	=	296*octave(gktune3) 	;FREQUENCIES OF THE 6 OSCILLATORS
	kFrq2	=	285*octave(gktune3) 	
	kFrq3	=	365*octave(gktune3) 	
	kFrq4	=	348*octave(gktune3) 	
	kFrq5	=	420*octave(gktune3) 	
	kFrq6	=	835*octave(gktune3) 	
	p3	=	0.5*i(gkdur3)		;DURATION OF THE NOTE
	
	;SOUND CONSISTS OF 6 PULSE OSCILLATORS MIXED WITH A NOISE COMPONENT
	;PITCHED ELEMENT
	aenv	linseg	1,p3-0.05,0.1,0.05,0		;AMPLITUDE ENVELOPE FOR THE PULSE OSCILLATORS
	ipw	=	0.25				;PULSE WIDTH
	a1	vco2	0.5,kFrq1,2,ipw			;PULSE OSCILLATORS...
	a2	vco2	0.5,kFrq2,2,ipw
	a3	vco2	0.5,kFrq3,2,ipw
	a4	vco2	0.5,kFrq4,2,ipw
	a5	vco2	0.5,kFrq5,2,ipw
	a6	vco2	0.5,kFrq6,2,ipw
	amix	sum	a1,a2,a3,a4,a5,a6		;MIX THE PULSE OSCILLATORS
	amix	reson	amix,5000*octave(gktune3),5000,1	;BANDPASS FILTER THE MIXTURE
	amix	buthp	amix,5000			;HIGHPASS FILTER THE SOUND...
	amix	buthp	amix,5000			;...AND AGAIN
	amix	=	amix*aenv			;APPLY THE AMPLITUDE ENVELOPE
	
	;NOISE ELEMENT
	anoise	noise	0.8,0				;GENERATE SOME WHITE NOISE
	aenv	linseg	1,p3-0.05,0.1,0.05,0		;CREATE AN AMPLITUDE ENVELOPE
	kcf	expseg	20000,0.7,9000,p3-0.1,9000	;CREATE A CUTOFF FREQ. ENVELOPE
	anoise	butlp	anoise,kcf			;LOWPASS FILTER THE NOISE SIGNAL
	anoise	buthp	anoise,8000			;HIGHPASS FILTER THE NOISE SIGNAL
	anoise	=	anoise*aenv			;APPLY THE AMPLITUDE ENVELOPE
	
	;MIX PULSE OSCILLATOR AND NOISE COMPONENTS
	amix	=	(amix+anoise)*gklevel3*p4*0.55*gklevel
	aL,aR	pan2	amix,gkpan3			;PAN MONOPHONIC SIGNAL
		outs	aL,aR				;SEND TO OUTPUTS
	;kactive	active	p1+1				;CHECK NUMBER OF ACTIVE INSTANCES OF CLOSED HIGH HAT INSTRUMENT
	;if kactive>0 then			;IF HIGH-HAT CLOSED IS ACTIVE...
	; turnoff				;TURN OFF THIS INSTRUMENT
	;endif
	krelease	release			;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act3"       	;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
endin

instr	104	;CLOSED HIGH HAT
	xtratim	0.1
	krelease	release			;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act4"       	;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	kFrq1	=	296*octave(gktune4) 	;FREQUENCIES OF THE 6 OSCILLATORS
	kFrq2	=	285*octave(gktune4) 	
	kFrq3	=	365*octave(gktune4) 	
	kFrq4	=	348*octave(gktune4) 	
	kFrq5	=	420*octave(gktune4) 	
	kFrq6	=	835*octave(gktune4) 	
	idur	=	0.088*i(gkdur4)		;DURATION OF THE NOTE
	p3	limit	idur,0.1,10		;LIMIT THE MINIMUM DURATION OF THE NOTE (VERY SHORT NOTES CAN RESULT IN THE INDICATOR LIGHT ON-OFF NOTE BEING TO0 SHORT)

	iactive	active	p1-1			;SENSE ACTIVITY OF PREVIOUS INSTRUMENT (OPEN HIGH HAT) 
	if iactive>0 then			;IF 'OPEN HIGH HAT' IS ACTIVE...
	 turnoff2	p1-1,0,0		;TURN IT OFF (CLOSED HIGH HAT TAKES PRESIDENCE)
	 chnset	gkoff,"Act3"       	;TURN OFF ACTIVE LIGHT FOR OPEN HIGH HAT
	endif

	;PITCHED ELEMENT
	aenv	expsega	1,idur,0.001,1,0.001		;AMPLITUDE ENVELOPE FOR THE PULSE OSCILLATORS
	ipw	=	0.25				;PULSE WIDTH
	a1	vco2	0.5,kFrq1,2,ipw			;PULSE OSCILLATORS...			
	a2	vco2	0.5,kFrq2,2,ipw
	a3	vco2	0.5,kFrq3,2,ipw
	a4	vco2	0.5,kFrq4,2,ipw
	a5	vco2	0.5,kFrq5,2,ipw
	a6	vco2	0.5,kFrq6,2,ipw
	amix	sum	a1,a2,a3,a4,a5,a6		;MIX THE PULSE OSCILLATORS
	amix	reson	amix,5000*octave(gktune4),5000,1	;BANDPASS FILTER THE MIXTURE
	amix	buthp	amix,5000			;HIGHPASS FILTER THE SOUND...
	amix	buthp	amix,5000			;...AND AGAIN
	amix	=	amix*aenv			;APPLY THE AMPLITUDE ENVELOPE
	
	;NOISE ELEMENT
	anoise	noise	0.8,0				;GENERATE SOME WHITE NOISE
	aenv	expsega	1,idur,0.001,1,0.001		;CREATE AN AMPLITUDE ENVELOPE
	kcf	expseg	20000,0.7,9000,idur-0.1,9000	;CREATE A CUTOFF FREQ. ENVELOPE
	anoise	butlp	anoise,kcf			;LOWPASS FILTER THE NOISE SIGNAL
	anoise	buthp	anoise,8000			;HIGHPASS FILTER THE NOISE SIGNAL
	anoise	=	anoise*aenv			;APPLY THE AMPLITUDE ENVELOPE
	
	;MIX PULSE OSCILLATOR AND NOISE COMPONENTS
	amix	=	(amix+anoise)*gklevel4*p4*0.55*gklevel
	aL,aR	pan2	amix,gkpan4			;PAN MONOPHONIC SIGNAL
		outs	aL,aR				;SEND TO OUTPUTS
endin

instr	105	;HIGH TOM
	xtratim	0.1
	krelease	release					;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act5"       			;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	ifrq     	=	200 * octave(i(gktune5))	;FREQUENCY
	p3	  	=	0.5 * i(gkdur5)			;DURATION OF THIS NOTE

	;SINE TONE SIGNAL
	aAmpEnv	transeg	1,p3,-10,0.001				;AMPLITUDE ENVELOPE FOR SINE TONE SIGNAL
	afmod	expsega	5,0.125/ifrq,1,1,1			;FREQUENCY MODULATION ENVELOPE. GIVES THE TONE MORE OF AN ATTACK.
	asig	oscili	-aAmpEnv*0.6,ifrq*afmod,gisine		;SINE TONE SIGNAL

	;NOISE SIGNAL
	aEnvNse	transeg	1,p3,-6,0.001				;AMPLITUDE ENVELOPE FOR NOISE SIGNAL
	anoise	dust2	0.4, 8000				;GENERATE NOISE SIGNAL
	anoise	reson	anoise,400*octave(i(gktune5)),800,1	;BANDPASS FILTER THE NOISE SIGNAL
	anoise	buthp	anoise,100*octave(i(gktune5))		;HIGHPASS FILTER THE NOSIE SIGNAL
	anoise	butlp	anoise,1000*octave(i(gktune5))		;LOWPASS FILTER THE NOISE SIGNAL
	anoise	=	anoise * aEnvNse			;SCALE NOISE SIGNAL WITH AMPLITUDE ENVELOPE
	
	;MIX THE TWO SOUND COMPONENTS
	amix	=	(asig + anoise)*gklevel5*p4*gklevel
	aL,aR	pan2	amix,gkpan5				;PAN MONOPHONIC SIGNAL
		outs	aL,aR					;SEND AUDIO TO OUTPUTS
endin

instr	106	;MID TOM
	xtratim	0.1
	krelease	release					;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act6"               		;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	ifrq     	=	133*octave(i(gktune6)) 		;FREQUENCY
	p3	  	=	0.6 * i(gkdur6)			;DURATION OF THIS NOTE

	;SINE TONE SIGNAL
	aAmpEnv	transeg	1,p3,-10,0.001				;AMPLITUDE ENVELOPE FOR SINE TONE SIGNAL
	afmod	expsega	5,0.125/ifrq,1,1,1			;FREQUENCY MODULATION ENVELOPE. GIVES THE TONE MORE OF AN ATTACK.
	asig	oscili	-aAmpEnv*0.6,ifrq*afmod,gisine		;SINE TONE SIGNAL

	;NOISE SIGNAL
	aEnvNse	transeg	1,p3,-6,0.001				;AMPLITUDE ENVELOPE FOR NOISE SIGNAL
	anoise	dust2	0.4, 8000				;GENERATE NOISE SIGNAL
	anoise	reson	anoise, 400*octave(i(gktune6)),800,1	;BANDPASS FILTER THE NOISE SIGNAL
	anoise	buthp	anoise,100*octave(i(gktune6))		;HIGHPASS FILTER THE NOSIE SIGNAL
	anoise	butlp	anoise,600*octave(i(gktune6))		;LOWPASS FILTER THE NOISE SIGNAL
	anoise	=	anoise * aEnvNse			;SCALE NOISE SIGNAL WITH AMPLITUDE ENVELOPE
	
	;MIX THE TWO SOUND COMPONENTS
	amix	=	(asig + anoise)*gklevel6*p4*gklevel
	aL,aR	pan2	amix,i(gkpan6)				;PAN MONOPHONIC SIGNAL
		outs	aL,aR					;SEND AUDIO TO OUTPUTS
endin

instr	107	;LOW TOM
	xtratim	0.1
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act7"               	;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	ifrq     	=	90 * octave(i(gktune7))	;FREQUENCY
	p3 	 	=	0.7*i(gkdur7) 		;DURATION OF THIS NOTE

	;SINE TONE SIGNAL
	aAmpEnv	transeg	1,p3,-10,0.001				;AMPLITUDE ENVELOPE FOR SINE TONE SIGNAL
	afmod	expsega	5,0.125/ifrq,1,1,1			;FREQUENCY MODULATION ENVELOPE. GIVES THE TONE MORE OF AN ATTACK.
	asig	oscili	-aAmpEnv*0.6,ifrq*afmod,gisine		;SINE TONE SIGNAL

	;NOISE SIGNAL
	aEnvNse	transeg	1,p3,-6,0.001				;AMPLITUDE ENVELOPE FOR NOISE SIGNAL
	anoise	dust2	0.4, 8000				;GENERATE NOISE SIGNAL
	anoise	reson	anoise,40*octave(gktune7),800,1		;BANDPASS FILTER THE NOISE SIGNAL
	anoise	buthp	anoise,100*octave(i(gktune7))		;HIGHPASS FILTER THE NOSIE SIGNAL
	anoise	butlp	anoise,600*octave(i(gktune7))		;LOWPASS FILTER THE NOISE SIGNAL
	anoise	=	anoise * aEnvNse			;SCALE NOISE SIGNAL WITH AMPLITUDE ENVELOPE
	
	;MIX THE TWO SOUND COMPONENTS
	amix	=	(asig + anoise)*gklevel7*p4*gklevel
	aL,aR	pan2	amix,i(gkpan7)				;PAN MONOPHONIC SIGNAL
		outs	aL,aR					;SEND AUDIO TO OUTPUTS
endin

instr	108	;CYMBAL
	xtratim	0.1
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act8"                       ;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	kFrq1	=	296*octave(gktune8) 	;FREQUENCIES OF THE 6 OSCILLATORS
	kFrq2	=	285*octave(gktune8)
	kFrq3	=	365*octave(gktune8)
	kFrq4	=	348*octave(gktune8)     
	kFrq5	=	420*octave(gktune8)
	kFrq6	=	835*octave(gktune8)
	p3	=	2*i(gkdur8)		;DURATION OF THE NOTE

	;SOUND CONSISTS OF 6 PULSE OSCILLATORS MIXED WITH A NOISE COMPONENT
	;PITCHED ELEMENT
	aenv	expon	1,p3,0.0001		;AMPLITUDE ENVELOPE FOR THE PULSE OSCILLATORS 
	ipw	=	0.25			;PULSE WIDTH      
	a1	vco2	0.5,kFrq1,2,ipw		;PULSE OSCILLATORS...  
	a2	vco2	0.5,kFrq2,2,ipw
	a3	vco2	0.5,kFrq3,2,ipw
	a4	vco2	0.5,kFrq4,2,ipw
	a5	vco2	0.5,kFrq5,2,ipw                                                                   
	a6	vco2	0.5,kFrq6,2,ipw
	amix	sum	a1,a2,a3,a4,a5,a6		;MIX THE PULSE OSCILLATORS
	amix	reson	amix,5000 *octave(gktune8),5000,1	;BANDPASS FILTER THE MIXTURE
	amix	buthp	amix,10000			;HIGHPASS FILTER THE SOUND
	amix	butlp	amix,12000			;LOWPASS FILTER THE SOUND...
	amix	butlp	amix,12000			;AND AGAIN...
	amix	=	amix*aenv			;APPLY THE AMPLITUDE ENVELOPE
	
	;NOISE ELEMENT
	anoise	noise	0.8,0				;GENERATE SOME WHITE NOISE
	aenv	expsega	1,0.3,0.07,p3-0.1,0.00001	;CREATE AN AMPLITUDE ENVELOPE
	kcf	expseg	14000,0.7,7000,p3-0.1,5000	;CREATE A CUTOFF FREQ. ENVELOPE
	anoise	butlp	anoise,kcf			;LOWPASS FILTER THE NOISE SIGNAL
	anoise	buthp	anoise,8000			;HIGHPASS FILTER THE NOISE SIGNAL
	anoise	=	anoise*aenv			;APPLY THE AMPLITUDE ENVELOPE            

	;MIX PULSE OSCILLATOR AND NOISE COMPONENTS
	amix	=	(amix+anoise)*gklevel8*p4*0.85*gklevel
	aL,aR	pan2	amix,i(gkpan8)			;PAN MONOPHONIC SIGNAL
		outs	aL,aR				;SEND TO OUTPUTS
endin

instr	109	;RIM SHOT
	xtratim	0.1
	iTR808RimShot	ftgenonce	0,0,1024,10,	0.971,0.269,0.041,0.054,0.011,0.013,0.08,0.0065,0.005,0.004,0.003,0.003,0.002,0.002,0.002,0.002,0.002,0.001,0.001,0.001,0.001,0.001,0.002,0.001,0.001	;WAVEFORM FOR TR808 RIMSHOT
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act9"                       ;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	idur 	=	0.027*i(gkdur9) 		;NOTE DURATION
	p3	limit	idur,0.1,10			;LIMIT THE MINIMUM DURATION OF THE NOTE (VERY SHORT NOTES CAN RESULT IN THE INDICATOR LIGHT ON-OFF NOTE BEING TO0 SHORT)

	;RING
	aenv1	expsega	1,idur,0.001,1,0.001		;AMPLITUDE ENVELOPE FOR SUSTAIN ELEMENT OF SOUND
	ifrq1	=	1700*octave(i(gktune9))		;FREQUENCY OF SUSTAIN ELEMENT OF SOUND
	aring	oscili	1,ifrq1,iTR808RimShot,0		;CREATE SUSTAIN ELEMENT OF SOUND	
	aring	butbp	aring,ifrq1,ifrq1*8	
	aring	=	aring*(aenv1-0.001)*0.5			;APPLY AMPLITUDE ENVELOPE

	;NOISE
	anoise	noise	1,0					;CREATE A NOISE SIGNAL
	aenv2	expsega	1, 0.002, 0.8, 0.005, 0.5, idur-0.002-0.005, 0.0001, 1, 0.0001	;CREATE AMPLITUDE ENVELOPE
	anoise	buthp	anoise,800			;HIGHPASS FILTER THE NOISE SOUND
	kcf	expseg	4000,p3,20				;CUTOFF FREQUENCY FUNCTION FOR LOWPASS FILTER
	anoise	butlp	anoise,kcf			;LOWPASS FILTER THE SOUND
	anoise	=	anoise*(aenv2-0.001)	;APPLY ENVELOPE TO NOISE SIGNAL

	;MIX
	amix	=	(aring+anoise)*gklevel9*p4*0.8*gklevel
	aL,aR	pan2	amix,gkpan9			;PAN MONOPHONIC SIGNAL  
		outs	aL,aR				;SEND TO OUTPUTS
endin

instr	110	;CLAVES
	xtratim	0.1
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act10"                      ;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	ifrq	=	2500*octave(i(gktune10))	;FREQUENCY OF OSCILLATOR
	idur	=	0.045 	* i(gkdur10)		;DURATION OF THE NOTE
	p3	limit	idur,0.1,10			;LIMIT THE MINIMUM DURATION OF THE NOTE (VERY SHORT NOTES CAN RESULT IN THE INDICATOR LIGHT ON-OFF NOTE BEING TO0 SHORT)			
	aenv	expsega	1,idur,0.001,1,0.001		;AMPLITUDE ENVELOPE
	afmod	expsega	3,0.00005,1,1,1			;FREQUENCY MODULATION ENVELOPE. GIVES THE SOUND A LITTLE MORE ATTACK.
	asig	oscili	-(aenv-0.001),ifrq*afmod,gisine,0	;AUDIO OSCILLATOR
	asig	=	asig*0.4*gklevel10*p4*gklevel		;RESCALE AMPLITUDE
	aL,aR	pan2	asig,gkpan10			;PAN MONOPHONIC AUDIO SIGNAL
		outs	aL,aR				;SEND AUDIO TO OUTPUTS
endin

instr	111	;COWBELL
	xtratim	0.1
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act11"              	;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	ifrq1	=	562 * octave(i(gktune11))	;FREQUENCIES OF THE TWO OSCILLATORS
	ifrq2	=	845 * octave(i(gktune11))	;
	ipw  	=	0.5 				;PULSE WIDTH OF THE OSCILLATOR	
	idur 	=	0.7 				;NOTE DURATION
	ishp 	=	-30 	
	idur 	=	0.7 				;NOTE DURATION
	p3	=	idur*i(gkdur11)			;LIMIT THE MINIMUM DURATION OF THE NOTE (VERY SHORT NOTES CAN RESULT IN THE INDICATOR LIGHT ON-OFF NOTE BEING TO0 SHORT)
	ishape	=	-30				;SHAPE OF THE CURVES IN THE AMPLITUDE ENVELOPE
	kenv1	transeg	1,p3*0.3,ishape,0.2, p3*0.7,ishape,0.2	;FIRST AMPLITUDE ENVELOPE - PRINCIPALLY THE ATTACK OF THE NOTE
	kenv2	expon	1,p3,0.0005				;SECOND AMPLITUDE ENVELOPE - THE SUSTAIN PORTION OF THE NOTE
	kenv	=	kenv1*kenv2			;COMBINE THE TWO ENVELOPES
	itype	=	2				;WAVEFORM FOR VCO2 (2=PULSE)
	a1	vco2	0.65,ifrq1,itype,ipw		;CREATE THE TWO OSCILLATORS
	a2	vco2	0.65,ifrq2,itype,ipw
	amix	=	a1+a2				;MIX THE TWO OSCILLATORS 
	iLPF2	=	10000				;LOWPASS FILTER RESTING FREQUENCY
	kcf	expseg	12000,0.07,iLPF2,1,iLPF2	;LOWPASS FILTER CUTOFF FREQUENCY ENVELOPE
	alpf	butlp	amix,kcf			;LOWPASS FILTER THE MIX OF THE TWO OSCILLATORS (CREATE A NEW SIGNAL)
	abpf	reson	amix, ifrq2, 25			;BANDPASS FILTER THE MIX OF THE TWO OSCILLATORS (CREATE A NEW SIGNAL)
	amix	dcblock2	(abpf*0.06*kenv1)+(alpf*0.5)+(amix*0.9)	;MIX ALL SIGNALS AND BLOCK DC OFFSET
	amix	buthp	amix,700			;HIGHPASS FILTER THE MIX OF ALL SIGNALS
	amix	=	amix*0.07*kenv*p4*gklevel11*gklevel	;RESCALE AMPLITUDE
	aL,aR	pan2	amix,i(gkpan11)			;PAN THE MONOPHONIC AUDIO SIGNAL
		outs	aL,aR				;SEND AUDIO TO OUTPUTS
endin

instr	112	;CLAP
	;;xtratim	0.1
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act12"              	;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	iTimGap	=	0.01				;GAP BETWEEN EVENTS DURING ATTACK PORTION OF CLAP
	idur1  	=	0.02				;DURING OF THE THREE INITIAL 'CLAPS'
	idur2  	=	2*i(gkdur12)			;DURATION OF THE FOURTH, MAIN, CLAP
	idens  	=	8000				;DENSITY OF THE NOISE SIGNAL USED TO FORM THE CLAPS
	iamp1  	=	0.5				;AMPLITUDE OF AUDIO BEFORE BANDPASS FILTER IN OUTPUT
	iamp2  	=	1				;AMPLITUDE OF AUDIO AFTER BANDPASS FILTER IN OUTPUT
	if frac(p1)==0 then				;IF THIS IS THE INITIAL NOTE (p1 WILL BE AN INTEGER)
	 ;	        del.  dur  env.shape
	 event_i	"i", p1+0.1, 0,          idur1, p4	;CALL THIS INSTRUMENT 4 TIMES. ADD A FRACTION ONTO p1 TO BE ABLE TO DIFFERENTIATE THESE SUBSEQUENT NOTES
	 event_i	"i", p1+0.1, iTimGap,    idur1, p4
	 event_i	"i", p1+0.1, iTimGap*2,  idur1, p4
	 event_i	"i", p1+0.1, iTimGap*3,  idur2, p4
	else
	 kenv	transeg	1,p3,-25,0				;AMPLITUDE ENVELOPE
	 iamp	random	0.7,1					;SLIGHT RANDOMISATION OF AMPLITUDE	
	 anoise	dust2	kenv*iamp, idens			;CREATE NOISE SIGNAL
	
	 iBPF   	=	1100*octave(i(gktune12))	;FREQUENCY OF THE BANDPASS FILTER
	 ibw    	=	2000*octave(i(gktune12))	;BANDWIDTH OF THE BANDPASS FILTER
	 iHPF   	=	1000				;FREQUENCY OF A HIGHPASS FILTER
	 iLPF   	=	1				;SCALER FOR FREQUENCY OF A LOWPASS FILTER
	 kcf	expseg	8000,0.07,1700,1,800,2,500,1,500	;CREATE CUTOFF FREQUENCY ENVELOPE
	 asig	butlp	anoise,kcf*iLPF				;LOWPASS FILTER THE SOUND
	 asig	buthp	asig,iHPF				;HIGHPASS FILTER THE SOUND
	 ares	reson	asig,iBPF,ibw,1				;BANDPASS FILTER THE SOUND (CREATE A NEW SIGNAL)
	 asig	dcblock2	(asig*iamp1)+(ares*iamp2)	;MIX BANDPASS FILTERED AND NON-BANDPASS FILTERED SOUND ELEMENTS
	 asig	=	asig*p4*i(gklevel12)*1.75*gklevel	;SCALE AMPLITUDE
	 aL,aR	pan2	asig,i(gkpan12)				;PAN MONOPHONIC SIGNAL
		outs	aL,aR					;SEND AUDIO TO OUTPUTS
	endif
endin

instr	113	;MARACA
	xtratim	0.1
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act13"                      ;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	idur	=	0.07*i(gkdur13)				;DURATION 3
	p3	limit	idur,0.1,10				;LIMIT THE MINIMUM DURATION OF THE NOTE (VERY SHORT NOTES CAN RESULT IN THE INDICATOR LIGHT ON-OFF NOTE BEING TO0 SHORT)
	iHPF 	limit	6000*octave(i(gktune13)),20,sr/2	;HIGHPASS FILTER FREQUENCY	
	iLPF 	limit	12000*octave(i(gktune13)),20,sr/3	;LOWPASS FILTER FREQUENCY. (LIMIT MAXIMUM TO PREVENT OUT OF RANGE VALUES)
	;AMPLITUDE ENVELOPE
	iBP1 	=	0.4					;BREAK-POINT 1
	iDur1	=	0.014*i(gkdur13) 			;DURATION 1
	iBP2 	=	1					;BREAKPOINT 2
	iDur2	=	0.01 *i(gkdur13)			;DURATION 2
	iBP3 	=	0.05 					;BREAKPOINT 3
	p3	limit	idur,0.1,10				;LIMIT THE MINIMUM DURATION OF THE NOTE (VERY SHORT NOTES CAN RESULT IN THE INDICATOR LIGHT ON-OFF NOTE BEING TO0 SHORT)
	aenv	expsega	iBP1,iDur1,iBP2,iDur2,iBP3		;CREATE AMPLITUDE ENVELOPE
	anoise	noise	0.75,0					;CREATE A NOISE SIGNAL
	anoise	buthp	anoise,iHPF				;HIGHPASS FILTER THE SOUND
	anoise	butlp	anoise,iLPF				;LOWPASS FILTER THE SOUND
	anoise	=	anoise*aenv*p4*gklevel13*gklevel	;SCALE THE AMPLITUDE
	aL,aR	pan2	anoise,i(gkpan13)			;PAN THE MONOPONIC SIGNAL
		outs	aL,aR					;SEND AUDIO TO OUTPUTS
endin

instr	114	;HIGH CONGA
	xtratim	0.1
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act14"                      ;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	ifrq  	=	420*octave(i(gktune14))		;FREQUENCY OF NOTE
	p3  	=	0.22*i(gkdur14)			;DURATION OF NOTE
	aenv	transeg	0.7,1/ifrq,1,1,p3,-6,0.001	;AMPLITUDE ENVELOPE
	afrq	expsega	ifrq*3,0.25/ifrq,ifrq,1,ifrq	;FREQUENCY ENVELOPE (CREATE A SHARPER ATTACK)
	asig	oscili	-aenv*0.25,afrq,gisine		;CREATE THE AUDIO OSCILLATOR
	asig	=	asig*p4*gklevel14*gklevel	;SCALE THE AMPLITUDE
	aL,aR	pan2	asig,gkpan14			;PAN THE MONOPHONIC AUDIO SIGNAL
		outs	aL,aR				;SEND AUDIO TO THE OUTPUTS
endin

instr	115	;MID CONGA
	xtratim	0.1
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act15"                      ;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	ifrq   	=	310*octave(i(gktune15))		;FREQUENCY OF NOTE
	p3   	=	0.33*i(gkdur15)			;DURATION OF NOTE
	aenv	transeg	0.7,1/ifrq,1,1,p3,-6,0.001	;AMPLITUDE ENVELOPE	
	afrq	expsega	ifrq*3,0.25/ifrq,ifrq,1,ifrq	;FREQUENCY ENVELOPE (CREATE A SHARPER ATTACK)
	asig	oscili	-aenv*0.25,afrq,gisine		;CREATE THE AUDIO OSCILLATOR
	asig	=	asig*p4*gklevel15*gklevel		;SCALE THE AMPLITUDE
	aL,aR	pan2	asig,gkpan15			;PAN THE MONOPHONIC AUDIO SIGNAL
		outs	aL,aR				;SEND AUDIO TO THE OUTPUTS
endin

instr	116	;LOW CONGA
	xtratim	0.1
	krelease	release				;SENSE RELEASE OF THIS NOTE ('1' WHEN RELEASED, OTHERWISE ZERO)   
	chnset	1-krelease,"Act16"                      ;TURN ON ACTIVE LIGHT WHEN NOTE STARTS, TURN IT OFF WHEN NOTE ENDS
	ifrq   	=	227*octave(i(gktune16))		;FREQUENCY OF NOTE
	p3   	=	0.41*i(gkdur16)			;DURATION OF NOTE 	
	aenv	transeg	0.7,1/ifrq,1,1,p3,-6,0.001	;AMPLITUDE ENVELOPE	
	afrq	expsega	ifrq*3,0.25/ifrq,ifrq,1,ifrq	;FREQUENCY ENVELOPE (CREATE A SHARPER ATTACK)
	asig	oscili	-aenv*0.25,afrq,gisine		;CREATE THE AUDIO OSCILLATOR
	asig	=	asig*p4*gklevel16*gklevel	;SCALE THE AMPLITUDE
	aL,aR	pan2	asig,gkpan16			;PAN THE MONOPHONIC AUDIO SIGNAL
		outs	aL,aR				;SEND AUDIO TO THE OUTPUTS
endin

</CsInstruments>

<CsScore>
f 0 [3600*24*7]
i 1 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>
Dust.csd
Written by Iain McCurdy, 2013.

A simple encapsulation of the 'dust' opcode.
Added features are stereo panning (spread) of the dust, a random tonal variation (lowpass filter with jumping cutoff frequency) and constant low and highpass filters.


<Cabbage>
form caption("Dust"), size(410, 10), pluginid("dust") style("legacy")
image    bounds(  0,  0,410, 80), colour(155, 50, 50), shape("sharp"), outlinecolour("white"), outlinethickness(2) 
checkbox bounds( 10, 10, 80, 15), text("On/Off"), channel("onoff"), value(0), fontcolour("white")
rslider  bounds( 70, 10, 60, 60), text("Amplitude"), channel("amp"),     range(0, 1.00, 0.5, 0.5, 0.001),   textcolour("white"), colour(105, 20, 20), outlinecolour(155,100,100), trackercolour(220,160,160)
rslider  bounds(125, 10, 60, 60), text("Freq."),     channel("freq"),    range(0.1, 20000, 500, 0.5, 0.01), textcolour("white"), colour(105, 20, 20), outlinecolour(155,100,100), trackercolour(220,160,160)
rslider  bounds(180, 10, 60, 60), text("Spread"),    channel("spread"),  range(0, 1.00, 1),                 textcolour("white"), colour(105, 20, 20), outlinecolour(155,100,100), trackercolour(220,160,160)
rslider  bounds(235, 10, 60, 60), text("Tone Var."), channel("ToneVar"), range(0, 1.00, 0),                 textcolour("white"), colour(105, 20, 20), outlinecolour(155,100,100), trackercolour(220,160,160)
rslider  bounds(290, 10, 60, 60), text("Lowpass"),   channel("LPF"),     range(20,20000,20000,0.5),         textcolour("white"), colour(105, 20, 20), outlinecolour(155,100,100), trackercolour(220,160,160)
rslider  bounds(345, 10, 60, 60), text("Highpass"),  channel("HPF"),     range(20,20000,20,0.5),            textcolour("white"), colour(105, 20, 20), outlinecolour(155,100,100), trackercolour(220,160,160)
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100
ksmps 		= 	64
nchnls 		= 	2
0dbfs		=	1	;MAXIMUM AMPLITUDE
massign	0,0

instr	1
	konoff	chnget	"onoff"		;read in on/off switch widget value
	if konoff==0 goto SKIP		;if on/off switch is off jump to 'SKIP' label
	kamp	chnget	"amp"
	kfreq	chnget	"freq"
	kspread	chnget	"spread"
	asig	dust2	kamp, kfreq	;GENERATE 'dust2' IMPULSES

	; tone variation
	kToneVar	chnget	"ToneVar"
	if(kToneVar>0) then
 	 kcfoct	random		14-(kToneVar*10),14
	 asig	tonex		asig,cpsoct(kcfoct),1
	endif

	kpan	random	0.5-(kspread*0.5), 0.5+(kspread*0.5)
	asigL,asigR	pan2	asig,kpan

	kporttime	linseg	0,0.001,0.05

	; Lowpass Filter
	kLPF	chnget	"LPF"
	if kLPF<20000 then
	 kLPF	portk	kLPF,kporttime
	 asigL	clfilt	asigL,kLPF,0,2
	 asigR	clfilt	asigR,kLPF,0,2
	endif
	
	; Highpass Filter
	kHPF	chnget	"HPF"
	if kHPF>20 then
	 kHPF	limit	kHPF,20,kLPF
	 kHPF	portk	kHPF,kporttime
	 asigL	clfilt	asigL,kHPF,1,2
	 asigR	clfilt	asigR,kHPF,1,2
	endif

		outs	asigL,asigR	;SEND AUDIO SIGNAL TO OUTPUT
	SKIP:				;A label. Skip to here is on/off switch is off 
endin


</CsInstruments>

<CsScore>
i 1 0 [60*60*24*7]	;instrument that reads in widget data
</CsScore>

</CsoundSynthesizer>; FractalNoise.csd
; Written by Iain McCurdy, 2015

; GUI colour indicates noise type: 'white' - 'pink' - 'brown'

<Cabbage>
form caption("Fractal Noise"), size(290,275), pluginid("fnse"), guirefresh(32) style("legacy")
image bounds(  0,  0,290,275), colour("white"), shape("sharp"), , identchannel(BackgroundColour)
checkbox bounds( 20, 10, 15, 15), channel("onoff"), value(0), fontcolour("black"), colour("yellow")
label    bounds( 37, 11, 50, 13), text("On/Off"), fontcolour(30,30,30), identchannel("label1")
rslider  bounds(100, 10, 50, 50), channel("amp"),     range(0, 2, 0.2, 0.5, 0.001), textcolour("black"), trackercolour("yellow"), colour(30,30,30)
label    bounds(100, 60, 50, 13), text("Amp."), fontcolour(30,30,30), identchannel("label2")
rslider  bounds(160, 10, 50, 50), channel("beta"),    range(-2, 5, 0, 1, 0.001),    textcolour("black"), trackercolour("yellow"), colour(30,30,30)
label    bounds(160, 60, 50, 13), text("Beta"), fontcolour(30,30,30), identchannel("label3")
rslider  bounds(220, 10, 50, 50), channel("width"),   range(0,0.05, 0, 0.5, 0.0001),    textcolour("black"), trackercolour("yellow"), colour(30,30,30)
label    bounds(220, 60, 50, 13), text("Width"), fontcolour(30,30,30), identchannel("label4")
gentable bounds(  5, 85 ,280, 90), tablenumber(10), amprange(-1,1,1), identchannel("table"),zoom(-1)
label    bounds(  7, 85, 100, 11), text("Amp.Waveform"), fontcolour(255,255,255,150), align(left)
gentable bounds(  5,180 ,280, 90), tablenumber(11), identchannel("FFT"), amprange(0,1,-1), outlinethickness(0), samplerange(0, 128), tablecolour("yellow"), zoom(-1)
label    bounds(  7,180, 100, 11), text("FFT Spectrum"), fontcolour(255,255,255,150), align(left)
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100
ksmps 		= 	16
nchnls 		= 	2
0dbfs		=	1

ginoise		ftgen	10,0,128,10,1
giFFT		ftgen	11,0,256,10,1

giFracScal	ftgen	1,0,-700,-27, 0,1.1, 100,1.1, 200,1.1, 300,0.42, 400,0.08, 500,0.008, 600,0.001, 700,0.0002 
;			              white    white     pink     brown     black
giR		ftgen	2,0,-700,-27,  0,255, 200,255,  300,255, 400,80,   700,1 
giG		ftgen	3,0,-700,-27,  0,255, 200,255,  300,130, 400,40,   700,1 
giB		ftgen	4,0,-700,-27,  0,255, 200,255,  300,130, 400,0 ,   700,1 



instr	1
	konoff	chnget	"onoff"		;read in on/off switch widget value
	kamp		chnget	"amp"
	kamp		port	kamp,0.01
	kbeta		chnget	"beta"
	kbeta		port	kbeta,0.1
	kbeta		init	0
	kwidth		chnget	"width"
	kwidth		portk	kwidth,0.05
	kscal		table	(kbeta+2)/7,giFracScal,1
	aL	fractalnoise	kscal*0.5*konoff, kbeta
	if kwidth>0.0001 then
	 aR	vdelay		aL,kwidth*1000,100
	else
	 aR	=	aL
	endif
		outs	aL*kamp, aR*kamp

	kptr	init	0
		tabw k(aL), kptr, 10
	kptr	=	(kptr + 1) % 128

	if metro(16)==1 then
	 if changed(kbeta)==1 then
	  kR	tab	(kbeta+2)/7,giR,1
	  kG	tab	(kbeta+2)/7,giG,1
	  kB	tab	(kbeta+2)/7,giB,1
	  kR	init	255
	  kG	init	255
	  kB	init	255
	  Smsg	sprintfk	"colour(%d,%d,%d)",kR,kG,kB
	  	chnset		Smsg,"BackgroundColour"
	 endif

		chnset	"tablenumbers(10)","table"

	endif

	
	kFlickOn	trigger	kbeta,2,0
	kFlickOff	trigger	kbeta,2,1
	if kFlickOn==1 then
	  	chnset		"fontcolour(255,255,255)","label1"
	  	chnset		"fontcolour(255,255,255)","label2"
	  	chnset		"fontcolour(255,255,255)","label3"
	  	chnset		"fontcolour(255,255,255)","label4"
	elseif kFlickOff==1 then
	  	chnset		"fontcolour(0,0,0)","label1"
	  	chnset		"fontcolour(0,0,0)","label2"
	  	chnset		"fontcolour(0,0,0)","label3"
	  	chnset		"fontcolour(0,0,0)","label4"
	endif
	
	fsig	pvsanal	aL*3, 256,64,256,1
  	kflag	pvsftw fsig, 11
 	if kflag==1 then
 	 chnset	"tablenumber(11)", "FFT"
 	endif

endin


</CsInstruments>

<CsScore>
i 1 0 [60*60*24*7]	;instrument that reads in widget data
</CsScore>

</CsoundSynthesizer>GaussianDust.csd
Iain McCurdy [2013]

A simple encapsulation of the 'gausstrig' opcode.
Added features are stereo panning (spread) of the dust, a random tonal variation (lowpass filter with jumping cutoff frequency) and constant low and highpass filters.

<Cabbage>
form caption("Gaussian Dust"), size(490, 350), pluginid("gaus") style("legacy")
image                  bounds(0, 0, 490, 350), colour("DarkSlateGrey"), shape("sharp"), outlinecolour("white"), outlinethickness(4) 
checkbox bounds( 15, 10, 80, 15), text("On/Off"), channel("onoff"), value(1), fontcolour("white")
combobox bounds( 10, 40, 70, 20), channel("mode"), value(2), text("Held", "Reinit")
xypad bounds(  5, 78, 240, 260), text("Freq./Deviation"), channel("freq", "dev"), rangex(0.1, 10000, 10), rangey(0, 10.00, 0)
xypad bounds(245, 78, 240, 260), text("LPF./HPF."), channel("LPF", "HPF"), rangex(20, 20000, 20000), rangey(20, 20000,20)

rslider  bounds(90, 10, 60, 60),  text("Amplitude"), channel("amp"),     range(0, 1, 0.5, 0.5, 0.001),      fontcolour("white"), colour(50,60,70), trackercolour(150,160,170), outlinecolour("SlateGrey")
rslider  bounds(150, 10, 60, 60), text("Freq."),     channel("freq"),    range(0.1, 10000, 10, 0.25, 0.01), fontcolour("white"), colour(50,60,70), trackercolour(150,160,170), outlinecolour("SlateGrey")
rslider  bounds(205, 10, 60, 60), text("Deviation"), channel("dev"),     range(0, 10, 1),                   fontcolour("white"), colour(50,60,70), trackercolour(150,160,170), outlinecolour("SlateGrey")
rslider  bounds(260, 10, 60, 60), text("Spread"),    channel("spread"),  range(0, 1, 1),                    fontcolour("white"), colour(50,60,70), trackercolour(150,160,170), outlinecolour("SlateGrey")
rslider  bounds(315, 10, 60, 60), text("Tone Var."), channel("ToneVar"), range(0, 1.00, 0),                 fontcolour("white"), colour(50,60,70), trackercolour(150,160,170), outlinecolour("SlateGrey")
rslider  bounds(370, 10, 60, 60), text("Lowpass"),   channel("LPF"),     range(20,20000,20000,0.5),         fontcolour("white"), colour(50,60,70), trackercolour(150,160,170), outlinecolour("SlateGrey")
rslider  bounds(425, 10, 60, 60), text("Highpass"),  channel("HPF"),     range(20,20000,20,0.5),            fontcolour("white"), colour(50,60,70), trackercolour(150,160,170), outlinecolour("SlateGrey")
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100
ksmps 		= 	64
nchnls 		= 	2
0dbfs		=	1

instr	1
	konoff	chnget	"onoff"		;read in on/off switch widget value
	if konoff==0 goto SKIP		;if on/off switch is off jump to skip label
	kamp	chnget	"amp"
	kfreq	chnget	"freq"
	kdev	chnget	"dev"
	kporttime	linseg	0,0.01,0.1
	kdev	portk	kdev,kporttime
	kmode	chnget	"mode"
	kmode	=	kmode - 1
	kspread	chnget	"spread"
	ktrig	changed		kmode		;IF gkmode COUNTER IS CHANGED GENERATE A MOMENTARY '1' IMPULSE
	if ktrig==1 then			;THEREFORE IF gkmode HAS BEEN CHANGED...
	 reinit	UPDATE				;BEGIN A REINITIALISATION PASS AT LABEL 'UPDATE'
	endif					;END OF CONDITIONAL BRANCH
	UPDATE:					;LABEL 'UPDATE'. REINITIALISATION BEGINS FROM HERE.
	asig	gausstrig	kamp, kfreq, kdev, i(kmode), 1	;GENERATE GAUSSIAN TRIGGERS
	kpan	random	0.5-(kspread*0.5), 0.5+(kspread*0.5)
	asigL,asigR	pan2	asig,kpan
	rireturn				;RETURN FROM REINITIALISATION PASS


	; tone variation
	kToneVar	chnget	"ToneVar"
	if(kToneVar>0) then
 	 kcfoct	random		14-(kToneVar*10),14
	 asig	tonex		asig,cpsoct(kcfoct),1
	endif

	kpan	random	0.5-(kspread*0.5), 0.5+(kspread*0.5)
	asigL,asigR	pan2	asig,kpan

	kporttime	linseg	0,0.001,0.05

	; Lowpass Filter
	kLPF	chnget	"LPF"
	if kLPF<20000 then
	 kLPF	portk	kLPF,kporttime
	 asigL	clfilt	asigL,kLPF,0,2
	 asigR	clfilt	asigR,kLPF,0,2
	endif
	
	; Highpass Filter
	kHPF	chnget	"HPF"
	if kHPF>20 then
	 kHPF	limit	kHPF,20,kLPF
	 kHPF	portk	kHPF,kporttime
	 asigL	clfilt	asigL,kHPF,1,2
	 asigR	clfilt	asigR,kHPF,1,2
	endif

		outs	asigL,asigR		;SEND AUDIO SIGNAL TO OUTPUT
	SKIP:					;A label. Skip to here is on/off switch is off 
endin


</CsInstruments>

<CsScore>
i 1 0 [60*60*24*7]	;instrument plays for a week
</CsScore>

</CsoundSynthesizer>; PinkNoise.csd
; Written by Iain McCurdy, 2012

<Cabbage>
form caption("Pink Noise"), size(230, 80), pluginid("pnse") style("legacy")
image bounds(  0,  0,230, 80), colour("pink"), shape("rounded"), outlinecolour("red"), outlinethickness(4) 
checkbox bounds( 20, 10, 80, 15), text("On/Off"), channel("onoff"), value(0), fontcolour("black"), colour("yellow")
combobox bounds( 20, 40, 70, 20), channel("method"), value(1), text("Gardner", "Kellet", "Kellet 2")
rslider  bounds(100, 10, 60, 60), text("Amplitude"), channel("amp"),      range(0, 1, 0.5, 0.5, 0.001), textcolour("black"), trackercolour(255,100,100), colour(255,100,100)
rslider  bounds(160, 10, 60, 60), text("N.Bands"),   channel("numbands"), range(4, 32, 20, 1, 1),       textcolour("black"), trackercolour(255,100,100), colour(255,100,100)
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100
ksmps 		= 	64
nchnls 		= 	2
0dbfs		=	1	;MAXIMUM AMPLITUDE
massign	0,0

instr	1
	konoff	chnget	"onoff"		;read in on/off switch widget value
	if konoff==0 goto SKIP		;if on/off switch is off jump to skip label
	kmethod		chnget	"method"
	kmethod	=	kmethod - 1
	knumbands	chnget	"numbands"
	kamp		chnget	"amp"
	ktrig	changed	kmethod, knumbands				;GENERATE BANG (A MOMENTARY '1') IF ANY OF THE INPUT VARIABLES CHANGE
	if ktrig==1 then						;IF AN I-RATE VARIABLE HAS CHANGED
	 reinit UPDATE							;BEGIN A REINITIALISATION PASS FROM LABEL 'UPDATE'
	endif								;END OF CONDITIONAL BRANCH
	UPDATE:								;LABEL CALLED 'UPDATE'
	if kmethod=0 then						;IF GARDNER METHOD HAS BEEN CHOSEN...
		asigL	pinkish	kamp, i(kmethod), i(knumbands)		;GENERATE PINK NOISE
		asigR	pinkish	kamp, i(kmethod), i(knumbands)		;GENERATE PINK NOISE
	else								;OTHERWISE (I.E. 2ND OR 3RD METHOD HAS BEEN CHOSEN)
		anoise	unirand	2					;WHITE NOISE BETWEEN ZERO AND 2
		anoise	=	(anoise-1)				;OFFSET TO RANGE BETWEEN -1 AND 1
		asigL	pinkish anoise, i(kmethod)   			;GENERATE PINK NOISE
		asigR	pinkish anoise, i(kmethod)   			;GENERATE PINK NOISE
		asigL	=	asigL * kamp				;RESCALE AMPLITUDE WITH gkpinkamp
		asigR	=	asigR * kamp				;RESCALE AMPLITUDE WITH gkpinkamp
	endif								;END OF CONDITIONAL
	rireturn							;RETURN FROM REINITIALISATION PASS
		outs	asigL,asigR	;SEND AUDIO SIGNAL TO OUTPUT
	SKIP:				;A label. Skip to here is on/off switch is off 
endin


</CsInstruments>

<CsScore>
i 1 0 [60*60*24*7]	;instrument that reads in widget data
</CsScore>

</CsoundSynthesizer><Cabbage>
form caption("White Noise"), size(230, 90), pluginid("wnse") style("legacy")
image bounds(  0,  0,230, 90), colour("white"), shape("rounded"), outlinecolour("black"), outlinethickness(4) 
checkbox bounds( 20, 10, 80, 15), text("On/Off"), channel("onoff"), value(0), fontcolour("black")
rslider  bounds( 80, 10, 70, 70), text("Amplitude"), channel("amp"),  outlinecolour("DarkGrey"), colour("black"), range(0, 1, 0.1, 0.5, 0.001),   textcolour("black"), trackercolour("grey")
rslider  bounds(150, 10, 70, 70), text("Beta"),      channel("beta"), outlinecolour("DarkGrey"), colour("black"), range(-0.999, 0.999,0,1,0.001), textcolour("black"), trackercolour("grey")
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100
ksmps 		= 	64
nchnls 		= 	2
0dbfs		=	1	;MAXIMUM AMPLITUDE
massign	0,0

instr	1
	kporttime	linseg	0,0.001,0.05
	konoff	chnget	"onoff"		;read in on/off switch widget value
	if konoff==0 goto SKIP		;if on/off switch is off jump to skip label
	kamp	chnget	"amp"		;read in widgets...
	kamp	portk	kamp,kporttime
	kbeta	chnget	"beta"		;
	asigL 	noise 	kamp, kbeta	;GENERATE WHITE NOISE
	asigR 	noise 	kamp, kbeta	;GENERATE WHITE NOISE
		outs	asigL,asigR	;SEND AUDIO SIGNAL TO OUTPUT
	SKIP:				;A label. Skip to here is on/off switch is off 
endin


</CsInstruments>

<CsScore>
i 1 0 [60*60*24*7]	;instrument that reads in widget data
</CsScore>

</CsoundSynthesizer>; BarModel.csd
; Original physical model code by Stefan Bilbao, ported to Csound by John ffitch
; Example written by Iain McCurdy, 2015
; 
; Uses barmodel physical model of a struck bar
; Note that some tuning anomalies may exist. These are due to rounding errors in the algorithm and are largely unresolvable.
; On account of this instrument being based upon a fairly complex physical modelling algorithm, it will be unreasonable 
; to expect massive polyphony in realtime. For this reason a polyphony control mechanism is implemented to provide a means 
; to prevent underruns in realtime performance.

; CONTROLS:
; ---------
; Boundary Conditions	-	this combobox selection determines the nature of how the bar is fixed at either end 
; 				(clamped/pivoting/free)
; 				For simplification and safety, only the valid options are offered.
; 				Nonetheless care must be taken is if 'Clamped-Free' is chosen: if 'Decay' and 'Damping' 
; 				are high in combination with this choice this can lead to the fundemental building in 
; 				amplitude dangerously.
;                               The boundary conditions in general affect how stretched out the partials become, the partials
;                               are most compressed with clamped-free, next is clamped-pivoted, next clamped-clamped and finally
;                               the partials are most stretched out if pivoted-pivoted is chosen. It is also interesting to
;                               note that with a clamped-free bar model, an additional partial beneath the fundemental
;                               emerges somewhere around E3 and above. This sub-partial is roughly 2 octaves + a minor 6th
;                               below the fundemental.
;				When 'Clamped-Free' is selected the fundemental partial is unaffected by 'Damping'. 
; Keyboard Scaling  -    when active, damping, attack time, decay time and release times are influenced by the note played 
;                           with higher notes attacking and decaying quicker, and therefore reflecting real-world physics.
; Decay			-	This is the time it will take for the amplitude to decay by 30dB from its initial level.
; HOLD (button)		-	If this is active, the value for decay will be a large number and the value of the slider will be ignored. 
;				This feature can be used to create 'sustained' notes but bear in mind that a note's ability
;				to sustain will also be dependent upon the value of 'Damping'. For a sustaining timbre, 
;				'Damping' should be zero.
; Release		-	Amplitude release time once a note is released. (This can be over-ridden if polyphony limit is exceeded.
; Damping		-	High frequency damping. Larger value imply increased damping. A value of zero implies no damping.
; Polyphony		-	Polyphony limit. If this is exceeded (including notes in their release stage) 
; 				then the oldest note will be removed quickly. Amplitudes will be ramped to prevent clicks
; 				upon note removal. If zero, this mechanism is bypassed and polyphony is not limited.
; Width			-	Width of strike. Higher notes may demand a higher value for 'Width'. 
;				Higher values for Width will also result in a 'darker' tone being produced.
;				On account of the amplitude level changes that will result from changing this parameter, it should be used in conjunction with the 'Level' control.
; Attack:Time		-	Duration of the attack envelope. If zero, this envelope is bypassed.
; Attack:Amount		-	Amount of attack envelope to be applied. Basically the initial value of the attack envelope before ramping up to '1'.
; 				This envelope affects both amplitude and tone (LPF) 
; Presets		-	Some hard-wired presets to help the user get orientated. 
; Reverb:Mix		-	Dry/Wet reverb mix (100% dry - 100% wet). If mix is zero the reverb is bypassed to improve efficiency and to remove the need for an on/off switch. 
; Reverb:Size		-	Reverb size
; Level			-	Output amplitude level
; 
; Velocity Mappings: how note velocity maps to various parameters. 
; Velocity is on the x-axis, low velocitys (left hand side of the graph) being on the left side of the graph.
; Click and drag on the graphs. These should normally be single straight line graphs.
; ----------------------------------------------------------------------------------------------------------------------------------------------------
; Strike Position	-	how velocity maps to strike position across the length of the bar
; 				Note that for some Boundary Condition setting it may be more appropriate to limit the range of this graph 
; 				from zero to 0.5 (or from 0.5 to 1).
; 				For a fixed strike position, design this graph as horizontal line.
; Tone			-	velocity to tone (LPF)
; Amplitude		-	velocity to amplitude
; 
; Modulation: modulation of the scanning position of the bar. This produces spectral variation.
; ---------------------------------------------------------------------------------------------
; Mix	-	mix between an unmodulated and a modulated barmodel.
; 		Note that if this value is anything other than zero or '1' then each note played will activate 2 instances 
; 		of the barmodel opcode, effectively doubling the CPU draw.
; Rate	-	Rate of modulation. This is a fixed value (in hertz) but the rate of modulation can also be influenced 
; 		by an envelope and splinic random variation.
; x 100 (button)	-	If this button is active the value of the 'Rate' slider will be multiplied by 100. 
;				Note that very fast scanning position modulations will result in quantisation artefacts being produced.
; Envelope	-	An envelope which influences modulation rate. It will be multiplied to the value of 'Rate'.
; Duration	-	The time it will take for the above mentioned envelope to complete.
; Random:Amount	-	Amount of random splinic modulation. This function will be added to 'Rate' and 'Envelope'.
; Random:Rate	-	Rate of random splinic modulation.
; Panning	-	Width of panning modulation. The shape of this modulation will follow that of the scanning modulation.
;			To remove all modulation from the sound produced bring this slider to to zero as well as the 'Mix' slider.


<Cabbage>
form caption("Bar Model"), size(955,340), pluginid("BaMo"), colour(0,0,0), guirefresh(128) style("legacy")
label     bounds( 10, 15,150, 15), text("Boundary Conditions")
combobox  bounds( 10, 32,150, 20), channel("bc"), value(2), text("Clamped-Clamped","Clamped-Pivoted","Pivoted-Pivoted","Clamped-Free")
checkbox  bounds( 10, 70,150, 15), channel("KybdScal"), text("Keyboard Scaling") value(0)
rslider   bounds(160,  5, 80, 80), text("Decay"), channel("T30"), valuetextbox(1), textbox(1), range(0.01,30,5.5,0.5,0.01), trackercolour("yellow")
button    bounds(175, 90, 50, 15), text("HOLD","HOLD"), channel("T30_Hold"), fontcolour:0(30,30,30), fontcolour:1(255,255,100)
rslider   bounds(220,  5, 80, 80), text("Release"), channel("rel"), valuetextbox(1), textbox(1), range(0.01,30,5.5,0.5,0.01), trackercolour("yellow")
rslider   bounds(280,  5, 80, 80), text("Damping"), channel("b"), valuetextbox(1), textbox(1), range(0, 9.999,0.4,0.5,0.001), trackercolour("yellow")
rslider   bounds(350,  5, 80, 80), text("Polyphony"), channel("PolyLimit"), valuetextbox(1), textbox(1), range(0, 20,5,1,1), trackercolour("yellow")
;rslider   bounds(420,  5, 80, 80), text(""), channel(""), valuetextbox(1), range(0, 1,0.5,1,0.001), trackercolour("yellow")
rslider   bounds(420,  5, 80, 80), text("Width"), channel("wid"), valuetextbox(1), textbox(1), range(0.01, 1,0.5,1,0.01), trackercolour("yellow")
;line      bounds(505, 15, 90,  1)
image     bounds(505, 15, 90,  1), colour(30,30,30), identchannel("AttackLine")
label     bounds(525,  9, 50, 12), text("Attack"), colour(0,0,0), fontcolour(30,30,30), identchannel("AttackLabel")
rslider   bounds(490, 25, 61, 61), text("Time"), channel("AttTim"), range(0,3,0,0.5,0.001), trackercolour("yellow")
rslider   bounds(550, 25, 61, 61), text("Amount"), channel("AttAmt"), range(0, 1, 0,1,0.001), trackercolour("yellow")
label     bounds(615, 15,150, 15), text("Presets")
combobox  bounds(615, 32,140, 20), channel("preset"), value(1), text("Xylobar","Scan Envelope","Soft Sustain","Rhodes","Good Vibes","Bad Vibes","Hard Beater","Stacking Plates","Bowed Plank","Interference","Ride Cymbal","Tubular Bell", "Discord Bar")
;line      bounds(775, 15, 90,  1)
image     bounds(775, 15, 90,  1), colour(30,30,30), identchannel("ReverbLine")
label     bounds(795,  9, 50, 12), text("Reverb"), colour(0,0,0), fontcolour(30,30,30), identchannel("ReverbLabel")
rslider   bounds(760, 25, 61, 61), text("Mix"), channel("RvbMix"), range(0, 1, 0,1,0.01), trackercolour("yellow")
rslider   bounds(820, 25, 61, 61), text("Size"), channel("RvbSize"), range(0.5,0.99,0.8,1,0.01), trackercolour("yellow")
rslider   bounds(870,  5, 80, 80), text("Level"), channel("OutAmp"), valuetextbox(1), textbox(1), range(0,9.999,0.8,0.5,0.001), trackercolour("yellow")

groupbox  bounds(  5,115,400,140), text("Velocity Mappings"), colour(0,0,0,60), shape("sharp"), plant("VelocityMappings"){
label     bounds(  5, 25,120, 10), text("Strike Position")
gentable  bounds(  5, 37,120, 90), tablenumber(2), identchannel(table2), amprange(0,1,2), zoom(-1), tablecolour(turquoise), active(1), fill(0)
label     bounds(135, 25,120, 10), text("Tone")
gentable  bounds(135, 37,120, 90), tablenumber(3), identchannel(table3), amprange(0,1,3), zoom(-1), tablecolour(turquoise), active(1), fill(0)
label     bounds(265, 25,120, 10), text("Amplitude")
gentable  bounds(265, 37,120, 90), tablenumber(4), identchannel(table4), amprange(0.01,1,4), zoom(-1), tablecolour(turquoise), active(1), fill(0)
}

; MODULATION
groupbox  bounds(410,115,540,140), text("Modulation"), colour(0,0,0,60), shape("sharp"), plant("modulation"){
rslider   bounds(  5, 25, 80, 80), text("Mix"), channel("ScanMix"), valuetextbox(1), textbox(1), range(0, 1, 0,1,0.001), trackercolour("yellow")
rslider   bounds( 65, 25, 80, 80), text("Rate"), channel("scan"), valuetextbox(1), textbox(1), range(0, 1, 0.1,0.5,0.001), trackercolour("yellow")
button    bounds( 80,110, 50, 15), text("x 100","x 100"), channel("scan_x100"), fontcolour:0(30,30,30), fontcolour:1(255,255,100)
label     bounds(150, 25,120, 10), text("Envelope")
gentable  bounds(150, 37,120, 90), tablenumber(5), identchannel(table5), amprange(0.01,2,-1), zoom(-1), tablecolour(yellow), active(1), fill(0)
rslider   bounds(280, 25, 80, 80), text("Duration"), channel("ModEnvDur"), valuetextbox(1), textbox(1), range(0.1, 10, 1,0.5,0.01), trackercolour("yellow")
line      bounds(365, 35, 90,  1)
label     bounds(385, 29, 50, 12), text("Random"), colour(0,0,0)
rslider   bounds(350, 45, 61, 61), text("Amount"), channel("RndModAmt"), range(0, 1, 0,1,0.001), trackercolour("yellow")
rslider   bounds(410, 45, 61, 61), text("Rate"), channel("RndModRte"), range(0.01,10,0.1,0.5,0.001), trackercolour("yellow")
rslider   bounds(460, 25, 80, 80), text("Panning"), channel("PanDepth"), valuetextbox(1), textbox(1), range(0, 0.5, 0,1,0.001), trackercolour("yellow")
label bounds(440, 120,98,10),text("Iain McCurdy 2015")
}

keyboard bounds(4, 254, 945, 80) mouseoeverkeycolour(255, 255, 0, 128) 

;;TUNING
;image     bounds(  0,350,955,170), plant("tuning"), colour(0,0,0,0) {
;nslider bounds(  0, 15,160, 70), caption("Note Number"), channel("note"), range(0,128,0,1,1)
;nslider bounds(260, 15,160, 70), caption("Output"), channel("output"), range(0,8000,0,1,0.001)
;button    bounds(160,  0,100, 15), text("ZERO","ZERO"), channel("ZeroOffset"), fontcolour:0(30,30,30), fontcolour:1(255,255,100), latched(0)
;nslider bounds(160, 15,100, 70), caption("Offset"), channel("offset"), range(-100,100,0,1,0.01)
;checkbox  bounds(425, 15,100, 20), text("Test Tone"), channel("TestTone"), value(0)
;hslider   bounds(425, 40,120, 15), channel("TestVol"), range(0, 0.2, 0.05, 0.5,0.001), trackercolour("yellow")
;csoundoutput bounds(545,0,400,170)
;}
</Cabbage>
                    
<CsoundSynthesizer>

<CsOptions>   
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100
ksmps 		= 	4
nchnls 		= 	2
0dbfs		=	1

massign	0,2

; MAPPING FUNCTIONS: NOTE->STIFFNESS (C="CLAMPED" P="PIVOTING" F="FREE")
giCC	ftgen	0, 0, 128, -17, 0,5.887,			17,5.887,	18,6.236,	19,6.593,	20,7.01,	21,7.421,	22,7.8,		23,8.223,	24,8.773,	25,9.282,	26,9.736,	27,10.4013,	28,10.993,	29,11.52,	30,12.298,	31,12.795,	32,13.77,	33,14.57,	34,15.27,	35,16.297,	36,17.142,	37,18.21,	38,19.2,	39,20.41,	40,21.53,	41,22.710,	42,24.11,	43,25.382,	44,26.938,	45,28.385,	46,30.04,	47,31.937,	48,33.182,	49,35.13,	50,37.574,	51,39.418,	52,42.06,	53,43.962,	54,46.598,	55,49.301,	56,52.274,	57,55.16,	58,58.325,	59,61.089,	60,64.91,	61,68.63,	62,72.491,	63,76.2975,	64,80.792,	65,84.786,	66,90.089,	67,95.632,	68,99.023,	69,104.895,	70,110.928,	71,116.307,	72,122.731,	73,130.473,	74,137.982,	75,145.78,	76,153.124,	77,161.277,	78,171.217,	79,180.8015,	80,186.41,	81,198.914,	82,210.724,	83,220.499,	84,230.52,	85,244.06,	86,258.55,	87,271.361,	88,280.53,	89,297.311,	90,318.36,	91,333.471,	92,344.54,	93,358.38,	94,379.586,	95,401.92,	96,425.373,	97,449.656,	98,450,		99,473.94,	100,505.217,	101,534.021,	102,565.833,	103,599.109,	104,612.474,	105,620.586,	106,655,	107,692.93,	108,732.94,	109,775.11,	110,819.52,	111,866.25,	112,881.99,	113,882.901,	114,921.2,	115,972.4,	116,1025.96,	117,1081.92,	118,1140.28,	119,1201,	120,1264.03
giCP	ftgen	0, 0, 128, -17, 0,8.198,	16,8.198,	17,8.738,	18,9.26,	19,9.6,		20,10.37,	21,10.8889,	22,11.606,	23,12.18,	24,13.006,	25,13.681,	26,14.44,	27,15.27,	28,16.08,	29,17.026,	30,18.111,	31,19.103,	32,20.264,	33,21.4893,	34,22.68,	35,24.08,	36,25.43,	37,27.02,	38,28.5,	39,30.19,	40,32.08,	41,34.19,	42,35.98,	43,38.18,	44,40.3,	45,42.73,	46,45.32,	47,47.82,	48,50.6,	49,53.56,	50,56.6,	51,59.97,	52,63.4,	53,67.16,	54,71.11,	55,75.34,	56,79.550,	57,84.11,	58,88.870,	59,94.176,	60,99.42,	61,104.96,	62,111.51,	63,117.550,	64,124.382,	65,131.000,	66,138.704,	67,147.070,	68,154.617,	69,163.690,	70,173.640,	71,182.280,	72,193.050,	73,204.560,	74,216.790,	75,227.133,	76,240.660,	77,254.910,	78,270.080,	79,282.358,	80,299.040,	81,316.880,	82,335.660,	83,349.750,	84,370.420,	85,392.452,	86,415.640,	87,440.386,	88,456.274,	89,483.374,	90,511.980,	91,542.431,	92,574.379,	93,608.550,	94,626.050,	95,662.920,	96,702.160,	97,743.397,	98,787.520,	99,838.16,	100,881.300,	101,899.350,	102,958.290,	103,1010.900,	104,1067.740,	105,1126.700,	106,1198.630,	107,1267.480,	108,1340.940,	109,1378.15,	110,1440,	111,1521.86,	112,1608.16,	113,1608.16,	114,1794,	115,1893.7,	116,1998,	117,2107,	118,2220.7,	119,2338.9
giPP	ftgen	0, 0, 128, -17, 0,21.3,																23,21.3,	24,22.15,	25,23.1,	26,24.1259,	27,25.2,	28,26.35,	29,27.85,	30,29.5,	31,31.5,	32,33.4,	33,35.00,	34,37.5,	35,38.86,	36,41.87,	37,44.46,	38,47.15,	39,49.89,	40,52.550,	41,55.690,	42,58.950,	43,62.580,	44,66.310,	45,70.350,	46,74.280,	47,78.560,	48,83.590,	49,88.57,	50,93.83,	51,99.45,	52,105.37,	53,111.63,	54,118.35,	55,125.4,	56,132.95,	57,140.86,	58,149.24,	59,158.3,	60,167.7,	61,177.7,	62,188.5,	63,199.7,	64,211.6,	65,224.6,	66,237.94,	67,252.1,	68,267.06,	69,283.7,	70,300.56,	71,318.5,	72,337.35,	73,358.9,	74,380.14,	75,402.73,	76,426.7,	77,454.8,	78,481.8,	79,510.4,	80,540.72,	81,572.9,	82,606.9,	83,649.4,	84,687.94,	85,728.77,	86,772.01,	87,817.8,	88,866.3,	89,934.92,	90,990.31,	91,1049,	92,1111.05,	93,1176.78,	94,1246.35,	95,1319.99,	96,1455.78,	97,1541.65,	98,1632.488,	99,1728.6,	100,1830.17,	101,1937.6,	102,2051.15,	103,2171.14,	104,2297.9,	105,2735.71,	106,2894.65,	107,3062.34,	108,3239.16,	109,3425.51,	110,3621.76,	111,3828.29,	112,4045.44,	113,4273.54,	114,4512.87,	115,4763.67,	116,5026.14,	117,5300.32
giCF	ftgen	0, 0, 128, -17, 0,7.37,										20,7.37,	21,7.7,		22,8.2,		23,8.67,	24,9.2,		25,9.83,	26,10.3,	27,11,		28,11.5,	29,12.19,	30,12.92,	31,13.703,	32,14.547,	33,15.392,	34,16.368,	35,17.28,	36,18.211,	37,19.6,	38,20.8,	39,21.88,	40,23.24,	41,24.67,	42,26.111,	43,27.41,	44,29.6,	45,31.34,	46,33.2,	47,35.181,	48,37.27,	49,39.484,	50,41.828,	51,44.315,	52,46.945,	53,49.737,	54,52.69,	55,55.815,	56,59.133,	57,62.64,	58,66.365,	59,70.30,	60,74.48,	61,78.89,	62,83.58,	63,88.528,	64,93.792,	65,99.34,	66,105.245,	67,111.501,	68,118.087,	69,125.108,	70,132.486,	71,140.362,	72,148.704,	73,157.46,	74,166.81,	75,176.727,	76,187.098,	77,198.22,	78,209.991,	79,222.27,	80,235.47,	81,249.454,	82,264.266,	83,279.634,	84,296.24,	85,313.812,	86,332.43,	87,351.63,	88,372.48,	89,394.56,	90,417.93,	91,442.69,	92,468.04,	93,495.72,	94,525.03,	95,556.05,	96,588.88,	97,622.53,	98,659.21,	99,698.01,	100,739.04,	101,782.414,	102,828.27,	103,876.72,	104,928.98,	105,983.1,	106,1040.21,	107,1100.47,	108,1164.01,	109,1230.98,	110,1308.040,	111,1380.110,	112,1467.360,	113,1562.151,	114,1661.6,	115,1753.94,	116,1850.58,	117,1951.524,	118,2056.79,	119,2166.31,	120,2280,	121,2397.64
; NOTE RANGES FOR THE FOUR BOUNDARY CONDITIONS OPTIONS
giNoteRanges[]	fillarray 	17,120, 16,119, 23,117, 20,121

; POLYPHONY CONTROL
gkActiveNotes	init	0		; active notes (notes in release stage are disregarded)
giNoteTable	ftgen	0,0,128,-2,0	; note table indicating on/off status. Note number denoted by table index.
giPolyLimit	init	5

giVelFunc	ftgen	0,0,128,-16,.1,128,-1,1			; map note number to barmodel strike-velocity parameter
giWidFunc	ftgen	0,0,128,-16,0.7,128,8,8			; map note number to barmodel strike-width parameter to compensate for loss of power in higher notes
giWidVelScal	ftgen	0,0,128,-16,30000,128,-4,1000		; scaling of strike velocity according to strike width value. Strike velocity needs to be boosted if strike width is low.
; GUI GEN TABLES
giVelToPos	ftgen	2,0,128,-7,0.5,128,0			; map MIDI velocity to barmodel strike position parameter
giVelToTone	ftgen	3,0,128,-7,0.5,128,1			; map MIDI velocity to tone (LPF)
giVelToAmp	ftgen	4,0,128,-5,0.01,128,1			; map MIDI velocity to amplitude
giModEnv	ftgen	5,0,512,-5,1,512,1			; modulation rate envelope

giInterruptTime	init	0.2					; time it will take for amplitude to ramp down if a note is stopped on account of a polyphony limit violation

gisine		ftgen	0,0,4096,10,10

gasendL,gasendR	init	0

gkNoteTable[]	init	128

; UDO for an i-rate version of the 'scale' opcode
opcode	scale_i,i,iii
 ival,imax,imin	xin
 ival	=	(ival * (imax-imin)) + imin
	xout	ival
endop

; barmodel demands a high kr for high quality results whenever kscan>0, therefore it is embedded in a UDO which can dictate its own kr
opcode barmodel_ksmps,a,iiiikiiii
 ibcL, ibcR, iK, ib, kscan, iT30, ipos, iStrk, iwid	xin
 setksmps	1		; experiment with this value. Powers of 2 closer to 1 will result in higher quality results at the expense of CPU
 asig 	barmodel 	ibcL, ibcR, iK, ib,     kscan, iT30, ipos, iStrk, iwid 
 	xout		asig
endop

opcode pan2_ksmps,aa,aa
 asig,apan	xin
 setksmps	1		; experiment with this value. Powers of 2 closer to 1 will result in higher quality results at the expense of CPU
 kpan	downsamp	apan
 aL,aR	pan2	asig,kpan
	xout	aL,aR
endop


instr	1	; always on instrument. Read in widgets that will be used as global variables.
 kporttime	linseg	0,0.001,0.05
 gkscan		chnget	"scan"		
 kscan_x100	chnget	"scan_x100"
 if kscan_x100==1 then
  gkscan	*=	100
 endif
 gkScanMix	chnget	"ScanMix" 
 gkOutAmp	chnget	"OutAmp"
 gkOutAmp	portk	gkOutAmp,kporttime
 gkRndModAmt	chnget	"RndModAmt"
 gkRndModRte	chnget	"RndModRte"
 gkPanDepth	chnget	"PanDepth"
 gkRvbMix	chnget	"RvbMix"
 gkRvbSize	chnget	"RvbSize"
 gkDry		limit	(1-gkRvbMix)*2,0,1
 gkWet		limit	gkRvbMix*2,0,1
 gkKybdScal chnget  "KybdScal"
 
; ; TUNING
; ; TEST TONE
; gknote	init	60						; (used for diagnostics and tuning)
; gktrans	chnget	"trans"						; (used for diagnostics and tuning)
; kTestTone	chnget	"TestTone"					; (used for diagnostics and tuning)
; if kTestTone==1 then							; (used for diagnostics and tuning)
;  kTestVol	chnget	"TestVol"					; (used for diagnostics and tuning)
;  atest	poscil	kTestVol,cpsmidinn(gknote)*octave(gktrans),-1	; (used for diagnostics and tuning)
;  	outs	atest,atest						; (used for diagnostics and tuning)
; endif									; (used for diagnostics and tuning)
; 
; ; MIDI CONTROL OF OFFSET
; kup	ctrl7	1,1,0,10						; (used for diagnostics and tuning)
; kdn	ctrl7	1,2,0,10						; (used for diagnostics and tuning)
; kincr	=	0.0005 							; (used for diagnostics and tuning)
; gkoffset	chnget	"offset"					; (used for diagnostics and tuning)
; if kup>0 then								; (used for diagnostics and tuning)
;  chnset	gkoffset+(kincr*kup),"offset"				; (used for diagnostics and tuning)
; elseif kdn>0 then							; (used for diagnostics and tuning)
;  chnset	gkoffset-(kincr*kdn),"offset"				; (used for diagnostics and tuning)
; endif									; (used for diagnostics and tuning)
; 
; ; ZERO OFFSET
; kZeroOffset	chnget	"ZeroOffset"					; (used for diagnostics and tuning)
; ktrig	trigger	kZeroOffset,0.5,0					; (used for diagnostics and tuning)
; ktrig2	changed	gknote						; (used for diagnostics and tuning)
; if ktrig==1||ktrig2==1 then						; (used for diagnostics and tuning)
;  kzero		=	0					; (used for diagnostics and tuning)
;  chnset	kzero,"offset"						; (used for diagnostics and tuning)
; endif									; (used for diagnostics and tuning)
 
endin



instr	2	; receive midi note ons and offs
 inote	notnum								; midi note number
 ivel	veloc	0,1							; key velocity (0 to 1)
 ibc		chnget	"bc"						; Boundary Conditions selection (1,2,3 or 4)
 iNoteMin	=	giNoteRanges[(ibc*2)-2]				; minimum note number which has a corresponding mapping value for this boundary condition algorithm
 iNoteMax	=	giNoteRanges[(ibc*2)-1]				; maximum note number which has a corresponding mapping value for this boundary condition algorithm
 if inote>=iNoteMin && inote<=iNoteMax then
  	event_i	"i",3+(inote*0.001),0,3600,inote,ivel
  	;tableiw	1,inote,giNoteTable					; add note to the active notes table
	gkNoteTable[inote]	=	1
  giPolyLimit	chnget	"PolyLimit"
  
  kactive	active	p1			; scan active instances of this instrument
  if kactive>giPolyLimit&&giPolyLimit>0 then	; if polyphony limit has been exceeded...
   tablew	0,inote,giNoteTable		; remove this note number from the notes table
   turnoff2	3,1,1				; ...turn off the oldest note and allow it to release (interrupt release)
   turnoff2	p1,1,0				; turn off the oldest version of this instrument immediately
  endif
  
  krel	release					; scan for this note's MIDI release. 0 = active, 1 = released
  if (krel==1) then				; If this note has been released...
   ;tablew	0,inote,giNoteTable		; remove this note number from the notes table
	gkNoteTable[inote]	=	0
  endif
  
  if giPolyLimit>0 then				; bypass polyphony control if its value is zero
   gkActiveNotes	init	i(gkActiveNotes) + 1	; increment active notes counter at note start
   if gkActiveNotes>giPolyLimit then		; if the addition of this new note results in exceeding the polyphony limit...
    turnoff2	3,1,1				; ...turn off the oldest note and allow it to release (interrupt release)
    gkActiveNotes	limit	gkActiveNotes - 1,0,127	; decrement active notes counter
   endif
  else
   gkActiveNotes	=	0			; if no polyphony limit is being used (slider is set to zero) then leave ActiveNotes at zero 
  endif
 endif
 
endin



instr	3	; Sound producing instrument. Triggered from instrument 2.
 inote	=	p4
 ivel	=	p5
 ;kactive	table	inote,giNoteTable	; Read active value for this note from the table 1 = midi note down, 0 = midi note released
 kactive	=	gkNoteTable[p4]	
; ; TUNING
; ; REINIT
; kmetro	metro	8			; (used for diagnostics and tuning)
; if kmetro==1 then				; (used for diagnostics and tuning)
;  kchanged	changed	gkoffset		; (used for diagnostics and tuning)
;  if kchanged==1 then				; (used for diagnostics and tuning)
;   reinit RESTART				; (used for diagnostics and tuning)
;  endif					; (used for diagnostics and tuning)
; RESTART:					; (used for diagnostics and tuning)
; endif						; (used for diagnostics and tuning)
; 	chnset	inote,"note"			; (used for diagnostics and tuning)
; gknote	init	inote			; (used for diagnostics and tuning)

 iDurRatio  =       i(gkKybdScal) == 1 ? cpsmidinn(60)/cpsmidinn(inote) : 1     ; turn on or off keyboard scaling
 
 ib		    chnget	"b"			    ; damping
 ib         /=      iDurRatio
 irel		chnget	"rel"			; release time
 iT30		chnget	"T30"			; 30dB decay time
 iT30       *=      iDurRatio
 iT30_Hold	chnget	"T30_Hold"		; over-ride decay slider value (HOLD button)
 iT30		=	iT30_Hold == 1 ? 3600 : iT30	; if 'HOLD' button is active set T30 value to 3600 and ignore slider value
 ibc		chnget	"bc"			; boundary conditions selection (1,2,3 or 4)
 iwid		chnget	"wid"			; strike width
 ipos		tablei	ivel,giVelToPos,1	; map midi key velocity to strike position parameter
 itone		tablei	ivel,giVelToTone,1	; map midi key velocity to LPF cutoff frequency
 itone		scale_i	itone,14,4		; rescale 0 - 1 to 4 - 14 (oct format)
 iStrk		tablei	ivel,giVelToAmp,1	; map midi key velocity to strike velocity parameter

 ; STIFFNESS / PITCH
 if ibc==1 then		; if Clamped-Clamped
  ibcL	=	1
  ibcR	=	1 
  itab	=	giCC
 elseif ibc==2 then	; if Clamped-Pivoting
  ibcL	=	1
  ibcR	=	2
  itab	=	giCP
 elseif ibc==3 then	; if Pivoting-Pivoting
  ibcL	=	2
  ibcR	=	2
  itab	=	giPP
 elseif ibc==4 then	; if Clamped-Free
  ibcL	=	1
  ibcR	=	3
  itab	=	giCF  
 endif
 iK	table	inote,itab		; read note to stiffness mapping from the appropriate function table
 ;ioffset	chnget	"offset"	; (used for diagnostics and tuning)
 ;iK	=	iK + ioffset		; (used for diagnostics and tuning)
 chnset	iK,"output"
 
 ; VELOCITY SCALING (ACCORDING TO NOTE PLAYED). Lower notes need to have an attenuated velocity value
 iVelScal	table	inote,giVelFunc

 ; STRIKE WIDTH SCALING (ACCORDING TO NOTE PLAYED). Higher notes need to have an increased strike width value
 iWidScal	table	inote,giWidFunc
 iwid		=	iwid * iWidScal

 ; SCALE STRIKE VELOCITY ACCORDING TO STRIKE WIDTH 
 ivel	table	iwid,giWidVelScal,1
 
 ; MODULATION ENVELOPE
 iModEnvDur	chnget	"ModEnvDur"	; envelope duration
 kndx	linseg	0,iModEnvDur,1		; envelope reading index
 kModEnv	tablei	kndx,giModEnv,1	; read function
 kscan	=	gkscan * (kModEnv-0.01)	; multiply 'Rate' slider and 'Envelope'
 kporttime	linseg	0,0.05,0.1	; portamento time function
 kscan	portk	kscan, kporttime	; apply portamento smoothing (without this a click can sometimes result if scanning rate changes abruptly)
 
 ; RANDOM MODULATION
 kRandScan	rspline	0,gkRndModAmt,gkRndModRte,gkRndModRte*2	; splinic random modulation
 kscan	limit	kscan + kRandScan,0.01,10000			; added to the modulation rate value so far (and limited)
 
 ; BARMODELS
 if gkScanMix==0 then											; mix = 0
  asig 	barmodel_ksmps 	ibcL, ibcR, iK, ib,     0, iT30, ipos, ivel*iVelScal*iStrk, iwid 		; only one barmodel
 elseif gkScanMix>0 && (gkscan>0 || gkRndModAmt>0) then							; 0 < mix < 1
  asig 	barmodel_ksmps 	ibcL, ibcR, iK, ib,     0, iT30, ipos, ivel*iVelScal*iStrk, iwid 		; mix two barmodels
  asig2 	barmodel_ksmps 	ibcL, ibcR, iK, ib, kscan, iT30, ipos, ivel*iVelScal*iStrk, iwid	
  asig	ntrpol		asig, asig2, gkScanMix
 elseif gkScanMix==1 then										; mix = 1
  asig 	barmodel_ksmps 	ibcL, ibcR, iK, ib, kscan, iT30, ipos, ivel*iVelScal*iStrk, iwid 		; only one barmodel
 endif
 
 ; AMPLITUDE ATTACK ENVELOPE
 iAttAmt	chnget	"AttAmt"		; attack amount
 iAttTim	chnget	"AttTim"		; attack time
 aatt	init	1
 if iAttTim>0 then				; only create attack envelope if 'Time' is greater than zero 
  aatt	linseg		1-iAttAmt,iAttTim*iDurRatio,1
 endif
 asig	=	asig * aatt * gkOutAmp

 ; AMPLITUDE RELEASE ENVELOPE
 arel	init	1
 if kactive==0 then			; if the midi key that started this note has been released...
  arel	transeg	1,irel*iDurRatio,-4,0		; create a release envelope
  asig	=	asig * arel		; apply envelope
 endif
 kOffTrig	trigger	kactive,0.5,1	; sense when note key has been released
 kOffTrig	delayk	kOffTrig,irel	; kill note trigger delayed by normal release time to allow release segment to complete
 if kOffTrig==1 then			; when kill note trigger is finally received...
  turnoff				; turn note off
  if giPolyLimit>0 then			; ...if greater than zero
   gkActiveNotes	limit	gkActiveNotes - 1,0,127	; decrement active notes counter
  endif
 endif

 ; POLYPHONY INTERRUPT
 aInterrupt	linsegr	1,giInterruptTime,0		; if the note is forced to interrupt (due to polyphony limit violation) then this envelope will be triggered
 asig	=	asig * aInterrupt

 ; TONE CONTROL (LPF)
 aToneEnv	=	aatt*aInterrupt*arel		; cutoff frequency will follow attack, release and interrupt envelopes
 ahp,alp,abp,abr statevar asig, cpsoct(itone) * aToneEnv, 1
 asig	=	alp
 
 ; PANNING
 ;kpan	oscili	gkPanDepth,kscan*2,gisine		; panning follows scanning function (frequency doubled)
 ;aL,aR	pan2	asig, 0.5 + kpan
 apan	oscili	gkPanDepth,kscan*2,gisine		; panning follows scanning function (frequency doubled)
 aL,aR	pan2_ksmps	asig, 0.5 + apan
 
 if gkRvbMix>0 then
  gasendL	+=	aL * gkWet
  gasendR	+=	aR * gkWet
 endif
 
 	outs		aL*gkDry,aR*gkDry
endin



instr	80	; reverb
 if gkRvbMix>0 then		; if mix is zero, bypass reverb for efficiency
  aL,aR	reverbsc	gasendL,gasendR,gkRvbSize,4000
	outs		aL,aR
 	clear		gasendL,gasendR
 endif

 ; TURN LABELS ON OR OFF
 kOnTrig	trigger	gkRvbMix,0.005,0
 kOffTrig	trigger	gkRvbMix,0.005,1
 if kOnTrig==1 then
  chnset	"fontcolour(170,170,170)","ReverbLabel"
  chnset	"colour(170,170,170)","ReverbLine"
 elseif kOffTrig==1 then
  chnset	"fontcolour(30,30,30)","ReverbLabel" 
  chnset	"colour(30,30,30)","ReverbLine" 
 endif

 gkAttTim	chnget	"AttTim"
 kOnTrig	trigger	gkAttTim,0.0005,0
 kOffTrig	trigger	gkAttTim,0.0005,1
 if kOnTrig==1 then
  chnset	"fontcolour(170,170,170)","AttackLabel"
  chnset	"colour(170,170,170)","AttackLine"
 elseif kOffTrig==1 then
  chnset	"fontcolour(30,30,30)","AttackLabel" 
  chnset	"colour(30,30,30)","AttackLine" 
 endif

endin


instr	99
 kpreset	chnget	"preset"
 kpreset	init	1
 if changed(kpreset)==1 then
  reinit SET_PRESET
  SET_PRESET:
  ipreset	init	i(kpreset)
  if ipreset==1 then	; xylobar
   giVelToPos	ftgen	2,0,128,-7,0.5,128,0			; map MIDI velocity to barmodel strike position parameter
   		chnset	"tablenumber(2)","table2"
   giVelToTone	ftgen	3,0,128,-7,0.5,128,1			; map MIDI velocity to tone (LPF)
   		chnset	"tablenumber(3)","table3"
   giVelToAmp	ftgen	4,0,128,-5,0.01,128,1			; map MIDI velocity to amplitude
   		chnset	"tablenumber(4)","table4"
   giModEnv	ftgen	5,0,512,-5,1,512,1			; modulation rate envelope
   		chnset	"tablenumber(5)","table5"
		chnset	2, "bc"
		chnset	5.5, "T30"
		chnset	0, "T30_Hold"
		chnset	5.5, "rel"
   		chnset	0.4, "b"
		chnset	5, "PolyLimit"
		chnset	0.5, "wid"
		chnset  0, "AttTim"
		chnset  0, "AttAmt"
		chnset	0, "RvbMix"
		chnset	0.8, "RvbSize"
		chnset	0.8, "OutAmp"
   		chnset	0,"ScanMix"
    		chnset	0.1,"scan"
  		chnset	0,"scan_x100"
		chnset	1, "ModEnvDur"
		chnset	0, "RndModAmt"
		chnset	0.1, "RndModRte"
		chnset	0, "PanDepth"

  elseif ipreset==2 then	; Scan Envelope
   giVelToPos	ftgen	2,0,128,-7,0,128,0.5			; map MIDI velocity to barmodel strike position parameter
   		chnset	"tablenumber(2)","table2"
   giVelToTone	ftgen	3,0,128,-7,0.5,128,1			; map MIDI velocity to tone (LPF)
   		chnset	"tablenumber(3)","table3"
   giVelToAmp	ftgen	4,0,128,-5,0.5,128,1			; map MIDI velocity to amplitude
   		chnset	"tablenumber(4)","table4"
   giModEnv	ftgen	5,0,512,-5,2,512,0.01			; modulation rate envelope
   		chnset	"tablenumber(5)","table5"
		chnset	1, "bc"
		chnset	7.4, "T30"
		chnset	0, "T30_Hold"
		chnset	0.32, "rel"
   		chnset	0.006, "b"
		chnset	2, "PolyLimit"
		chnset	0.5, "wid"
		chnset  0, "AttTim"
		chnset  0, "AttAmt"
		chnset	0, "RvbMix"
		chnset	0.8, "RvbSize"
   		chnset	0.2, "OutAmp"
		chnset	1,"ScanMix"
   		chnset	0.033,"scan"   		
   		chnset	1,"scan_x100"
		chnset	0.3, "ModEnvDur"
		chnset	0, "ModRndAmt"
		chnset	0, "ModRndRte"
		chnset	0, "PanDepth"

  elseif ipreset==3 then	; Soft Sustain
   giVelToPos	ftgen	2,0,128,-7,0.9,128,0.9			; map MIDI velocity to barmodel strike position parameter
   		chnset	"tablenumber(2)","table2"
   giVelToTone	ftgen	3,0,128,-7,0.5,128,0.9			; map MIDI velocity to tone (LPF)
   		chnset	"tablenumber(3)","table3"
   giVelToAmp	ftgen	4,0,128,-5,0.5,128,1			; map MIDI velocity to amplitude
   		chnset	"tablenumber(4)","table4"
   giModEnv	ftgen	5,0,512,-5,1,512,1			; modulation rate envelope
   		chnset	"tablenumber(5)","table5"
		chnset	3, "bc"
		chnset	7.4, "T30"
		chnset	1, "T30_Hold"
		chnset	2.50, "rel"
   		chnset	0.000, "b"
		chnset	5, "PolyLimit"
		chnset	0.5, "wid"
		chnset  1, "AttTim"
		chnset  1, "AttAmt"
		chnset	0.4, "RvbMix"
		chnset	0.8, "RvbSize"
		chnset	0.218, "OutAmp"
   		chnset	0.5,"ScanMix"
   		chnset	0.113,"scan"
   		chnset	0,"scan_x100"   		  		
		chnset	0.2, "RndModAmt"
		chnset	0.4, "RndModRte"
		chnset	0.5, "PanDepth"
		
  elseif ipreset==4 then	; Rhodes
   giVelToPos	ftgen	2,0,128,-7,0.5,128,0.9			; map MIDI velocity to barmodel strike position parameter
   		chnset	"tablenumber(2)","table2"
   giVelToTone	ftgen	3,0,128,-7,0.5,128,0.7			; map MIDI velocity to tone (LPF)
   		chnset	"tablenumber(3)","table3"
   giVelToAmp	ftgen	4,0,128,-5,0.1,128,1			; map MIDI velocity to amplitude
   		chnset	"tablenumber(4)","table4"
   giModEnv	ftgen	5,0,512,-5,1,512,1			; modulation rate envelope
   		chnset	"tablenumber(5)","table5"
		chnset	3, "bc"
		chnset	11.6, "T30"
		chnset	0, "T30_Hold"
		chnset	0.08, "rel"
   		chnset	0.038, "b"
		chnset	5, "PolyLimit"
		chnset	0.98 ,"wid"
		chnset  0, "AttTim"
		chnset  0, "AttAmt"
		chnset	0, "RvbMix"
		chnset	0.8, "RvbSize"
		chnset	0.4, "OutAmp"
   		chnset	0,"ScanMix"
   		chnset	0.014,"scan"
   		chnset	1,"scan_x100"   		  		
		chnset	0, "RndModAmt"
		chnset	0.1, "RndModRte"
		chnset	0.420, "PanDepth"

  elseif ipreset==5 then	; Good Vibes
   giVelToPos	ftgen	2,0,128,-7,0.4,128,0.5			; map MIDI velocity to barmodel strike position parameter
   		chnset	"tablenumber(2)","table2"
   giVelToTone	ftgen	3,0,128,-7,0.5,128,0.7			; map MIDI velocity to tone (LPF)
   		chnset	"tablenumber(3)","table3"
   giVelToAmp	ftgen	4,0,128,-5,0.5,128,1			; map MIDI velocity to amplitude
   		chnset	"tablenumber(4)","table4"
   giModEnv	ftgen	5,0,512,-5,1,512,0.8			; modulation rate envelope
   		chnset	"tablenumber(5)","table5"
		chnset	3, "bc"
		chnset	16.6, "T30"
		chnset	0, "T30_Hold"
		chnset	0.3, "rel"
   		chnset	0.038, "b"
		chnset	5, "PolyLimit"
		chnset	0.54 ,"wid"
		chnset  0.005, "AttTim"
		chnset  1, "AttAmt"
		chnset	0, "RvbMix"
		chnset	0.8, "RvbSize"
		chnset	0.323, "OutAmp"
   		chnset	0.548,"ScanMix"
   		chnset	0.014,"scan"
   		chnset	1,"scan_x100"   		  		
		chnset	8.84, "ModEnvDur"
		chnset	0, "RndModAmt"
		chnset	0.1, "RndModRte"
		chnset	0.420, "PanDepth"

  elseif ipreset==6 then	; Bad Vibes
   giVelToPos	ftgen	2,0,128,-7,0,128,0.5			; map MIDI velocity to barmodel strike position parameter
   		chnset	"tablenumber(2)","table2"
   giVelToTone	ftgen	3,0,128,-7,1,128,1			; map MIDI velocity to tone (LPF)
   		chnset	"tablenumber(3)","table3"
   giVelToAmp	ftgen	4,0,128,-5,0.5,128,1			; map MIDI velocity to amplitude
   		chnset	"tablenumber(4)","table4"
   giModEnv	ftgen	5,0,512,-5,1,512,0.8			; modulation rate envelope
   		chnset	"tablenumber(5)","table5"
		chnset	4, "bc"
		chnset	16.6, "T30"
		chnset	1, "T30_Hold"
		chnset	0.08, "rel"
   		chnset	0.038, "b"
		chnset	5, "PolyLimit"
		chnset	0.54 ,"wid"
		chnset  0.012, "AttTim"
		chnset  1, "AttAmt"
		chnset	0.21, "RvbMix"
		chnset	0.65, "RvbSize"
		chnset	0.058, "OutAmp"
   		chnset	1,"ScanMix"
   		chnset	0.007,"scan"
   		chnset	1,"scan_x100"   		  		
		chnset	8.84, "ModEnvDur"
		chnset	0.272, "RndModAmt"
		chnset	1.313, "RndModRte"
		chnset	0.420, "PanDepth"

  elseif ipreset==7 then	; Hard Beater
   giVelToPos	ftgen	2,0,128,-7,0.3,128,0			; map MIDI velocity to barmodel strike position parameter
   		chnset	"tablenumber(2)","table2"
   giVelToTone	ftgen	3,0,128,-7,0.5,128,1			; map MIDI velocity to tone (LPF)
   		chnset	"tablenumber(3)","table3"
   giVelToAmp	ftgen	4,0,128,-5,0.01,128,1			; map MIDI velocity to amplitude
   		chnset	"tablenumber(4)","table4"
   giModEnv	ftgen	5,0,512,-5,1,512,1			; modulation rate envelope
   		chnset	"tablenumber(5)","table5"
		chnset	1, "bc"
		chnset	3.0, "T30"
		chnset	0, "T30_Hold"
		chnset	3.00, "rel"
   		chnset	0.365, "b"
		chnset	4, "PolyLimit"
		chnset	0.47 ,"wid"
		chnset  0, "AttTim"
		chnset  0, "AttAmt"
		chnset	0, "RvbMix"
		chnset	0.25, "RvbSize"
		chnset	1.8, "OutAmp"
   		chnset	0,"ScanMix"
   		chnset	0.01,"scan"
   		chnset	0,"scan_x100"   		  		
		chnset	0.1, "ModEnvDur"
		chnset	0.0, "RndModAmt"
		chnset	0.01, "RndModRte"
		chnset	0.0, "PanDepth"

  elseif ipreset==8 then	; Stacking Plates
   giVelToPos	ftgen	2,0,128,-7,0.3,128,0			; map MIDI velocity to barmodel strike position parameter
   		chnset	"tablenumber(2)","table2"
   giVelToTone	ftgen	3,0,128,-7,1,128,1			; map MIDI velocity to tone (LPF)
   		chnset	"tablenumber(3)","table3"
   giVelToAmp	ftgen	4,0,128,-5,0.01,128,1			; map MIDI velocity to amplitude
   		chnset	"tablenumber(4)","table4"
   giModEnv	ftgen	5,0,512,-5,1,512,1			; modulation rate envelope
   		chnset	"tablenumber(5)","table5"
		chnset	4, "bc"
		chnset	0.11, "T30"
		chnset	0, "T30_Hold"
		chnset	0.11, "rel"
   		chnset	0.269, "b"
		chnset	0, "PolyLimit"
		chnset	0.26 ,"wid"
		chnset  0, "AttTim"
		chnset  0, "AttAmt"
		chnset	0, "RvbMix"
		chnset	0.8, "RvbSize"
		chnset	2.5, "OutAmp"
   		chnset	0,"ScanMix"
   		chnset	0.01,"scan"
   		chnset	0,"scan_x100"   		  		
		chnset	0.1, "ModEnvDur"
		chnset	0.0, "RndModAmt"
		chnset	0.01, "RndModRte"
		chnset	0.0, "PanDepth"

  elseif ipreset==9 then	; Bowed Plank
   giVelToPos	ftgen	2,0,128,-7,0.3,128,0			; map MIDI velocity to barmodel strike position parameter
   		chnset	"tablenumber(2)","table2"
   giVelToTone	ftgen	3,0,128,-7,1,128,1			; map MIDI velocity to tone (LPF)
   		chnset	"tablenumber(3)","table3"
   giVelToAmp	ftgen	4,0,128,-5,0.01,128,1			; map MIDI velocity to amplitude
   		chnset	"tablenumber(4)","table4"
   giModEnv	ftgen	5,0,512,-5,1,512,1			; modulation rate envelope
   		chnset	"tablenumber(5)","table5"
		chnset	2, "bc"
		chnset	6, "T30"
		chnset	0, "T30_Hold"
		chnset	6, "rel"
   		chnset	0.144, "b"
		chnset	5, "PolyLimit"
		chnset	0.47 ,"wid"
		chnset  0.19, "AttTim"
		chnset  1, "AttAmt"
		chnset	0, "RvbMix"
		chnset	0.8, "RvbSize"
		chnset	2.1, "OutAmp"
   		chnset	0,"ScanMix"
   		chnset	0.01,"scan"
   		chnset	0,"scan_x100"   		  		
		chnset	0.1, "ModEnvDur"
		chnset	0.0, "RndModAmt"
		chnset	0.01, "RndModRte"
		chnset	0.0, "PanDepth"

  elseif ipreset==10 then	; Interference
   giVelToPos	ftgen	2,0,128,-7,0.33,128,0.1			; map MIDI velocity to barmodel strike position parameter
   		chnset	"tablenumber(2)","table2"
   giVelToTone	ftgen	3,0,128,-7,0.6,128,1			; map MIDI velocity to tone (LPF)
   		chnset	"tablenumber(3)","table3"
   giVelToAmp	ftgen	4,0,128,-5,0.1,128,1			; map MIDI velocity to amplitude
   		chnset	"tablenumber(4)","table4"
   giModEnv	ftgen	5,0,512,-5,1,512,0.2			; modulation rate envelope
   		chnset	"tablenumber(5)","table5"
		chnset	1, "bc"
		chnset	2.73, "T30"
		chnset	0, "T30_Hold"
		chnset	0.37, "rel"
   		chnset	0.011, "b"
		chnset	2, "PolyLimit"
		chnset	0.29 ,"wid"
		chnset  0, "AttTim"
		chnset  0, "AttAmt"
		chnset	0, "RvbMix"
		chnset	0.8, "RvbSize"
		chnset	0.5, "OutAmp"
   		chnset	1,"ScanMix"
   		chnset	0.318,"scan"
   		chnset	1,"scan_x100"   		  		
		chnset	2.73, "ModEnvDur"
		chnset	0.0, "RndModAmt"
		chnset	0.01, "RndModRte"
		chnset	0.0, "PanDepth"

  elseif ipreset==11 then	; Ride Cymbal
   giVelToPos	ftgen	2,0,128,-7,0.33,128,0.1			; map MIDI velocity to barmodel strike position parameter
   		chnset	"tablenumber(2)","table2"
   giVelToTone	ftgen	3,0,128,-7,0,128,1			; map MIDI velocity to tone (LPF)
   		chnset	"tablenumber(3)","table3"
   giVelToAmp	ftgen	4,0,128,-5,0.1,128,1			; map MIDI velocity to amplitude
   		chnset	"tablenumber(4)","table4"
   giModEnv	ftgen	5,0,512,-5,1,512,1			; modulation rate envelope
   		chnset	"tablenumber(5)","table5"
		chnset	4, "bc"
		chnset	18.12, "T30"
		chnset	0, "T30_Hold"
		chnset	0.28, "rel"
   		chnset	0.028, "b"
		chnset	3, "PolyLimit"
		chnset	0.26 ,"wid"
		chnset  0, "AttTim"
		chnset  0, "AttAmt"
		chnset	0.25, "RvbMix"
		chnset	0.8, "RvbSize"
		chnset	0.3, "OutAmp"
   		chnset	1,"ScanMix"
   		chnset	1,"scan"
   		chnset	1,"scan_x100"   		  		
		chnset	10, "ModEnvDur"
		chnset	0.0, "RndModAmt"
		chnset	0.01, "RndModRte"
		chnset	0.0, "PanDepth"

  elseif ipreset==12 then	; Tubular Bell
   giVelToPos	ftgen	2,0,128,-7,0.33,128,0.1			; map MIDI velocity to barmodel strike position parameter
   		chnset	"tablenumber(2)","table2"
   giVelToTone	ftgen	3,0,128,-7,0,128,0.8			; map MIDI velocity to tone (LPF)
   		chnset	"tablenumber(3)","table3"
   giVelToAmp	ftgen	4,0,128,-5,0.1,128,1			; map MIDI velocity to amplitude
   		chnset	"tablenumber(4)","table4"
   giModEnv	ftgen	5,0,512,-5,1,512,0.8			; modulation rate envelope
   		chnset	"tablenumber(5)","table5"
		chnset	4, "bc"
		chnset	30, "T30"
		chnset	0, "T30_Hold"
		chnset	30, "rel"
   		chnset	0.001, "b"
		chnset	1, "PolyLimit"
		chnset	0.14 ,"wid"
		chnset  0, "AttTim"
		chnset  0, "AttAmt"
		chnset	0.25, "RvbMix"
		chnset	0.65, "RvbSize"
		chnset	0.5, "OutAmp"
   		chnset	0.352,"ScanMix"
   		chnset	0.178,"scan"
   		chnset	0,"scan_x100"   		  		
		chnset	10, "ModEnvDur"
		chnset	0.0, "RndModAmt"
		chnset	0.01, "RndModRte"
		chnset	0.15, "PanDepth"

  elseif ipreset==13 then	; Discord Bar
   giVelToPos	ftgen	2,0,128,-7,0.33,128,0.1			; map MIDI velocity to barmodel strike position parameter
   		chnset	"tablenumber(2)","table2"
   giVelToTone	ftgen	3,0,128,-7,0,128,0.8			; map MIDI velocity to tone (LPF)
   		chnset	"tablenumber(3)","table3"
   giVelToAmp	ftgen	4,0,128,-5,0.1,128,1			; map MIDI velocity to amplitude
   		chnset	"tablenumber(4)","table4"
   giModEnv	ftgen	5,0,512,-5,1,512,1			; modulation rate envelope
   		chnset	"tablenumber(5)","table5"
		chnset	4, "bc"
		chnset	2.95, "T30"
		chnset	0, "T30_Hold"
		chnset	0.28, "rel"
   		chnset	1.274, "b"
		chnset	1, "PolyLimit"
		chnset	0.26 ,"wid"
		chnset  0, "AttTim"
		chnset  0, "AttAmt"
		chnset	0.25, "RvbMix"
		chnset	0.8, "RvbSize"
		chnset	0.437, "OutAmp"
   		chnset	1,"ScanMix"
   		chnset	0.425,"scan"
   		chnset	1,"scan_x100"   		  		
		chnset	10, "ModEnvDur"
		chnset	0.0, "RndModAmt"
		chnset	0.01, "RndModRte"
		chnset	0, "PanDepth"

  endif
 endif 
endin

</CsInstruments>

<CsScore>
i 1  0 [3600*24*7]	; read in widgets
i 80 0 [3600*24*7]	; reverb
i 99 0 [3600*24*7]	; presets
</CsScore>

</CsoundSynthesizer>
; BassGuitar.csd
; Written by Iain McCurdy, 2011

; Physical model of a plucked string with a pickup point. 
; Model is created from first principles in order to implement some improvements over the existing Csound opcodes for plucked strings.
; A bandpass filter is employed within the delay buffer used to implement the pluck which facilitates filtering to specific harmonics. 
; Conventional damping effects are still possible when cutoff frequency ratio = 1.

<Cabbage>
form caption("Bass Guitar"), size(550, 200), pluginid("basg") style("legacy")

#define RSliderStyle # colour(150,205,150), textcolour("LightGreen"), outlinecolour(0,0,0), trackercolour(yellow)#

image    bounds(  0,  0,550,200),  colour("DarkGreen"), shape("sharp"), outlinecolour("white"), outlinethickness(3)
rslider  bounds( 10, 10, 60, 60),  text("Sustain"),      channel("feedback"), range(0.9,1, 0.999, 2, 0.001), $RSliderStyle
rslider  bounds( 70, 10, 60, 60),  text("Filt. Ratio"), channel("FiltRatio"), range(0.5, 32, 1, 0.5), $RSliderStyle
rslider  bounds(130, 10, 60, 60),  text("B.width"),     channel("bw"), range(1, 32, 16), $RSliderStyle
rslider  bounds(190, 10, 60, 60),  text("Att"),         channel("att"), range(0, 3, 1,0.5), $RSliderStyle
checkbox bounds(260, 20, 30, 30),  text("Legato")       channel("legato"),FontColour("LightGreen"), colour("yellow")  value(1)
label    bounds(252, 54, 43, 14),  text("Legato"), FontColour("LightGreen")
rslider  bounds(300, 10, 60, 60),  text("Leg.Speed"),        channel("LegSpeed"),  range(0.01,1,0.05,0.5), $RSliderStyle
rslider  bounds(360, 10, 60, 60),  text("Vib.Depth"),        channel("VibDep"),    range(0, 1, 0.25, 0.75, 0.001), $RSliderStyle
rslider  bounds(420, 10, 60, 60),  text("Vib.Rate"),         channel("VibRte"),    range(0.5, 20, 3, 0.5), $RSliderStyle
rslider  bounds(480, 10, 60, 60),  text("Level"),            channel("level"),     range(0, 1, 0.7), $RSliderStyle
hslider  bounds( 15, 70,525, 40),  text("Pickup Position"), channel("PickupPos"), range(0.01, 0.99, 0.1), $RSliderStyle
keyboard bounds(  5,115,540, 80)
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100
ksmps 		= 	64
nchnls 		= 	2
0dbfs		=	1	;MAXIMUM AMPLITUDE
massign	0,2

gkNoteTrig	init	0
giwave	ftgen	0,0,4097,11,20,1,0.5	;waveform used by excitation (pluck) signal
gisine	ftgen	0,0,4097,10,1		;sine wave (used by lfos)

gkactive	init	0	; Will contain number of active instances of instr 3 when legato mode is chosen. NB. notes in release stage will not be regarded as active. 

;UDOs
;UDO for plucked electric string - using a UDO facilitates the use of ksmps=1 to improve sound quality
opcode	PluckedElectricString,a,aakkkak
	asig,acps,kcutoff,kbw,kfeedback,aPickupPos,kporttime	xin
	setksmps	1
	;smooth krate variables according to the local ksmps and kr
	
	kcutoff	portk		kcutoff,kporttime
	kbw	portk		kbw,kporttime
	
	acutoff	interp		kcutoff
	kcutoff	downsamp	acutoff
	abw	interp		kbw
	kbw	downsamp	abw
	kbw		limit	kcutoff*kbw,0.001,10000	;limit bandwidth values to prevent explosion
	aDelTim	limit	1/acps,0,1	;derive required delay time from cycles per second value (reciprocal) and limit range
		
	afb	init	0					;audio feedback signal used by delay buffer
	atap1	vdelay	asig+afb,aDelTim*aPickupPos*1000,1000	;tap 1. Nut

	atap2	vdelay	-atap1,aDelTim*(1-aPickupPos)*1000,1000	;tap 2, Tailpiece
	
	atap2	butbp	atap2,kcutoff,kbw			;bandpass filter (nb. within delay buffer)

	afb	=	atap2*-kfeedback			;create feedback signal to add to input for next iteration

		xout	atap1+atap2				;return audio to caller instrument. NB. audio at pickup is a mixture (with positive and negative interference) of wave reflected from the bridge and the nut (the two points of fixture of the string) 
endop

;UDO for lowpass filter attack enveloping - using a UDO permits setting ksmps=1 in order to improve sound quality
opcode	butlpsr,a,aii
	setksmps	1
	asig,icps,idur	xin
	kcfenv		expseg	icps,idur,15000,1,15000
	asig	butlp	asig,kcfenv
		xout	asig
endop

instr	1	;read in widgets - this instrument runs constantly during performance
	gkfeedback	chnget	"feedback"
	gkFiltRatio	chnget	"FiltRatio"
	gkbw		chnget	"bw"
	gkatt		chnget	"att"
	gklegato	chnget	"legato"
	gkLegSpeed	chnget	"LegSpeed"
	gkVibDep	chnget	"VibDep"
	gkVibRte	chnget	"VibRte"
	gklevel		chnget	"level"
	gkPickupPos	chnget	"PickupPos"
endin

instr	2	;triggered via MIDI
	gkNoteTrig	init	1	;at the beginning of a new note set note trigger flag to '1'
	icps		cpsmidi		;read in midi note pitch in cycles per second
	givel		veloc	0,1	;read in midi note velocity

	gkcps	=	icps		;update a global krate variable for note pitch

	if i(gklegato)==0 then		;if we are *not* in legato mode...
	 inum	notnum						; read midi note number (0 - 127)
	 	event_i	"i",p1+1+(inum*0.001),0,-1,icps		; call sound producing instr
	 krel	release						; release flag (1 when note is released, 0 otherwise)
	 if krel==1 then					; when note is released...
	  turnoff2	p1+1+(inum*0.001),4,1			; turn off the called instrument
	 endif							; end of conditional
	else				;otherwise... (i.e. legato mode)
	 iactive	=	i(gkactive)			;number of active notes of instr 3 (note in release are disregarded)
	 if iactive==0 then					;...if no notes are active
	  event_i	"i",p1+1,0,-1				;...start a new held note
	 endif
	endif
endin

instr	3
	kporttime	linseg	0,0.001,1		;portamento time function rises quickly from zero to a held value
	kporttime	=	kporttime*gkLegSpeed	;scale portamento time function with value from GUI knob widget
	
	if i(gklegato)==1 then				;if we are in legato mode...
	 krel	release					;sense when  note has been released
	 gkactive	=	1-krel			;if note is in release, gkactive=0, otherwise =1
	 kcps	portk	gkcps,kporttime			;apply portamento smooth to changes in note pitch (this will only have an effect in 'legato' mode)
	 acps	interp	kcps				;create a a-rate version of pitch (cycles per second)
	 kactive	active	p1-1			;...check number of active midi notes (previous instrument)
	 if kactive==0 then				;if no midi notes are active...
	  turnoff					;... turn this instrument off
	 endif
	else						;otherwise... (polyphonic / non-legato mode)
	 acps	=	p4		 		;pitch equal to the original note pitch
	endif
	
	aptr	line	0,1/i(gkcps),1			;pointer that will be used to read excitation signal waveform function table
	asig	tablei	aptr,giwave,1,0,0		;create excitation (pluck) signal
	asig	butlp	asig,cpsoct(4+(givel*8))	;lowpass filter excitation signal according to midi note velocity of this note 
	asig	buthp	asig,i(gkcps)			;highpass filter excitation signal (this could possibly be made adjustable using a GUI widget)
	
	kcutoff		limit	gkcps*gkFiltRatio,20,20000	;cutoff of frequency of the bandpass filter will be relative to the pitch of the note. Limit it to prevent out of range values that would cause filter expolosion.
	
	;In legato mode modulations are reinitialised
	if gkNoteTrig==1&&gklegato==1 then
	 reinit	RESTART_ENVELOPE
	endif
	RESTART_ENVELOPE:
	krise	linseg	0,0.3,0,1.5,1			;build-up envelope - modulations do not begin immediately
	rireturn
	arise	interp	krise				;interpolation prevents discontinuities (clicks) when oscili lfos are reinitialised
	avib	oscili	0.8*arise*gkVibDep,gkVibRte,gisine	;vibrato
	acps	=	acps*semitone(avib)
	atrm	oscili	0.8*arise*gkVibDep,gkVibRte,gisine,0	;tremolo

	gkPickupPos	portk	gkPickupPos,kporttime		;smooth changes made to pickup position slider
	aPickupPos	interp	gkPickupPos			;interpolate k-rate pickup position variable to create an a-rate version
	ares 		PluckedElectricString   asig, acps, kcutoff, gkbw, gkfeedback, aPickupPos,kporttime	;call UDO - using a UDO facilitates the use of a different ksmps value (ksmps=1 and kr=sr) to optimise sound quality
	
	aenv		linsegr	0.7,0.05,0			;amplitude envelope
	
	if i(gkatt)>0 then					;if attack time is anything greater than zero call the lowpass filter envelope
	 ares		butlpsr	ares,i(gkcps),i(gkatt)		;a UDO is used again to allow the use of ksmps=1
	endif
	
	ares		=	ares*aenv*(1+atrm)*gklevel	;scale amplitude of audio signal with envelope, tremolo and level knob widget
			outs	ares,ares
	gkNoteTrig	=	0				;reset new-note trigger (in case it was '1')
endin

</CsInstruments>

<CsScore>
i 1 0 [60*60*24*7]	;instrument that reads in widget data
</CsScore>

</CsoundSynthesizer>Clavinet.csd - an emulation of the Hohner Clavinet D6
-----------------------------------------------------

Pickup Selection
----------------
CA - neck pickup only (pickup A)
CB - bridge pickup only (pickup B)
DA - both pickups in phase
DB - bridge pickup (pickup B) 180 degrees out of phase w.r.t the neck pickup 

Setup
-----
Pick A - position of the first pickup (range 0 - 1). Typically referred to as the 'neck' pickup
Pick B - position of the second pickup (range 0 - 1). Typically referred to as the 'bridge' pickup
 (NB. the relevant pickup has to be 'active' according to the CD AB switches in order for you to be able to here changes to it pickup position.)
Mod.A - the pickup position can also modulated by an LFO. This control controls the depth of this modulation
Mod.B - Depth of this modulation for the second pickup
Rate A - Rate of modulation for the first pickup
Rate B - Rate of modulation for the second pickup
Env.A - The pickup position can be modulated by a simple single segment envelope. This is typically used to add an particualar attack nuance to the sound. This control controls the initial amplitude of this envelope (can be positive or negative). The envelope always ends at zero.
Env.B - Envelope amplitude for the second pickup.
Time A - Duration of the envelope segment for the first pickup
Time B - Duration of the envelope segment for the second pickup
Pluck - location of the 'pluck' (range 0 - 1). Should be close to zero for a typical clavinet behaviour
Damp - string vibration damping that is applied while a note is being held. String damping is also dependent upon the note played using a 'key tracking' function table 'girefl'. In general lower notes should experience greater damping.
HPF - this controls the cutoff frequency of a highpass filter that the signal passes through. 
      The value supplied here is multiplied by the fundemental frequency of the note played to derive the cutoff frequency.
      Therefore if a value of '2' is supplied the cutoff will always by twice the fundemental, i.e. the frequency of the first harmonic/second partial.
      This control can be used to remove the emphasis of the fundemental partial.
      If this control is at its minimum setting the filter is bypassed.
LPF - behaves in a similar way to HPF but in respect to a lowpass filter. This control, if reduced, can be used to soften the brightness of a note's attack.
      If this control is at its maximum setting the filter is bypassed.
Inharm - applies inharmonicity to the spectrum produced by repluck. Negative values compress the spectrum, positive values expand the spectrum and zero leaves the spectrum unaffected. 

Release
-------
 * Poorly maintained clavinets exhibit a release 'pluck' as the rubber pad which strikes and frets is lifted from the string when the key is released. The is on account of the rubber pad wearing out.
Ampl - amplitude of the release 'pluck'
Tone - a tone control applied to the release 'pluck' (this will also affect amplitude)
D.Time - time it takes for full damping to be applied (this control has a subtle effect)
Damp - amount of damping that is applied to string vibrations whenever a key is
released (this amount of damping is achieved after 'D.Time' seconds). Note that the 'Damp'
control in the 'Setup' pop-up panel also has an impact upon the release damping.
A.Time - amplitude release time. If this is too short, vibration damping may not be heard and the above controls may not appear to do anything 

Filters
-------
 The D6 Clavinet design incorporates four bandpass filters which can be switched in or out of the circuit.
 Emphasising four different frequency bands from high to low they are named 'brilliant', 'treble', 'medium' and 'soft'
 Cutoff frequencies (fco), levels and Q values for each of the four filters can be adjusted.
 Obviously the relevant filter has to be activated in order to be able to hear changes made to its settings.
 The four filters are in a parallel arrangement as opposed to being in series.

<Cabbage>
form caption("Clavinet"), size(550, 170), pluginid("clav"), colour(228,156,28), guirefresh(64) style("legacy")

#define RSliderStyle textcolour(black), outlinecolour(50,50,50)

image bounds(0,0,550,170), colour(228,156,28), shape("sharp")

; filter switches
checkbox bounds( 10,  5, 70, 15), text("Brilliant") channel("brilliant"), fontcolour(50,50,50), colour("lime")
checkbox bounds( 10, 25, 70, 15), text("Treble") channel("treble"), fontcolour(50,50,50), colour("lime"), value(1)
checkbox bounds( 10, 45, 70, 15), text("Medium") channel("medium"), fontcolour(50,50,50), colour("lime")
checkbox bounds( 10, 65, 70, 15), text("Soft") channel("soft"), fontcolour(50,50,50), colour("lime")

; pickup configuration switches
checkbox bounds( 80,  5, 70, 15), text("C/D") channel("C_D"), fontcolour(50,50,50), colour("lime"), value(1)
checkbox bounds( 80, 25, 70, 15), text("A/B") channel("A_B"), fontcolour(50,50,50), colour("lime"), value(1)

; controls pertaining to the setup of the instrument (pickup positions, pluck position, damping etc.) accessed in a pop-up panel
button   bounds(140,  5, 100, 30), channel("setup_Button"), text("Setup")
groupbox bounds(140, 25, 232, 305),  colour(228,156,28), plant("Setup"), outlinethickness(0), popup(1), identchannel("setupPlant")
{
image   bounds(  0,  0,172, 305),  colour(228,156,28)
rslider bounds(  5,  8, 55, 55), text("Pick A"), colour(195,126,  0), channel("pickA"),   range(0, 1.00, 0.25, 1, 0.001), textcolour(black),  $RSliderStyle
rslider bounds( 55,  8, 55, 55), text("Pick B"), colour(195,126,  0), channel("pickB"),   range(0, 1.00, 0.07, 1, 0.001), textcolour(black),  $RSliderStyle
rslider bounds(  5, 68, 55, 55), text("Mod A"),  colour(225,156, 28), channel("ModA"),   range(0,0.50, 0.03, 0.5, 0.001), textcolour(black), $RSliderStyle
rslider bounds( 55, 68, 55, 55), text("Mod B"),  colour(225,156, 28), channel("ModB"),   range(0,0.50, 0.03, 0.5, 0.001), textcolour(black), $RSliderStyle
rslider bounds(  5,128, 55, 55), text("Rate A"), colour(255,186, 58), channel("RateA"),   range(0,14.00, 0.2, 0.5, 0.001), textcolour(black), $RSliderStyle
rslider bounds( 55,128, 55, 55), text("Rate B"), colour(255,186, 58), channel("RateB"),   range(0,14.00, 0.15, 0.5, 0.001), textcolour(black), $RSliderStyle
rslider bounds(  5,188, 55, 55), text("Env.A"),  colour(255,216, 88), channel("EnvA"),   range(-1, 1.00, 0), textcolour(black), $RSliderStyle

rslider bounds( 55,188, 55, 55), text("Env.B"),  colour(255,216, 88), channel("EnvB"),   range(-1, 1.00, 0), textcolour(black), $RSliderStyle
rslider bounds(  5,248, 55, 55), text("Time A"), colour(255,246,118), channel("TimeA"),   range(0, 1.00, 0.05, 0.5, 0.001), textcolour(black), $RSliderStyle
rslider bounds( 55,248, 55, 55), text("Time B"), colour(255,246,118), channel("TimeB"),   range(0, 1.00, 0.05, 0.5, 0.001), textcolour(black), $RSliderStyle
line bounds(110, 25,  1, 260), colour( 50, 50, 50)
rslider bounds(112,  8, 55, 55), text("Pluck"),  colour(195,126,  0), channel("plk"),     range(0, 1.00, 0.005, 0.5, 0.0001), textcolour(black), $RSliderStyle
rslider bounds(112, 68, 55, 55), text("Damp"),   colour(225,156, 28), channel("SusDamp"), range(-1.00, 1.00, 0), textcolour(black), $RSliderStyle
rslider bounds(112,128, 55, 55), text("HPF"),    colour(255,186, 58), channel("HPF"),     range(0,16.0, 0), textcolour(black), $RSliderStyle
rslider bounds(112,188, 55, 55), text("LPF"),    colour(255,216, 88), channel("LPF"),     range(1.0,72, 72, 0.375, 0.0001), textcolour(black), $RSliderStyle
line bounds(170, 25,  1, 260), colour( 50, 50, 50)
rslider bounds(172,  8, 55, 55), text("Inharm."),colour(255,216, 88), channel("inharm"),  range(-0.99,0.99, 0), textcolour(black), $RSliderStyle
rslider bounds(172, 68, 55, 55), text("Mix"), colour(255,216, 88), channel("FSMix"),  range(0, 1, 1), textcolour(black), $RSliderStyle
rslider bounds(172,128, 55, 55), text("Decay"), colour(255,216, 88), channel("FSEnvTime"),  range(0, 1, 0), textcolour(black), $RSliderStyle
rslider bounds(172,188, 55, 55), text("Feedback"), colour(255,216, 88), channel("FS_FB_Amt"),  range(0, 0.6, 0), textcolour(black), $RSliderStyle
button  bounds(174,248, 51, 20), text("Key Follow","Key Follow"), fontcolour:0(100,100,100), fontcolour:1(255,255,170), value(0), latched(1), channel("FSKeyFollow") 
}

; controls pertaining to the release stage of a note accessed in a pop-up panel
button bounds(250,   5, 100, 30), channel("release_Button"), text("Release")
groupbox bounds(250, 25, 265, 65),  colour(228,156,28), plant("Release"), outlinethickness(0), popup(1), identchannel("releasePlant")
{
image   bounds(  0,  0,265, 65),  colour(228,156,28)
rslider bounds(  5,  8, 55, 55), text("Ampl."),  colour(255,186,58), channel("RelAmpl"),  range(0, 20.00, 2), textcolour(black), $RSliderStyle
rslider bounds( 55,  8, 55, 55), text("Tone"),   colour(255,186,58), channel("RelTone"),  range(100, 8000, 1000), textcolour(black), $RSliderStyle  
rslider bounds(105,  8, 55, 55), text("D.Time"), colour(255,186,58), channel("RelDTime"), range(0.001, 1, 0.01, 0.5, 0.001), textcolour(black), $RSliderStyle
rslider bounds(155,  8, 55, 55), text("Damp"),   colour(255,186,58), channel("RelDamp"),  range(0.10, 0.99, 0.95), textcolour(black), $RSliderStyle
rslider bounds(205,  8, 55, 55), text("A.Time"), colour(255,186,58), channel("RelATime"), range(0.01,20, 0.05, 0.5, 0.01), textcolour(black), $RSliderStyle
}

; controls pertaining to the setup of the instrument's bandpass filters accessed in a pop-up panel
button bounds(360,  5, 100, 30), channel("filters_Button"), text("Filters")
groupbox bounds(360, 25, 230, 195),  colour(228,156,28), plant("Filters"), outlinethickness(0), popup(1), identchannel("filtersPlant")
{
image    bounds(  0,  0,230,195),  colour(228,156,28)
label    bounds( 10,  5, 45, 12), text("Brilliant"), colour(228,156,28), fontcolour(50,50,50)
label    bounds( 64,  5, 45, 12), text("Treble"),    colour(228,156,28), fontcolour(50,50,50)
label    bounds(121,  5, 45, 12), text("Medium"),    colour(228,156,28), fontcolour(50,50,50)
label    bounds(174,  5, 45, 12), text("Soft"),      colour(228,156,28), fontcolour(50,50,50)
checkbox bounds( 26, 18, 10, 10), channel("brilliant"), colour("lime"), value(0), shape("ellipse"), active(0)
checkbox bounds( 81, 18, 10, 10), channel("treble"),    colour("lime"), value(0), shape("ellipse"), active(0)
checkbox bounds(136, 18, 10, 10), channel("medium"),    colour("lime"), value(0), shape("ellipse"), active(0)
checkbox bounds(191, 18, 10, 10), channel("soft"),      colour("lime"), value(0), shape("ellipse"), active(0)
rslider  bounds(  5, 30, 55, 55), channel("fco1"),  text("fco.1"),  colour(235,166,38),  range(50,5000,2500,0.5), textcolour(black), $RSliderStyle
rslider  bounds( 60, 30, 55, 55), channel("fco2"),  text("fco.2"),  colour(235,166,38),  range(50,5000,1000,0.5), textcolour(black), $RSliderStyle
rslider  bounds(115, 30, 55, 55), channel("fco3"),  text("fco.3"),  colour(235,166,38),  range(50,5000, 500,0.5), textcolour(black), $RSliderStyle
rslider  bounds(170, 30, 55, 55), channel("fco4"),  text("fco.4"),  colour(235,166,38),  range(50,5000, 200,0.5), textcolour(black), $RSliderStyle
rslider  bounds(  5, 85, 55, 55), channel("gain1"), text("Gain 1"), colour(255,216,88),  range(0.50,30,  3,0.5), textcolour(black), $RSliderStyle
rslider  bounds( 60, 85, 55, 55), channel("gain2"), text("Gain 2"), colour(255,216,88),  range(0.50,30,2.3,0.5), textcolour(black), $RSliderStyle
rslider  bounds(115, 85, 55, 55), channel("gain3"), text("Gain 3"), colour(255,216,88),  range(0.50,30,1.3,0.5), textcolour(black), $RSliderStyle
rslider bounds(170, 85, 55, 55), channel("gain4"),  text("Gain 4"), colour(255,216,88),  range(0.50,30,1.4,0.5), textcolour(black), $RSliderStyle
rslider bounds(  5,140, 55, 55), channel("Q1"),     text("Q 1"),    colour(255,255,138), range(0.50,30,1.25,0.5), textcolour(black), $RSliderStyle
rslider bounds( 60,140, 55, 55), channel("Q2"),     text("Q 2"),    colour(255,255,138), range(0.50,30,1   ,0.5), textcolour(black), $RSliderStyle
rslider bounds(115,140, 55, 55), channel("Q3"),     text("Q 3"),    colour(255,255,138), range(0.50,30,1   ,0.5), textcolour(black), $RSliderStyle
rslider bounds(170,140, 55, 55), channel("Q4"),     text("Q 4"),    colour(255,255,138), range(0.50,30,2   ,0.5), textcolour(black), $RSliderStyle
line bounds( 59, 25,  1, 150), colour(50,50,50)
line bounds(114, 25,  1, 150), colour(50,50,50)
line bounds(169, 25,  1, 150), colour(50,50,50)
}

rslider  bounds(470,  5, 65, 65), text("Level"), colour(255,186,58), channel("level"), range(0, 8.00, 0.5, 0.5), textcolour(black), $RSliderStyle

; presets
image      bounds(250, 45,100, 37), colour(228,156, 28), outlinecolour( 50, 50, 50), outlinethickness(1), shape("sharp"),plant("presets"){
label      bounds( 10,  2, 80, 11), text("PRESETS"), fontcolour( 50, 50, 50)
combobox   bounds( 10, 15, 80, 18), channel("preset"), value(1), text("Clavinet 1", "Clavinet 2", "Clavinet 3", "Clavinet 4", "Clavinet 5", "Clavinet 6", "Clavinet 7", "Clavinet 8", "Clavinet 9", "Clavinet 10")
}

keyboard bounds(  5, 85,540, 80)
label bounds(440, 73,  110, 11), text("Iain McCurdy |2013|"), fontcolour(50,50,50)

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100
ksmps 		= 	16
nchnls 		= 	2
0dbfs		=	1
massign	0,2

; table used to map of note played to bridge relection
girefl	ftgen	0,0,128,-27, 0,0.4, 36,0.4, 72,0.01, 127,0.01
gisine	ftgen	0,0,4096,10,1
gitri	ftgen	0,0,4096,7,0,1024,1,2046,-1,1024,0

opcode	FreqShifter,a,aki
	ain,kfshift,ifn	xin					;READ IN INPUT ARGUMENTS
	areal, aimag hilbert ain				;HILBERT OPCODE OUTPUTS TWO PHASE SHIFTED SIGNALS, EACH 90 OUT OF PHASE WITH EACH OTHER
	asin 	oscili       1,    kfshift,     ifn,          0
	acos 	oscili       1,    kfshift,     ifn,          0.25	
	;RING MODULATE EACH SIGNAL USING THE QUADRATURE OSCILLATORS AS MODULATORS
	amod1	=		areal * acos
	amod2	=		aimag * asin	
	;UPSHIFTING OUTPUT
	aFS	= (amod1 - amod2)
		xout	aFS				;SEND AUDIO BACK TO CALLER INSTRUMENT
endop


instr	1	; presets
 kval1	=	0.5
 kval2	=	1
 kpreset	chnget	"preset"
 ktrig		changed	kpreset
 if ktrig==1 then
  reinit	PRESET
  turnoff2	2,0,0
  PRESET:
  
  #define	SEND_SETTINGS(N'brilliant'treble'medium'soft'C_D'A_B'pickA'pickB'ModA'ModB'RateA'RateB'EnvA'EnvB'TimeA'TimeB'plk'SusDamp'HPF'LPF'inharm'RelAmpl'RelTone'RelDTime'RelDamp'RelATime'brilliant'treble'medium'soft'fco1'fco2'fco3'fco4'gain1'gain2'gain3'gain4'Q1'Q2'Q3'Q4'level)#
  if i(kpreset)==$N then
   chnset	$brilliant	,"brilliant"
   chnset	$treble		,"treble"
   chnset	$medium		,"medium"
   chnset	$soft		,"soft"
   chnset	$C_D		,"C_D"
   chnset	$A_B		,"A_B"
   chnset	$pickA		,"pickA"
   chnset	$pickB		,"pickB"
   chnset	$ModA		,"ModA"
   chnset	$ModB		,"ModB"
   chnset	$RateA		,"RateA"
   chnset	$RateB		,"RateB"
   chnset	$EnvA		,"EnvA"
   chnset	$EnvB		,"EnvB"
   chnset	$TimeA		,"TimeA"
   chnset	$TimeB		,"TimeB"
   chnset	$plk		,"plk"
   chnset	$SusDamp	,"SusDamp"
   chnset	$HPF		,"HPF"
   chnset	$LPF		,"LPF"
   chnset	$inharm		,"inharm"   
   chnset	$RelAmpl	,"RelAmpl"
   chnset	$RelTone	,"RelTone"
   chnset	$RelDTime	,"RelDTime"
   chnset	$RelDamp	,"RelDamp"
   chnset	$RelATime	,"RelATime"
   chnset	$brilliant	,"brilliant"
   chnset	$treble		,"treble"
   chnset	$medium		,"medium"
   chnset	$soft		,"soft"
   chnset	$fco1		,"fco1"
   chnset	$fco2		,"fco2"
   chnset	$fco3		,"fco3"
   chnset	$fco4		,"fco4"
   chnset	$gain1		,"gain1"
   chnset	$gain2		,"gain2"
   chnset	$gain3		,"gain3"
   chnset	$gain4		,"gain4"
   chnset	$Q1		,"Q1"
   chnset	$Q2		,"Q2"
   chnset	$Q3		,"Q3"
   chnset	$Q4		,"Q4"
   chnset	$level		,"level"
  endif#
;				 			brilliant	treble	medium	soft	C_D		A_B		pickA			pickB			ModA			ModB			RateA			RateB			EnvA			EnvB			TimeA			TimeB			plk				SusDamp			HPF				LPF				inharm		RelAmpl			RelTone			RelDTime		RelDamp			RelATime		brilliant	treble	medium	soft	fco1	fco2	fco3	fco4		gain1		gain2		gain3		gain4		Q1			Q2			Q3		Q4			level
  $SEND_SETTINGS(1			'0			'1		'0		'0		'1		'1		'0.25           '0.0700000003   '0.0300000012   '0.0300000012   '0.200000003    '0.150000006    '0  	'0  	'0.0500000007   '0.0500000007   '0.00499999989  '0           	'0              '72         '0              '2          	'1000        	'0.0100000007	'0.949999988	'0.049999997'0		'1      '0      '0      '2500   '1000   '500        '200        '3          '2.29999995 '1.29999995 '1.39999998 '1.25       '1      '1          '2                   '0.5                 )
  $SEND_SETTINGS(2			'0			'0		'1		'0		'1		'0		'0.938000023    '0.0500000007   '0.0300000012   '0.0300000012   '0.200000003    '0.150000006    '0  	'0  	'0.0500000007   '0.0500000007   '0.165399998 	'0.50999999     '0              '39.6390991 '0           	'0          	'1000        	'0.0100000007	'0.359999985	'4.01999998	'0		'0      '1      '0      '2500   '1000   '500        '200        '3          '2.29999995 '1.29999995 '1.39999998 '1.25       '1      '1          '2                   '0.925000072)
  $SEND_SETTINGS(3			'0			'0		'1		'0		'1		'0		'0.120000005	'0.252000004	'0.0300000012	'0.0300000012	'0.200000003	'0.150000006	'0		'0		'0.0500000007	'0.0500000007	'0.00079999998	'0.0799999759	'2.04999995		'8.57209969	'-0.50999999	'2.15999985		'2358.80005		'0.0650000051	'0.300000012	'8			'0		'0		'1		'0		'2500	'1000	'500		'200		'3			'2.29999995	'1.29999995	'1.39999998	'1.25		'1		'1			'2		'1.21700001)  
  $SEND_SETTINGS(4			'0			'1		'0		'0		'1		'0		'0.530000031	'0.462000012	'0.0300000012	'0.0300000012	'0.200000003	'0.150000006	'0		'0		'0.0500000007	'0.0500000007	'0.269099981	'-1				'0				'25.2099991	'0				'2				'1000			'0.0100000007	'0.879999995	'0.049999997'0		'1		'0		'0		'2500	'1000	'500		'200		'3			'2.29999995	'1.29999995	'1.39999998	'1.25		'1		'1			'2		'0.5)
  $SEND_SETTINGS(5			'0			'1		'0		'1		'0		'1		'0.398000032	'0.522000015	'0.0300000012	'0.0300000012	'0.200000003	'0.150000006	'0		'0		'0.0500000007	'0.0500000007	'0.285899997	'0.0999999791	'0				'31.4514999	'0				'0				'1000			'0.0100000007	'0.579999983	'3.91999984	'0		'1		'0		'1		'2500	'1000	'500		'200		'3			'2.29999995	'1.29999995	'1.39999998	'1.25		'1		'1			'2		'0.461000025)
  $SEND_SETTINGS(6			'0			'1		'0		'0		'1		'1		'0.0940000042	'0.398000032	'0.0300000012	'0.0300000012	'0.200000003	'0.150000006	'0		'0		'0.0500000007	'0.0500000007	'0.128700003	'0.299999982	'0				'72'0'0'1000'0.0100000007	'0.280000001	'1.39999998		'0				'1				'0			'0		'2500	'1000	'500	'200	'3		'2.29999995	'1.29999995	'1.39999998	'1.25		'1			'1			'2 			'0.5)
  $SEND_SETTINGS(7			'1			'1		'0		'0		'1		'0		'0.00200000009	'0.950000048	'0.0300000012	'0.0300000012	'0.200000003	'0.150000006	'0		'0		'0.0500000007	'0.0500000007	'0.128700003	'0.299999982	'3.46000004		'24.0676003	'0				'0'1000			'0.0100000007	'0.280000001	'3.32999992		'1			'1		'0		'0		'2500	'1000	'500	'200		'3			'2.29999995	'1.29999995	'1.39999998	'1.25		'1 			'1		'2			'4.26300001)
  $SEND_SETTINGS(8			'1			'1		'0		'0		'1		'0		'0.584000051	'0.450000018	'0.0300000012	'0.0300000012	'0.200000003	'0.150000006	'0		'0		'0.0500000007	'0.0500000007	'0.23709999		'0.459999979	'1.46999991		'16.7103996	'0				'0'1000			'0.0100000007	'0.140000001	'3.58999991		'1			'1		'0		'0		'2500	'1000	'500	'200		'3			'2.29999995	'1.29999995	'1.39999998	'1.25		'1 			'1		'2			'0.720000029)
  $SEND_SETTINGS(9			'1			'0		'0		'0		'0		'0		'0.25			'0.0700000003	'0.0300000012	'0.0300000012	'0.200000003	'0.150000006	'0		'0		'0.0500000007	'0.0500000007	'0.00499999989	'0'0'25.5985985	'0				'2			'1000			'0.0100000007	'0.949999988	'0.049999997	'1				'0			'0		'0		'2500	'1000	'500	'200	'3			'2.29999995	'1.29999995	'1.39999998	'1.25		'1			'1 			'2		'1.92100012)
  $SEND_SETTINGS(10			'1			'0		'0		'0		'1		'0		'0.25			'0.0700000003	'0.0300000012	'0.0300000012	'0.200000003	'0.150000006	'0		'0		'0.0500000007	'0.0500000007	'0.00499999989	'0'0'25.5985985	'0				'2			'1000			'0.0100000007	'0.949999988	'0.049999997	'1				'0			'0		'0		'2500	'1000	'500	'200	'3			'2.29999995	'1.29999995	'1.39999998	'1.25		'1			'1 			'2		'1.92100012) 
  rireturn
 endif
endin

giActiveNotes	ftgen	0,0,128,-2,0

instr	2	; RESPOND TO MIDI NOTES
 inum		notnum
 		event_i	"i",3+(inum*0.001),0,-1,cpsmidi(),inum,veloc(0,1)
 		tablew	1-release(),inum,giActiveNotes
endin

instr	3
 ibrilliant	chnget	"brilliant"	; filter switch
 itreble	chnget	"treble"	; filter switch
 imedium	chnget	"medium"	; filter switch
 isoft		chnget	"soft"		; filter switch
 iC_D		chnget	"C_D"		; single/dual pickup selector
 iA_B		chnget	"A_B"		; neck/bridge pickup selector
 gklevel	chnget	"level"		; output volume control

 icps		=	p4		; cps read from midi
 inum		=	p5		; note number read from midi
 ivel		=	p6		; velocity read from midi

 kActive	table	inum,giActiveNotes	; activity of the key that triggered this note
 if kActive==0 then				; if the key has been released...
  turnoff					; turnoff this instrument immediately
 endif

 kactive	active	p1,0,1
 kIntrpt	init	0
 if kactive>4 then
  kIntrpt	=	1
  turnoff
 endif
 kIntrptTrig	trigger	kIntrpt,0.5,0

 ; pluck position is an i-rate variable so a mechanism is created to re-initialise the instrument if it is changed in realtime
 kplk	chnget	"plk"			; pluck position
 ktrig	changed	kplk			; if GUI knob changes, generate a trigger
 if ktrig==1 then			; if triggered...
  reinit	UPDATE			; reinitialise...
 endif				
 UPDATE:				; ...from here (until the end of the instrument)
 iplk	=	i(kplk)			; cast k-rate pluck position to i-rate variable
 
 ; pickup positions
 kpickA	chnget	"pickA"			; neck pickup position
 kpickB	chnget	"pickB"			; bridge pickup position
 
 ; string vibration damping / reflectivity
 irefl		table		inum,girefl			; read reflectivity for this note from function table (lower notes will experience more damping)
 iRelDTime	chnget		"RelDTime"			; release damping time: time for damping state to be established
 iRelDamp	chnget		"RelDamp"			; amount of damping upon release
 krefl		linsegr		irefl,iRelDTime,iRelDamp	; upon note release vibrations are damped quickly and dramatically
 kSusDamp	chnget		"SusDamp"			; user controlled modulation of string vibration damping
 krefl		limit		krefl+kSusDamp,0.001,0.999	; consolidate reflection/damping value and limit possible values to prevent out of range values
 iamp		=		ivel*0.3
 kenv		expseg		1, 0.01,0.001,1,0.001		; create an amplitude envelope for the noise burst
 axcite		pinkish		kenv-0.001			; create a pink noise signal
 axcite		tone		axcite,icps*2
 krelease	release						; sense release of note
 iRelAmpl	chnget		"RelAmpl"			; release pluck amplitude
 iRelTone	chnget		"RelTone"			; tone of the release pluck
 if krelease==1 then						; if key is released...
  axcite	mpulse		iRelAmpl,0			; audio impulse is created as an implementation of the release pluck impulse 
  axcite	butlp		axcite,iRelTone			; lowpass filter the impulse
 endif
 
 kModA		chnget		"ModA"				; pickup position modulation depth
 kModB		chnget		"ModB"
 kRateA		chnget		"RateA"				; pickup position modulation rate
 kRateB		chnget		"RateB"
 
 iEnvA		chnget		"EnvA"				; pickup position envelope modulation depth
 iEnvB		chnget		"EnvB"
 iTimeA		chnget		"TimeA"				; pickup position envelope modulation time
 iTimeB		chnget		"TimeB"
 
 kenv1		transeg		iEnvA,iTimeA,-4,0		; envelope applied to the pickup position (pickup A)
 kenv2		transeg		iEnvB,iTimeB,-4,0		; envelope applied to the pickup position (pickup B)
 kmod1		oscili		kModA,kRateA,gitri		; lfo used to modulate pickup position (pickup A)
 kmod2		oscili		kModB,kRateB,gitri		; lfo used to modulate pickup position (pickup B)
 kpickA		limit		kpickA + kmod1 + kenv1, 0, 1	; consolidate pickup position between fixed value, lfo and envelope. Also protect against out of range values. (pickup A)
 kpickB		limit		kpickB + kmod2 + kenv2, 0, 1	; consolidate pickup position between fixed value, lfo and envelope. Also protect against out of range values. (pickup B)
 
 iinharm	    chnget		"inharm"			    ; inharmonicity of the tone. negative values compress the spectrum, positive values expand it. Compensation will be applied to the fundemental so that it will remain consistent.
 iFShift	    =		    icps*iinharm		    ; amount of frequency shift (in CPS)
 iFSMix         chnget  "FSMix"
 iFSKeyFollow   chnget  "FSKeyFollow"
 iFSEnvTime     chnget  "FSEnvTime"
 iFS_FB_Amt     chnget  "FS_FB_Amt"
 
 ;a1 		repluck 	iplk, iamp, icps-iFShift, kpickA, krefl, axcite	; employ plucked string model (pickup A)
 ;a2 		repluck 	iplk, iamp, icps-iFShift, kpickB, krefl, axcite	; employ plucked string model (pickup B)
 a1 		repluck 	iplk, iamp, icps, kpickA, krefl, axcite	; employ plucked string model (pickup A)
 a2 		repluck 	iplk, iamp, icps, kpickB, krefl, axcite	; employ plucked string model (pickup B)
 
 
 if(iinharm!=0) then						; only apply frequency shifting if inharmonicity is anything other than zero
  aFS1,aFS2    init    0
  iFShift   =   iFSKeyFollow == 1 ? iFShift*(cpsoct(4)/icps) : iFShift
  if iFSEnvTime>0 then
   kFSEnv       transeg 1, (1-iFSEnvTime)*3, -2, 0
   aFS1		FreqShifter	a1+aFS1*iFS_FB_Amt,iFShift*kFSEnv,gisine		; call frequency shifting UDO
   aFS2		FreqShifter	a2+aFS2*iFS_FB_Amt,iFShift*kFSEnv,gisine
  else
   aFS1		FreqShifter	a1+aFS1*iFS_FB_Amt,iFShift,gisine		; call frequency shifting UDO
   aFS2		FreqShifter	a2+aFS2*iFS_FB_Amt,iFShift,gisine
  endif
  
  a1        ntrpol          a1, aFS1, iFSMix
  a2        ntrpol          a2, aFS2, iFSMix
 endif
 
 if(iC_D==0&&iA_B==0) then	;CA - neck pickup only
  asig	=	a1
 elseif(iC_D==0&&iA_B==1) then	;CB - bridge pickup only
  asig	=	a2
 elseif(iC_D==1&&iA_B==0) then	;DA - both pickups in phase
  asig	=	a1 + a2
 elseif(iC_D==1&&iA_B==1) then	;DB - both pickups. Pickup B 180 degrees out of phase
  asig	=	a1 - a2
 endif
 
 ; velocity to brightness
 icf		=		(ivel*6)+8			; cutoff frequency in 'oct' format
 asig		butlp		asig,cpsoct(icf)		; lowpass filter audio signal
 
 ; filter switches
 kfco1		chnget		"fco1"	; filter cutoffs
 kfco2		chnget		"fco2"
 kfco3		chnget		"fco3"
 kfco4		chnget		"fco4"
 kQ1		chnget		"Q1"	; filter q's
 kQ2		chnget		"Q2"
 kQ3		chnget		"Q3"
 kQ4		chnget		"Q4"
 kgain1		chnget		"gain1"	; filter gains
 kgain2		chnget		"gain2"
 kgain3		chnget		"gain3"
 kgain4		chnget		"gain4"
  
 ; filters
 amix	=	0	; audio mix of filter outputs (reset to silence upon each iteration)
 if(ibrilliant==1) then ; if 'brilliant' selected...
  afilt		rbjeq 		asig, kfco1, 1, kQ1, 1, 4		; bandpass filter sound
  amix		=		amix + (afilt * kgain1)			; add a scaled amount of filtered signal to filter mix signal
 endif
 if(itreble==1) then ; if 'treble' selected...
  afilt		rbjeq 		asig, kfco2, 1, kQ2, 1, 4		; bandpass filter sound                                      
  amix		=		amix + (afilt * kgain2)                 ; add a scaled amount of filtered signal to filter mix signal
 endif	
 if(imedium==1) then ; if 'medium' selected...
  afilt		rbjeq 		asig, kfco3, 1, kQ3, 1, 4		; bandpass filter sound                                      
  amix		=		amix + (afilt * kgain3)                 ; add a scaled amount of filtered signal to filter mix signal
 endif
 if(isoft==1) then ; if 'soft' selected...
  afilt		rbjeq 		asig, kfco4, 1, kQ4, 1, 4		; bandpass filter sound                                      
  amix		=		amix + (afilt * kgain4)                 ; add a scaled amount of filtered signal to filter mix signal
 endif
 if((ibrilliant + itreble + imedium + isoft)==0) then	; if no filters selected...
  amix	=	asig					; ...just send unfiltered audio to filter section output
 endif
 
 ; key following highpass filter
 kHPF		chnget		"HPF"					; highpass filter multiple
 if kHPF>0 then								; if HPF control is greater than 1...
  kcf		limit		icps*kHPF,20,sr/2			; prevent out of range values which would cause the filter to 'blow up'
  amix		buthp		amix,kcf				; filter tone relative to note fundemental
 endif
 
 ; key following lowpass filter
 kLPF		chnget		"LPF"					; lowpass filter multiple
 if kLPF<72 then							; if LPF control is greater than 1...
  kcf		limit		icps*kLPF,20,sr/2			; prevent out of range values which would cause the filter to 'blow up'
  amix		butlp		amix,kcf				; filter tone relative to note fundemental
 endif
 
 ; release envelope
 iRelATime	chnget		"RelATime"				; amplitude release time
 aenv		transegr	1, iRelATime, -4, 0		; amplitude release envelope (senses key release before entering final/only segment)
 
 ; output signal
 aout		=		amix * aenv * gklevel			; apply release envelope and level control
 		outs		aout, aout				; send audio to outputs
endin



instr 1000				; launches plant popups
 klaunch	init		0
 #define LAUNCH_PLANT(name)
 #
 kpressed	chnget 		"$name._Button"
 if changed(kpressed)==1 then
   Smsg 	sprintfk 	"show(%d), pos(1, 19)", klaunch
   		chnset 		Smsg, "$name.Plant"
 endif
 #
 $LAUNCH_PLANT(setup)
 $LAUNCH_PLANT(release)
 $LAUNCH_PLANT(filters)
 klaunch	=		1
endin

</CsInstruments>

<CsScore>
i 1    0 [60*60*24*7]	; presets
i 1000 0 [60*60*24*7]	; plant pop-ups
</CsScore>

</CsoundSynthesizer>; GuitarChords.csd
; Written by Iain McCurdy, 2012.

<Cabbage>
form size(650, 265), caption("Guitar Chords"), pluginid("guit"), guirefresh(64) style("legacy")

label  bounds( 54, -1, 25, 10), text("Mute"), FontColour("white")
label  bounds( 84, -1, 25, 10), text("Open"), FontColour("white")

combobox bounds(  3, 10, 50, 15), channel("TuneHighE"), value(64), text("G9","F#9","F9","E9","D#9","D9","C#9","C9","B8","A#8","A8","G#8","G8","F#8","F8","E8","D#8","D8","C#8","C8","B7","A#7","A7","G#7","G7","F#7","F7","E7","D#7","D7","C#7","C7","B6","A#6","A6","G#6","G6","F#6","F6","E6","D#6","D6","C#6","C6","B5","A#5","A5","G#5","G5","F#5","F5","E5","D#5","D5","C#5","C5","B4","A#4","A4","G#4","G4","F#4","F4","E4","D#4","D4","C#4","C4","B3","A#3","A3","G#3","G3","F#3","F3","E3","D#3","D3","C#3","C3","B2","A#2","A2","G#2","G2","F#2","F2","E2","D#2","D2","C#2","C2","B1","A#1","A1","G#1","G1","F#1","F1","E1","D#1","D1","C#1","C1","B0","A#0","A0","G#0","G0","F#0","F0","E0","D#0","D0","C#0","C0","B-1","A#-1","A-1","G#-1","G-1","F#-1","F-1","E-1","D#-1","D-1","C#-1","C-1")
combobox bounds(  3, 30, 50, 15), channel("TuneB"),     value(69), text("G9","F#9","F9","E9","D#9","D9","C#9","C9","B8","A#8","A8","G#8","G8","F#8","F8","E8","D#8","D8","C#8","C8","B7","A#7","A7","G#7","G7","F#7","F7","E7","D#7","D7","C#7","C7","B6","A#6","A6","G#6","G6","F#6","F6","E6","D#6","D6","C#6","C6","B5","A#5","A5","G#5","G5","F#5","F5","E5","D#5","D5","C#5","C5","B4","A#4","A4","G#4","G4","F#4","F4","E4","D#4","D4","C#4","C4","B3","A#3","A3","G#3","G3","F#3","F3","E3","D#3","D3","C#3","C3","B2","A#2","A2","G#2","G2","F#2","F2","E2","D#2","D2","C#2","C2","B1","A#1","A1","G#1","G1","F#1","F1","E1","D#1","D1","C#1","C1","B0","A#0","A0","G#0","G0","F#0","F0","E0","D#0","D0","C#0","C0","B-1","A#-1","A-1","G#-1","G-1","F#-1","F-1","E-1","D#-1","D-1","C#-1","C-1")
combobox bounds(  3, 50, 50, 15), channel("TuneG"),     value(73), text("G9","F#9","F9","E9","D#9","D9","C#9","C9","B8","A#8","A8","G#8","G8","F#8","F8","E8","D#8","D8","C#8","C8","B7","A#7","A7","G#7","G7","F#7","F7","E7","D#7","D7","C#7","C7","B6","A#6","A6","G#6","G6","F#6","F6","E6","D#6","D6","C#6","C6","B5","A#5","A5","G#5","G5","F#5","F5","E5","D#5","D5","C#5","C5","B4","A#4","A4","G#4","G4","F#4","F4","E4","D#4","D4","C#4","C4","B3","A#3","A3","G#3","G3","F#3","F3","E3","D#3","D3","C#3","C3","B2","A#2","A2","G#2","G2","F#2","F2","E2","D#2","D2","C#2","C2","B1","A#1","A1","G#1","G1","F#1","F1","E1","D#1","D1","C#1","C1","B0","A#0","A0","G#0","G0","F#0","F0","E0","D#0","D0","C#0","C0","B-1","A#-1","A-1","G#-1","G-1","F#-1","F-1","E-1","D#-1","D-1","C#-1","C-1")
combobox bounds(  3, 70, 50, 15), channel("TuneD"),     value(78), text("G9","F#9","F9","E9","D#9","D9","C#9","C9","B8","A#8","A8","G#8","G8","F#8","F8","E8","D#8","D8","C#8","C8","B7","A#7","A7","G#7","G7","F#7","F7","E7","D#7","D7","C#7","C7","B6","A#6","A6","G#6","G6","F#6","F6","E6","D#6","D6","C#6","C6","B5","A#5","A5","G#5","G5","F#5","F5","E5","D#5","D5","C#5","C5","B4","A#4","A4","G#4","G4","F#4","F4","E4","D#4","D4","C#4","C4","B3","A#3","A3","G#3","G3","F#3","F3","E3","D#3","D3","C#3","C3","B2","A#2","A2","G#2","G2","F#2","F2","E2","D#2","D2","C#2","C2","B1","A#1","A1","G#1","G1","F#1","F1","E1","D#1","D1","C#1","C1","B0","A#0","A0","G#0","G0","F#0","F0","E0","D#0","D0","C#0","C0","B-1","A#-1","A-1","G#-1","G-1","F#-1","F-1","E-1","D#-1","D-1","C#-1","C-1")
combobox bounds(  3, 90, 50, 15), channel("TuneA"),     value(83), text("G9","F#9","F9","E9","D#9","D9","C#9","C9","B8","A#8","A8","G#8","G8","F#8","F8","E8","D#8","D8","C#8","C8","B7","A#7","A7","G#7","G7","F#7","F7","E7","D#7","D7","C#7","C7","B6","A#6","A6","G#6","G6","F#6","F6","E6","D#6","D6","C#6","C6","B5","A#5","A5","G#5","G5","F#5","F5","E5","D#5","D5","C#5","C5","B4","A#4","A4","G#4","G4","F#4","F4","E4","D#4","D4","C#4","C4","B3","A#3","A3","G#3","G3","F#3","F3","E3","D#3","D3","C#3","C3","B2","A#2","A2","G#2","G2","F#2","F2","E2","D#2","D2","C#2","C2","B1","A#1","A1","G#1","G1","F#1","F1","E1","D#1","D1","C#1","C1","B0","A#0","A0","G#0","G0","F#0","F0","E0","D#0","D0","C#0","C0","B-1","A#-1","A-1","G#-1","G-1","F#-1","F-1","E-1","D#-1","D-1","C#-1","C-1")
combobox bounds(  3,110, 50, 15), channel("TuneLowE"),  value(88), text("G9","F#9","F9","E9","D#9","D9","C#9","C9","B8","A#8","A8","G#8","G8","F#8","F8","E8","D#8","D8","C#8","C8","B7","A#7","A7","G#7","G7","F#7","F7","E7","D#7","D7","C#7","C7","B6","A#6","A6","G#6","G6","F#6","F6","E6","D#6","D6","C#6","C6","B5","A#5","A5","G#5","G5","F#5","F5","E5","D#5","D5","C#5","C5","B4","A#4","A4","G#4","G4","F#4","F4","E4","D#4","D4","C#4","C4","B3","A#3","A3","G#3","G3","F#3","F3","E3","D#3","D3","C#3","C3","B2","A#2","A2","G#2","G2","F#2","F2","E2","D#2","D2","C#2","C2","B1","A#1","A1","G#1","G1","F#1","F1","E1","D#1","D1","C#1","C1","B0","A#0","A0","G#0","G0","F#0","F0","E0","D#0","D0","C#0","C0","B-1","A#-1","A-1","G#-1","G-1","F#-1","F-1","E-1","D#-1","D-1","C#-1","C-1")

checkbox bounds( 59, 30, 15, 15), channel("B_Mute"),     colour(255, 20, 20), radiogroup(2)
checkbox bounds( 59, 50, 15, 15), channel("G_Mute"),     colour(255, 20, 20), radiogroup(3)
checkbox bounds( 59, 70, 15, 15), channel("D_Mute"),     colour(255, 20, 20), radiogroup(4)
checkbox bounds( 59, 90, 15, 15), channel("A_Mute"),     colour(255, 20, 20), radiogroup(5)
checkbox bounds( 59,110, 15, 15), channel("LowE_Mute"),  colour(255, 20, 20), radiogroup(6), value(1)

checkbox bounds( 89, 30, 15, 15), channel("B0"),     colour(  0,255,  0), radiogroup(2)
checkbox bounds( 89, 50, 15, 15), channel("G0"),     colour(  0,255,  0), radiogroup(3)
checkbox bounds( 89, 70, 15, 15), channel("D0"),     colour(  0,255,  0), radiogroup(4)
checkbox bounds( 89, 90, 15, 15), channel("A0"),     colour(  0,255,  0), radiogroup(5), value(1)
checkbox bounds( 89,110, 15, 15), channel("LowE0"),  colour(  0,255,  0), radiogroup(6)

checkbox bounds( 59, 10, 15, 15), channel("HighE_Mute"), colour(255, 20, 20), radiogroup(1)
checkbox bounds( 89, 10, 15, 15), channel("HighE0"), colour(  0,255,  0), radiogroup(1), value(1)

; Neck
image bounds(110,  0,540,135), shape("sharp"), linethickness(0), colour(white)

; dots
image bounds(232, 60, 15,15), colour(0,0,0), shape("ellipse")	; 3rd fret
image bounds(325, 60, 15,15), colour(0,0,0), shape("ellipse")	; 5th fret
image bounds(411, 60, 15,15), colour(0,0,0), shape("ellipse")	; 7th fret
image bounds(490, 60, 15,15), colour(0,0,0), shape("ellipse")	; 9th fret
image bounds(591, 30, 15,15), colour(0,0,0), shape("ellipse")	; 12th fret
image bounds(591, 90, 15,15), colour(0,0,0), shape("ellipse")	; 12th fret

checkbox bounds(131, 10, 15, 15), channel("HighE1"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(1)
checkbox bounds(183, 10, 15, 15), channel("HighE2"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(1)
checkbox bounds(232, 10, 15, 15), channel("HighE3"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(1)
checkbox bounds(279, 10, 15, 15), channel("HighE4"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(1)
checkbox bounds(325, 10, 15, 15), channel("HighE5"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(1)
checkbox bounds(369, 10, 15, 15), channel("HighE6"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(1)
checkbox bounds(411, 10, 15, 15), channel("HighE7"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(1)
checkbox bounds(450, 10, 15, 15), channel("HighE8"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(1)
checkbox bounds(490, 10, 15, 15), channel("HighE9"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(1)
checkbox bounds(525, 10, 15, 15), channel("HighE10"), colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(1)
checkbox bounds(559, 10, 15, 15), channel("HighE11"), colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(1)
checkbox bounds(591, 10, 15, 15), channel("HighE12"), colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(1)
checkbox bounds(621, 10, 15, 15), channel("HighE13"), colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(1)

checkbox bounds(131, 30, 15, 15), channel("B1") , colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(2)
checkbox bounds(183, 30, 15, 15), channel("B2") , colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(2), value(1)
checkbox bounds(232, 30, 15, 15), channel("B3") , colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(2)
checkbox bounds(279, 30, 15, 15), channel("B4") , colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(2)
checkbox bounds(325, 30, 15, 15), channel("B5") , colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(2)
checkbox bounds(369, 30, 15, 15), channel("B6") , colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(2)
checkbox bounds(411, 30, 15, 15), channel("B7") , colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(2)
checkbox bounds(450, 30, 15, 15), channel("B8") , colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(2)
checkbox bounds(490, 30, 15, 15), channel("B9") , colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(2)
checkbox bounds(525, 30, 15, 15), channel("B10"), colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(2)
checkbox bounds(559, 30, 15, 15), channel("B11"), colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(2)
checkbox bounds(591, 30, 15, 15), channel("B12"), colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(2)
checkbox bounds(621, 30, 15, 15), channel("B13"), colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(2)

checkbox bounds(131, 50, 15, 15), channel("G1"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(3)
checkbox bounds(183, 50, 15, 15), channel("G2"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(3), value(1)    
checkbox bounds(232, 50, 15, 15), channel("G3"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(3)    
checkbox bounds(279, 50, 15, 15), channel("G4"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(3)    
checkbox bounds(325, 50, 15, 15), channel("G5"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(3)    
checkbox bounds(369, 50, 15, 15), channel("G6"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(3)
checkbox bounds(411, 50, 15, 15), channel("G7"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(3)
checkbox bounds(450, 50, 15, 15), channel("G8"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(3)
checkbox bounds(490, 50, 15, 15), channel("G9"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(3)
checkbox bounds(525, 50, 15, 15), channel("G10"), colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(3)
checkbox bounds(559, 50, 15, 15), channel("G11"), colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(3)
checkbox bounds(591, 50, 15, 15), channel("G12"), colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(3)
checkbox bounds(621, 50, 15, 15), channel("G13"), colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(3)

checkbox bounds(131, 70, 15, 15), channel("D1"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(4)
checkbox bounds(183, 70, 15, 15), channel("D2"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(4), value(1)    
checkbox bounds(232, 70, 15, 15), channel("D3"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(4)    
checkbox bounds(279, 70, 15, 15), channel("D4"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(4)    
checkbox bounds(325, 70, 15, 15), channel("D5"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(4)    
checkbox bounds(369, 70, 15, 15), channel("D6"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(4)
checkbox bounds(411, 70, 15, 15), channel("D7"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(4)
checkbox bounds(450, 70, 15, 15), channel("D8"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(4)
checkbox bounds(490, 70, 15, 15), channel("D9"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(4)
checkbox bounds(525, 70, 15, 15), channel("D10"), colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(4)
checkbox bounds(559, 70, 15, 15), channel("D11"), colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(4)
checkbox bounds(591, 70, 15, 15), channel("D12"), colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(4)
checkbox bounds(621, 70, 15, 15), channel("D13"), colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(4)

checkbox bounds(131, 90, 15, 15), channel("A1"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(5)
checkbox bounds(183, 90, 15, 15), channel("A2"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(5)    
checkbox bounds(232, 90, 15, 15), channel("A3"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(5)    
checkbox bounds(279, 90, 15, 15), channel("A4"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(5)    
checkbox bounds(325, 90, 15, 15), channel("A5"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(5)    
checkbox bounds(369, 90, 15, 15), channel("A6"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(5)
checkbox bounds(411, 90, 15, 15), channel("A7"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(5)
checkbox bounds(450, 90, 15, 15), channel("A8"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(5)
checkbox bounds(490, 90, 15, 15), channel("A9"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(5)
checkbox bounds(525, 90, 15, 15), channel("A10"), colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(5)
checkbox bounds(559, 90, 15, 15), channel("A11"), colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(5)
checkbox bounds(591, 90, 15, 15), channel("A12"), colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(5)
checkbox bounds(621, 90, 15, 15), channel("A13"), colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(5)

checkbox bounds(131,110, 15, 15), channel("LowE1"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(6);52
checkbox bounds(183,110, 15, 15), channel("LowE2"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(6);49
checkbox bounds(232,110, 15, 15), channel("LowE3"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(6);47
checkbox bounds(279,110, 15, 15), channel("LowE4"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(6);46
checkbox bounds(325,110, 15, 15), channel("LowE5"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(6);44
checkbox bounds(369,110, 15, 15), channel("LowE6"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(6);42
checkbox bounds(411,110, 15, 15), channel("LowE7"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(6);39
checkbox bounds(450,110, 15, 15), channel("LowE8"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(6);40
checkbox bounds(490,110, 15, 15), channel("LowE9"),  colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(6);35
checkbox bounds(525,110, 15, 15), channel("LowE10"), colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(6);34
checkbox bounds(559,110, 15, 15), channel("LowE11"), colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(6);32
checkbox bounds(591,110, 15, 15), channel("LowE12"), colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(6);30
checkbox bounds(621,110, 15, 15), channel("LowE13"), colour:0(0,0,0,0), colour:1(250,250,  0), shape("ellipse"), radiogroup(6);
                                                               
; frets
line bounds(164,  5,  2, 125), colour(50,50,50)	      	;	;
line bounds(215,  5,  2, 125), colour(50,50,50)		;3      ;
line bounds(262,  5,  2, 125), colour(50,50,50)		;       ;
line bounds(309,  5,  2, 125), colour(50,50,50)      	;5      ;
line bounds(354,  5,  2, 125), colour(50,50,50)       	;       ;
line bounds(397,  5,  2, 125), colour(50,50,50)       	;7      ;
line bounds(438,  5,  2, 125), colour(50,50,50)       	;       ;
line bounds(477,  5,  2, 125), colour(50,50,50)       	;9      ;
line bounds(514,  5,  2, 125), colour(50,50,50)       	;       ;
line bounds(549,  5,  2, 125), colour(50,50,50)       	;       ;
line bounds(582,  5,  2, 125), colour(50,50,50)       	;12     ;
line bounds(613,  5,  2, 125), colour(50,50,50)       	;       ;
line bounds(642,  5,  2, 125), colour(50,50,50)                 ;


button   bounds(  5,150,175, 50), text("strum"), channel("strum"), value(0), colour:0(50,50,50), colour:1(50,50,50), latched(0)
combobox bounds(185,175, 85, 25), channel("GuitarType"), value(1), text("6 String","12 String")
checkbox bounds(185,150,100, 20), channel("ReverseStrum"), text("Reverse") colour("lime")
hslider bounds(280,143,350, 40), text("Gap"),    colour("tan"), FontColour(195,126,  0), channel("gap"),   range(0,0.5,0.05,0.5,0.0001)
hslider bounds(280,168,350, 40), text("Damp"),   colour("tan"), FontColour(195,126,  0), channel("damp"),   range(0.01,0.99,0.17)
hslider bounds(280,193,350, 40), text("Pos."),   colour("tan"), FontColour(195,126,  0), channel("pos"),   range(0.0001, 0.5, 0.02, 0.5, 0.001)
filebutton bounds(5, 207, 98, 27), text("Store Chord", "Store Chord"), populate("*.snaps*", ""), colour:1(20, 20, 20), mode("snapshot"), channel("ChordSave")
combobox bounds(110, 207, 105, 26), populate("*.snaps", ""), channel("ChordChoose") 

image bounds(5, 242, 190, 19), colour(75, 85, 90, 50), plant("credit"){
label bounds(0.005, 0.2, 1, .7), text("Author: Iain McCurdy |2013|"), FontColour(195,126,  0)
}
</Cabbage>

<CsoundSynthesizer>
<CsOptions>
-n -dm0 -+rtmidi=NULL -M0 --midi-key-cps=4 --midi-velocity-amp=5
</CsOptions>
<CsInstruments>
sr = 44100
ksmps = 64
nchnls = 2
0dbfs = 1

; A small amount of fixed random detuning improves the 12 string guitar sound
iDetuneRange	=	0.025
gidetune	ftgen	0, 0, 8, -21, 6, iDetuneRange	; table of detuning values for each string in a 12 string guitar configuration

instr	1

 ; macro for string set-up
 #define	STRING_SETUP(NAME)
 #
 k$NAME._Mute	chnget	"$NAME._Mute"
 kTune$NAME	chnget	"Tune$NAME"
 #

 $STRING_SETUP(HighE)
 $STRING_SETUP(B)
 $STRING_SETUP(G)
 $STRING_SETUP(D)
 $STRING_SETUP(A)
 $STRING_SETUP(LowE)




 ; macro that creates a value equivalent to the fretted note for that string
 #define SumString(NAME'N)
 #
 k$NAME.$N	chnget	"$NAME.$N"
 k$NAME._Sum	+=	k$NAME.$N * $N
 #



 ; macro that expands the previous macro for each fret and converts the result to cycles per second
 #define ExpandSummingMacro(NAME)
 #
 k$NAME._Sum	=	0 
 $SumString($NAME'0)
 $SumString($NAME'1)
 $SumString($NAME'2)
 $SumString($NAME'3)
 $SumString($NAME'4)
 $SumString($NAME'5)
 $SumString($NAME'6)
 $SumString($NAME'7)
 $SumString($NAME'8)
 $SumString($NAME'9)
 $SumString($NAME'10)
 $SumString($NAME'11)
 $SumString($NAME'12)
 $SumString($NAME'13) 
 kNoteNum$NAME	=	(128 - kTune$NAME) + k$NAME._Sum	; derive note number using open string tuning value
 kCps$NAME	=	cpsmidinn(kNoteNum$NAME)		; convert to cps 
 #
 $ExpandSummingMacro(HighE)
 $ExpandSummingMacro(B)
 $ExpandSummingMacro(G)
 $ExpandSummingMacro(D)
 $ExpandSummingMacro(A)
 $ExpandSummingMacro(LowE)



 kTimeElapsed	timeinsts					; elapsed time form the start of this note (this will be used to prevent premature triggering of the string) 
 
 ; macro for playing an individual string
 #define	PLAY_STRING(NAME'N)
 #
 if(k$NAME._Mute==1) kgoto SKIP$NAME				; if this is an open and muted string jump string playing code
 kRndStrt	random	0,kgap*0.15
 schedkwhen	ktrig,0,0,2.$N,kstart+kRndStrt,20,kCps$NAME,$N	; play string (instr 2)
 kstart	=	kstart + kgap					; increment start time
 SKIP$NAME:							; label
 if k$NAME._Mute==1 then
  turnoff2	2.$N,4,1						; turn off string  
 endif
 if changed(kCps$NAME)==1 && timeinstk()>1 then						; ...
  turnoff2	2.$N,4,1						; turn off string
  event	"i",2.$N,0,20,kCps$NAME,$N
 endif
 #
 
 kstrum	chnget	"strum"						; 'strum' button
 ktrig	trigger	kstrum,0.5,0					; if 'strum' button has been clicked...
 
 if ktrig==1 then						; ...
  turnoff2	2,0,1						; turn off all playing strings (in preparation for the new chord)
 endif
 
 kgap	chnget	"gap"
 kreverse	chnget	"ReverseStrum"
 if kreverse==0 then
  kstart	=	0					; start time (for first string plucked)
 else
  kstart	=	kgap*5
  kgap		=	-kgap
 endif

 $PLAY_STRING(LowE'1)
 $PLAY_STRING(A'2)
 $PLAY_STRING(D'3)
 $PLAY_STRING(G'4)
 $PLAY_STRING(B'5)
 $PLAY_STRING(HighE'6)


endin














instr	2	; string pluck
 kdamp	chnget	"damp"	; damping
 iplk	chnget	"pos"	; pluck position
 iamp	random	0.1,0.2
 
 iGuitarType	chnget	"GuitarType"
  if(iGuitarType==2) then					; if 12 string guitar...
  kmvt1	jspline		0.15,0.2,0.4				; a bit of random pick-up movement animates the tone of the guitar	
  kmvt2	jspline		0.15,0.2,0.4		
  idtn	table		p5,gidetune				; detuning value. used in 12 string guitar only.
  if p5<5 then							; strings 1 - 4 are in octaves in a 12-string guitar
   a1	wgpluck2	iplk, iamp/2, p4,          0.2+kmvt1, kdamp
   a2	wgpluck2	iplk, iamp/2, p4*(2+idtn), 0.2+kmvt2, kdamp
  else								; strings 5 & 6 are in unison in a 12-string guitar
   a1	wgpluck2	iplk, iamp/2, p4,          0.2         +kmvt1, kdamp
   a2	wgpluck2	iplk, iamp/2, p4*(1+idtn), 0.2+rnd(0.5)+kmvt2, kdamp
  endif
   a2	delay	a2,0.01+rnd(0.01)				; slight delay to second string
  asig	=	a1+a2
 else									; otherwise 6 string
  kmvt	jspline		0.15,0.2,0.4		
  asig	wgpluck2	iplk, iamp, p4,   0.2+kmvt,          kdamp
 endif
 
 aenv		linsegr	0, 0.0008, 1, p3-0.1008, 0, 0.05, 0	; amplitude envelope. Attack removes excessive 'click'. Decays to nothing across note duration (p3). Short release stage prevents click if a note is interrupted.
 
 /* FILTERING TO IMPROVE THE SOUND */
 af1	resonz	asig,200,200
 af2	resonz	asig,550,550
 af3	resonz	asig,2100,2100
 asig	sum	af1,af2*5,af3
 asig	=	asig/200
 /* ------------------------------ */
 
 asig	=	asig*aenv
 	outs	asig, asig
endin




</CsInstruments>  

<CsScore>
i 1 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>; Harmonics.csd
; Written by Iain McCurdy, 2014

; Emulation of a piano string-hammer mechanism with a damping node placed some way along the string to force harmonic overtones
; Each note played triggers two strings, which can be detuned with respect to each other.
; As well as emulating the hammer striking the string in the first place, a release hammer (or string damping mechanism is emulated)

; AMPLITUDE
; Amp.		-	Global amplitude control
; Vel.		-	key velocity influence upon hammer amplitude

; FUNDAMENTAL (how midi note maps to fundamental frequency of the tone)
; Offset	-	fixed offset applied to all values in the mapping. For normal keyboard mapping set to '0'
; Rnge.		-	range of the mapping. For normal keyboard mapping set to '1'

; HARMONIC
; Offset	-	offset of harmonic position (0 = no harmonic)
; Vel		-	key velocity influence upon harmonic position
; Kybd.Track	-	the amount to which keyboard tracking influences harmonic position
; Algorithm Selector: 
;
;  1. "Single"   IMPULSE-->WAVEGUIDE-->OUT
;
;  2. "Series"   IMPULSE-->WAVEGUIDE1-->WAVEGUIDE2-->OUT
;
;  3. "Double"   IMPULSE-->WAVEGUIDE1-+->WAVEGUIDE2---+
;                                     |               +-->OUT
;                                     +---------------+
;
; Double Strength	-	adds another waveguide in series thereby increasing the filtering effect and the sustain.
; Series Mix		-	mix the outputs of both the first and the second waveguides in a series of two, 
;						 i.e. more of the attack of the hammer (or impulse sounds) will be retained.
; Envelope	-	A switch which, if selected, will apply an AR envelope to the harmonic offset value. 
;   			 This will add a timbral attack and release to the sound.
;				 For result to be heard most clearly, choose "Series" algorithm and increase "Release" (STRINGS) section.
 
; STRING
; Detune	-	maximum possible detuning between the two strings (in cents) triggered by each note (the actual detuning will be unique and fixed for each note)
; Release	-	envelope release time once a key is released
; Sustain	-	the sustain time of the strings. (Feedback in the double waveguide.)
; Damping	-	high frequency damping. (Cutoff frequencies of two lowpass filters in the waveguide network.)

; IMPULSE 
; Type:
;  1. Hammer  - A single impulse emulating a hammer striking the string
;  2. Bowed   - A train of impulses at the note frequency that continues for as long as the note is held
;  3. Noise   - A noise signal that has the same characteristics for all notes played
;  4. Gliss   - A pink noise signal is bandpass filtered, the cutoff frequency of the bandpass filter glissandoes slowly.
;  5. Pulse   - Repeated periodic impulses.
;  6. Live    - No synthesised impulse but the live audio input is fed into the waveguide when notes are pressed

; If "Hammer" ise selected, the following options are revealed.
; (keyboard mapping for the frequency of the hammer that strikes the string)
; Vel.		-	key velocity influence upon hammer frequency (hammer impulse only sustains for one cycle so this effectively controls the duration or period of that cycle)
; Offset	-	Fundemental frequency of the hammer (before keyboard tracking is applied)
; Keybd.Track	-	Amount of keyboard tracking to be applied. Increasing this value causes higher note to use a higher frequency hammer impulse.

; If "Bowed" is selected, the following options are revealed.
; Density	-	Density of noise impulses.
; Random	-	amount of randomness in timing  of the noise impulses.

; If "Noise" is selected, the following options are revealed.
; Attack	-	attack time of the bowing
; Bright	-	brightness of the bowing impulse
; Noise		-	amount of randomness in the bowing impulse 

; If "Gliss" is selected, the following options are revealed.
; Rate		-	Rate of movement of the glissando.
; Bandwidth	-	Bandwidth of the filter applied to the noise source.

; If "Pulse" is selected, the following options are revealed.
; Tempo		-	Tempo of impulses (BPM).
; Var.		-	Amount of sliding variation of Tempo.
; Min.LPF	-	Minimum limit of random lowpass filter.
; Max.LPF	-	Maximum limit of random lowpass filter.
; Clock		-	Defines whether all note use a shared pulse (global) or if each new note uses its own new pulse generator (local).

; RELEASE HAMMER (string vibration stopping mechanism)
; Ampl.		-	Amplitude of the release hammer. Set to zero to remove the release hammer altogether. 
;			Release hammer amplitude is also affected by the current vibration amplitude of the strings so that the longer a note is allowed to decay the lower the release hammer amplitude will be.
; Offset	-	Fundemental frequency of the release hammer (before keyboard tracking is applied)
; Keybd.Track	-	Amount of keyboard tracking to be applied to the frequency of release hammer. Increasing this value causes higher note to use a higher frequency hammer impulse.

; STEREO (a stereophonic widening effect using a delay of random duration on each channel)
; Width		-	Width of the effect. Effectively the maximum duration of the two random delay times.
; Mix		-	Dry/wet mix between the mono string output and the two delays.

; REVERB (a reverb effect using screverb)
; Mix		-	Dry/wet mix between the dry signal (including stereo signal) and the reverberated signal
; Size		-	Size or decay time of the reverb effect
; Damping	-	Cutoff frequency of the damping of reverberant reflections

<Cabbage>
form caption("Harmonics"), size(970,320), colour(100,150,150), pluginid("Harm") style("legacy")

#define RSliderStyle valuetextbox(1), textbox(1), colour("silver"), trackercolour("silver"), textcolour("white"), fontcolour("white")

;AMPLITUDE
image    bounds(  5,  5,130,110), colour(100,150,150), outlinecolour("white"), outlinethickness(2), shape("sharp"), plant("amplitude"){
label    bounds(  0,  4,130, 12), text("A M P L I T U D E"), fontcolour(white)
rslider  bounds(  0, 25, 75, 75), text("Amp."),  channel("Amp"), range(0,1.00,0.3,0.5,0.001), $RSliderStyle
rslider  bounds( 55, 25, 75, 75), text("Vel."),  channel("AmpVel"), range(0,1.00,0.5,1,0.01), $RSliderStyle
}

;FUNDEMENTAL
image    bounds(140,  5,130,110), colour(100,150,150), outlinecolour("white"), outlinethickness(2), shape("sharp"), plant("fundemental"){
label    bounds(  0,  4,130, 12), text("F U N D A M E N T A L"), fontcolour(white)
rslider  bounds(  0, 25, 75, 75), text("Offset"),  channel("NumOffset"), range(0,127,30,1,0.01), $RSliderStyle
rslider  bounds( 55, 25, 75, 75), text("Rnge."),  channel("NumRange"), range(0,127,15,1,0.1), $RSliderStyle
}

;HARMONIC
image    bounds(275,  5,390,110), colour(100,150,150), outlinecolour("white"), outlinethickness(2), shape("sharp"), plant("harmonic"){
label    bounds(  0,  4,390, 12), text("H A R M O N I C"), fontcolour(white)
rslider  bounds(  0, 25, 75, 75), text("Offset"),  channel("HarmOffset"), range(-1,1,0,1,0.001), $RSliderStyle
rslider  bounds( 55, 25, 75, 75), text("Vel."),  channel("HarmRange"), range(0,2.00,0.645,0.5,0.01), $RSliderStyle
rslider  bounds(110, 25, 75, 75), text("Kybd.Track"),  channel("HarmKybd"), range(0,1.000,0), $RSliderStyle
label    bounds(180, 40, 70, 13), text("Algorithm"), fontcolour(white)
combobox bounds(180, 55, 70, 20), channel("AlgType"), text("Single","Series","Double"), value(1)
checkbox bounds(180, 80, 70, 12), channel("HarmEnv"), text("Envelope"), fontcolour("white")

line     bounds(275, 20, 95, 1)
label    bounds(302, 16, 40,10), text("G L I S S"), fontcolour("white"), colour(100,150,150)
rslider  bounds(260, 25, 75, 75), text("Depth"),  channel("HarmSlideDep"), range(0,1.000,0), $RSliderStyle
rslider  bounds(315, 25, 75, 75), text("Rate"),  channel("HarmSlideRate"), range(0.01,10.00,0.1,1,0.01), $RSliderStyle
}

;STRINGS
image    bounds(670,  5,295,110), colour(100,150,150), outlinecolour("white"), outlinethickness(2), shape("sharp"), plant("main"){
label    bounds(  0,  4,295, 12), text("S T R I N G S"), fontcolour(white)
rslider  bounds(  0, 25, 75, 75), text("Detune"),  channel("detune"), range(0,50.000,1.5,0.35,0.001), $RSliderStyle
rslider  bounds( 55, 25, 75, 75), text("Release"),  channel("release"), range(0.01,12.000,0.15,0.5,0.001), $RSliderStyle
rslider  bounds(110, 25, 75, 75), text("Sustain"),  channel("feedback"), range(0,1.000,1,8), $RSliderStyle
rslider  bounds(165, 25, 75, 75), text("Damping"),  channel("cutoff"), range(0.001,1.000,1,0.5), $RSliderStyle
rslider  bounds(220, 25, 75, 75), text("Lo.Cut"),  channel("LoCut"), range(1,8000,1,0.5,1), $RSliderStyle
}
	
;IMPULSE
image    bounds(  5,120,445,110), colour(100,150,150), outlinecolour("white"), outlinethickness(2), shape("sharp"), plant("hammer")
{
label    bounds(  0,  4,445, 12), text("I M P U L S E"), fontcolour(white)
label    bounds( 15, 28, 70, 13), text("Type"), fontcolour(white)
combobox bounds( 15, 43, 70, 20), channel("Impulse"), text("Hammer","Bow","Noise","Gliss","Pulses","Live"), value(1)
}

image    bounds( 85,145,355,100), colour(0,0,0,0), plant("Hammer"), identchannel("HammerID"), visible(1)
{
rslider  bounds(  0,  0, 75, 75), text("Vel."),  channel("ToneVel"), range(0,1.00,0.75), $RSliderStyle
rslider  bounds( 60,  0, 75, 75), text("Offset"),  channel("HammFrq"), range(1,4000,100,0.5,1), $RSliderStyle
rslider  bounds(120,  0, 75, 75), text("Kybd.Track"),  channel("HammTrk"), range(0,1.00,0.33), $RSliderStyle
}

image    bounds( 85,145,355,100), colour(0,0,0,0), plant("Bow"), identchannel("BowID"), visible(0)
{
rslider  bounds(  0,  0, 75, 75), text("Attack"),  channel("Attack"), range(0,5.00,0.2,0.5), $RSliderStyle
rslider  bounds( 60,  0, 75, 75), text("Bright"),  channel("Bright"), range(0,1.00,0.3,0.5), $RSliderStyle
rslider  bounds(120,  0, 75, 75), text("Noise"),  channel("Noise"), range(0,5.00,0.001,0.5), $RSliderStyle
}

image    bounds( 85,145,355,100), colour(0,0,0,0), plant("Noise"), identchannel("NoiseID"), visible(0)
{
rslider  bounds(  0,  0, 75, 75), text("Density"),    channel("NseDens"), range(1,5000,100,0.5,1), $RSliderStyle
rslider  bounds( 60,  0, 75, 75), text("Random"), channel("NseRand"), range(0,100,1,0.5), $RSliderStyle
}

image    bounds( 85,145,345,100), colour(0,0,0,0), plant("Gliss"), identchannel("GlissID"), visible(0)
{
rslider  bounds(  0,  0, 75, 75), text("Rate"), channel("GlsRate"), range(0.01,5,0.1,0.5,0.01), $RSliderStyle
rslider  bounds( 60,  0, 75, 75), text("Bandwidth"), channel("GlsBW"), range(0.001,1,0.01,0.5,0.001), $RSliderStyle
}

image    bounds( 85,145,355,100), colour(0,0,0,0), plant("Pulses"), identchannel("PulseID"), visible(0)
{
label    bounds(245,  3, 60, 13), text("Clock"), fontcolour(white)
combobox bounds(245, 18, 60, 20), channel("PlsClock"), text("Local","Global"), value(2)
label    bounds(245, 40, 60, 13), text("Filter"), fontcolour(white)
combobox bounds(245, 55, 60, 20), channel("PlsFilter"), text("Lowp.","Bandp.","Res.","Highp."), value(1)
rslider  bounds(  0,  0, 75, 75), text("Tempo"),  channel("PlsRate"), range(0,960,120,1,1), $RSliderStyle
rslider  bounds( 50,  0, 75, 75), text("Var."),  channel("PlsVar"), range(0,4, 0), $RSliderStyle
rslider  bounds(100,  0, 75, 75), text("Min.LPF"),  channel("PlsMinCO"), range(5,14,6,1,0.1), $RSliderStyle
vslider  bounds(170, 30, 15, 47), channel("PlsFiltRate"), range(0.1,1,0.1),  colour("silver"), trackercolour("silver"), textcolour("white"), fontcolour("white")
label    bounds(158, 18, 40, 12), text("Rate"), fontcolour("white")
rslider  bounds(180,  0, 75, 75), text("Max.LPF"),  channel("PlsMaxCO"), range(5,14,12,1,0.1), $RSliderStyle
checkbox bounds(315, 20, 60, 12), text("Rel."),  channel("PlsRel"), colour("yellow"), fontcolour("white")
}

;RELEASE DAMPER
image    bounds(455,120,185,110), colour(100,150,150), outlinecolour("white"), outlinethickness(2), shape("sharp"), plant("hammer_rel"){
label    bounds(  0,  4,185, 12), text("R E L E A S E    D A M P E R"), fontcolour(white)
rslider  bounds(  0, 25, 75, 75), text("Ampl."),  channel("RelHammAmp"), range(0,1.00,0.3), $RSliderStyle
rslider  bounds( 55, 25, 75, 75), text("Offset"),  channel("RelHammFrq"), range(1,4000,100,0.5,1), $RSliderStyle
rslider  bounds(110, 25, 75, 75), text("Kybd.Track"),  channel("RelHammTrk"), range(0,1.00,0.4), $RSliderStyle
}

;STEREO
image    bounds(645,120,130,110), colour(100,150,150), outlinecolour("white"), outlinethickness(2), shape("sharp"), plant("stereo"){
label    bounds(  0,  4,130, 12), text("S T E R E O"), fontcolour(white)
rslider  bounds(  0, 25, 75, 75), text("Width"),  channel("StWidth"), range(0.0001,0.1,0.01,0.5), $RSliderStyle
rslider  bounds( 55, 25, 75, 75), text("Dry/Wet"),  channel("StMix"), range(0,1,0.5),  textBox(1), $RSliderStyle
}

;REVERB
image    bounds(780,120,185,110), colour(100,150,150), outlinecolour("white"), outlinethickness(2), shape("sharp"), plant("reverb"){
label    bounds(  0,  4,185, 12), text("R E V E R B"), fontcolour(white)
rslider  bounds(  0, 25, 75, 75), text("Dry/Wet"),  channel("RvbDryWet"), range(0,1.000,0.3), $RSliderStyle
rslider  bounds( 55, 25, 75, 75), text("Size"),  channel("RvbSize"), range(0.4,0.999,0.55), $RSliderStyle
rslider  bounds(110, 25, 75, 75), text("EQ."),  channel("RvbEQ"), range(0,1,0.3), $RSliderStyle
}

keyboard bounds(  5,235,960, 80)

</Cabbage>
                    
<CsoundSynthesizer>

<CsOptions>   
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100	; SAMPLE RATE
ksmps 		= 	32	; NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	; NUMBER OF CHANNELS (1=MONO)
0dbfs		=	1	; MAXIMUM AMPLITUDE

massign	0,2
giImp	ftgen	0,0,4097,9,0.5,1,0			; shape for the hammer inpulse
gidetuning	ftgen	0,0,128,21,1,1			; random array used for fixing unique detune values for each note
giDryMap	ftgen	0,0,4096,7,1,2048,1,2048,0	; dry mixer control mapping
giWetMap	ftgen	0,0,4096,7,0,2048,1,2048,1	; wet mixer control mapping
gaSendM,gaSendL,gaSendR	init	0			; initialise variable used for sending audio between instruments
giAmpMap	ftgen	0, 0, -1400, -16, 200, 500, 0, 150, 500, -8, 0.8, 400, 0.8

opcode	Oscil1a,a,iii					; an oscillator that plays a single cycle of an audio waveform at a-rate
 iamp,ifrq,ifn	xin
 aptr	line	0,1/ifrq,1
 asig	tablei	aptr,ifn,1
 aenv	linseg	1,1/ifrq,1,0.001,0
	xout	asig*iamp*aenv
endop

instr	1						; read in widgets
 kPortTime	linseg	0,0.01,0.1
 gkdetune	chnget	"detune"
 gkdetune		portk	gkdetune,kPortTime
 gkrelease	chnget	"release"
 gkHarmRange	chnget	"HarmRange"
 gkHarmOffset	chnget	"HarmOffset"
 gkHarmOffset	portk	gkHarmOffset,kPortTime
 gkHarmKybd	chnget	"HarmKybd"
 gkNumRange	chnget	"NumRange"
 gkNumOffset	chnget	"NumOffset"
 gkNumRange	portk	gkNumRange,kPortTime
 gkNumOffset	portk	gkNumOffset,kPortTime
 gkHammFrq	chnget	"HammFrq"
 gkHammTrk	chnget	"HammTrk"
 gkRelHammAmp	chnget	"RelHammAmp"
 gkRelHammFrq	chnget	"RelHammFrq"
 gkRelHammTrk	chnget	"RelHammTrk"
 gkAmpVel	chnget	"AmpVel"
 gkAmp		chnget	"Amp"
 gkAmp		portk	gkAmp,kPortTime
 gkToneVel	chnget	"ToneVel"
 gkDryWet	chnget	"RvbDryWet"
 gkDry		table	gkDryWet,giDryMap,1		; map dry/wet control
 gkWet		table	gkDryWet,giWetMap,1		;
 gkRvbSize	chnget	"RvbSize"
 gkRvbEQ	chnget	"RvbEQ"
 gkStWidth	chnget	"StWidth"
 gkStWidth	init	0.01				; (can't be zero at i-time)
 gkStMix	chnget	"StMix"
 gkfeedback	chnget	"feedback"
 gkcutoff	chnget	"cutoff"
 gkLoCut	chnget	"LoCut"
 gkLoCut	portk	gkLoCut,kPortTime
 gkAttack	chnget	"Attack"
 gkBright	chnget	"Bright"
 gkNoise	chnget	"Noise"
 gkAlgType	chnget	"AlgType"
 gkImpulse	chnget	"Impulse"
 gkNseDens	chnget	"NseDens"
 gkNseRand	chnget	"NseRand"
 gkGlsRate	chnget	"GlsRate"
 gkGlsBW	chnget	"GlsBW"
 gkHarmEnv	chnget	"HarmEnv"
 gkPlsRate	chnget	"PlsRate"
 gkPlsVar	chnget	"PlsVar"
 gkPlsMinCO	chnget	"PlsMinCO"
 gkPlsMaxCO	chnget	"PlsMaxCO"
 gkPlsFiltRate	chnget	"PlsFiltRate"
 gkPlsClock	chnget	"PlsClock"
 gkPlsFilter	chnget	"PlsFilter"
 gkPlsRel	chnget	"PlsRel"
 gkHarmSlideDep	chnget	"HarmSlideDep"
 gkHarmSlideRate	chnget	"HarmSlideRate"
 
 if changed(gkImpulse)==1 then
  if gkImpulse==6 then				; live
   chnset	"visible(0)","HammerID"
   chnset	"visible(0)","BowID"
   chnset	"visible(0)","NoiseID"
   chnset	"visible(0)","GlissID"
   chnset	"visible(0)","PulseID"
  elseif gkImpulse==5 then				; pulse
   chnset	"visible(0)","HammerID"
   chnset	"visible(0)","BowID"
   chnset	"visible(0)","NoiseID"
   chnset	"visible(0)","GlissID"
   chnset	"visible(1)","PulseID"
  elseif gkImpulse==4 then				; gliss
   chnset	"visible(0)","HammerID"
   chnset	"visible(0)","BowID"
   chnset	"visible(0)","NoiseID"
   chnset	"visible(1)","GlissID"
   chnset	"visible(0)","PulseID"
  elseif gkImpulse==3 then			; noise
   chnset	"visible(0)","HammerID"
   chnset	"visible(0)","BowID"
   chnset	"visible(1)","NoiseID"
   chnset	"visible(0)","GlissID"
   chnset	"visible(0)","PulseID"
  elseif gkImpulse==2 then			; bow
   chnset	"visible(0)","HammerID"
   chnset	"visible(1)","BowID"
   chnset	"visible(0)","NoiseID"
   chnset	"visible(0)","GlissID"
   chnset	"visible(0)","PulseID"
  else								; hammer
   chnset	"visible(1)","HammerID"
   chnset	"visible(0)","BowID"
   chnset	"visible(0)","NoiseID"
   chnset	"visible(0)","GlissID"
   chnset	"visible(0)","PulseID"
  endif
 endif
endin

instr	2						; hammered string instrument
 ;==Fundemental==
 inum	notnum
 kcps		=	cpsmidinn(((inum/127) * gkNumRange) + gkNumOffset)	; derive fundemental frequency
 
 ;==Impulse==
 ;;(click impulse)
 ;aImpls	mpulse	1,0

 ;;(noise impulse)
 ;aNoise	pinkish	1
 ;iatt	=	0.001
 ;isus	=	0.05
 ;idec	=	0.01
 ;isuslev	veloc	0.5,1
 ;aEnv	linseg	0,iatt,isuslev,isus,isuslev,idec,0
 ;aImpls	=	aNoise * aEnv
 ;aImpls	butlp	aImpls,1000
 
 ;(hammer impulse)
 krel	release
 krel	init	0
 krms	init	0
 ktrig	trigger	krel,0.5,0
 if ktrig==1 then
  reinit RELEASE_HAMMER
 endif

 RELEASE_HAMMER:
 if i(krel)==1 then							; Insert release hammer values
  iAmpVel	=		i(gkRelHammAmp) * (( i(krms) * 3) + 0.03)
  ifrq		=		i(gkRelHammFrq) * semitone(i(gkRelHammTrk)*inum)
 else
  ifrq		=		i(gkHammFrq) * semitone(i(gkHammTrk)*inum)
  iAmpVel	veloc	1-i(gkAmpVel),1
 endif

 ;==Detuning==
 idetune	table	inum,gidetuning		;=	i(gkdetune)
 kdetune	=	idetune * gkdetune
 
 ;==Main Impulse==
 if i(gkImpulse)==1 then										; Hammer
  aImpls	Oscil1a	iAmpVel,ifrq,giImp
 elseif i(gkImpulse)==2 then									; Bow
  aImpls1	gausstrig	iAmpVel, kcps*cent(kdetune), gkNoise
  aImpls2	gausstrig	iAmpVel, kcps*cent(-kdetune), gkNoise
  aImpls	=			aImpls1 + aImpls2
  ;aImpls	buthp		aImpls, kcps*2
  ;aImpls	buthp		aImpls, kcps*2
  aCF		expsegr		50, i(gkAttack), (sr/10), 0.3, 50
  aImpls	butlp		aImpls, aCF*gkBright
 elseif i(gkImpulse)==3 then									; Noise
  aImpls	gausstrig	iAmpVel, gkNseDens, gkNseRand
 elseif i(gkImpulse)==4 then									; Gliss
  aNse	pinkish	iAmpVel
  aOct	rspline	octmidi(),12,gkGlsRate,gkGlsRate*2
  aImpls	reson	aNse, cpsoct(aOct), cpsoct(aOct)*gkGlsBW, 1
 elseif i(gkImpulse)==5 then									; Repeated pulses
  if active:i(p1,0,1)<=1 || gkPlsClock==1 then					; if this is the first note or if local clock is selected
   kPlsRate	rspline	gkPlsRate*octave(gkPlsVar)/60, gkPlsRate*octave(-gkPlsVar)/60, kPlsRate*0.1, kPlsRate*0.2 
   
   ;;if (gkPlsRel==0) then			; why doesn't this work??
   ;; kPlsRate	*=	1-release()
   ;;endif

   if metro:k(kPlsRate)==1 then
    reinit NewPulse
   endif

   krelease release

   NewPulse:
   aImpls	Oscil1a	iAmpVel*(1-i(krelease)),ifrq,giImp
   rireturn
   
   kCO		rspline	gkPlsMinCO, gkPlsMaxCO, kPlsRate*gkPlsFiltRate, kPlsRate*gkPlsFiltRate
   kCO		limit	kCO,4,14
   ;;kAmp		tablei	kCO*100,giAmpMap
   ;;aImpls	mpulse	kAmp*(1-release:k()), 1/kPlsRate
   if gkPlsFilter==1 then											; lowpass
    aImpls	butlp	aImpls, a(cpsoct(kCO))
   elseif gkPlsFilter==2 then										; bandpass
    aImpls	reson	aImpls, a(cpsoct(kCO)), a(cpsoct(kCO))*0.1, 1
   elseif gkPlsFilter==3 then										; resonant lowpass
    aImpls	moogladder	aImpls, a(cpsoct(kCO)),0.6
   else																; highpass
    aImpls	buthp	aImpls, a(cpsoct(kCO))
   endif
   gaImpls	=		aImpls
  else															; not the first note (use the global pulse
   aImpls	vdelay	gaImpls, randomi:a(0.001,0.02,1,1)*1000,100	; add some local flam
  endif
 else
   aL,aR		ins
   aImpls		sum		aL,aR
 endif 
 
 rireturn
 icf	veloc	12-(8*i(gkToneVel)),12
 aImpls	butlp	aImpls,cpsoct(icf)

 ;==Harmonic==
 iHarmVel	veloc	i(gkHarmRange),0
 iHarmKybd	=		(i(gkHarmKybd) * (128-inum))/128
 iHarmRatio	=		1 + i(gkHarmOffset) + iHarmVel + iHarmKybd
 kHarmRatio	=		1 + gkHarmOffset + iHarmVel + iHarmKybd
 kHarmRatio	init	iHarmRatio
 aHarmRatio	=		a(kHarmRatio)
 
 ;==Waveguide Frequencies
 aFund1		interp	kcps * cent(kdetune), 0, 1
 aFund2		interp	kcps * cent(-kdetune), 0, 1
 if gkHarmEnv==1 then
  kHarmEnv	expsegr	0.9,0.03,1,0.9,0.9
  aHarmRatio	interp	kHarmRatio*kHarmEnv, 0, 1 
 else
  aHarmRatio	interp	kHarmRatio, 0, 1 
 endif
 ;==sliding harmonic modulation
 if gkHarmSlideDep>0 then
  aMod		rspline	-gkHarmSlideDep,gkHarmSlideDep,gkHarmSlideRate,gkHarmSlideRate*2
  aHarmRatio	=		aHarmRatio * semitone(aMod)
 endif
 aHarm1		=		aFund1 * aHarmRatio
 aHarm2		=		aFund2 * aHarmRatio
 
 ;==Double Waveguide Filter==
 if changed:k(gkAlgType)==1 then	; to prevent explosive clicks
  reinit RestartWaveguides
 endif
 RestartWaveguides:
 kcutoff	=		(sr/2)*gkcutoff
 kfeedback	=		0.249999999*gkfeedback
 aWg2		wguide2	aImpls,aFund1, aHarm1, kcutoff,kcutoff, kfeedback, kfeedback
 aWg2_2		wguide2	aImpls,aFund2, aHarm2, kcutoff,kcutoff, kfeedback, kfeedback
 if (gkAlgType==2) then
  aWg2		wguide2	aWg2*  0.13,aFund1, aHarm1 , kcutoff,kcutoff, kfeedback, kfeedback
  aWg2_2	wguide2	aWg2_2*0.13,aFund2, aHarm2, kcutoff,kcutoff, kfeedback, kfeedback
 elseif (gkAlgType==3) then
  aWg2b		wguide2	aWg2*  0.13,aFund1, aHarm1, kcutoff,kcutoff, kfeedback, kfeedback
  aWg2_2b	wguide2	aWg2_2*0.13,aFund2, aHarm2, kcutoff,kcutoff, kfeedback, kfeedback
  aWg2		+=		aWg2b
  aWg2_2	+=		aWg2_2b
 endif
 aWg2	dcblock2	aWg2+aWg2_2
 if gkLoCut>1 then
  aWg2	buthp	aWg2,gkLoCut
 endif
 icps	cpsmidi
 aWg2	butbr	aWg2, icps, icps*0.1
 krms	rms		aWg2
 
 ;==Release==
 irel	=		i(gkrelease)
 kCF	expsegr		sr/3,irel,20
 aEnv	expsegr		1,irel,0.001
 aWg2	tone		aWg2, kCF
 aWg2	=		aWg2 * aEnv

 gaSendM	=	gaSendM + aWg2
endin

instr	98	; spatialising short delays
 ktrig	changed	gkStWidth
 if ktrig==1 then
  reinit	UPDATE
 endif
 UPDATE:
 iDelTimL	random	0.00001,i(gkStWidth)
 aDelSigL	delay	gaSendM, iDelTimL
 iDelTimR	random	0.00001,i(gkStWidth)
 aDelSigR	delay	gaSendM, iDelTimR
 rireturn
 kDry		table	gkStMix,giDryMap,1
 kWet		table	gkStMix,giWetMap,1
 aL		=	((gaSendM*kDry)+(aDelSigL*kWet)) * gkDry
 aR		=	((gaSendM*kDry)+(aDelSigR*kWet)) * gkDry
 gaSendL	=	gaSendL + gaSendM + aDelSigL
 gaSendR	=	gaSendR + gaSendM + aDelSigR
 		outs	aL*gkAmp, aR*gkAmp
 		clear	gaSendM
endin

instr	99
 if gkRvbEQ>=0.5 then
  kRvbHPF	limit	cpsoct(4+((gkRvbEQ-0.5)*2*10)),20,sr/2	  
  gaSendL	buthp		gaSendL,kRvbHPF
  gaSendR	buthp		gaSendR,kRvbHPF
 endif
 kRvbLPF	limit	cpsoct(4+(gkRvbEQ*2*10)),20,sr/2	
 aL,aR	reverbsc	gaSendL,gaSendR,gkRvbSize,kRvbLPF
 	outs		aL*gkWet*gkAmp,aR*gkWet*gkAmp
 	clear		gaSendL,gaSendR
endin

</CsInstruments>

<CsScore>
i  1 0 [3600*24*7]
i 98 0 [3600*24*7]
i 99 0 [3600*24*7]
e
</CsScore>

</CsoundSynthesizer>; Honk.csd
; Written by Iain McCurdy, 2014
; 
; Instrument based on the wgbowedbar opcode (bowed bar).
; As with many physical modelling opcodes the results can be unpredicatable sometimes resulting in silence and at other times resulting in overloading.
; I have endeavoured to protect against overloads. Controller ranges have been tuned to provide the most interesting results but extensive experimentation is still recommended.
; 
; Input (Amplitude)
; -----------------
; This controls the amplitude of vibrations caused by the bow upon the bar. Note that this is not a linear 'level' control.
; 'Amplitude'	-	this is a manual control for amplitude
; 'Velocity'	-	this controls how midi key velocity affects amplitude 
; 'Env'		-	this controls the amount of envelope influence upon amplitude. (If zero, 'Dec.Tim.' and 'Sus.Lev' will have no effect.)
; 'Att.Tim'	-	time taken to rise to a maximum value before implementing the decay stage
; 'Dec.Tim'	-	time taken to decay to the sustain level
; 'Sus.Lev'	-	the sustain level for amplitude
; 'Rel.Tim'	-	the release time for amplitude
; 
; Output
; ------
; Controls pertaining to the output of the instrument
; 'Width'	-	width of a stereo effect using slowly modulating delays. When set to zero the output (before reverb) is monophonic.
; 'Rvb.Send'	-	amount of signal sent to a reverb effect
; 'Rvb.Size'	-	room size of the reverb effect (reverbsc)
; 
; Bow Position
; ------------
; 'Position'	-	manual control of bowing position along the bar
; 'Depth'	-	depth of random modulation of bowing position
; 'Rate'	-	rate of random modulation of bowing position
; 
; Bow Pressure
; ------------
; 'Pressure'	-	manual control of bowing pressure
; 'Velocity'	-	influence of key velocity upon bow pressure. 
; 			This value (range zero - 'velocity') is added to the manual pressure control (and limited to be within the range zero - 1).
; 			Therefore for maximum velocity influence, set 'Velocity' to 1, 'Pressure' to zero and 'Depth' (see below) to zero.
; 'Depth'	-	depth of random modulation of bowing pressure
; 'Rate'	-	rate of random modulation of bowing pressure
; 
; System
; ------
; 'Feedback'	-	gain of filter in the model. This will affect the abiltity of the instrument to achieve and sustain resonance.
; 'Discord'	-	an integration constant used in the setup of the model. Audibly varies dischord. This control changes at i-rate therefore changing it during a note will cause discontinuities.

<Cabbage>
form caption("Honk") size(700, 440), pluginid("Honk"), colour("LightGrey") style("legacy")


; amplitude
image   bounds(  0,  0,440, 90), colour(50,50,100), outlinecolour("LightGrey"), outlinethickness(1), shape("sharp"), plant("amplitude"){
label   bounds(  5,  5,380, 12), text("Input"), fontcolour(white)
rslider bounds( 10, 20, 60, 60), text("Amplitude"),                                  channel("amp"),     range(0,      1.00, 0.85),           TrackerColour("Silver"), textcolour("white"), colour("white"), outlinecolour(100,100,100)
rslider bounds( 70, 20, 60, 60), text("Velocity"),                                   channel("vel"),     range(0,      1.00, 0.66),           TrackerColour("Silver"), textcolour("white"), colour("white"), outlinecolour(100,100,100)
rslider bounds(130, 20, 60, 60), text("Env."),                                       channel("AEnv"),    range(0,      1.00, 0),              TrackerColour("Silver"), textcolour("white"), colour("white"), outlinecolour(100,100,100)
rslider bounds(190, 20, 60, 60), text("Att.Tim."),                                   channel("AAttTim"), range(0,      2.00, 0.1, 0.5),       TrackerColour("Silver"), textcolour("white"), colour("white"), outlinecolour(100,100,100)
rslider bounds(250, 20, 60, 60), text("Dec.Tim."),                                   channel("ADecTim"), range(0.001,  5.00, 0.1, 0.5),       TrackerColour("Silver"), textcolour("white"), colour("white"), outlinecolour(100,100,100)
rslider bounds(310, 20, 60, 60), text("Sus.Lev."),                                   channel("ASusLev"), range(0,      1.00, 1),              TrackerColour("Silver"), textcolour("white"), colour("white"), outlinecolour(100,100,100)
rslider bounds(370, 20, 60, 60), text("Rel.Tim."),                                   channel("ARelTim"), range(0,      2.00, 0.1,0.5,0.001),  TrackerColour("Silver"), textcolour("white"), colour("white"), outlinecolour(100,100,100)
}

; output
image   bounds(440,  0,260, 90), colour(50,50,100), outlinecolour("LightGrey"), outlinethickness(1), shape("sharp"), plant("output"){
label   bounds(  5,  5,250, 12), text("Output"), fontcolour(white)
rslider bounds( 10, 20, 60, 60), text("Width"),                                      channel("width"),   range(0,      1.00, 0.3), TrackerColour("Silver"), textcolour("white"), colour("white"), outlinecolour(100,100,100)
rslider bounds( 70, 20, 60, 60), text("Rvb.Send"),                                   channel("RvbSend"), range(0,      1.00, 0.2), TrackerColour("Silver"), textcolour("white"), colour("white"), outlinecolour(100,100,100)
rslider bounds(130, 20, 60, 60), text("Rvb.Size"),                                   channel("RvbSize"), range(0.5,    0.99, 0.6), TrackerColour("Silver"), textcolour("white"), colour("white"), outlinecolour(100,100,100)
rslider bounds(190, 20, 60, 60), text("Level"),                                      channel("OutGain"), range(0,     10.00, 0.5,0.5), TrackerColour("Silver"), textcolour("white"), colour("white"), outlinecolour(100,100,100)
}

; bow position
image   bounds(  0, 90,700, 90), colour(50,50,100), outlinecolour("LightGrey"), outlinethickness(1), shape("sharp"), plant("bowposition"){
label   bounds(  5,  5,690, 12), text("Bowing Position"), fontcolour(white)
hslider bounds( 10, 30,565, 30), text("Manual"),                                     channel("pos"),      range(0,      1.00, 0.7), TrackerColour("Silver"), textcolour("white"), colour("white")
line    bounds(580,  8,100, 2), colour("grey")
label   bounds(595,  5, 72, 10), text("MODULATION"), colour(50,50,100), fontcolour("white")
rslider bounds(570, 20, 60, 60), text("Depth"),                                      channel("PosModDep"),range(0,     0.50, 0.25), TrackerColour("Silver"), textcolour("white"), colour("white"), outlinecolour(100,100,100)
rslider bounds(630, 20, 60, 60), text("Rate"),                                       channel("PosModRte"),range(0.01, 50.00, 3,0.5,0.01),    TrackerColour("Silver"), textcolour("white"), colour("white"), outlinecolour(100,100,100)
}

; bow pressure
image   bounds(  0,180,700, 90), colour(50,50,100), outlinecolour("LightGrey"), outlinethickness(1), shape("sharp"), plant("bowpressure"){
label   bounds(  5,  5,690, 12), text("Bowing Pressure"), fontcolour(white)
hslider bounds( 10, 30,505, 30), text("Manual"),                                     channel("bowpres"),   range(0,     1, 0.45), TrackerColour("Silver"), textcolour("white"), colour("white")
rslider bounds(510, 20, 60, 60), text("Velocity"),                                   channel("BowPresVel"),range(0,     1.00, 0), TrackerColour("Silver"), textcolour("white"), colour("white"), outlinecolour(100,100,100)
line    bounds(580,  8,100, 2), colour("grey")
label   bounds(595,  5, 72, 10), text("MODULATION"), colour(50,50,100), fontcolour("white")
rslider bounds(570, 20, 60, 60), text("Depth"),                                      channel("BowPresDep"),range(0,     0.50, 0.25), TrackerColour("Silver"), textcolour("white"), colour("white"), outlinecolour(100,100,100)
rslider bounds(630, 20, 60, 60), text("Rate"),                                       channel("BowPresRte"),range(0.01, 50.00, 3.5,0.5,0.01),  TrackerColour("Silver"), textcolour("white"), colour("white"), outlinecolour(100,100,100)
}

; system
image   bounds(  0,270,700, 90), colour(50,50,100), outlinecolour("LightGrey"), outlinethickness(1), shape("sharp"), plant("system"){
label   bounds(  5,  5,690, 12), text("System"), fontcolour(white)
hslider bounds( 10, 20,685, 30), text("F.back"),                                   channel("gain"),    range(0,      1.00, 0.95), TrackerColour("Silver"), textcolour("white"), colour("white")
hslider bounds( 10, 50,685, 30), text("Discord"),                                    channel("const"),   range(0,   1.50, 0.97), TrackerColour("Silver"), textcolour("white"), colour("white")
}

keyboard pos( 0, 360), size(700, 80)
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>
sr 	= 	44100
ksmps 	= 	32
nchnls 	= 	2
;0dbfs	=	1

gasendL,gasendR	init	0

/* MAPPING TO SCALE AMPLITUDES ACCORDING TO BOW PRESSURE (HIGHER BOW PRESSURES DEMAND AMPLITUDE ATTENUATIONS) */
giPresScale	ftgen	0, 0, 128*4, 16, 1, 78*4, 0, 1, 50*4, -1, 0.01

/* UDO TO CONTAIN EXPLOSIONS IN AMPLITUDE */
opcode	AmpLimit,a,aiii
 asig,imax,iatt,irel	xin
 krms		init	0
 kGainCtrl	init	1
 if krms>imax then
  kGainCtrl	limit	kGainCtrl - iatt, 0, 1
 else
  kGainCtrl	limit	kGainCtrl + irel, 0, 1
 endif
 asig	=	asig * kGainCtrl
 krms		rms	asig
	xout	asig
endop


instr	1		; WGBOWEDBAR INSTRUMENT
	kporttime	linseg	0,0.001,0.05							; portamento time used to smooth value changes from widgets

	gkamp		chnget	"amp"
	gkvel		chnget	"vel"

	/* BOW POSITION */
	gkpos		chnget	"pos"								; bow position
	kpos		portk	gkpos, kporttime
	gkPosModDep	chnget	"PosModDep"
	gkPosModRte	chnget	"PosModRte"
	if gkPosModDep>0 then									; if modulation depth greater than zero...
	 kPosMod	rspline	-gkPosModDep,gkPosModDep,gkPosModRte*0.5,gkPosModRte
	 kpos		limit	kpos + kPosMod, 0, 1
	endif

	/* BOW PRESSURE */	
	gkbowpres	chnget	"bowpres"
	kbowpres	portk	gkbowpres, kporttime
	gkBowPresDep	chnget	"BowPresDep"
	gkBowPresRte	chnget	"BowPresRte"
	if gkBowPresDep>0 then									; if modulation depth greater than zero...
	 kBowPresMod	rspline	-gkBowPresDep,gkBowPresDep,gkBowPresRte*0.5,gkBowPresRte
	 kbowpres	limit	kbowpres + kBowPresMod, 0, 1
	endif
	iBowPresVel	chnget	"BowPresVel"							; velocity influence of
	iVelPres	ampmidi	iBowPresVel							; velocity to bow pressure
	kbowpres	limit	kbowpres + iVelPres, 0, 1					; limit to prevent out of range values that could result from the combination of manual, random and velocity control of bow pressure
	kBowPresScale	tablei	kbowpres,giPresScale,1						; read pressure amplitude scale value from table (n.b. higher bow pressure values demand amplitude scaling)
	kBowPresScale	portk	kBowPresScale, kporttime					; smooth changes in bow pressure amplitude scaling
	kbowpres	scale	kbowpres, 0.2, 20.00						; remap bow pressure value from 0 - 1 to 0.2 - 20

	gkAEnv		chnget	"AEnv"								; amount of envelope influence. If this is zero, 'Att.Tim.', 'Dec.Tim' 'Sus.Lev." and 'Rel.Tim.' will have no influence
	gkAAttTim	chnget	"AAttTim"
	gkADecTim	chnget	"ADecTim"
	gkASusLev	chnget	"ASusLev"
	gkARelTim	chnget	"ARelTim"

	gkRvbSend	chnget	"RvbSend"
	gkRvbSize	chnget	"RvbSize"
	gkwidth		chnget	"width"

	gkamp		portk	gkamp, kporttime
	
	/* AMPLITUDE ENVELOPE */
	if i(gkAAttTim)>0 then								; if zero attack time, skip attack stage in envelope
	 kAmpEnv	linsegr	0,i(gkAAttTim),1,i(gkADecTim),i(gkASusLev),i(gkARelTim),0
	else
	 kAmpEnv	linsegr	1,i(gkADecTim),i(gkASusLev),i(gkARelTim),0		; with attack stage
	endif
	kAmpEnv		ntrpol	1,kAmpEnv,gkAEnv					; mix of envelope influence: 0=no_envelope_influence 1=full_envelope_influence
	aAmpEnv		interp	kAmpEnv
	gkamp	=	gkamp * aAmpEnv							; scale manual amplitude control with envelope
	
	icps	cpsmidi				; READ MIDI PITCH VALUES - THIS VALUE CAN BE MAPPED TO GRAIN DENSITY AND/OR PITCH DEPENDING ON THE SETTING OF THE MIDI MAPPING SWITCHES
	ivel	veloc		0,1		; READ NOTE VELOCITY. WILL BE WITHIN THE RANGE 0 AND 1
	iamp	ampmidi	i(gkvel)*(-4)
	gkamp	scale	gkamp,0,4
	kamp 	limit	iamp + gkamp, 0,10

	gkgain		chnget	"gain"							; called 'feedback' in the GUI
	gkconst		chnget	"const"							; called 'Discord' in the GUI
	kSwitch		changed		gkconst
	if	kSwitch=1	then		;IF I-RATE VARIABLE CHANGE TRIGGER IS '1'...
		reinit	UPDATE			;BEGIN A REINITIALISATION PASS FROM LABEL 'UPDATE'
	endif
	UPDATE:	
	abowedbar      	wgbowedbar 	kamp, icps, kpos, kbowpres, gkgain, i(gkconst), 0, 0, 20
	rireturn	;RETURN FROM REINITIALISATION PASS TO PERFORMANCE TIME PASSES	
		
	/* OUTPUT LEVEL CONTROL */
	gkOutGain	chnget	"OutGain"							; called 'Level' in the GUI. Controls output level.
	aenv	linsegr	1, i(gkARelTim), 0		;ANTI-CLICK ENVELOPE
	abowedbar	=	abowedbar * gkOutGain * aenv * kBowPresScale

	/* CALL THE AmpLimit UDO */
	;				INPUT     | AMP_LIMIT | ATTACK | RELEASE
	abowedbar	AmpLimit	abowedbar,     0.9*0dbfs,      0.01,    0.01

	/* STEREO WIDENING */
	if gkwidth>0 then
	 kRndDelL		rspline		0, 0.01*gkwidth, 0.4, 0.8
	 kRndDelR		rspline		0, 0.01*gkwidth, 0.4, 0.8
	 kRndDelL		limit		kRndDelL, 0, 0.01
	 kRndDelR		limit		kRndDelR, 0, 0.01
	 aRndDelL		interp		kRndDelL
	 aRndDelR		interp		kRndDelR
	 aL			vdelay		abowedbar, 0.1+(aRndDelL*1000), 0.1 + 10
	 aR			vdelay		abowedbar, 0.1+(aRndDelR*1000), 0.1 + 10
         
	 gasendL		=	gasendL + (aL * gkRvbSend)
	 gasendR		=	gasendR + (aR * gkRvbSend)
	 		outs 		aL, aR
	else 	; WIDTH CONTROL IS ZERO (NO STEREO EFFECT)
	 gasendL		=	gasendL + (abowedbar * gkRvbSend)
	 gasendR		=	gasendR + (abowedbar * gkRvbSend)
         
	 outs 		abowedbar, abowedbar
	endif
endin

instr	99
	aL,aR	reverbsc	gasendL,gasendR,gkRvbSize,4000
		outs		aL,aR
		clear		gasendL,gasendR
endin
</CsInstruments>

<CsScore>
i 1 0 0.1	; INITIALISES THE ALGORITHM (OTHERWISE THE FIRST NOTE PLAYED DOESN'T SOUND)
i 99 0 3600	; REVERB
</CsScore>

</CsoundSynthesizer>; Parp.csd
; Iain McCurdy, 2015

; Based on Perry Cook's waveguide model of someone struggling to play a trombone, wgbrass.

; Please note that this is a rather temperamental opcode so some patience is needed if the instrument fails to sound.
; The values for 'Breath' (power) and 'Lip Tension' are most important in getting the instrument to sound.
; The actual values needed for these two parameters will also depend upon the note played.
; Lower notes tend to require a lower breath power and/or higher lip tension (TENSION:Offset).

; Sometimes it is necessary just to restart a note in order to get it to sound.

; In order to create a modulation of pitch and tone, tension can be randomly modulated using the controls 'Mod.Dep.' and 'Mod.Rate' 

; Some presets are provided to offer useful starting points.


<Cabbage>
#define	SLIDER_STYLE # trackercolour( 50, 50,155), fontcolour("black"), textcolour("black") #
#define	CHECKBOX_STYLE # colour(255,255,100) #

form caption("Parp") size(980,221), pluginid("Parp"), colour(170,170,170) style("legacy")

image      bounds(  2,  2,976,130), colour(220,220,220), outlinecolour("black"), outlinethickness(1)
rslider    bounds(  0, 25, 90, 90), valuetextbox(1), textbox(1), text("Breath"),     channel("amp"),      range(0.001,10,1,0.5),        $SLIDER_STYLE
line       bounds( 85,  5,  2,126)
image      bounds( 80, 10,230,105), colour(0,0,0,0), plant("Tension") { 
label      bounds(  0,  0,230, 12), text("T E N S I O N"), fontcolour( 70, 70, 70)
rslider    bounds(  0, 15, 90, 90), valuetextbox(1), textbox(1), text("Offset"),  channel("tens"),     range(0,5,0.75),                $SLIDER_STYLE
rslider    bounds( 70, 15, 90, 90), valuetextbox(1), textbox(1), text("Mod.Dep"),  channel("TRndDep"),  range(0,0.8,0.1,0.5,0.001),              $SLIDER_STYLE
rslider    bounds(140, 15, 90, 90), valuetextbox(1), textbox(1), text("Mod.Rate"),  channel("TRndRte"),  range(0.01,100,8,0.5,0.01),      $SLIDER_STYLE
}
line       bounds(305,  5,  2,126)

button     bounds(320, 60, 50, 20), text("Mono","Poly"), channel("MonoPoly"), value(1)
rslider    bounds(365, 25, 90, 90), valuetextbox(1), textbox(1), text("Port.Time"), channel("PortTime"),  range(0, 5, 0.9), identchannel("PortTimeID"), visible(1), $SLIDER_STYLE

rslider    bounds(435, 25, 90, 90), valuetextbox(1), textbox(1), text("Spread"),   channel("PanDep"),   range(0,1,1),                 $SLIDER_STYLE
rslider    bounds(505, 25, 90, 90), valuetextbox(1), textbox(1), text("Stereo"),   channel("Stereo"),   range(0,1,1),                 $SLIDER_STYLE

image      bounds(585,  0,227,131), colour(0,0,0,0), plant("Reverb") { 
label bounds(  0, 10,227, 12), text("R E V E R B"), fontcolour( 70, 70, 70) 
line bounds(  5,  5,  2,126) 
rslider    bounds(  0, 25, 90, 90), valuetextbox(1), textbox(1), text("Mix"),      channel("RvbMix"),   range(0,1,0.5), $SLIDER_STYLE 
rslider    bounds( 70, 25, 90, 90), valuetextbox(1), textbox(1), text("Size"), channel("RvbSize"),  range(0,1,0.005,0.5,0.001),   $SLIDER_STYLE 
rslider    bounds(140, 25, 90, 90), valuetextbox(1), textbox(1), text("Damp"),     channel("RvbDamp"), range(0,1,1),                 $SLIDER_STYLE 
line       bounds(225,  5,  2,126) 
}

label      bounds(820, 46, 75, 12), text("Preset"), fontcolour("black")
combobox   bounds(820, 60, 75, 20), text("Preset 1","Preset 2","Preset 3","Preset 4","Preset 5"),    channel("Preset"), value(1)
rslider    bounds(885, 25, 90, 90), valuetextbox(1), textbox(1), text("Level"),    channel("outamp"),   range(0.001,100,3,0.5,0.001), $SLIDER_STYLE

keyboard   bounds(  2,134,976, 85)

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr = 44100
ksmps = 16
nchnls = 2
0dbfs = 1

massign	0,2

opcode	lineto2,k,kk
 kinput,ktime	xin
 ktrig	changed	kinput,ktime				; reset trigger
 if ktrig==1 then					; if new note has been received or if portamento time has been changed...
  reinit RESTART
 endif
 RESTART:						; restart 'linseg' envelope
 if i(ktime)==0 then					; 'linseg' fails if duration is zero...
  koutput	=	i(kinput)			; ...in which case output simply equals input
 else
  koutput	linseg	i(koutput),i(ktime),i(kinput)	; linseg envelope from old value to new value
 endif
 rireturn
 		xout	koutput
endop

; FUNCTION TABLES MAP NOTE NUMBERS TO BREATH POWER (AMPSCL) AND OUTPUT LEVEL IN AN ATTEMPT TO PROVIDE A MORE PLAYABLE INSTRUMENT
giAmpScl	ftgen	0,0,128,-25, 0,0.001, 30,0.01, 36,0.04, 48,0.1, 60,0.2, 72,0.4, 84,1.5, 96,4, 108,10, 128,20
giLevScl	ftgen	0,0,128,-25, 0,10, 30,6, 36,4, 48,1.6, 60,1, 72,0.6, 84,0.15, 96,0.05, 108,0.02, 128,0.01

; EACH NOTE PLAYED MAPS TO A DIFFERENT (RANDOM BUT REPEATABLE) PANNING LOCATION
giPanDist	ftgen	0,0,128,21,1,1
gasendL,gasendR	init	0			; REVERB SEND VARIABLE

instr	1
 kPortTime	linseg	0,0.001,0.05
 /* READ IN WIDGETS */
 kamp    	chnget	"amp"
 gkamp		portk	kamp,kPortTime		; SMOOTH CHANGES
 gktens   	chnget	"tens" 	
 gkoutamp 	chnget	"outamp" 	
 gkTRndDep	chnget	"TRndDep"	
 gkTRndRte	chnget	"TRndRte"	
 gkPanDep	chnget	"PanDep"
 kStereo	chnget	"Stereo"
 gkStereo	portk	kStereo,kPortTime	; SMOOTH CHANGES
 gkRvbMix	chnget	"RvbMix"
 gkRvbSize	chnget	"RvbSize"
 gkRvbDamp	chnget	"RvbDamp"
 gkMonoPoly	chnget	"MonoPoly"
 gkPortTime	chnget	"PortTime"		; PORTAMENTO TIME IN MONOPHONIC LEGATO MODE 
endin

	givfn	ftgenonce	0, 0, 256, 10, 1	; VIBRATO WAVEFORM (A SINE WAVE) - (VIBRATO IS NOT USED)


instr	2					; RESPONDS TO MIDI NOTES PLAYED
 inum	notnum					; READ IN NOTE NUMBER
 gknum	=	inum				; ASSIGN TO K-RATE GLOBAL VARIABLE FOR NOTE NUMBER (NEEDED IN MONOPHONIC LEGATO MODE)
 iactive	active	3			; SENSE NUMBER OF ACTIVE NOTES IN SOUNDING INSTRUMENT
 if i(gkMonoPoly)==0&&iactive==0 then		; IF MONOPHONIC/LEGATO MODE AND THIS IS THE FIRST NOTE PLAYED...
  event_i	"i",3,0,-1			; START SOUNDING INSTRUMENT WITH A HELD NOTE
 elseif i(gkMonoPoly)==1 then			; OTHERWISE IF POLYPHONIC MODE
  aL,aR	subinstr	3, inum			; CALL SOUNDING INSTRUMENT AS A SUBINSTRUMENT
 endif						; END OF CONDITIONAL BRANCHING
endin

instr	3					; SOUNDING INSTRUMENT
 if active:k(2)==0 then				; IF ALL MIDI NOTES (INSTR 2 RESPONDS TO MIDI) ARE RELEASED...
  turnoff					; TURN THIS INSTRUMENT OFF (ALLOW RELEASE SEGMENTS TO COMPLETE)
 endif						; END OF CONDITIONAL BRANCHING
 kPortTime	linseg	0,0.001,1		; PORTAMENTO FUNCTION RAMPS UP RAPIDLY FROM ZERO TO A HELD VALUE OF '1'

 if release:k()==1 kgoto SKIP			; IF NOTE IS IN RELEASE STAGE DO NOT READ IN ANY NEW NOTE VALUES
 if i(gkMonoPoly)==0 then			; IF MONOPHONIC/LEGATO MODE...
  knum		lineto2	gknum,kPortTime*gkPortTime	; ...GLIDE TO NEW NOTE VALUES (NOTE NUMBER IS DEFINED BY NEWEST MIDI NOTE PLAYED)
 elseif i(gkMonoPoly)==1 then			; OTHERWISE (POLYPHONIC MODE)
  knum		init	p4			; NOTE IS JUST DEFINED BY p4 VALUE SENT BY THE SUBINSTR OPCODE IN INSTR 2
 endif						; END OF CONDITIONAL BRANCHING
 SKIP:						; JUMP TO HERE IF IN RELEASE STAGE
 
 ktensrnd	rspline	-gkTRndDep, gkTRndDep, gkTRndRte, gkTRndRte*3	; RANDOM SPLINE FUNCTION USED TO MODULATE LIP TENSION PARAMETER
 
 ktensenv	transeg	-0.2,.02,4,0
 ktensrnd	+=	ktensenv
 
 kAmpScl	tablei	knum,giAmpScl		; READ AMP (BREATH POWER) SCALING VALUE ACCORDING NOTE NUMBER
 asig		wgbrass gkamp*kAmpScl, cpsmidinn(knum), gktens+ktensrnd, 0.01, 0, 0, givfn, 1	; GENERATE A WGBRASS TONE
 kLevScl	tablei	knum,giLevScl		; READ OUTPUT LEVEL SCALING VALUE ACCORDING NOTE NUMBER
 asig		*=	kLevScl			; APPLY LEVEL SCALING VALUE
 
 kPan		tablei	knum,giPanDist		; READ IN PAN POSITION FOR THE NOTE PLAYED FROM RANDOM DISTRIBUTION TABLE
 aL,aR		pan2	asig,(kPan*gkPanDep) + (0.5*(1-gkPanDep)) 	; CREATE STEREO (PANNED) SIGNALS
 
 if gkStereo>0 then
  kRndDelL	rspline		0, 0.04*gkStereo, 0.1, 0.2	; SPLINIC RANDOM DELAY TIME (LEFT CHANNEL)
  kRndDelR	rspline		0, 0.04*gkStereo, 0.1, 0.2	; SPLINIC RANDOM DELAY TIME (RIGHT CHANNEL)
  kRndDelL	limit		kRndDelL, 0, 0.04		; CONSTRAIN POSSIBLE OUT OF RANGE VALUE
  kRndDelR	limit		kRndDelR, 0, 0.04
  aRndDelL	interp		kRndDelL			; CONVERT TO A-RATE WITH LINER INTERPOLATION
  aRndDelR	interp		kRndDelR
  aL		vdelay		aL, 0.1+(aRndDelL*1000), 0.1 + 40	; CREATE SHORT DELAY VERSIONS OF BOTH CHANNELS WITH DIFFERENT DELAY TIMES
  aR		vdelay		aR, 0.1+(aRndDelR*1000), 0.1 + 40
 endif
	 
 kenv		linsegr	1,0.1,0					; ANTI-CLICK ENVELOPE
 aL		*=	kenv					; APPLY ENVELOPE
 aR		*=	kenv
 gasendL	+=	aL					; MIX IN BOTH CHANNELS TO SEND SIGNAL FOR INSTR 99 (REVERB AND OUTPUT)
 gasendR	+=	aR

endin

instr	99							; REVERB AND OUTPUT
	aL,aR		freeverb	gasendL,gasendR,gkRvbSize,gkRvbDamp	; FREEVERBED SIGNALS
	aL		ntrpol		gasendL/2,aL,gkRvbMix	; MIX DRY/WET
	aR		ntrpol		gasendR/2,aR,gkRvbMix
			outs		aL*gkoutamp, aR*gkoutamp	; SEND DRY/WET MIX TO OUTPUTS
			clear		gasendL,gasendR			; CLEAR AUDIO SEND SIGNALS
endin

instr	100
 kPreset	chnget	"Preset"
 
 #define PRESET(amp'tens'TRndDep'TRndRte'MonoPoly'PortTime'PanDep'Stereo'RvbMix'RvbSize'RvbDamp'outamp)
 #
 chnset	$amp,           "amp"
 chnset	$tens,		"tens"	
 chnset	$TRndDep,	"TRndDep"	
 chnset	$TRndRte,	"TRndRte"	
 chnset	$MonoPoly,      "MonoPoly"	
 chnset	$PortTime,      "PortTime"	
 chnset	$PanDep,	"PanDep"	
 chnset	$Stereo,	"Stereo"	
 chnset	$RvbMix,	"RvbMix"	
 chnset	$RvbSize,	"RvbSize"	
 chnset	$RvbDamp,	"RvbDamp"	
 chnset	$outamp,	"outamp"	
 #

 if changed(kPreset)==1 then
  reinit SendPreset
  SendPreset:
  if i(kPreset)==1 then
   ;       amp 'tens  'TRndDep'TRndRte'MonoPoly'PortTime'PanDep'Stereo'RvbMix'RvbSize'RvbDamp'outamp)
   $PRESET(1   '0.75  '0.1    '8      '1       '0.9     '1     '1     '0.5   '0.005  '1      '3)     
  elseif i(kPreset)==2 then
   $PRESET(0.54'0.64  '0.0    '0.1    '1       '0.8     '0.5   '0.27  '0.5   '0.005  '1      '3)
  elseif i(kPreset)==3 then
   $PRESET(0.79'0.64  '0.065  '1.82   '1       '0.7     '1     '0.3   '0.5   '0.005  '1      '3)
  elseif i(kPreset)==4 then
   $PRESET(0.46'2.70  '0.131  '32     '1       '0.6     '0.75  '0.5   '0.5   '0.005  '1      '3)
  elseif i(kPreset)==5 then
   $PRESET(0.77'0.63  '0.065  '1.82   '0       '1.7     '1     '0.22  '1     '0.64   '1      '3)
  endif
 endif
endin

</CsInstruments>  

<CsScore>
i 1   0 [3600*24*7]	; READ IN WIDGETS
i 3 0.1 3 60		; INITIAL DUMMY NOTE - NEEDED TO PREVENT FIRST PLAYED NOTE FROM BEING SILENT. THIS IS A BIT MYSTERIOUS.
i 99  0 [3600*24*7]	; REVERB AND OUTPUT
i 100 0 [3600*24*7]	; PRESETS
</CsScore>

</CsoundSynthesizer>; PreparedPiano.csd
; Written by Iain McCurdy, 2016

; This instrument is an encapsulation of the 'prepiano' opcode, an emulation of a prepared piano string modified with a damping piece of rubber and a rattling element (e.g. a bolt) in loose contact with the string.

; This physical model emplys complex mathematics and therefore places a high demand upon the CPU. It will be unrealistic to expect more that a few notes of polyphony being possible.
; Increasing the 'Num.Strings' paramter increases the CPU demand per note as do the addition of rattles and rubbers.

; The mathematical output can extremely dynamic depending on the input values used. Put simply, the audio output can overload and explode depending on the input paramters chosen.
; A gating mechanism is implemented to remove the worst effects of exploding amplitudes but care should nonetheless be employed.

; CONTROLS
; --------
; Num. Strings		-	the number of strings struck as a cluster by the hammer. (NB. this setting is less apparent if 'Detuning' is zero.)
;					i.e. in a traditional piano design each hammer will string between 1 and 3 strings. This is done in order to thicken the sound produced.
; Detuning		-	detuning between the strings struck by each hammer
; Stiffness		-	stiffness of the strings. As this is increased the sound produced becomes more inharmonic.
; Duration		-	decay time - time for the sound level to decay by 30dB.
; Release 		-	release time (after a MIDI key is released).
; Hi.Freq.Loss		-	rate at which high frequencies decay.
; Upper Lim.		-	note number limit above which notes will not sound. This can be useful in removing higher notes that explode from an instrument setup.
; Hamm.Mass		-	mass of the hammer. This equates to amplitude and is useful in compensating for power gains and losses caused by changes made to other parameters. This value is also scaled by MIDI key velocity.
; Hamm.Freq.		-	frequency (brightness) of the striking hammer. This value is also scaled by MIDI key velocity.
; Strike.Pos.		-	position along the length of the string at which the hammer strikes
; String.Vel.		-	normalised string velocity
; Scan Freq		-	rate at which the pickup (listening) point oscillates
; Scan Spread		-	spread of phases of scanning points across the different strings. (The effects of this are most apparent if 'Scan Freq.' is low

; Left B.C.		-	method by which the left end of each string is fixed: 'fixed', 'pivoting' or 'free'
; Right B.C.		-	method by which the right end of each string is fixed: 'fixed', 'pivoting' or 'free'

; Rattle
; On/Off		-	whether a rattle is present or not on each string
; Position		-	location of the rattle along the length of the string
; Mass Dens.Ratio	-	Ratio between the density of the rattle and the frequency at which it rattles. In general if this parameter is high, rattle frequency should be low.
; Frequency		-	Frequency of the rattling. In general if this parameter is high, 'Mass Dens.Ratio' should be low.
; Length		-	Length of the rattle.

; Rubber
; On/Off		-	whether a rubber is present or not on each string
; Position		-	location of the rubber along the length of the string.
; Mass Dens.Ratio	-	Ratio between the density of the rubber and the frequency at which it damps In general if this parameter is high, rubber damping frequency should be low.
; Frequency		-	Frequency of the rubber. In general if this parameter is high, 'Mass Dens.Ratio' should be low.
; Loss			-	rate of energy loss induced by the rubber.

<Cabbage>
form caption("Prepared Piano") size(795,245), colour(250,235,255), pluginid("PreP") style("legacy")
nslider  bounds(  5,5,70,34), channel("NS"),    range(2, 50, 3,1,1),       textcolour(black), fontcolour(black), text("Num.Strings"), colour(white)
nslider  bounds( 85,5,70,34), channel("D"),    range(0,20000, 0),       textcolour(black), fontcolour(black), text("Detuning"), colour(white)
nslider  bounds(165,5,70,34), channel("K"),    range(1, 40, 1),       textcolour(black), fontcolour(black), text("Stiffness"), colour(white)
nslider  bounds(245,5,70,34), channel("T30"),   range(0.1, 30, 12),       textcolour(black), fontcolour(black), text("Decay"), colour(white)
nslider  bounds(325,5,70,34), channel("rel"),      range(0.001,8,0.1,1,0.001),       textcolour(black), fontcolour(black), text("Release Time"), colour(white)
nslider  bounds(405,5,70,34), channel("B"),        range(0.0001, 1, 0.002,1,0.0001),       textcolour(black), fontcolour(black), text("Hi.Freq.Loss"), colour(white)
nslider  bounds(485,5,70,34), channel("UpperLim"),range(0,127,127,1,1),       textcolour(black), fontcolour(black), text("Upper Lim."), colour(white)

nslider  bounds(  5, 45, 70, 34), channel("mass"),    range(0.0001,1000,1,1,0.0001),       textcolour(black), fontcolour(black), text("Hamm.Mass."), colour(white)
nslider  bounds( 85, 45, 70, 34), channel("freqH"),   range(1,4000000,20000.1,1,1),       textcolour(black), fontcolour(black), text("Hamm.Freq."), colour(white)
nslider  bounds(165, 45, 70,34), channel("pos"),    range(0.004,0.996,0.09),       textcolour(black), fontcolour(black), text("Strike Pos."), colour(white)
nslider  bounds(245, 45, 70,34), channel("vel"),   range(0,1000, 50),       textcolour(black), fontcolour(black), text("String Vel."), colour(white)
nslider  bounds(325, 45, 70, 34), channel("sfreq"),    range(0,100,0,1,0.001),       textcolour(black), fontcolour(black), text("Scan Freq"), colour(white)
nslider  bounds(405, 45, 70, 34), channel("sspread"),  range(0,1,0.1,1,0.001),       textcolour(black), fontcolour(black), text("Scan Spread"), colour(white)
nslider  bounds(485, 45, 70, 34), channel("OctShift"),range(-4,0,0,1,1),       textcolour(black), fontcolour(black), text("Oct.Shift"), colour(white)

label      bounds(570, 10, 70, 12), text("Left B.C."), fontcolour("black")
checkbox   bounds(570, 28, 70, 14), text("Clamped"),  channel("BCL1"), fontcolour("black"), colour("yellow"), value(0), radiogroup(1)
checkbox   bounds(570, 43, 70, 14), text("Pivoting"), channel("BCL2"), fontcolour("black"), colour("yellow"), value(1), radiogroup(1) 
checkbox   bounds(570, 58, 70, 14), text("Free"),     channel("BCL3"), fontcolour("black"), colour("yellow"), value(0), radiogroup(1)

label      bounds(650, 10, 70, 12), text("Right B.C."), fontcolour("black")
checkbox   bounds(650, 28, 70, 14), text("Clamped"),  channel("BCR1"), fontcolour("black"), colour("yellow"), value(0), radiogroup(2)
checkbox   bounds(650, 43, 70, 14), text("Pivoting"), channel("BCR2"), fontcolour("black"), colour("yellow"), value(1), radiogroup(2) 
checkbox   bounds(650, 58, 70, 14), text("Free"),     channel("BCR3"), fontcolour("black"), colour("yellow"), value(0), radiogroup(2)

label      bounds(740, 10, 40, 12), text("Preset"), fontcolour("black")
combobox   bounds(740, 28, 40, 15), channel("preset"), text("1","2","3","4","5","6","7","8","9","10"),  textcolour("white"), fontcolour("white"), colour("black")

image     bounds(  5, 90,390, 65), colour(0,0,0,0), outlinecolour(0,0,0), outlinethickness(1), plant("rattle1") {
label     bounds(  0,  2,390, 15), fontcolour("black"), text("Rattle") 
checkbox  bounds( 10,  7, 60, 11), text("On/Off"), channel("rattle1"),fontcolour("black"), colour("yellow"), value(1)
nslider bounds( 10, 22, 85, 34), channel("posRat1"), range(0, 1, 0.6),               textcolour(black), fontcolour(black), text("Position"), colour("white")
nslider bounds(105, 22, 85, 34), channel("MDRRat1"), range(0,10000,1000,1,0.01),     textcolour(black), fontcolour(black), text("Mass Dens.Ratio"), colour(white)
nslider bounds(200, 22, 85, 34), channel("FrqRat1"), range(0.1,10000,30,1,0.1),      textcolour(black), fontcolour(black), text("Freq."), colour(white)
nslider bounds(295, 22, 85, 34), channel("LenRat1"), range(0.001,1, 0.001,1,0.001),  textcolour(black), fontcolour(black), text("Length"), colour("white")
}

image     bounds(400, 90,390, 65), colour(0,0,0,0), outlinecolour(0,0,0), outlinethickness(1), plant("rubber1") {
label     bounds(  5,  2,390, 15), fontcolour("black"), text("Rubber") 
checkbox  bounds( 10,  7, 60, 11), text("On/Off"), channel("rubber1"), fontcolour("black"), colour("yellow"), value(1)
nslider bounds( 10, 22, 85, 34), channel("posRub1"), range(0, 1, 0.7),           textcolour(black), fontcolour(black), text("Position"), colour("white")
nslider bounds(105, 22, 85, 34), channel("MDRRub1"), range(0,10000,1000,1,0.01), textcolour(black), fontcolour(black), text("Mass.Dens.Ratio"), colour(white)
nslider bounds(200, 22, 85, 34), channel("FrqRub1"), range(0.1,10000,40,1,0.1),  textcolour(black), fontcolour(black), text("Freq."), colour(white)
nslider bounds(295, 22, 85, 34), channel("LosRub1"), range(0,10000, 1000,1,1),   textcolour(black), fontcolour(black), text("Loss"), colour("white")
}

keyboard  bounds( 0,165,800,80)
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=NULL -M0
</CsOptions>

<CsInstruments>

sr 			= 	44100	;SAMPLE RATE
ksmps 		= 	32		;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2		;NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1
massign	0,2				;ALL MIDI TO INSTR 2

gkinit		init	-0.01
gkMuteThresh	init	0.9

giVelCurve	ftgen	0,0,128,-16,0,128,4,1	; VELOCITY CURVE. ADJUST CURVE VALUE ACCORDING TO THE HARDWARE KEYBOARD USED!

instr	1	; READ IN WIDGETS
 krattle1	chnget	"rattle1"
 kposRat1	chnget	"posRat1"
 kMDRRat1	chnget	"MDRRat1"
 kFrqRat1	chnget	"FrqRat1"
 kLenRat1	chnget	"LenRat1"

 krubber1	chnget	"rubber1"
 kposRub1	chnget	"posRub1"
 kMDRRub1	chnget	"MDRRub1"
 kFrqRub1	chnget	"FrqRub1"
 kLosRub1	chnget	"LosRub1"

 if changed(krattle1,kposRat1,kMDRRat1,kFrqRat1,kLenRat1,krubber1, kposRub1,kMDRRub1,kFrqRub1,kLosRub1)==1 then
  reinit RebuildTables
 endif
 RebuildTables:
 girattles	ftgen	1, 0, -5, -2, i(krattle1), i(kposRat1), i(kMDRRat1), i(kFrqRat1), i(kLenRat1)
 girubbers	ftgen	2, 0, -5, -2, i(krubber1), i(kposRub1), i(kMDRRub1), i(kFrqRub1), i(kLosRub1)
 rireturn
 
 ; PRESETS
 kpreset	chnget	"preset"
 #define	SEND_PRESET(N'NS'D'K'T30'rel'B'UpperLim'mass'freqH'pos'vel'sfreq'sspread'OctShift'BCL1'BCL2'BCL3'BCR1'BCR2'BCR3'rattle1'posRat1'MDRRat1'FrqRat1'LenRat1'rubber1'posRub1'MDRRub1'FrqRub1'LosRub1)
 #
 if kpreset==$N then
 	chnset	k($NS),"NS"
 	chnset	k($D),"D"
 	chnset	k($K),"K"
 	chnset	k($T30),"T30"
 	chnset	k($rel),"rel"
 	chnset	k($B),"B"
 	chnset	k($UpperLim),"UpperLim"
 	chnset	k($mass),"mass"
 	chnset	k($freqH),"freqH"
 	chnset	k($pos),"pos"
 	chnset	k($vel),"vel"
 	chnset	k($sfreq),"sfreq"
 	chnset	k($sspread),"sspread"
 	chnset	k($OctShift),"OctShift"
 	chnset	k($BCL1),"BCL1"
 	chnset	k($BCL2),"BCL2"
 	chnset	k($BCL3),"BCL3"
 	chnset	k($BCR1),"BCR1"
 	chnset	k($BCR2),"BCR2"
 	chnset	k($BCR3),"BCR3"
 	chnset	k($rattle1),"rattle1"
 	chnset	k($posRat1),"posRat1"
 	chnset	k($MDRRat1),"MDRRat1"
 	chnset	k($FrqRat1),"FrqRat1"
 	chnset	k($LenRat1),"LenRat1"
 	chnset	k($rubber1),"rubber1"
 	chnset	k($posRub1),"posRub1"
 	chnset	k($MDRRub1),"MDRRub1"
 	chnset	k($FrqRub1),"FrqRub1"
 	chnset	k($LosRub1),"LosRub1"
 endif
 #
 if changed(kpreset)==1 then
  ;            preset N.Str|Detn|Stiff|Decay|Rel|Hi.F.Loss|Uppr Lim.|Hamm.Mass|Hamm.Freq.|Str.Pos.|Str.Vel.|Scan.Frq.|Scan.Sprd.|OctShift|BC.L.1|BC.L.2|BC.L.3|BC.R.1|BC.R.2|BC.R.3|rattle|posRat|MDRRat|FrqRat|LenRat|rubber|posRub|MDRRub|FrqRub|LosRub
  $SEND_PRESET(1'     3'    0'   1'    12'   0.1'0.002'    127'      1'        800000'    0.09'    50'      0'        0.1'       0'       0'     1'     0'     0'     1'     0'     1'     0.6'   1000'  30'    0.001' 1'     0.7'   1000'  40'    1000)
  $SEND_PRESET(2'     3'    10'  23'   12'   0.1'0.002'    127'      1'        80000'     0.06'    50'      0.5'      1'         0'       0'     1'     0'     0'     1'     0'     0'     0.6'   1000'  30'    0.001' 0'     0.7'   1000'  40'    1000)
  $SEND_PRESET(3'     2'    20'  3'    3'    0.1'0.6'      127'      5'        5000'      0.06'    50'      0.05'     1'         0'       0'     1'     0'     0'     0'     1'     1'     0.1'   20'    3000'  0.6'   0'     0.7'   1000'  40'    1000)
  $SEND_PRESET(4'     2'    48'  5'    1.6'  0.3'0.2'      127'      10'       500'       0.06'    25'      0'        1'         0'       0'     1'     0'     0'     0'     1'     1'     0.6'   10000' 30'    0.01'  0'     0.7'   1000'  40'    1000)
  $SEND_PRESET(5'     3'    0'   8'    12'   0.1'0.011'    127'      5'        40000'     0.09'    10'      0'        0.1'       0'       0'     0'     1'     0'     0'     1'     0'     0.6'   1000'  30'    0.001' 1'     0.057' 1000'  40'   10000)
  $SEND_PRESET(6'     3'    0'   40'   12'   0.1'0.0097'   127'      10'       100000'    0.09'    7'       0'        0.1'       0'       0'     1'     0'     0'     1'     0'     0'     0.6'   1000'  30'    0.001' 1'     0.866' 223'  107'   10000)
  $SEND_PRESET(7'     3'    0'   8'    12'   0.1'0.005'    127'      15'       1000000'   0.00'    10'      0'        0.1'       0'       0'     0'     1'     0'     0'     1'     0'     0.6'   1000'  30'    0.001' 1'     0.057' 50'   300'    1000)
  $SEND_PRESET(8'     3'    0'   1'    12'   0.1'0.002'    127'      50'       80000'     0.05'    20'      0'        0.1'       0'       0'     0'     1'     0'     0'     1'     1'     0.6'   5'     10'    0.244' 1'     0.822' 10'   300'    1440)
  $SEND_PRESET(9'     3'    14'  5'     8'   0.1'0.016'    127'      4'        80000'     0.05'    20'      0'        0.1'       0'       1'     0'     0'     1'     0'     0'     0'     0.6'   1000'  30'    0.001' 1'     0.89'  5'   1296'    1440)
  $SEND_PRESET(10'    3'    0'   35'   12'   0.1'0.1'      127'      1'        40000'     0.09'    50'      0'        0.1'       0'       0'     1'     0'     0'     1'     0'     1'     0.6'   0.5'   506'   0.001' 1'     0.7'   1000'  40'    1000)
 endif

endin

instr	2
 inum		notnum
 iOctShift	chnget	"OctShift"
 inum		-=	inum - (iOctShift*12)
 iUpperLim	chnget	"UpperLim"
 if inum>iUpperLim then
  turnoff
  igoto	END
 endif
 iNS		chnget	"NS"
 iD			chnget	"D"
 iK			chnget	"K"
 iT30		chnget	"T30"
 iB			chnget	"B"
 isfreq		chnget	"sfreq"
 isspread	chnget	"sspread"
 irel		chnget	"rel"
 ifreqH		chnget	"freqH"
 imass		chnget	"mass"
 ipos		chnget	"pos"
 ivel		chnget	"vel"
 iBCL1		chnget	"BCL1"
 iBCL2		chnget	"BCL2"
 iBCL3		chnget	"BCL3"
 iBCR1		chnget	"BCR1"
 iBCR2		chnget	"BCR2"
 iBCR3		chnget	"BCR3"
 iBCL		=		iBCL1+(iBCL2*2)+(iBCL3*3)
 iBCR		=		iBCR1+(iBCR2*2)+(iBCR3*3)

 ifreq		cpsmidi
 ifreq		*=	octave(iOctShift)
 iMIDIvel	ampmidi	1,giVelCurve
 	
 ;OUTPUTS 	OPCODE		BASE-FREQ | NUM_OF_STRINGS | DETUNING | STIFFNESS | 30 DB DECAY TIME | HIGH_FREQUENCY_LOSS | LEFT_BOUNDARY_CONDITION | RIGHT_BOUNDARY_CONDITION |  HAMMER_MASS   | HAMMER_FREQUENCY | HAMMER_INITIAL_POSITION | POSITION_ALONG_STRING | HAMMER_VELOCITY  | SCANNING_FREQ | SCANNING_FREQ_SPREAD | RATTLES_FUNCTION_TABLE | RUBBERS_FUNCTION_TABLE             
 al,ar		prepiano 	ifreq,           iNS,           iD,        iK,            iT30,               iB,                    iBCL,                     iBCR,             imass*iMIDIvel,    ifreqH*iMIDIvel,          i(gkinit),                ipos,            ivel*iMIDIvel,     isfreq,            isspread,              girattles,               girubbers

 al	dcblock2	al
 ar	dcblock2	ar
	
 aenv	linsegr		1,irel,0

 ; EMERGENCY GATE - CUTS AUDIO OUT COMPLETELY IF prepiano STARTS TO EXPLODE ON ACCOUNT OF A PARTICULAR COMBINATION OF INPUT PARAMETERS
 krms	rms	al			; scan RMS of left channel
 kgate	=	krms>i(gkMuteThresh)?0:1	; gate 'on' or 'off' (1 or zero) depending on rms value
 ;if trigger(kgate,0.5,0)==1 then
 ; turnoff
 ;endif
 agate	interp	kgate			; interpolate to a-rate. agate will ramp from 1 to zero (or vice versa) across the duration of ksmps. This will be a bit smoother and less 'clicky' than a simple zero to 1 switch (i.e. if using 'upsamp')
 ktrig	changed	kgate			; trigger for updating FLTK indicator
 krel	release				; sense release
 if krel==1 then				; always deactivate indicator when note is released
 endif
	
 al	=	al * aenv * agate
 ar	=	ar * aenv * agate
	outs 		al,ar
 END:
endin

</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>


</CsoundSynthesizer>; RubbedResonators.csd
; Written by Iain McCurdy, 2012. Updated 2014
; 
; This example introduces a method of 'exciting' mode filters that creates an imitation of a resonant object being bowed or rubbed. 
; The excitation signal consists of a stack of sine wave oscillators that match the number and frequencies of the mode filters being used. 
; This arrangement can cause the mode filters to resonate with great intensity so the amplitudes of the sine wave oscillators should be kept low to prevent overloading. 
; Additionally the frequency of each sine wave oscillator is individually modulated using a random 'jitter' function created using 'gaussi' (interpolating gaussian noise generator). 
; This technique results is a shifting spectral response from the filters. Adjusting the rate and amplitude of this jitter function can imitate a variety of bowing and rubbing techniques. 
; Increasing 'Jit.Dep.' while 'Jit.Rate' is kept low gives the impression of the resonator being rubbed with greater pressure. If both 'Jit.Dep.' and 'Jit.Rate' are high the impression is of the resonator begin brushed. 
; Input can also be from the live input.
; If 'Q' is low then more of the character of the impulse sound (the sine wave oscillators) will be apparent (and therefore the jitter modulation will be more apparent). If 'Q' is higher then the character of the mode filters will dominate and modulation of the impulse sound frequencies will be less apparent. A key aspect of this instrument is that once the impulse sound is removed ('Impulse Amp.' is brought to minimum) the sound produced is solely the residual resonance of the mode filters, therefore any modulation within the sine wave oscillators becomes irrelevant.
;
; Movement	-	choose between a random rubbing movement and a circular one
;
; Tuning
; ------
; Detune	-	raising this this adds an increasing amount of note-by-note fixed detuning
; Shift		-	shifts all notes (in semitones). This is intended to be used in conjunction with 'Compress'.
; Compress	-	increasingly compresses the interval between notes.

; 'Poly.Limit'	-	controls the maximum number of layers allowed. 
; 			If an attempt to exceed the polyphony limit is made, the oldest held note will be removed.
; 			This is useful for prevent CPU overloads.
; 
; 'Rel.Time'	-	defines the time over which a note will fade out if it has been removed on account of exceeding the polyphony limit 
; 
; For brightness (damping) control to work properly modal ratios in their function table will need to be in ascending order.
; 
; Chorus effect is disabled when 'Mix' is zero
; 
; Number of partials in the chosen algorithm is printed to the GUI for the user's information. Algorithms with high numbers of partials will demand more CPU and lower polyphony will be possible.

<Cabbage>
form caption("Rubbed Resonators"), size(640,320), pluginid("RubR"), guirefresh(32) style("legacy")
image pos(0, 0),                   size(640,290), colour("Sienna"), shape("sharp"), oulinecolour("brown"), outlinethickness(4)

;EXCITATION
groupbox bounds(10, 10, 330, 90), text("Excitation"), fontcolour("white"), plant("excitation"){
label    bounds(  5, 22,70,13), text("Input"), fontcolour("white")
combobox bounds(  5, 35,70,18), text("Rubbing","Strike","Live"), channel("Input")
label    bounds(  5, 55,70,13), text("Movement"), fontcolour("white")
combobox bounds(  5, 68,70,18), text("Random","Circular"), channel("Movement")
rslider  bounds( 70, 25,60,60), text("Amp."), colour("Chocolate"), channel("ImpDB"), range(-70, 0, 0)
rslider  bounds(120, 25,60,60), text("HPF"), colour("Chocolate"), channel("HPF"), range(20, 20000, 20, 0.5)
rslider  bounds(170, 25,60,60), text("LPF"), colour("Chocolate"), channel("LPF"), range(20, 20000, 20000, 0.5)
rslider  bounds(220, 25,60,60), text("Jit. Dep."), channel("JitDep"), colour("Chocolate"), range(0, 5.00, 0.4,0.5)
rslider  bounds(270, 25,60,60), text("Jit. Rate"), channel("JitRte"), colour("Chocolate"), range(0.01,100, 3,0.5)
}

;RESONATORS
groupbox bounds(340, 10,290, 90), text("Resonators"), fontcolour("white"), plant("resonators"){
label    bounds( 15, 21,140, 12), text("Instrument"), fontcolour("white")
combobox bounds( 15, 36,140, 25), channel("sound"), value(4), text("Single", "Dahina", "Banyan", "Xylophone", "Tibetan Bowl 180mm", "Spinel Sphere", "Pot Lid", "Red Cedar Wood Plate", "Tubular Bell", "Redwood Wood Plate", "Douglas Fir Wood Plate", "Uniform Wooden Bar", "Uniform Aluminium Bar", "Vibraphone 1", "Vibraphone 2", "Chladni Plates", "Tibetan Bowl 152mm", "Tibetan Bowl 140mm", "Wine Glass", "Small Handbell", "Albert Clock Bell", "Wood Block","Harmonic 10","Harmonic 20","Harmonic 30","Harmonic Odd 10","Harmonic Odd 20","Anvil")
label    bounds( 11, 62,120, 12), text("Number of Partials:"), fontcolour("white")
nslider  bounds( 126, 62, 29, 13), channel("npartials"), range(1, 10000, 6, 1, 1)
rslider  bounds(160, 25, 60, 60), text("Q"), colour("orange"), channel("Q"), range(1, 10000, 2000, 0.5)
rslider  bounds(220, 25, 60, 60), text("Bright"), colour("orange"), channel("bright"), range(-4.00, 4, 0)
}

;TUNING                                        
groupbox bounds( 10,100,160, 90), text("Tuning"), fontcolour("white"), plant("tuning"){
rslider  bounds(  0, 25, 60, 60), text("Detune"), colour("orange"), channel("detune"), range(0, 5, 0)
rslider  bounds( 50, 25, 60, 60), text("Shift"), colour("orange"), channel("shift"), range(0, 127, 0)
rslider  bounds(100, 25, 60, 60), text("Compress"), colour("orange"), channel("compress"), range(0, 1, 0)
}

;POLYPHONY                                        
groupbox bounds(170,100,220, 90), text("Polyphony"), fontcolour("white"), plant("polyphony"){
button   bounds(  8, 25, 84, 20), text("Polyphonic","Monophonic"), channel("monopoly"), value(0)
hslider  bounds(  5, 43, 95, 38), colour("chocolate"), channel("GlissTime"), range(0.005,20, 0.1, 0.5, 0.0001)
label    bounds(  5, 74, 95, 12), text("Gliss Time")
rslider  bounds( 95, 25, 60, 60), text("Poly.Limit"), channel("PolyLimit"), range(0, 20, 5,1,1), colour("chocolate")
rslider  bounds(155, 25, 60, 60), text("Rel.Time"), channel("RelTim"), range(0.01, 5,0.2,0.5,0.01), colour("chocolate")
}

;CHORUS
groupbox bounds(390,100,160, 90), text("Chorus"), fontcolour("white"), plant("chorus"){
rslider  bounds(  0, 25, 60, 60), text("Mix"), channel("ChoMix"), range(0, 1.00, 0.5), colour("yellow")
rslider  bounds( 50, 25, 60, 60), text("Depth"), channel("ChoDep"), range(0, 0.1, 0.01,0.5, 0.001), colour("yellow")
rslider  bounds(100, 25, 60, 60), text("Rate"), channel("ChoRte"), range(0, 20, 0.96, 0.5), colour("yellow")
}                                                            

;OUTPUT
groupbox bounds(550,100, 80, 90), text("Output"), fontcolour("white"), plant("output"){
rslider  bounds( 10, 25, 60, 60), text("Level"), channel("OutLev"), range(0, 1.00, 0.25), colour("GoldenRod")
}

keyboard bounds(10, 195, 620, 85)

image bounds(5, 295, 240, 22), colour(75, 85, 90, 100), plant("credit"){
label bounds(0.03, 0.15, .9, .7), text("Author: Iain McCurdy |2012|"), fontcolour("white")
}

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100
ksmps 		= 	64
nchnls 		= 	2
0dbfs		=	1	;MAXIMUM AMPLITUDE

massign	0,2	;MIDI DATA DIRECTED TO INSTRUMENT 2

;Author: Iain McCurdy (2012)

;FUNCTION TABLES STORING MODAL FREQUENCY RATIOS------------------------------------------------------------------------------------------------------------------------------------------------
;single
girtos1		ftgen	0,0,2, -2,	1,1

;dahina
girtos2		ftgen	0,0,-6,-2,	1,	2.89,	4.95,	6.99,	8.01,	9.02

;banyan
girtos3		ftgen	0,0,-6,-2,	1, 	2.0, 	3.01, 	4.01, 	4.69, 	5.63

;xylophone
girtos4		ftgen	0,0,-6,-2,	1, 	3.932, 	9.538,	16.688,	24.566,	31.147

;tibetan bowl (180mm)
girtos5		ftgen	0,0,-7,-2,	1, 	2.77828,	5.18099, 	8.16289,	11.66063,	15.63801,	19.99

;spinel sphere with diameter of 3.6675mm
girtos6		ftgen	0,0,-24,-2,	1,	1.026513174725,	1.4224916858532,	1.4478690202098,	1.4661959580455,	1.499452545408,	1.7891839345101,	1.8768994627782,	1.9645945254541,	1.9786543873113,	2.0334612432847,	2.1452852391916,	2.1561524686621,	2.2533435661294,	2.2905090816065,	2.3331798413917,	2.4567715528268,	2.4925556408289,	2.5661806088514,	2.6055768738808,	2.6692760296751,	2.7140956766436,	2.7543617293425,	2.7710411870043 

;pot lid
girtos7		ftgen	0,0,-6,-2,	1, 	3.2, 	6.23, 	6.27, 	9.92, 	14.15

;red cedar wood plate
girtos8		ftgen	0,0,-4,-2,	1, 	1.47, 	2.09, 	2.56

;tubular bell
girtos9		ftgen	0,0,-10,-2,	272/437,	538/437,	874/437,	1281/437,	1755/437,	2264/437,	2813/437,	3389/437,	4822/437,	5255/437

;redwood wood plate
girtos10	ftgen	0,0,-4,-2,	1, 1.47, 2.11, 2.57

;douglas fir wood plate
girtos11	ftgen	0,0,-4,-2,	1, 1.42, 2.11, 2.47

;uniform wooden bar
girtos12 	ftgen 	0,0,-6,-2,      1, 2.572, 4.644, 6.984, 9.723, 12

;uniform aluminum bar
girtos13	ftgen	0,0,-6,-2,	1, 2.756, 5.423, 8.988, 13.448, 18.680

;vibraphone 1
girtos14	ftgen	0,0,-6,-2,	1, 3.984, 10.668, 17.979, 23.679, 33.642

;vibraphone 2
girtos15	ftgen	0,0,-6,-2,	1, 3.997, 9.469, 15.566, 20.863, 29.440

;Chladni plates
girtos16	ftgen	0,0,-5,-2,	1, 1.72581, 5.80645, 7.41935, 13.91935

;tibetan bowl (152 mm)
girtos17	ftgen	0,0,-7,-2,	1, 2.66242, 4.83757, 7.51592, 10.64012, 14.21019, 18.14027

;tibetan bowl (140 mm)
girtos18	ftgen	0,0,-5,-2,	1, 2.76515, 5.12121, 7.80681, 10.78409

;wine glass
girtos19	ftgen	0,0,-5,-2,	1, 2.32, 4.25, 6.63, 9.38

;small handbell
girtos20	ftgen	0,0,-22,-2,	1, 1.0019054878049, 1.7936737804878, 1.8009908536585, 2.5201981707317, 2.5224085365854, 2.9907012195122, 2.9940548780488, 3.7855182926829, 3.8061737804878, 4.5689024390244, 4.5754573170732, 5.0296493902439, 5.0455030487805, 6.0759908536585, 5.9094512195122, 6.4124237804878, 6.4430640243902, 7.0826219512195, 7.0923780487805, 7.3188262195122, 7.5551829268293 

;albert clock bell belfast
;girtos21	ftgen	0,0,-22,-2, 	2.043260,1.482916,1.000000,3.328848,4.761811,1.477056,0.612007,2.661295,1.002793,4.023776,0.254139,2.043916,4.032463,2.659438,4.775560,5.500494,3.331014,0.809697,2.391301, 0.254098,1.901476,2.366563    ;,0.614968,2.046543,1.814887,3.130744,2.484426,0.558874,0.801697,0.070870,3.617036,2.782656
girtos21	ftgen	0,0,-22,-2, 	0.254098,0.254139,0.612007,0.809697,1.000000,1.002793,1.477056,1.482916,1.901476,2.043260,2.043916,3.331014,2.366563,2.391301,2.659438,2.661295,3.328848,4.023776,4.032463,4.761811,4.775560,5.500494

;wood block
girtos22	ftgen	0,0,4,-2,	915/915,1540/915,1863/915,3112/915

;harmonic 10
girtos23	ftgen	0,0,-10,-2,	1,2,3,4,5,6,7,8,9,10

;harmonic 20
girtos24	ftgen	0,0,-20,-2,	1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20

;harmonic 30
girtos25	ftgen	0,0,-30,-2,	1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30

;harmonic odd 10
girtos26	ftgen	0,0,-10,-2,	1,3,5,7,9,11,13,15,17,19

;harmonic odd 20
girtos27	ftgen	0,0,-20,-2,	1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39

;anvil
girtos28	ftgen	0,0,-16,-2,	3690/5122,	3790/5122,	4710/5122,	5122/5122,	5295/5122,	5843/5122,	6595/5122,	7570/5122,	8590/5122,	9770/5122,	11370/5122,	11915/5122,	12700/5122,	14575/5122,	16780/5122,	17103/5122

/*
1	3690	-17
2	3790	-21
3	4710	-20
4	5122	-23
5	5295	-15
6	5843	-18
7	6595	-21
8	7570	-18
9	8590	-22
10	9770	-17
11	11370	-20
12	11915	-30
13	12700	-28
14	14575	-30
15	16780	-35                                   
16	17103	-34
*/

seed	0			;random number generators seeded from the system clock
gasend	init	0		;initialise the global audio send variable
gisine	ftgen	0,0,4096,10,1	;a sine wave
gidetuning	ftgen	0,0,128,21,6,1			; random array used for fixing unique detune values for each note
gihanning		ftgen	0,0,4097,20,2
;table that stores indicators for each active note. 1=active 0=inactive index_location=note_number
giNoteActive	ftgen	0,0,128,2,0                                                                                                                                                             
;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

gkbright	init	0
gasend		init	0
gkactive 	init 	0	; total number of active notes
gkPolyLimit	init	5

;--UDOS--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
opcode	scale_i,i,iii
 ival,imax,imin	xin
 ival	=	(ival * (imax-imin)) + imin
	xout	ival
endop

opcode	SineVoice,a,kkkkiiii
	kfreq,kMovement,kjitdep,kjitrte,icount,invoices,irtos,isfn	xin
	amix	=	0								;initialise audio mix variable (mixture of all sine wave oscillators)
	if kMovement==1 then
	 kjit	gaussi	kjitdep, 1, kjitrte						;jitter function (semitone deviation)
	else
	 kjit	oscil	kjitdep,kjitrte*randomi:k(0.8,1.2,1,1),-1,rnd(1)
	endif
	irto	table	icount-1,irtos							;read the frequency ratio for this oscillator from the appropriate ratios table
	a1	poscil	1,a(semitone(kjit)*kfreq*irto),isfn				;create the oscillator
	if icount<invoices then								;if not all required oscillators have been created yet... 
	 amix	SineVoice	kfreq,kMovement,kjitdep,kjitrte,icount+1,invoices,irtos,isfn	;call the udo again, with the incremented counter
	endif
	xout	amix + a1								;send mix of all oscillators back the the udo output
endop

opcode	ModeVoice,a,akkkiii						;mode udo (k-rate base frequency) - used for non-midi mode 
	ain,kfreq,kq,kdamp,icount,inmodes,irtos  xin			;name input variables
	amix	=	0						;initialise audio mix variable (mixture of all mode filters)
	asig	=	0						;initialise audio for the mode filter in this iteration of the UDO. Only needed if only 1 mode is present.
	irto	table	icount-1,irtos					;read frequency ratio for current mode according to iteration counter
	kThisFreq	=	kfreq * irto				;derive modal frequency from product of ratio and base frequency

	; legato smearing
	/*
	kporttime	linseg	0,0.001,1
	kThisFreq	portk	kThisFreq,kporttime*rspline:k(0.5,2,0.3,0.7)
	*/
	
	if sr/kThisFreq>=$M_PI then
	 asig	mode	ain, a(kThisFreq), kq				;create mode signal
	 if kdamp>0 then
	  kamp	=	((inmodes-icount+1)^(-kdamp))*(kdamp+1)
	 else
	  kamp	=	icount^kdamp
	 endif
	 aamp	interp	kamp
	 asig	=	asig*aamp
	 if	icount < inmodes	then						;if all the modes in this current instrument have not yet been created...
	  amix		ModeVoice	ain, kfreq,kq,kdamp,icount+1, inmodes,irtos	;...call modemodule udo again with incremented counter
	 endif										;end of conditional branching
	endif
	xout	amix+asig								;send all audio back to caller instrument
endop											;end of udo

opcode	sspline,k,Kiii
	kdur,istart,iend,icurve	xin										;READ IN INPUT ARGUMENTS
	imid	=	istart+((iend-istart)/2)								;SPLINE MID POINT VALUE
	isspline	ftgentmp	0,0,4096,-16,istart,4096*0.5,icurve,imid,(4096/2)-1,-icurve,iend	;GENERATE 'S' SPLINE
	kspd	=	i(kdur)/kdur										;POINTER SPEED AS A RATIO (WITH REFERENCE TO THE ORIGINAL DURATION)
	kptr	init	0											;POINTER INITIAL VALUE	
	kout	tablei	kptr,isspline										;READ VALUE FROM TABLE
	kptr	limit	kptr+((ftlen(isspline)/(i(kdur)*kr))*kspd), 0, ftlen(isspline)-1			;INCREMENT THE POINTER BY THE REQUIRED NUMBER OF TABLE POINTS IN ONE CONTROL CYCLE AND LIMIT IT BETWEEN FIRST AND LAST TABLE POINT - FINAL VALUE WILL BE HELD IF POINTER ATTEMPTS TO EXCEED TABLE DURATION
		xout	kout											;SEND VALUE BACK TO CALLER INSTRUMENT
endop
;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

instr	1	;read in widgets (always on)
	gkInput	chnget	"Input"
	gkMovement	chnget	"Movement"
	gkQ		chnget	"Q"			;read in widgets
	kImpDB		chnget	"ImpDB"
	gkHPF		chnget	"HPF"
	gkLPF		chnget	"LPF"
	gkJitDep	chnget	"JitDep"
	gkJitRte	chnget	"JitRte"
	gkbright	chnget	"bright"
	gkdetune	chnget	"detune"
	gkdetune	portk	gkdetune,0.1
	gkshift		chnget	"shift"
	gkshift		portk	gkshift,0.1
	gkcompress	chnget	"compress"	
	gkcompress	portk	gkcompress,0.1
	gkmonopoly	chnget	"monopoly"
	gkGlissTime	chnget	"GlissTime"
	gksound		chnget	"sound"
	gkChoMix	chnget	"ChoMix"
	gkChoRte	chnget	"ChoRte"
	gkChoDep	chnget	"ChoDep"
	gkOutLev	chnget	"OutLev"
	gkOutLev	port	gkOutLev,0.05
	gkImpAmp	=	ampdbfs(kImpDB)		;convert from dB value to amp value
	gkbright	port	gkbright,0.02		;smooth changes using portamento
	ktrig	changed	gksound				;if sound combobox changes...
	if ktrig==1 then				
	 event	"i",5,0,0.001				;...call instrument 5 to update 'N.Partials' number box
	endif
endin

instr	2	;MIDI TRIGGERED INSTRUMENT
	gkNoteTrig	init	1	;at the beginning of a new note set note trigger flag to '1'	
	inum	notnum
	gknum	=	inum
	ivel	ampmidi	1						;read in midi note velocity as a value within the range 0 to 1
	gkvel	init	ivel
	inum	notnum							;read in midi note number as an integer (used for create a table of active notes flags)
	krelease	release						;note release flag (0 = note held, 1 = note released)
		tablew	1-krelease,inum,giNoteActive			;write note release flag to table at the location corresponding to note number
	iactive	active	p1+1
		
	if iactive==0||i(gkmonopoly)==0 then	; if polyphonic mode or if this is the first in a series of notes in monophonic mode...
	 event_i	"i",p1+1,0,3600,inum		; call instrument 3 with the appropriate p-fields
	endif
endin

instr	3				;impulse and modal resonators instrument
	inum		=	p4					;note number
	
	/* POLYPHONY CONTROL */
	iPolyLimit	chnget	"PolyLimit"
	if iPolyLimit>0 then              
	 gkactive init i(gkactive) + 1	; INCREMENT NOTE COUNTER
	 if gkactive>iPolyLimit then	; IF POLYPHONY IS EXCEEDED (THROUGH THE ADDITION OF NEW NOTE)
	  turnoff						; REMOVE THIS NOTE
	 endif
	 krel release					; IF NOTE HELD = 0, IF NOTE RELEASED = 1
	 ktrig trigger krel,0.5,0		; WHEN RELEASE FLAG CROSSES 0.5 UPWARDS, I.E. NOTE HAS BEEN RELEASED...	
	 if ktrig==1 then		
	  gkactive = gkactive - 1		; ...DECREMENT ACTIVE NOTES COUNTER
	 endif                                                                                                                                                                                                
    endif

	ktrig	changed	gksound
	if ktrig==1 then
	 reinit RESTART_INSTRUMENT                                                                                                                                                         
	endif
	RESTART_INSTRUMENT:
	isound	init	i(gksound)

	if gkmonopoly==1 then
	/* monophonic */
	 kNoteTrig	changed	gknum					;...GENERATE A TRIGGER IS A NEW NOTE NUMBER IS GENERATED (FROM INSTR. 1)
	 gkNoteTrig	=	0
	 gkOldNum	init	p4						;OLD NOTE NUMBER = FIRST NOTE NUMBER UPON INITIAL NOTE BEING PLAYED 
	 if kNoteTrig==1 then						;IF A NEW (LEGATO) NOTE HAS BEEN PRESSED
	  reinit	S_CURVE							;BEGIN A REINITIALISATION PASS FROM LABEL
	 endif										;END OF CONDITIONAL BRANCH
	 S_CURVE:									;A LABEL. REINITIALISATION BEGINS FROM HERE.
	 knum	sspline	gkGlissTime,i(gkOldNum),i(gknum),1 					; CALL sspline UDO (FIXED PORTAMENTO TIME)
	 rireturn									;RETURN FROM INITIALISATION PASS
	 gkOldNum	=	knum						;SET OLD NUMBER CURRENT NUMBER	 
	 ;kporttime	linseg	0,0.001,1
	 ;knum	portk	gknum,kporttime*gkGlissTime                                                                  
	 kactive		active	p1-1
	 kactive		limit	kactive,0,1	
	else
	/* polyphonic */
	 knum		=	p4							;base note number read from p4	
	 kactive		table	inum,giNoteActive			;check whether the midi key corresponding to this note is being held or has been released (1 = held, 0 = released). this value will be used to control whether the impulse scound should be active or not.
	endif
	
	/*detuning*/
	idtn		table	inum,gidetuning
	kdtn		=		idtn * gkdetune

	knum2		=		(knum * (1-gkcompress)) + gkshift 	; shifted and compressed version  of knum
	
	icount		=	1						;counter to count iterations for recursive udos for sine oscillators and mode filters (starts at zero)
	irtos		=	girtos1 + isound - 1	;derive actual function table number for ratios according to 'sound' chosen
	invoices	=	ftlen(irtos)			;derive the number of voices needed for the 'sound' chosen
	kactivePort	port	kactive,0.05		;smooth note active on/off switching
	ktrig changed gkNoteTrig				;if a new note is started...
	if ktrig==1 then						
	 reinit RESTART_ENVELOPE					;...reinitialise from the given label
	endif
	RESTART_ENVELOPE:						;if a new note is trigger reinitialisation from here occurs to start a new impulse buid-up envelope based on new velocity value
	ivel	init	i(gkvel)
	kenv		linseg	0,(1-ivel)+0.01,ivel			;create an amplitude envelope for the impulse sound. impulse sound will be velocity sensitive and the attack time of this envelope will be proportionate to the note velocity also. 
	rireturn

	ktrig	changed	gksound					; to fix bug where sound would not update in mono mode
	if ktrig==1 then
	 reinit RESTART_INSTRUMENT2
	endif
	RESTART_INSTRUMENT2:

	if gkInput==1 then
	 aSineMix	SineVoice	cpsmidinn(knum2)*semitone(kdtn),gkMovement,gkJitDep,gkJitRte,icount,invoices,irtos,gisine	; call sine oscillator udo (it will be recursively recalled within the udo the appropriate number of times according to invoices)
	 aSineMix	=	aSineMix*0.002*kactivePort*kenv*gkImpAmp						; scale the mixture of sines audio signal
	 aSineMix	buthp	aSineMix,gkHPF
	 aInput		butlp	aSineMix,gkLPF	 
	elseif gkInput==2 then					; strike impulse
	 itim	scale_i	ivel^0.125,0.001,0.03
	 aInput		tablei	line:a(0,itim,1),gihanning,1
	 aInput		*=		ivel
	 aInput		buthp	aInput,gkHPF
	 aInput		butlp	aInput,gkLPF	 
	else
	 a1,a2		ins
	 aInput	=	(a1+a2)*kactivePort*gkImpAmp          
	 aInput		buthp	aInput,gkHPF
	 aInput		butlp	aInput,gkLPF	 
	endif
	amodes		ModeVoice	aInput,cpsmidinn(knum2)*semitone(kdtn),gkQ,gkbright,icount,invoices,irtos	; call sine oscillator udo (it will be recursively recalled within the udo the appropriate number of times according to invoices)
	amodes		=		(amodes*0.2*gkOutLev)/invoices								; scale the amplitude of the sound according to the number of modes in the chosen algorithm

	/* POLYPHONY LIMIT ENVELOPE */
	if iPolyLimit>0 then
	 iRelTim	chnget	"RelTim"
	 aRelEnv	linsegr	1,iRelTim,0
	 amodes	=	amodes * aRelEnv
	endif

	/* TRACK OUTPUT AMPLITUDE. REMOVE SILENT NOTES */
	krms		rms		amodes								;track the amplitude of the sound as an rms value
	ithreshold	=	0.00001
	if krms<ithreshold&&kactive=0 then			;if sound has died away and key is inactive...
	 turnoff						;turn instrument off
	endif
	;xtratim	0.1						;this is needed to prevent initialisation crashes, I'm not sure why 

			outs	amodes,amodes			;send mode filters output mixture to output and rescale according to the number of modes used
	gasend	=	gasend+amodes*gkChoMix
	gkNoteTrig	=	0				;reset new-note trigger (in case it was '1')
endin

instr	4	;Chorus effect
	if gkChoMix==0 goto SKIP_CHORUS
	kporttime	linseg	0,0.001,1
	kporttime	=	kporttime/gkChoRte
	kdlt1	randomi	ksmps/sr,gkChoDep,gkChoRte,1
	kdlt1	portk	kdlt1,kporttime
	adlt1	interp	kdlt1
	acho1	vdelay	gasend,adlt1*1000,1*1000
	
	kdlt2	randomi	ksmps/sr,gkChoDep,gkChoRte,1
	kdlt2	portk	kdlt2,kporttime
	adlt2	interp	kdlt2
	acho2	vdelay	gasend,adlt2*1000,1*1000
	
	kpan1	randomi	0,1,gkChoRte,1
	kpan2	randomi	0,1,gkChoRte,1
	a1L,a1R	pan2	acho1,kpan1
	a2L,a2R	pan2	acho2,kpan2
	achoL	=	a1L+a2L
	achoR	=	a1R+a2R
		outs	achoL, achoR
		clear	gasend
	SKIP_CHORUS:
endin

instr	5	;update 'Number of Partials' number box
	invoices	=	ftlen(girtos1+i(gksound)-1)	;derive the number of voices needed for the 'sound' chosen
	knvoices	init	invoices			;create krate version of invoices
	chnset		knvoices,"npartials"			;send value to number box
endin

</CsInstruments>

<CsScore>
i 1 0 [60*60*24*7]
i 4 0 [60*60*24*7]
</CsScore>

</CsoundSynthesizer>; Spiccato.csd
; Written by Iain McCurdy, 2016

; This instrument emulates the 'spiccato' playing technique on bowed instruments through careful use of its 'bow pressure' envelope,
;  however a range of other effects are possible.
; This instrument is based on the wgbow opcode which is itself based on Perry Cook's waveguide-based algorithm for a bowed string 

; CONTROLS
; --------
; B O W   P R E S S U R E
; Attack	-	time taken for bow pressure to reach the level defined by 'Att.Lev'
; Att.Lev.	-	the level of bow pressure attained after 'Attack' seconds
; Decay		-	time taken to reach the bow pressure level defined by 'Sustain'
; Sustain	-	the bow pressure level that is sustained while a note is being held after the attack and decay portions are completed
; Release	-	time taken for bow pressure to return to minimum after a note is released

; B O W   P O S I T I O N
; Bow.Pos.	-	position of the bow along the length of the string
; Rand.Offset	-	random offset of bow position. (Issued just at the beginning of each note.)
; Mod.Amp.	-	amplitude of random spline variation of bow position
; Mod.Freq.	-	frequency of random spline variation of bow position

; K E Y B O A R D
; (NB For normal keyboard behaviour set 'Scale' to '1' and 'Shift' to 0)
; Scale		-	Scale (multiply) all note numbers
; Shift		-	Shift (add this value to) all note numbers
;	These controls can be used to create microtonal pitch clusters

; V I B R A T O
; Depth		-	Depth of the vibrato
; Rate		-	Rate of the vibrato
; Rise		-	Time taken to rise to maximum vibrato depth as defined by 'Depth'
; Dereg.	-	Dergulation factor of vibrato depth and vibrato amplitude. This control can be used to humanise the vibrato or, with higher values, as a special effect.

; P O L Y P H O N Y
; Legato	-	Switches between normal unrestricted polyphony playing and mono-legato
; Mode(drop-down menu)	-	Fixed Rate: constant rate of change in interval during note to note portamento
;			-	Fixed Time: all portamento glides last for the same amount of time, regardless of the interval covered 
; Time			-	Portamento time. Behaviour differs slightly depending on the 'Mode' chosen.

; R E V E R B
; (screverb)
; Dry/Wet 		-	Dry/Wet Mix: 100% dry to 100% wet
; Size			-	Reverb size

; P R E S E T S
; Choose from 10 'factory' presets to gte a quick idea of the sounds possible

; O U T P U T
; Pan Spread		-	range of random pan positions between notes. Issued at note beginning only. If this is set to '1', all notes will be positioned centrally.
; Level			-	output gain control

<Cabbage>
form caption("Spiccato"), size(990,285), colour(255,230,220), pluginid("Spic") style("legacy")

image    bounds(  5,  5,360, 95), colour(0,0,0,0), outlinethickness(1), outlinecolour("black"), plant("PresEnv") {
label    bounds(  0,  5,360, 10), text("B   O   W      P   R   E   S   S   U   R   E"), fontcolour("black")
rslider  bounds(  5, 20, 70, 70), channel("PAtt"),   range(0.001,3,0.1,0.5),   textcolour("black"), fontcolour("black"), text("Attack"),   colour("black")
rslider  bounds( 75, 20, 70, 70), channel("PAttLev"),range(-90, -0.4,-0.4,2), textcolour("black"), fontcolour("black"), text("Att.Lev."), colour("black")
rslider  bounds(145, 20, 70, 70), channel("PDec"),   range(0.001, 3,0.1,0.5),   textcolour("black"), fontcolour("black"), text("Decay"),    colour("black")
rslider  bounds(215, 20, 70, 70), channel("PSus"),   range(-90, -0.4,-90,2),  textcolour("black"), fontcolour("black"), text("Sustain"),  colour("black")
rslider  bounds(285, 20, 70, 70), channel("PRel"),   range(0.001, 3,0.1,0.5),   textcolour("black"), fontcolour("black"), text("Release"),  colour("black")
}

image    bounds(370,  5,295, 95), colour(0,0,0,0), outlinethickness(1), outlinecolour("black"), plant("BowPos") {
label    bounds(  0,  5,295, 10), text("B   O   W      P   O   S   I   T   I   O   N"), fontcolour("black")
rslider  bounds(  5, 20, 70, 70), channel("BowPos"), range(0.01,0.5,0.127236,1,0.000001), textcolour("black"), fontcolour("black"), text("Bow Pos."), colour("black")
rslider  bounds( 75, 20, 70, 70), channel("PosIRnd"), range(0,0.2,0.05,0.5,0.001), textcolour("black"), fontcolour("black"), text("Rand.Offset"), colour("black")
rslider  bounds(145, 20, 70, 70), channel("PosA"), range(0,1,0.05,0.5,0.001), textcolour("black"), fontcolour("black"), text("Mod.Amp."), colour("black")
rslider  bounds(215, 20, 70, 70), channel("PosF"), range(0.1,50,0.5,0.5,0.01), textcolour("black"), fontcolour("black"), text("Mod.Freq."), colour("black")
}

image    bounds(670,  5,150, 95), colour(0,0,0,0), outlinethickness(1), outlinecolour("black"), plant("Keyboard") {
label    bounds(  0,  5,150, 10), text("K   E   Y   B   O   A   R   D"), fontcolour("black")
rslider  bounds(  5, 20, 70, 70), channel("KybdScale"), range(0,  1,1,1,0.001), textcolour("black"), fontcolour("black"), text("Scale"), colour("black")
rslider  bounds( 75, 20, 70, 70), channel("KybdShift"), range(0,127,0,1,1),     textcolour("black"), fontcolour("black"), text("Shift"), colour("black")
}


image    bounds(  5,105,290, 95), colour(0,0,0,0), outlinethickness(1), outlinecolour("black"), plant("Vibrato") {
label    bounds(  0,  5,290, 10), text("V   I   B   R   A   T   O"), fontcolour("black")
rslider  bounds(  5, 20, 70, 70), channel("vibamp"), range(0,0.3,0.006,0.5), textcolour("black"), fontcolour("black"), text("Depth"), colour("black")
rslider  bounds( 75, 20, 70, 70), channel("vibf"),   range(0, 30, 3.5,0.5), textcolour("black"), fontcolour("black"), text("Rate"),  colour("black")
rslider  bounds(145, 20, 70, 70), channel("VibRise"), range(0, 7,  2,0.5),   textcolour("black"), fontcolour("black"), text("Rise"), colour("black")
rslider  bounds(215, 20, 70, 70), channel("Dereg"), range(0, 5,  1,0.5),  textcolour("black"), fontcolour("black"), text("Dereg."), colour("black")
}

image    bounds(825,  5,160, 95), colour(0,0,0,0), outlinethickness(1), outlinecolour("black"), plant("MonoPoly") {
label    bounds(  0,  5,160, 10), text("P   O   L   Y   P   H   O   N   Y"), fontcolour("black")
checkbox bounds( 10, 25, 70, 12), text("Legato"), channel("legato"), fontcolour("black")
combobox bounds( 10, 65, 80, 18), text("Fixed Rate","Fixed Time"), channel("LegMode"), fontcolour("white"), value(1), identchannel("LegModeID"), visible(0)
rslider  bounds( 85, 20, 70, 70), channel("LegTime"), range(0.001,2,0.2,0.5), textcolour("black"), text("Time"), colour("black"), identchannel("LegTimeID"), visible(0)
}


image    bounds(525,105,150, 95), colour(0,0,0,0), outlinethickness(1), outlinecolour("black"), plant("Reverb") {
label    bounds(  0,  5,150, 10), text("R   E   V   E   R   B"), fontcolour("black")
rslider  bounds(  5, 20, 70, 70), channel("RvbDryWet"), range(0,1,0.4), textcolour("black"), fontcolour("black"), text("Dry/Wet"), colour("black")
rslider  bounds( 75, 20, 70, 70), channel("RvbSize"), range(0,0.99,0.7,2), textcolour("black"), fontcolour("black"), text("Size"), colour("black")
}


image    bounds(680,105,150, 95), colour(0,0,0,0), outlinethickness(1), outlinecolour("black"), plant("Output") {
label    bounds(  0,  5,150, 10), text("O   U   T   P   U   T"), fontcolour("black")
rslider  bounds(  5, 20, 70, 70), channel("PanWidth"), range(0,1,0.2,0.5), textcolour("black"), fontcolour("black"), text("Pan Spread"), colour("black")
rslider  bounds( 75, 20, 70, 70), channel("level"), range(0,3,1,0.5), textcolour("black"), fontcolour("black"), text("Level"), colour("black")
}

image    bounds(835,105,150, 95), colour(0,0,0,0), outlinethickness(1), outlinecolour("black"), plant("Presets") {
label    bounds(  0,  5,150, 10), text("P   R   E   S   E   T   S"), fontcolour("black")
combobox bounds( 50, 40, 40, 15), channel("preset"), text("1","2","3","4","5","6","7","8","9","10"),  textcolour("white"), fontcolour("white"), colour("black")
}

image    bounds(300,105,220, 95), colour(0,0,0,0), outlinethickness(1), outlinecolour("black"), plant("Layers") {
label    bounds(  0,  5,220, 10), text("L   A   Y   E   R   S"), fontcolour("black")
rslider  bounds(  5, 20, 70, 70), channel("Layers"), range(1,10,1,1,1), textcolour("black"), fontcolour("black"), text("Layers"), colour("black")
rslider  bounds( 75, 20, 70, 70), channel("IntSemis"), range(-24,24,2,1,1),  textcolour("black"), fontcolour("black"), text("Semitones"), colour("black")
rslider  bounds(145, 20, 70, 70), channel("Detune"), range(0,100,0,1,1), textcolour("black"), fontcolour("black"), text("Detune"), colour("black")
}

keyboard  bounds( 0,205,985,80)
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=NULL -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100		;SAMPLE RATE
ksmps 		= 	4		;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2		;NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1

massign	0,2

givibwav	ftgen	0, 0, 4096, 10, 1
giDry		ftgen	0, 0, 1024, -7, 1, 512, 1, 512, 0
giWet		ftgen	0, 0, 1024, -7, 0, 512, 1, 512, 1

indx	=	0
loop:
ival	table	indx,givibwav
isig	=	ival<0?-1:1
	tableiw	(abs(ival)^0.75)*isig,indx,givibwav
	loop_lt	indx,1,ftlen(givibwav),loop
	
gasendL,gasendR	init	0

gkactive	init	0	; Will contain number of active instances of instr 3 when legato mode is chosen. NB. notes in release stage will not be regarded as active. 

opcode	sspline,k,Kiii
	kdur,istart,iend,icurve	xin										;READ IN INPUT ARGUMENTS
	imid	=	istart+((iend-istart)/2)								;SPLINE MID POINT VALUE
	isspline	ftgentmp	0,0,4096,-16,istart,4096*0.5,icurve,imid,(4096/2)-1,-icurve,iend	;GENERATE 'S' SPLINE
	kspd	=	i(kdur)/kdur										;POINTER SPEED AS A RATIO (WITH REFERENCE TO THE ORIGINAL DURATION)
	kptr	init	0											;POINTER INITIAL VALUE	
	kout	tablei	kptr,isspline										;READ VALUE FROM TABLE
	kptr	limit	kptr+((ftlen(isspline)/(i(kdur)*kr))*kspd), 0, ftlen(isspline)-1			;INCREMENT THE POINTER BY THE REQUIRED NUMBER OF TABLE POINTS IN ONE CONTROL CYCLE AND LIMIT IT BETWEEN FIRST AND LAST TABLE POINT - FINAL VALUE WILL BE HELD IF POINTER ATTEMPTS TO EXCEED TABLE DURATION
		xout	kout											;SEND VALUE BACK TO CALLER INSTRUMENT
endop

opcode	wgbowSR,a,ikkkkkiikki											;wgbow ENCAPSULATED WITHIN A UDO SO THAT ksmps CAN BE REDUCED TO IMPROVE SOUND QUALITY OF VIBRATO AND BOWING POSITION CHANGES 
	ivel, kcps, kpres, kBowPos, kvibf, kvibamp, ivibwav, iMinFrq, kPosA, kPosF, iPosIRnd	xin
		setksmps	1										;REDUCED ksmps. (ksmps = 1 DOESN'T SEEM TO WORK!)
	kporttime	linseg	0,0.001,0.05

	if kPosA>0 then						; random spline randomise bowing position
	 kRatMod	rspline	-kPosA,kPosA,kPosF*0.5,kPosF*2
	 kBowPos		mirror	kBowPos + kRatMod, 0, 1
	else
	 kBowPos		portk	kBowPos, kporttime
	endif
	iPosRnd	random	-iPosIRnd, iPosIRnd			; init time bow random position
        kBowPos	mirror	kBowPos + iPosRnd, 0, 1

	abow	wgbow	ivel*0.7, kcps, kpres, kBowPos, kvibf, kvibamp, ivibwav, iMinFrq

		xout	abow
endop

opcode	RecursiveInstrument,aa,iiiip
	inum,ivel,iLayers,iIntSemis,iCount	xin
	aMixL	=			0
	aMixR	=			0	
	aL,aR	subinstr	p1+1,inum+((iCount-1)*iIntSemis),ivel	;call voice instrument as a subinstrument. Audio will be fed back to this instrument before being sent to the outputs.
	if iCount<iLayers then
	 aMixL,aMixR	RecursiveInstrument	inum,ivel,iLayers,iIntSemis,iCount+1
	endif
			xout	aL+aMixR, aR+aMixR
endop

instr	1	; READ IN WIDGETS. ALWAYS ON.
	gkBowPos		chnget	"BowPos"
	gkPEnv		chnget	"PEnv"
	gkvibamp	chnget	"vibamp"
	gkvibf		chnget	"vibf"
	gkVibRise	chnget	"VibRise"
	gkDereg		chnget	"Dereg"
	gkLegTime	chnget	"LegTime"
	gkRvbSize	chnget	"RvbSize"
	gkRvbDryWet	chnget	"RvbDryWet"
	gkDry		table	gkRvbDryWet,giDry,1
	gkWet		table	gkRvbDryWet,giWet,1
	gkPosIRnd	chnget	"PosIRnd"
	gkPosA		chnget	"PosA"
	gkPosF		chnget	"PosF"
	gklevel		chnget	"level"
	gkPanWidth	chnget	"PanWidth"
	gkKybdShift	chnget	"KybdShift"
	gkKybdScale	chnget	"KybdScale"
	gkLayers	chnget	"Layers"
	gkIntSemis	chnget	"IntSemis"
	gkDetune	chnget	"Detune"
	
	gklegato	chnget	"legato"
	if changed(gklegato)==1 then
	 if gklegato==1 then
	  chnset	"visible(1)","LegTimeID"
	  chnset	"visible(1)","LegModeID"	  
	 else
	  chnset	"visible(0)","LegTimeID"
	  chnset	"visible(0)","LegModeID"  	 
	 endif
	endif

	; PRESETS
	kpreset	chnget	"preset"
	#define	SEND_PRESET(N'PAtt'PAttLev'PDec'PSus'PRel'BowPos'PosIRnd'PosA'PosF'KybdScale'KybdShift'vibamp'vibf'VibRise'Dereg'legato'LegMode'LegTime'RvbDryWet'RvbSize'PanWidth'level'Layers'IntSemis'Detune)
	#
	if kpreset==$N then
		chnset	k($PAtt     ),"PAtt"
		chnset	k($PAttLev  ),"PAttLev"
		chnset	k($PDec     ),"PDec"
		chnset	k($PSus     ),"PSus"
		chnset	k($PRel     ),"PRel"
		chnset	k($BowPos   ),"BowPos"
		chnset	k($PosIRnd  ),"PosIRnd"
		chnset	k($PosA     ),"PosA"
		chnset	k($PosF     ),"PosF"
		chnset	k($KybdScale),"KybdScale"
		chnset	k($KybdShift),"KybdShift"
		chnset	k($vibamp   ),"vibamp"
		chnset	k($vibf     ),"vibf"
		chnset	k($VibRise  ),"VibRise"
		chnset	k($Dereg    ),"Dereg"
		chnset	k($legato   ),"legato"
		chnset	k($LegMode  ),"LegMode"
		chnset	k($LegTime  ),"LegTime"
		chnset	k($RvbDryWet),"RvbDryWet"
		chnset	k($RvbSize  ),"RvbSize"
		chnset	k($PanWidth ),"PanWidth"
		chnset	k($level    ),"level"
		chnset	k($Layers   ),"Layers"
		chnset	k($IntSemis ),"IntSemis"
		chnset	k($Detune   ),"Detune"
	endif
	#
	if changed(kpreset)==1 then
	 ;            N 'PAtt'PAttLev'PDec'PSus'PRel'BowPos  'PosIRnd'PosA'PosF'KybdScale'KybdShift'vibamp'vibf'VibRise'Dereg'legato'LegMode'LegTime'RvbDryWet'RvbSize'PanWidth'level'Layers'IntSemis'Detune
	 $SEND_PRESET(1 '0.1 '-0.4   '0.1 '-90 '0.1 '0.127236'0.05   '0.05'0.5 '1        '0        '0.006 '3.5 '2      '1    '0     '1      '0.2    '0.4      '0.7    '0.2     '1    '1     '2       '0)
	 $SEND_PRESET(2 '0.004'-0.4  '0.05'-90 '0.1 '0.32    '0.05   '0.05'0.5 '1        '0        '0.006 '3.5 '2      '1    '0     '1      '0.2    '0.4      '0.7    '0.2     '2    '1     '2       '0)
	 $SEND_PRESET(3 '0.001'-90   '1   '-13 '2   '0.05    '0.007  '0.176'0.1'1        '0        '0.009 '0.29'7      '0.177'0     '1      '0.2    '0.3      '0.8    '0.53    '0.8  '1     '2       '0)
	 $SEND_PRESET(4 '0.001'-11.8 '0.43'-90 '0.1 '0.21    '0.007  '0.00'0.0 '1        '0        '0.028 '9.5 '2      '0.177'1     '1      '0.2    '0.4      '0.7    '0.5     '2.5  '1     '2       '0)
	 $SEND_PRESET(5 '0.17 '-11.9 '3   '-29.3'0.1'0.25    '0.007  '0.028'25.6'1        '0        '0.007'1.5 '2      '1    '1     '1      '0.044  '0.6      '0.54   '0.002   '3    '1     '2       '0)
	 $SEND_PRESET(6 '0.5 '-0.4   '0.277'-90 '0.1 '0.127236'0.05   '0.05'0.5 '1        '0        '0.006 '3.5 '2      '1    '0     '1      '0.2    '0.4      '0.7    '0.2    '0.2  '1     '2       '0)
	 $SEND_PRESET(7 '0.5 '-15    '1 '-15 '0.1 '0.1       '0.05   '0.05'0.5 '0.95     '6        '0.013 '0.3 '0      '3.6  '0     '1      '0.2    '0.5      '0.56   '1       '0.75 '1     '2       '0)
	 $SEND_PRESET(8 '0.001'-4.96 '0.261'-16'0.1 '0.127236'0.004  '0.009'0.5'0.235    '60       '0.006'3.5  '2      '1    '0     '1      '0.2    '0.76     '0.85   '0.2     '1    '1     '2       '0)
	 $SEND_PRESET(9'0.001'-4.96 '0.261'-16'0.1 '0.127236'0.004  '0.114'1.6 '1        '0        '0.069'0.018'0      '0.872'0     '1      '0.2    '0.46     '0.85   '1       '1.5  '1     '2       '0)
	 $SEND_PRESET(10'0.001'-4.96 '0.261'-16'0.1 '0.127236'0.004  '0.009'0.5'1        '0        '0.006'3.5  '2      '1    '1     '1      '0.2    '0.76     '0.85   '0.2     '1    '1     '2       '0)
	endif
endin

instr	2
	gkNoteTrig	init	1	;at the beginning of a new note set note trigger flag to '1'
	inum		notnum
	gknum		=	inum
	ivel		ampmidi	1	;read in midi note velocity

	if i(gklegato)==0 then		;if we are *not* in legato mode...

	 aL,aR	RecursiveInstrument		inum - (i(gkDetune)*0.01*0.5), ivel,i(gkLayers), i(gkIntSemis)+(i(gkDetune)*0.01)
	 	outs	aL,aR		;send audio to outputs
	 	 
	else				;otherwise... (i.e. legato mode)
	 iactive	=	i(gkactive)			;number of active notes of instr 3 (note in release are disregarded)
	 if iactive==0 then					;...if no notes are active
	  iCount	=	1
	  loop2:
	  event_i	"i",p1+1,0,3600,inum - (i(gkDetune)*0.01*0.5),ivel,(iCount-1)*(i(gkIntSemis)+(i(gkDetune)*0.01))		;...start a new held note
	  loop_le	iCount,1,i(gkLayers),loop2
	 endif
	endif
endin

instr	3
	if i(gklegato)==1 then				;if we are in legato mode...
	 krel	release					;sense when  note has been released
	 ;gkactive	=	1-krel			;if note is in release, gkactive=0, otherwise=1
	 gkactive	=	1-krel			;if note is in release, gkactive=0, otherwise=1
	 if krel==0 then
	  ktrig	changed	gknum						;...GENERATE A TRIGGER IS A NEW NOTE NUMBER IS GENERATED (FROM INSTR. 1)
	  gkNoteTrig	=	0
	 endif
	 kOldNum	init	p4												; OLD NOTE NUMBER = FIRST NOTE NUMBER UPON INITIAL NOTE BEING PLAYED 
	 if ktrig=1 then													; IF A NEW (LEGATO) NOTE HAS BEEN PRESSED
	  reinit	S_CURVE_2												; BEGIN A REINITIALISATION PASS FROM LABEL
	 endif															; END OF CONDITIONAL BRANCH
	 S_CURVE_2:														; A LABEL. REINITIALISATION BEGINS FROM HERE.
	 iLegMode	chnget	"LegMode"		;0=fixed rate 1=fixed rate
	 idiff	=	iLegMode == 0 ? 1+abs(i(gknum)-i(kOldNum)) : 1								; ABSOLUTE DIFFERENCE BETWEEN OLD NOTE AND NEW NOTE IN STEPS (+ 1)
	 knum	sspline	(gkLegTime*idiff)+ksmps/sr,i(kOldNum),i(gknum),1 	; CALL sspline UDO (PORTAMENTO TIME MULTIPLIED BY NOTE GAP (idiff))
	 rireturn															; RETURN FROM INITIALISATION PASS
	 kOldNum	=	knum												; SET OLD NUMBER CURRENT NUMBER
	 kactive	active	p1-1												; ...check number of active midi notes (previous instrument)
	 if kactive==0 then													; if no midi notes are active...
	  turnoff														; ... turn this instrument off
	 endif
	else															; otherwise... (polyphonic / non-legato mode)
	 knum	=	p4
	endif

	knum	+=	p6

	iPAtt		chnget	"PAtt"
	iPAttLev	chnget	"PAttLev"
	iPDec		chnget	"PDec"
	iPSus	chnget	"PSus"
	iPRel	chnget	"PRel"

	; KEYBOARD NOTE NUMBER SCALING
	knum	=	(knum*gkKybdScale)+gkKybdShift

	kcps	=	cpsmidinn(knum)
	ivel	=	p5
	         
	; bow pressure envelope
	kpres		expsegr	90, iPAtt, -iPAttLev, iPDec, -iPSus, iPRel, 90
	;PITCH BEND INFORMATION IS READ
	aenv	linsegr		1,3600,1,0.01+iPRel,0		;ANTI-CLICK ENVELOPE

	; vibrato
	kRndVibF	rspline	-gkDereg,gkDereg,2,5		; deregulation of vibrato amplitude and frequency for more humanistic results
	kvibf		=	gkvibf * (2 ^ kRndVibF)
	kRndVibA	rspline	-gkDereg,gkDereg,2,5
	kvibamp		=	gkvibamp * (2 ^ kRndVibA)
	if i(gkVibRise)>0 then					; vibrato amplitude envelope
	 kVibEnv	transeg	0,i(gkVibRise),4,1
	 kvibamp	=	kvibamp * kVibEnv
	endif

	abow	wgbowSR		ivel*0.7, kcps, kpres, gkBowPos, kvibf, kvibamp, givibwav, 20, gkPosA, gkPosF, i(gkPosIRnd)

;	kporttime	linseg	0,0.001,0.05
;	if gkPosA>0 then						; random spline randomise bowing position
;	 kRatMod	rspline	-gkPosA,gkPosA,gkPosF*0.5,gkPosF*2
;	 kBowPos		mirror	gkBowPos + kRatMod, 0, 1
;	else
;	 kBowPos		portk	gkBowPos, kporttime
;	endif
;	iPosRnd	random	-i(gkPosIRnd), i(gkPosIRnd)			; init time bow random position
;        kBowPos	mirror	kBowPos + iPosRnd, 0, 1
;
;	abow	wgbow	ivel*0.7, kcps, kpres, kBowPos, kvibf, kvibamp, givibwav, 20

	abow	=	abow * aenv * gklevel
	
	ipan	random	0,1
	aL,aR	pan2	abow, 0.5 + ((ipan-0.5)*gkPanWidth)
	
	aL	delay	aL, (ipan     * i(gkPanWidth) * 0.1) + ksmps/sr
	aR	delay	aR, ((1-ipan) * i(gkPanWidth) * 0.1) + ksmps/sr
	
	gasendL	=	gasendL + (aL * gkWet)
	gasendR	=	gasendR + (aR * gkWet)

		 	outs		aL * gkDry, aR * gkDry	;SEND AUDIO TO OUTPUTS
endin

instr	999
	aL,aR	reverbsc	gasendL, gasendR, gkRvbSize, 8000
		outs		aL,aR
		clear		gasendL,gasendR
endin

</CsInstruments>

<CsScore>
i 1   0 [3600*24*7]
i 999 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>; StringFeedback.csd - an emulation of a feeding back vibrating string
; Written by Iain McCurdy, 2013
; ------------------
; 
; String
; ---------
; Feedback	-	signal that is fed back into the vibrating string model. If a particular note doesn't sound, boost this!
; Drive		-	overdrive level (on each individual string, so no interference sidebands will be produced when chords are played, see 'Gain' in the 'Output' section for this effect)
; Sustain	-	sustain of the string vibrations. Inverse of damping.
; Bright	-	brightness of the signal (lowpass filtering). Uses keyboard tracking, value stated is a ratio of the fundemental of the note played.
; Cut		-	remove lower partials of the signal (highpass filtering). Uses keyboard tracking, value stated is a ratio of the fundemental of the note played.
; 
; Movement
; ---------
; Movement is a rough imitation of the effect of moving the vibrating string with respect to the location of the speaker. This is simply a modulating very short delay.
; Speed		-	speed of modulation (created using a random spline)
; 
; Pick-up
; -------
; Settings pertaining to the location of the pick-up along the length of the vibrating string
; Position	-	manual positioning of the pick-up. 0 or 1 = either end. 0.5 = half-way along the string's length.
; Auto		-	if this is active, manual positioning is ignored and the pick-up moves around randomly
; Speed		-	speed of random movement of the pick-up
; 
; Reverb
; ------
; Distance	-	Distance of the listener from the speaker (basically a dry/wet signal crossfader)
; Room		-	Room size
; 
; Output
; ------
; FB.Rel.		-	release time for the feedback signal
; Str.Rel.		-	release time for the string output signal
; Gain			-	gain of a global overdrive applied to a mix of all playing notes. This will create the characteristic 'growling' distortion effect when, in particular, 4ths and 5ths are played.
; Level		-	Level control (pre reverb so reverberation will always die away natuarally)

<Cabbage>
form caption("String Feedback"), size(885, 180), pluginid("fbck"), colour(0,0,0) style("legacy")

groupbox bounds(  0,  0, 290, 90), text("String"), fontcolour(195,126, 0), plant("String") {
rslider bounds(  5, 25, 60, 60), text("Feedback"),  colour(195,126,  0), FontColour(195,126,  0), channel("fback"),   range(0, 8, 0.8,0.5)
rslider bounds( 60, 25, 60, 60), text("Drive"),   colour(195,126,  0), FontColour(195,126,  0), channel("drive"),   range(0, 1, 0.25)
rslider bounds(115, 25, 60, 60), text("Sustain"), colour(195,126,  0), FontColour(195,126,  0), channel("sustain"),   range(0.0001, 1, 1, 0.5, 0.0001)
rslider bounds(170, 25, 60, 60), text("Bright"),  colour(195,126,  0), FontColour(195,126,  0), channel("LPF"),   range(1, 32, 16)
rslider bounds(225, 25, 60, 60), text("Cut"),     colour(195,126,  0), FontColour(195,126,  0), channel("HPF"),   range(0, 32, 1)
}

groupbox bounds(290,  0,  70, 90), text("Movement"), fontcolour(195,126, 0), plant("Movement") {
rslider  bounds(  5, 25, 60, 60), text("Speed"),   colour(195,126,  0), FontColour(195,126,  0), channel("speed"),   range(0.001,1, 0.1,0.5,0.0001)
}

groupbox bounds(360,  0,170, 90), text("Pick-up"), fontcolour(195,126, 0), plant("Pickup") {
rslider bounds(  5, 25, 60, 60), text("Position"),colour(195,126,  0), FontColour(195,126,  0), channel("PickPos"),   range(0, 1, 0.1)
checkbox bounds( 65, 25, 70, 15), text("Auto") channel("auto"), FontColour(195,126,  0), colour("orange")
rslider bounds(105, 25, 60, 60), text("Speed"),colour(195,126,  0), FontColour(195,126,  0), channel("PickPosSpeed"),   range(0.001, 8, 1, 0.5,0.001)
}

groupbox bounds(530,  0,120, 90), text("Reverb"), fontcolour(195,126, 0), plant("Reverb") {
rslider bounds(  5, 25, 60, 60), text("Distance"),colour(195,126,  0), FontColour(195,126,  0), channel("distance"),   range(0, 1, 0.1)
rslider bounds( 60, 25, 60, 60), text("Room"),    colour(195,126,  0), FontColour(195,126,  0), channel("room"),   range(0.5,0.99, 0.85)
}

groupbox bounds(650,  0,235, 90), text("Output"), fontcolour(195,126, 0), plant("Output") {
rslider bounds(  5, 25, 60, 60), text("FB.Rel."),  colour(195,126,  0), FontColour(195,126,  0), channel("rel"),     range(0.01, 8, 0.01, 0.5)
rslider bounds( 60, 25, 60, 60), text("Str.Rel."), colour(195,126,  0), FontColour(195,126,  0), channel("StrRel"),  range(0.1, 15, 5, 0.5)
rslider bounds(115, 25, 60, 60), text("Gain"),     colour(195,126,  0), FontColour(195,126,  0), channel("Gain"),    range(1, 10, 1)
rslider bounds(170, 25, 60, 60), text("Level"),    colour(195,126,  0), FontColour(195,126,  0), channel("level"),   range(0, 1, 0.5)
}

keyboard bounds(0,  95,885,80)
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>


<CsInstruments>

sr 		= 	44100
ksmps 		= 	64
nchnls 		= 	2
0dbfs		=	1

massign		0,1		; assign all midi to channel 1
		seed	0	; random number generators seeded from system clock

gasendL,gasendR,garvbL,garvbR	init	0	; initialise global variables to zero
giscal	ftgen	0,0,1024,-16,1,1024,4,8		; amplitude scaling used in 'overdrive' mechanism
gifbscl	ftgen	0,0,128,-27, 0,1, 36,1, 86,3, 127,3	; Feedback scaling function table. Higher notes need higher levels of feedback.



instr	1
 kporttime	linseg	0,0.001,0.05	; used to smooth GUI control movement
 iplk	=	0.1			; pluck position (largely irrelevant)
 iamp	=	1			; amplitude
 icps	cpsmidi				; midi note played (in cycles-per-second)
 inum	notnum				; midi note number
 ifbscl	table	inum, gifbscl		; Feedback scaling. Higher notes need higher levels of feedback. This scaling function is defined earlier in a function table.
 ksustain	chnget	"sustain"	; string sustain (inverse of damping). Higher values = more sustain
 ;krefl	=	1-ksustain		; string damping (derived from sustain value). Higher values = more damping. Range 0 - 1
 krefl = 1-ksustain
 adel	init	0			; feedback signal from the modulating delay (initial value for the first pass) 
 
 ; pick-up position
 kauto	chnget	"auto"			; 'auto' checkbox button.
 if(kauto==0) then			; if 'auto' button is off pick-up position is set manually
  kpick	chnget	"PickPos"		; 'Position' GUI knob
  kpick	portk	kpick,kporttime		; smooth changes made to the value to prevent glitches
 else					; other 'Auto' pick-up position modulation mode is used
  kPickposSpeed	chnget	"PickPosSpeed"	; pick-up position modulation 'Speed' GUI knob
  kpick	rspline		0.01,0.99,kPickposSpeed,kPickposSpeed*2	; pick-up position created using a random spline method
  kpick	limit	kpick,0.01,0.99		; contain possible values. (N.b. rspline will generate values beyond its given limits.)
 endif
 
 irel	chnget	"rel"			; feedback signal release time
 aInRel	linsegr	1,0.001,1,irel,0		; feedback signal release envelope
 adust	dust		0.1,1		; generate a sparse crackle signal. This is used to help keep the string vibrating.
 
 kfback	chnget	"fback"			; 'Feedback' value from GUI knob
 asig 	repluck 	iplk, iamp, icps, kpick, krefl,( (adel*kfback*ifbscl) + ( (garvbL+garvbR) * 0.1) + adust) * aInRel	; vibrating string model
 
 ; overdrive
 kDrive	chnget	"drive"			; overdrive value from GUI knob
 ktrig	changed	kDrive			; if 'Drive' knob is moved generate a trigger. Reinitialisation will be needed to refresh the 'clip' opcode.
 if(ktrig==1) then			; if 'Drive' knob has been moved...
  reinit	UPDATE				; reinitialise from 'UPDATE' label
 endif					
 UPDATE:					; a label. Reinitialise from here.
 iClipLev	=	1-(i(kDrive)*0.9)	; clip level remapped from 0 to 1 remapped to 1 to 0.1.
 asig	clip	asig,0,iClipLev		; clip the audio signal
 igain	table	i(kDrive),giscal,1	; get amplitude compensation value according to the current 'Drive' setting
 asig	=	asig*igain		; compensate for gain loss
 rireturn
 
 ; filtering
 kLPF	chnget	"LPF"			; Lowpass filter ('Bright') GUI knob. This is a ratio of the fundemental frequency so the final cutoff frequency will depend on the note played (keyboard tracking).
 kLPF	portk	kLPF,kporttime		; smooth changes
 kLPF	limit	icps*kLPF,20,sr/2	; derive cycles-per-second filter cutoff value (and protect against out of range values which would cause the filter to 'blow up')
 asig	butlp	asig, kLPF		; lowpass filter the signal
 kHPF	chnget	"HPF"			; same as the above but with a highpass filter. (Highpass filter called 'Cut' in GUI.)
 kHPF	portk	kHPF,kporttime
 kHPF	limit	icps*kHPF,1,sr/2
 asig	buthp	asig, kHPF
 
 ; amplitude enveloping
 iStrRel	chnget	"StrRel"
 aAmpEnv	expsegr	0.001,.1,1,irel+iStrRel,0.001	; amplitude envelope (extend note duration a little beyond the when the feedback signal envelope ends)
 asig	=	asig*aAmpEnv			; apply amplitude envelope
 
 ; delay (this controls how different harmonics are accentuated in the feedback process)
 kspeed	chnget	"speed"				; delay time modulation speed
 iDelMin	=	ksmps/sr	; delay minimum...
 iDelMax	=	0.05		; ...and maximum. These could maybe be brought out as GUI controls
 kdeltim	rspline	iDelMin,iDelMax,kspeed,kspeed*2	; random spline for delay time (k-rate)
 kdeltim	limit	kdeltim,iDelMin,iDelMax		; limit value (n.b. rspline will generate values beyond its given minimum and maximum) 
 adeltim	interp	kdeltim				; interpolate to create a-rate verion for delay time (a-rate will give smoother results)
 adel	vdelay	asig, adeltim*1000, 1000	; create modulating delay signal
 
 ; stereo spatialisation - this gives the dry (unreverberated) signal some stereo width 
 kdelL	rspline	0.001, 0.01, 0.05, 0.1		; left channel spatialising delay
 kdelR	rspline	0.001, 0.01, 0.05, 0.1		; right channel spatialising delay
 kdelL	limit	kdelL,0.001, 0.01		; limit left channel delay times (n.b. rspline will generate values beyond its given minimum and maximum)
 kdelR	limit	kdelR,0.001, 0.01		; limit right channel delay times (n.b. rspline will generate values beyond its given minimum and maximum)
 adelL	interp	kdelL				; create a-rate of left channel delay time version using interpolation
 adelR   interp	kdelR				; create a-rate of right channel delay time version using interpolation
 aL	vdelay	adel,adelL*1000,10		; delay signal left channel
 aR	vdelay	adel,adelR*1000,10		; delay signal right channel 
 
 ; create reverb send signals (stereo)
 klevel	chnget	"level"				; level control (pre reverb input therefore allows reverb to die away naturally)
 gasendL	=	gasendL+(aL*klevel)		; left channel reverb send signal accumulated with audio from this note
 gasendR	=	gasendR+(aR*klevel)		; right channel reverb send signal accumulated with audio from this note
endin

instr	Reverb
 iComp		ftgen	0,0,1024,-16,1,1024,-6,0.3
 kGain		chnget	"Gain"
 if kGain>0 then
  kComp		table	((kGain-1)/9),iComp,1
  gasendL	=	tanh(gasendL*kGain) * kComp 
  gasendR	=	tanh(gasendR*kGain) * kComp 
 endif
 
 kroom	chnget	"room"						; room size
 garvbL, garvbR	reverbsc	gasendL, gasendR, kroom, 7000	; apply reverb
 iDryLev	=	0.1						; dry signal level
 kRvbLev	chnget	"distance"					; reverb signal level
  		outs		(garvbL*kRvbLev*0.2)+(gasendL*iDryLev*(1-kRvbLev)), (garvbR*kRvbLev*0.2)+(gasendR*iDryLev*(1-kRvbLev))
 	clear	gasendL,gasendR
endin


</CsInstruments>

<CsScore>
i "Reverb" 0 3600
</CsScore>

</CsoundSynthesizer>; Strum.csd
; Written by Iain McCurdy, 2014

; A moving xypad pointer plucks imaginary strings stretched across its surface.
; Movement in the y direction therefore controls pitch. 
; Movement in the x direction varies pluck position and panning location.

; Notes		-	number of notes/strings/subdivisions triggered along the y-axis of the xypad
; Spacing 	-	spacing between adjacent notes in semitones or fractions thereof
; Offset	-	global note offset (note number)
; Shift		-	shift in semitones applied to notes when triggered by a descending widget
; Polyphony	-	polyphony  limit (to preserve CPU buffer). Oldest notes are removed if polyphony limit is exceeded.
; Level		-	output level

<Cabbage>
form caption("Strum") size(320,400), pluginid("strm"), guirefresh(128) style("legacy")

image    bounds(  0,  0,320,300), colour(250,230,255),    shape("sharp"), outlinecolour("black"), outlinethickness(1)
xypad    bounds(  0,  0,320,300), colour(220,200,250), channel("x", "y"), rangex(0, 1.00, 0), rangey(0, 1, 0), colour("DarkSlateGrey"), textcolour("DarkSlateGrey")

image    bounds(  0,300,320,100), colour(220,200,250),    shape("sharp"), outlinecolour("black"), outlinethickness(1)
rslider  bounds(  0,305, 70, 70), channel("notes"),     text("Notes"),    valuetextbox(1), textbox(1), range(1, 50, 5,1,1),         colour("SlateGrey"), trackercolour(20,40,70), textcolour(20,40,70), fontcolour("DarkSlateGrey")
rslider  bounds( 50,305, 70, 70), channel("spacing"),   text("Spacing"),  valuetextbox(1), textbox(1), range(0.25, 6.00, 1,1,0.25), colour("SlateGrey"), trackercolour(20,40,70), textcolour(20,40,70), fontcolour("DarkSlateGrey")
rslider  bounds(100,305, 70, 70), channel("offset"),    text("Offset"),   valuetextbox(1), textbox(1), range(24, 72, 48,1,1),       colour("SlateGrey"), trackercolour(20,40,70), textcolour(20,40,70), fontcolour("DarkSlateGrey")
rslider  bounds(150,305, 70, 70), channel("shift"),     text("Shift"),    valuetextbox(1), textbox(1), range(-24, 24, 12,1,0.25),   colour("SlateGrey"), trackercolour(20,40,70), textcolour(20,40,70), fontcolour("DarkSlateGrey")
rslider  bounds(200,305, 70, 70), channel("PolyLimit"), text("Polyphony"),valuetextbox(1), textbox(1), range(1, 24, 3,1,1),         colour("SlateGrey"), trackercolour(20,40,70), textcolour(20,40,70), fontcolour("DarkSlateGrey")
rslider  bounds(250,305, 70, 70), channel("lev"),       text("Level"),    valuetextbox(1), textbox(1), range(0, 1.00, 0.3),         colour("SlateGrey"), trackercolour(20,40,70), textcolour(20,40,70), fontcolour("DarkSlateGrey")

checkbox bounds( 25,380,110, 16), text("Include Edges"), colour("yellow"), channel("IncludeEdges"),  value(0), fontcolour("DarkSlateGrey")

</Cabbage>

<CsoundSynthesizer>
<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>
sr 	= 	44100
ksmps 	= 	16
nchnls 	= 	2
0dbfs	=	1

gisine		ftgen	0,0,4096,10,1	; sine wave
gaRvbSendL,gaRvbSendR	init	0	; initialise reverb stereo send global audio signal
gkactive 	init 	0		; number of active notes

instr		1
 kx		chnget	"x"
 ky		chnget	"y"
 knotes		chnget	"notes"
 gkoffset	chnget	"offset"		; note number offset
 gkspacing	chnget	"spacing"		; note spacing (in semitones or fraction thereof
 gkshift	chnget	"shift"			; note shift applied to downwardly triggered notes
 gkPolyLimit	chnget	"PolyLimit"		; polyphony limit
 gklev		chnget	"lev" 
 kIncludeEdges	chnget	"IncludeEdges"
 ktrig1	=	0				; ktrig1 and ktrig2 can be added to ktrig to include triggerings at the boundaries
 ktrig2	=	0
 kOldy	init	0

 kVertDir	init	0			; set initial (arbitrary) state for vertical direction (0=bottom to top, 1=top to bottom)
 ; UPPER AND LOWER BARRIERS 
 if kVertDir==0 then				; if vertical direction is bottom to top...
  ktrig1	trigger	ky,kOldy,1		; if current y position is less than previous y position - i.e. top edge barrier has been bounced against - generate a trigger
  if ktrig1==1 then				; if bounce against top edge has been detected...
   kVertDir	=	1			; change direction
  endif
 elseif kVertDir==1 then			; if vertical direction is top to bottom...
  ktrig2	trigger	ky,kOldy,0		; if current y position is greater than previous y position - i.e. bottom edge barrier has been bounced against - generate a trigger
  if ktrig2==1 then				; if bounce against bottom edge has been detected...
   kVertDir	=	0			; change direction
  endif
 endif 
 kOldy	=	ky				; previous y position equals current y position (for the next k pass)

 ky	=	ky * (knotes + 1)
 	
 ktrig	changed	int(ky)
 if kIncludeEdges==1 then
  ktrig	=	ktrig+ktrig1+ktrig2
 endif
 	schedkwhen	ktrig,0,0,2,0,2,round(ky),kx,kVertDir
endin


; SCALE FOR REFLECTION DEPENDENT UPON MIDI NOTE NUMBER (LESS DAMPING FOR HIGHER NOTES)
giScal1	ftgen	0,0,128, -27,  0, 0.9, 24, 0.9, 36, 0.85, 48, 0.75, 60, 0.65, 72, 0.35, 84, 0.001, 96, 0.001, 127		; longer sustaining notes / less damping
giScal2	ftgen	0,0,128, -27,  0, 0.983, 24, 0.983, 36, 0.971, 48, 0.939, 60, 0.855, 72, 0.747, 84, 0.364, 96, 0.001, 127	; shorter sustaining notes / more damping

instr	2	; longer harmonic pluck sound

 ; polyphony control
 gkactive init i(gkactive) + 1		;INCREMENT NOTE COUNTER
 if gkactive>i(gkPolyLimit) then	;IF POLYPHONY IS EXCEEDED (THROUGH THE ADDITION OF NEW NOTE)
  turnoff				;REMOVE THIS NOTE
 endif
 krel release				;IF NOTE HELD = 0, IF NOTE RELEASED = 1
 ktrig trigger krel,0.5,0		;WHEN RELEASE FLAG CROSSES 0.5 UPWARDS, I.E. NOTE HAS BEEN RELEASED...	
 if ktrig==1 then		
  gkactive = gkactive - 1		;...DECREMENT ACTIVE NOTES COUNTER
 endif

 aRelEnv	linsegr	1,0.2,0

 inum	limit	i(gkoffset) + (p4 * i(gkspacing)) + (p6 * i(gkshift)),0,127
 
 aEnv	linsegr	0, 0.005, 1, p3-0.105, 1, 0.1, 0		; amplitude envelope
 iPlk	=	p5						; point at which to pluck the string
 iDtn	random    -0.05, 0.05					; random detune
 irefl	table	inum, giScal1					; read reflection value from giScal table according to note number  
 aSig	wgpluck2  0.58, gklev, cpsmidinn(inum+iDtn), iPlk, irefl	; generate Karplus-Strong plucked string audio 
 kcf	expon	cpsoct(rnd(6)+6),p3,50				; filter cutoff frequency envelope
 aSig	clfilt	aSig, kcf, 0, 2					; butterworth lowpass filter	
 aL,aR pan2      aSig * aEnv * aRelEnv, p5				; random panning   
       outs      aL, aR						; send audio to outputs
 gaRvbSendL	=	gaRvbSendL + aL*0.1
 gaRvbSendR	=	gaRvbSendR + aR*0.1
endin

instr	201	; reverb instrument
	aL,aR	reverbsc	gaRvbSendL,gaRvbSendR,0.85,7000
		outs		aL,aR
		clear		gaRvbSendL,gaRvbSendR
endin

</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]	; sense collisions with barriers
i 201 0 [3600*24*7]	; reverb instrument
</CsScore>

</CsoundSynthesizer>
<Cabbage>
form caption("Arpeggiator") size(700, 440), pluginid("arpe") style("legacy")

#define RSliderStyle #trackercolour(0,255,255), colour(100,100,140), outlinecolour(20,20,20)#
                      
groupbox bounds( 5,  0, 690, 100), text("Arpeggiator"),{
rslider  bounds( 10, 30, 60, 60), text("Interval"), channel("intvl"), range(-36, 36, 7, 1, 1), $RSliderStyle
rslider  bounds( 60, 30, 60, 60), text("Cycles"), channel("cycles"), range(0, 32, 5, 1, 1), $RSliderStyle
label    bounds(122, 29, 65, 12), text("Cycle Mode") 
combobox bounds(118, 42, 74, 20), channel("CyUpDn"), value(2), text("Up","Up-Down")
rslider  bounds(190, 30, 60, 60), text("Tempo"), channel("tempo"), range(1, 500,120, 1, 1), $RSliderStyle
label    bounds(243, 29, 65, 12), text("Tempo Mlt."), 
combobox bounds(250, 42, 50, 20), channel("TempoMlt"), value(4), text("1/4","1/3","1/2","1","3/2","2","3","4")
checkbox bounds(310, 40, 30, 30), colour("yellow"), channel("hold"),  value(1)
label    bounds(308, 77, 30, 12), text("Hold")
label    bounds(367, 29, 55, 12), text("Arp.Mode")
combobox bounds(350, 42, 90, 20), channel("mode"), value(6), text("Up","Down","Up<->Down","Random Dir.","Random Pick","Seq. Play")
rslider  bounds(440, 30, 60, 60), text("Swing"), channel("swing"), range(0, 1.00, 0), $RSliderStyle
label    bounds(505, 29, 78, 13), text("Clock Source")
button   bounds(505, 42, 80, 20), text("Internal","External"), channel("ClockSource"), value(0)
checkbox bounds(597, 40, 30, 30), colour("red"), channel("pause"), value(0)
label    bounds(595, 77, 35, 12), text("Pause")
checkbox bounds(647, 40, 30, 30), colour("Cyan"), channel("onoff"),  value(1)
label    bounds(643, 77, 40, 12), text("On/Off")
}

groupbox bounds(  5,105, 690, 220), text("Synth")
label    bounds(101,132, 25,  12), text("VCA")
rslider  bounds( 10,150, 60, 60), text("Att."), channel("Aatt"),range(0.001, 2, 0.001, 0.5), $RSliderStyle
rslider  bounds( 60,150, 60, 60), text("Dec."), channel("Adec"),range(0.001, 2, 0.001, 0.5), $RSliderStyle
rslider  bounds(110,150, 60, 60), text("Sus."), channel("Asus"), range(0,     1.00, 1), $RSliderStyle
rslider  bounds(160,150, 60, 60), text("Rel."), channel("Arel"), range(0.001, 2, 0.001, 0.5), $RSliderStyle
line bounds(230, 140, 2, 70), colour("Grey")

label    bounds(408,132,  25,  12), text("VCF")
rslider  bounds(240,150, 60, 60), text("Env.Amt"), channel("EnvAmt"),	range(0.001, 2, 0.5), $RSliderStyle
rslider  bounds(290,150, 60, 60), text("Att."), channel("att"), 		range(0.001, 2, 0.001, 0.5), $RSliderStyle
rslider  bounds(340,150, 60, 60), text("Dec."), channel("dec"), 		range(0.001, 2, 0.5, 0.5), $RSliderStyle
rslider  bounds(390,150, 60, 60), text("Sus."), channel("sus"), 		range(0,     1.00, 0.5), $RSliderStyle
rslider  bounds(440,150, 60, 60), text("Rel."), channel("rel"),		range(0.001, 2, 0.1, 0.5), $RSliderStyle
rslider  bounds(490,150, 60, 60), text("Res."), channel("res"),		range(0,     1.00, 0.5), $RSliderStyle
rslider  bounds(540,150, 60, 60), text("Dist."), channel("dist"), 		range(0,     1.00, 0), $RSliderStyle
checkbox bounds(600,158, 30, 30), colour("yellow"), channel("KybdTrk"),  value(1)
label    bounds(597,198, 35, 12), text("Track")
label    bounds(645,147, 35, 12), text("Type")
combobox bounds(640,160, 45, 20), channel("FiltType"), value(1), text("LPF","BPF")

line bounds( 15,220,670, 2), colour("Grey")

label    bounds( 54,230,  25,  12), text("LFO")
rslider  bounds( 10,250, 60, 60), text("Depth"), channel("LFOdep"), 	range(0,     0.5, 0.15), $RSliderStyle
rslider  bounds( 60,250, 60, 60), text("Rate"), channel("LFOrate"),	range(0.001, 5,   0.07), $RSliderStyle
line bounds(130, 240, 2, 70), colour("Grey")

label    bounds(245,230,  70,  12), text("Oscillator")
label    bounds(161,248, 40, 12), text("Wave")
combobox bounds(150,260, 65, 20), channel("wave"), value(3), text("triangle","square","saw","noise")
checkbox bounds(150,290,100, 20), colour("yellow"), channel("subosc"),  value(0), text("Subosc")
label    bounds(235,248, 40, 12), text("Octave")
combobox bounds(225,260, 65, 20), channel("OctTrans"), value(5), text("-6","-5","-4","-3","-2","-1","0","1","2","3","4","5","6")
label    bounds(227,283, 60, 12), text("Semitones")
combobox bounds(225,295, 65, 20), channel("SemiTrans"), value(12), text("-11","-10","-9","-8","-7","-6","-5","-4","-3","-2","-1","0","1","2","3","4","5","6","7","8","9","10","11")
rslider  bounds(300,250, 60, 60), text("Port."), channel("NotePort"), 	range(0, 1.00,   0, 0.5), $RSliderStyle
rslider  bounds(350,250, 60, 60), text("Level"), channel("SynLev"),	range(0, 1.00,   0.3), $RSliderStyle
line bounds(420, 240, 2, 70), colour("Grey")

label    bounds(442,230, 55, 12), text("Freq.Shift")
rslider  bounds(440,250, 60, 60), text("Freq."), channel("FShift"),	range(-1000, 1000, 0), $RSliderStyle
button   bounds(465,244,  8,  7), text(""), channel("ZeroFS"), value(0), colour:0("white"), colour:1("white")
line bounds(515, 240, 2, 70), colour("Grey")

label    bounds(585,230, 40, 12), text("Delay")
rslider  bounds(530,250, 60, 60), text("Mix"), channel("DryWet"),	range(0,  1.00,   0.1), $RSliderStyle
rslider  bounds(580,250, 60, 60), text("Time"), channel("DlyTim"),	range(1, 16,   4,1,1), $RSliderStyle
rslider  bounds(630,250, 60, 60), text("F.back"), channel("DlyFB"),	range(0,  1.00,   0.5), $RSliderStyle

keyboard pos(5, 330), size(690, 80)
infobutton bounds(5,415, 70, 20), text("Help"), file("ArpeggiatorHelp.html")
image bounds(80, 415, 215, 20), colour(50,50,50), plant("credit"), line(0){
label bounds(5, 2,200, 14), text("Author: Iain McCurdy |2012|"), fontcolour("white"), colour(50,50,50)
}
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 			= 	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1
massign	0,0
	
;Author: Iain McCurdy (2012)
;http://www.iainmccurdy.org	

giseqorder	ftgen	0,0,1024,-2,0	;ORDERED ROW OF NOTES (IN THE ORDER IN WHICH THEY WERE PLAYED)
giseqascend	ftgen	0,0,1024,-2,0	;ORDERED ROW OF NOTES (IN ASCENDING ORDER)
ginoteactive	ftgen	0,0,128,-2,0	;TABLE OF NOTE ON STATUSES 1=ON 0=OFF
giblank		ftgen	0,0,128,-2,0	;BLANK TABLE
gisine		ftgen	0,0,4096,10,1
giFletcherMunsonCurve	ftgen	0,0,-20000,-16,1,4000,-8,0.15, 20000-4000,0,0.15

giTempoMlt	ftgen	0,0,-8,-2,1/4,1/3,1/2,1,3/2,2,3,4	;TABLE OF TEMPO MULTIPLIERS - USED TO SCALE THE ARPEGGIO RATE WHEN IN TEMPO MODE
gasendL,gasendR	init	0					;GLOBAL VARIABLES USED TO SEND SIGNAL TO THE DELAY EFFECT

;UDO THAT SORTS A TABLE OF NUMBERS INTO ASCENDING ORDER
opcode	tabsort_ascnd2,0,ii
	iNumItems,ifn	xin
	iTabLen		=		ftlen(ifn)
	imax		table		0,ifn
	icount		=		1
	loop1:
	  ival		table		icount,ifn
	  imax 		= 		(ival>=imax?ival:imax)
	  		loop_lt		icount,1,iNumItems,loop1
	iTableBuffer	ftgentmp	0,0,iTabLen,-2, 0
	icount1		=		0
	loop2:
	  icount2	=		0
	  imin		=		imax
	  loop3:
	    ival	table		icount2,ifn
	    if ival<=imin then			
	      imin 	= 		ival
	      iloc 	= 		icount2 
	    endif
	    		loop_lt		icount2,1,iNumItems,loop3
			tableiw		imin,icount1,iTableBuffer
			tableiw		imax,iloc,ifn
			loop_lt		icount1,1,iNumItems,loop2
	icount		=		0
	loop4:
	ival		table		icount,iTableBuffer
			tableiw		ival,icount,ifn
			loop_lt		icount,1,iNumItems,loop4
endop

opcode	FreqShifter,a,aki
	ain,kfshift,ifn	xin					;READ IN INPUT ARGUMENTS
	areal, aimag hilbert ain				;HILBERT OPCODE OUTPUTS TWO PHASE SHIFTED SIGNALS, EACH 90 OUT OF PHASE WITH EACH OTHER
	asin 	oscili       1,    kfshift,     ifn,          0
	acos 	oscili       1,    kfshift,     ifn,          0.25	
	;RING MODULATE EACH SIGNAL USING THE QUADRATURE OSCILLATORS AS MODULATORS
	amod1	=		areal * acos
	amod2	=		aimag * asin	
	;UPSHIFTING OUTPUT
	aFS	= (amod1 - amod2)
		xout	aFS				;SEND AUDIO BACK TO CALLER INSTRUMENT
endop

;This instrument needs to be last in order for the 'hold' function to work properly. I'm not sure why.
instr	ScanWidgets
	gkintvl		chnget	"intvl"
	gkcycles	chnget	"cycles"
	gktempo		chnget	"tempo"		;INTERNAL GUI CONTROL
	gkhostbpm	chnget	"HOST_BPM"	;HOST TEMPO
	gkClockSource	chnget	"ClockSource"	;CLOCK SOURCE SELECTOR SWITCH
	if gkClockSource==1 then
	 gktempo = gkhostbpm
	endif
	gkCyUpDn	chnget	"CyUpDn"
	gkTempoMlt	chnget	"TempoMlt"
	gkhold		chnget	"hold"
	gkmode		chnget	"mode"
	gkswing		chnget	"swing"	
	gkpause		chnget	"pause"
	gkonoff		chnget	"onoff"
	gkAatt		chnget	"Aatt"
	gkAdec		chnget	"Adec"
	gkAsus		chnget	"Asus"
	gkArel		chnget	"Arel"
	gkEnvAmt	chnget	"EnvAmt"
	gkatt		chnget	"att"
	gkdec		chnget	"dec"
	gksus		chnget	"sus"
	gkrel		chnget	"rel"
	gkres		chnget	"res"
	gkdist		chnget	"dist"
	gkKybdTrk	chnget	"KybdTrk"
	gkFiltType	chnget	"FiltType"
	gkLFOdep	chnget	"LFOdep"
	gkLFOrate	chnget	"LFOrate"
	gkwave		chnget	"wave"
	gkOctTrans	chnget	"OctTrans"
	gkSemiTrans	chnget	"SemiTrans"
	gkNotePort	chnget	"NotePort"
	gkSynLev	chnget	"SynLev"
	gksubosc	chnget	"subosc"
	gkFShift	chnget	"FShift"	
	gkDryWet	chnget	"DryWet"
	gkDlyTim	chnget	"DlyTim"
	gkDlyFB		chnget	"DlyFB"	
	gkZeroFS	chnget	"ZeroFS"
	kzero		=	0
	if changed(gkZeroFS)==1 then
	 chnset	kzero,"FShift"
	endif
endin

instr	ScanMIDI	;SCAN INCOMING MIDI AND TRIGGER NOTES IN INSTRUMENT 'NoteLayer'
	insno 	nstrnum "NoteLayer"
	kstatus, kchan, kdata1, kdata2  midiin; read in midi
	if kstatus==144||kstatus==128 then
	 if kdata2>0&&kstatus==144 then				;IF VELOCITY IS GREATER THAN 0 (I.E. FOR SOME KEYBOARDS VELOCITY ZERO IS A NOTE OFF)
	  kAlreadyActiveStatus	table	kdata1,ginoteactive	;CHECK IF THIS NOTE IS ALREADY ACTIVE (POSSIBLE IF HOLD IS ON).
	  if kAlreadyActiveStatus==0 then			;IF THIS NOTE IS NOT ALREADY ACTIVE...
	   event "i",insno+(kdata1*0.001),0,3600,kdata1	;
	  endif
	 else
	  if gkhold==0 then
	   turnoff2	insno+(kdata1*0.001),4,1
	  endif
	 endif
	elseif kstatus==128&&gkhold==0 then		;IF MIDI KEYBOARD USES NOTE OFF STATUS BYTE
	 turnoff2	insno+(kdata1*0.001),4,1
	endif
endin	

instr	NoteLayer				;THIS INSTRUMENT IS TRIGGERED FOR EACH NOTE PLAYED ON THE KEYBOARD
	inum	=	p4			;READ IN MIDI NOTE NUMBER		
	tableiw	1,inum,ginoteactive
	iNNotes	active	"NoteLayer"		;SENSE THE NUMBER INSTANCES OF THIS INSTRUMENT (I.E. MIDI NOTES) ARE BEING HELD AT I-TIME.
	tableiw	inum,iNNotes-1,giseqorder	;WRITE THE NOTE NUMBER OF THIS NOTE TO THE NEXT LOCATION IN THE ORDERED ROW OF NOTES (giseqorder)
	tableicopy	giseqascend,giseqorder	;COPY THE LIST OF NOTES (IN THE ORDER IN WHICH THEY WERE PLAYED) INTO THE TABLE OF NOTES TO BE SORTED INTO ASCENDING ORDER
	tabsort_ascnd2	iNNotes,giseqascend	;UDO CALLED THAT ORDERS THE LIST OF NOTES INTO ASCENDING ORDER
	
	krelease	release			;SENSE WHEN THIS NOTE HAS BEEN RELEASED
	if krelease==1 then			;IF THIS NOTE HAS BEEN RELEASED (FINAL K-RATE CYCLE)...
	 tablew	0,inum,ginoteactive
	 ;AS THIS NOTE HAS BEEN RELEASED IT WILL HAVE TO BE REMOVED FROM THE ORDERED ROW OF NOTE (giseqorder). ALL NOTES *AFTER* IT IN THE ROW WILL HAVE TO BE SHUNTED BACK ONE PLACE.
	 kShuntNdx	=	iNNotes		;INITIAL SHUNT INDEX (THE LOCATION TO WHICH THE NOTE NUMBER FOR THIS NOTE WAS WRITTEN)
	 kNNotes	active	"NoteLayer"	;FIND THE NUMBER OF INSTANCES OF THIS INSTRUMENT (I.E. NOTES BEING HELD) NOW
	 SHUNT_ROW:				;A LABEL. THE SHUNTING PROCEDURE LOOPS FROM HERE.
	 kval	table	kShuntNdx, giseqorder	;READ THE NOTE NUMBER JUST AFTER THIS ONE IN THE SEQUENCE ROW...
	 	tablew	kval, kShuntNdx-1, giseqorder	;AND MOVE IT BACK ONE PLACE
	 loop_lt	kShuntNdx,1,kNNotes,SHUNT_ROW	;LOOP BACK AND REPEAT THE SHUNTING PROCEDURE UNTIL THE NEW ROW IS COMPLETE
	endif
	
	kHoldOff	trigger	gkhold,0.5,1	;IF HOLD GOES FROM '1'/'ON' TO '0'/'OFF' GENERATE A TRIGGER IMPULSE
	if kHoldOff==1 then			;IF HOLD GOES FROM 'ON' TO 'OFF'... 
	 turnoff				;TURN THIS (AND ALL OTHER) NOTES OFF
	endif					;END OF CONDITIONAL BRANCH

	if iNNotes==1 then			;IF THIS IS THE FIRST NOTE OF AN ARPEGGIO TO BE PLAYED...
	 event_i "i","Arpeggiator",0,-1		;START ARPEGGIATOR INSTRUMENT WITH A 'HELD' NOTE. SEND IT THE MIDI NOTE NUMBER.
	endif					;END OF CONDITIONAL BRANCH

	insnoArp 	nstrnum "Arpeggiator"
	if gkonoff==0 then
	 turnoff2	insnoArp,0,1
	 tablecopy	ginoteactive,giblank		;ERASE NOTE STATUSES TABLE
	 turnoff
	endif
endin


instr	Arpeggiator	
	krelease	release				;SENSE END OF NOTE (1)
	kporttime	linseg	0,0.001,0.05

	ktrans		=	((gkOctTrans-7)*12)+(gkSemiTrans-12)

	kHoldOff	trigger	gkhold,0.5,1		;IF HOLD GOES FROM '1'/'ON' TO '0'/'OFF' GENERATE A TRIGGER IMPULSE
	if kHoldOff==1 then				;IF HOLD GOES FROM 'ON' TO 'OFF'... 
	 tablecopy	ginoteactive,giblank		;ERASE NOTE STATUSES TABLE
	 turnoff					;TURN THIS INSTRUMENT OFF
	endif						;END OF CONDITIONAL BRANCH

	kNNotes	active	"NoteLayer"			;NUMBER OF INSTR 1 (MIDI NOTES) BEING HELD. SPECIFICALLY WE ARE INTERESTED IN WHETHER ALL NOTES HAVE BEEN RELEASED	
	
	if kNNotes==0&&gkhold==0 then			;IF ALL MIDI KEYBOARD NOTES HAVE BEEN RELEASED...
	 turnoff					;...TURN THIS INSTRUMENT OFF
	endif						;END OF CONDITIONAL BRANCH

	kswingval1	scale	gkswing,1/1.5,1
	kswingval2	scale	gkswing,1/0.5,1
	kswingstep	init	0
	kswingval	init	(i(gkswing)*0.5) + 1
	
	kTempoMlt	table	gkTempoMlt-1,giTempoMlt
	
	gkrate	=	(gktempo/60)*kTempoMlt*4*(1-gkpause)		;DERIVE TEMPO FROM BPM AND TEMPO MULTIPLIER
	
	ktrigger	metro	gkrate*kswingval			;METRONOME TO TRIGGER NOTES OF THE ARPEGGIO. PHASE OFFSET (P2) PREVENTS A SEARCH FOR A NEW NOTE WHEN THE FIRST NOTE OF AN ARPEGGIO HAS BEEN PLAYED

	;SET REQUIRED INITIAL SETTINGS DEPENDING ON ARPEGGIATOR MODE
	ktrig	changed	gkmode
	if ktrig==1 then
	 reinit	RESET_START_VALS
	endif
	RESET_START_VALS:
	kcount1	init	0
	kcount2	init	0
	kndx	init	0
	kcycle	init	0
	kCycleDir	init	0
	if i(gkmode)==1 then				;IF UP MODE...
	 kcount1	init	0
	 kcount2	init	0
	 kndx	init	0
	 kdir	init	1
	elseif i(gkmode)==2 then			;IF DOWN MODE...
	 kcount1	init	0
	 kcount2	init	0
	 kndx	init	i(kNNotes)-1
	 kdir	init	-1
	elseif i(gkmode)==3 then			;IF UP AND DOWN MODE...
	 kdir	init	1
	 kcount1	init	0
	 kcount2	init	0
	 kndx	init	0
	elseif i(gkmode)==4 then			;RANDOM DIRECTION MODE...
	 kdir	init	1
	 kcount1	init	0
	 kcount2	init	0
	 kndx	init	0
	elseif i(gkmode)==5 then			;RANDOM PICK MODE...
	 kcount1	init	0
	 kcount2	init	0
	 kndx	init	0
	elseif i(gkmode)==6 then			;SEQUENCE PLAY MODE...
	 kcount1	init	0
	 kcount2	init	0
	 kndx	init	0
	 kdir	init	1
	endif
	rireturn
	
	if ktrigger==1&&krelease!=1 then		;IF A TRIGGER FOR A NEW NOTE HAS BEEN ISSUED AND WE ARE NOT IN A RELEASE STAGE...

 	 ktrans		=	((gkOctTrans-4)*12)+(gkSemiTrans-12)

	 kswingstep	=	abs(kswingstep-1)
	 kswingval	=	(kswingstep=0?kswingval1:kswingval2)
	
	 ;UP
	 if gkmode==1 then				;IF 'UP' DIRECTION MODE IS SELECTED...
	  knum		table	kndx,giseqascend	;READ NOTE NUMBER
	  knum		=	knum+(gkintvl*kcycle)
	  kcount1	=	kcount1 + 1
	  ktrig		changed	kNNotes
	  if ktrig==1 then				;IF NOTES ARE ADDED OR TAKEN AWAY FROM THE ROW SINCE THE LAST ITERATION
	   kcount1	=	kndx+1
	  endif	  
	  if kndx==kNNotes-1 then
	   kcount2	=	kcount2+1
	   if gkCyUpDn==1 then
	    kcycle	wrap	kcount2,0,gkcycles+1
	   else
	    kcycle	mirror	kcount2,0,gkcycles
	   endif	    
	  endif	  
	  kndx		wrap	kcount1,-0.5,kNNotes-0.5  
	  


	 ;DOWN
	 elseif gkmode==2 then				;IF 'DOWN' DIRECTION MODE IS SELECTED...
	  knum		table	kndx,giseqascend	;READ NOTE NUMBER
	  knum		=	knum+(gkintvl*kcycle)
	  if kndx==0 then
	   kcount2	=	kcount2+1
	   if gkCyUpDn==1 then
	    kcycle	wrap	kcount2,0,gkcycles+1
	   else
	    kcycle	mirror	kcount2,0,gkcycles
	   endif	    
	  endif	  
	  kcount1	=	kcount1 - 1
	  ktrig		changed	kNNotes
	  if ktrig==1 then				;IF NOTES ARE ADDED OR TAKEN AWAY FROM THE ROW SINCE THE LAST ITERATION
	   kcount1	=	kndx-1
	  endif	  
	  kndx		wrap	kcount1,-0.5,kNNotes-0.5  



	
	 ;UP-DOWN
	 elseif gkmode==3 then				;IF 'UP<->DOWN' DIRECTION MODE IS SELECTED...
	  if gkcycles==0 then
	   if kNNotes==1 then
	    kdir	=	0
	   elseif kndx=0 then				;OR IF... THE INDEX IS POINTING TO THE FIRST NOTE IN THE LIST, WE NEED TO CHANGE DIRECTION TO UP FOR THE NEXT NOTE AFTER THIS ONE
	    kdir	=	1			;CHANGE DIRECTION TO UP
	   elseif kndx=(kNNotes-1) then			;IF THE INDEX IS POINTING TO THE LAST NOTE IN THE LIST, WE NEED TO CHANGE DIRECTION TO DOWN FOR THE NEXT NOTE AFTER THIS ONE
	    kdir	=	-1			;CHANGE DIRECTION TO DOWN
	   endif					;END OF CONDITIONAL
	   kndx	=	kndx + kdir
	   knum		table	kndx,giseqascend	;READ NOTE NUMBER
	   kgoto PLAY_A_NOTE				;GO STRAIGHT TO PLAYING THIS NEW NOTE

	  else
	   kndx		limit	kndx,0,kNNotes-1
	   knum		table	kndx,giseqascend	;READ NOTE NUMBER
	   knum		=	knum+(gkintvl*kcycle)
	   kcount	init	i(kndx)
	   kcount	=	kcount + 1
	   kndx		mirror	kcount,0,kNNotes-1
	   if kndx==0 then
	    kcount2	init	i(kcycle)
	    kcount2	=	kcount2+1	    
	    if gkCyUpDn==1 then
	     kcycle	wrap	kcount2,0,gkcycles+1
	    else
	     kcycle	mirror	kcount2,0,gkcycles
	    endif	    
	   endif
	   
	   kgoto PLAY_A_NOTE				;GO STRAIGHT TO PLAYING THIS NEW NOTE
	  endif
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 ;RANDOM DIRECTION
	 elseif gkmode==4 then
	  if kndx==(kNNotes-1) then			;IF THE INDEX IS POINTING TO THE LAST NOTE IN THE LIST, WE NEED TO CHANGE DIRECTION TO DOWN FOR THE NEXT NOTE AFTER THIS ONE
	   kdir	=	-1				;CHANGE DIRECTION TO DOWN
	  elseif kndx==0 then				;OR IF... THE INDEX IS POINTING TO THE FIRST NOTE IN THE LIST, WE NEED TO CHANGE DIRECTION TO UP FOR THE NEXT NOTE AFTER THIS ONE
	   kdir	=	1				;CHANGE DIRECTION TO UP
	  endif						;END OF CONDITIONAL
	  knum		table	kndx,giseqascend	;READ NOTE NUMBER	
	  if gkcycles>0 then
	   knum	=	knum+(gkintvl*kcycle)
	  endif	
	  if kndx==(kNNotes-1) then
	   kcycle	wrap	kcycle+1,0,gkcycles+1
	  elseif kndx==0 then	
	   kcycle	wrap	kcycle-1,0,gkcycles+1
	  endif
	  kndx	=	kndx+kdir			;INCREMENT INDEX FOR THE NEXT NOTE AFTER THIS ONE
	  kgoto PLAY_A_NOTE				;GO STRAIGHT TO PLAYING THIS NEW NOTE


	 
	 ;RANDOM PICK (RANDOMLY CHOOSE ANY NOTE CURRENTLY BEING HELD)
	 elseif gkmode==5 then
	  kRndNdx	random	0,kNNotes		;CREATE RANDOM INDEX
	  knum		table	kRndNdx,giseqorder	;READ NOTE FROM NOTE LIST USING RANDOM INDEX
	  knum	=	knum+(gkintvl*kcycle)
	  if kndx==kNNotes-1 then
	   kcount2	=	kcount2 + 1
	   if gkCyUpDn==1 then
	    kcycle	wrap	kcount2,0,gkcycles+1
	   else
	    kcycle	mirror	kcount2,0,gkcycles
	   endif
	  endif
	  kndx	wrap	kndx+1,0,kNNotes		;INCREMENT THE COUNTER BUT WRAP IT AROUND IF IT STRAYS BEYOND THE VALUE CORRESPONDING TO THE NUMBER OF NOTES BEING HELD (I.E. THE LENGTH OF THE SEQUENCE)
	  kgoto	PLAY_A_NOTE				;GO STRAIGHT TO PLAYING THIS NEW NOTE


	
	 ;SEQUENCE PLAY (PLAYS NOTES IN THE ORDER IN WHICH THEY WERE ORIGINALLY PLAYED)
	 else
	  knum	table	kndx,giseqorder			;READ NOTE VALUE FROM TABLE
	  if gkcycles!=0 then
	   knum	=	knum+(gkintvl*kcycle)
	  endif	
	  if kndx==kNNotes-1 then
	   kcount2	=	kcount2 + 1
	   if gkCyUpDn==1 then
	    kcycle	wrap	kcount2,0,gkcycles+1
	   else
	    kcycle	mirror	kcount2,0,gkcycles
	   endif
	  endif
	  kndx	wrap	kndx+1,0,kNNotes		;INCREMENT THE COUNTER BUT WRAP IT AROUND IF IT STRAYS BEYOND THE VALUE CORRESPONDING TO THE NUMBER OF NOTES BEING HELD (I.E. THE LENGTH OF THE SEQUENCE) 
	  kgoto PLAY_A_NOTE				;GO STRAIGHT TO PLAYING THIS NEW NOTE
	 endif
	endif
	
	
	
	
	
	PLAY_A_NOTE:
	if gkmode==4&&ktrigger==1 then			;IF RANDOM DIRECTION MODE HAS BEEN CHOSEN, CHOOSE A NEW RANDOM DIRECTION FOR THE NEXT STEP 
	 kdir	random	0,1.999999			;
	 kdir	=	(int(kdir)*2)-1			;kdir WILL BE EITHER -1 OR 1
	endif

	;PORTAMENTO ADDED TO NOTE NUMBER CHANGES
	kporttime	linseg	0,0.001,0.1
	knum2		portk	knum+ktrans,kporttime*gkNotePort
	kcps		limit	cpsmidinn(knum2),0,10000
	kAmpScale	table	kcps,giFletcherMunsonCurve
	
	a1	vco2	gkSynLev*kAmpScale,kcps,12		;TRIANGLE WAVE OSCILLATOR
	a2	vco2	gkSynLev*kAmpScale,kcps,10		;SQUARE WAVE OSCILLATOR
	a3	vco2	gkSynLev*kAmpScale,kcps,0,0.5		;SAWTOOTH WAVE OSCILLATOR
  	a4	pinkish	gkSynLev				;PINK NOISE
		
	ifadecurve	ftgenonce	0,0,1024,20,2		;HANNING WINDOW USED FOR THE CROSSFADING CURVES
	kamp1	table	(((gkwave-1)/3)*1.5)+0.5,ifadecurve,1	;TRIANGLE WAVE AMPLITUDE CONTROL EACH OF THE AMPLITUDES ARE OFFSET WITH RESPECT TO EACH OTHER. NOTE THAT IF INDEX IS LESS THAN 0 IT WILL ACTUALLY HOLD READING AT ZERO IF ITS GREATER THAN '1' IT WILL HOLD AT 1
	kamp2	table	(((gkwave-1)/3)*1.5),ifadecurve,1	;SQUARE WAVE AMPLITUDE CONTROL
	kamp3	table	(((gkwave-1)/3)*1.5)-0.5,ifadecurve,1	;SAW WAVE AMPLITUDE CONTROL
	kamp4	table	(((gkwave-1)/3)*1.5)-1,ifadecurve,1	;PINK NOISE AMPLITUDE CONTROL
	aamp1	interp	kamp1
	aamp2	interp	kamp2
	aamp3	interp	kamp3
	aamp4	interp	kamp4
	a1	sum	a1*aamp1,a2*aamp2,a3*aamp3,a4*aamp4
	
	;SUB-OSCILLATOR
	if gksubosc==1 then
	 asub	vco2	gkSynLev*kAmpScale*0.6,kcps*0.25,10	
	 a1	=	a1 + asub
	endif
	
	if ktrigger==1 then
	 reinit RETRIGGER_ENVELOPES
	endif
	RETRIGGER_ENVELOPES:

	/*AMPLITUDE ENVELOPE*/
	if gkAatt+gkAdec=0.002&&gkAsus==1 kgoto SKIP_AMP_ENV	;IF ATTACK AND/OR DECAY TIME ARE AT THEIR MINIMUM SETTINGS AND SUSTAIN LEVEL IS MAXIMUM IGNORE AMPLITUDE ENVELOPE CREATION AND IMPLEMENTATION - I.E. WE WIL HAVE SIMPLY A SUSTAINING INSTRUMENT  
	iAatt	=	i(gkAatt)
	iAdec	=	i(gkAdec)
	iAsus	=	i(gkAsus)
	iArel	=	i(gkArel)	
	iAsustim	=	abs((1/i(gkrate))-iAatt-iArel)+0.0001	;DERIVE SUSTAIN TIME FROM ARPEGGIATOR RATE AND THE OTHER ENVELOPE SEGMENT DURATIONS
	kAenv	linsegr	0,iAatt,1,iAdec,i(gkAsus),iAsustim,i(gkAsus),iArel,0	;AMPLITUDE ENVELOPE
	a1	=	a1*kAenv
	SKIP_AMP_ENV:
	
	/*FILTER ENVELOPE*/
	iatt	=	i(gkatt)
	idec	=	i(gkdec)
	isus	=	i(gksus)
	irel	=	i(gkrel)
	isustim	=	abs((1/i(gkrate))-iatt-irel)+0.0001	;DERIVE SUSTAIN TIME FROM ARPEGGIATOR RATE AND THE OTHER ENVELOPE SEGMENT DURATIONS
	kfenv	linsegr	0,iatt,1,idec,0,isustim,0,irel,0	;FILTER ENVELOPE
	kfenv	=	(kfenv*(1-gksus))+gksus
	rireturn

	/*FILTER LFO*/
	kLFO	lfo	gkLFOdep,gkLFOrate,0			;CREATE AN LFO. SINE WAVE SHAPE  
	kEnvAmt	portk	gkEnvAmt,kporttime
	kEnvAmt	limit	kEnvAmt+kLFO,0,1			;ADD LFO TO ENVELOPE AMOUNT VARIABLE AND LIMIT THE RESULT TO LIE WITHIN 0 AND 1
	
	/*FILTER KEYBOARD TRACKING*/
	if gkKybdTrk=0 then					;IF KEYBOARD TRACKING IS OFF...
	 ;NON-KEYBOARD TRACKING FILTER
	 kcfoct	=	((kfenv*8)+6)*(kEnvAmt^0.25)
	else							;OTHERWISE (KEYBOARD TRACKING IS OFF
	 ;KEYBOARD TRACKING FILTER
	 kcfoct	=	octcps(kcps)+((kfenv*7*(kEnvAmt^0.75))-2)	;KEYBOARD TRACKING
	endif
	
	/*FILTER*/
	kcf	limit	cpsoct(kcfoct),20,sr/3			;PROTECT AGAINST OUT OF RANGE FILTER VALUES	 
	kres	portk	gkres,kporttime				;SMOOTH CHANGES MADE TO RESONANCE SETTING
	if gkFiltType==1 then					;CHOOSE FILTER TYPE
	 kdist	portk	gkdist,kporttime			;SMOOTH CHANGES MADE TO DISTORTION SETTING
	 a1	lpf18	a1,kcf,kres*0.98, (kdist^2)*10		;LOWPASS
	 kdmp	scale	kdist^0.2,0.06,1			;CREATE A FUNCTION THAT WILL DAMPEN SIGNAL AMPLITUDE WHEN LOWPASS FILTER DISTORTION IS INCREASED
	 a1	=	a1*kdmp					;
	else
	 ;aflt	butbp	a1,kcf,kcf * (2-((kres^0.5)*1.9))	;BANDPASS
	 kcf	limit	kcf,20,sr*0.4
	 kbw	limit	(kcf*(kres^8))*0.7, 1, sr/4
	 aflt	rbjeq	a1,kcf,1,kbw,1,4;BANDPASS

	 a1	balance	aflt,a1/4,1				;EVEN OUT LEVEL OF FILTER OUTPUT SIGNAL TO COMPENSATE FOR SIGNAL POWER LOSS WHEN BANDWIDTH ('q') IS NARROW
	endif
	
	aenv	linsegr	0,0.001,1,0.005,0			;ANTI-CLICK ENVELOPE
	a1	=	a1*aenv					;APPLY ENVELOPE
	
	/*FREQUENCY SHIFTER*/
	if gkFShift==0 kgoto SKIP_FSHIFT			;IF F.SHIFT VALUE = 0, BYPASS THE EFFECT
	gkFShift	portk	gkFShift,kporttime
	a1	FreqShifter	a1,gkFShift,gisine		;CALL UDO
	SKIP_FSHIFT:
	
	;EFFECT WET/DRY MIX CONSTRUCTION
	iWet	ftgentmp	0,0,512,-7,0,256,1,256,1	;RESCALING FUNCTION FOR WET LEVEL CONTROL
	iDry	ftgentmp	0,0,512,-7,1,256,1,256,0	;RESCALING FUNCTION FOR DRY LEVEL CONTROL
	kWet	table	gkDryWet, iWet, 1			;RESCALE WET LEVEL CONTROL ACCORDING TO FUNCTION TABLE iWet
	kDry	table	gkDryWet, iDry, 1			;RESCALE DRY LEVEL CONTROL ACCORDING TO FUNCTION TABLE iWet	
	gasendL	=	gasendL+a1*kWet
	gasendR	=	gasendR+a1*kWet
	if gkDryWet>0 then
	 a1	=	a1*kDry
	endif
	 	outs	a1,a1
	
endin



instr	Effects
	if gkDryWet==0 kgoto SKIP_DELAY
	kTempoMlt	table	gkTempoMlt-1,giTempoMlt

	ktime	limit	(60*gkDlyTim)/(gktempo*8*kTempoMlt),ksmps/sr,10	;DERIVE TEMPO FROM BPM AND TEMPO MULTIPLIER
	atime	interp	ktime
	kfback	=	0.5
	
	;offset delay (no feedback)
	abuf	delayr	10
	afirst	deltap3	atime
		delayw	gasendL

	;left channel delay (note that 'atime' is doubled) 
	abuf	delayr	20			;
	atapL	deltap3	atime*2
		delayw	afirst+(atapL*gkDlyFB)

	;right channel delay (note that 'atime' is doubled) 
	abuf	delayr	20
	atapR	deltap3	atime*2
		delayw	gasendR+(atapR*gkDlyFB)
		outs	atapL, atapR
	SKIP_DELAY:
		clear	gasendL, gasendR
endin

</CsInstruments>

<CsScore>
i "ScanWidgets" 0 [3600*24*7]		;SCAN GUI WIDGETS
i "ScanMIDI" 0 [3600*24*7]		;SCANS FOR MIDI NOTE EVENTS
i "Effects" 0 [3600*24*7]		;EFFECTS
</CsScore>

</CsoundSynthesizer>; Bassline_TB-303.csd
; Written by Iain McCurdy, 2012, updated 2015

; An emulation of a Roland Bassline TB-303

; Hint: For instant gratification just click the 'Random' button.

; Note (16 mini rotary controls)	- set the note number of each step of the sequence. Notes can also be set by typing directly over the numbers beneath the knobs.
; On/Off	-	On/Off status of each step of the sequence
; Hold		-	If a hold button is active the filter envelope will not be retriggered for this step
; Cutoff	-	Manual control of filter cutoff frequency (moogladder opcode)
;			N.B. the filter follows the note being played so cutoff values set here are ratios of the current note
; Env.Mod.	-	Amount of envelope modification of the filter cutoff frequency. 
;			Note that this control can be set to negative values resulting in an inversion of the filter envelope.
; Follow	-	Amount by which filter cutoff follows the note being played. I think the authentic TB303 method is not to use any key following.
; Res.		-	Resonance of the filter
; Decay		-	Decay time of the filter envelope
; Dist.		-	Amount of waveshaping distortion (clip opcode)
; Reset		-	Cancel all sequence button settings
; Random	-	Set 'Note', 'On', 'Hold' and 'Accent' sequence control to random values
; -semi/+semi	-	Increment all 'Note' controls up or down 1 semitone step 
; -octave/+octave	-	Increment all 'Note' controls up or down 1 octave step
; Gliss		-	glissando time from note to note (where two notes are tied with an active 'Hold' button)
; -- A bandpass filter is used to EQ the overall sound and to fatten the bass response of the synth --
; BPF.CF.	-	Cutoff frequency of a bandpass filter (resonr). This is a fixed frequency filter, i.e. doesn't follow the note being played 
; BPF.BW.	-	Bandwidth of the bandpass filter
; BPF.Bal.	-	Balancing method of the bandpass filter (resonr). 	0=none 
;										1=peak_response_of_1 
;										2=RMS_of_1
; BPF.Mix	-	Mix between un-bandpass filtered sound and bandpass filtered sound.
; Attack	-	Attack time for the main lowpass filter (moogladder) envelope
; Phr.Len.	-	Phrase length in steps
; Tempo		-	Tempo in beats per minute (this control is hidden if 'Clock: External' is selected
; Volume	-	Volume control
; Filter	-	(drop down menu) choose between a moogladder filter and an LPF18 filter. moogladder sounds fatter but LPF18 sounds better when used with distortion
; Waveform	-	(drop down menu) basic waveform type. (Sawtooth, Square, Triangle, Pulse Width Modulation (PWM) or Noise)
			If PWM is selected a control for pulse width is revealed
; Sub.		-	If active a sub-oscillator (1 octave below the main oscillator) is added
; Clock:---	-	Clock source internal (Tempo knob) or external (VST host)

<Cabbage>
#define RSliderStyle trackercolour(255,255,255), colour(  0, 55,100), textcolour(0,0,0), outlinecolour(50,50,50), valuetextbox(1), textbox(1), fontcolour("black")

form caption("Bassline TB-303") size(615,335), pluginid("T303"), guirefresh(64) style("legacy")
image                bounds(  0,  0,615,335), colour("grey"), shape("sharp"), outlinecolour("white"), line(4)
checkbox bounds( 65,  8,  5,  5), channel("Act1"),  value(0), colour("yellow"), shape("ellipse"), active(0)
checkbox bounds(100,  8,  5,  5), channel("Act2"),  value(0), colour("yellow"), shape("ellipse"), active(0)
checkbox bounds(135,  8,  5,  5), channel("Act3"),  value(0), colour("yellow"), shape("ellipse"), active(0)
checkbox bounds(170,  8,  5,  5), channel("Act4"),  value(0), colour("yellow"), shape("ellipse"), active(0)
checkbox bounds(205,  8,  5,  5), channel("Act5"),  value(0), colour("yellow"), shape("ellipse"), active(0)
checkbox bounds(240,  8,  5,  5), channel("Act6"),  value(0), colour("yellow"), shape("ellipse"), active(0)
checkbox bounds(275,  8,  5,  5), channel("Act7"),  value(0), colour("yellow"), shape("ellipse"), active(0)
checkbox bounds(310,  8,  5,  5), channel("Act8"),  value(0), colour("yellow"), shape("ellipse"), active(0)
checkbox bounds(345,  8,  5,  5), channel("Act9"),  value(0), colour("yellow"), shape("ellipse"), active(0)
checkbox bounds(380,  8,  5,  5), channel("Act10"), value(0), colour("yellow"), shape("ellipse"), active(0)
checkbox bounds(415,  8,  5,  5), channel("Act11"), value(0), colour("yellow"), shape("ellipse"), active(0)
checkbox bounds(450,  8,  5,  5), channel("Act12"), value(0), colour("yellow"), shape("ellipse"), active(0)
checkbox bounds(485,  8,  5,  5), channel("Act13"), value(0), colour("yellow"), shape("ellipse"), active(0)
checkbox bounds(520,  8,  5,  5), channel("Act14"), value(0), colour("yellow"), shape("ellipse"), active(0)
checkbox bounds(555,  8,  5,  5), channel("Act15"), value(0), colour("yellow"), shape("ellipse"), active(0)
checkbox bounds(590,  8,  5,  5), channel("Act16"), value(0), colour("yellow"), shape("ellipse"), active(0)

label    bounds( 10, 43, 40, 12), text("Note"), FontColour("black")
rslider  bounds( 45, 15, 45, 65), text("1"),  channel("Note1"),  range(12, 96, 60, 1, 1), valuetextbox(1), textbox(1), fontcolour("black"), $RSliderStyle
rslider  bounds( 80, 15, 45, 65), text("2"),  channel("Note2"),  range(12, 96, 60, 1, 1), valuetextbox(1), textbox(1), fontcolour("black"), $RSliderStyle
rslider  bounds(115, 15, 45, 65), text("3"),  channel("Note3"),  range(12, 96, 60, 1, 1), valuetextbox(1), textbox(1), fontcolour("black"), $RSliderStyle
rslider  bounds(150, 15, 45, 65), text("4"),  channel("Note4"),  range(12, 96, 60, 1, 1), valuetextbox(1), textbox(1), fontcolour("black"), $RSliderStyle
rslider  bounds(185, 15, 45, 65), text("5"),  channel("Note5"),  range(12, 96, 60, 1, 1), valuetextbox(1), textbox(1), fontcolour("black"), $RSliderStyle
rslider  bounds(220, 15, 45, 65), text("6"),  channel("Note6"),  range(12, 96, 60, 1, 1), valuetextbox(1), textbox(1), fontcolour("black"), $RSliderStyle
rslider  bounds(255, 15, 45, 65), text("7"),  channel("Note7"),  range(12, 96, 60, 1, 1), valuetextbox(1), textbox(1), fontcolour("black"), $RSliderStyle
rslider  bounds(290, 15, 45, 65), text("8"),  channel("Note8"),  range(12, 96, 60, 1, 1), valuetextbox(1), textbox(1), fontcolour("black"), $RSliderStyle
rslider  bounds(325, 15, 45, 65), text("9"),  channel("Note9"),  range(12, 96, 60, 1, 1), valuetextbox(1), textbox(1), fontcolour("black"), $RSliderStyle
rslider  bounds(360, 15, 45, 65), text("10"), channel("Note10"), range(12, 96, 60, 1, 1), valuetextbox(1), textbox(1), fontcolour("black"), $RSliderStyle
rslider  bounds(395, 15, 45, 65), text("11"), channel("Note11"), range(12, 96, 60, 1, 1), valuetextbox(1), textbox(1), fontcolour("black"), $RSliderStyle
rslider  bounds(430, 15, 45, 65), text("12"), channel("Note12"), range(12, 96, 60, 1, 1), valuetextbox(1), textbox(1), fontcolour("black"), $RSliderStyle
rslider  bounds(465, 15, 45, 65), text("13"), channel("Note13"), range(12, 96, 60, 1, 1), valuetextbox(1), textbox(1), fontcolour("black"), $RSliderStyle
rslider  bounds(500, 15, 45, 65), text("14"), channel("Note14"), range(12, 96, 60, 1, 1), valuetextbox(1), textbox(1), fontcolour("black"), $RSliderStyle
rslider  bounds(535, 15, 45, 65), text("15"), channel("Note15"), range(12, 96, 60, 1, 1), valuetextbox(1), textbox(1), fontcolour("black"), $RSliderStyle
rslider  bounds(570, 15, 45, 65), text("16"), channel("Note16"), range(12, 96, 60, 1, 1), valuetextbox(1), textbox(1), fontcolour("black"), $RSliderStyle

label    bounds( 10, 82, 40, 12), text("On/Off"), fontcolour("black"), FontColour("black")
checkbox bounds( 61, 82, 12, 12), channel("On1"),  value(0)
checkbox bounds( 96, 82, 12, 12), channel("On2"),  value(0)
checkbox bounds(131, 82, 12, 12), channel("On3"),  value(0)
checkbox bounds(166, 82, 12, 12), channel("On4"),  value(0)
checkbox bounds(201, 82, 12, 12), channel("On5"),  value(0)
checkbox bounds(236, 82, 12, 12), channel("On6"),  value(0)
checkbox bounds(271, 82, 12, 12), channel("On7"),  value(0)
checkbox bounds(306, 82, 12, 12), channel("On8"),  value(0)
checkbox bounds(341, 82, 12, 12), channel("On9"),  value(0)
checkbox bounds(376, 82, 12, 12), channel("On10"), value(0)
checkbox bounds(411, 82, 12, 12), channel("On11"), value(0)
checkbox bounds(446, 82, 12, 12), channel("On12"), value(0)
checkbox bounds(481, 82, 12, 12), channel("On13"), value(0)
checkbox bounds(516, 82, 12, 12), channel("On14"), value(0)
checkbox bounds(551, 82, 12, 12), channel("On15"), value(0)
checkbox bounds(586, 82, 12, 12), channel("On16"), value(0)

label    bounds( 11,100, 40, 12), text("Hold"), fontcolour("black"), FontColour("black")
checkbox bounds( 61,100, 12, 12), channel("Hold1"),  value(0)
checkbox bounds( 96,100, 12, 12), channel("Hold2"),  value(0)
checkbox bounds(131,100, 12, 12), channel("Hold3"),  value(0)
checkbox bounds(166,100, 12, 12), channel("Hold4"),  value(0)
checkbox bounds(201,100, 12, 12), channel("Hold5"),  value(0)
checkbox bounds(236,100, 12, 12), channel("Hold6"),  value(0)
checkbox bounds(271,100, 12, 12), channel("Hold7"),  value(0)
checkbox bounds(306,100, 12, 12), channel("Hold8"),  value(0)
checkbox bounds(341,100, 12, 12), channel("Hold9"),  value(0)
checkbox bounds(376,100, 12, 12), channel("Hold10"), value(0)
checkbox bounds(411,100, 12, 12), channel("Hold11"), value(0)
checkbox bounds(446,100, 12, 12), channel("Hold12"), value(0)
checkbox bounds(481,100, 12, 12), channel("Hold13"), value(0)
checkbox bounds(516,100, 12, 12), channel("Hold14"), value(0)
checkbox bounds(551,100, 12, 12), channel("Hold15"), value(0)
checkbox bounds(586,100, 12, 12), channel("Hold16"), value(0)

label    bounds( 11,118, 40, 12), text("Accent"), fontcolour("black"), FontColour("black")
checkbox bounds( 61,118, 12, 12), channel("Acc1"),  value(0)
checkbox bounds( 96,118, 12, 12), channel("Acc2"),  value(0)
checkbox bounds(131,118, 12, 12), channel("Acc3"),  value(0)
checkbox bounds(166,118, 12, 12), channel("Acc4"),  value(0)
checkbox bounds(201,118, 12, 12), channel("Acc5"),  value(0)
checkbox bounds(236,118, 12, 12), channel("Acc6"),  value(0)
checkbox bounds(271,118, 12, 12), channel("Acc7"),  value(0)
checkbox bounds(306,118, 12, 12), channel("Acc8"),  value(0)
checkbox bounds(341,118, 12, 12), channel("Acc9"),  value(0)
checkbox bounds(376,118, 12, 12), channel("Acc10"), value(0)
checkbox bounds(411,118, 12, 12), channel("Acc11"), value(0)
checkbox bounds(446,118, 12, 12), channel("Acc12"), value(0)
checkbox bounds(481,118, 12, 12), channel("Acc13"), value(0)
checkbox bounds(516,118, 12, 12), channel("Acc14"), value(0)
checkbox bounds(551,118, 12, 12), channel("Acc15"), value(0)
checkbox bounds(586,118, 12, 12), channel("Acc16"), value(0)

button   bounds( 10,150, 70, 25), fontcolour:0(50,50,50), fontcolour:1(205,255,205), colour:0(0,10,0), colour:1(0,150,0), text("Play","Play"), channel("Play"), latched(1), radiogroup(1), value(1), identchannel("PlayButton")
button   bounds( 10,180, 70, 25), fontcolour:0(50,50,50), fontcolour:1(255,205,205), colour:0(10,0,0), colour:1(150,0,0), text("Stop","Stop"), channel("Stop"), latched(1), radiogroup(1), identchannel("StopButton")

rslider  bounds( 80,140, 60, 80), text("Cutoff"),  channel("CfBase"),  range(0,1,0.3),              $RSliderStyle
rslider  bounds(135,140, 60, 80), text("Env.Mod"), channel("CfEnv"),   range(-1,1.00, 0.38),        $RSliderStyle
rslider  bounds(190,140, 60, 80), text("Follow"),  channel("CfFol"),   range(0,1.00, 0),            $RSliderStyle
rslider  bounds(245,140, 60, 80), text("Res."),    channel("Res"),     range(0,0.98,0.45),          $RSliderStyle
rslider  bounds(300,140, 60, 80), text("Attack"),  channel("Attack"),  range(0,1,0.01,0.5),         $RSliderStyle
rslider  bounds(355,140, 60, 80), text("Decay"),   channel("Decay"),   range(0.01,5,0.5,0.5,0.001), $RSliderStyle
rslider  bounds(410,140, 60, 80), text("Accent"),  channel("Accent"),  range(0, 1.00, .5),          $RSliderStyle

image                bounds(140,222,215,81), colour(155,155,155), shape("sharp")

rslider  bounds( 80,220, 60, 80), text("Gliss"),     channel("NoteGliss"),     range(0, 0.03, 0.01,0.75,0.001),        $RSliderStyle
rslider  bounds(135,220, 60, 80), text("BPF.CF."),   channel("BPF_StaticCF"),  range(50,3000,100,0.5,1),        $RSliderStyle
rslider  bounds(190,220, 60, 80), text("BPF.BW."),   channel("BPF_StaticBW"),  range(0.1,99,1,0.5,0.01),        $RSliderStyle
rslider  bounds(245,220, 60, 80), text("BPF.Bal."),  channel("BPF_StaticBal"), range(0,2,1,1,1),        $RSliderStyle
rslider  bounds(300,220, 60, 80), text("BPF.Mix"),   channel("BPF_StaticMix"), range(0,1,0.3),        $RSliderStyle
rslider  bounds(355,220, 60, 80), text("Dist."),     channel("Dist"), range(0,1.00, 0,1,0.001), textcolour("black"), $RSliderStyle
rslider  bounds(410,220, 60, 80), text("Dist.LPF."), channel("Dist_LPF"),     range(50,20000,4000,0.5,1), identchannel("Dist_LPF_ID"),       $RSliderStyle

rslider  bounds(470,220, 70, 90), text("Tempo"),   channel("Tempo"),   range(1, 500, 110, 1, 1), identchannel("TempoID"), $RSliderStyle
rslider  bounds(535,220, 70, 90), text("Vol."),    channel("Vol"),     range(0, 5.00, 1),        $RSliderStyle

label      bounds(480,146, 90, 12), text("Phrase Length:"), fontcolour("black")                                                                       
nslider  bounds(570,145, 30, 15), channel("PhrLen"),       range(1,16,16,1,1)
button     bounds(480,165, 60, 15), text("Reset"),   channel("Reset"),  value(0), latched(0)
button     bounds(540,165, 60, 15), text("Random"),  channel("Rnd"),    value(0), latched(0)
button     bounds(480,185, 60, 15), text("-semi"),   channel("SemiDn"), value(0), latched(0)
button     bounds(540,185, 60, 15), text("+semi"),   channel("SemiUp"), value(0), latched(0)
button     bounds(480,205, 60, 15), text("-oct"),    channel("OctDn"),  value(0), latched(0)
button     bounds(540,205, 60, 15), text("+oct"),    channel("OctUp"),  value(0), latched(0)

label    bounds( 10,207, 70, 12), text("Filter"), fontcolour("black")                                                                       
combobox bounds( 10,220, 70, 20), channel("FiltType"), value(2), text("Moog","LPF18"), fontcolour("white")
label    bounds( 10,247, 70, 12), text("Waveform"), fontcolour("black")                                                                       
combobox bounds( 10,260, 70, 20), channel("Waveform"), value(1), text("Saw","Square","Triangle","PWM","Noise"), fontcolour("white")
hslider  bounds( 10,308,270, 25), text("P.W."),    channel("pw"),      range(0.01,0.99, 0.25), identchannel("pwID"), visible(0), trackercolour(255,255,255), colour(  0, 55,100), textcolour(0,0,0), outlinecolour(50,50,50)
checkbox bounds(280,313, 45, 13), text("Sub."), channel("sub"), value(0), fontcolour("black")
button   bounds(330,310,100, 20), text("Clock: Internal","Clock: External"), channel("ClockSource"), value(0)                                                   
label    bounds(435,321,165, 12), text("Author: Iain McCurdy |2012|"), fontcolour("black")
                                                                       
</Cabbage>                                                             
                                                                       
<CsoundSynthesizer>                                                    
                                                                       
<CsOptions>                                                            
-dm0 -n
</CsOptions>                                                           
                                                                       
<CsInstruments>                                                        
                                                                       
sr 		= 	44100	;SAMPLE RATE                           
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (2=STEREO)         
0dbfs		=	1                                              
		seed	0                                              

giAmpScl	ftgen	0,0,128,-16,1,127,-2,0.2	; NOTE TO AMPLITUDE MAPPING. USED TO ATTENUATE AMPLITUDE OF HIGHER NOTES.

;Author: Iain McCurdy (2012)                                           
                                                                       
opcode	resonsr,a,akki
	asig,kcf,kbw,iscal	xin
		setksmps	1
	acf	interp	kcf
	kcf	downsamp	acf
	abw	interp	kbw
	kbw	downsamp	abw
	asig      reson   asig, kcf, kbw,iscal
		xout	asig
endop

instr	1	;BASSLINE INSTRUMENT
	kporttime	linseg	0,0.001,0.01	;PORTAMENTO TIME RAMPS UP QUICKLY FROM ZERO TO A HELD VALUE
	;READ IN WIDGETS...
	;gkOnOff		chnget	"OnOff"
	gkPlay		chnget	"Play"
	gkStop		chnget	"Stop"
	if trigger(gkPlay,0.5,0)==1 then
	 kOnOff	=	1
	elseif trigger(gkStop,0.5,0)==1 then
	 kOnOff	=	0
	endif
	gkOnOff	init	0

	gkNote1		chnget	"Note1"
	gkNote2		chnget	"Note2"
	gkNote3		chnget	"Note3"
	gkNote4		chnget	"Note4"
	gkNote5		chnget	"Note5"
	gkNote6		chnget	"Note6"
	gkNote7		chnget	"Note7"
	gkNote8		chnget	"Note8"
	gkNote9		chnget	"Note9"
	gkNote10	chnget	"Note10"
	gkNote11	chnget	"Note11"
	gkNote12	chnget	"Note12"
	gkNote13	chnget	"Note13"
	gkNote14	chnget	"Note14"
	gkNote15	chnget	"Note15"
	gkNote16	chnget	"Note16"
	gkOn1		chnget	"On1"
	gkOn2		chnget	"On2"
	gkOn3		chnget	"On3"
	gkOn4		chnget	"On4"
	gkOn5		chnget	"On5"
	gkOn6		chnget	"On6"
	gkOn7		chnget	"On7"
	gkOn8		chnget	"On8"
	gkOn9		chnget	"On9"
	gkOn10		chnget	"On10"
	gkOn11		chnget	"On11"
	gkOn12		chnget	"On12"
	gkOn13		chnget	"On13"
	gkOn14		chnget	"On14"
	gkOn15		chnget	"On15"
	gkOn16		chnget	"On16"
	gkHold1		chnget	"Hold1"
	gkHold2		chnget	"Hold2"
	gkHold3		chnget	"Hold3"
	gkHold4		chnget	"Hold4"
	gkHold5		chnget	"Hold5"
	gkHold6		chnget	"Hold6"
	gkHold7		chnget	"Hold7"
	gkHold8		chnget	"Hold8"
	gkHold9		chnget	"Hold9"
	gkHold10	chnget	"Hold10"
	gkHold11	chnget	"Hold11"
	gkHold12	chnget	"Hold12"
	gkHold13	chnget	"Hold13"
	gkHold14	chnget	"Hold14"
	gkHold15	chnget	"Hold15"
	gkHold16	chnget	"Hold16"
	gkAcc1	chnget	"Acc1"
	gkAcc2	chnget	"Acc2"
	gkAcc3	chnget	"Acc3"
	gkAcc4	chnget	"Acc4"
	gkAcc5	chnget	"Acc5"
	gkAcc6	chnget	"Acc6"
	gkAcc7	chnget	"Acc7"
	gkAcc8	chnget	"Acc8"
	gkAcc9	chnget	"Acc9"
	gkAcc10	chnget	"Acc10"
	gkAcc11	chnget	"Acc11"
	gkAcc12	chnget	"Acc12"
	gkAcc13	chnget	"Acc13"
	gkAcc14	chnget	"Acc14"
	gkAcc15	chnget	"Acc15"
	gkAcc16	chnget	"Acc16"
	gkVol	chnget	"Vol"
	gkCfBase	chnget	"CfBase"
	gkCfBase	portk	gkCfBase,kporttime*5
	gkCfEnv	chnget	"CfEnv"
	gkCfEnv	portk	gkCfEnv,kporttime*5
	gkCfFol	chnget	"CfFol"
	gkFiltType	chnget	"FiltType"
	gkRes	chnget	"Res"
	gkDist	chnget	"Dist"
	gkDecay	chnget	"Decay"
	gkAccent	chnget	"Accent"
	gkNoteGliss	chnget	"NoteGliss"
	gkDist_LPF	chnget	"Dist_LPF"	
	gkBPF_StaticCF	chnget	"BPF_StaticCF"	
	gkBPF_StaticBW	chnget	"BPF_StaticBW"	
	gkBPF_StaticBal	chnget	"BPF_StaticBal"	
	gkBPF_StaticMix	chnget	"BPF_StaticMix"	
	gkAttack	chnget	"Attack"	
	gkPhrLen	chnget	"PhrLen"	
	gkWaveform	chnget	"Waveform"
	kpw	chnget	"pw"
	ksub	chnget	"sub"
	gkReset	chnget	"Reset"
	gkRnd	chnget	"Rnd"
	kSemiDn	chnget	"SemiDn"
	kSemiUp	chnget	"SemiUp"
	kOctDn	chnget	"OctDn"
	kOctUp	chnget	"OctUp"
	kClockSource	chnget	"ClockSource"

	/* SHOW/HIDE DISTORTION FILTER CONTROL */
	if trigger(gkDist,0.0005,2)==1 then
	 kvis	=	gkDist>0?1:0
	 chnset	sprintfk("visible(%d)",kvis),"Dist_LPF_ID"
	endif

	/* SHOW/HIDE PULSE WIDTH CONTROL AS REQUIRED */
	if changed(gkWaveform)==1 then
	 kvis	=	gkWaveform==4?1:0
	 chnset	sprintfk("visible(%d)",kvis), "pwID"
	endif
	
	/* SET TEMPO AND PLAY/STOP ACCORDING TO CLOCK SOURCE */
	if kClockSource==0 then
	 gkTempo	chnget	"Tempo"
	 gkOnOff	=	kOnOff
	else
	 gkTempo	chnget	"HOST_BPM"
	 gkTempo	limit	gkTempo,1,2000
	 gkOnOff	chnget	"IS_PLAYING"
	endif
	
	/* SHOW/HIDE TEMPO CONTROL */
	if changed(kClockSource)==1||timeinstk()==1 then
	 chnset	sprintfk("visible(%d)",1-kClockSource),"TempoID"
	endif
	
	kStop	trigger	gkOnOff,0.5,1	; IS LOOP PLAYING TURNED OFF...
	if kStop==1 then
	 chnset k(0),"Act1"
	 chnset k(0),"Act2"
	 chnset k(0),"Act3"
	 chnset k(0),"Act4"
	 chnset k(0),"Act5"
	 chnset k(0),"Act6"
	 chnset k(0),"Act7"
	 chnset k(0),"Act8"
	 chnset k(0),"Act9"
	 chnset k(0),"Act10"
	 chnset k(0),"Act11"
	 chnset k(0),"Act12"
	 chnset k(0),"Act13"
	 chnset k(0),"Act14"
	 chnset k(0),"Act15"
	 chnset k(0),"Act16"
	 reinit RESET_LOOP
	endif
	RESET_LOOP:

	if gkOnOff==0 kgoto SKIP
	kPhFreq   =            gkTempo/240	;FREQUENCY WITH WHICH TO REPEAT THE ENTIRE PHRASE
	kBtFreq   =            gkTempo/15	;FREQUENCY OF EACH 1/16TH NOTE
	kNewNote	metro	kBtFreq		;GENERATES A TRIGGER FOR EACH BEAT
	
	; FORCED RETRIGGERING OF SEQUENCE
	kStep	init	1			; INITIAL STEP VALUE
	if kNewNote==1 then			; IF A NEW NOTE TRIGGER HAS BEEN GENERATED... 
	 kStep	+=	1			; INCREMENT STEP VALUE
	endif
	
	if kStep==(gkPhrLen+1) then		; IF END OF SEQUENCE (+1) HAS BEEN REACHED...
	 kReTrigPhr	=	1		; ...GENERATE A 'RESTART SEQUENCE' TRIGGER
	 kStep		=	1		; AND RESET STEP VALUE TO THE BEGINNING OF THE SEQUENCE
	else
	 kReTrigPhr	=	0		; ...OTHERWISE NO TRIGGER
	endif	 
	
	scoreline "i 100 0 0", kReTrigPhr	; CALL INSTRUMENT TO CLEAR ALL INDICATOR WHENEVER A SEQUENCE IS RETRIGGERED (PREVENTS STUCK INDICATORS)
	
	;ENVELOPES WITH HELD SEGMENTS
	;                      freq     trig      ph  NOTE:1 (dur) 2            3            4            5            6            7            8            9            10            11            12            13            14            15            16             DUMMY
	kNoteLoop lpshold      kPhFreq, kReTrigPhr,        0,  gkNote1, 1,  gkNote2, 1,  gkNote3, 1,  gkNote4, 1,  gkNote5, 1,  gkNote6, 1,  gkNote7, 1,  gkNote8, 1,  gkNote9, 1,  gkNote10, 1,  gkNote11, 1,  gkNote12, 1,  gkNote13, 1,  gkNote4,  1,  gkNote15, 1,  gkNote16,   1  ;,gkNote1	;NEED AN EXTRA 'DUMMY' VALUE
	kOn       lpshold      kPhFreq, kReTrigPhr,        0,  gkOn1,   1,  gkOn2,   1,  gkOn3,   1,  gkOn4,   1,  gkOn5,   1,  gkOn6,   1,  gkOn7,   1,  gkOn8,   1,  gkOn9,   1,  gkOn10,   1,  gkOn11,   1,  gkOn12,   1,  gkOn13,   1,  gkOn14,   1,  gkOn15,   1,  gkOn16,     1  ;,1		;NEED AN EXTRA 'DUMMY' VALUE
	kAcc      lpshold      kPhFreq, kReTrigPhr,        0,  gkAcc1,  1,  gkAcc2,  1,  gkAcc3,  1,  gkAcc4,  1,  gkAcc5,  1,  gkAcc6,  1,  gkAcc7,  1,  gkAcc8,  1,  gkAcc9,  1,  gkAcc10,  1,  gkAcc11,  1,  gkAcc12,  1,  gkAcc13,  1,  gkAcc14,  1,  gkAcc15,  1,  gkAcc16,    1  ;,1		;NEED AN EXTRA 'DUMMY' VALUE
	kHoldLoop lpshold      kPhFreq, kReTrigPhr,        0,  gkHold1, 1,  gkHold2, 1,  gkHold3, 1,  gkHold4, 1,  gkHold5, 1,  gkHold6, 1,  gkHold7, 1,  gkHold8, 1,  gkHold9, 1,  gkHold10, 1,  gkHold11, 1,  gkHold12, 1,  gkHold13, 1,  gkHold14, 1,  gkHold15, 1,  gkHold16,   1  ;,0		;NEED AN EXTRA 'DUMMY' VALUE
	
	kNewOn	trigger	kOn,0.5,0			; SENSE A NOTE ON FOLLOWING A NOTE OFF
	kAcc	portk	kAcc*gkAccent,kporttime		; SCALE ACCENT USING ON-SCREEN KNOB AND SMOOTH CHANGES IN ACCENT VALUE TO PREVENT CLICKS
	
	;IGNORE PITCH VALUES AND HOLD VALUES FOR 'OFF' NOTES
	kNote	init	i(gkNote1)
	if kOn==1 then			;IF THIS IS AN 'ON' NOTE...
	 kNote = kNoteLoop		;USE NOTE LOOP VALUE FOR PCH
	 kHold = kHoldLoop		;USE HOLD LOOP VALUE FOR HOLD
	endif	
	
	kHoldDel  vdel_k       kHold, 1/(kBtFreq*2), 1	;OFFSET HOLD SO THAT ITS VALUE WILL OVERLAP THE NEXT NOTE
	kNote      portk        kNote, gkNoteGliss*kHoldDel*kOn	;APPLY PORTAMENTO TO PITCH CHANGES - IF NOTE IS NOT HELD, NO PORTAMENTO WILL BE APPLIED
		
	/* FILTER ENVELOPE */
	kFiltRetrig	=	(1-kHoldDel) * kNewNote * kOn ; + kOnTrig
	kFundOct	=	octmidinn(kNote)	; FUNDEMENTAL NOTE IN OCT FORMAT
		
	/* FILTER CUTOFF ENVELOPE */
	/* KEY FOLLOWING */
	kCfBase1	scale	gkCfBase,8,-2
	kCfEnv1		scale	(gkCfEnv*0.5)+0.5,8,-8
	;                       freq    trig                ph value              time      value                               t        v                  t                      v                  t
	kCfOct1	  loopseg	1/3600, kFiltRetrig+kNewOn, 0, kFundOct+kCfBase1, gkAttack, kFundOct+kCfBase1+kCfEnv1+(kAcc*2), gkDecay, kFundOct+kCfBase1, 3600-gkDecay-gkAttack, kFundOct+kCfBase1, 0
	/* NO KEY FOLLOW */
	;                       freq    trig                ph v                          t        v         t             v         t(?)
	kCfBase2	scale	gkCfBase,14,4
	kCfEnv2		scale	(gkCfEnv*0.5)+0.5,8,-8
	kCfOct2	  loopseg	1/3600, kFiltRetrig+kNewOn, 0, kCfBase2, gkAttack, kCfBase2+kCfEnv2+(kAcc*2), gkDecay, kCfBase2, 3600-gkAttack-gkDecay, kCfBase2, 0
	/* MIX KEY FOLLOWING AND NO KEY FOLLOWING */
	kCfOct	ntrpol	kCfOct2,kCfOct1,gkCfFol
	kCfOct    limit        kCfOct, 4, 14	;LIMIT THE CUTOFF FREQUENCY TO BE WITHIN SENSIBLE LIMITS


	/* AMPLITUDE ENVELOPE - SEPARATES NOTES THAT ARE NOT HELD */
	katt	=	0.02 * (60/gkTempo)
	kdec	=	0.02 * (60/gkTempo)
	;                      freq     trig  ph   v   tim   v   t                      v   t    v  t(?)
	kAmpEnv   loopseg      kBtFreq, 0,    0,   0,  katt, 1,  (1/kBtFreq)-katt-kdec, 1,  kdec,0, 0	;SUSTAIN SEGMENT DURATION (AND THEREFORE ATTACK AND DECAY SEGMENT DURATIONS) ARE DEPENDENT UPON TEMPO
	kAmp	=	(kHoldDel==1?1:kAmpEnv)
	
	/* AUDIO OSCILLATOR */
	kWavTrig  changed      gkWaveform		;GENERATE A 'BANG' IF WAVEFORM SELECTOR CHANGES
	if kWavTrig=1 then				;IF A 'BANG' HAS BEEN GENERATED...
	 reinit REINIT_VCO				;BEGIN A REINITIALISATION PASS FROM THE LABEL 'REINIT_VCO'
	endif
	REINIT_VCO:							;A LABEL
	if     i(gkWaveform)==1 then	;SAWTOOTH
	 imode	=	0
	elseif i(gkWaveform)==2 then	;SQUARE
	 imode	=	10
	elseif i(gkWaveform)==3 then	;TRIANGLE
	 imode	=	12
	elseif i(gkWaveform)==4 then	;PWM
	 imode	=	2
	elseif i(gkWaveform)==5 then	;NOISE
	 anoise	pinkish	1
	 aSig	resonsr	anoise,cpsmidinn(kNote),cpsmidinn(kNote)*0.005,1
	 if ksub==1 then							;CONDITIONALLY ADD IN SUB-OCTAVE OSCILLATOR
	  aSub      resonsr	anoise,cpsmidinn(kNote-12),cpsmidinn(kNote-12)*0.005,1
	  aSig	+=		aSub					;MIX IN SUB-OSCILLATOR	
	 endif
	 aSig	=	aSig*20
	 goto SKIP_VCO2
	endif
	kpw	portk	kpw,kporttime
	aSig      vco2         0.2, cpsmidinn(kNote), imode, kpw	;GENERATE AUDIO USING VCO OSCILLATOR
	if ksub==1 then							;CONDITIONALLY ADD IN SUB-OCTAVE OSCILLATOR
	 aSub      vco2         0.2, cpsmidinn(kNote-12), imode, kpw	;GENERATE AUDIO USING VCO OSCILLATOR (1 OCTAVE LOWER)
	 aSig	+=		aSub					;MIX IN SUB-OSCILLATOR	
	endif
	SKIP_VCO2:
	rireturn							;RETURN FROM INITIALIZATION PASS TO PERFORMANCE PASSES

	kres	limit	gkRes+(kAcc*0.4),0,0.98				;PREVENT EXCESSIVE RESONANCE THAT COULD RESULT FROM THE COMBINATION OF RESONANCE SETTING AND ACCENTING
		
	/* FILTER */
	if gkFiltType==1 then						;MOOGLADDER
	 aSig	moogladder	aSig,cpsoct(kCfOct),kres
	else								;LPF18
 	 aSig	lpf18	aSig,a(cpsoct(kCfOct)),kres, (gkDist^2)*20
	 iSclGain2  ftgentmp     0, 0, 1024, -16, 1, 1024,   -8, 0.1	;RESCALING CURVE FOR GAIN COMPENSATION
	 if gkDist>0 then
	  kGain     table        gkDist, iSclGain2, 1			;READ GAIN VALUE FROM RESCALING CURVE
	  aSig	*=	kGain
	  aSig	butlp	aSig, gkDist_LPF				;TONE WHEN DISTORTION IS ACTIVE
	 endif
	endif
	
	/* STATIC BANDPASS FILTER (USED TO FATTEN THE OVERALL SOUND) */
	if changed(gkBPF_StaticBal)==1 then
	 reinit UPDATE_RESONZ
	endif
	UPDATE_RESONZ:
	af1	resonz	aSig,gkBPF_StaticCF,gkBPF_StaticCF*gkBPF_StaticBW,i(gkBPF_StaticBal)
	rireturn
	aSig	ntrpol	aSig,af1*5,gkBPF_StaticMix  

	/* DISTORTION */
	if gkFiltType==1 then	; (moogladder)
	 if gkDist==0 kgoto SKIP_DISTORTION 
	 iSclLimit ftgentmp     0, 0, 1024, -16, 1, 1024,  -8, 0.01	;RESCALING CURVE FOR CLIP 'LIMIT' PARAMETER
	 iSclGain  ftgentmp     0, 0, 1024, -16, 1, 1024,   2, 10	;RESCALING CURVE FOR GAIN COMPENSATION
	 kLimit    table        gkDist, iSclLimit, 1			;READ LIMIT VALUE FROM RESCALING CURVE
	 kGain     table        gkDist, iSclGain, 1			;READ GAIN VALUE FROM RESCALING CURVE
	 kTrigDist changed      kLimit					;IF LIMIT VALUE CHANGES GENERATE A 'BANG'
	 if kTrigDist=1 then						;IF A 'BANG' HAS BEEN GENERATED...
	 	reinit REINIT_CLIP					;BEGIN A REINITIALIZATION PASS FROM LABEL 'REINIT_CLIP'
	 endif
	 REINIT_CLIP:
	 aSig      clip         aSig*(1+gkDist), 0, i(kLimit)			;CLIP DISTORT AUDIO SIGNAL

	 rireturn							;
	 aSig      =            aSig * kGain				;COMPENSATE FOR GAIN LOSS FROM 'CLIP' PROCESSING
	 aSig	butlp	aSig, gkDist_LPF				;TONE WHEN DISTORTION IS ACTIVE
	 SKIP_DISTORTION:
	endif
		
	kOn	port	kOn, 0.006					;SMOOTH CHANGES IN ON OFF SWITCHING
	kAmpScl	tablei	kNote,giAmpScl					;NOTE TO AMPLITUDE MAPPING. USED TO ATTENUATE AMPLITUDE OF HIGHER NOTES.
	aAmp	interp	((kAmp*kOn)*((kAcc*0.7)+1)*gkVol*kAmpScl)	;COMBINE ALL FACTORS THAT CONTRIBUTE TO AMPLITUDE AND INTERPOLATE AND CREATE AN A-RATE VERSION OF THIS RESULT (TO PREVENT QUANTISATION NOISE) 
	aSig	=	aSig * aAmp * 3					;SCALE AUDIO USING AMPLITUDE CONTROL FUNCTION
		outs	aSig, aSig     					;AUDIO SENT TO OUTPUT, APPLY AMP. ENVELOPE, VOLUME CONTROL AND NOTE ON/OFF STATUS
	SKIP:
	
	/* RESET SEQUENCE TO BLANK */
	ktrig	trigger	gkReset,0.5,0
	if ktrig==1 then
	 chnset	k(60),"Note1"
	 chnset	k(60),"Note2"
	 chnset	k(60),"Note3"
	 chnset	k(60),"Note4"
	 chnset	k(60),"Note5"
	 chnset	k(60),"Note6"
	 chnset	k(60),"Note7"
	 chnset	k(60),"Note8"
	 chnset	k(60),"Note9"
	 chnset	k(60),"Note10"
	 chnset	k(60),"Note11"
	 chnset	k(60),"Note12"
	 chnset	k(60),"Note13"
	 chnset	k(60),"Note14"
	 chnset	k(60),"Note15"
	 chnset	k(60),"Note16"
	 chnset	k(0),"On1"
	 chnset	k(0),"On2"
	 chnset	k(0),"On3"
	 chnset	k(0),"On4"
	 chnset	k(0),"On5"
	 chnset	k(0),"On6"
	 chnset	k(0),"On7"
	 chnset	k(0),"On8"
	 chnset	k(0),"On9"
	 chnset	k(0),"On10"
	 chnset	k(0),"On11"
	 chnset	k(0),"On12"
	 chnset	k(0),"On13"
	 chnset	k(0),"On14"
	 chnset	k(0),"On15"
	 chnset	k(0),"On16"
	 chnset	k(0),"Hold1"
	 chnset	k(0),"Hold2"
	 chnset	k(0),"Hold3"
	 chnset	k(0),"Hold4"
	 chnset	k(0),"Hold5"
	 chnset	k(0),"Hold6"
	 chnset	k(0),"Hold7"
	 chnset	k(0),"Hold8"
	 chnset	k(0),"Hold9"
	 chnset	k(0),"Hold10"
	 chnset	k(0),"Hold11"
	 chnset	k(0),"Hold12"
	 chnset	k(0),"Hold13"
	 chnset	k(0),"Hold14"
	 chnset	k(0),"Hold15"
	 chnset	k(0),"Hold16"
	 chnset	k(0),"Acc1"
	 chnset	k(0),"Acc2"
	 chnset	k(0),"Acc3"
	 chnset	k(0),"Acc4"
	 chnset	k(0),"Acc5"
	 chnset	k(0),"Acc6"
	 chnset	k(0),"Acc7"
	 chnset	k(0),"Acc8"
	 chnset	k(0),"Acc9"
	 chnset	k(0),"Acc10"
	 chnset	k(0),"Acc11"
	 chnset	k(0),"Acc12"
	 chnset	k(0),"Acc13"
	 chnset	k(0),"Acc14"
	 chnset	k(0),"Acc15"
	 chnset	k(0),"Acc16"
	endif

	/* RANDOMISE SEQUENCE */
	ktrig	trigger	gkRnd,0.5,0	
	if ktrig==1 then
#define	RANDOM_STEP(N)
	 #
	 kval	random	24,72.999
	 chnset	int(kval),"Note$N"
	 kval	random	0,1.999
	 chnset	int(kval),"On$N"
	 kval	random	0,1.999
	 chnset	int(kval),"Hold$N"
	 kval	random	0,1.999
	 chnset	int(kval),"Acc$N"
	 #
	 $RANDOM_STEP(1)
	 $RANDOM_STEP(2)
	 $RANDOM_STEP(3)
	 $RANDOM_STEP(4)
	 $RANDOM_STEP(5)
	 $RANDOM_STEP(6)
	 $RANDOM_STEP(7)
	 $RANDOM_STEP(8)
	 $RANDOM_STEP(9)
	 $RANDOM_STEP(10)
	 $RANDOM_STEP(11)
	 $RANDOM_STEP(12)
	 $RANDOM_STEP(13)
	 $RANDOM_STEP(14)
	 $RANDOM_STEP(15)
	 $RANDOM_STEP(16)
	 
	endif
	
	/* PROGRESS INDICATORS */
	kStepChange	changed	kStep
	if kStepChange==1 then
	 if kStep==1 then
	  chnset k(1),"Act1"
	  chnset k(0),"Act16"
	 elseif kStep==2 then
	  chnset k(1),"Act2"
	  chnset k(0),"Act1"
	 elseif kStep==3 then
	  chnset k(1),"Act3"
	  chnset k(0),"Act2"
	 elseif kStep==4 then
	  chnset k(1),"Act4"
	  chnset k(0),"Act3"
	 elseif kStep==5 then
	  chnset k(1),"Act5"
	  chnset k(0),"Act4"
	 elseif kStep==6 then
	  chnset k(1),"Act6"
	  chnset k(0),"Act5"
	 elseif kStep==7 then
	  chnset k(1),"Act7"
	  chnset k(0),"Act6"
	 elseif kStep==8 then
	  chnset k(1),"Act8"
	  chnset k(0),"Act7"
	 elseif kStep==9 then
	  chnset k(1),"Act9"
	  chnset k(0),"Act8"
	 elseif kStep==10 then
	  chnset k(1),"Act10"
	  chnset k(0),"Act9"
	 elseif kStep==11 then
	  chnset k(1),"Act11"
	  chnset k(0),"Act10"
	 elseif kStep==12 then
	  chnset k(1),"Act12"
	  chnset k(0),"Act11"
	 elseif kStep==13 then
	  chnset k(1),"Act13"
	  chnset k(0),"Act12"
	 elseif kStep==14 then
	  chnset k(1),"Act14"
	  chnset k(0),"Act13"
	 elseif kStep==15 then
	  chnset k(1),"Act15"
	  chnset k(0),"Act14"
	 elseif kStep==16 then
	  chnset k(1),"Act16"
	  chnset k(0),"Act15"
	 endif
	endif	

	/* TRANSPOSE */
	ktrig1	trigger	kSemiDn,0.5,0
	ktrig2	trigger	kSemiUp,0.5,0
	ktrig3	trigger	kOctDn,0.5,0
	ktrig4	trigger	kOctUp,0.5,0
	if ktrig1+ktrig2+ktrig3+ktrig4==1 then
#define	TRANSPOSE(N)
	 #
	 kval	limit	gkNote$N+kInt,12,96
	 chnset	kval,"Note$N"
	 #
	 if ktrig1==1 then
	  kInt	=	-1
	 elseif ktrig2==1 then
	  kInt	=	1
	 elseif ktrig3==1 then
	  kInt	=	-12
	 elseif ktrig4==1 then
	  kInt	=	12
	 endif	  
	 $TRANSPOSE(1)
	 $TRANSPOSE(2)
	 $TRANSPOSE(3)
	 $TRANSPOSE(4)
	 $TRANSPOSE(5)
	 $TRANSPOSE(6)
	 $TRANSPOSE(7)
	 $TRANSPOSE(8)
	 $TRANSPOSE(9)
	 $TRANSPOSE(10)
	 $TRANSPOSE(11)
	 $TRANSPOSE(12)
	 $TRANSPOSE(13)
	 $TRANSPOSE(14)
	 $TRANSPOSE(15)
	 $TRANSPOSE(16)
	endif
endin

instr	99	; trigger a random sequence at start up
	/* RANDOMISE SEQUENCE */
#define	RANDOM_STEP(N)
	 #
	 kval	random	24,72.999
	 chnset	int(kval),"Note$N"
	 kval	random	0,1.999
	 chnset	int(kval),"On$N"
	 kval	random	0,1.999
	 chnset	int(kval),"Hold$N"
	 kval	random	0,1.999
	 chnset	int(kval),"Acc$N"
	 #
	 $RANDOM_STEP(1)
	 $RANDOM_STEP(2)
	 $RANDOM_STEP(3)
	 $RANDOM_STEP(4)
	 $RANDOM_STEP(5)
	 $RANDOM_STEP(6)
	 $RANDOM_STEP(7)
	 $RANDOM_STEP(8)
	 $RANDOM_STEP(9)
	 $RANDOM_STEP(10)
	 $RANDOM_STEP(11)
	 $RANDOM_STEP(12)
	 $RANDOM_STEP(13)
	 $RANDOM_STEP(14)
	 $RANDOM_STEP(15)
	 $RANDOM_STEP(16)
 ;turnoff
endin

instr	100	;CLEAR ALL INDICATORS EXCEPT THE FIRST
	chnset	0,"Act2"
	chnset	0,"Act3"
	chnset	0,"Act4"
	chnset	0,"Act5"
	chnset	0,"Act6"
	chnset	0,"Act7"
	chnset	0,"Act8"
	chnset	0,"Act9"
	chnset	0,"Act10"
	chnset	0,"Act11"
	chnset	0,"Act12"
	chnset	0,"Act13"
	chnset	0,"Act14"
	chnset	0,"Act15"
	chnset	0,"Act16"
endin

</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
i 99 0 0.1		; trigger a random sequence
</CsScore>

</CsoundSynthesizer>
Choir.csd

Note velocity is interpretted as attack time (along with a slight interpretation as amplitude)
If N.Voices (number of voices) is set to '1' chorussing effect is bypassed, instead a fundemental modulation mechanism is enabled
Vibrato/tremolo depth also controllable using midi controller 1 (mod. wheel), midi channel 1
Vowel is controllable using midi controller 2, midi channel 1
N.Voices value is not strictly speaking accurate: 	1 = 1 voice
							2 = 2 voices
							3 = 4 voices
							4 = 6 voices
							5 = 8 voices, this is on account of how the mechanism implements a stereo effect

<Cabbage>
form caption("Choir") size(770, 315), pluginid("choi") style("legacy")

; main container
image bounds(  0,  0,770, 315), colour(255,100,  0, 40), shape("rounded"), outlinecolour("white"), outlinethickness(3)
; horizontal stripes
;image bounds(  0, 40,770,  75), colour(100,100,  0, 60), shape("sharp")
;image bounds(  0,130,770,  35), colour(  0,  0,255, 60), shape("sharp")
; vertical stripes
;image bounds(310,  0, 30, 335), colour(  5,255,  0, 60), shape("sharp")
;image bounds(370,  0, 80, 335), colour(255,  0,200, 60), shape("sharp")
;image bounds(490,  0, 60, 335), colour(  0,255,200, 60), shape("sharp")
;image bounds(560,  0, 40, 335), colour(100, 55,200, 60), shape("sharp")
;image bounds(620,  0, 20, 335), colour(255, 55,  0, 60), shape("sharp")
;image bounds(660,  0, 90, 335), colour(  5,255,100, 60), shape("sharp")

xypad    bounds( 10, 10,250,210), channel("vowel", "oct"), text("X:Vowel Y:Oct.Div."), rangex(0, 1, 0), rangey(0, 4, 0)
combobox bounds(265, 10,110, 25), channel("voice"), value(5), text("Bass", "Tenor", "Countertenor", "Alto", "Soprano")
button   bounds(265, 40,110, 25), text("polyphonic","monophonic"), channel("monopoly"), value(1)
rslider  bounds(385, 10, 60, 60), text("Leg.Time"),     channel("LegTim"),  range(0.005, 0.3, 0.025, 0.5, 0.005),colour("green"), trackercolour("white")
rslider  bounds(445, 10, 60, 60), text("Vowel"),        channel("vowel"),   range(0, 1.00, 0),       colour("green"),    trackercolour("white"),midCtrl(1, 2)
rslider  bounds(505, 10, 60, 60), text("Level"),        channel("lev"),     range(0, 1.00, 0.6),     colour("green"),    trackercolour("white")
rslider  bounds(265, 80, 60, 60), text("Vib.Dep."),     channel("vibdep"),  range(0, 2.00, 0.35),    colour("tomato"),   trackercolour("white"),midCtrl(1, 1)
rslider  bounds(325, 80, 60, 60), text("Trem.Dep."),    channel("trmdep"),  range(0, 1.00, 0.2),     colour("tomato"),   trackercolour("white"),midCtrl(1, 1)
rslider  bounds(385, 80, 60, 60), text("Mod.Rate"),     channel("modrte"),  range(0.10,20, 5, 0.5),  colour("tomato"),   trackercolour("white")
rslider  bounds(445, 80, 60, 60), text("Mod.Delay"),    channel("moddel"),  range(0, 2.00, 0.3, 0.5),colour("tomato"),   trackercolour("white")
rslider  bounds(505, 80, 60, 60), text("Mod.Rise"),     channel("modris"),  range(0, 4.00, 2, 0.5),  colour("tomato"),   trackercolour("white")
rslider  bounds(265,150, 60, 60), text("N.Voices"),     channel("nvoices"), range(1,  50, 6, 1, 1),  colour("yellow"),   trackercolour("white")
rslider  bounds(325,150, 60, 60), text("Dtn.Dep."),     channel("DtnDep"),  range(0,    4.00, 1,0.5),colour("yellow"),   trackercolour("white")
rslider  bounds(385,150, 60, 60), text("Dtn.Rate"),     channel("DtnRte"),  range(0.01,40, 0.2,0.25),colour("yellow"),   trackercolour("white")
rslider  bounds(445,150, 60, 60), text("Rvb.Mix"),      channel("RvbMix"),  range(0, 1.00, 0.15),    colour("steelblue"),trackercolour("white")
rslider  bounds(505,150, 60, 60), text("Rvb.Size"),     channel("RvbSize"), range(0.5, 1.00, 0.82,2),colour("steelblue"),trackercolour("white")
checkbox bounds(570, 10,190, 20), text("Filter On/Off") channel("FiltOnOff"), colour("lime")  value(0)
xypad    bounds(570, 35,190,185), channel("cf", "bw"), text("x:c.off/y:b.width"), rangex(5, 13, 8), rangey(0.1, 5, 0.3)

keyboard pos(10, 225), size(750, 80)
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>
sr 	= 	44100
ksmps 	= 	64
nchnls 	= 	2
0dbfs	=	1
massign	0,2
seed	0

;Author: Iain McCurdy (2012)

gisine		ftgen	0, 0, 4096, 10, 1				;SINE WAVE
giexp		ftgen	0, 0, 1024, 19, 0.5, 0.5, 270, 0.5		;EXPONENTIAL CURVE USED TO DEFINE THE ENVELOPE SHAPE OF FOF PULSES
gasendL,gasendR	init	0

;FUNCTION TABLES STORING DATA FOR VARIOUS VOICE FORMANTS
;THE FIRST VALUE OF EACH TABLE DEFINES THE NUMBER OF DATA ELEMENTS IN THE TABLE
;THIS IS NEEDED BECAUSE TABLES SIZES MUST BE POWERS OF 2 TO FACILITATE INTERPOLATED TABLE READING (tablei) 
;BASS
giBF1		ftgen	0,  0, 8, -2,	4, 600,		400,	250,	350	;FREQ
giBF2		ftgen	0,  0, 8, -2,	4, 1040,	1620,	1750,	600	;FREQ
giBF3		ftgen	0,  0, 8, -2,	4, 2250,	2400,	2600,	2400	;FREQ
giBF4		ftgen	0,  0, 8, -2,	4, 2450,	2800,	3050,	2675	;FREQ
giBF5		ftgen	0,  0, 8, -2,	4, 2750,	3100,	3340,	2950	;FREQ
	        	
giBDb1		ftgen	0, 0, 8, -2,	4, 0,	0,	0,	0	;dB
giBDb2		ftgen	0, 0, 8, -2,	4, -7,	-12,	-30,	-20	;dB
giBDb3		ftgen	0, 0, 8, -2,	4, -9,	-9,	-16,	-32	;dB
giBDb4		ftgen	0, 0, 8, -2,	4, -9,	-12,	-22,	-28	;dB
giBDb5		ftgen	0, 0, 8, -2,	4, -20,	-18,	-28,	-36	;dB
	        	
giBBW1		ftgen	0, 0, 8, -2,	4, 60,	40,	60,	40	;BAND WIDTH
giBBW2		ftgen	0, 0, 8, -2,	4, 70,	80,	90,	80	;BAND WIDTH
giBBW3		ftgen	0, 0, 8, -2,	4, 110,	100,	100,	100	;BAND WIDTH
giBBW4		ftgen	0, 0, 8, -2,	4, 120,	120,	120,	120	;BAND WIDTH
giBBW5		ftgen	0, 0, 8, -2,	4, 130,	120,	120,	120	;BAND WIDTH
;TENOR  	
giTF1		ftgen	0, 0, 8, -2,	5, 650, 	400,	290,	400,	350	;FREQ
giTF2		ftgen	0, 0, 8, -2,	5, 1080, 	1700,   1870,	800,	600	;FREQ
giTF3		ftgen	0, 0, 8, -2,	5, 2650,	2600,   2800,	2600,	2700	;FREQ
giTF4		ftgen	0, 0, 8, -2,	5, 2900,	3200,   3250,	2800,	2900	;FREQ
giTF5		ftgen	0, 0, 8, -2,	5, 3250,	3580,   3540,	3000,	3300	;FREQ
	        	
giTDb1		ftgen	0, 0, 8, -2,	5, 0,	0,	0,	0,	0	;dB
giTDb2		ftgen	0, 0, 8, -2,	5, -6,	-14,	-15,	-10,	-20	;dB
giTDb3		ftgen	0, 0, 8, -2,	5, -7,	-12,	-18,	-12,	-17	;dB
giTDb4		ftgen	0, 0, 8, -2,	5, -8,	-14,	-20,	-12,	-14	;dB
giTDb5		ftgen	0, 0, 8, -2,	5, -22,	-20,	-30,	-26,	-26	;dB
	        	
giTBW1		ftgen	0, 0, 8, -2,	5, 80,	70,	40,	40,	40	;BAND WIDTH
giTBW2		ftgen	0, 0, 8, -2,	5, 90,	80,	90,	80,	60	;BAND WIDTH
giTBW3		ftgen	0, 0, 8, -2,	5, 120,	100,	100,	100,	100	;BAND WIDTH
giTBW4		ftgen	0, 0, 8, -2,	5, 130,	120,	120,	120,	120	;BAND WIDTH                                         
giTBW5		ftgen	0, 0, 8, -2,	5, 140,	120,	120,	120,	120	;BAND WIDTH
;COUNTER TENOR
giCTF1		ftgen	0, 0, 8, -2,	5, 660,	440,	270,	430,	370		;FREQ
giCTF2		ftgen	0, 0, 8, -2,	5, 1120,	1800,	1850,	820,	630	;FREQ
giCTF3		ftgen	0, 0, 8, -2,	5, 2750,	2700,	2900,	2700,	2750	;FREQ
giCTF4		ftgen	0, 0, 8, -2,	5, 3000,	3000,	3350,	3000,	3000	;FREQ
giCTF5		ftgen	0, 0, 8, -2,	5, 3350,	3300,	3590,	3300,	3400	;FREQ
	        	
giTBDb1		ftgen	0, 0, 8, -2,	5, 0,	0,	0,	0,	0	;dB
giTBDb2		ftgen	0, 0, 8, -2,	5, -6,	-14,	-24,	-10,	-20	;dB
giTBDb3		ftgen	0, 0, 8, -2,	5, -23,	-18,	-24,	-26,	-23	;dB
giTBDb4		ftgen	0, 0, 8, -2,	5, -24,	-20,	-36,	-22,	-30	;dB
giTBDb5		ftgen	0, 0, 8, -2,	5, -38,	-20,	-36,	-34,	-30	;dB
	        	
giTBW1		ftgen	0, 0, 8, -2,	5, 80,	70,	40,	40,	40	;BAND WIDTH
giTBW2		ftgen	0, 0, 8, -2,	5, 90,	80,	90,	80,	60	;BAND WIDTH
giTBW3		ftgen	0, 0, 8, -2,	5, 120,	100,	100,	100,	100	;BAND WIDTH
giTBW4		ftgen	0, 0, 8, -2,	5, 130,	120,	120,	120,	120	;BAND WIDTH
giTBW5		ftgen	0, 0, 8, -2,	5, 140,	120,	120,	120,	120	;BAND WIDTH
;ALTO   	
giAF1		ftgen	0, 0, 8, -2,	5, 800,	400,	350,	450,	325		;FREQ
giAF2		ftgen	0, 0, 8, -2,	5, 1150,	1600,	1700,	800,	700	;FREQ
giAF3		ftgen	0, 0, 8, -2,	5, 2800,	2700,	2700,	2830,	2530	;FREQ
giAF4		ftgen	0, 0, 8, -2,	5, 3500,	3300,	3700,	3500,	2500	;FREQ
giAF5		ftgen	0, 0, 8, -2,	5, 4950,	4950,	4950,	4950,	4950	;FREQ
	        	
giADb1		ftgen	0, 0, 8, -2,	5, 0,	0,	0,	0,	0	;dB
giADb2		ftgen	0, 0, 8, -2,	5, -4,	-24,	-20,	-9,	-12	;dB
giADb3		ftgen	0, 0, 8, -2,	5, -20,	-30,	-30,	-16,	-30	;dB
giADb4		ftgen	0, 0, 8, -2,	5, -36,	-35,	-36,	-28,	-40	;dB
giADb5		ftgen	0, 0, 8, -2,	5, -60,	-60,	-60,	-55,	-64	;dB
	        	
giABW1		ftgen	0, 0, 8, -2,	5, 50,	60,	50,	70,	50	;BAND WIDTH
giABW2		ftgen	0, 0, 8, -2,	5, 60,	80,	100,	80,	60	;BAND WIDTH
giABW3		ftgen	0, 0, 8, -2,	5, 170,	120,	120,	100,	170	;BAND WIDTH
giABW4		ftgen	0, 0, 8, -2,	5, 180,	150,	150,	130,	180	;BAND WIDTH
giABW5		ftgen	0, 0, 8, -2,	5, 200,	200,	200,	135,	200	;BAND WIDTH
;SOPRANO
giSF1		ftgen	0, 0, 8, -2,	5, 800,	350,	270,	450,	325		;FREQ
giSF2		ftgen	0, 0, 8, -2,	5, 1150,	2000,	2140,	800,	700	;FREQ
giSF3		ftgen	0, 0, 8, -2,	5, 2900,	2800,	2950,	2830,	2700	;FREQ
giSF4		ftgen	0, 0, 8, -2,	5, 3900,	3600,	3900,	3800,	3800	;FREQ
giSF5		ftgen	0, 0, 8, -2,	5, 4950,	4950,	4950,	4950,	4950	;FREQ
	        	
giSDb1		ftgen	0, 0, 8, -2,	5, 0,	0,	0,	0,	0	;dB
giSDb2		ftgen	0, 0, 8, -2,	5, -6,	-20,	-12,	-11,	-16	;dB
giSDb3		ftgen	0, 0, 8, -2,	5, -32,	-15,	-26,	-22,	-35	;dB
giSDb4		ftgen	0, 0, 8, -2,	5, -20,	-40,	-26,	-22,	-40	;dB
giSDb5		ftgen	0, 0, 8, -2,	5, -50,	-56,	-44,	-50,	-60	;dB
	        	
giSBW1		ftgen	0, 0, 8, -2,	5, 80,	60,	60,	70,	50	;BAND WIDTH
giSBW2		ftgen	0, 0, 8, -2,	5, 90,	90,	90,	80,	60	;BAND WIDTH
giSBW3		ftgen	0, 0, 8, -2,	5, 120,	100,	100,	100,	170	;BAND WIDTH
giSBW4		ftgen	0, 0, 8, -2,	5, 130,	150,	120,	130,	180	;BAND WIDTH
giSBW5		ftgen	0, 0, 8, -2,	5, 140,	200,	120,	135,	200	;BAND WIDTH

gkactive	init	0	; Will contain number of active instances of instr 3 when legato mode is chosen. NB. notes in release stage will not be regarded as active. 

opcode 		fofx5, a, kkki
	kfund,kvowel,koct,ivoice	xin
		
	ivoice		limit		ivoice,0,4					;protect against out of range values for ivoice
	;create a macro for each formant to reduce code repetition
#define	FORMANT(N)
	#
	invals	table	0, giBF1+(ivoice*15)+$N-1					;number of data elements in each table
	invals		=		invals-1								;
	k$N.form 	tablei		1+(kvowel*invals), giBF1+(ivoice*15)+$N-1	;read formant frequency from table
	kRandForm$N	randomi	-0.025,0.025,8,1	
	k$N.form	=	k$N.form*octave(kRandForm$N)
	k$N.db 		tablei		1+(kvowel*invals), giBDb1+(ivoice*15)+$N-1	;read decibel value from table
	k$N.amp		=		ampdb(k$N.db)					;convert to an amplitude value                                                
	k$N.band 	tablei		1+(kvowel*invals), giBBW1+(ivoice*15)+$N-1	;read bandwidth from table
	#
	;EXECUTE MACRO MULTIPLE TIMES
	$FORMANT(1)                                                                                      
	$FORMANT(2)                                                                                      
	$FORMANT(3)                                                                                        
	$FORMANT(4)
	$FORMANT(5)
	;======================================================================================================================================================================
	iris		=		0.003	;grain pulse rise time
	idur		=		0.02	;grain pulse duration
	idec		=		0.007	;grain pulse decay
	iolaps		=		14850	;maximum number of overlaps (overestimate)
	ifna		=		gisine	;function table for audio contained within fof grains
	ifnb		=		giexp	;function table that defines the attack and decay shapes of each fof grain
	itotdur		=		3600	;total maximum duration of a note (overestimate)
	;FOF===================================================================================================================================================================
	iRandRange	=		.1
#define	RandFact
	#
	kRndFact	rspline		-iRandRange,iRandRange,1,10
	kRndFact	=		semitone(kRndFact)
	#
	$RandFact
	a1 		fof 		k1amp, kfund*kRndFact, k1form, koct, k1band, iris, idur, idec, iolaps, ifna, ifnb, itotdur
	a2 		fof 		k2amp, kfund*kRndFact, k2form, koct, k2band, iris, idur, idec, iolaps, ifna, ifnb, itotdur
	a3 		fof 		k3amp, kfund*kRndFact, k3form, koct, k3band, iris, idur, idec, iolaps, ifna, ifnb, itotdur
	a4 		fof 		k4amp, kfund*kRndFact, k4form, koct, k4band, iris, idur, idec, iolaps, ifna, ifnb, itotdur
	a5 		fof 		k5amp, kfund*kRndFact, k5form, koct, k5band, iris, idur, idec, iolaps, ifna, ifnb, itotdur
	;======================================================================================================================================================================

	;OUT===================================================================================================================================================================
	asig		=		(a1+a2+a3+a4+a5)/5	;mix the five fof streams and reduce amplitude five-fold
			xout		asig			;send audio back to caller instrument
endop

opcode	ChoVoice,a,kkiii
	kDtnDep,kDtnRte,ifn,icount,invoices	xin			;read in input args.
	ktime	randomi	0.01,0.1*kDtnDep,kDtnRte,1			;create delay time value (linearly interpolating random function will implement pitch/time modulations)
	kptime	linseg	0,0.001,1					;portamento time (ramps up quickly from zero to a held value)
	ktime	portk	ktime,kptime					;apply portamento smoothing to delay time changes (prevents angular pitch changes)
	atime	interp	ktime						;create an interpolated a-rate version of delay time function (this will prevent qualtisation artifacts)
	atap	deltapi	atime+0.0015					;tap the delay buffer (nb. buffer opened and closed in caller instrument, UDO exists within the buffer)
	iDel	random	ksmps/sr,0.2					;random fixed delay time. By also apply a fixed delay time we prevent excessive amplitude at ote onsets when many chorus voices (N.Voices) are used
	atap	delay	atap,iDel					;apply fixed delay
	amix	init	0						;initialise amix variable (needed incase N.Voices is 1 in which case recirsion would not be used) 
	if icount<invoices then						;if stack of chorus voices is not yet completed...
	 amix	ChoVoice	kDtnDep,kDtnRte,ifn,icount+1,invoices	;.. call the UDO again. Increment count number.
	endif
		xout	atap+amix					;send chorus voice created in this interation (and all subsequent voices) back to caller instrument
endop

instr	1	;instrument that continuously scans widgets
	gkmonopoly	chnget	"monopoly"		;read widgets...
	gkDtnDep	chnget	"DtnDep"
	gkDtnRte	chnget	"DtnRte"	
	gkvibdep	chnget	"vibdep"				
	gkmodrte	chnget	"modrte"			
	gktrmdep	chnget	"trmdep"			
	gklevel		chnget	"lev"				
	gkvowel		chnget	"vowel"				
	gkoct		chnget	"oct"
	gkLegTim	chnget	"LegTim"
	gkRvbMix	chnget	"RvbMix"
	gkRvbSize	chnget	"RvbSize"
	kporttime	linseg	0,0.001,0.1		;portamento time (ramps up quickly from zero to a held value)
	gkvowel		portk	gkvowel,kporttime	;apply portamento smoothing
	gkoct		portk	gkoct,kporttime
	gkFiltOnOff	chnget	"FiltOnOff"
	gkcf	chnget	"cf"
	gkbw	chnget	"bw"
	gkcf		portk	cpsoct(gkcf),kporttime		;apply portamento smoothing
	gkbw		portk	gkbw*gkcf,kporttime		;apply portamento smoothing
endin

instr	2	;triggered via MIDI
	gkNoteTrig	init	1	;at the beginning of a new note set note trigger flag to '1'
	icps		cpsmidi		;read in midi note pitch in cycles per second
	givel		veloc	0,1	;read in midi note velocity
	gkcps	=	icps		;update a global krate variable for note pitch

	if i(gkmonopoly)==0 then		;if we are *not* in legato mode...
	 inum	notnum						; read midi note number (0 - 127)
	 	event_i	"i",p1+1+(inum*0.001),0,-1,icps	; call soud producing instr
	 krel	release						; release flag (1 when note is released, 0 otherwise)
	 if krel==1 then					; when note is released...
	  turnoff2	p1+1+(inum*0.001),4,1			; turn off the called instrument
	 endif							; end of conditional
	else				;otherwise... (i.e. legato mode)
	 iactive	=	i(gkactive)			;number of active notes of instr 3 (note in release are disregarded)
	 if iactive==0 then					;...if no notes are active
	  event_i	"i",p1+1,0,-1				;...start a new held note
	 endif
	endif
endin

instr	3
	ivoice		chnget	"voice"			;read widgets...
	imoddel		chnget	"moddel"		;
	imodris		chnget	"modris"		;
	invoices	chnget	"nvoices"		;
	
	kporttime	linseg	0,0.001,1		;portamento time function rises quickly from zero to a held value
	kporttime	=	kporttime*gkLegTim	;scale portamento time function with value from GUI knob widget
	
	if i(gkmonopoly)==1 then			;if we are in legato mode...
	 krel	release					;sense when  note has been released
	 gkactive	=	1-krel			;if note is in release, gkactive=0, otherwise =1
	 kcps	portk	gkcps,kporttime			;apply portamento smooth to changes in note pitch (this will only have an effect in 'legato' mode)
	 kactive	active	p1-1			;...check number of active midi notes (previous instrument)
	 if kactive==0 then				;if no midi notes are active...
	  turnoff					;... turn this instrument off
	 endif
	else						;otherwise... (polyphonic / non-legato mode)
	 kcps	=	p4		 		;pitch equal to the original note pitch
	endif

	if gkNoteTrig==1&&gkmonopoly==1 then		;if a new note is beginning and if we are in monophonic mode...
	 reinit	RESTART_ENVELOPE			;reinitialise the modulations build up
	endif
	RESTART_ENVELOPE:
	;VIBRATO (PITCH MODULATION)
	kmodenv	linseg	0,0.001+imoddel,0,0.001+imodris,1		;modulation depth envelope - modulation can be delayed by the first envelope segement and the rise time is defined by the duration of the second segment
	kDepVar	randomi	0.5,1,4						;random variance of the depth of modulation
	kmodenv	portk	kmodenv*kDepVar,kporttime			;smooth changes in modulation envelope to prevent discontinuities whnever the envelope is restarted
	rireturn
	
	kRteVar	randi	0.1,4						;random variation of the rate of modulation
		
	kvib	lfo	gkvibdep*kmodenv,gkmodrte*octave(kRteVar),0	;vibrato function
	
	;TREMOLO (AMPLITUDE MODULATION)
	ktrem		lfo		kmodenv*(gktrmdep/2),gkmodrte*octave(kRteVar),0	;TREMOLO LFO FUNCTION
	ktrem		=		(ktrem+0.5) + (gktrmdep * 0.5)	;OFFSET AND RESCALE TREMOLO FUNCTION ACCORDING TO TREMOLO DEPTH WIDGET SETTING 
	
	iRelTim	=	0.05
	kCpsAtt	expsegr	0.6,rnd(0.004)+0.001,1,iRelTim,1-rnd(0.05)	;a little jump in pitch at the beginning of a note will give the note a realistic attack sound. This will be most apparent when note velocity is high. And a little gliss at the end of notes.
	
	kcpsRnd	gaussi	1,0.01,10					;create a function that will be used to apply naturalistic pitch instability
	kcps	=	kcps*(1+kcpsRnd)				;apply pitch instability
	asig	fofx5	kcps*semitone(kvib)*kCpsAtt, gkvowel, gkoct, ivoice-1	;CALL fofx5 UDO
	if gkFiltOnOff==1 then
	 asig		reson		asig,gkcf,gkbw,1			;parametric EQ
	endif
	aatt	linseg	0,(0.3*(1-givel)*(invoices^0.8))+0.01,1			;AMPLITUDE ENVELOPE - ATTACK TIME IS INFLUENCED BY KEY VELOCITY
	asig	=	asig*aatt*ktrem*(0.3+givel*0.7)*gklevel			;APPLY AMPLITUDE CONTROLS: ENVELOPE, TREMOLO, KEY VELOCITY AND LEVEL

	/*CHORUS*/	
	if invoices>1 then
	 abuf	delayr	2						;--left channel--
	 amixL	ChoVoice	gkDtnDep,gkDtnRte,gisine,1,invoices	;call UDO
		delayw	asig

	 abuf	delayr	2						;--right channel--
	 amixR	ChoVoice	gkDtnDep,gkDtnRte,gisine,1,invoices	;call UDO
		delayw	asig

	 asigL	=	amixL/(invoices^0.5)				;scale mix of chorus voices according to the number of voices...
	 asigR	=	amixR/(invoices^0.5)				;...and the right channel
	else								;otherwise... (N.Voices = 1)
	 asigL	=	asig						;send mono signal to both channels
	 asigR	=	asig	 
	endif
	arel	linsegr	1,iRelTim,0					;release envelope
	asigL	=	asigL*arel					;apply release envelope
	asigR	=	asigR*arel

	kwet	limit	2*gkRvbMix,0,1					;wet (reverb) level control (reaches maximum a knob halfway point and hold that value for the remainder of its travel)
	gasendL	=	gasendL+asigL*kwet				;send some audio to the reverb instrument
	gasendR	=	gasendR+asigR*kwet
	kdry	limit	2*(1-gkRvbMix),0,1				;dry level (stays at maximum for the first half of the knob's travel then ramps down to zero for the remainder of its travel)
		outs	asigL*kdry,asigR*kdry				;SEND AUDIO TO OUTPUT
	gkNoteTrig	=	0					;reset new-note trigger (in case it was '1')
endin

instr	Effects
	if gkRvbMix>0 then
	 aL,aR	reverbsc	gasendL,gasendR,gkRvbSize,12000		;create stereo reverb signal
		outs		aL,aR					;send reverb signal to speakers
		clear		gasendL,gasendR				;clear reverb send variables
	endif
endin

</CsInstruments>

<CsScore>
f 0 [3600*24*7]
i 1 0 [3600*24*7]		;read widgets
i "Effects" 0 [3600*24*7] 	;reverb
</CsScore>

</CsoundSynthesizer>; CZSynth.csd
; Iain McCurdy, 2015

; CZSynth employs phase distortion synthesis, a technique featured in Casio's CZ range of synthesisers from the 1980s

; This synth can create strident lead sounds and if higher partials are employed with high levels of phase distortion aliasing can occur.
; This is left in as a chacteristic of the instrument but if desired, raising the sample rate can reduce or prevent this aliasing 

; The basic waveform (before phase distortion) can be designed in one of three ways:
; Additive	-	is constructed from 16 harmonic partials selectable using the checkboxes.
; Buzz		-	is constructed from a stack of harmonically related cosines using GEN11 and in a manner similar to the buzz and gbuzz opcodes.
; Noise		-	is a table of triangle noise derived samples.

; PHASE DISTORTION
; Distort	-	manual offset for the amount of phase distortion
; Env.		-	amount of influence of the envelope upon distortion amount
; Att.		-	attack time for the phase distortion amount envelope
; Dec.		-	decay time for the phase distortion amount envelope
; Retrig.(checkbox)	-	if ticked, in mono mode the envelope will be retriggered each time a new note is played
; Vel.		-	amount of influence of key velocity upon phase distortion amount (affects both manual and envelope)
; LFO SHAPE (COMBOBOX)	- LFO shape can be either triangle or random (random splines). Random splines LFO can be useful in adding a natural fluctuation to the sound.
; LFO		-	amount of LFO influence upon phase distortion amount
; Rate		-	rate of the LFO
; Note that the manual control 'Distort', the envelope and the LFO are added together, therefore the influence of the envelope (or the LFO) may not be heard if 'Distort' is at its maximum setting  
; Kybd.Scal.	-	amount of keyboard scaling of phase distortion amount. 
;			 Increasing this will result in attenuation of phase distortion of higher notes.
;			 This can be used to reduce of prevent aliasing in higher notes. 

; FILTER (a filter built using the clfilt opcode - lowpass Cheyshev I)
; On/Off	-	turns the filter on and off
; Cutoff	-	cutoff frequency manual control expressed as a ratio of the frequency of the note played
; Poles		-	number of poles employed by the filter
; Ripple	-	amount of ripple at the cutoff point
; Env.		-	amount of influence of the envelope upon filter cutoff
; Att.		-	attack time for the envelope
; Dec.		-	decay time for the envelope
; Retrig.(checkbox)	-	if ticked, in mono mode the envelope will be retriggered each time a new note is played
; Vel.		-	amount of influence of key velocity upon filter cutoff (affects both manual and envelope)
; LFO SHAPE (COMBOBOX)	- LFO shape can be either triangle or random (random splines). Random splines LFO can be useful in adding a natural fluctuation to the sound. 
; LFO		-	amount of LFO influence upon filter cutoff
; Rate		-	rate of the LFO
; Note that 'Cutoff', the envelope and the LFO are simply added together, but that their combined output is internally limited to prevent the filter from 'blowing up'

; OSCILLATOR 2	-	besides transposition the second oscillator is identical to the main oscillator
; On/Off	-	turns the second oscillator on or off
; Semitone	-	transposition of the second oscillator in semitones
; Cents		-	transposition of the second oscillator in cents

; POLYPHONY
; Mono/Poly (button) - select mode
; Port.Time	-	portamento time in mono (legato) mode

; AMPLITUDE
; Att.		-	attack time for the amplitude envelope
; Dec.		-	decay time for the amplitude envelope
; Sus.		-	sustain level for the amplitude envelope
; Rel.		-	release time for the amplitude envelope
; Vel.		-	amount of influence of key velocity upon amplitude
; Clip		-	amount of clipping of the sound. This can be used to apply further waveshaping.
; Level		-	output level

<Cabbage>
#define	SLIDER_STYLE trackercolour(150,150,255)
#define	CHECKBOX_STYLE colour(255,255,100)

form caption("CZ Synthesiser") size(1075,365), pluginid("RMSy") style("legacy")

; PHASE DISTORTION
image      bounds(  5,  5,500,130), colour(0,0,0,0), plant("ShapeAmount"), outlinecolour("white"), outlinethickness(1), shape("sharp") {
label      bounds(  5,  2,500, 12), text(". PHASE DISTORTION ."), fontcolour(255,255,100)
rslider    bounds(  0, 40, 80, 80), valuetextbox(1), textbox(1), text("Distort"), channel("ShapeAmount"),  range(-1,  1, 0), $SLIDER_STYLE
checkbox   bounds( 80, 25, 80, 10), text("Retrig."), channel("SARetrig"), value(1), identchannel("SARetrigID"), visible(0), $CHECKBOX_STYLE
rslider    bounds( 60, 40, 80, 80), valuetextbox(1), textbox(1), text("Env."), channel("SAEnv"),  range(0,  1, 1), $SLIDER_STYLE
rslider    bounds(120, 40, 80, 80), valuetextbox(1), textbox(1), text("Att."), channel("SAAtt"),  range(0, 16, 0,0.5), $SLIDER_STYLE
rslider    bounds(180, 40, 80, 80), valuetextbox(1), textbox(1), text("Dec."), channel("SADec"),  range(0, 16, 2,0.5), $SLIDER_STYLE
rslider    bounds(240, 40, 80, 80), valuetextbox(1), textbox(1), text("Vel."), channel("SAVel"),  range(0,  1, 1), $SLIDER_STYLE
combobox   bounds(325, 20, 85, 20), channel("SALFOShape"), value(2), text("Tri.","Random")
rslider    bounds(300, 40, 80, 80), valuetextbox(1), textbox(1), text("LFO"),  channel("SALFO"),  range(0,  1, 0.09), $SLIDER_STYLE
rslider    bounds(360, 40, 80, 80), valuetextbox(1), textbox(1), text("Rate"), channel("SARate"), range(0, 14, 1), $SLIDER_STYLE
rslider    bounds(420, 40, 80, 80), valuetextbox(1), textbox(1), text("Kybd.Scal."), channel("KybdScal"), range(0, 1, 0), $SLIDER_STYLE
}

; FILTER
image      bounds(510,  5,560,130), plant("Filter"), colour(0,0,0,0), outlinecolour("white"), outlinethickness(1), shape("sharp") {
label      bounds(  5,  2,550, 12), text(". FILTER ."), fontcolour(255,255,100)
checkbox   bounds( 15, 25,100, 10), text("On/Off"), channel("FilterOnOff"), $CHECKBOX_STYLE
rslider    bounds(  0, 40, 80, 80), valuetextbox(1), textbox(1), text("Cutoff"), channel("Cutoff"),  range(1,100,10,1,0.1), identchannel("ID1"), visible(0), $SLIDER_STYLE
rslider    bounds( 60, 40, 80, 80), valuetextbox(1), textbox(1), text("Poles"), channel("Poles"),  range(2,  50, 8,1,2), identchannel("ID2"), visible(0), $SLIDER_STYLE
rslider    bounds(120, 40, 80, 80), valuetextbox(1), textbox(1), text("Ripple"), channel("Ripple"),  range(0.1, 50, 20, 0.5, 0.01), identchannel("ID3"), visible(0), $SLIDER_STYLE
checkbox   bounds(180, 25, 80, 10), text("Retrig."), textbox(1), channel("FRetrig"), value(1), identchannel("FRetrigID"), visible(0), visible(0), $CHECKBOX_STYLE
rslider    bounds(180, 40, 80, 80), valuetextbox(1), textbox(1), text("Env."), channel("FEnv"),  range(0, 50, 20,1,0.01), identchannel("ID4"), visible(0), $SLIDER_STYLE
rslider    bounds(240, 40, 80, 80), valuetextbox(1), textbox(1), text("Att."), channel("FAtt"),  range(0, 16, 0.1,0.5), identchannel("ID5"), visible(0), $SLIDER_STYLE
rslider    bounds(300, 40, 80, 80), valuetextbox(1), textbox(1), text("Dec."), channel("FDec"),  range(0, 16, 1,0.5), identchannel("ID6"), visible(0), $SLIDER_STYLE
rslider    bounds(360, 40, 80, 80), valuetextbox(1), textbox(1), text("Vel."), channel("FVel"),  range(0,  1, 1), identchannel("ID7"), visible(0), $SLIDER_STYLE
combobox   bounds(445, 20, 85, 20), channel("FLFOShape"), value(1), text("Tri.","Random"), identchannel("ID10"), visible(0)
rslider    bounds(420, 40, 80, 80), valuetextbox(1), textbox(1), text("LFO"),  channel("FLFO"),  range(0, 50, 0), identchannel("ID8"), visible(0), $SLIDER_STYLE
rslider    bounds(480, 40, 80, 80), valuetextbox(1), textbox(1), text("Rate"), channel("FRate"), range(0, 14, 1), identchannel("ID9"), visible(0), $SLIDER_STYLE
}

; WAVEFORM
image      bounds(  5,140,320,130), plant("Waveform"), colour(0,0,0,0), outlinecolour("white"), outlinethickness(1), shape("sharp") {
label      bounds(  5,  2,320, 12), text(". WAVEFORM ."), fontcolour(255,255,100)
combobox   bounds(  5, 20, 85, 20), channel("WaveformMode"), value(1), text("Additive","Buzz","Noise")
label      bounds(145, 23, 85, 13), text("Octave Shift:")
combobox   bounds(230, 20, 85, 20), channel("OctShift"), value(1), text("0","-1","-2","-3","-4","-5","-6")
}

image      bounds(  5,190,320,130), plant("WaveformAdd"), colour(0,0,0,0), shape("sharp"), identchannel("WaveformAddID") {
image      bounds(  8,  3,304, 19), colour("silver") shape("sharp")
checkbox   bounds( 10,  5, 15, 15), channel("F0") ,  colour("lime"), value(1)  ;, shape("ellipse")
checkbox   bounds( 25,  5, 15, 15), channel("F1") ,  colour("lime")            ;, shape("ellipse")
checkbox   bounds( 40,  5, 15, 15), channel("F2") ,  colour("lime")            ;, shape("ellipse")
checkbox   bounds( 55,  5, 15, 15), channel("F3") ,  colour("lime")            ;, shape("ellipse")
checkbox   bounds( 70,  5, 15, 15), channel("F4") ,  colour("lime")            ;, shape("ellipse")
checkbox   bounds( 85,  5, 15, 15), channel("F5") ,  colour("lime")            ;, shape("ellipse")
checkbox   bounds(100,  5, 15, 15), channel("F6") ,  colour("lime")            ;, shape("ellipse")
checkbox   bounds(115,  5, 15, 15), channel("F7") ,  colour("lime"), value(1)  ;, shape("ellipse")
checkbox   bounds(130,  5, 15, 15), channel("F8") ,  colour("lime")            ;, shape("ellipse")
checkbox   bounds(145,  5, 15, 15), channel("F9") ,  colour("lime")            ;, shape("ellipse")
checkbox   bounds(160,  5, 15, 15), channel("F10"),  colour("lime")            ;, shape("ellipse")
checkbox   bounds(175,  5, 15, 15), channel("F11"),  colour("lime"), value(1)  ;, shape("ellipse")
checkbox   bounds(190,  5, 15, 15), channel("F12"),  colour("lime")            ;, shape("ellipse")
checkbox   bounds(205,  5, 15, 15), channel("F13"),  colour("lime")            ;, shape("ellipse")
checkbox   bounds(220,  5, 15, 15), channel("F14"),  colour("lime")            ;, shape("ellipse")
checkbox   bounds(235,  5, 15, 15), channel("F15"),  colour("lime")            ;, shape("ellipse")
checkbox   bounds(250,  5, 15, 15), channel("F16"),  colour("lime")            ;, shape("ellipse")
checkbox   bounds(265,  5, 15, 15), channel("F17"),  colour("lime")            ;, shape("ellipse")
checkbox   bounds(280,  5, 15, 15), channel("F18"),  colour("lime")            ;, shape("ellipse")
checkbox   bounds(295,  5, 15, 15), channel("F19"),  colour("lime")            ;, shape("ellipse")

label      bounds( 10, 24, 15, 9), text("1")
label      bounds( 25, 24, 15, 9), text("2")
label      bounds( 40, 24, 15, 9), text("3")
label      bounds( 55, 24, 15, 9), text("4")
label      bounds( 70, 24, 15, 9), text("5")
label      bounds( 85, 24, 15, 9), text("6")
label      bounds(100, 24, 15, 9), text("7")
label      bounds(115, 24, 15, 9), text("8")
label      bounds(130, 24, 15, 9), text("9")
label      bounds(145, 24, 15, 9), text("10")
label      bounds(160, 24, 15, 9), text("11")
label      bounds(175, 24, 15, 9), text("12")
label      bounds(190, 24, 15, 9), text("13")
label      bounds(205, 24, 15, 9), text("14")
label      bounds(220, 24, 15, 9), text("15")
label      bounds(235, 24, 15, 9), text("16")
label      bounds(250, 24, 15, 9), text("17")
label      bounds(265, 24, 15, 9), text("18")
label      bounds(280, 24, 15, 9), text("19")
label      bounds(295, 24, 15, 9), text("20")
}

image      bounds(  5,190,320,130), plant("WaveformBuzz"), colour(0,0,0,0), shape("sharp"), identchannel("WaveformBuzzID"), visible(0) {
rslider    bounds( 25,  0, 70, 70), text("Harms."), channel("Harms"),  range(1,  80, 5,1,1), $SLIDER_STYLE
rslider    bounds( 95,  0, 70, 70), text("Lowest"), channel("Lowest"),  range(1,  80, 7,1,1), $SLIDER_STYLE
rslider    bounds(165,  0, 70, 70), text("Power"), channel("Power"),  range(0,  2, 0.9), $SLIDER_STYLE
}

image      bounds(  5,190,320,130), plant("WaveformNoise"), colour(0,0,0,0), shape("sharp"), identchannel("WaveformNoiseID"), visible(0) {
rslider    bounds( 95,  0, 70, 70), text("Size"), channel("NoiseSize"),  range(2, 12, 7,1,1), $SLIDER_STYLE
}

; OSCILLATOR 2
image      bounds(330,140,140,130), plant("Oscillator2"), colour(0,0,0,0), outlinecolour("white"), outlinethickness(1), shape("sharp") {
label      bounds(  5,  2,130, 12), text(". OSCILLATOR 2 ."), fontcolour(255,255,100)
checkbox   bounds( 15, 25,100, 10), text("On/Off"), channel("Osc2OnOff"), value(0), $CHECKBOX_STYLE
rslider    bounds(  0, 40, 80, 80), valuetextbox(1), textbox(1), text("Semitone"), channel("Semitones"),  range(-24, 24, -12,1,1), $SLIDER_STYLE
rslider    bounds( 60, 40, 80, 80), valuetextbox(1), textbox(1), text("Cents"), channel("Cents"),  range(-100, 100, 0,1,1), $SLIDER_STYLE
}

; POLYPHONY
image      bounds(475,140,150,130), plant("Polyphony"), colour(0,0,0,0), outlinecolour("white"), outlinethickness(1), shape("sharp") {
label      bounds(  5,  2,140, 12), text(". POLYPHONY ."), fontcolour(255,255,100)
button     bounds( 15, 40, 50, 20), text("Mono","Poly"), channel("MonoPoly"), value(1)
rslider    bounds( 60, 40, 80, 80), valuetextbox(1), textbox(1), text("Port.Time"), channel("PortTime"),  range(0, 1, 0.05), identchannel("PortTimeID"), visible(0), $SLIDER_STYLE
}

; AMPLITUDE
image      bounds(630,140,440,130), plant("Amplitude"), colour(0,0,0,0), outlinecolour("white"), outlinethickness(1), shape("sharp") {
label      bounds(  5,  2,430, 12), text(". AMPLITUDE ."), fontcolour(255,255,100)
rslider    bounds(  0, 40, 80, 80), valuetextbox(1), textbox(1), text("Att."), channel("AAtt"),  range(0,  5, 0.05), $SLIDER_STYLE
rslider    bounds( 60, 40, 80, 80), valuetextbox(1), textbox(1), text("Dec."), channel("ADec"),  range(0,  5, 0.5), $SLIDER_STYLE
rslider    bounds(120, 40, 80, 80), valuetextbox(1), textbox(1), text("Sus."), channel("ASus"),  range(0,  1, 1), $SLIDER_STYLE
rslider    bounds(180, 40, 80, 80), valuetextbox(1), textbox(1), text("Rel."), channel("ARel"),  range(0,  5, 0.2), $SLIDER_STYLE
rslider    bounds(240, 40, 80, 80), valuetextbox(1), textbox(1), text("Vel."), channel("AVel"),  range(0,  1, 1), $SLIDER_STYLE
rslider    bounds(300, 40, 80, 80), valuetextbox(1), textbox(1), text("Clip"), channel("Clip"),  range(0.1,  10, 1,0.5), $SLIDER_STYLE
rslider    bounds(360, 40, 80, 80), valuetextbox(1), textbox(1), text("Level"), channel("Level"),  range(0,  1, 0.15), $SLIDER_STYLE
}

keyboard   bounds(  5,275,1065, 85)

</Cabbage>


<CsoundSynthesizer>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>
sr = 44100
ksmps = 16
nchnls = 2
0dbfs = 1
massign	0,2
maxalloc 3,1

giUniSine	ftgen	0,0,4097,19,1,0.5,0,0.5
giUniTri	ftgen	0,0,4097,7,0,2048,1,2048,0
giSine		ftgen	0,0,4096,10,1

giKybdScal	ftgen	0,0,128,7,1,127,0
gaL,gaR		init	0

opcode	lineto2,k,kk
 kinput,ktime	xin
 ktrig	changed	kinput,ktime				; reset trigger
 if ktrig==1 then					; if new note has been received or if portamento time has been changed...
  reinit RESTART
 endif
 RESTART:						; restart 'linseg' envelope
 if i(ktime)==0 then					; 'linseg' fails if duration is zero...
  koutput	=	i(kinput)			; ...in which case output simply equals input
 else
  koutput	linseg	i(koutput),i(ktime),i(kinput)	; linseg envelope from old value to new value
 endif
 rireturn
 		xout	koutput
endop

instr	1
 gkMonoPoly	chnget	"MonoPoly"
 gkFilterOnOff	chnget	"FilterOnOff"

 if changed(gkMonoPoly)==1 then
  if gkMonoPoly==0 then
  	chnset	"visible(1)", "SARetrigID"
   if gkFilterOnOff==1 then
  	chnset	"visible(1)", "FRetrigID"
   endif
  	chnset	"visible(1)", "PortTimeID"
  elseif gkMonoPoly==1 then
  	chnset	"visible(0)", "SARetrigID"
  	chnset	"visible(0)", "FRetrigID"
  	chnset	"visible(0)", "PortTimeID"
  endif
 endif
 
 kWaveformMode	chnget	"WaveformMode"
 if changed(kWaveformMode)==1 then
  if kWaveformMode==1 then
  	chnset	"visible(1)", "WaveformAddID"
  	chnset	"visible(0)", "WaveformBuzzID"
  	chnset	"visible(0)", "WaveformNoiseID"
  elseif kWaveformMode==2 then
  	chnset	"visible(0)", "WaveformAddID"
  	chnset	"visible(1)", "WaveformBuzzID"
  	chnset	"visible(0)", "WaveformNoiseID"
  else
  	chnset	"visible(0)", "WaveformAddID"
  	chnset	"visible(0)", "WaveformBuzzID"
  	chnset	"visible(1)", "WaveformNoiseID"
  endif
 endif
 kHarms		chnget	"Harms"
 kLowest	chnget	"Lowest"
 kPower		chnget	"Power"
 kHarms		init	5
 kLowest	init	7
 kPower		init	0.9
 kNoiseSize	chnget	"NoiseSize"
 kNoiseSize	init	3
 
 kShapeAmount	chnget	"ShapeAmount"
 gkSARetrig	chnget	"SARetrig"
 gkSAEnv	chnget	"SAEnv"
 gkSAAtt	chnget	"SAAtt"
 gkSADec	chnget	"SADec"
 gkSAVel	chnget	"SAVel"
 gkSALFOShape	chnget	"SALFOShape"
 gkSALFO	chnget	"SALFO"
 gkSARate	chnget	"SARate"
 gkKybdScal	chnget	"KybdScal"
 
 kClip		chnget	"Clip"
 
 if changed(gkFilterOnOff)==1 then
  if gkFilterOnOff==1 then
  	if gkMonoPoly==0 then
  	 chnset	"visible(1)", "FRetrigID"
  	endif
  	chnset	"visible(1)", "ID1"
  	chnset	"visible(1)", "ID2"
  	chnset	"visible(1)", "ID3"
  	chnset	"visible(1)", "ID4"
  	chnset	"visible(1)", "ID5"
  	chnset	"visible(1)", "ID6"
  	chnset	"visible(1)", "ID7"
  	chnset	"visible(1)", "ID8"
  	chnset	"visible(1)", "ID9"
  	chnset	"visible(1)", "ID10"
  elseif gkFilterOnOff==0 then
  	chnset	"visible(0)", "FRetrigID"
  	chnset	"visible(0)", "ID1"
  	chnset	"visible(0)", "ID2"
  	chnset	"visible(0)", "ID3"
  	chnset	"visible(0)", "ID4"
  	chnset	"visible(0)", "ID5"
  	chnset	"visible(0)", "ID6"
  	chnset	"visible(0)", "ID7"
  	chnset	"visible(0)", "ID8"
  	chnset	"visible(0)", "ID9"
  	chnset	"visible(0)", "ID10"
  endif
 endif

 kCutoff	chnget	"Cutoff"
 gkPoles	chnget	"Poles"
 gkRipple	chnget	"Ripple"
 gkFRetrig	chnget	"FRetrig"
 gkFEnv		chnget	"FEnv"
 gkFAtt		chnget	"FAtt"
 gkFDec		chnget	"FDec"
 gkFVel		chnget	"FVel"
 gkFLFOShape	chnget	"FLFOShape"
 gkFLFO		chnget	"FLFO"
 gkFRate	chnget	"FRate"

 kPortTime	linseg	0,0.001,0.1
 gkShapeAmount	portk	kShapeAmount,kPortTime
 gkClip		portk	kClip,kPortTime
 gkCutoff	portk	kCutoff,kPortTime    

 gkOctShift	chnget	"OctShift"
 gkOctShift	=	-(gkOctShift-1)

 gkOsc2OnOff	chnget	"Osc2OnOff"
 kSemitones	chnget	"Semitones"
 kCents		chnget	"Cents"
 gkTransRto	=	semitone(kSemitones)*cent(kCents)
 gkPortTime	chnget	"PortTime"
 kF0		chnget	"F0"		
 kF1		chnget	"F1"		
 kF2		chnget	"F2"
 kF3		chnget	"F3"
 kF4		chnget	"F4"
 kF5		chnget	"F5"
 kF6		chnget	"F6"
 kF7		chnget	"F7"
 kF8		chnget	"F8"
 kF9		chnget	"F9"
 kF10		chnget	"F10"
 kF11		chnget	"F11"
 kF12		chnget	"F12"
 kF13		chnget	"F13"
 kF14		chnget	"F14"
 kF15		chnget	"F15"
 kF16		chnget	"F16"
 kF17		chnget	"F17"
 kF18		chnget	"F18"
 kF19		chnget	"F19"
 cngoto changed(kF0,kF1,kF2,kF3,kF4,kF5,kF6,kF7,kF8,kF9,kF10,kF11,kF12,kF13,kF14,kF15,kF16,kF17,kF18,kF19,kWaveformMode,kHarms,kLowest,kPower,kNoiseSize)==1, CREATE_TABLE
 reinit CREATE_TABLE
 CREATE_TABLE:
 if i(kWaveformMode)==1 then
  gisource	ftgen	1,0,131072,9,   1, i(kF0),   90,   \
 				2, i(kF1),   90,   \
 				3, i(kF2),   90,   \
 				4, i(kF3),   90,   \
 				5, i(kF4),   90,   \
 				6, i(kF5),   90,   \
 				7, i(kF6),   90,   \
 				8, i(kF7),   90,   \
 				9, i(kF8),   90,   \
 				10,i(kF9),   90,   \
 				11,i(kF10),  90,   \
 				12,i(kF11),  90,   \
 				13,i(kF12),  90,   \
 				14,i(kF13),  90,   \
 				15,i(kF14),  90,   \
 				16,i(kF15),  90,   \
 				17,i(kF16),  90,   \
 				18,i(kF17),  90,   \
 				19,i(kF18),  90,   \
 				20,i(kF19),  90
 elseif i(kWaveformMode)==2 then
  gisource	ftgen	1,0,131072,11,   i(kHarms), i(kLowest), i(kPower)
 else
  gisource	ftgen	1,0,2^i(kNoiseSize),21,3,1
 endif
 
 gkAAtt		chnget		"AAtt"
 gkADec		chnget		"ADec"
 gkASus		chnget		"ASus"
 gkARel		chnget		"ARel"
 gkAVel		chnget		"AVel"
 gkLevel	chnget		"Level"

endin


instr	2			; RESPOND TO MIDI NOTES
 icps	cpsmidi
 inum	notnum
 givel	veloc	0,1
 gkVel	init	givel
 gkcps	=	icps
 gicps	init	icps
 if i(gkMonoPoly)==0 then	; IF MONO MODE SELECTED...
  event_i	"i",3,0,-1, icps, inum
 else				; OTHERWISE POLYPHONIC MODE HAS BEEN SELECTED
  aL,aR	subinstr	3, icps, inum
  	outs		aL,aR
 endif
 
 gkNewNote	init	1
endin

instr	3
 if active:k(2)==0 then			; IF ALL INSTANCES OF INSTR 2 HAVE BEEN TURNED OFF...
  turnoff				; TURN OFF THIS INSTRUMENT
 endif
 kPortTime	linseg	0,0.001,1

 if i(gkMonoPoly)==0 then
  kcps		lineto2	gkcps,kPortTime*gkPortTime		
 else
  kcps		init	p4
 endif
 
 aosc		phasor	kcps * octave(gkOctShift)
 
 cngoto gkNewNote==1&&gkSARetrig==1&&i(gkMonoPoly)==0, SHAPE_ENV
 reinit SHAPE_ENV
 SHAPE_ENV:
 kShapeEnv	transeg	0,i(gkSAAtt)+0.000001,1, i(gkSAEnv),i(gkSADec)+0.000001,-2,0 	; SHAPE AMOUNT ENVELOPE
 rireturn
 iSAVel	init	(i(gkVel)*i(gkSAVel)) + (1-i(gkSAVel))					; SHAPE AMOUNT VELOCITY
 if gkSALFOShape==1 then								; SHAPE AMOUNT LFO
  kSALFO	oscili	gkSALFO,gkSARate,giUniTri					; TRIANGLE LFO
 else
  kSALFO	rspline	0,gkSALFO,gkSARate,gkSARate*4					; RANDOM LFO
 endif
 
 iSAKybdScal	table	p5+((i(gkKybdScal)*256)-128), giKybdScal		; SHAPE AMOUNT KEYBOARD SCALING (REDUCING SHAPE AMOUNT FOR HIGHER NOTE CAN REDUCE ALIASING
 kShapeAmount	=	(gkShapeAmount+kShapeEnv+kSALFO)*iSAVel*iSAKybdScal
 ibipolar	=	0							; UNIPOLAR/BIPOLAR SWITCH (0=UNIPOLAR 1=BIPOLAR)
 ifullscale	=	1							; FULLSCALE VALUE
 apd         	pdhalf	aosc, kShapeAmount, ibipolar, ifullscale		; PHASE DISTORT THE PHASOR (aosc) CREATED 4 LINES ABOVE
 asig		tablei	apd,gisource,1
 
 if gkOsc2OnOff==1 then
  aosc2		phasor	kcps * octave(gkOctShift) * gkTransRto
  apd2        	pdhalf	aosc2, kShapeAmount, ibipolar, ifullscale		; PHASE DISTORT THE PHASOR (aosc) CREATED 4 LINES ABOVE
  asig		+=	tablei:a(apd2,gisource,1)
 endif
 
 /*
 asig 		clip 	asig*gkClip*0.5, 0, 1, 1
 asig		/=	gkClip^0.5
 */
 
 /* POWERSHAPE DISTORTION */
 ifullscale	=	0dbfs	;DEFINE FULLSCALE AMPLITUDE VALUE
 asig 		powershape 	asig, gkClip, ifullscale			; CREATE POWERSHAPED SIGNAL 
 
 /* FILTER */
 if gkFilterOnOff==1 then

  if gkFLFOShape==1 then
   kFLFO	oscili	gkFLFO,gkFRate,giUniTri
  else
   kFLFO	rspline	0,gkFLFO,gkFRate,gkFRate*4
  endif
  cngoto gkNewNote==1&&gkFRetrig==1&&i(gkMonoPoly)==0, FILTER_ENV
  reinit FILTER_ENV
  FILTER_ENV:
  kFiltEnv	transeg	0,i(gkFAtt)+0.000001,2, i(gkFEnv),i(gkFDec)+0.000001,-2,0 
  rireturn
  iFVel	init	(i(gkVel)*i(gkFVel)) + (1-i(gkFVel))
  kCF	limit	kcps*((gkCutoff+kFiltEnv+kFLFO)*iFVel),1,sr/3
  cngoto changed(gkPoles,gkRipple)==1, FILTER
  reinit FILTER
  FILTER:
  asig		clfilt	asig*8,kCF,0,i(gkPoles),1,i(gkRipple)
 endif
 
 /* AMPLITUDE ENVELOPE */
 aEnv		expsegr	0.01,i(gkAAtt)+0.00001,1.01,i(gkADec)+0.00001,i(gkASus)+0.01,i(gkARel)+0.00001,0.01
 aEnv		-=	0.01
 iAVel	init	(i(gkVel)*i(gkAVel)) + (1-i(gkAVel))
 asig		*=	aEnv*iAVel
 
 /* STEREO RIGHT CHANNEL */
 aDly		interp	0.5/kcps					; RIGHT CHANNEL WILL BE DELAYED BY 1/2 PERIOD OF THE FUNDEMENTAL					
 aR		vdelay	asig,aDly*1000,(0.5/cpsmidinn(0))*1000		; VARIABLE DELAY (NEEDS TO BE VARIABLE FOR MONOPHONIC/LEGATO MODE)
 
 /* OUTPUT */
;		outs	asig*gkLevel, aR*gkLevel
 gaL	+=	asig*gkLevel
 gaR	+=	aR*gkLevel
 
 gkNewNote	=	0						; RESET NEW NOTE FLAG
endin

instr	4
 aL	resonr	gaL,100,10,1
 aR	resonr	gaR,100,10,1
 	outs	aL+gaL/4,aR+gaR/4
 	clear	gaL,gaR
endin

</CsInstruments>  

<CsScore>
i 1  0 [3600*24*7]
i 4  0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>FM_Clang.csd
Written by Iain McCurdy, 2014

An FM synthesis based instrument that specialises in creating percussive metallic 'clang'-like sounds.

AMPLITUDE - controls pertaining to the control of each notes amplitude
Level		-	Global amplitude control
Attack		-	Attack time. Actually just a small range of control but increasing it can soften the attack subtly
Vel.Att.	-	Degree to which lower note velocities lengthen attack time.
Duration	-	Duration of the overall amplitude decay. Note that depending on other settings notes may actually sound for a shorter time.
Sustain		-	Similar to the effect of a sustain pedal being depressed.

MODULATOR - controls pertaining to the modulator in the FM algorithm
Ratio		-	Ratio of the modulator frequency to that of the carrier.
Vel.Index	-	Index of modulation. This is also always dependent upon note velocity.
Decay		-	Rate of decay of the index. This is heard as the rate of loss of spectral energy or damping.

CARRIER - controls pertaining to the carrier in the FM algorithm
Kyb.Scale	-	Keyboard scaling of the carrier frequency. Zero means that frequencies follow normal keyboard temperament. 
                                                                   Values less than zero mean that frequency intervals from note to note will be compressed.
                                                                   Values greater than zero mean that frequency intervals from note to note will be expanded.

DETUNE - Two FM carrier/modulator pairings can be created with a detuning offset between them to create beating effects. 
          Detuning will also be unique (and repeatable) from note to note to give the instrument character.
Mix		-	Amplitude of the second FM pair. This will control the amplitude of beating (amplitude modulation) effects resulting from the detuning.
Amount		-	Amplitude of the detuning intervals

STEREO - A stereo broadening effect by applying short delays to the left and right channels. The exact durations of the delays will be unique (and repeatable) from note to note to give the instrument character.
Dry/Wet		-	A dry/wet control of this effect
Width		-	A control of the durations of the delays which is heard as a control of the stereo width of the effect.

NOISE - Filtered gaussian noise can be added to the modulator ratio to add discordancy to the tone.
Amount	-	Amplitude of the gaussian noise signal
Filter	-	Narrowness of the bandpass filtering applied to the gaussian noise
Follow Modulator (checkbox)	-	Selects whether the bandpass filter follows the modulator frequency. If 'off' it simply follows the carrier frequency.

LFO - A sine shaped LFO added to the modulator ratio of an auxilliary FM pair which is then mixed to an unmodulated pair. This can introduce spectral modulation, as in a bell swinging back and forth as it rings.
Mix	-	Amount of modulated signal mixed into the output.
Depth	-	Depth of the LFO modulation.
Rate	-	Rate of the LFO modulation.
Kybd.Follow	-	Extend to which the rate of LFO modulation follows keyboard notes - keyboard following means that lower notes will modulate at lower frequencies, higher notes will modulate at higher frequencies.

FILTER - Filtering of the sound
LPF	-	A lowpass filter that follows the fundemental frequency of the FM pair
Filter Fundemental (checkbox)	-	If active, the fundemental will be filtered off.

REVERB - a reverb effect using the freeverb opcode


<Cabbage>
form caption("FM Clang") size(945, 320), pluginid("FMCl"), guirefresh(256) style("legacy")

#define RSliderStyle # colour("white"), trackercolour("silver"), fontcolour("white"), textcolour("white"), outlinecolour(120,140,140)#

;AMPLITUDE
image    bounds(  5,  5,300,110), colour( 70, 90, 90), outlinecolour("white"), outlinethickness(2), shape("sharp"), plant("amplitude"){
line     bounds( 90,  6,120, 14)
label    bounds( 90,  8,120, 10), text("A  M  P  L  I  T  U  D  E"), textcolour(white)
rslider  bounds(  0, 25, 75, 75), text("Level"),    channel("Amp"),    range(0,8.00,0.5,0.5),        valuetextbox(1), textbox(1), $RSliderStyle
rslider  bounds( 55, 25, 75, 75), text("Attack"),   channel("AttTim"), range(0,0.1,0,0.5,0.001),     valuetextbox(1), textbox(1), $RSliderStyle
rslider  bounds(110, 25, 75, 75), text("Vel.Att."), channel("AttVel"), range(0,1,0),                 valuetextbox(1), textbox(1), $RSliderStyle
rslider  bounds(165, 25, 75, 75), text("Duration"), channel("Dur"),    range(0.1, 24.00, 12, 0.5,),  valuetextbox(1), textbox(1), $RSliderStyle
checkbox bounds(230, 53,180, 12), channel("Sustain"), value(1), text("Sustain"), textcolour("white")
}

;MODULATOR
image    bounds(310,  5,180,110), colour( 70, 90, 90), outlinecolour("white"), outlinethickness(2), shape("sharp"), plant("modulator"){
line     bounds( 30,  6,120, 14)
label    bounds( 30,  8,120, 10), text("M  O  D  U  L  A  T  O  R"), textcolour(white)
rslider  bounds(  0, 25, 75, 75), text("Ratio"), channel("mod"), range(1, 17, 2.29, 1,0.01),    valuetextbox(1), textbox(1), $RSliderStyle
rslider  bounds( 55, 25, 75, 75), text("Index"), channel("NdxVel"), range(0, 2.00, 1,0.75),     valuetextbox(1), textbox(1), $RSliderStyle
rslider  bounds(110, 25, 75, 75), text("Decay"), channel("NdxCurve"), range(8, 256.00, 16,0.5), valuetextbox(1), textbox(1), $RSliderStyle
}

;CARRIER
image    bounds(495,  5,105,110), colour( 70, 90, 90), outlinecolour("white"), outlinethickness(2), shape("sharp"), plant("carrier"){
line     bounds(  7,  6, 90, 14)
label    bounds(  7,  8, 90, 10), text("C  A  R  R  I  E  R"), textcolour(white)
rslider  bounds( 15, 25, 75, 75), text("Kyb.Scale"), channel("CarKyb"), range(-4, 4.00, 0), valuetextbox(1), textbox(1), $RSliderStyle
}

;DETUNE
image    bounds(605,  5,130,110), colour( 70, 90, 90), outlinecolour("white"), outlinethickness(2), shape("sharp"), plant("detune"){
line     bounds( 26,  6, 78, 14)
label    bounds( 26,  8, 78, 10), text("D  E  T  U  N  E"), textcolour(white)
rslider  bounds(  0, 25, 75, 75), text("Mix"), channel("DtnMix"), range(0,1.00,1), valuetextbox(1), textbox(1), $RSliderStyle
rslider  bounds( 55, 25, 75, 75), text("Amount"), channel("Detune"), range(0.00,25.00,1.5), valuetextbox(1), textbox(1), $RSliderStyle
}

;FILTER
image    bounds(740,  5,200,110), colour( 70, 90, 90), outlinecolour("white"), outlinethickness(2), shape("sharp"), plant("filter"){
line     bounds( 60,  6, 80, 14)
label    bounds( 60,  8, 80, 10), text("F  I  L  T  E  R"), textcolour(white)
rslider  bounds(  0, 25, 75, 75), text("LPF"), channel("LPF"), range(1, 16.00, 16),  valuetextbox(1), textbox(1), $RSliderStyle
checkbox bounds( 65, 53,180, 12), channel("FiltFund"), value(1), text("Filter Fundamental"), fontcolour("white")
}

;NOISE
image    bounds(  5,120,240,110), colour( 70, 90, 90), outlinecolour("white"), outlinethickness(2), shape("sharp"), plant("noise"){
line     bounds( 78,  6, 69, 14)
label    bounds( 78,  8, 69, 10), text("N  O  I  S  E"), textcolour(white)
rslider  bounds(  0, 25, 75, 75), text("Amount"),  channel("NseAmp"),   range(0,2000,1000,0.5,1),   valuetextbox(1), textbox(1), $RSliderStyle
rslider  bounds( 55, 25, 75, 75), text("Filter"),     channel("NseBW"), range(0.0005,1,0.001,0.35), valuetextbox(1), textbox(1), $RSliderStyle
checkbox bounds(120, 53,120, 12), channel("NseFllw"), value(0), text("Follow Modulator"), fontcolour("white")
}

;LFO
image    bounds(250,120,240,110), colour( 70, 90, 90), outlinecolour("white"), outlinethickness(2), shape("sharp"), plant("lfo"){
line     bounds( 85,  6, 70, 14)
label    bounds( 85,  8, 70, 10), text("L  .  F  .  O"), textcolour(white)
rslider  bounds(  0, 25, 75, 75), text("Mix."), channel("ModMix"), range(0,     1, 1),  valuetextbox(1), textbox(1), $RSliderStyle
rslider  bounds( 55, 25, 75, 75), text("Depth"), channel("ModDep"), range(0, 1.000, 0.1,0.5,0.001),  valuetextbox(1), textbox(1), $RSliderStyle
rslider  bounds(110, 25, 75, 75), text("Rate"), channel("ModRte"), range(0, 32.00, 3,0.5),  valuetextbox(1), textbox(1), $RSliderStyle
rslider  bounds(165, 25, 75, 75), text("Kyb.Follow"), channel("ModRteKyb"), range(-4, 4.00, 0),  valuetextbox(1), textbox(1), $RSliderStyle
}


;STEREO
image    bounds(495,120,130,110), colour( 70, 90, 90), outlinecolour("white"), outlinethickness(2), shape("sharp"), plant("stereo"){
line     bounds( 26,  6, 78, 14)
label    bounds( 26,  8, 78, 10), text("S  T  E  R  E  O"), textcolour(white)
rslider  bounds(  0, 25, 75, 75), text("Dry/Wet"),  channel("StMix"), range(0,1.00,0.5),  valuetextbox(1), textbox(1), $RSliderStyle
rslider  bounds( 55, 25, 75, 75), text("Width"),  channel("StWidth"), range(0,0.2,0.01,0.5,0.001),  valuetextbox(1), textbox(1), $RSliderStyle
}

;REVERB
image    bounds(630,120,130,110), colour( 70, 90, 90), outlinecolour("white"), outlinethickness(2), shape("sharp"), plant("reverb"){
line     bounds( 25,  6, 80, 14)
label    bounds( 25,  8, 80, 10), text("R  E  V  E  R  B"), textcolour(white)
rslider  bounds(  0, 25, 75, 75), text("Dry/Wet"),  channel("RvbDryWet"), range(0,1.000,0.3),  valuetextbox(1), textbox(1), $RSliderStyle
rslider  bounds( 55, 25, 75, 75), text("Size"),     channel("RvbSize"),   range(0,1,0.55),     valuetextbox(1), textbox(1), $RSliderStyle
}

;PRESETS
image    bounds(765,120,175,110), colour( 70, 90, 90), outlinecolour("white"), outlinethickness(2), shape("sharp"), plant("presets"){
line     bounds( 44,  6, 88, 14)
label    bounds( 44,  8, 88, 10), text("P  R  E  S  E  T  S"), textcolour(white)
label    bounds( 68, 34, 40, 11), text("Select"), fontcolour(white)
combobox bounds( 68, 45, 40, 15), channel("preset"), value(1), text("1","2","3","4","5","6","7","8","9","10","11","12","13")
}

keyboard bounds( 5, 235,935, 80)

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100
ksmps 		= 	64
nchnls 		= 	2
0dbfs		=	1

gisine	ftgen	0,0,4096,10,1	;A SINE WAVE. USED BY THE LFOs.
massign	0,2
gidetuning	ftgen	0,0,128,21,1,1			; random array used for fixing unique detune values for each note
giDryMap	ftgen	0,0,4096,7,1,2048,1,2048,0	; dry mixer control mapping
giWetMap	ftgen	0,0,4096,7,0,2048,1,2048,1	; wet mixer control mapping
gaSendL,gaSendR	init	0				; initialise variable used for sending audio between instruments
giImp		ftgen	0,0,4097,9,0.5,1,0		; shape for the hammer inpulse
gistereo	ftgen	0,0,256,21,1,1			; random array used for fixing unique stereo values for each note
gidetune	ftgen	0,0,256,21,1,1			; random array used for fixing unique detune values for each note

giscale	ftgen	0,0,128,-7,-1,128,1
gaSendM,gaSendL,gaSendR	init	0


opcode	Oscil1a,a,iii					; an oscillator that plays a single cycle of an audio waveform at a-rate
 iamp,ifrq,ifn	xin
 aptr	line	0,1/ifrq,1
 asig	tablei	aptr,ifn,1
 aenv	linseg	1,1/ifrq,1,0.001,0
	xout	asig*iamp*aenv
endop



instr	1	; Read in widgets
 iporttime	=	0.05
 gkmod		chnget	"mod"
 gkmod		port	gkmod,iporttime
 gkNdxVel	chnget	"NdxVel"
 gkDur		chnget	"Dur"
 gkFiltFund	chnget	"FiltFund"
 gkNdxCurve	chnget	"NdxCurve"
 gkLPF		chnget	"LPF"
 gkModDep	chnget	"ModDep"
 gkModRte	chnget	"ModRte"
 gkModRteKyb	chnget	"ModRteKyb"
 gkModMix	chnget	"ModMix"
 gkSustain	chnget	"Sustain"
 gkCarKyb	chnget	"CarKyb"
 gkStWidth	chnget	"StWidth"
 gkStWidth	init	0.01
 gkStMix	chnget	"StMix"
 gkDryWet	chnget	"RvbDryWet"
 gkDry		table	gkDryWet,giDryMap,1		; map dry/wet control
 gkWet		table	gkDryWet,giWetMap,1		;
 gkRvbSize	chnget	"RvbSize"
 gkDetune	chnget	"Detune"
 gkDtnMix	chnget	"DtnMix"
 gkAmp		chnget	"Amp"
 gkAmp		port	gkAmp,iporttime
 gkAttTim	chnget	"AttTim"
 gkAttVel	chnget	"AttVel"
 gkNseAmp	chnget	"NseAmp"
 gkNseBW	chnget	"NseBW"
 gkNseFllw	chnget	"NseFllw"
endin



instr	2	; Sound producing instrument. Triggered by MIDI notes.
 icps	cpsmidi
 inum	notnum
 iKybdScl	table	inum,giscale	; Keyboard scaling value. Note '0' maps to a value of -1, note 64 maps to a value of zero and note 127 maps to a value of 1.

 ; Amplitude Envelope
 idur	=	i(gkDur)
 iAmpCurve	=	-8
 iRelTim	=	(i(gkSustain)==1?idur:0.1)
 iAttVel	veloc	i(gkAttVel)*0.05,0
 iAttTim	=	iAttVel + i(gkAttTim)
 if iAttTim==0 then
  aAEnv	transegr	1,idur,iAmpCurve,0, iRelTim,iAmpCurve,0
 else
  aAEnv	transegr	0,iAttTim,iAmpCurve, 1,idur,iAmpCurve,0, iRelTim,iAmpCurve,0
 endif

 ; Key velocity to amplitude
 iAVel	veloc	0,0.1
 
 ; FM index
 iNdx	veloc	0,i(gkNdxVel)					; Key velocity to FM index 
 kIEnv	transeg	iNdx*octave(-iKybdScl*4),idur,-i(gkNdxCurve),0	; Index envelope. Amplitude influenced by 'Index' widget control and keyboard scaling (index reduced for higher notes, increased for lower notes)
 
 ; Carrier frequency keyboard scaling
 icar	=	1 * octave(iKybdScl*i(gkCarKyb))
 
 ; Carrier ratio modulation
 iModRte	table	inum,giscale
 iModRte	=	octave(iModRte*i(gkModRteKyb))
 kDepEnv	transeg	1,idur,-4,0
 amod	lfo	gkModDep*0.1*kDepEnv, gkModRte * iModRte, 0

 ; Noise bandpass filter cutoff as it respond to the 'Carrier Follow' switch 
 kcf	=	gkNseFllw==1?icps*gkmod:icps
 
 ; Noise amplitude keyboard following
 kNseAmp	=	octave(iKybdScl*-4)*gkNseAmp

 ; Main FM algorithm
 if gkNseAmp>0 then			; If noise amplitude is greater than zero...
  aNse	gauss	kNseAmp			; ... generate some gaussian noise
  aNse	butbp	aNse,kcf,kcf*gkNseBW	; bandpass filter the noise
  aNse	butbp	aNse,kcf,kcf*gkNseBW  	; and again
 else 
 aNse	=	0			; Otherwise no noise signal!
 endif
 idetune	table	inum,gidetune	; Read a detuning value from a random table
 asig		foscil	iAVel, icps*cent(-gkDetune*idetune), icar     +aNse, gkmod, kIEnv, gisine	; FM pair
 aModSig	foscil	iAVel, icps*cent(-gkDetune*idetune), icar+amod+aNse, gkmod, kIEnv, gisine	; FM pair with modulation
 asig		=	asig + (aModSig * gkModMix)							; Mix the two FM pairs.
 
 ; Auxilliary FM algorithm (used for detuning)
 if gkDtnMix>0&&gkDetune>0 then
  if gkNseAmp>0 then
   aNse	gauss	kNseAmp
   aNse	butbp	aNse,kcf,kcf*gkNseBW
   aNse	butbp	aNse,kcf,kcf*gkNseBW  
  else 
   aNse	=	0
  endif
  idetune	table	inum+128,gidetune	; Read a detuning value from a random table
  asig2		foscil	iAVel, icps*cent(gkDetune*idetune), icar     +aNse, gkmod, kIEnv, gisine	; Detuning applied to fundemental
  aModSig2	foscil	iAVel, icps*cent(gkDetune*idetune), icar+amod+aNse, gkmod, kIEnv, gisine
  asig2		=	asig2 + (aModSig2 * gkModMix)
  asig		=	asig + asig2*gkDtnMix
 endif
 
 ; Filter Fundemental
 if i(gkFiltFund)==1 then 				; If filter fundemental switch is active
  asig	butbr	asig,icps*icar,icps*icar*0.3		; Filter out fundemental
  asig	butbr	asig,icps*icar,icps*icar*0.3		; and again to make sure it is all gone
 endif
 
 ; Lowpass Filter
 if i(gkLPF)<32 then					; If lowpass filter is less than maximum...
  kCF	limit	icps*gkLPF,20,20000			; ...create the cutoff value in CPS based on fundemental and LPF ratio control. Limit to prevent out of range values. 
  asig	clfilt	asig,kCF,0,2				; Butterworth lowpass filter
 endif
 
 ; Amplitude Envelope
 asig	=	asig * aAEnv *gkAmp				; Apply amplitude envelope

 ; Stereo Effect
 iDlyTimL	table	inum,gistereo			; Read a delay time value from a random table based on note played
 iDlyTimR	table	inum+128,gistereo		; Read a different delay time value from a random table based on note played
 if gkStWidth>0&&gkStMix>0 then				; If 'width' is above zero and 'mix' is above zero...
  aL	vdelay	asig, iDlyTimL*gkStWidth*1000, 0.2*1000	; ...left channel delay
  aR	vdelay	asig, iDlyTimR*gkStWidth*1000, 0.2*1000	; right channel delay
  aL	ntrpol	asig, aL, gkStMix			; Mix delayed and dry signal
  aR	ntrpol	asig, aR, gkStMix			; 
  	outs	aL*gkDry,aR*gkDry			; Send to outputs
  gaSendL	=	gaSendL + aL			; Send to reverb
  gaSendR	=	gaSendR + aR
 else
 	outs	asig*gkDry,asig*gkDry			; Send to outputs
  gaSendL	=	gaSendL + asig			; Send to reverb
  gaSendR	=	gaSendR + asig
 endif
endin


instr	99	; Reverb (always on)
 iRvbHiCut	=	1000
 gaSendL	butlp	gaSendL,iRvbHiCut		; Remove some high frequencies
 gaSendR	butlp	gaSendR,iRvbHiCut 
 aL,aR	freeverb	gaSendL,gaSendR,gkRvbSize,1
 	outs		aL*gkWet*4, aR*gkWet*4
 	clear		gaSendL,gaSendR
endin

instr	1000
 gkpreset	chnget	"preset"
 ktrig		changed	gkpreset
 
 #define SET_PRESET(N'Amp'AttTim'AttVel'Dur'Sustain'mod'NdxVel'NdxCurve'CarKyb'DtnMix'Detune'LPF'FiltFund'NseAmp'NseBW'NseFllw'ModMix'ModDep'ModRte'ModRteKyb'StMix'StWidth'RvbDryWet'RvbSize)
 #
 if i(gkpreset)==$N then
  chnset	$Amp	  ,"Amp"	  
  chnset	$AttTim   ,"AttTim"    
  chnset	$AttVel   ,"AttVel"   
  chnset	$Dur      ,"Dur"
  chnset	$Sustain  ,"Sustain"
  chnset	$mod      ,"mod"  
  chnset	$NdxVel   ,"NdxVel"
  chnset	$NdxCurve ,"NdxCurve"
  chnset	$CarKyb   ,"CarKyb"
  chnset	$DtnMix   ,"DtnMix"
  chnset	$Detune   ,"Detune"   
  chnset	$LPF      ,"LPF"   
  chnset	$FiltFund ,"FiltFund" 
  chnset	$NseAmp   ,"NseAmp" 
  chnset	$NseBW    ,"NseBW"
  chnset	$NseFllw  ,"NseFllw"
  chnset	$ModMix   ,"ModMix"  
  chnset	$ModDep   ,"ModDep"   
  chnset	$ModRte   ,"ModRte"
  chnset	$ModRteKyb,"ModRteKyb"
  chnset	$StMix    ,"StMix"
  chnset	$StWidth  ,"StWidth"
  chnset	$RvbDryWet,"RvbDryWet"
  chnset	$RvbSize  ,"RvbSize"
 endif
 #
 if ktrig==1 then
  reinit SEND_PRESET
 endif
 SEND_PRESET:
 ;           N'Amp'AttTim'AttVel'Dur'Sustain'mod 'NdxVel'NdxCurve'CarKyb'DtnMix'Detune'LPF'FiltFund'NseAmp'NseBW'NseFllw'ModMix'ModDep'ModRte'ModRteKyb'StMix'StWidth'RvbDryWet'RvbSize)
 $SET_PRESET(1'0.5'0     '0     '12 '1      '2.29'1     '16      '0     '1     '1.5   '16 '1       '1000  '0.001'0      '1     '0.1   '3     '0        '0.5  '0.01   '0.3      '0.55   )
 $SET_PRESET(2'0.8'0     '0     '1.7'1      '5.04'0.55  '100     '0     '0     '0     '3.8'0       '0     '0.001'0      '0     '0.1   '3     '0        '0.5  '0.01   '0.1      '0.55   )
 $SET_PRESET(3'0.5'0.1   '0.5   '3.8'1      '1.00'2     '28      '0     '1     '15    '16 '0       '500   '0.0077'1     '1     '0.1   '3     '0        '0.5  '0.01   '0.3      '0.55   )
 $SET_PRESET(4'0.5'0     '0.006 '24 '1      '3.19'1     '15      '0     '0.47  '2.5   '16 '1       '0     '0.001'0      '1     '0.1   '0.33  '1.7      '0.5  '0.01   '0.3      '0.55   )
 $SET_PRESET(5'0.8'0     '1     '6.6'0      '1.12'1     '13      '-2.68 '1     '25    '3.8'0       '0     '0.001'0      '0     '0.1   '3     '0        '1    '0.02   '0.172    '0.21   )
 $SET_PRESET(6'3.25'0.1  '1     '1.28'0     '2.55'0.55  '35      '-2.3  '0     '1.5   '16 '1       '2000  '0.0025'0     '0     '0.1   '3     '0        '0.5  '0.01   '0.68     '0.93   )
 $SET_PRESET(7'4  '0.1   '1     '2.39'1     '2.55'0.55  '35      '-2.3  '0     '1.5   '16 '1       '16    '0.1262'0     '0     '0.1   '3     '0        '0    '0.01   '1.00     '0      )
 $SET_PRESET(8'1  '0     '0     '14.25'1    '6.97'0.55  '35      '-2.3  '0.13  '1.5   '4.78'1      '16    '0.0326'0     '1     '0.1   '3     '0        '0    '0.01   '0.6      '0      )
 $SET_PRESET(9'1.65'0    '0     '1.7'1      '1.20'0.55  '100     '0     '0     '0     '3.8'0       '0     '0.001'0      '0     '0.1   '3     '0        '0.5  '0.01   '0.1      '0.55   )
 $SET_PRESET(10'2'  0    '0     '1  '1      '2.15'0.55  '100     '0     '0.21  '12    '3.8'0       '0     '0.001'0      '0     '0.1   '3     '0        '0.5  '0.01   '0.35     '0.37   )
 $SET_PRESET(11'2  '0.1  '1     '3.44'1     '3.75'0.55  '100     '0     '0.21  '25    '16 '0       '0     '0.001'1      '0     '0.1   '3     '0        '0.5  '0.05   '0        '0.37   )
 $SET_PRESET(12'2  '0.1  '1     '1.45'1     '2.66'1.00  '16      '0     '0.21  '25    '16 '0       '0     '0.001'1      '0     '0.1   '3     '0        '0.5  '0.05   '0.6      '0.37   )
 $SET_PRESET(13'1.9'0    '0     '24  '1     '2.29'1.00  '23.25   '-4    '1     '1.5   '16 '1       '151   '0.0178'1     '1     '0.1   '3     '0        '0.5  '0.01   '0.3      '0.55   )
endin

</CsInstruments>

<CsScore>
i 1 0 3600		; Read in widgets
i 99 0 [3600*24*7]	; Reverb instrument
i 1000 0 [3600*24*7]	; presets
</CsScore>

</CsoundSynthesizer>
<Cabbage>
form caption("gbuzz Synth") size(855, 375), pluginid("GBuz") style("legacy")
image             bounds(  0,  0,855,295), colour("DarkSlateGrey"), outlinecolour("White"), outlinethickness(1), shape("sharp")	; main panel colouration    

;MAIN
image    bounds( 10,  6,495, 90), colour("DarkSlateGrey"), oulinecolour("white"), outlinethickness(2), shape("sharp"), plant("main"){	;main
label    bounds(  0,  5,495, 12), text(".  M  A  I  N  ."), fontcolour(white)
rslider  bounds(  0, 23, 62, 62), text("Level"),  colour(SlateGrey) channel("level"),  range(0,20, 10,0.5,0.001), textcolour(white)
rslider  bounds( 60, 23, 62, 62), text("Power"),  colour(SlateGrey) channel("mul"),    range(0, 0.97, 0.1),       textcolour(white)
rslider  bounds(120, 23, 62, 62), text("Lowest"), colour(SlateGrey) channel("lh"),     range(1, 40, 3,1,1),       textcolour(white)
rslider  bounds(180, 23, 62, 62), text("Number"), colour(SlateGrey) channel("nh"),     range(1,200,10,1,1),       textcolour(white)
rslider  bounds(240, 23, 62, 62), text("Jitter"), colour(SlateGrey) channel("jitter"), range(0, 1, 0.4),          textcolour(white)
rslider  bounds(300, 23, 62, 62), text("Pan"),    colour(SlateGrey) channel("pan"),    range(0, 1, 0.5),          textcolour(white)
label    bounds(368, 19, 55, 11), text("Waveform"), fontcolour(white)
combobox bounds(365, 30, 60, 18), channel("waveform"), value(3), text("cosine", "sine", "user")
label    bounds(368, 52, 60, 11), text("User Matrix"), fontcolour(white)
checkbox bounds(368, 63, 10, 10), channel("part1"), fontcolour(white), colour("lime"), value(1)
checkbox bounds(378, 63, 10, 10), channel("part2"), fontcolour(white), colour("lime"), value(0)
checkbox bounds(388, 63, 10, 10), channel("part3"), fontcolour(white), colour("lime"), value(1)
checkbox bounds(398, 63, 10, 10), channel("part4"), fontcolour(white), colour("lime"), value(0)
checkbox bounds(408, 63, 10, 10), channel("part5"), fontcolour(white), colour("lime"), value(0)
checkbox bounds(418, 63, 10, 10), channel("part6"), fontcolour(white), colour("lime"), value(0)
checkbox bounds(368, 73, 10, 10), channel("part7"), fontcolour(white), colour("lime"), value(1)
checkbox bounds(378, 73, 10, 10), channel("part8"), fontcolour(white), colour("lime"), value(0)
checkbox bounds(388, 73, 10, 10), channel("part9"), fontcolour(white), colour("lime"), value(0)
checkbox bounds(398, 73, 10, 10), channel("part10"), fontcolour(white), colour("lime"), value(1)
checkbox bounds(408, 73, 10, 10), channel("part11"), fontcolour(white), colour("lime"), value(1)
checkbox bounds(418, 73, 10, 10), channel("part12"), fontcolour(white), colour("lime"), value(0)
rslider  bounds(430, 23, 62, 62), text("Octave"),    colour(SlateGrey) channel("octave"),range(-8, 8, -4,1,1), textcolour(white)
}              

;POLYPHONY
image    bounds(510,  6,170, 90), colour("DarkSlateGrey"), oulinecolour("white"), outlinethickness(2), shape("sharp"), plant("polyphony"){	;polyphony
label    bounds(  0,  5,170, 12), text(".  P  O  L  Y  P  H  O  N  Y  ."), fontcolour(white)
button   bounds( 10, 24, 70, 25), text("poly", "mono"), channel("monopoly"), value(1) 
rslider  bounds(110, 26, 60, 60), text("Leg.Time"), channel("LegTim"), range(0.01, 15, 0.05, 0.25, 0.00001), textcolour(white) colour(SlateGrey)
label    bounds( 37, 54, 30, 11), text("Mode"), fontcolour(white)
combobox bounds( 10, 65, 90, 18), channel("PortMode"), value(1), text("Fixed", "Proportional")
}


;PITCH BEND
image   bounds(685,  6,160, 90), colour("DarkSlateGrey"), oulinecolour("white"), outlinethickness(2), shape("sharp"), plant("pitchbend"){	;pitch bend
label   bounds(  0,  5,160, 12), text(".  P  I  T  C  H     B  E  N  D  ."), fontcolour(white)
rslider  bounds( 15, 23, 60, 60), textcolour("white"), text("P.Bend"),    channel("PBend"),    range(-1,1, 0), colour(SlateGrey)
rslider  bounds( 90, 23, 60, 60), textcolour("white"), text("Bend Rng."), channel("BendRange"),   range(1, 24, 12, 1,1),   colour(SlateGrey)
}

;MULTIPLIER ENVELOPE
image    bounds( 10,101,305, 90), colour("DarkSlateGrey"), oulinecolour("white"), outlinethickness(2), shape("sharp"), plant("multiplierenvelope"){	;multiplier envelope
label    bounds(  0,  5,305, 12), text(".  M  U  L  T  I  P  L  I  E  R      E  N  V  E  L  O  P  E  ."), fontcolour(white)
rslider  bounds(  0, 23,  62, 62), text("Att"),  colour(SlateGrey) channel("MAtt"),range(0, 8.000, 0.01, 0.375,0.0001), textcolour(white)
rslider  bounds( 60, 23, 62, 62), text("Lev"),  colour(SlateGrey) channel("MLev"),range(0, 1.000, 0.6),                textcolour(white)
rslider  bounds(120, 23, 62, 62), text("Dec"),  colour(SlateGrey) channel("MDec"),range(0, 8.000, 3,  0.375,0.0001),   textcolour(white)
rslider  bounds(180, 23, 62, 62), text("Sus"),  colour(SlateGrey) channel("MSus"),range(0, 1.000, 0),                  textcolour(white)
rslider  bounds(240, 23, 62, 62), text("Rel"),  colour(SlateGrey) channel("MRel"),range(0, 8.000, 0.1,  0.375,0.0001), textcolour(white)
}

;LOW CUT                                                                  
image    bounds(320,101,125, 90), colour("DarkSlateGrey"), oulinecolour("white"), outlinethickness(2), shape("sharp"), plant("lowcut"){	;Low Cut
checkbox bounds( 30,  6, 70, 12), text("Low Cut") channel("LowCutOnOff"), fontcolour(white), colour("lime")
rslider  bounds(  0, 23, 62, 62), text("Low Cut"),   colour(SlateGrey) channel("LowCut"),   range(0, 30.00, 0,1,0.0011), textcolour(white)
rslider  bounds( 60, 23, 62, 62), text("Lo Poles"),  colour(SlateGrey) channel("LowPoles"), range(2, 30, 2,1,1),         textcolour(white)
}

;HIGH CUT
image    bounds(450,101,125, 90), colour("DarkSlateGrey"), oulinecolour("white"), outlinethickness(2), shape("sharp"), plant("highcut"){	;High Cut
checkbox bounds( 28,  6, 70, 12), text("High Cut") channel("HighCutOnOff"), fontcolour(white), colour("lime"), value(1)
rslider  bounds(  2, 23, 62, 62), text("High Cut"),  colour(SlateGrey) channel("HighCut"),   range(1, 100.00, 7,0.25,0.0001), textcolour(white)
rslider  bounds( 62, 23, 62, 62), text("Hi Poles"),  colour(SlateGrey) channel("HighPoles"), range(2, 30, 8,1,1),             textcolour(white)
}

;NOISE
image   bounds(580,101,125, 90), colour("DarkSlateGrey"), oulinecolour("white"), outlinethickness(2), shape("sharp"), plant("noise"){	;NOISE
label   bounds(  0,  5,125, 12), text(".  N  O  I  S  E  ."), fontcolour(white)
rslider bounds(  2, 23, 62, 62), text("Depth"), colour(SlateGrey) channel("NoiseAmp"),  range(0,300.00, 0, 1, 0.0001),     textcolour(white)
rslider bounds( 62, 23, 62, 62), text("Damp"),  colour(SlateGrey) channel("NoiseDamp"), range(15, 10000, 1000, 0.5, 0.01), textcolour(white)
}                 

;REVERB              
image   bounds(710,101,135, 90), colour("DarkSlateGrey"), oulinecolour("white"), outlinethickness(2), shape("sharp"), plant("reverb"){	;reverb
label   bounds(  0,  5,135, 12), text(".  R  E  V  E  R  B  ."), fontcolour(white)
rslider bounds(  5, 23, 60, 60), text("Mix"),  channel("RvbMix"),  range(0, 1, 0.3),   textcolour(white) colour(SlateGrey)
rslider bounds( 70, 23, 60, 60), text("Size"), channel("RvbSize"), range(0.3, 1, 0.7), textcolour(white) colour(SlateGrey)
}                       

;AMPLITUDE ENVELOPE
image    bounds( 10,196,305, 90), colour("DarkSlateGrey"), oulinecolour("white"), outlinethickness(2), shape("sharp"), plant("amplitudeenvelope"){	;amplitude envelope
label    bounds(  0,  5,305, 12), text(".  A  M  P  L  I  T  U  D  E        E  N  V  E  L  O  P  E  ."), fontcolour(white)
rslider  bounds(  0, 23, 62, 62), text("Att"),  colour(SlateGrey) channel("AAtt"),range(0, 8.000, 0, 0.375,0.0001),    textcolour(white)
rslider  bounds( 60, 23, 62, 62), text("Lev"),  colour(SlateGrey) channel("ALev"),range(0, 1.000, 1),                  textcolour(white)
rslider  bounds(120, 23, 62, 62), text("Dec"),  colour(SlateGrey) channel("ADec"),range(0, 8.000, 3,  0.375,0.0001),   textcolour(white)
rslider  bounds(180, 23, 62, 62), text("Sus"),  colour(SlateGrey) channel("ASus"),range(0, 1.000, 0),                  textcolour(white)
rslider  bounds(240, 23, 62, 62), text("Rel"),  colour(SlateGrey) channel("ARel"),range(0, 8.000, 0.05, 0.375,0.0001), textcolour(white)
}

;MODULATION
image   bounds(320,196,525, 90), colour("DarkSlateGrey"), oulinecolour("white"), outlinethickness(2), shape("sharp"), plant("modulation"){	;MODULATION
label   bounds(  0,  5,525, 12), text(".  M  O  D  U  L  A  T  I  O  N  ."), fontcolour(white)
rslider bounds( 22, 23, 62, 62), text("Mod.Depth"), colour(SlateGrey) channel("mod"),    range(0, 1.00, 0.7), textcolour(white)
rslider bounds( 82, 23, 62, 62), text("Delay"),     colour(SlateGrey) channel("VDel"),   range(0, 4.00, 0),   textcolour(white)
rslider bounds(142, 23, 62, 62), text("Rise"),      colour(SlateGrey) channel("VRis"),   range(0, 5.00, 1.5), textcolour(white)
rslider bounds(202, 23, 62, 62), text("Rate"),      colour(SlateGrey) channel("VRate"),  range(0,30.00, 2.7), textcolour(white)
rslider bounds(262, 23, 62, 62), text("Rate Rnd."), colour(SlateGrey) channel("VRatRnd"),range(0, 2.00, 0.5), textcolour(white)
rslider bounds(322, 23, 62, 62), text("Vib.Dep."),  colour(SlateGrey) channel("VibDep"), range(0, 1.00, 0.2), textcolour(white)
rslider bounds(382, 23, 62, 62), text("Trem.Dep."), colour(SlateGrey) channel("TremDep"),range(0, 0.5, 0.3),  textcolour(white)
rslider bounds(442, 23, 62, 62), text("Tone Dep."), colour(SlateGrey) channel("ToneDep"),range(0, 4.00, 0),   textcolour(white)
}

keyboard pos(0, 295), size(855, 80)

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0                                              
</CsOptions>

<CsInstruments>

sr 		= 	44100
ksmps 		= 	16
nchnls 		= 	2
0dbfs		=	1	;MAXIMUM AMPLITUDE
seed	0
massign	0,2

;Author: Iain McCurdy (2012)

gicos	ftgen	0,0,131072,9,1,1,90		;FUNCTION TABLE THAT STORES A SINGLE CYCLE OF A COSINE WAVE
gisine	ftgen	0,0,131072,10,1			;A SINE WAVE. USED BY THE LFOs.
giwave	ftgen	999,0,131073,10,1,0,1		;USER WAVEFORM

gasendL,gasendR	init	0

;FUNCTION TABLE USED TO RE-MAP THE RELATIONSHIP BETWEEN VELOCITY AND ATTACK TIME 
giattscl	ftgen	0,0,128,-16,2,128,-10,0.005
giNAttScl	ftgen	0,0,128,-16,8,128,-4,0.25

gkactive	init	0	; Will contain number of active instances of instr 3 when legato mode is chosen. NB. notes in release stage will not be regarded as active. 

opcode	FreqShifter,a,aki
	ain,kfshift,ifn	xin					;READ IN INPUT ARGUMENTS
	areal, aimag hilbert ain				;HILBERT OPCODE OUTPUTS TWO PHASE SHIFTED SIGNALS, EACH 90 OUT OF PHASE WITH EACH OTHER
	asin 	oscili       1,    kfshift,     ifn,          0
	acos 	oscili       1,    kfshift,     ifn,          0.25	
	;RING MODULATE EACH SIGNAL USING THE QUADRATURE OSCILLATORS AS MODULATORS
	amod1	=		areal * acos
	amod2	=		aimag * asin	
	;UPSHIFTING OUTPUT
	aFS	= (amod1 - amod2)
		xout	aFS				;SEND AUDIO BACK TO CALLER INSTRUMENT
endop

opcode	SsplinePort,k,KkkO												;DEFINE OPCODE
	knum,kporttime,kcurve,iopt	xin										;READ IN INPUT ARGUMENTS
	kout	init	i(knum)												;INITIALISE TO OUTPUT VALUE (PORTAMENTO APPLIED VALUE)
	ktrig	changed	knum												;...GENERATE A TRIGGER IS A NEW NOTE NUMBER IS GENERATED (FROM INSTR. 1)
	 if ktrig=1 then												;IF A NEW (LEGATO) NOTE HAS BEEN PRESSED 
	  reinit	S_CURVE												;BEGIN A REINITIALISATION PASS FROM LABEL
	 endif														;END OF CONDITIONAL BRANCH
	 S_CURVE:													;A LABEL. REINITIALISATION BEGINS FROM HERE.
	if iopt!=0 then													;IF ABSOLUTE/PROPORTIONAL SWITCH IS ON... (I.E. PROPORTIONAL)
	 idiff	=	1+abs(i(knum)-i(kout))									;ABSOLUTE DIFFERENCE BETWEEN OLD NOTE AND NEW NOTE IN STEPS (+ 1)
	 kporttime	=	kporttime*idiff										;SCALE PORTAMENTO TIME ACCORDING TO THE NOTE GAP
	endif														;END OF CONDITIONAL BRANCH
	imid	=	i(kout)+((i(knum)-i(kout))/2)								;SPLINE MID POINT VALUE
	isspline	ftgentmp	0,0,4096,-16,i(kout),4096*0.5,i(kcurve),imid,(4096/2)-1,-i(kcurve),i(knum)	;GENERATE 'S' SPLINE
	kspd	=	i(kporttime)/kporttime										;POINTER SPEED AS A RATIO (WITH REFERENCE TO THE ORIGINAL DURATION)
	kptr	init	0												;POINTER INITIAL VALUE	
	kout	tablei	kptr,isspline											;READ VALUE FROM TABLE
	kptr	limit	kptr+((ftlen(isspline)/(i(kporttime)*kr))*kspd), 0, ftlen(isspline)-1				;INCREMENT THE POINTER BY THE REQUIRED NUMBER OF TABLE POINTS IN ONE CONTROL CYCLE AND LIMIT IT BETWEEN FIRST AND LAST TABLE POINT - FINAL VALUE WILL BE HELD IF POINTER ATTEMPTS TO EXCEED TABLE DURATION
	rireturn													;RETURN FROM REINITIALISATION PASS
	 		xout	kout                                                                                    ;SEND PORTAMENTOED VALUES BACK TO CALLER INSTRUMENT
endop

instr	1	; read in widgets
	kporttime	linseg	0,0.001,0.05

	gkmul		chnget	"mul"
	gklh		chnget	"lh"
	gknh		chnget	"nh"
	gkjitter	chnget		"jitter"
	gkwaveform	chnget	"waveform"
	gkoctave	chnget	"octave"
	gkpart1		chnget	"part1"
	gkpart2		chnget	"part2"
	gkpart3		chnget	"part3"
	gkpart4		chnget	"part4"
	gkpart5		chnget	"part5"
	gkpart6		chnget	"part6"
	gkpart7		chnget	"part7"
	gkpart8		chnget	"part8"
	gkpart9		chnget	"part9"
	gkpart10	chnget	"part10"
	gkpart11	chnget	"part11"
	gkpart12	chnget	"part12"
	ktrig	changed	gkpart1,gkpart2,gkpart3,gkpart4,gkpart5,gkpart6,gkpart7,gkpart8,gkpart9,gkpart10,gkpart11,gkpart12
	if ktrig==1 then
	reinit USER_WAVEFORM
	 endif
	USER_WAVEFORM:
	 giwave	ftgen	999,0,131073,10,i(gkpart1),i(gkpart2),i(gkpart3),i(gkpart4),i(gkpart5),i(gkpart6),i(gkpart7),i(gkpart8),i(gkpart9),i(gkpart10),i(gkpart11),i(gkpart12)		;USER WAVEFORM
	rireturn
	
	gkmonopoly	chnget	"monopoly"
	printk2	gkmonopoly
	gkLegTim	chnget	"LegTim"
	gkPortMode	chnget	"PortMode"
	
	gkpan		chnget	"pan"
	gklevel		chnget	"level"
	gkRvbMix	chnget	"RvbMix"
	gkRvbSize	chnget	"RvbSize"

	gkMAtt	chnget	"MAtt"		; multiplier envelope
	gkMLev	chnget	"MLev"
	gkMDec	chnget	"MDec"
	gkMSus	chnget	"MSus"
	gkMRel	chnget	"MRel"

	gkAAtt	chnget	"AAtt"		; amplitude envelope
	gkALev	chnget	"ALev"
	gkADec	chnget	"ADec"
	gkASus	chnget	"ASus"
	gkARel	chnget	"ARel"

	gkLowCutOnOff	chnget	"LowCutOnOff"
	gkLowCut	chnget	"LowCut"
	gkLowPoles	chnget	"LowPoles"
	gkHighCutOnOff	chnget	"HighCutOnOff"
	gkHighCut	chnget	"HighCut"
	gkHighPoles	chnget	"HighPoles"
	
	gkmod		chnget	"mod"		; modulation
	gkVDel		chnget	"VDel"
	gkVRis		chnget	"VRis"
	gkVRate		chnget	"VRate"
	gkVRatRnd	chnget	"VRatRnd"
	gkVibDep	chnget	"VibDep"
	gkTremDep	chnget	"TremDep"
	gkToneDep	chnget	"ToneDep"

	gkNoiseAmp	chnget	"NoiseAmp"	; noise
	gkNoiseDamp	chnget	"NoiseDamp"
	
	gkPBend		chnget	"PBend"					; pitch bend
 	kMOUSE_DOWN_LEFT       chnget  "MOUSE_DOWN_LEFT"
 	kOff	init	0
 	if trigger(kMOUSE_DOWN_LEFT,0.5,1)==1 then
  	 chnset	kOff,"PBend"
 	endif
	gkBendRange	chnget	"BendRange"
	gkPchBend	portk	(gkPBend)*gkBendRange, kporttime
endin

instr	2	;triggered via MIDI
	gkNoteTrig	init	1				;at the beginning of a new note set note trigger flag to '1'
	inum		notnum					;read in midi note number
	givel		veloc	0,1				;read in midi note velocity
	gknum	=	inum					;update a global krate variable for note pitch

                                                                                             
	;============================================================================================================================================================
	if i(gkmonopoly)==0 then				; if we are *not* in legato mode...
	 
	 ; METHOD 1: calling sub-instruments using event_1, fractional p1s and turnoff2s. (problematic on windows)   
	 ;	event_i	"i",p1+1+(inum*0.001),0,-1,inum		; call sound producing instr
	 ;krel	release						; release flag (1 when note is released, 0 otherwise)
	 ;if krel==1 then					; when note is released...
	 ; turnoff2	p1+1+(inum*0.001),4,1			; turn off the called instrument
	 ;endif							; end of conditional
	 
	 ; METHOD 2: using subinstr (problematic on windows and mac) 
	 ;a1,a2	subinstr	3,inum
	 ;	outs		a1,a2

	 ; METHOD 3: all instr code within the same instrument (the safest option on windows and mac, if rather inelegant)
	 kporttime	linseg	0,0.001,1		;portamento time function rises quickly from zero to a held value
	 kglisstime	=	kporttime*gkLegTim	;scale portamento time function with value from GUI knob widget
         
	 /* MODULATION */
	krate	randomi	gkVRate-gkVRatRnd,gkVRate+gkVRatRnd,1,1
	kModRise	linseg	0,i(gkVDel)+0.0001, 0, i(gkVRis)+0.0001, 1
	kmod	lfo	gkmod*kModRise,krate,0
	 
	 kporttime	linseg		0,0.001,1		;CREATE A FUNCTION  THAT RISES RAPIDLY FROM ZERO TO A FIXED VALUE THAT WILL BE USED FOR PORTAMENTO TIME 
	 
	 ;------------------------------------------------------------------------------------------------------------
	 ;PITCH JITTER (THIS WILL BE USED TO ADD HUMAN-PLAYER REALISM)
	 ;------------------------------------------------------------------------------------------------------------
	 ;				AMP | MIN_FREQ. | MAX_FREQ
	 kPitchJit	jitter		0.05*gkjitter*4,     1,         20
         
	 ;------------------------------------------------------------------------------------------------------------
	 ;AMPLITUDE JITTER (THIS WILL BE USED TO ADD HUMAN-PLAYER REALISM)
	 ;------------------------------------------------------------------------------------------------------------
	 ;				AMP | MIN_FREQ. | MAX_FREQ
	 kAmpJit		jitter		0.1*gkjitter*4,     0.2,        1
	 kAmpJit		=		kAmpJit+1			;OFFSET SO IT MODULATES ABOUT '1' INSTEAD OF ABOUT ZERO
	 
	 knum		=		inum+kPitchJit			;DERIVE K-RATE NOTE NUMBER VALUE INCORPORATING PITCH BEND, VIBRATO, AND PITCH JITTER	
         
	 /* OSCILLATOR */
	 kmul		portk		gkmul, kporttime*0.1
	 ;kMulEnv		linsegr		0, i(gkMAtt)+0.0001, i(gkMLev), i(gkMDec)+0.0001, i(gkMSus), i(gkMRel)+0.0001, 0
	 kMulEnv		expsegr		0.001, i(gkMAtt)+0.0001, i(gkMLev)+0.001, i(gkMDec)+0.0001, i(gkMSus)+0.001, i(gkMRel)+0.0001, 0.001
	 kMulEnv		=		kMulEnv + 0.001		; offset
	 kmul		=		kmul+kMulEnv+(kmod*gkToneDep)
	 kmul		limit		kmul,0,0.9
	 knum	=	knum + gkPchBend + (kmod*gkVibDep)
	 ifn	=	( i(gkwaveform) < 3 ? (gicos+i(gkwaveform)-1) : giwave)
	 knum	=	knum+(gkoctave*12)
	 asig		gbuzz		(kAmpJit*0.1)*(1+(kmod*gkTremDep*0.9)), cpsmidinn(knum), gknh, gklh, kmul, ifn;gicos+i(gkwaveform)-1
	                                                                                                                
	 /* NOISE */
	 kNoiseAmp	expcurve	kmul,40
	 kNoiseAmp	scale		kNoiseAmp,2,0.1
	 anoise		gauss		kNoiseAmp*gkNoiseAmp
	 anoise		butlp		anoise,gkNoiseDamp
	 asig		=		asig * (1+anoise)

	 /* LOW CUT / HIGH CUT FILTERS */
	 ;FILTER
	 if gkLowCutOnOff=1 then
	  kLowCut	portk	gkLowCut,kporttime*0.1
	  kLowCut	limit	cpsmidinn(knum)*kLowCut,20,sr/2
	  ktrig		changed	gkLowPoles
	  if ktrig=1 then
	   reinit	RESTART_LOWCUT
	  endif
	  RESTART_LOWCUT:                                    
	  asig		clfilt	asig,kLowCut,1,i(gkLowPoles)
	  rireturn
	 endif
	 if gkHighCutOnOff==1 then
	  kHighCut	portk	gkHighCut,kporttime*0.1
	  kHighCut	limit	cpsmidinn(knum)*kHighCut,20,sr/2
	  ktrig		changed	gkHighPoles                                         
	  if ktrig=1 then              
	   reinit	RESTART_HIGHCUT
	  endif
	  RESTART_HIGHCUT:
	  asig		clfilt	asig,kHighCut,0,i(gkHighPoles)
	  rireturn
	 endif

	 aenv		linsegr		0,i(gkAAtt)+0.0001,i(gkALev),i(gkADec),i(gkASus),i(gkARel),0			;AMPLITUDE ENVELOPE
	 asig		=		asig * aenv
	 klevel		portk		gklevel,kporttime*0.1
	 kpan		portk		gkpan,kporttime*0.1
	 kRvbMix	portk		gkRvbMix,kporttime*0.1
	 aL,aR		pan2		asig*klevel,kpan		;scale amplitude level and create stereo panned signal
	 		outs		aL*(1-gkRvbSize), aR*(1-gkRvbSize)		;SEND AUDIO TO THE OUTPUTS
	 gasendL		=		gasendL+aL*kRvbMix
	 gasendR		=		gasendR+aR*kRvbMix
	;============================================================================================================================================================

	
	
	 
	 
	else							;otherwise... (i.e. legato mode)
	 ;iactive	active p1+1				;check to see if there is already a note active...
	 iactive	=	i(gkactive)			;number of active notes of instr 3 (note in release are disregarded)
	 if iactive==0 then					;...if no notes are active
	  event_i	"i",p1+1,0,-1				;...start a new held note
	 endif
	endif
endin

instr	3	;gbuzz instrument. MIDI notes are directed here.
	kporttime	linseg	0,0.001,1		;portamento time function rises quickly from zero to a held value
	kglisstime	=	kporttime*gkLegTim	;scale portamento time function with value from GUI knob widget

	/* MODULATION */
	krate	randomi	gkVRate-gkVRatRnd,gkVRate+gkVRatRnd,1,1
	if gkNoteTrig==1 then
	 reinit RESTART_MOD_ENV
	endif
	RESTART_MOD_ENV:
	kModRise	linseg	0,i(gkVDel)+0.0001, 0, i(gkVRis)+0.0001, 1
	kmod	lfo	gkmod*kModRise,krate,0
	rireturn
	gkNoteTrig	=	0			;reset new-note trigger (in case it was '1')
	
	if i(gkmonopoly)==1 then			;if we are in legato mode...
	 krel	release					;sense when  note has been released
	 gkactive	=	1-krel			;if note is in release, gkactive=0, otherwise =1
	 knum	SsplinePort	gknum,kglisstime,1,i(gkPortMode)-1
	 kactive	active	p1-1			;...check number of active midi notes (previous instrument)
	 if kactive==0 then				;if no midi notes are active...
	  turnoff					;... turn this instrument off
	 endif
	else						;otherwise... (polyphonic / non-legato mode)
	 knum	=	p4		 		;pitch equal to the original note pitch
	endif
	ivel	init	givel
		
	;------------------------------------------------------------------------------------------------------------
	;PITCH JITTER (THIS WILL BE USED TO ADD HUMAN-PLAYER-LIKE INSTABILITY)
	;------------------------------------------------------------------------------------------------------------
	;				AMP | MIN_FREQ. | MAX_FREQ
	kPitchJit	jitter		0.05*gkjitter*4,     1,         20

	;------------------------------------------------------------------------------------------------------------
	;AMPLITUDE JITTER (THIS WILL BE USED TO ADD HUMAN-PLAYER-LIKE INSTABILITY)
	;------------------------------------------------------------------------------------------------------------
	;				AMP | MIN_FREQ. | MAX_FREQ
	kAmpJit		jitter		0.1*gkjitter*4,     0.2,        1
	kAmpJit		=		kAmpJit+1			;OFFSET SO IT MODULATES ABOUT '1' INSTEAD OF ABOUT ZERO
	
	knum		=		knum+kPitchJit			;DERIVE K-RATE NOTE NUMBER VALUE INCORPORATING PITCH BEND, VIBRATO, AND PITCH JITTER	

	/* OSCILLATOR */
	kmul		portk		gkmul, kporttime*0.1
	;kMulEnv		linsegr		0, i(gkMAtt)+0.0001, i(gkMLev), i(gkMDec)+0.0001, i(gkMSus), i(gkMRel)+0.0001, 0
	kMulEnv		expsegr		0.001, i(gkMAtt)+0.0001, i(gkMLev)+0.001, i(gkMDec)+0.0001, i(gkMSus)+0.001, i(gkMRel)+0.0001, 0.001
	kMulEnv		=		kMulEnv + 0.001		; offset
	kmul		=		kmul+kMulEnv+(kmod*gkToneDep)
	kmul		limit		kmul,0,0.9
	knum	=	knum + gkPchBend + (kmod*gkVibDep)
	ifn	=	( i(gkwaveform) < 3 ? (gicos+i(gkwaveform)-1) : giwave)
	asig		gbuzz		(kAmpJit*0.1)*(1+(kmod*gkTremDep*0.9)), cpsmidinn(knum+(gkoctave*12)), gknh, gklh, kmul, ifn;gicos+i(gkwaveform)-1
	
	/* NOISE */
	kNoiseAmp	expcurve	kmul,40
	kNoiseAmp	scale		kNoiseAmp,2,0.1
	anoise		gauss		kNoiseAmp*gkNoiseAmp                                                                      
	anoise		butlp		anoise,gkNoiseDamp
	asig		=		asig * (1+anoise)
	
	/* LOW CUT / HIGH CUT FILTERS */
	;FILTER
	if gkLowCutOnOff=1 then
	 kLowCut	portk	gkLowCut,kporttime*0.1
	 kLowCut	limit	cpsmidinn(knum)*kLowCut,20,sr/2
	 ktrig		changed	gkLowPoles
	 if ktrig=1 then
	  reinit	RESTART_LOWCUT
	 endif
	 RESTART_LOWCUT:
	 asig		clfilt	asig,kLowCut,1,i(gkLowPoles)
	endif
	if gkHighCutOnOff==1 then
	 kHighCut	portk	gkHighCut,kporttime*0.1
	 kHighCut	limit	cpsmidinn(knum)*kHighCut,20,sr/2
	 ktrig		changed	gkHighPoles
	 if ktrig=1 then              
	  reinit	RESTART_HIGHCUT
	 endif
	 RESTART_HIGHCUT:
	 asig		clfilt	asig,kHighCut,0,i(gkHighPoles)
	 rireturn
	endif
            
	aenv		linsegr		0,i(gkAAtt)+0.0001,i(gkALev),i(gkADec),i(gkASus),i(gkARel),0			;AMPLITUDE ENVELOPE
	asig		=		asig * aenv
	klevel		portk		gklevel,kporttime*0.1
	kpan		portk		gkpan,kporttime*0.1
	kRvbMix	portk		gkRvbMix,kporttime*0.1
	aL,aR		pan2		asig*klevel,kpan		;scale amplitude level and create stereo panned signal
			outs		aL*(1-gkRvbSize), aR*(1-gkRvbSize)		;SEND AUDIO TO THE OUTPUTS
	gasendL		=		gasendL+aL*kRvbMix
	gasendR		=		gasendR+aR*kRvbMix
endin



instr	5	;reverb
	if gkRvbMix==0 kgoto SKIP_REVERB
	aL,aR	reverbsc	gasendL,gasendR,gkRvbSize,12000
		outs		aL,aR
		clear		gasendL,gasendR
	SKIP_REVERB:
endin


</CsInstruments>

<CsScore>
i 1 0 3600			; read widgets
i 5 0 3600			; reverb
f 0 3600
</CsScore>

</CsoundSynthesizer>; HardSync.csd
; Written by Iain McCurdy 2016

; This is an implementation of hard sync between two oscillators
; Two oscillators are established, one is referred to as the master and the other as the slave.
; The slave oscillator reads a waveform, the shape of which is chosen by the user in the 'Waveform' panel, and its output is send to the audio output.
; However the phase of this oscillator can be reset by the period of the master oscillator, 
;   forcing the slave to begin re-reading its waveform from the beginning of the waveshape.
; This action can naturally induce discontinuities in the audio output and in the digital domain this is liable to cause aliasing.
; To prevent this the slave oscillator audio output needs to be amplitude enveloped using a window function in order to ramp is down to zero whenever a resync. occurs.
; This window function is therefore cycled using the phase pointer of the master oscillator.
z
; Controls
; --------
; Waveform	-	waveform used by the slave oscillator

;  (Voice 2)
; On/Off	-	turns a second master/slave oscillator pairing on or off
; Level		-	amplitude level of the second oscillator pairing
; Semitones	-	transposition of the 2nd voice in semitones
; Cents		-	transposition of the 2nd voice in cents

;  (Amplitude Envelope)
; Attack	-	attack time in seconds
; Decay		-	decay time in seconds
; Sustain	-	sustain level
; Release	-	release time in seconds

;  (Mixer)
; Velocity	-	amount of influence of note velocity upon sync trigger envelope and output amplitude
; Level		-	output level control

;  (Presets)
; Choose from 10 factory presets

;  (Reverb)
; Width		-	stereo width derived from a stereo modulating delay effect, i.e. chorus
; Rvb.Mix	-	dry/wet reverb mix
; Rvb.Size	-	size/length of the reverb effect

;  (Sync Trigger Frequency Envelope), i.e. master frequency
; Attack	-	attack time in seconds
; Decay		-	decay time in seconds
; Sustain	-	sustain level
; Release	-	release time in seconds
; Minimum	-	minimum level of the envelope (start and end values)
; Maximum	-	maximum level of the envelope (attack and sustain levels)
; Env<-->Man	-	morph between envelope controlling sync retrigger frequency
; Manual	-	manual frequency control

;  (Sync Trigger LFO)
; LFO Waveshape
; Depth		-	absolute maximum amplitude of the LFO
; Rate		-	rate of the LFO
; Delay		-	time delay before LFO begins to have an influence
; Rise		-	time it takes the LFO to rise to maximum amplitude
; MONO/POLY	-	sets whether a single LFO is used for all notes played (MONO) or whether each note get its own LFO

<Cabbage>
form caption("Hard Sync Synth") size(1175, 325), pluginid("HdSy") style("legacy")

; main waveform
image    bounds(  5,  0,135,115), plant("waveform"), colour(0,0,0,0), outlinecolour("white"), outlinethickness(1), shape("sharp")
{           
label    bounds(  0,  3,135, 12), text("W a v e f o r m")
combobox bounds(  5, 30, 80,20), channel("Waveform"), text("Sine","Triangle","Square","Sawtooth","Pulse","Half-Sine","Add 1","Add 2","Add 3","Add 4","Add 5","Add 6","Add 7"), value(3)
gentable bounds( 85, 30, 40,20), tablenumber(1000), identchannel("Waveform_ID"), zoom(-1), amprange(1000,-1,1)
}

; voice 2
image    bounds(145,  0,235,115), plant("voice2"), colour(0,0,0,0), outlinecolour("white"), outlinethickness(1), shape("sharp")
{
label    bounds(  0,  3,235, 12), text("V o i c e    2")
checkbox bounds( 10, 25,100, 15), text("On/Off"), channel("Voice2OnOff"), value(1)
rslider  bounds( 20, 47, 60, 60), channel("V2Lev"), text("Level"), range(0,1,1)
rslider  bounds( 75, 15, 90, 90), channel("SubSemis"), text("Semitones"), valuetextbox(1), textbox(1), range(-24,24,-24,1,1)
rslider  bounds(145, 15, 90, 90), channel("SubCents"), text("Cents"), valuetextbox(1), textbox(1), range(-100,100,0,1,1)
}                                                                                       

; amplitude envelope
image    bounds(385,  0,300,115), plant("AmpEnvelope"), colour(0,0,0,0), outlinecolour("white"), outlinethickness(1), shape("sharp")
{
label   bounds(  0,  3,300, 12), text("A m p l i t u d e    E n v e l o p e")
rslider bounds(  0,  15,90,90), channel("AAtt"), text("Attack"),  valuetextbox(1), textbox(1), range(0,8,0.05,0.5,0.001)
rslider bounds( 70,  15,90,90), channel("ADec"), text("Decay"),   valuetextbox(1), textbox(1), range(0,8,0.5,0.5,0.001)
rslider bounds(140,  15,90,90), channel("ASus"), text("Sustain"), valuetextbox(1), textbox(1), range(0,1,1,1,0.01)
rslider bounds(210,  15,90,90), channel("ARel"), text("Release"), valuetextbox(1), textbox(1), range(0,8,5,0.5,0.001)
}

; mixer
image    bounds(690,  0,160,115), plant("AmpEnvelope"), colour(0,0,0,0), outlinecolour("white"), outlinethickness(1), shape("sharp")
{
label    bounds(  0,  3,160, 12), text("M i x e r")
rslider  bounds(  0, 15,90,90), channel("Vel"), text("Velocity"), valuetextbox(1), textbox(1), range(0,1,0.5,0.5,0.001)
rslider  bounds( 70, 15,90,90), channel("Lev"), text("Level"),    valuetextbox(1), textbox(1), range(0,1,0.05,0.5,0.001)
}

; presets
image      bounds(855,  0, 80,115), colour(0,0,0,0), outlinecolour("white"), outlinethickness(1), shape("sharp"), plant("presets"){
label      bounds(  0,  3, 80, 12), text("P r e s e t s")
combobox   bounds( 10, 35, 60, 18), channel("preset"), value(1), text("1", "2", "3", "4", "5", "6", "7", "8", "9", "10")
}

; stereo processing
image    bounds(940,  0,230,115), plant("StereoProcessing"), colour(0,0,0,0), outlinecolour("white"), outlinethickness(1), shape("sharp")
{
label    bounds(  0,  3,230, 12), text("R e v e r b")
rslider bounds(  0,  15,90,90), channel("StMix"), text("Width"),      valuetextbox(1), textbox(1), range(0,1,1)
rslider bounds( 70,  15,90,90), channel("RvbMix"), text("Rvb.Mix"),   valuetextbox(1), textbox(1), range(0,1,0.2)
rslider bounds(140,  15,90,90), channel("RvbSize"), text("Rvb.Size"), valuetextbox(1), textbox(1), range(0,1,0.8)
}

; sync trigger envelope
image   bounds(  5,120,740,115), plant("SyncEnvelope"), colour(0,0,0,0), outlinecolour("white"), outlinethickness(1), shape("sharp")
{
label   bounds(  0,  3,740, 12), text("S y n c .    T r i g g e r    E n v e l o p e")
rslider bounds(  0, 15, 90, 90), channel("Attack"), text("Attack"),   valuetextbox(1), textbox(1), range(0,8,2,0.5,0.001)
rslider bounds( 70, 15, 90, 90), channel("Decay"), text("Decay"),     valuetextbox(1), textbox(1), range(0,8,5,0.5,0.001)
rslider bounds(140, 15, 90, 90), channel("Sustain"), text("Sustain"), valuetextbox(1), textbox(1), range(0,1,1,1,0.01)
rslider bounds(210, 15, 90, 90), channel("Release"), text("Release"), valuetextbox(1), textbox(1), range(0,8,5,0.5,0.001)
rslider bounds(280, 15, 90, 90), channel("Minimum"), text("Minimum"), valuetextbox(1), textbox(1), range(-8, 4,-0.6,1,0.01)
rslider bounds(350, 15, 90, 90), channel("Maximum"), text("Maximum"), valuetextbox(1), textbox(1), range(-8, 4,-0.7,1,0.01)
label   bounds(440, 30,215, 14), text("Env<-->Man")
hslider bounds(440, 30,215, 60), channel("SyncEnvMan"), range(0,1,0)		;, valuetextbox(1), text("Env<>Man")
rslider bounds(650, 15, 90, 90), channel("SyncRate"), text("Manual"), valuetextbox(1), textbox(1), range(1,4000,440,0.5,0.1)
}

; sync trigger lfo
image    bounds(750,120,420,115), plant("SyncLFO"), colour(0,0,0,0), outlinecolour("white"), outlinethickness(1), shape("sharp")
{
label    bounds(  0,  3,420, 12), text("S y n c    T r i g g e r    L F O")
combobox bounds(  5, 30, 80, 20), channel("LFO_Shape"), text("Sine","Triangle","Square","Saw-up","Saw-Down","Random"), value(2)
gentable bounds( 85, 30, 40, 20), tablenumber(2000), identchannel("LFO_Shape_ID"), zoom(-1), amprange(2000,-1,1)
button   bounds( 35, 60, 50, 16), channel("MONO_LFO"), text("MONO","MONO"), colour:0(0,0,0), colour:1(200,200, 0), fontcolour:0(80,80,80), fontcolour:1(255,255,255), radiogroup(1)
button   bounds( 35, 76, 50, 16), channel("POLY_LFO"), text("POLY","POLY"), colour:0(0,0,0), colour:1(200,200, 0), fontcolour:0(80,80,80), fontcolour:1(255,255,255), radiogroup(1), value(1)
rslider  bounds(120, 15, 90, 90), channel("LFO_Depth"), text("Depth"), valuetextbox(1), textbox(1), range(0,4,2,0.5,0.01)
rslider  bounds(190, 15, 90, 90), channel("LFO_Rate"), text("Rate"),   valuetextbox(1), textbox(1), range(0,99,0.07,0.5,0.01)
rslider  bounds(260, 15, 90, 90), channel("LFO_Delay"), text("Delay"), valuetextbox(1), textbox(1), range(0,8,0,0.5,0.01)
rslider  bounds(330, 15, 90, 90), channel("LFO_Rise"), text("Rise"),   valuetextbox(1), textbox(1), range(0,8,0,0.5,0.01)
}

keyboard bounds(5,240,1165,80)

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-n -+rtmidi=NULL -M0 -dm0
; -m0d
</CsOptions>

<CsInstruments>

sr = 44100
ksmps = 32
nchnls = 2
0dbfs = 1

massign	0,2

gisine		ftgen	3000, 0, 4096, 10, 1   												; Sine
gihalfsine	ftgen	3001, 0, 4096, 9,  0.5, 1, 0 										; Half-Sine

i_			ftgen	3002, 0,131073,9,  1,1,0, 2,1/4,0
i_			ftgen	3003, 0,131073,9,  1,1,0, 5,1/4,0
i_			ftgen	3004, 0,131073,9,  1,1,0,11,1/4,0
i_			ftgen	3005, 0,131073,9,  6,1,0,    9,1/10,0, 13,1/14,0, 17,1/18,0, 21,1/22,0,  25,1/26,0,  29,1/30,0,  33,1/34,0
i_			ftgen	3006, 0,131073,9,  8,1,0,   11,1/10,0, 15,1/14,0, 19,1/18,0, 23,1/22,0,  27,1/26,0,  31,1/30,0,  35,1/34,0
i_			ftgen	3007, 0,131073,9, 10,1,0,   13,1/10,0, 17,1/14,0, 21,1/18,0, 25,1/22,0,  29,1/26,0,  33,1/30,0,  37,1/34,0
i_			ftgen	3008, 0,131073,9, 12,1/4,0, 25,1,0,    39,1/14,0, 63,1/18,0, 87,1/22,0, 111,1/26,0, 135,1/30,0, 159,1/34,0

; 127 band limited triangles
gitri		ftgen	0,0,4097,7,1,2048,1,0,-1,2048,-1
icount	=	0
loop1:
imaxh	=  sr / (2 * 440.0 * exp(log(2.0) * (icount - 69) / 12))
ifn	ftgen	4000+icount,0,4097,-30,gitri,1,imaxh
	loop_le	icount,1,127,loop1

; 127 band limited squares
gisquare	ftgen	0, 0, 4097, 10, 7, 1, 2048, 1, 0, -1, 2048, -1					; Square
icount	=	0
loop2:
imaxh	=  sr / (2 * 440.0 * exp(log(2.0) * (icount - 69) / 12))
ifn	ftgen	5000+icount,0,4097,-30,gisquare,1,imaxh
	loop_le	icount,1,127,loop2

; 127 band limited saws
gisaw		ftgen	0, 0, 4097, 7, 1, 4096, -1   									; Sawtooth
icount	=	0
loop3:
imaxh	=  sr / (2 * 440.0 * exp(log(2.0) * (icount - 69) / 12))
ifn	ftgen	6000+icount,0,4097,-30,gisaw,1,imaxh
	loop_le	icount,1,127,loop3

; 127 band limited pulses
gipulse		ftgen	0, 0, 4097, 7, 1, 128, 1, 0, 0, 4096-128, 0				  		; Pulse
icount	=	0
loop4:
imaxh	=  sr / (2 * 440.0 * exp(log(2.0) * (icount - 69) / 12))
ifn	ftgen	7000+icount,0,4097,-30,gipulse,1,imaxh
	loop_le	icount,1,127,loop4

giWndw		ftgen	0, 0, 4097,   20,  2												; window used to envelope out dicontinuity at sync retrigger point

; main waveform shapes for display
i_	ftgen	1000,0,-40,10,1						; display
i_	ftgen	1001,0,-40,10,1						; sine
i_	ftgen	1002,0,-40,7,0,10,1,20,-1,10,0		; triangle
i_	ftgen	1003,0,-40,7,0,1,1,19,1,0,-1,20,-1	; square
i_	ftgen	1004,0,-40,7,0,1,1,39,-1			; saw
i_	ftgen	1005,0,-40,7,0,1,1,3,1,0,0,36,0		; pulse
i_	ftgen	1006,0,-40, 9,  0.5, 1, 0 										; Half-Sine
i_	ftgen	1007, 0,-40,9,  1,1,0, 2,1/4,0
i_	ftgen	1008, 0,-40,9,  1,1,0, 5,1/4,0
i_	ftgen	1009, 0,-40,9,  1,1,0,11,1/4,0
i_	ftgen	1010, 0,-40,9,  6,1,0,    9,1/10,0, 13,1/14,0, 17,1/18,0, 21,1/22,0,  25,1/26,0,  29,1/30,0,  33,1/34,0
i_	ftgen	1011, 0,-40,9,  8,1,0,   11,1/10,0, 15,1/14,0, 19,1/18,0, 23,1/22,0,  27,1/26,0,  31,1/30,0,  35,1/34,0
i_	ftgen	1012, 0,-40,9, 10,1,0,   13,1/10,0, 17,1/14,0, 21,1/18,0, 25,1/22,0,  29,1/26,0,  33,1/30,0,  37,1/34,0
i_	ftgen	1013, 0,-40,9, 12,1/4,0, 25,1,0,    39,1/14,0, 63,1/18,0, 87,1/22,0, 111,1/26,0, 135,1/30,0, 159,1/34,0

; LFO waveform shapes for display
i_	ftgen	2000,0,-40,10,1						; display
i_	ftgen	2001,0,-40,10,1						; sine
i_	ftgen	2002,0,-40,7,0,10,1,20,-1,10,0		; triangle
i_	ftgen	2003,0,-40,7,0,1,1,19,1,0,-1,20,-1	; square
i_	ftgen	2004,0,-40,7,0,1,-1,39,1			; saw-up
i_	ftgen	2005,0,-40,7,0,1,1,39,-1			; saw-down
i_	ftgen	2006,0,-40,21,3						; random

instr	1
 gkVoice2OnOff		chnget	"Voice2OnOff"
 gkSyncRate			chnget	"SyncRate"
 gkSyncEnvMan		chnget	"SyncEnvMan"
 kSubSemis			chnget	"SubSemis"
 kSubCents			chnget	"SubCents"
 gkSubTrans			=		semitone(kSubSemis)*cent(kSubCents)
 gkLFO_Shape		chnget	"LFO_Shape"
 gkLFO_Depth		chnget	"LFO_Depth"
 gkLFO_Rate			chnget	"LFO_Rate"
 gkLFO_Delay		chnget	"LFO_Delay"
 gkLFO_Rise			chnget	"LFO_Rise"
 gkV2Lev			chnget	"V2Lev"
 gkVel				chnget	"Vel"
 gkLev				chnget	"Lev"
 gkMONO_LFO			chnget	"MONO_LFO"
 if gkMONO_LFO==1 then
  if gkLFO_Shape==1 then
   gaLFO	poscil	gkLFO_Depth,gkLFO_Rate										; sine
  elseif gkLFO_Shape==2 then
   gaLFO	lfo		gkLFO_Depth,gkLFO_Rate,1									; triangle
  elseif gkLFO_Shape==3 then
   gaLFO	lfo		gkLFO_Depth,gkLFO_Rate,2									; bipolar square
  elseif gkLFO_Shape==4 then 
   gaLFO	lfo		gkLFO_Depth,gkLFO_Rate,4									; saw up
  elseif gkLFO_Shape==5 then
   gaLFO	lfo		gkLFO_Depth,gkLFO_Rate,5									; saw down
  elseif gkLFO_Shape==6 then
   gaLFO	rspline	-gkLFO_Depth,gkLFO_Depth,gkLFO_Rate,gkLFO_Rate*2	; random
  endif
 endif
   
 ; update view of main waveform
 gkWaveform			chnget	"Waveform"
 if changed(gkWaveform)==1 then
  reinit SEND_WAVEFORM_VIEW
  SEND_WAVEFORM_VIEW:
  		tableicopy	1000,1000+i(gkWaveform)
  		chnset		"tablenumber(1000)","Waveform_ID"  
 rireturn
 endif
 
 ; update view of LFO waveform
 gkLFO_Shape			chnget	"LFO_Shape"
 if changed(gkLFO_Shape)==1 then
  reinit SEND_LFO_SHAPE_VIEW
  SEND_LFO_SHAPE_VIEW:
  		tableicopy	2000,2000+i(gkLFO_Shape)
  		chnset		"tablenumber(2000)","LFO_Shape_ID"
 rireturn
 endif
 
 kpreset	chnget	"preset"
 ktrig		changed	kpreset
 if ktrig==1 then
  reinit	PRESET
 PRESET:
  
  #define	SEND_SETTINGS(N'Waveform'Voice2OnOff'SubSemis'SubCents'Attack'Decay'Sustain'Release'Minimum'Maximum'SyncEnvMan'SyncRate'LFO_Shape'LFO_Depth'LFO_Rate'LFO_Delay'LFO_Rise'AAtt'ADec'ASus'ARel'StMix'RvbMix'RvbSize'RvbCF'V2Lev'Vel'Lev)#
  if i(kpreset)==$N then
   chnset	$Waveform	,"Waveform"
   chnset	$Voice2OnOff	,"Voice2OnOff"
   chnset	$SubSemis	,"SubSemis"
   chnset	$SubCents	,"SubCents"
   chnset	$Attack	,"Attack"
   chnset	$Decay	,"Decay"
   chnset	$Sustain	,"Sustain"
   chnset	$Release	,"Release"
   chnset	$Minimum	,"Minimum"
   chnset	$Maximum	,"Maximum"
   chnset	$SyncEnvMan	,"SyncEnvMan"
   chnset	$SyncRate	,"SyncRate"
   chnset	$LFO_Shape	,"LFO_Shape"
   chnset	$LFO_Depth	,"LFO_Depth"
   chnset	$LFO_Rate	,"LFO_Rate"
   chnset	$LFO_Delay	,"LFO_Delay"
   chnset	$LFO_Rise	,"LFO_Rise"
   chnset	$AAtt	,"AAtt"
   chnset	$ADec	,"ADec"
   chnset	$ASus	,"ASus"
   chnset	$ARel	,"ARel"
   chnset	$StMix	,"StMix"
   chnset	$RvbMix	,"RvbMix"
   chnset	$RvbSize	,"RvbSize"
   chnset	$RvbCF	,"RvbCF"
   chnset	$V2Lev	,"V2Lev"
   chnset	$Vel	,"Vel"
   chnset	$Lev	,"Lev"
  endif#
  ;                 Waveform'Voice2OnOff'SubSemis'SubCents'Attack'Decay'Sustain'Release'Minimum'Maximum'SyncEnvMan'SyncRate'LFO_Shape'LFO_Depth'LFO_Rate'LFO_Delay'LFO_Rise'AAtt'ADec'ASus'ARel'StMix'RvbMix'RvbSize'RvbCF'V2Lev'Vel'Lev)#
  $SEND_SETTINGS(1  '1      '0          '-12     '0       '0.1   '0.5  '0.1    '0.2    '-2     '2      '0         '440     '1        '0        '5       '1        '2       '0.01'0.1 '0.6 '0.2 '1    '0.2   '0.8    '8000 '1    '0.5'0.05)            
  $SEND_SETTINGS(2  '7      '1          '-10     '0       '0.008 '0.6  '0      '0.5    '-2     '2      '0         '1600    '1        '0        '5       '1        '2       '0   '1.6 '0   '1   '1    '0.2   '0.8    '8000 '1    '0.8'0.05)            
  $SEND_SETTINGS(3  '3      '1          '-12     '0       '2     '8    '0.2    '6      '-2     '1.7    '0         '440     '6        '0.3      '2.3     '1        '2       '0.01'0.1 '0.6 '0.2 '1    '0.2   '0.8    '8000 '1    '0.5'0.05)            
  $SEND_SETTINGS(4  '5      '1          '-24     '0       '8     '0    '1      '3.5    '-8     '-0.4   '0         '440     '1        '0.5      '5       '0        '3       '1   '0   '1   '6   '1    '0.2   '0.8    '8000 '1    '0.5'0.05)            
  $SEND_SETTINGS(5  '13     '0          '-12     '0       '0     '5    '0.22   '5      '-4.5   '0      '0         '440     '1        '0        '5       '1        '2       '0   '8   '0   '8   '1    '0.2   '0.8    '8000 '1    '0.5'0.05)            
  $SEND_SETTINGS(6  '10     '0          '-12     '0       '0     '5    '0.22   '5      '-4.5   '4      '0         '440     '1        '0        '5       '1        '2       '0   '8   '0   '8   '1    '0.2   '0.8    '8000 '1    '0.5'0.05)            
  $SEND_SETTINGS(7  '4      '0          '-12     '0       '2     '5    '1      '5      '-4     '-4.01  '0         '440     '2        '1.3      '0.1     '0        '0       '0.05'8   '1   '8   '1    '0.2   '0.8    '8000 '1    '0.5'0.05)            
  $SEND_SETTINGS(8  '3      '1          '-12     '-30     '3     '5    '0      '5      '-5.4   '-1     '0         '440     '5        '4        '3.36    '0        '0       '0.05'8   '1   '8   '1    '0.2   '0.8    '8000 '1    '0.5'0.05)            
  $SEND_SETTINGS(9  '1      '1          '7       '0       '0     '0.5  '0      '2.5    '-2.47  '1.57   '0         '440     '3        '1.3      '3.1     '0        '0       '0   '0.1 '1   '2.4 '1    '0.2   '0.8    '8000 '1    '0.5'0.05)            
  $SEND_SETTINGS(10 '5      '1          '0       '61      '0.1   '2    '0      '2.4    '-5.5   '2      '0.5       '90      '6        '0.4      '30      '0        '0       '0   '0   '1   '2.4 '1    '0.2   '0.8    '8000 '1    '0.8'0.05)            
  rireturn
 endif
 
endin

instr	2	; MIDI triggered instrument
 icps	cpsmidi
 inum	notnum
 iVel	ampmidi	i(gkVel)
 iVel	+=		1-i(gkVel)
 
 ; sync trigger envelope
 iAttack	chnget	"Attack"
 iDecay		chnget	"Decay"
 iSustain	chnget	"Sustain"
 iRelease	chnget	"Release"
 iMinimum	chnget	"Minimum"
 iMaximum	chnget	"Maximum"
 kcps		linsegr	0,iAttack+0.0001,1,iDecay+0.0001,iSustain,iRelease+0.0001,0
 kcps		*=		iVel
 kcps		scale	kcps,iMaximum,iMinimum
 acps		=		icps * octave(a(kcps))

 acps	ntrpol	acps,a(gkSyncRate),gkSyncEnvMan
 ; sync trigger LFO
 kLFO_Env	linseg	0, i(gkLFO_Delay)+0.001, 0, i(gkLFO_Rise)+0.001, 1				; lfo envelope
 if i(gkMONO_LFO)==0 then
  if i(gkLFO_Shape)==1 then
   aLFO	poscil	gkLFO_Depth*kLFO_Env,gkLFO_Rate										; sine
  elseif i(gkLFO_Shape)==2 then
   aLFO	lfo		gkLFO_Depth*kLFO_Env,gkLFO_Rate,1									; triangle
  elseif i(gkLFO_Shape)==3 then
   aLFO	lfo		gkLFO_Depth*kLFO_Env,gkLFO_Rate,2									; bipolar square
  elseif i(gkLFO_Shape)==4 then 
   aLFO	lfo		gkLFO_Depth*kLFO_Env,gkLFO_Rate,4									; saw up
  elseif i(gkLFO_Shape)==5 then
   aLFO	lfo		gkLFO_Depth*kLFO_Env,gkLFO_Rate,5									; saw down
  elseif i(gkLFO_Shape)==6 then
   aLFO	rspline	-gkLFO_Depth*kLFO_Env,gkLFO_Depth*kLFO_Env,gkLFO_Rate,gkLFO_Rate*2	; random
  endif
 else
   aLFO	=	gaLFO * kLFO_Env
 endif
 acps	*=	octave(aLFO)
 
 ; voice 1
 if i(gkWaveform)==1 then
  iWaveform	=	3000
 elseif i(gkWaveform)>5 then
  iWaveform	=	3000 + i(gkWaveform) - 5 
 else
  iWaveform	=	2000 + i(gkWaveform)*1000 + inum
 endif
 aPhaseMast,aSyncMast 	syncphasor icps, a(0)										; 
 aWndw	table3	aPhaseMast,giWndw,1
 aPhaseSlave,aSyncSlave syncphasor acps, aSyncMast
 asig	table3	aPhaseSlave,iWaveform,1
 ; anti-alias filter
 asig	buthp	asig,icps
 asig	buthp	asig,icps
 asig	*=		aWndw

 ; voice 2
 if gkVoice2OnOff==1 then
  aPhaseMast,aSyncMast 	syncphasor icps*gkSubTrans, a(0)
  aWndw	tablei	aPhaseMast,giWndw,1
  aPhaseSlave,aSyncSlave syncphasor acps, aSyncMast
  asig2	tablei	aPhaseSlave,iWaveform,1
  ; anti-alias filter
  asig2	buthp	asig2,icps*gkSubTrans
  asig2	buthp	asig2,icps*gkSubTrans
  asig2	*=		aWndw
  asig	+=		asig2*gkV2Lev
 endif
 
 ; amplitude envelope
 ; sync trigger envelope
 iAAtt	chnget	"AAtt"
 iADec	chnget	"ADec"                                        
 iASus	chnget	"ASus"
 iARel	chnget	"ARel"
 kEnv	linsegr	0,    iAAtt+0.0001,1,    iADec+0.0001,iASus,      iARel+0.0001,0
 asig	*=		a(expcurve(kEnv,4))

 ivel	ampmidi	0.2	
 		chnmix	asig*iVel,"Send"													; mix into global send channel

endin

instr	10	; output
 aSig		chnget	"Send"
 aSig		*=		gkLev
 ; voicing filter
 aSig	pareq	aSig,150,ampdbfs(12),0.01
 
 ; lowpass filter
 iCF	=		4000
 aSig	tone	aSig,iCF
 
 ; stereo processing
 kDep	=1		;chnget	"StDep"
 kRte	=0.1	;chnget	"StRte"
 kWid	=	(chnget:k("StWid")*0.5) + 0.5
 iMaxDel	=	0.03
 kDlt1	rspline	1/kr,iMaxDel*kDep,kRte,kRte*2
 kDlt2	rspline	1/kr,iMaxDel*kDep,kRte,kRte*2
 kDlt1	limit	kDlt1,1/kr,iMaxDel*kDep
 kDlt2	limit	kDlt2,1/kr,iMaxDel*kDep
 aDel1	vdelay	aSig,a(kDlt1)*1000,iMaxDel*1000
 aDel2	vdelay	aSig,a(kDlt2)*1000,iMaxDel*1000
 
 kMix	chnget	"StMix"
 ;aL		ntrpol	aSig,aDel1*(1-kWid)  +  aDel2*kWid,     kMix
 ;aR		ntrpol	aSig,aDel1*kWid      +  aDel2*(1-kWid), kMix
 aL		ntrpol	aSig, aDel1, kMix
 aR		ntrpol	aSig, aDel2, kMix
 
 ; reverb
 kRvbMix	chnget	"RvbMix"
 kRvbSize	chnget  "RvbSize"
 kRvbCF		=	8000	;chnget  "RvbCF"
 aRvbL,aRvbR	reverbsc	aL,aR,kRvbSize,kRvbCF
 aL			ntrpol	aL,aRvbL,kRvbMix
 aR			ntrpol	aR,aRvbR,kRvbMix
 
 		outs	aL,aR
 		chnclear	"Send"
endin

</CsInstruments>

<CsScore>
i 1  0 [3600*24*7]
i 10 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>
hsboscil_synth.csd

Synthesizer is divided into seven panels.

Amplitude
---------
Amp	-	amplitude control
Att.	-	amplitude envelope attack time
Dec.	-	amplitude envelope decay time
Sus.	-	amplitude envelope sustain level
Rel.	-	amplitude envelope release time
Mod.Shape-	shape used for amplitude modulation (tremolo). Choose from sine shaped, random splines, random sample and hold (randomh) or square wave.
Rate	-	rate of amplitude LFO (tremolo)
Depth	-	depth of amplitude LFO
Delay	-	delay time before amplitude LFO begins
Rise	-	time over which amplitude LFO depth rises from zero to its prescribed value

Brightness - brightness is really just a description of where the emphasis is in the stack of octave spaced tones that hsboscil produces
----------
Brite	-	manual brightness control
Vel.	-	amount of velocity to brightness control
Att.	-	brightness envelope attack time
Att.Lev	-	brightness envelope attack level
Dec.	-	brightness envelope decay time
Sus.	-	brightness envelope sustain level
Rel.	-	brightness envelope release time
Rel.Lev	-	brightness envelope release level
Oct.Cnt.-	Number of octave spaced partials in a tone
Mod.Shape-	shape used for brightness modulation. Choose from sine shaped, random splines, random sample and hold (randomh) or square wave.
Rate	-	rate of brightness LFO
Depth	-	depth of brightness LFO
Delay	-	delay time before brightness LFO begins
Rise	-	time over which brightness LFO depth rises from zero to its prescribed value

Noise - interpolated gaussian modulation is applied to the pitch (tone) parameter which, at high rates/frequencies results in the addition of a noise component in the tone
-----
Rate	-	rate/frequency of noise modulation
Depth	-	depth of noise modulation

Reverb - the screverb opcode is used
------
Mix	-	amount of reverb that is mixed into the output. When mix is zero the effect is bypassed.
Size	-	size of the virtual space created by the reverb effect

Pitch Modulation - modulation of the tone (pitch) parameter. This will be at a much slower rate than that applied using the 'noise' function
----------------
Mod.Shape-	shape used for pitch modulation. Choose from sine shaped, random splines, random sample and hold (randomh) or square wave.
Rate	-	rate of pitch modulation LFO
Depth	-	depth of pitch modulation LFO
Delay	-	delay time before pitch modulation LFO begins
Rise	-	time over which pitch modulation LFO depth rises from zero to its prescribed value

Freq.Shift - a frequency shifting effect
----------
Freq.	-	frequency by which the signal will be shifted

Chorus - a stereo chorus effect. Two chorus voices are created which the panning of which is modulated randomly. Delay time/pitch modulations are random rather than cyclical.
------
Mix	-	Amount of chorussed signal that is mixed into the output 
Depth	-	Depth of modualtion used in the chorus effect
Rate	-	Rate of modulation used in the chorus effect




<Cabbage>
form caption("hsboscil Synth") size(590, 450), pluginid("hsbo") style("legacy")

;AMPLITUDE
groupbox bounds(0, 0, 590, 100), colour( 10, 15, 30, 100) text("Amplitude"), fontcolour(255,0,0), plant("Amplitude") {
rslider  bounds(  5, 30, 60, 60), text("Amp."), channel("amp"), range(0, 1, 0.3)
line bounds( 65,  30, 2, 60), colour("DarkSlateGrey")
rslider  bounds( 70, 30, 60, 60), text("Att."), channel("AAtt"), range(   0, 8.00, 0.3,0.5)
rslider  bounds(120, 30, 60, 60), text("Dec."), channel("ADec"), range(   0, 8.00, 0.01,0.5)
rslider  bounds(170, 30, 60, 60), text("Sus."), channel("ASus"), range(   0, 1.00,  0.5,0.5)
rslider  bounds(220, 30, 60, 60), text("Rel."), channel("ARel"), range(0.01, 8,  0.3,0.5)
line     bounds(285, 30, 2, 60), colour("DarkSlateGrey")
label    bounds(303, 35, 65, 12), text("Mod.Shape")
combobox bounds(300, 50, 70, 20), channel("amplfo"), value(2), text("sine", "splines", "S+H", "square")
rslider bounds(375, 30, 60, 60), text("Rate"), channel("ARte"), range(0, 16.0, 4)
rslider bounds(425, 30, 60, 60), text("Depth"), channel("ADep"), range(0, 1.00, 1)
rslider bounds(475, 30, 60, 60), text("Delay"), channel("ADel"), range(0, 2.00, 0, 0.5)
rslider bounds(525, 30, 60, 60), text("Rise"), channel("ARis"), range(0, 2.00, 0.1, 0.5)
}

;BRIGHTNESS
groupbox bounds(0, 100,450,170), colour( 6, 18, 22, 100), text("Brightness"), fontcolour(205,10,10), plant("Brightness") {
rslider bounds(  5, 35, 60, 60), text("Brite"), channel("brite"), range(-6, 6.00, -2)
rslider bounds(  5,100, 60, 60), text("Vel."), channel("BVelDep"), range(0, 6.00, 3)
rslider bounds( 65, 35, 60, 60), text("Oct.Cnt."), channel("octcnt"), range(2, 20, 3, 1, 1)
line    bounds(130, 27, 2, 60), colour("DarkSlateGrey")
rslider bounds(135, 35, 60, 60), text("Att."), channel("BAtt"), range(0, 8.00, 0.1,0.5)
rslider bounds(185, 35, 60, 60), text("Att.Lev."), channel("BAttLev"), range(-6.00, 6, 1)
rslider bounds(235, 35, 60, 60), text("Dec."), channel("BDec"), range(0, 8.00, 0.1,0.5)
rslider bounds(285, 35, 60, 60), text("Sus."), channel("BSus"), range(-6, 6.00, 0)
rslider bounds(335, 35, 60, 60), text("Rel."), channel("BRel"), range(0, 8.00, 0.01,0.5)
rslider bounds(385, 35, 60, 60), text("Rel.Lev."), channel("BRelLev"), range(-4.00, 4, 0)
line    bounds( 90,100, 2, 60), colour("DarkSlateGrey")
label    bounds(118,105, 65, 12), text("Mod.Shape")
combobox bounds(115,120, 70, 20), channel("britelfo"), value(2), text("sine", "splines", "S+H", "square")
rslider bounds(185,100, 60, 60), text("Rate"), channel("BRte"), range(0, 30.0, 4)
rslider bounds(235,100, 60, 60), text("Depth"), channel("BDep"), range(0, 6.00, 2)
rslider bounds(285,100, 60, 60), text("Delay"), channel("BDel"), range(0, 2.00, 0.5, 0.5)
rslider bounds(335,100, 60, 60), text("Rise"), channel("BRis"), range(0, 4.00, 1.5, 0.5)
}

;NOISE
groupbox bounds(450, 100, 70,170), colour( 20, 7, 19, 100), text("Noise"), fontcolour(255,40,60), plant("Noise") {
rslider  bounds(  5,  35, 60, 60), text("Rate"), channel("NRte"), range(16,10000, 1000, 0.5)
rslider  bounds(  5, 100, 60, 60), text("Depth"), channel("NDep"), range(0, 1.00, 0.05, 0.5)
}

;REVERB
groupbox bounds(520,100, 70,170), colour( 3, 25, 11, 100), text("Reverb"), fontcolour(255,0,100), plant("Reverb") {
rslider  bounds(  5, 35, 60, 60), text("Mix"), channel("RvbMix"), range(0, 1.00, 0.3)
rslider  bounds(  5,100, 60, 60), text("Size"), channel("RvbSize"), range(0, 1.00, 0.82)
}

;PITCH MOD.
groupbox bounds(  0,270,350,100), colour( 20, 25, 40, 100), text("Pitch Modulation"), fontcolour(255,100,0), plant("PitchMod") {
label    bounds( 10, 35, 65, 12), text("Mod.Shape")
combobox bounds( 10, 50, 65, 20), channel("pitchlfo"), value(1), text("sine", "splines", "S+H", "square")
rslider  bounds( 80, 30, 60, 60), text("Rate"), channel("PRte"), range(0, 16.00, 0, 0.5)
rslider  bounds(130, 30, 60, 60), text("Depth"), channel("PDep"), range(0, 1.00, 0)
rslider  bounds(180, 30, 60, 60), text("Delay"), channel("PDel"), range(0, 2.00, 0, 0.5)
rslider  bounds(230, 30, 60, 60), text("Rise"), channel("PRis"), range(0, 2.00, 0.1, 0.5)
rslider  bounds(280, 30, 60, 60), text("Risset"), channel("TRate"), range(-3.00, 3, 0)
}

;FREQ. SHIFT
groupbox bounds(350,270, 70,100), colour( 20,  5, 25, 100), text("Freq.Shift"), fontcolour(200,0,0), plant("FreqShift") {
rslider  bounds(  5, 30, 60, 60), text("Freq."), channel("FShift"), range(-1000, 1000, -1000)
}

;CHORUS
groupbox bounds(420,270,170,100), colour( 3, 10, 13, 100), text("Chorus"), fontcolour(255,200,0), plant("Chorus") {
rslider  bounds(  5, 30, 60, 60), text("Mix"), channel("ChoMix"), range(0, 1.00, 1)
rslider  bounds( 55, 30, 60, 60), text("Depth"), channel("ChoDep"), range(0, 0.100, 0.01,0.5,0.0001)
rslider  bounds(105, 30, 60, 60), text("Rate"), channel("ChoRte"), range(0, 20.0, 4, 0.5)
}

keyboard pos(0, 370), size(590, 80)
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE. HIGHER ksmps can result in quantisation noise in kbrite modulations.
nchnls 		= 	2	;NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1
seed	0
massign	0,2

;Author: Iain McCurdy (2012)

gisine	ftgen	0, 0, 131072, 10, 1			;A SINE WAVE
gioctfn	ftgen	0, 0, 1024, -19, 1, 0.5, 270, 0.5	;A HANNING-TYPE WINDOW
gasendL,gasendR	init	0

opcode	FreqShifter,a,aki
	ain,kfshift,ifn	xin					;READ IN INPUT ARGUMENTS
	areal, aimag hilbert ain				;HILBERT OPCODE OUTPUTS TWO PHASE SHIFTED SIGNALS, EACH 90 OUT OF PHASE WITH EACH OTHER
	asin 	oscili       1,    kfshift,     ifn,          0
	acos 	oscili       1,    kfshift,     ifn,          0.25	
	;RING MODULATE EACH SIGNAL USING THE QUADRATURE OSCILLATORS AS MODULATORS
	amod1	=		areal * acos
	amod2	=		aimag * asin	
	;UPSHIFTING OUTPUT
	aFS	= (amod1 - amod2)
		xout	aFS				;SEND AUDIO BACK TO CALLER INSTRUMENT
endop

instr	1	;read in widgets
	gkamplfo	chnget	"amplfo"
	gkbritelfo	chnget	"britelfo"
	gkChoMix	chnget	"ChoMix"
	gkChoDep	chnget	"ChoDep"
	gkChoRte	chnget	"ChoRte"
	gkRvbMix	chnget	"RvbMix"
	gkRvbSize	chnget	"RvbSize"
	gkFShift	chnget	"FShift"
	gkNRte		chnget	"NRte"
	gkNDep		chnget	"NDep"
	gkpitchlfo	chnget	"pitchlfo"
	gkPDel		chnget	"PDel"
	gkPRis		chnget	"PRis"
	gkPRte		chnget	"PRte"
	gkPDep		chnget	"PDep"	
endin

instr	2	;hsboscil instrument. MIDI notes are directed here.
	kporttime	linseg	0,0.001,0.01				;PORTAMENTO TIME VALUE RISES QUICKLY FROM ZERO TO A HELD VALUE 
	kamp		chnget	"amp"					;READ WIDGETS...
	iAAtt		chnget	"AAtt"					;
	iADec		chnget	"ADec"					;
	iASus		chnget	"ASus"					;
	iARel		chnget	"ARel"					;
	aenv		linsegr	0.001,iAAtt+0.001,1,iADec+0.001,iASus,iARel+0.001,0.001	;AMPLITUDE ENVELOPE
	iADel		chnget	"ADel"					;
	iARis		chnget	"ARis"					;
	kADep		chnget	"ADep"					;
	kARte		chnget	"ARte"					;
	kbrite		chnget	"brite"					;
	kbrite		portk	kbrite,kporttime
	koctcnt		chnget	"octcnt"				;
	iBVelDep	chnget	"BVelDep"				;

	iBAtt		chnget	"BAtt"					;
	iBAttLev	chnget	"BAttLev"				;
	iBDec		chnget	"BDec"					;
	iBSus		chnget	"BSus"					;
	iBRel		chnget	"BRel"					;
	iBRelLev	chnget	"BRelLev"				;
	kBEnv		linsegr	0,iBAtt+0.001,iBAttLev,iBDec+0.001,iBSus,iBRel+0.001,iBRelLev	;'BRIGHTNESS' ENVELOPE
	iBDel		chnget	"BDel"					;
	iBRis		chnget	"BRis"					;
	kBDep		chnget	"BDep"					;
	kBRte		chnget	"BRte"					;

	kTRate		chnget	"TRate"					;

	ibasfreq	cpsmidi						;READ MIDI NOTE PITCH

	ktrig		changed		koctcnt				;IF 'NUMBER OF OCTAVES' AS DEFINED BY WIDGET CHANGES GENERATE A TRIGGER
	if ktrig==1 then 						;IF 'NUMBER OF OCTAVES' CHANGE TRIGGER HAS BEEN GENERATED...
	 reinit UPDATE							;BEGIN A REINITIALISATION PASS FROM LABEL 'UPDATE'
	endif								;END OF CONDITIONAL
	UPDATE:								;LABEL 'UPDATE'. REINITIALISATION PASS BEGINS FROM HERE

	;AMPLITUDE LFO
	kdepth		linseg		0,iADel+0.001,0,iARis+0.001,1	;DEPTH OF MODULATION ENVELOPE
	if gkamplfo==1 then
	 kALFO		lfo		(kdepth*kADep)/2,kARte,0	;LFO (sine)
	elseif gkamplfo==2 then
	 kALFO		jspline		(kdepth*kADep)/2,kARte,kARte	
	elseif gkamplfo==3 then
	 kALFO		randomh		-(kdepth*kADep)/2,(kdepth*kADep)/2,kARte
	 kALFO		port		kALFO,0.001			;smooth out the clicks
	else
	 kALFO		lfo		(kdepth*kADep)/2,kARte,2	;LFO (bi-square)
	 kALFO		port		kALFO,0.001			;smooth out the clicks
	endif

	kALFO		=		(kALFO+0.5) + (1 - kADep)	;OFFSET AND RESCALE LFO FUNCTION

	;VELOCITY TO AMPLITUDE
	iVelAmp		veloc		0.2,1				;READ IN MIDI NOTE VELOCITY AS A VALUE WITHIN THE RANGE 0.2 TO 1

	;BRIGHTNESS LFO
	kdepth		linseg		0,iBDel+0.001,0,iBRis+0.001,1	;DEPTH OF MODULATION ENVELOPE
	if gkbritelfo==1 then
	 kBLFO		lfo		kdepth*kBDep,kBRte,0		;LFO (sine)
	elseif gkbritelfo==2 then
	 kBLFO		jspline		kdepth*kBDep,kBRte,kBRte
	elseif gkbritelfo==3 then
	 kBLFO		randomh		-kdepth*kBDep,kdepth*kBDep,kBRte
	 kBLFO		port		kBLFO,0.004			;smooth out the clicks
	else
	 kBLFO		lfo		kdepth*kBDep,kBRte,2		;LFO (bi-square)
	 kBLFO		port		kBLFO,0.004			;smooth out the clicks
	endif

	;VELOCITY TO BRIGHTNESS
	iBVel		ampmidi		iBVelDep			;MIDI NOTE VELOCITY USED TO DERIVE A VALUE THAT WILL INFLUENCE 'BRIGHTNESS'
	
	;NOISE
	knoise	gaussi	1, gkNDep, gkNRte

	;RISSET
	kRisset	lfo	1,kTRate,4					;'RISSET GLISSANDO' FUNCTION

	;PITCH MODULATION
	kPDepth		linseg		0,i(gkPDel)+0.001,0,i(gkPRis)+0.001,1	;DEPTH OF MODULATION ENVELOPE
	if gkpitchlfo==1 then
	 kPLFO		lfo		gkPDep*kPDepth,gkPRte,0		;LFO
	elseif gkpitchlfo==2 then
	 kPLFO		jspline		gkPDep*kPDepth,gkPRte,gkPRte
	elseif gkpitchlfo==3 then
	 kPLFO		randomh		-gkPDep*kPDepth,gkPDep*kPDepth,gkPRte
	 kPLFO		port		kPLFO,0.002			;smooth out the clicks
	else
	 kPLFO		lfo		gkPDep*kPDepth,gkPRte,2		;LFO (bi-square)
	 kPLFO		port		kPLFO,0.002			;smooth out the clicks
	endif
		
	aL 		hsboscil	kamp*kALFO*iVelAmp, kPLFO+kRisset+knoise, kbrite+kBEnv+kBLFO+iBVel, ibasfreq, gisine, gioctfn, i(koctcnt), rnd(1)	;CREATE AN hsboscil TONE FOR THE LEFT CHANNEL. RANDOM INITIAL PHASE CREATE STEREO EFFECT.
	aR 		hsboscil	kamp*kALFO*iVelAmp, kPLFO+kRisset+knoise, kbrite+kBEnv+kBLFO+iBVel, ibasfreq, gisine, gioctfn, i(koctcnt), rnd(1)	;CREATE AN hsboscil TONE FOR THE RIGHT CHANNEL. RANDOM INITIAL PHASE CREATE STEREO EFFECT.
	aL		=		aL*aenv				;APPLY AMPLITUDE ENVELOPE TO AUDIO OUTPUT OF hsboscil
	aR		=		aR*aenv				;APPLY AMPLITUDE ENVELOPE TO AUDIO OUTPUT OF hsboscil
	rireturn
	
	/*FREQUENCY SHIFTER*/
	if gkFShift==0 kgoto SKIP_FSHIFT			;IF F.SHIFT VALUE = 0, BYPASS THE EFFECT
	 kFShift	portk	gkFShift,kporttime
	 aL	FreqShifter	aL,kFShift,gisine
	 aR	FreqShifter	aR,kFShift,gisine	
	SKIP_FSHIFT:

			outs		aL,aR			;SEND AUDIO TO OUTPUTS
	gasendL	=	gasendL+aL
	gasendR	=	gasendR+aR
endin
		
instr	3	;Chorus effect
	if gkChoMix==0 goto SKIP_CHORUS
	kporttime	linseg	0,0.001,1
	kporttime	=	kporttime/gkChoRte
	kdlt1	randomi	ksmps/sr,gkChoDep,gkChoRte,1
	kdlt1	portk	kdlt1,kporttime
	adlt1	interp	kdlt1
	acho1	vdelay	gasendL,adlt1*1000,1*1000
	
	kdlt2	randomi	ksmps/sr,gkChoDep,gkChoRte,1
	kdlt2	portk	kdlt2,kporttime
	adlt2	interp	kdlt2
	acho2	vdelay	gasendR,adlt2*1000,1*1000
	
	kpan1	randomi	0,1,gkChoRte,1
	kpan2	randomi	0,1,gkChoRte,1
	a1L,a1R	pan2	acho1,kpan1
	a2L,a2R	pan2	acho2,kpan2
	achoL	=	a1L+a2L
	achoR	=	a1R+a2R
		outs	achoL*gkChoMix,achoR*gkChoMix
	

	gasendL	=	(gasendL+achoL)*gkRvbMix
	gasendR	=	(gasendR+achoR)*gkRvbMix
	SKIP_CHORUS:
	gasendL	=	gasendL*gkRvbMix
	gasendR	=	gasendR*gkRvbMix
endin

instr	4	;reverb
	if gkRvbMix==0 goto SKIP_REVERB
	aL,aR	reverbsc	gasendL,gasendR,gkRvbSize,12000
		outs	aL,aR
	SKIP_REVERB:
		clear	gasendL,gasendR
endin

</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
i 3 0 [3600*24*7]
i 4 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>; InharmonicAdditiveSynth.csd
; Written by Iain McCurdy, 2012.
; 
; This instrument takes information about modal frequency values for a sound (in the form of a list of values in a GEN 02 
; function table and transfers it into a GEN 09 function table for efficient playback by a single oscillator opcode.
; GEN 09 demands partial numbers to be integers (if we want ot avoid unwanted artefacts in the sound) so all modal 
; frequencies are multiplied by a large number before being rounded to integers  for the GEN 09 table in order to reduce 
; the loss of precision. There is a trade off in that we need this multiplier value to be large to minimise quantisation
; but if it is very large we need to use a higher quality oscillator opcode (more CPU drain) and/or a larger function table
; size for the GEN 09 tables (longer load time when the example is started).
; 
; If the size chosen for the GEN 09 tables is too small, aliasing artefacts will result when it is played back.
; 
; Amplitude Envelope
; ------------------
; Att.	-	Attack time in seconds
; Dec.	-	Decay time in seconds
; Sus.	-	Sustain level
; Rel.	-	Release time
; Level	-	Output amplitude level
; 
; Instrument
; ----------
; Select a GEN09 function table corresponding to a instrument or object
; 
; Filter Envelope (Lowpass)
; -------------------------
; Amount	-	Amount of influence of the envelope (in octaves)
; Dec.	-	Decay time in seconds
; Sus.	-	Sustain level
; Rel.	-	Release time in seconds
; Offset	-	Filter offset value (in octaves)
; 
; Chorus
; ------
; Mix	-	Dry/Wet mix of the chorus effect
; Depth	-	Depth of the modulations of the chorus effect
; Rate	-	Rate of modulation


<Cabbage>
form caption("Inharmonic Synth"), size(445, 285), pluginid("InSy") style("legacy")
image pos(0, 0),                  size(445, 285), colour("black"), shape("rounded"), outlinecolour("brown"), line(4)

groupbox bounds(275,10,160, 90), text("Instrument"), plant("instrument"){
combobox channel("Instr"), bounds( 10, 40,140, 25), value(5), text("Bass Guitar", "Dahina", "Banyan", "Xylophone", "Tibetan Bowl 180mm", "Spinel Sphere", "Pot Lid", "Red Cedar Wood Plate", "Tubular Bell", "Redwood Wood Plate", "Douglas Fir Wood Plate", "Uniform Wooden Bar", "Uniform Aluminium Bar", "Vibraphone 1", "Vibraphone 2", "Chladni Plate", "Tibetan Bowl 152mm", "Tibetan Bowl 140mm", "Wine Glass", "Small Handbell", "Albert Clock Bell", "Wood Block","Anvil")
}

groupbox bounds(10, 10,260, 90), text("Amplitude Envelope"), plant("ampenv"){
rslider bounds(  0, 25, 60, 60), text("Att."),  channel("AAtt"), colour("red"), trackercolour("red"), range(0.0001,1.00,0.0001,0.25,0.0001)
rslider bounds( 50, 25, 60, 60), text("Dec."),  channel("ADec"), colour("red"), trackercolour("red"), range(0.001,30.00,7,0.5)
rslider bounds(100, 25, 60, 60), text("Sus."),   channel("ASus"), colour("red"), trackercolour("red"), range(0, 1.00, 0)
rslider bounds(150, 25, 60, 60), text("Rel."),   channel("ARel"), colour("red"), trackercolour("red"), range(0.01, 30.00, 7,0.5)
rslider bounds(200, 25, 60, 60), text("Level"), channel("Lev"),  colour("maroon"), trackercolour("maroon"), range(0, 5.00, 0.1,0.5)
}

groupbox bounds(10,105,260, 90), text("Filter Envelope"), plant("filterenv"){
rslider bounds(  0, 25, 60, 60), text("Amount"),  colour("cornflowerblue"), trackercolour("cornflowerblue"), channel("FAmt"), range(0, 10.0, 8)
rslider bounds( 50, 25, 60, 60), text("Dec."),   colour("cornflowerblue"), trackercolour("cornflowerblue"), channel("FDec"), range(0.001,30.00,7,0.5)
rslider bounds(100, 25, 60, 60), text("Sus."),   colour("cornflowerblue"), trackercolour("cornflowerblue"), channel("FSus"), range(0,1.00,0)
rslider bounds(150, 25, 60, 60), text("Rel."),   colour("cornflowerblue"), trackercolour("cornflowerblue"), channel("FRel"), range(0.1,30.00,7,0.5)
rslider bounds(200, 25, 60, 60), text("Offset"),  colour("cornflowerblue"), trackercolour("cornflowerblue"), channel("F_OS"), range(-4,10.0, 0)
}

groupbox bounds(275,105, 160, 90), text("Chorus"), plant("cho"){
rslider  bounds(  0, 25,60,60), text("Mix"),   channel("ChoMix"), trackercolour("white"), range(0, 1.00, 0.5)
rslider  bounds( 50, 25,60,60), text("Depth"), channel("ChoDep"), trackercolour("white"), range(0, 0.1, 0.01,0.5, 0.001)
rslider  bounds(100, 25,60,60), text("Rate"),  channel("ChoRte"), trackercolour("white"), range(0, 20.00, 0.96, 0.5)
}

keyboard pos(10, 200), size(425, 80)
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100
ksmps 		= 	32
nchnls 		= 	2
0dbfs		=	1	;MAXIMUM AMPLITUDE

massign	0,2					;MIDI NOTES TO INSTRUMENT 2
giTableSize	=	131073			;FUNCTION TABLE SIZE - THIS NEEDS TO BE FAIRLY LARGE IN ORDER TO ACCOMMODATE ACCURATE REPRESENTATION OF UPPER PARTIALS. IF THIS IS TOO LOW ALIASING WILL OCCUR WHEN HIGHER NOTES ARE PLAYED
giRtosScale	=	1000			;SCALING FACTOR APPLIED TO RATIOS WRITTEN TO GEN09 FUNCTION TABLE. THIS IS BASICALLY A PRECISION CONTROL ON HOW MUCH PARTIAL FREQUENCIES WILL BE QUANTISED (ROUNDED UP OR DOWN) BEFORE BEING WRITTEN TO THE GEN 09 FUNCTION TABLE

;Author: Iain McCurdy (2012)

;FUNCTION TABLES STORING MODAL FREQUENCY RATIOS===================================================================================================================================
;plucked string
girtos1		ftgen	0,0,-20, -2, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20
;dahina
girtos2		ftgen	0,0,-6,-2, 1, 2.89, 4.95, 6.99, 8.01, 9.02
;banyan
girtos3		ftgen	0,0,-6,-2, 1, 2.0, 3.01, 4.01, 4.69, 5.63
;xylophone
girtos4		ftgen	0,0,-6,-2, 1, 3.932, 9.538, 16.688, 24.566, 31.147
;tibetan bowl (180mm)
girtos5		ftgen	0,0,-7,-2, 1, 2.77828, 5.18099, 8.16289, 11.66063, 15.63801, 19.99
;spinel sphere with diameter of 3.6675mm
girtos6		ftgen	0,0,-24,-2, 1, 1.026513174725, 1.4224916858532, 1.4478690202098, 1.4661959580455, 1.499452545408, 1.7891839345101, 1.8768994627782, 1.9645945254541, 1.9786543873113, 2.0334612432847, 2.1452852391916, 2.1561524686621, 2.2533435661294, 2.2905090816065, 2.3331798413917, 2.4567715528268, 2.4925556408289, 2.5661806088514, 2.6055768738808, 2.6692760296751, 2.7140956766436, 2.7543617293425, 2.7710411870043 
;pot lid
girtos7		ftgen	0,0,-6,-2, 1, 3.2, 6.23, 6.27, 9.92, 14.15
;red cedar wood plate
girtos8		ftgen	0,0,-4,-2, 1, 1.47, 2.09, 2.56
;tubular bell
girtos9		ftgen	0,0,-10,-2, 272/437, 538/437, 874/437, 1281/437, 1755/437, 2264/437, 2813/437, 3389/437, 4822/437, 5255/437
;redwood wood plate
girtos10	ftgen	0,0,-4,-2, 1, 1.47, 2.11, 2.57
;douglas fir wood plate
girtos11	ftgen	0,0,-4,-2, 1, 1.42, 2.11, 2.47
;uniform wooden bar
girtos12	ftgen	0,0,-6,-2, 1, 2.572, 4.644, 6.984, 9.723, 12
;uniform aluminum bar
girtos13	ftgen	0,0,-6,-2, 1, 2.756, 5.423, 8.988, 13.448, 18.680
;vibraphone 1
girtos14	ftgen	0,0,-6,-2, 1, 3.984, 10.668, 17.979, 23.679, 33.642
;vibraphone 2
girtos15	ftgen	0,0,-6,-2, 1, 3.997, 9.469, 15.566, 20.863, 29.440
;Chalandi plates
girtos16	ftgen	0,0,-5,-2, 1, 1.72581, 5.80645, 7.41935, 13.91935
;tibetan bowl (152 mm)
girtos17	ftgen	0,0,-7,-2, 1, 2.66242, 4.83757, 7.51592, 10.64012, 14.21019, 18.14027
;tibetan bowl (140 mm)	
girtos18	ftgen	0,0,-5,-2, 1, 2.76515, 5.12121, 7.80681, 10.78409
;wine glass
girtos19	ftgen	0,0,-5,-2, 1, 2.32, 4.25, 6.63, 9.38
;small handbell
girtos20	ftgen	0,0,-22,-2, 1, 1.0019054878049, 1.7936737804878, 1.8009908536585, 2.5201981707317, 2.5224085365854, 2.9907012195122, 2.9940548780488, 3.7855182926829, 3.8061737804878, 4.5689024390244, 4.5754573170732, 5.0296493902439, 5.0455030487805, 6.0759908536585, 5.9094512195122, 6.4124237804878, 6.4430640243902, 7.0826219512195, 7.0923780487805, 7.3188262195122, 7.5551829268293 
;albert clock bell belfast
girtos21	ftgen	0,0,-22,-2, 2.043260,1.482916,1.000000,3.328848,4.761811,1.477056,0.612007,2.661295,1.002793,4.023776,0.254139,2.043916,4.032463,2.659438,4.775560,5.500494,3.331014,0.809697,2.391301, 0.254098,1.901476,2.366563    ;,0.614968,2.046543,1.814887,3.130744,2.484426,0.558874,0.801697,0.070870,3.617036,2.782656
;wood block
girtos22	ftgen	0,0,4,-2,	915/915,1540/915,1863/915,3112/915
;anvil
girtos23	ftgen	0,0,16,-2,	0.783,0.805,1,1.087,1.124,1.241,1.400,1.607,1.824,2.074,2.414,2.530,2.696,3.094,3.562,3.631
;=================================================================================================================================================================================

;=================================================================================================================================================================================
;GEN09 FUNCTION TABLE VERSIONS OF THE MODAL FREQUENCY TABLES
;THESE AREN'T ACTUALLY NEEDED AS THE TABLES ARE CALCULATED IN INSTRUMENT 2 BUT IF INSTRUMENT 2 IS OMITTED THESE TABLES WILL BE NEEDED
;NOTE THAT PARTIAL NUMBER HAVE BEEN MULTIPLIED BY giRtosScale AND THAT THE FREQUENCY OF ANY OSCILLATOR THAT USES THESE TABLES WILL HAVE TO BE DIVIDED BY THE SAME NUMBER 
giwave1		ftgen	0, 0, giTableSize, 9, 1000,1.000,0,	 2000,0.667,0,	 3000,0.444,0,	 4000,0.296,0,	 5000,0.198,0,	 6000,0.132,0,	 7000,0.088,0,	 8000,0.059,0,	 9000,0.039,0,	 10000,0.026,0,	 11000,0.017,0,	 12000,0.012,0,	 13000,0.008,0,	 14000,0.005,0,	 15000,0.003,0,	 16000,0.002,0,	 17000,0.002,0,	 18000,0.001,0,	 19000,0.001,0,	 20000,0.000,0,	 0,0.000,0,	 0,0.000,0
giwave2		ftgen	0, 0, giTableSize, 9, 1000,1.000,0,	 2890,0.500,0,	 4950,0.250,0,	 6990,0.125,0,	 8010,0.062,0,	 9020,0.031,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0
giwave3		ftgen	0, 0, giTableSize, 9, 1000,1.000,0,	 2000,0.667,0,	 3010,0.444,0,	 4010,0.296,0,	 4690,0.198,0,	 5630,0.132,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0
giwave4		ftgen	0, 0, giTableSize, 9, 1000,1.000,0,	 3932,0.500,0,	 9538,0.250,0,	 16688,0.125,0,	 24566,0.062,0,	 31147,0.031,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0
giwave5		ftgen	0, 0, giTableSize, 9, 1000,1.000,0,	 2778,0.500,0,	 5181,0.250,0,	 8163,0.125,0,	 11661,0.062,0,	 15638,0.031,0,	 19990,0.016,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0
giwave6		ftgen	0, 0, giTableSize, 9, 1000,1.000,0,	 1027,1.000,0,	 1422,1.000,0,	 1448,1.000,0,	 1466,1.000,0,	 1499,1.000,0,	 1789,1.000,0,	 1877,1.000,0,	 1965,1.000,0,	 1979,1.000,0,	 2033,1.000,0,	 2145,1.000,0,	 2156,1.000,0,	 2253,1.000,0,	 2291,1.000,0,	 2333,1.000,0,	 2457,1.000,0,	 2493,1.000,0,	 2566,1.000,0,	 2606,1.000,0,	 2669,1.000,0,	 2714,1.000,0
giwave7		ftgen	0, 0, giTableSize, 9, 1000,1.000,0,	 3200,0.833,0,	 6230,0.694,0,	 6270,0.579,0,	 9920,0.482,0,	 14150,0.402,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0
giwave8		ftgen	0, 0, giTableSize, 9, 1000,1.000,0,	 1470,0.667,0,	 2090,0.444,0,	 2560,0.296,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0
giwave9		ftgen	0, 0, giTableSize, 9, 622,1.000,0,	 1231,1.000,0,	 2000,1.000,0,	 2931,1.000,0,	 4016,1.000,0,	 5181,1.000,0,	 6437,1.000,0,	 7755,1.000,0,	 11034,1.000,0,	 12025,1.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0
giwave10	ftgen	0, 0, giTableSize, 9, 1000,1.000,0,	 1470,1.000,0,	 2110,1.000,0,	 2570,1.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0
giwave11	ftgen	0, 0, giTableSize, 9, 1000,1.000,0,	 1420,1.000,0,	 2110,1.000,0,	 2470,1.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0
giwave12	ftgen	0, 0, giTableSize, 9, 1000,1.000,0,	 2572,0.667,0,	 4644,0.444,0,	 6984,0.296,0,	 9723,0.198,0,	 0,0.132,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0
giwave13	ftgen	0, 0, giTableSize, 9, 1000,1.000,0,	 2756,1.000,0,	 5423,1.000,0,	 8988,1.000,0,	 13448,1.000,0,	 18680,1.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0
giwave14	ftgen	0, 0, giTableSize, 9, 1000,1.000,0,	 3984,0.500,0,	 10668,0.250,0,	 17979,0.125,0,	 23679,0.062,0,	 33642,0.031,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0
giwave15	ftgen	0, 0, giTableSize, 9, 1000,1.000,0,	 3997,0.500,0,	 9469,0.250,0,	 15566,0.125,0,	 20863,0.062,0,	 29440,0.031,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0
giwave16	ftgen	0, 0, giTableSize, 9, 1000,1.000,0,	 1726,0.667,0,	 5806,0.444,0,	 7419,0.296,0,	 13919,0.198,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0
giwave17	ftgen	0, 0, giTableSize, 9, 1000,1.000,0,	 2662,0.500,0,	 4838,0.250,0,	 7516,0.125,0,	 10640,0.062,0,	 14210,0.031,0,	 18140,0.016,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0
giwave18	ftgen	0, 0, giTableSize, 9, 1000,1.000,0,	 2765,0.500,0,	 5121,0.250,0,	 7807,0.125,0,	 10784,0.062,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0
giwave19	ftgen	0, 0, giTableSize, 9, 1000,1.000,0,	 2320,1.000,0,	 4250,1.000,0,	 6630,1.000,0,	 9380,1.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0
giwave20	ftgen	0, 0, giTableSize, 9, 1000,1.000,0,	 1002,0.833,0,	 1794,0.694,0,	 1801,0.579,0,	 2520,0.482,0,	 2522,0.402,0,	 2991,0.335,0,	 2994,0.279,0,	 3786,0.233,0,	 3806,0.194,0,	 4569,0.162,0,	 4575,0.135,0,	 5030,0.112,0,	 5046,0.093,0,	 6076,0.078,0,	 5909,0.065,0,	 6412,0.054,0,	 6443,0.045,0,	 7083,0.038,0,	 7092,0.031,0,	 7319,0.026,0,	 7555,0.022,0
giwave21	ftgen	0, 0, giTableSize, 9, 2043,1.000,0,	 1483,0.909,0,	 1000,0.826,0,	 3329,0.751,0,	 4762,0.683,0,	 1477,0.621,0,	 612,0.564,0,	 2661,0.513,0,	 1003,0.467,0,	 4024,0.424,0,	 254,0.386,0,	 2044,0.350,0,	 4032,0.319,0,	 2659,0.290,0,	 4776,0.263,0,	 5500,0.239,0,	 3331,0.218,0,	 810,0.198,0,	 2391,0.180,0,	 254,0.164,0,	 1901,0.149,0,	 2367,0.135,0
giwave22	ftgen	0, 0, giTableSize, 9, 1000,1.000,0,	 1683,0.909,0,	 2036,0.826,0,	 3401,0.751,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0,	 0,0.000,0
;anvil
giwaves23	ftgen	0, 0, giTableSize, 9, 720,1.413,0, 739,0.891,0, 919,1.000,0, 1000,0.708,0, 1033,1.778,0, 1140,1.259,0, 1287,0.891,0, 1477,1.259,0, 1677,0.794,0, 1907,1.413,0, 2219,1.000,0, 2326,0.316,0, 2479,0.398,0, 2845,0.316,0, 3276,0.178,0, 3339,0.200,0
;=================================================================================================================================================================================

gisine		ftgen	0,0,4096,10,1				;A SINE WAVE
								;FREQUENCY OF AUDIO OSCILLATOR WILL BE DIVIDED BY THIS VALUE
								;TOO LOW A VALUE HERE WILL RESULT IN QUANTISATION OF PARTIAL FREQUENCIES
								;TOO HIGH A VALUE WILL RESULT IN HIGHER PARTIALS BEING POORLY REPRESENTED IN THE TABLE, LEADING TO ALIASING 
gilfoshape	ftgen	0, 0, 4096, 19, 0.5, 1, 180, 1		;U-SHAPE PARABOLA (USED BY THE CHORUS EFFECT)
gidurscal	ftgen	0, 0, 128, -16, 3, 128, -4, 0.2		;A FUNCTION USED TO RESCALE ENVELOPE DURATIONS ACCORDING TO NOTE PLAYED
givelscal	ftgen	0, 0, 128, -16, 0, 128, -4, 1		;A FUNCTION USED TO REMAP MIDI VELOCITY VALUES - THE CURVATURE OF THIS FUNCTION CAN BE CHANGED TO TAKE ACCOUNT OF THE VARYING VELOCITY RESPONSE OF DIFFERENT MIDI KEYBOARDS
gasend		init	0

instr	CreateGEN09Tables	;DERIVE GEN09 FUNCTION TABLE WAVEFORMS FROM THE GEN02 FUNCTION TABLES OF MODAL FREQUENCY RATIOS
;A MACRO IS DEFINED THAT READS A SINGLE MODAL FREQUENCY RATIO FROM A TABLE 

#define	PARTIAL(WaveNum'PartNum)
	#
	if $PartNum<=inratios then				;IF COUNTER IS WITHIN THE LIMITS OF THE NUMBER OF DEFINED MODAL FREQUENCY RATIOS...
	 irto$PartNum	table	$PartNum-1,girtos$WaveNum	;...READ A VALUE FROM THE TABLE
	 irto$PartNum	=	round(irto$PartNum*giRtosScale)	;MULTIPLY RATIO BY giRtosScale THEN INTEGERISE BYT ROUND TO THE NEAREST WHOLE NUMBER
	 iamp$PartNum	=	iamp/(iampscal^($PartNum-1))	;DERIVE AMPLITUDE VALUE FOR THIS PARTIAL
	else							;IF COUNTER IS BEYOND THE LIMITS OF THE NUMBER OF DEFINED MODAL FREQUENCY RATIOS...
	 irto$PartNum	=	0				;SET RATIO TO ZERO
	 iamp$PartNum	=	0				;SET PARTIAL STRENGTH TO ZERO
	endif
	#

;A MACRO IS DEFINED THAT CREATES A GEN09 TABLE FROM MODAL FREQUENCY DATA 
#define	WAVEFORM(WaveNum'AmpScal)
	#
	inratios	=	ftlen(girtos$WaveNum)
	iampscal	=	$AmpScal			;AMPLITUDE SCALING 
	iamp		=	1				;PARTIAL STRENGTH OF FIRST PARTIAL
	$PARTIAL($WaveNum'1)						;MACRO EXPANDED FOR EACH PARTIAL...
	$PARTIAL($WaveNum'2)
	$PARTIAL($WaveNum'3)
	$PARTIAL($WaveNum'4)
	$PARTIAL($WaveNum'5)
	$PARTIAL($WaveNum'6)
	$PARTIAL($WaveNum'7)
	$PARTIAL($WaveNum'8)
	$PARTIAL($WaveNum'9)
	$PARTIAL($WaveNum'10)
	$PARTIAL($WaveNum'11)
	$PARTIAL($WaveNum'12)                          
	$PARTIAL($WaveNum'13)
	$PARTIAL($WaveNum'14)
	$PARTIAL($WaveNum'15)
	$PARTIAL($WaveNum'16)
	$PARTIAL($WaveNum'17)
	$PARTIAL($WaveNum'18)                                                                                                                                                         
	$PARTIAL($WaveNum'19)
	$PARTIAL($WaveNum'20)
	$PARTIAL($WaveNum'21)
	$PARTIAL($WaveNum'22)                                                                                                                                                            
	;GENERATE A GEN09 FUNCTION TABLE (ALL PHASES ARE SET TO ZERO)
	giwave$WaveNum	ftgen	0,0,giTableSize,9, irto1,iamp1,0, irto2,iamp2,0, irto3,iamp3,0, irto4,iamp4,0, irto5,iamp5,0, irto6,iamp6,0, irto7,iamp7,0, irto8,iamp8,0, irto9,iamp9,0, irto10,iamp10,0, irto11,iamp11,0, irto12,iamp12,0, irto13,iamp13,0, irto14,iamp14,0, irto15,iamp15,0, irto16,iamp16,0, irto17,iamp17,0, irto18,iamp18,0, irto19,iamp19,0, irto20,iamp20,0, irto21,iamp21,0, irto22,iamp22,0 	

	;UNCOMMENT THE FOLLOWING LINE IF YOU WISH TO WRITE GENERATED TABLES TO A TEXT FILE FOR LATER USE
	;fprints "GEN09InharmonicTables.txt", "giwave$WaveNum%tftgen%t0, 0, giTableSize, 9, %d,%5.3f,0,%t %d,%5.3f,0,%t %d,%5.3f,0,%t %d,%5.3f,0,%t %d,%5.3f,0,%t %d,%5.3f,0,%t %d,%5.3f,0,%t %d,%5.3f,0,%t %d,%5.3f,0,%t %d,%5.3f,0,%t %d,%5.3f,0,%t %d,%5.3f,0,%t %d,%5.3f,0,%t %d,%5.3f,0,%t %d,%5.3f,0,%t %d,%5.3f,0,%t %d,%5.3f,0,%t %d,%5.3f,0,%t %d,%5.3f,0,%t %d,%5.3f,0,%t %d,%5.3f,0,%t %d,%5.3f,0%n", irto1,iamp1, irto2,iamp2, irto3,iamp3, irto4,iamp4, irto5,iamp5, irto6,iamp6, irto7,iamp7, irto8,iamp8, irto9,iamp9, irto10,iamp10, irto11,iamp11, irto12,iamp12, irto13,iamp13, irto14,iamp14, irto15,iamp15, irto16,iamp16, irto17,iamp17, irto18,iamp18, irto19,iamp19, irto20,iamp20, irto21,iamp21, irto22,iamp22
	#	
	;EXPAND MACRO FOR EACH WAVEFORM TO BE CREATED
	;ARG1 = A COUNTER, SHOULD CORRESPOND TO NUMBER APPENDED TO 'girtos' FOR THE TABLE HANDLE OF THE REQUIRED MODAL FREQUENCIES TABLE
	;ARG2 = PARTIAL STRENGTHS SCALING: 1=FLAT >1=HIGHER PARTIALS ARE INCREASINGLY ATTENUATED
	$WAVEFORM(1' 1.5)
	$WAVEFORM(2' 2)                                                                                  
	$WAVEFORM(3' 1.5)
	$WAVEFORM(4' 2)
	$WAVEFORM(5' 2)
	$WAVEFORM(6' 1)
	$WAVEFORM(7' 1.2)
	$WAVEFORM(8' 1.5)
	$WAVEFORM(9' 1)          
	$WAVEFORM(10' 1)
	$WAVEFORM(11' 1)
	$WAVEFORM(12' 1.5)                                       
	$WAVEFORM(13' 1)
	$WAVEFORM(14' 2)
	$WAVEFORM(15' 2)    
	$WAVEFORM(16' 1.5)
	$WAVEFORM(17' 2)
	$WAVEFORM(18' 2)
	$WAVEFORM(19' 1)
	$WAVEFORM(20' 1.2)
	$WAVEFORM(21' 1.1)
	$WAVEFORM(22' 1.1)
endin


instr	1	; Read in widgets
	gkInstr	chnget	"Instr"
	gkAAtt	chnget	"AAtt"
	gkADec	chnget	"ADec"
	gkASus	chnget	"ASus"
	gkARel	chnget	"ARel"
	gkLev	chnget	"Lev"
	gkFDec	chnget	"FDec"
	gkFSus	chnget	"FSus"
	gkFRel	chnget	"FRel"
	gkFAmt	chnget	"FAmt"
	gkF_OS	chnget	"F_OS"
endin

instr	2	;SOUND GENERATING INSTRUMENT

	icps	cpsmidi						;READ CPS VALUE IN FROM MIDI KEYBOARD
	inum	notnum						;READ MIDI NOTE NUMBER
	ivel	veloc	0,1					;READ MIDI VELOCITY
	ivel	table	ivel,givelscal,1			;REMAP MIDI VELOCITY - SEE TABLE givelscal ABOVE
	iscale	table	inum,gidurscal				;DURATIONAL RESCALING ACCORDING TO NOTE PLAYED - HIGHER NOTE WILL DECAY QUICKER IN REFLECTION OF REAL-WORLD CHARACTERISTICS
	
	iAAtt	=		i(gkAAtt)*iscale
	iADec	=		i(gkADec)*iscale
	iARel	=		i(gkARel)*iscale
	kenv	linsegr		0,iAAtt,1,iADec,i(gkASus),iARel,0	;AMPLITUDE ENVELOPE WITH MIDI SENSING RELEASE SEGEMENT
	kenv	expcurve	kenv,64
	aenv	interp		kenv
	asig	poscil3		gkLev*ivel*aenv*0.8,icps/giRtosScale,giwave1+i(gkInstr)-1				;AUDIO OSCILLATOR poscil3 USED FOR IMPROVED FIDELITY OVER OTHER OSCILLATORS. FREQUENCY IS SCALED DOWN ACCORIND TO THE VALUE OF giRtosScale DEFINED IN THE HEADER
	
	iFDec	=		i(gkFDec)*iscale
	iFSus	=		i(gkFSus)
	iFRel	=		i(gkFRel)*iscale
	iFRel	=		iFRel > iARel ? iARel : iFRel
	kcf_env	linsegr		1,iFDec,iFSus,iFRel,0
	kcf_env	expcurve	kcf_env,8	
	kcf_oct	limit	octcps(icps*0.25) + gkF_OS + (gkFAmt*kcf_env*ivel), 4, 14
	;asig	clfilt		asig, cpsoct(kcf_oct), 0, 2					;LOW PASS FILTER THE SOUND (SUBTRACTIVE SYNTHESIS)
	asig	tone		asig, cpsoct(kcf_oct)						;LOW PASS FILTER THE SOUND (SUBTRACTIVE SYNTHESIS)
	gasend	=	gasend+asig

endin

instr	3	; Chorus Effect
	gkChoMix	chnget	"ChoMix"
	gkChoRte	chnget	"ChoRte"
	gkChoDep	chnget	"ChoDep"

	if gkChoMix==0 kgoto SKIP_CHORUS
	kporttime	linseg	0,0.001,1
	kporttime	=	kporttime/gkChoRte
	kdlt1	randomi	ksmps/sr,gkChoDep,gkChoRte,1
	kdlt1	portk	kdlt1,kporttime
	adlt1	interp	kdlt1
	acho1	vdelay	gasend,adlt1*1000,1*1000
	
	kdlt2	randomi	ksmps/sr,gkChoDep,gkChoRte,1
	kdlt2	portk	kdlt2,kporttime
	adlt2	interp	kdlt2
	acho2	vdelay	gasend,adlt2*1000,1*1000
	
	kpan1	randomi	0,1,gkChoRte,1
	kpan2	randomi	0,1,gkChoRte,1
	a1L,a1R	pan2	acho1,kpan1
	a2L,a2R	pan2	acho2,kpan2
	achoL	=	a1L+a2L
	achoR	=	a1R+a2R
		outs	achoL*gkChoMix, achoR*gkChoMix
	SKIP_CHORUS:

		outs		gasend, gasend	;SEND UN-CHORUSSED AUDIO TO THE OUTPUTS
		clear	gasend
endin



instr	1000	; Preset (change sliders when a new instrument is selected)
 ktrig	changed	gkInstr
; gkInstr	init	5
; ktrig		init	1
 if ktrig==1 then
  reinit SetPreset
  SetPreset:
  #define PRESET(N'AAtt'ADec'ASus'ARel'FAmt'FDec'FSus'FRel'F_OS'ChoMix'ChoDep'ChoRte)
  #
  if i(gkInstr)==$N then
   chnset	$AAtt, "AAtt"  
   chnset	$ADec, "ADec"  
   chnset	$ASus, "ASus"  
   chnset	$ARel, "ARel"  
   chnset	$FAmt, "FAmt"  
   chnset	$FDec, "FDec"  
   chnset	$FSus, "FSus"  
   chnset	$FRel, "FRel"  
   chnset	$F_OS, "F_OS"  
   chnset	$ChoMix, "ChoMix"  
   chnset	$ChoDep, "ChoDep"  
   chnset	$ChoRte, "ChoRte"
  endif
  #
  ;      (N 'AAtt  'ADec'ASus'ARel'FAmt'FDec'FSus'FRel'F_OS'ChoMix'ChoDep'ChoRte)
  $PRESET(1 '0.0001'16.0'0   '0.60'4.8 '2.01'0   '0.60'1   '0.5   '0.01  '0.96)	; plucked string
  $PRESET(2 '0.0001'1.70'0   '1.70'2.02'0.27'0   '0.27'0   '0.5   '0.01  '0.96)	; dahina
  $PRESET(3 '0.0001'0.45'0   '0.45'0.7 '0.45'0   '0.45'0   '0.5   '0.01  '0.96)	; banyan
  $PRESET(4 '0.0050'1.90'0   '1.90'3.5 '1.27'0   '1.27'-2  '0.5   '0.01  '0.96)	; xylophone
  $PRESET(5 '0.0001'15.0'0   '15.0'8   '3.00'0   '3.00'0.3 '0.5   '0.065 '0.13)	; tibetan bowl (180mm)
  $PRESET(6 '0.0001'0.26'0   '0.26'8   '0.05'0   '0.05'-4  '0.5   '0.01  '0.96)	; spinel sphere with diameter of 3.6675mm
  $PRESET(7 '0.0001'7   '0   '7   '7.6 '7   '0   '7   '-4  '0.5   '0.01  '0.96)	; pot lid
  $PRESET(8 '0.0001'0.70'0   '0.70'8   '0.47'0   '0.47'-4  '0.5   '0.01  '0.96)	; red cedar wood plate
  $PRESET(9 '0.0001'15.0'0   '15.0'8   '6.00'0   '6.00'2   '0.5   '0.01  '0.96)	; tubular bell
  $PRESET(10'0.0001'0.70'0   '0.70'8   '0.47'0   '0.47'-4  '0.5   '0.01  '0.96)	; redwood wood plate
  $PRESET(11'0.0001'0.70'0   '0.70'8   '0.47'0   '0.47'-4  '0.5   '0.01  '0.96)	; douglas fir wood plate
  $PRESET(12'0.0001'0.70'0   '0.70'8   '0.47'0   '0.47'-4  '0.5   '0.01  '0.96)	; uniform wooden bar
  $PRESET(13'0.0001'15.0'0   '15.0'8   '6.00'0   '6.00'2   '0.5   '0.065 '0.13)	; uniform aluminum bar
  $PRESET(14'0.01  '15.0'0   '15.0'8.6 '6.80'0   '6.80'-4  '0.5   '0.065 '0.13)	; vibraphone 1
  $PRESET(15'0.01  '15.0'0   '15.0'8.6 '6.80'0   '6.80'-4  '0.5   '0.065 '0.13)	; vibraphone 2
  $PRESET(16'0.0001'3.2 '0   '3.2 '5.6 '2.90'0   '2.90'-4  '0.5   '0.01  '0.96)	; Chladni plate
  $PRESET(17'0.0001'15.0'0   '15.0'8   '3.00'0   '3.00'0.3 '0.5   '0.065 '0.13)	; tibetan bowl (152 mm)
  $PRESET(18'0.0001'15.0'0   '15.0'8   '3.00'0   '3.00'0.3 '0.5   '0.065 '0.13)	; tibetan bowl (140 mm)
  $PRESET(19'0.0001'7   '0   '7   '5.6 '7   '0   '7   '-4  '0.5   '0.01  '0.96)	; wine glass
  $PRESET(20'0.0001'15  '0   '15  '5.6 '12  '0   '12  '-4  '0.5   '0.01  '0.96)	; small handbell
  $PRESET(21'0.0001'15.0'0   '15.0'8   '6.00'0   '6.00'2   '0.5   '0.01  '0.96)	; albert clock bell belfast
  $PRESET(22'0.0001'0.26'0   '0.26'8   '0.05'0   '0.05'-4  '0.5   '0.01  '0.96)	; wood block
  rireturn
 endif
endin


</CsInstruments>

<CsScore>
;i "CreateGEN09Tables" 0 0
i 1 0 [60*60*24*7]
i 3 0 [60*60*24*7]
i 1000 0.1 [60*60*24*7]
</CsScore>

</CsoundSynthesizer>; MouseChord.csd
; Written by Iain McCurdy, 2013

; Mouse Chord
; -----------
; This csd was originally written for use by someone who only had the use of a head-mouse for music performance.
; If the mouse enters one of the coloured boxes the chord indicated by the Roman numeral is played. 
; Continuous dynamic control is possible by moving the mouse within the box: the dynamic is lowest at the edges of each box and highest at the centre of each box.
; Key and tonality (major/minor) can also be selected from within the GUI.
; Professional head mouse or iris tracking software can be very expensive and requires practice. 
; Camera Mouse is a good free option for Windows users. It can be found at www.cameramouse.org.
; iNavigate is a free option for Mac OS 10.5 if the user wants to experiment with this approach.
; 
; You can change the size of the panel in the Cabbage 'form' setup. 
; If you do this, change the values for 'giPanelWidth' and 'giPanelHeight' just below the orchestra header and all elements
; will be stretch, compressed and moved appropriately.

<Cabbage>
form caption("Mouse Chord") size(700, 500), pluginid("MChd"), scrollbars(0), guirefresh(64) style("legacy")
image bounds(0,0,0,0),     colour(255,100,0),   shape("rounded"), outlinecolour("white"), line(1), identchannel("1") 		; I
image bounds(0,0,0,0),     colour("Blue"),      shape("rounded"), outlinecolour("white"), line(1), identchannel("2") 		; II
image bounds(0,0,0,0),     colour("Yellow"),    shape("rounded"), outlinecolour("white"), line(1), identchannel("3") 		; III
image bounds(0,0,0,0),     colour("Green"),     shape("rounded"), outlinecolour("white"), line(1), identchannel("4") 		; IV
image bounds(0,0,0,0),     colour(255,0,0),     shape("rounded"), outlinecolour("white"), line(1), identchannel("5") 		; V
image bounds(0,0,0,0),     colour("Purple"),    shape("rounded"), outlinecolour("white"), line(1), identchannel("6") 		; VI
image bounds(0,0,0,0),     colour(150, 40, 40), shape("rounded"), outlinecolour("white"), line(1), identchannel("7") 	; VII
label bounds(132,270, 40, 50), text("I"),   fontcolour("white"), align("centre"), identchannel("11")
label bounds(380,270, 45, 50), text("II"),  fontcolour("white"), align("centre"), identchannel("22")
label bounds(615,270, 70, 50), text("III"), fontcolour("white"), align("centre"), identchannel("33")
label bounds(875,270, 60, 50), text("IV"),  fontcolour("white"), align("centre"), identchannel("44")
label bounds(220,620, 60, 50), text("V"),   fontcolour("white"), align("centre"), identchannel("55")
label bounds(470,620, 60, 50), text("VI"),  fontcolour("white"), align("centre"), identchannel("66")
label bounds(708,620, 80, 50), text("VII"), fontcolour("white"), align("centre"), identchannel("77")

combobox bounds(  5, 20, 70, 20), channel("key"), value(12), text("B", "A#", "A", "G#", "G", "F#", "F", "E", "D#", "D", "C#", "C")
combobox bounds( 80, 20, 70, 20), channel("oct"), value(3), text("2", "1", "0", "-1", "-2")
combobox bounds(155, 20, 70, 20), channel("ton"), value(2), text("minor", "major")
combobox bounds(230, 20, 70, 20), channel("ins"), value(1), text("strings", "brass")
label    bounds( 20,  5, 30, 11), text("Key"), fontcolour("white")
label    bounds( 85,  5, 50, 11), text("Octave"), fontcolour("white")
label    bounds(158,  5, 55, 11), text("Tonality"), fontcolour("white")
label    bounds(230,  5, 70, 11), text("Instrument"), fontcolour("white"), align("centre")

</Cabbage>


<CsoundSynthesizer>

<CsOptions>
-n -dm0
</CsOptions>

<CsInstruments>

sr	= 	44100
ksmps	= 	32
nchnls	= 	2
0dbfs	=	1	;MAXIMUM AMPLITUDE REGARDLESS OF BIT DEPTH
	seed	0
giPanelWidth	=	700
giPanelHeight	=	500
giBoxWidth	=	giPanelWidth / 5.5
giBoxHeight	=	giPanelHeight / 4

giBox1X		=	giPanelWidth / (1100/75)
giBox1Y		=	giPanelHeight / (800/130)
giBox2X		=	giPanelWidth / (1100/325)
giBox2Y		=	giPanelHeight / (800/130)
giBox3X		=	giPanelWidth / (1100/575)
giBox3Y		=	giPanelHeight / (800/130)
giBox4X		=	giPanelWidth / (1100/825)
giBox4Y		=	giPanelHeight / (800/130)
giBox5X		=	giPanelWidth / (1100/175)
giBox5Y		=	giPanelHeight / (800/480)
giBox6X		=	giPanelWidth / (1100/425)
giBox6Y		=	giPanelHeight / (800/480)
giBox7X		=	giPanelWidth / (1100/675)
giBox7Y		=	giPanelHeight / (800/480)


zakinit	4,10
gkRvbSze	init	0.85
gkRvbSnd	init	0.2



gisaw		ftgen	0,0,4096,11,80,1,0.9

/* generate bandlimited sawtooth waves */
i0	=  0
loop1:
imaxh	=  sr / (2 * 440.0 * exp (log(2.0) * (i0 - 69) / 12))
i_	ftgen i0 + 10, 0, 4096, -30, gisaw, 1, imaxh					;use gen 30
i0	=  i0 + 1
	if (i0 < 127.5) igoto loop1





;giahh55 	ftgen	0,0,4096,10,0.667225,0.194524,0.098683,0.096875,0.021209,0.006311,0.002978,0.001013,0.001249,0.001446,0.002393,0.004826,0.018741,0.012161,0.010480,0.005261,0.004569,0.001376,0.001132,0.003605,0.001846,0.002757,0.005346,0.004712,0.004806,0.002357,0.001109,0.001302,0.001860,0.001054,0.001120,0.001642,0.002240,0.004382,0.005473,0.003755,0.002444,0.002088,0.001822,0.000946,0.000790,0.001222,0.001653,0.001374,0.001401,0.002118,0.002061,0.001470,0.001198,0.001635,0.002387,0.002248,0.001327,0.000951,0.000884,0.000844,0.000805,0.000667,0.000669,0.000701,0.000591,0.000445,0.000367,0.000314,0.000272,0.000225,0.000179,0.000152,0.000164,0.000169,0.000151,0.000144,0.000137,0.000121,0.000115,0.000123,0.000125,0.000116,0.000102,0.000095,0.000102,0.000120,0.000135,0.000132,0.000117,0.000100,0.000084,0.000074,0.000072,0.000075,0.000077,0.000079,0.000083,0.000083,0.000081,0.000082,0.000084,0.000081,0.000074,0.000063
giooh 		ftgen 	0,0,4096,10, 0.110941,0.606890,0.046168,0.040510,0.031310,0.007323,0.003115,0.002749,0.002420,0.002253,0.002853,0.002337,0.002672,0.002061,0.002202,0.002410,0.002615,0.005079,0.003192,0.002699,0.003708,0.003501,0.002264,0.001713,0.001713

gicos		ftgen	0,0,131072,11,1		;COSINE WAVE (USED BY THE LFOS)
gieqffn		ftgen	0,0,4097,7,-1,4096,1
gieqlfn		ftgen	0,0,4097,7,-1,4096,1
gieqqfn		ftgen	0,0,4097,7,-1,4096,1

;DEFINE CHORDS I-VII IN PCH FORMAT FOR MAJOR KEY
gichord1	ftgen	0,0,4,-2,8.00,8.04,8.07,9.00
gichord2	ftgen	0,0,4,-2,8.02,8.05,8.09,9.02
gichord3	ftgen	0,0,4,-2,8.04,8.07,8.11,9.04
gichord4	ftgen	0,0,4,-2,8.00,8.05,8.09,9.00
gichord5	ftgen	0,0,4,-2,7.11,8.02,8.07,8.11
gichord6	ftgen	0,0,4,-2,8.00,8.04,8.09,9.00
gichord7	ftgen	0,0,4,-2,8.02,8.05,8.11,9.02

;DEFINE CHORDS I-VII IN PCH FORMAT FOR MINOR KEY
gichord1m	ftgen	0,0,4,-2,8.00,8.03,8.07,9.00
gichord2m	ftgen	0,0,4,-2,8.02,8.05,8.08,9.02
gichord3m	ftgen	0,0,4,-2,8.03,8.07,8.11,9.03
gichord4m	ftgen	0,0,4,-2,8.05,8.08,8.00,9.05
gichord5m	ftgen	0,0,4,-2,8.07,8.11,8.02,9.07
gichord6m	ftgen	0,0,4,-2,8.08,8.00,8.03,9.08
gichord7m	ftgen	0,0,4,-2,8.02,8.05,8.11,9.02	
	
instr	1

 gkMOUSE_X	chnget	"MOUSE_X"
 gkMOUSE_Y	chnget	"MOUSE_Y"
 gkton		chnget	"ton"
 gkins		chnget	"ins"
 gkkey		chnget	"key"
 gkkey		=	11 - (gkkey - 1)
 gkoct		chnget	"oct"
 gkoct		=	3-gkoct

#define CHORD_BOX(N)
 #
 if (gkMOUSE_X > giBox$N.X)  && (gkMOUSE_X < (giBox$N.X+giBoxWidth))  && (gkMOUSE_Y > giBox$N.Y)  && (gkMOUSE_Y < (giBox$N.Y+giBoxHeight)) then
  kinside$N	=	1
 else
  kinside$N	=	0
 endif
 ktrig$N	changed	kinside$N	;OUTPUT A MOMENTARY '1' VIA ktrig$N IF kinside$N CHANGES, I.E. IF THE MOUSE ENTERS OR LEAVES THIS CHORD BOX
 if	ktrig$N=1	then	;IF MOUSE HAS ENTERED OR LEFT THIS CHORD BOX (I.E. IF ktrig$N has taken a value of 1)...
 	if	kinside$N=1	then	;IF MOUSE IS IN THE BOX...
 		event	"i", 2, 0, 3600, $N	;PLAY A LONG NOTE INSTRUMENT $N
 	elseif	kinside$N=0	then	;IF MOUSE HAS JUST LEFT THE BOX...
 		turnoff2	2, 0, 1	;TURNOFF INSTRMENT $N ALLOWING RELEASE STAGES TO BE COMPLETED
 	endif				;END OF CONDITIONAL BRANCHING
 endif
 if kinside$N = 1 then
  kx$N	mirror	(gkMOUSE_X - giBox$N.X) / giBoxWidth, 0, 0.5 
  ky$N	mirror	(gkMOUSE_Y - giBox$N.Y) / giBoxHeight, 0, 0.5 
  k$N	=	kx$N + ky$N
  zkw	k$N, $N-1	;WRITE LOCATION VALUE TO ZAK VARIABLE
 endif
 #

$CHORD_BOX(1)
$CHORD_BOX(2)
$CHORD_BOX(3)
$CHORD_BOX(4)
$CHORD_BOX(5)
$CHORD_BOX(6)
$CHORD_BOX(7)

endin

instr	2
	ipch2	table	1, gichord1 + p4 - 1	;PITCH OF FIRST NOTE OF CHORD
	ipch3	table	2, gichord1 + p4 - 1	;PITCH OF SECOND NOTE OF CHORD
	ipch4	table	3, gichord1 + p4 - 1	;PITCH OF THIRD NOTE OF CHORD
	aenv	expsegr	0.001,0.2,1,1,0.001	;AMPLITUDE ENVELOPE
	
	;DEFINE MACRO OF CODE TO PRODUCE EACH NOTE OF THE CHORD
#define	NOTE(N)
	#
	
	if	i(gkton)=2	then						; IF TONALITY IS 'MAJOR'...
		ipch$N	table	$N-1, gichord1 + p4 - 1				; DEFINE PITCH (PCH FORMAT) FOR THIS NOTE (MAJOR)
	else									; OTHERWISE TONALITY MUST BE MINOR...
		ipch$N	table	$N-1, gichord1m + p4 - 1			; DEFINE PITCH (PCH FORMAT) FOR THIS NOTE (MINOR)
	endif									; END OF CONDITIONAL BRANCHING
	kcps$N		=	cpspch(ipch$N + (i(gkkey)*0.01) + i(gkoct))	; DERIVE A CPS VALUE

	kamp	zkr	p4 - 1		;READ AMPLITUDE FROM ZAK VARIABLE
	kamp	port	kamp, 0.05	;APPLY PORTAMENTO (TO PREVENT QUANTISATION / ZIPPER NOISE)
	aamp	interp	kamp		;INTERPOLATE TO CREATE AN AUDIO RATE VERSION OF THIS VARIABLE

	if i(gkins)==1 then
	 kfnum	=  (10 + 69 + 0.5 + 12 * log(kcps$N / 440.0) / log(2.0))				;table number
 	 ;TWO ITERATIONS OF oscbnk ARE CREATED, ONE FOR EACH OF THE STEREO AUDIO CHANNELS. THE OUTPUTS WILL BE DIFFERENT AS THE RANDOM NUMBER GENERATORS WILL BE SEEDED BY THE SYSTEM CLOCK
 	 ;OUTPUT	OPCODE  CPS    | AMD  |    FMD       | PMD | OVERLAPS   | SEED  | L1MINF  | L1MAXF  | L2MINF  | L2MAXF  | LFOMODE | EQMINF  | EQMAXF | EQMINL | EQMAXL | EQMINQ | EQMAXQ  | EQMODE | KFN  | L1FN | L2FN | EQFFN  | EQLF   |  EQQFN |  TABL  | OUTFN
 	 aL$N	oscbnk	kcps$N,   0,   0.005*kcps$N,    0,     10,        rnd(1),   0,         1,       0,        0,       238,      0,       8000,      1,       1,       1,       1,       -1, kfnum,  gicos, gicos, gieqffn, gieqlfn, gieqqfn
 	 aR$N	oscbnk	kcps$N,   0,   0.005*kcps$N,    0,     10,        rnd(1),   0,        -1,       0,        0,       238,      0,       8000,      1,       1,       1,       1,       -1, kfnum,  gicos, gicos, gieqffn, gieqlfn, gieqqfn

	else	
	 kmul	scale	kamp,0.9,0.1
	 kdtn	rspline	-0.1,0.1,0.05,0.4
	 aL$N.1	gbuzz	kamp,kcps$N*semitone(kdtn),200,1,kmul,gicos
	 kdtn	rspline	-0.1,0.1,0.05,0.4
	 aR$N.1	gbuzz	kamp,kcps$N*semitone(kdtn),200,1,kmul,gicos
	 kdtn	rspline	-0.1,0.1,0.05,0.4
	 aL$N.2	gbuzz	kamp,kcps$N*semitone(kdtn),200,1,kmul,gicos
	 kdtn	rspline	-0.1,0.1,0.05,0.4
	 aR$N.2	gbuzz	kamp,kcps$N*semitone(kdtn),200,1,kmul,gicos
	 aL$N	sum	aL$N.1,aL$N.2	
	 aR$N	sum	aR$N.1,aR$N.2
	endif
	#
	;EXECUTE MACRO FOR EACH NOTE
	$NOTE(1)
	$NOTE(2)
	$NOTE(3)
	$NOTE(4)
	
	;SUM (MIX) THE FOUR NOTES
	aL	sum	aL1, aL2, aL3, aL4
	aR	sum	aR1, aR2, aR3, aR4
	
	kcfoct	=	(8*kamp)+6	;DEFINE A FILTER CUTOFF FREQUENCY WHICH IS RELATED TO DISTANCE FROM THE CENTRE OF THE BOX
	
	aL	tonex	aL, cpsoct(kcfoct),2	;APPLY LOW PASS FILTERING (TONE CONTROL)
	aR	tonex	aR, cpsoct(kcfoct),2	;APPLY LOW PASS FILTERING (TONE CONTROL)
	
	aL	=	aL * aenv * aamp * 0.03	;SCALE AUDIO SIGNAL WITH AMPLITIUDE ENVELOPE
	aR	=	aR * aenv * aamp * 0.03
	outs	aL, aR
		zawm	aL * gkRvbSnd, 0                      ;SEND SOME OF THE AUDIO TO THE REVERB VIA ZAK PATCHING (LEFT CHANNEL) 
		zawm	aR * gkRvbSnd, 1                      ;SEND SOME OF THE AUDIO TO THE REVERB VIA ZAK PATCHING (RIGHT CHANNEL)


endin

instr	1000	;REVERB
	ainL	zar	0	;READ IN AUDIO FROM ZAK CHANNELS
	ainR	zar	1	;READ IN AUDIO FROM ZAK CHANNELS
	denorm		ainL, ainR		;...DENORMALIZE BOTH CHANNELS OF AUDIO SIGNAL
		arvbL, arvbR 	reverbsc 	ainL, ainR, gkRvbSze, 10000	;USE reverbsc OPCODE
	outs	arvbL, arvbR					;SEND AUDIO TO OUTPUTS
	zacl	0,3						;CLEAR ZAK AUDIO CHANNELS
endin

instr	1001	; SETUP INITIAL LOCATIONS AND SIZES OF BOXES AND LABELS
 #define SETUP_BOX(N)
 #
 Smsg	sprintf	"bounds(%d,%d,%d,%d)",giBox$N.X,giBox$N.Y,giBoxWidth,giBoxHeight
  	chnset	Smsg, "$N"
 Smsg	sprintf	"bounds(%d,%d,%d,%d)",giBox$N.X,giBox$N.Y+giBoxHeight,giBoxWidth,giBoxHeight/3
  	chnset	Smsg, "$N$N"
 #
 $SETUP_BOX(1)
 $SETUP_BOX(2)
 $SETUP_BOX(3)
 $SETUP_BOX(4)
 $SETUP_BOX(5)
 $SETUP_BOX(6)
 $SETUP_BOX(7)
endin

</CsInstruments>

<CsScore>
i 1001 0 0	; SETUP INITIAL LOCATIONS AND SIZES OF BOXES AND LABELS
i 1 0 3600	; INSTRUMENT 1 PLAYS A NOTE FOR 1 HOUR (AND KEEPS REAL-TIME PERFORMANCE GOING)
i 1000 0 3600	; reverb
</CsScore>

</CsoundSynthesizer>; oscbnk_synth.csd
; Written by Iain McCurdy, 2012

; A synthesiser utilising the oscbnk opcode
; 
; CONTROLS
; --------
; 
; -Oscillators-
; Amp		--	output amplitude of the oscillators sections
; N.Oscs	--	number of oscillators
; Spread	--	pitch spread
; SPeed		--	speed of pitch modulations
; Waveform	--	(dropdown menu) wavefrom used by the oscillator. Trombone 2 is a multi-waveform wavetable instrument.
; mono		--	activate monophonic mode
; Time		--	portamento time (monophonic mode)
; T.Shift	--	wavetable shift (will alter the tone if a multi-waveform wavetable instrument is chosen)
; P.Bend	--	pitch bend. The is a GUI alternative to use if you don't have hardware pitch bend.
; Bend Rng.	--	pitch bend range
; 
; -Filter Envelope-
; Filter	--	filter cutoff global control
; Env.		--	amount of influnce of the envelope
; Att.		--	envelope attack time
; Dec.		--	envelope decay time
; Sus.		--	envelope sustain level
; Rel.		--	envelope release time
; 
; -Amplitude Envelope-
; Att		--	envelope attack time  
; Dec		--	envelope decay time   
; Sus		--	envelope sustain level
; Rel		--	envelope release time 
; 
; -Random Seed-
; Mode for setting random seed for random number generators in oscbnk:
; Clock M.	--	seeded from the system clock therefore each note (even if the same note is played) 
;			will produced the same 'random' values. Left and right channels use the same value.
; Clock St.	--	same as the above except that left and right channels will use different values.
; Note M.	--	seeded by the note played therefore repeating a note will produce the same 'random' values.
;			(Left and right channels use the same seed.) 
; Note St.	--	Same as the above except that left and right channels will use different values.
; Fixed	M.	--	All notes use a fixed seed all of the time. Left and right channels use different fixed values.
; Fixed	St.	--	Same as the above except that left and right channels will use different values.
;  N.B. You can most clearly hear the effects of different settings by setting 'Spread' to a large value and 
;    by setting speed to zero.
;
; -Filter-
; Layers		--	number of interations of tonex filter. Increasing this number will sharpen cutoff.
; 
; -Filter LFO-
; shape		--	(drop down menu) LFO shape
; Rate 		--	LFO rate
; Depth		--	LFO depth / amplitude
; Delay		--	delay time before LFO has any effect
; Rise		--	time it take for LFO amplitude to rise from zero to 'Depth'
; 
; -Reverb-
; Mix		--	dry/wet mix
; Size		--	room size


<Cabbage>
form caption("Oscillator Bank Synth") size(595, 335), pluginid("oscb") style("legacy")

;OSCILLATOR
groupbox bounds(  0,  0,595, 85), text("Oscillators"), fontcolour("white") plant("oscillators"){
rslider  bounds(  5, 25, 55, 55), text("Amp."),    channel("amp"),   range(0, 1.00, 0.4),                 trackercolour("white") colour(LightBlue)
rslider  bounds( 55, 25, 55, 55), text("N.Oscs."), channel("NOscs"), range(1, 100, 10, 1, 1),             trackercolour("white") colour(LightBlue)
rslider  bounds(105, 25, 55, 55), text("Spread"),  channel("fmd"),   range(0,10.00, 0.005,0.25,0.000001), trackercolour("white") colour(LightBlue)
rslider  bounds(155, 25, 55, 55), text("Speed"),   channel("mvt"),   range(0,1000.000, 1, 0.25,0.0001),   trackercolour("white") colour(LightBlue)
rslider  bounds(205, 25, 55, 55), text("Width"),   channel("width"), range(0, 1.000, 1, 1,0.001),         trackercolour("white") colour(LightBlue)
combobox bounds(270, 25, 80, 20), channel("waveform"), value(1), text("saw", "square", "organ", "Clarinet","Bass Clarinet", "C.Bass Clarinet","Oboe","Bassoon","C.Bassoon","Violin","Cello","Piccolo","Flute","Alto Flute","Bass Flute", "Ahh", "Ooh", "Eee", "Horn P", "Horn F", "B.Tbn.Harmon", "B.Tbn.Straight", "B.Tbn.Open")
checkbox bounds(270, 50, 85, 13), text("Legato"), colour("yellow"), channel("legato"),  value(0)
checkbox bounds(270, 65, 85, 13), text("Mono"), colour("yellow"), channel("mono"),  value(0)
rslider  bounds(322, 44, 38, 38), text("Time"),    channel("LegTim"),      range(0, 4.00, 0.09, 0.5, 0.01), trackercolour("white") colour(LightBlue)
rslider  bounds(355, 25, 55, 55), text("T.Shift"), channel("WTableShift"), range(-36, 36, 0, 1,0.001),      trackercolour("white") colour(LightBlue)
;PITCH BEND
rslider  bounds(405, 25, 55, 55), text("P.Bend"),    channel("PBend"),    range(-1,1, 0), trackercolour("white") colour(LightBlue)
rslider  bounds(455, 25, 55, 55), text("Bend Rng."), channel("BendRange"),   range(1, 24, 12, 1,1),   trackercolour("white") colour(LightBlue)
label    bounds(505, 31, 80, 12), text("Random Seed")
combobox bounds(505, 45, 80, 20), text("Clock M.","Clock St.","Note M.","Note St.","Fixed M","Fixed St"), value(2), channel("seed")
}

;FILTER ENVELOPE
groupbox bounds(  0, 85,380, 85), text("Filter"), fontcolour("white"), plant("FilterEnvelope") {
rslider  bounds(  5, 25, 55, 55), text("Manual"), channel("cf"), range(0, 10.00, 8),     trackercolour("white") colour(LightBlue)
rslider  bounds( 55, 25, 55, 55), text("Env."), channel("FEnvAmt"), range(0, 10.00, 1.16), trackercolour("white") colour(LightBlue)
rslider  bounds(105, 25, 55, 55), text("Att."), channel("FAtt"), range(0, 8.00, 0.1,0.5),  trackercolour("white") colour(LightBlue)
rslider  bounds(155, 25, 55, 55), text("Dec."), channel("FDec"), range(0, 8.00, 1,0.5),    trackercolour("white") colour(LightBlue)
rslider  bounds(205, 25, 55, 55), text("Sus."), channel("FSus"), range(0, 1.00, 4, 0.5),   trackercolour("white") colour(LightBlue)
rslider  bounds(255, 25, 55, 55), text("Rel."), channel("FRel"), range(0.01, 8, 1.3, 0.5), trackercolour("white") colour(LightBlue)
line     bounds(315, 30,  1, 45)
rslider  bounds(320, 25, 55, 55), text("Layers"), channel("FiltLayers"), range(1, 10, 8,1,1), trackercolour("white") colour(LightBlue)
}

;AMPLITUDE ENVELOPE
groupbox bounds(380,85, 215, 85), text("Amplitude Envelope"), plant("AmpEnv"), fontcolour("white"){
rslider bounds(  5, 25, 55, 55), text("Att."), channel("AAtt"), range(0, 8.00, 0.13,0.5),  trackercolour("white") colour(LightBlue)
rslider bounds( 55, 25, 55, 55), text("Dec."), channel("ADec"), range(0, 8.00, 0.01,0.5),  trackercolour("white") colour(LightBlue)
rslider bounds(105, 25, 55, 55), text("Sus."), channel("ASus"), range(0, 1.00, 1.00, 0.5), trackercolour("white") colour(LightBlue)
rslider bounds(155, 25, 55, 55), text("Rel."), channel("ARel"), range(0.01, 8, 1.67, 0.5), trackercolour("white") colour(LightBlue)
}

;FILTER LFO
groupbox bounds(  0,170,310, 85), text("Filter LFO"), plant("FilterLFO"), fontcolour("white"){
label    bounds( 15, 31, 80, 13), text("Shape")
combobox bounds( 15, 45, 80, 20), channel("FlfoType"), value(2), text("sine", "splines", "S+H", "square")
rslider  bounds(100, 25, 55, 55), text("Rate"),  channel("FRte"), range(0, 16.00, 4),       trackercolour("white") colour(LightBlue)
rslider  bounds(150, 25, 55, 55), text("Depth"), channel("FDep"), range(0, 4.00, 0),        trackercolour("white") colour(LightBlue)
rslider  bounds(200, 25, 55, 55), text("Delay"), channel("FDel"), range(0, 2.00, 0, 0.5),   trackercolour("white") colour(LightBlue)
rslider  bounds(250, 25, 55, 55), text("Rise"),  channel("FRis"), range(0, 2.00, 0.1, 0.5), trackercolour("white") colour(LightBlue)
}

;REVERB
groupbox bounds(310,170,165, 85), text("Reverb"), plant("Reverb"), fontcolour("white"){
rslider  bounds(  5, 25, 55, 55), fontcolour("white"), text("Send"),   channel("RvbMix"),  range(0, 1.00, 0.5),  trackercolour("white") colour(LightBlue)
rslider  bounds( 55, 25, 55, 55), fontcolour("white"), text("Size"),   channel("RvbSize"), range(0, 1.00, 0.77), trackercolour("white") colour(LightBlue)
rslider  bounds(105, 25, 55, 55), fontcolour("white"), text("Cutoff"), channel("RvbCF"),   range(50, 20000, 7000,0.5,1), trackercolour("white") colour(LightBlue)
}

;EXCITER
groupbox bounds(475,170,120, 85), text("Exciter"), plant("Exciter"), fontcolour("white") , identchannel("ExciterID"){
rslider  bounds(  5, 25, 55, 55), text("Amount"),    channel("ExciterAmount"),   range(0, 100, 0,1,0.1),  trackercolour("white") colour(LightBlue)
rslider  bounds( 55, 25, 55, 55), text("Freq."),    channel("ExciterFreq"),   range(1000, 10000, 3000,1,1),  trackercolour("white") colour(LightBlue)
}

keyboard bounds(0, 255, 595, 80)

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=NULL -M0
</CsOptions>

<CsInstruments>

sr	=	44100
ksmps	=	64
nchnls	=	2
0dbfs	=	1
massign	0,1

;Author: Iain McCurdy (2012)

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;  CLARINET
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;FOUR GEN10 FUNCTION TABLES WHICH CORRESPOND TO THE SPECTRAL ENVELOPES OF FOUR DIFFERENT NOTES PLAYED ON THE CLARINET
;THE FOUR NOTES CHOSEN COVER THE SOUNDING RANGE OF THE INSTRUMENT
;NOTE THAT ALL FUNCTION TABLES USED BY ftmorph IN THE MORPHING PROCESS, INCLUDING THE ONE INTO WHICH THE MORPHED TABLE IS WRITTEN (SEE INSTR 1), SHOULD BE THE SAME SIZE
;FOUR GEN10 FUNCTION TABLES WHICH CORRESPOND TO THE SPECTRAL ENVELOPES OF FOUR DIFFERENT NOTES PLAYED ON THE CLARINET
;THE FOUR NOTES CHOSEN COVER THE SOUNDING RANGE OF THE INSTRUMENT
;NOTE THAT ALL FUNCTION TABLES USED BY ftmorph IN THE MORPHING PROCESS, INCLUDING THE ONE INTO WHICH THE MORPHED TABLE IS WRITTEN (SEE INSTR 1), SHOULD BE THE SAME SIZE
giclar50 ftgen 0,0,4096,10,0.273597,0.027434,0.737705,0.049480,0.448437,0.272536,0.131175,0.129945,0.283082,0.130714,0.026719,0.037582,0.018953,0.010729,0.067580,0.024573,0.016586,0.049988,0.033294,0.017090,0.008591,0.021128,0.007237,0.016060,0.016060
giclar62 ftgen 0,0,4096,10,0.753504,0.011446,0.501720,0.055791,0.241768,0.037889,0.027203,0.062793,0.102494,0.030506,0.042453,0.050202,0.031077,0.027208,0.020897,0.022205,0.012154,0.008160,0.004886,0.005076,0.003805,0.001322,0.001149,0.001450,0.001450
giclar74 ftgen 0,0,4096,10,0.519536,0.062430,0.745521,0.055790,0.103856,0.097554,0.090420,0.077181,0.017130,0.013446,0.005674,0.003296,0.003438,0.003395,0.002506,0.001169,0.002525,0.001237,0.002624,0.001440,0.000880,0.001061,0.002672,0.002090,0.002090
giclar86 ftgen 0,0,4096,10,0.823209,0.201690,0.171118,0.161374,0.041951,0.004950,0.010889,0.001107,0.001365,0.003340,0.002259,0.001175,0.000442,0.001544,0.001259,0.000549,0.000455,0.000352,0.000345,0.000396,0.000477,0.000848,0.001199,0.001081,0.001081
giwavemapClar	ftgen	0,0,128,-27, 0,0, 50,0,  62,1,  74,2,  86,3,   127,3
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
gitabs4morfClar	ftgen	0,0,4,-2,giclar50,giclar62,giclar74,giclar86

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;  BASS CLARINET
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
giBClar35 ftgen 0,0,4096,10,0.384232,0.038085,0.578537,0.029558,0.143002,0.119033,0.397678,0.113380,0.577246,0.158831,0.577514,0.094994,0.440674,0.109136,0.500666,0.132354,0.360370,0.104810,0.231403,0.089565,0.207353,0.099773,0.209066,0.123801,0.158769,0.079383,0.036078,0.019583,0.010310,0.017060,0.029465,0.045821,0.031622,0.038326,0.052222,0.058647,0.083956,0.079748,0.081955,0.097274,0.069934,0.075100,0.049259,0.058121,0.068078,0.065276,0.070165,0.065898,0.072432,0.055423,0.052283,0.036547,0.034082,0.035287,0.044801,0.053917,0.050263,0.036979,0.034264,0.035892,0.035011,0.037199,0.041542,0.043201,0.039923,0.035164,0.035828,0.036193,0.037155,0.035493,0.034546,0.035091,0.029891,0.027394,0.026174,0.023757,0.021365,0.019468,0.016295,0.015301,0.015263,0.014310,0.013239,0.011972,0.011445,0.011727,0.012391,0.013892,0.015395,0.015147,0.015137,0.014816,0.013898,0.012682,0.011462,0.009883,0.008579,0.007797,0.007749
giBClar41 ftgen 0,0,4096,10,0.525063,0.002869,0.469239,0.024384,0.895713,0.021156,0.199553,0.014871,0.215693,0.036697,0.212856,0.060220,0.224360,0.026202,0.021469,0.019475,0.067282,0.034970,0.025525,0.028958,0.038550,0.041724,0.035988,0.016617,0.026564,0.031021,0.037801,0.030070,0.055636,0.040575,0.029792,0.031356,0.031871,0.058063,0.027829,0.023825,0.015824,0.011714,0.011110,0.015367,0.011850,0.008957,0.011489,0.007029,0.004640,0.004862,0.006536,0.006771,0.006683,0.005231,0.005323,0.006834,0.005342,0.005818,0.004902,0.005468,0.005431,0.006151,0.004672,0.003041,0.002322,0.002274,0.002661,0.003122,0.002931,0.002587,0.002527,0.002499,0.003095,0.003755,0.003651,0.003768,0.003972,0.003962,0.003999,0.003352,0.002866,0.002449,0.002120,0.001972,0.002040,0.002221,0.002063,0.002057,0.002415,0.002849,0.003276,0.003776,0.003994,0.003829,0.003419,0.003328,0.003575,0.003829,0.003703,0.003454,0.003149,0.002825,0.002697,0.002765
giBClar47 ftgen 0,0,4096,10,0.447815,0.011780,0.911495,0.027076,0.846723,0.050517,0.224579,0.039801,0.048967,0.024162,0.071418,0.087315,0.031778,0.048063,0.058394,0.078770,0.021135,0.041585,0.092206,0.058125,0.063991,0.033673,0.025813,0.045142,0.037450,0.016766,0.014278,0.016668,0.017869,0.025925,0.010244,0.010062,0.010634,0.008986,0.006992,0.005186,0.004618,0.003658,0.002913,0.003004,0.004250,0.003142,0.002387,0.002692,0.003592,0.004496,0.002831,0.001838,0.001680,0.002144,0.002567,0.003185,0.002727,0.002419,0.001998,0.001883,0.002286,0.002626,0.003202,0.003257,0.003056,0.003241,0.002838,0.002521,0.002294,0.002409,0.002746,0.002848,0.003387,0.004173,0.004189,0.004587,0.005402,0.004977,0.004132,0.003842,0.003974,0.003650,0.003605,0.003810,0.003745,0.003770,0.003520,0.003363,0.003391,0.003302,0.003124,0.003422,0.004022,0.004064,0.003584,0.002939,0.002329,0.001970,0.001947,0.002034,0.002069,0.002043,0.001854,0.001658
giBClar53 ftgen 0,0,4096,10,0.819856,0.006052,0.508263,0.007439,0.271031,0.012967,0.059374,0.017922,0.016997,0.004014,0.027132,0.014921,0.020230,0.012123,0.021066,0.004875,0.016894,0.004428,0.004157,0.007603,0.004211,0.011103,0.005054,0.007329,0.004043,0.002169,0.003183,0.001822,0.001158,0.001758,0.002350,0.001442,0.002218,0.002815,0.001503,0.001764,0.001171,0.001508,0.000934,0.000714,0.000902,0.000884,0.000943,0.000825,0.000579,0.000572,0.000654,0.000752,0.000902,0.000932,0.000868,0.000909,0.000903,0.001065,0.001472,0.001483,0.001803,0.001941,0.002100,0.002756,0.002543,0.001984,0.001589,0.001342,0.001414,0.001219,0.001004,0.000908,0.000887,0.001102,0.001342,0.001312,0.001089,0.000869,0.000733,0.000620,0.000574,0.000518,0.000451,0.000422,0.000446,0.000473,0.000423,0.000354,0.000335,0.000370,0.000410,0.000418,0.000435,0.000434,0.000417,0.000417,0.000388,0.000342,0.000316,0.000303,0.000306,0.000309,0.000292,0.000267
giBClar59 ftgen 0,0,4096,10,0.866645,0.024133,0.420624,0.171074,0.353043,0.050546,0.198619,0.047824,0.110458,0.081558,0.064116,0.041109,0.026267,0.036570,0.013031,0.023724,0.007023,0.010067,0.004550,0.011618,0.009601,0.005731,0.005607,0.005036,0.002347,0.002907,0.001472,0.001519,0.001304,0.002584,0.001383,0.001362,0.001591,0.002655,0.004442,0.004905,0.003148,0.004830,0.002947,0.002926,0.003063,0.002394,0.002276,0.002019,0.001689,0.002028,0.002368,0.003510,0.004637,0.004228,0.003257,0.002700,0.002231,0.001681,0.001293,0.001062,0.001121,0.000894,0.000797,0.000865,0.000752,0.000724,0.000719,0.000787,0.000896,0.000801,0.000686,0.000551,0.000468,0.000466,0.000515,0.000460,0.000382,0.000358,0.000366,0.000400,0.000405,0.000355,0.000333,0.000349,0.000352,0.000346,0.000335,0.000317,0.000303,0.000297,0.000289,0.000276,0.000290,0.000292,0.000287,0.000307,0.000318,0.000332,0.000353,0.000374,0.000388,0.000398,0.000399,0.000407
giBClar65 ftgen 0,0,4096,10,0.934141,0.012361,0.023358,0.045609,0.025913,0.017772,0.009955,0.010837,0.007253,0.001002,0.004215,0.001570,0.004226,0.001334,0.000580,0.001740,0.000839,0.001364,0.001337,0.000523,0.000377,0.000535,0.000290,0.000461,0.000486,0.000333,0.000462,0.000685,0.001136,0.000794,0.000625,0.000436,0.000303,0.000270,0.000259,0.000289,0.000208,0.000224,0.000249,0.000271,0.000200,0.000240,0.000298,0.000226,0.000198,0.000188,0.000200,0.000259,0.000198,0.000169,0.000155,0.000144,0.000123,0.000120,0.000118,0.000112,0.000108,0.000105,0.000096,0.000091,0.000090,0.000093,0.000089,0.000093,0.000094,0.000095,0.000101,0.000112,0.000120,0.000126,0.000134,0.000142,0.000149,0.000170,0.000190,0.000212,0.000246,0.000289,0.000286,0.000269,0.000279,0.000310,0.000352,0.000355,0.000341,0.000361,0.000376,0.000373,0.000385,0.000427,0.000475,0.000539,0.000655,0.000838,0.001061,0.001284,0.001429,0.001364,0.001171,0.001020
giBClar71 ftgen 0,0,4096,10,0.951349,0.052635,0.166289,0.036346,0.080225,0.105328,0.019032,0.014538,0.003453,0.003349,0.001065,0.003529,0.004876,0.003334,0.003537,0.009903,0.004407,0.002506,0.002863,0.005317,0.004116,0.003426,0.001538,0.001829,0.001351,0.001942,0.001728,0.001103,0.000733,0.000413,0.000643,0.000468,0.000336,0.000631,0.000868,0.000470,0.000257,0.000240,0.000210,0.000190,0.000182,0.000170,0.000178,0.000178
giBClar77 ftgen 0,0,4096,10,0.679870,0.126072,0.031529,0.103885,0.017231,0.001781,0.005132,0.000787,0.003992,0.001819,0.002500,0.002660,0.001298,0.001834,0.001238,0.004273,0.001518,0.000670,0.000588,0.000395,0.000786,0.000400,0.000399,0.000471,0.000235,0.000212,0.000208,0.000169,0.000163,0.000146,0.000134
giwavemapBClar	ftgen	0,0,128,-27, 0,0, 35,0, 41,1, 47,2, 53,3,  59,4,  65,5,  71,6,  77,7, 127,7
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
gitabs4morfBClar	ftgen	0,0,8,-2,giBClar35,giBClar41,giBClar47,giBClar53,giBClar59,giBClar65,giBClar71,giBClar77

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;  CONTRA-BASS CLARINET
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
giCBClar26 ftgen 0,0,4096,10,0.100160,0.005519,0.631940,0.013046,0.749042,0.308868,0.475605,0.152792,0.074315,0.238927,0.152260,0.251283,0.030787,0.052465,0.032473,0.121972,0.064172,0.090564,0.043994,0.091868,0.039563,0.058622,0.024531,0.023127,0.026665,0.067522,0.081377,0.057914,0.066176,0.036134,0.026135,0.021056,0.038011,0.036534,0.058393,0.040915,0.050051,0.038446,0.034166,0.021341,0.014481,0.015708,0.025527,0.026622,0.033577,0.027355,0.034434,0.022920,0.016354,0.010905,0.011160,0.015075,0.019871,0.017505,0.013189,0.011442,0.008511,0.007974,0.006368,0.005988,0.005976,0.005922,0.006590,0.008199,0.006566,0.005254,0.004955,0.005576,0.005463,0.005101,0.003955,0.003622,0.004027,0.003772,0.003504,0.002848,0.002183,0.002075,0.002143,0.002014,0.001907,0.001850,0.001736,0.001543,0.001318,0.001180,0.001107,0.001066,0.001169,0.001372,0.001533,0.001667,0.001738,0.001655,0.001604,0.001603,0.001571,0.001575,0.001638,0.001696
giCBClar32 ftgen 0,0,4096,10,0.227476,0.006718,0.707706,0.018101,0.539432,0.018848,0.590242,0.029143,0.512926,0.035712,0.324304,0.035306,0.035964,0.050992,0.096916,0.025035,0.098203,0.072427,0.068155,0.060324,0.042818,0.074538,0.049430,0.100999,0.052956,0.109337,0.053778,0.108791,0.040535,0.041998,0.050107,0.102568,0.075823,0.121836,0.062713,0.047451,0.042146,0.061836,0.063525,0.079775,0.056177,0.039271,0.021422,0.017934,0.022472,0.016758,0.023407,0.025034,0.018765,0.012566,0.009566,0.008232,0.011234,0.015948,0.018924,0.020397,0.016720,0.016224,0.010210,0.006760,0.006525,0.006464,0.006410,0.007832,0.010929,0.013172,0.010412,0.008153,0.005887,0.004927,0.005543,0.006358,0.006415,0.006246,0.004977,0.004037,0.003084,0.002646,0.002504,0.002716,0.003253,0.003484,0.003416,0.003566,0.003392,0.002924,0.002750,0.002979,0.003398,0.003635,0.003855,0.004032,0.004285,0.004278,0.003688,0.003182,0.002942,0.003043,0.003240,0.003317
giCBClar38 ftgen 0,0,4096,10,0.805943,0.003127,0.607438,0.006915,0.078379,0.025071,0.319458,0.040967,0.418440,0.096874,0.067519,0.066830,0.181701,0.148461,0.024736,0.047734,0.027229,0.065092,0.020252,0.015890,0.047795,0.096969,0.049469,0.024097,0.032227,0.032247,0.057763,0.064995,0.031760,0.023574,0.021449,0.017946,0.015989,0.010329,0.017096,0.025053,0.020021,0.014542,0.009659,0.010282,0.011754,0.016404,0.013970,0.019292,0.012226,0.007260,0.007191,0.010064,0.007246,0.007400,0.007562,0.005179,0.005520,0.005811,0.004710,0.005570,0.007523,0.007671,0.005694,0.004881,0.005241,0.004991,0.005944,0.006659,0.006213,0.004986,0.004006,0.003617,0.003290,0.003479,0.004050,0.003911,0.003373,0.003294,0.003284,0.002858,0.002674,0.003290,0.003986,0.003982,0.003503,0.003424,0.003640,0.003903,0.004267,0.004774,0.005048,0.005020,0.005284,0.005837,0.006116,0.006124,0.006474,0.007329,0.008198,0.008721,0.009014,0.008920,0.008202,0.007419
giCBClar44 ftgen 0,0,4096,10,0.715187,0.010393,0.137973,0.010188,0.404486,0.073659,0.420943,0.145565,0.080881,0.104506,0.227785,0.021310,0.035316,0.052724,0.023335,0.014334,0.087911,0.036461,0.047658,0.016909,0.047453,0.017513,0.031591,0.010028,0.009677,0.014384,0.012660,0.031094,0.010732,0.009677,0.005632,0.007197,0.005202,0.005881,0.004438,0.005851,0.003283,0.002870,0.001732,0.001824,0.003100,0.002099,0.002084,0.002567,0.003519,0.003856,0.003017,0.003288,0.003518,0.003481,0.002717,0.002212,0.002009,0.002374,0.002508,0.003004,0.002356,0.001681,0.001376,0.001435,0.001604,0.001881,0.001924,0.001783,0.002097,0.002582,0.002971,0.002922,0.002735,0.002884,0.003498,0.003726,0.003454,0.003486,0.003620,0.003356,0.003457,0.003775,0.003730,0.003481,0.003126,0.002660,0.002244,0.001883,0.001625,0.001518,0.001533,0.001594,0.001565,0.001529,0.001485,0.001598,0.001965,0.002295,0.002394,0.002424,0.002401,0.002320,0.002329,0.002436
giCBClar50 ftgen 0,0,4096,10,0.880714,0.104962,0.497883,0.045337,0.172861,0.109234,0.166844,0.037601,0.179775,0.048578,0.136813,0.079191,0.068937,0.019908,0.087293,0.031265,0.010402,0.048393,0.020759,0.005769,0.015444,0.004339,0.006113,0.010598,0.009591,0.007441,0.002840,0.003349,0.003193,0.003806,0.004954,0.003108,0.003744,0.003254,0.003682,0.002736,0.002830,0.004080,0.005132,0.004023,0.004801,0.004386,0.003962,0.002657,0.003137,0.003478,0.004208,0.004600,0.004272,0.004501,0.004804,0.004328,0.003739,0.003495,0.003378,0.002513,0.002268,0.002182,0.002140,0.001833,0.001900,0.001666,0.001525,0.001441,0.001541,0.001518,0.001571,0.001664,0.001746,0.001600,0.001474,0.001527,0.001644,0.001577,0.001450,0.001382,0.001479,0.001646,0.001713,0.001652,0.001720,0.001859,0.001891,0.001654,0.001420,0.001306,0.001228,0.001173,0.001188,0.001247,0.001299,0.001317,0.001264,0.001186,0.001091,0.000947,0.000797,0.000685,0.000610,0.000547
giCBClar54 ftgen 0,0,4096,10,0.889990,0.001348,0.087695,0.023926,0.066262,0.023447,0.075142,0.026596,0.020409,0.052699,0.027246,0.016811,0.017828,0.004566,0.005199,0.010830,0.003227,0.005838,0.001883,0.001580,0.004878,0.001870,0.000924,0.001648,0.002681,0.001616,0.003610,0.002587,0.002221,0.002332,0.001110,0.001616,0.002062,0.001241,0.000899,0.001174,0.001196,0.001105,0.001254,0.001253,0.001237,0.001093,0.001281,0.001260,0.001266,0.001255,0.001194,0.000995,0.001213,0.000908,0.000857,0.000902,0.000863,0.001171,0.001146,0.001074,0.000908,0.000908,0.000752,0.000618,0.000456,0.000395,0.000445,0.000503,0.000434,0.000353,0.000347,0.000373,0.000416,0.000392,0.000334,0.000271,0.000275,0.000314,0.000314,0.000317,0.000280,0.000275,0.000289,0.000253,0.000221,0.000203,0.000194,0.000194,0.000208,0.000221,0.000212,0.000185,0.000172,0.000176,0.000173,0.000178,0.000175,0.000159,0.000152,0.000150,0.000135,0.000120,0.000115,0.000119
giwavemapCBClar	ftgen	0,0,128,-27, 0,0, 26,0, 32,1, 38,2, 44,3,  50,4,  54,5,  127,5
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
gitabs4morfCBClar	ftgen	0,0,8,-2,giCBClar26,giCBClar32,giCBClar38,giCBClar44,giCBClar50,giCBClar54,giCBClar54,giCBClar54

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;  OBOE
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
gioboe59 ftgen 0,0,4096,10,0.239013,0.078927,0.241030,0.206347,0.832266,0.054540,0.013821,0.007450,0.022905,0.021737,0.018123,0.013105,0.002361,0.001433,0.003509,0.002589,0.001326,0.000743,0.000990,0.000868,0.000863,0.000994,0.000406,0.000288,0.000288
gioboe65 ftgen 0,0,4096,10,0.199317,0.508088,0.859044,0.346880,0.121336,0.005269,0.071954,0.035188,0.012195,0.010362,0.001516,0.002397,0.004325,0.002943,0.008168,0.003519,0.002074,0.001366,0.001019,0.000715,0.000788,0.000757,0.001403,0.001108,0.001108
gioboe73 ftgen 0,0,4096,10,0.297865,0.916220,0.218345,0.030903,0.016039,0.045984,0.003571,0.006255,0.007310,0.003701,0.001306,0.001355,0.000361,0.001108,0.001552,0.000991,0.000588,0.000780,0.000678,0.001103,0.000615,0.000264,0.000310,0.000464,0.000464
gioboe81 ftgen 0,0,4096,10,0.875554,0.822621,0.094665,0.308960,0.046707,0.031827,0.002702,0.002222,0.009030,0.009257,0.007814,0.000781,0.002099,0.001154,0.002638,0.000756,0.000750,0.001290,0.000476,0.001285,0.000627,0.000379,0.000594,0.000379,0.000379
gioboe89 ftgen 0,0,4096,10,0.965505,0.344315,0.033044,0.068398,0.013147,0.008580,0.003609,0.001848,0.001060,0.001429,0.001832,0.001218,0.000703,0.000642,0.000646,0.000867,0.000550,0.000567,0.001386,0.001239,0.001416,0.001354,0.001710,0.003111,0.003111
giwavemapOboe	ftgen	0,0,128,-27, 0,0, 59,0,  65,1,  73,2,  81,3,  89,4,  127,4
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
gitabs4morfOboe	ftgen	0,0,8,-2,gioboe59,gioboe65,gioboe73,gioboe81,gioboe89,gioboe89,gioboe89,gioboe89

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; BASSOON
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
gibassoon34 ftgen 0,0,4096,10,0.213868,0.268493,0.244166,0.230801,0.105833,0.308087,0.556920,0.478956,0.523357,0.900665,0.213470,0.229596,0.031221,0.040117,0.067113,0.060158,0.030778,0.061028,0.143814,0.063668,0.126426,0.055009,0.049138,0.085854,0.113027,0.111464,0.088765,0.037342,0.050990,0.035579,0.040460,0.032219,0.027305,0.034141,0.019655,0.009315,0.008270,0.006748,0.006472,0.007088,0.008133,0.007046,0.007850,0.005791,0.006273,0.006847,0.007249,0.009398,0.010309,0.010418,0.010247,0.010333,0.009562,0.008180,0.009576,0.009469,0.008529,0.008844,0.008053,0.007565,0.008026,0.007284,0.007299,0.007423,0.008280,0.008374,0.008239,0.008512,0.009431,0.010246,0.010350,0.009381,0.008652,0.008150,0.007888,0.007951,0.008166,0.008210,0.007921,0.007548,0.007147,0.006991,0.006978,0.006527,0.005617,0.004781,0.004549,0.004707,0.004803,0.004640,0.004303,0.003866,0.003524,0.003348,0.003108,0.002766,0.002439,0.002278,0.002406,0.002733
gibassoon38 ftgen 0,0,4096,10,0.242897,0.242266,0.380380,0.667003,0.720921,0.402509,0.422424,0.475496,0.823674,0.135651,0.169435,0.062761,0.017494,0.023826,0.049210,0.074371,0.035978,0.086397,0.160820,0.122072,0.061609,0.020374,0.023031,0.018479,0.013838,0.015511,0.012693,0.005626,0.007015,0.007590,0.008854,0.004833,0.006678,0.008155,0.006694,0.007708,0.007823,0.004336,0.003679,0.003698,0.005616,0.004049,0.003555,0.002815,0.002166,0.001778,0.002195,0.002446,0.003427,0.003600,0.005046,0.005043,0.003980,0.002591,0.002168,0.002644,0.003363,0.004603,0.004571,0.005024,0.004653,0.004659,0.004447,0.004128,0.004325,0.004464,0.004393,0.004144,0.004285,0.004442,0.004203,0.003640,0.003229,0.003115,0.003017,0.002902,0.002799,0.002839,0.003045,0.003262,0.003391,0.003250,0.003008,0.002726,0.002506,0.002370,0.002215,0.002130,0.002058,0.001832,0.001574,0.001339,0.001133,0.001005,0.000924,0.000860,0.000849,0.000896,0.000994,0.001115
gibassoon43 ftgen 0,0,4096,10,0.101647,0.135289,0.245027,0.142720,0.728360,0.361154,0.030730,0.079698,0.011579,0.074893,0.094091,0.028910,0.084641,0.058767,0.035341,0.016688,0.006781,0.020365,0.020545,0.008172,0.007968,0.017127,0.016825,0.009248,0.003609,0.002361,0.002361,0.001409,0.001208,0.001278,0.001752,0.002711,0.002221,0.001898,0.001255,0.001150,0.001935,0.001759,0.001661,0.001219,0.001111,0.001527,0.001167,0.001290,0.001366,0.001058,0.000935,0.000898,0.000937,0.001254,0.001464,0.001695,0.002012,0.002054,0.001872,0.001370,0.001074,0.000988,0.001009,0.000959,0.000905,0.000957,0.000885,0.000825,0.000811,0.000776,0.000727,0.000696,0.000758,0.000768,0.000667,0.000604,0.000548,0.000525,0.000508,0.000485,0.000445,0.000380,0.000330,0.000307,0.000329,0.000366,0.000367,0.000334,0.000291,0.000259,0.000247,0.000265,0.000309,0.000378,0.000436,0.000425,0.000390,0.000375,0.000353,0.000328,0.000312,0.000292,0.000273,0.000269
gibassoon50 ftgen 0,0,4096,10,0.147763,0.340255,0.879202,0.404023,0.259274,0.130887,0.095096,0.039056,0.091976,0.009828,0.004879,0.013408,0.016090,0.015931,0.012402,0.003430,0.006421,0.004323,0.002018,0.001465,0.003012,0.001397,0.002446,0.002683,0.002425,0.004828,0.002422,0.002479,0.002086,0.002351,0.002269,0.002034,0.001708,0.001324,0.001927,0.002764,0.003997,0.003514,0.002736,0.002327,0.002054,0.001842,0.001577,0.002009,0.002098,0.001411,0.001019,0.000816,0.000899,0.000893,0.001005,0.001296,0.000987,0.000657,0.000539,0.000400,0.000313,0.000284,0.000331,0.000417,0.000479,0.000633,0.000798,0.000893,0.001067,0.001242,0.001260,0.001282,0.001218,0.001023,0.000887,0.000830,0.000746,0.000637,0.000553,0.000534,0.000537,0.000506,0.000482,0.000477,0.000490,0.000515,0.000532,0.000508,0.000473,0.000416,0.000336,0.000271,0.000229,0.000193,0.000170,0.000169,0.000185,0.000197,0.000205,0.000223,0.000247,0.000255,0.000248,0.000249
gibassoon56 ftgen 0,0,4096,10,0.258143,0.954570,0.553228,0.188964,0.031203,0.252375,0.179421,0.053961,0.022121,0.016058,0.006372,0.002854,0.002507,0.006348,0.006626,0.008348,0.005125,0.001342,0.001956,0.002664,0.005721,0.003529,0.004933,0.002543,0.003026,0.003332,0.001828,0.003024,0.002223,0.001464,0.001354,0.001310,0.000827,0.000966,0.001111,0.001685,0.001048,0.000806,0.000660,0.000445,0.000368,0.000436,0.000578,0.000518,0.000372,0.000346,0.000342,0.000340,0.000259,0.000272,0.000318,0.000395,0.000481,0.000454,0.000428,0.000391,0.000351,0.000302,0.000261,0.000245,0.000253,0.000249,0.000223,0.000228,0.000244,0.000217,0.000203,0.000222,0.000250,0.000271,0.000235,0.000202,0.000179,0.000160,0.000151,0.000151,0.000144,0.000126,0.000116,0.000123,0.000134,0.000140,0.000142,0.000142,0.000130,0.000117,0.000109,0.000109,0.000110,0.000111,0.000122,0.000129,0.000124,0.000116,0.000115,0.000113,0.000104,0.000092,0.000080,0.000071
gibassoon62 ftgen 0,0,4096,10,0.802206,0.854305,0.242064,0.037491,0.024258,0.012991,0.003920,0.008373,0.001787,0.001801,0.003935,0.008957,0.009944,0.004249,0.003799,0.003374,0.001734,0.004753,0.008252,0.004132,0.002330,0.001700,0.001925,0.001098,0.001154,0.001943,0.000954,0.000487,0.000432,0.000605,0.000812,0.000806,0.001001,0.001178,0.001065,0.001137,0.000877,0.000630,0.000538,0.000499,0.000605,0.000532,0.000532,0.000387,0.000288,0.000253,0.000313,0.000347,0.000292,0.000225,0.000167,0.000144,0.000121,0.000116,0.000110,0.000110,0.000119,0.000111,0.000106,0.000111,0.000115,0.000114,0.000101,0.000094,0.000100,0.000102,0.000097,0.000088,0.000079,0.000070,0.000064,0.000059,0.000054,0.000053,0.000053
gibassoon67 ftgen 0,0,4096,10,0.262539,0.973041,0.138354,0.113396,0.058172,0.030635,0.005565,0.001686,0.003483,0.001977,0.003774,0.002477,0.002439,0.001226,0.002781,0.002527,0.001020,0.000611,0.000658,0.000715,0.000728,0.000531,0.000442,0.000238,0.000414,0.000325,0.000560,0.000689,0.000445,0.000306,0.000301,0.000305,0.000296,0.000325,0.000252,0.000218,0.000248,0.000193,0.000174,0.000179,0.000143,0.000140,0.000140,0.000104,0.000096,0.000116,0.000128,0.000137,0.000144,0.000113,0.000112,0.000119,0.000140,0.000116,0.000107,0.000102
giwavemapBassoon	ftgen	0,0,128,-27, 0,0, 34,0,  38,1,  43,2,  50,3,   56,4,  62,5,  67,6, 127,6
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
gitabs4morfBassoon	ftgen	0,0,8,-2,gibassoon34,gibassoon38,gibassoon43,gibassoon50,gibassoon56,gibassoon62,gibassoon67,gibassoon67

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; CONTRA-BASSOON
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
giCBassoon22 ftgen 0,0,4096,10,0.497216,0.592986,0.588338,0.378063,0.343716,0.540022,0.620921,0.613540,0.848864,0.535558,0.632297,0.584663,0.443376,0.419439,0.291262,0.249631,0.256447,0.182209,0.062888,0.160047,0.156792,0.115884,0.107766,0.130415,0.183253,0.145108,0.156478,0.170472,0.185752,0.181506,0.155042,0.154256,0.167703,0.145571,0.172382,0.169936,0.191248,0.207520,0.161789,0.114105,0.096757,0.068310,0.056357,0.068193,0.048257,0.046235,0.041903,0.032361,0.023090,0.012851,0.008788,0.010598,0.010151,0.010905,0.009426,0.009439,0.012674,0.016976,0.019287,0.017791,0.014995,0.015280,0.014007,0.012293,0.013920,0.015130,0.017138,0.020001,0.026003,0.029085,0.026391,0.021776,0.018388,0.016337,0.014700,0.015521,0.019019,0.022414,0.024168,0.024006,0.023403,0.022377,0.020534,0.018428,0.016165,0.013675,0.011929,0.011056,0.010352,0.010070,0.009561,0.009378,0.008855,0.008393,0.008147,0.008048,0.008099,0.007480,0.006551,0.005481
giCBassoon26 ftgen 0,0,4096,10,0.076357,0.137793,0.174617,0.207802,0.302523,0.705801,0.162577,0.073808,0.224559,0.050465,0.066110,0.181682,0.062409,0.052317,0.037698,0.029936,0.042341,0.053436,0.135414,0.059248,0.025689,0.033567,0.051201,0.029910,0.028697,0.052991,0.059280,0.029742,0.027742,0.023801,0.013878,0.006197,0.004814,0.005139,0.007873,0.007104,0.009903,0.007952,0.008234,0.005783,0.006682,0.007272,0.006943,0.007674,0.007728,0.006326,0.005179,0.004259,0.004142,0.003705,0.002547,0.001785,0.002073,0.002887,0.004184,0.004075,0.004174,0.005101,0.004993,0.004189,0.003170,0.002599,0.002866,0.003689,0.005272,0.006515,0.007262,0.006420,0.005939,0.005247,0.004710,0.004619,0.004018,0.003371,0.002611,0.001906,0.001540,0.001341,0.001128,0.001025,0.001114,0.001151,0.001224,0.001403,0.001564,0.001709,0.001914,0.002097,0.002148,0.002190,0.002192,0.002124,0.002190,0.002485,0.002819,0.002892,0.002769,0.002559,0.002374,0.002161
giCBassoon38 ftgen 0,0,4096,10,0.240531,0.304670,0.289169,0.727482,0.578083,0.169149,0.057305,0.193624,0.167977,0.206006,0.182632,0.057408,0.103574,0.044785,0.084239,0.068303,0.030771,0.133375,0.096231,0.037016,0.046566,0.020770,0.020264,0.015211,0.029647,0.018603,0.027940,0.062861,0.033828,0.015594,0.016305,0.025478,0.034356,0.038642,0.028451,0.026747,0.014914,0.016727,0.015524,0.013236,0.014264,0.013651,0.014838,0.016490,0.021208,0.017660,0.013009,0.014867,0.013013,0.010426,0.009144,0.009462,0.009367,0.009624,0.008079,0.007399,0.009012,0.009384,0.008661,0.009051,0.009394,0.010578,0.011610,0.012184,0.010442,0.009130,0.008795,0.008468,0.010039,0.011205,0.011438,0.011489,0.010526,0.008902,0.007391,0.006198,0.005970,0.005264,0.004331,0.003874,0.003514,0.003418,0.003518,0.003409,0.003150,0.003023,0.003047,0.003199,0.003624,0.003999,0.003839,0.003629,0.003712,0.003872,0.003974,0.003836,0.003596,0.003353,0.003177,0.003070
giCBassoon50 ftgen 0,0,4096,10,0.200451,0.511764,0.153876,0.491651,0.722151,0.174751,0.087283,0.068341,0.008971,0.040014,0.041083,0.015335,0.047809,0.037606,0.038259,0.020124,0.022425,0.024747,0.016480,0.008528,0.006892,0.004131,0.005947,0.005585,0.006842,0.008448,0.015885,0.005820,0.002834,0.004626,0.003886,0.003621,0.004837,0.005276,0.002715,0.002900,0.003817,0.005081,0.005598,0.006033,0.006164,0.004260,0.003944,0.004776,0.004223,0.004351,0.004769,0.004836,0.004959,0.005380,0.004538,0.003969,0.003860,0.003536,0.003521,0.003397,0.002823,0.002162,0.002001,0.001663,0.001430,0.001505,0.001566,0.001468,0.001406,0.001439,0.001225,0.001095,0.001134,0.001316,0.001630,0.001839,0.001964,0.001940,0.001824,0.001694,0.001617,0.001526,0.001348,0.001116,0.000972,0.000973,0.001011,0.001015,0.000944,0.000785,0.000650,0.000609,0.000675,0.000782,0.000839,0.000818,0.000755,0.000661,0.000566,0.000498,0.000471,0.000478,0.000486,0.000479
giwavemapCBassoon	ftgen	0,0,128,-27, 0,0, 22,0,  26,1,  38,2,  50,3,  127,3
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
gitabs4morfCBassoon	ftgen	0,0,4,-2,giCBassoon22,giCBassoon26,giCBassoon38,giCBassoon50


;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; VIOLIN
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
giviolin55 ftgen 0,0,4096,10,0.081672,0.785854,0.808302,0.221447,0.136644,0.103608,0.051154,0.040070,0.071067,0.358903,0.053101,0.090036,0.033729,0.068969,0.060398,0.147336,0.060769,0.055245,0.044695,0.022179,0.058528,0.083706,0.029581,0.013173;,0.013173
giviolin67 ftgen 0,0,4096,10,0.344116,0.095361,0.038223,0.090317,0.145798,0.049369,0.076997,0.057555,0.016248,0.036189,0.014161,0.008738,0.010238,0.009625,0.005588,0.004762,0.002635,0.002162,0.002822,0.002144,0.001687,0.001955,0.001870,0.001011;,0.001011
giviolin79 ftgen 0,0,4096,10,0.403041,0.281156,0.259204,0.392900,0.236559,0.108769,0.117288,0.063588,0.039483,0.018245,0.012717,0.020183,0.008506,0.017915,0.008925,0.008575,0.006947,0.008142,0.005487,0.005970,0.004402,0.003161,0.002361,0.001942;,0.001942
giviolin91 ftgen 0,0,4096,10,0.231708,0.906742,0.215622,0.092709,0.057338,0.038101,0.030758,0.023439,0.009905,0.001298,0.002108,0.000516,0.000499,0.000123,0.000642,0.000732,0.004757,0.004547,0.017582,0.033035,0.098559,0.013616,0.017674,0.019601;,0.019601
giwavemapViolin	ftgen	0,0,128,-27, 0,0, 55,0,  67,1,  79,2,  91,3,  127,3
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
gitabs4morfViolin	ftgen	0,0,4,-2,giviolin55,giviolin67,giviolin79,giviolin91	;

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; CELLO
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
gicello36 ftgen 0,0,4096,10,0.022943,0.412962,0.548431,0.578468,0.092241,0.116378,0.052974,0.029585,0.093977,0.119660,0.064074,0.051807,0.015094,0.094184,0.015488,0.006640,0.007091,0.011557,0.043467,0.023330,0.018118,0.026921,0.010285,0.007653,0.015306,0.023175,0.013051,0.004840,0.005658,0.010814,0.014921,0.026066,0.028334,0.015227,0.010740,0.008966,0.009389,0.012547,0.011544,0.009900,0.012403,0.013093,0.008259,0.007148,0.006129,0.004932,0.004332,0.003397,0.002497,0.002241,0.002187,0.002227,0.001634,0.001186,0.001119,0.001131,0.001276,0.000970,0.001101,0.001647,0.001936,0.001632,0.001190,0.000891,0.000883,0.000906,0.000894,0.000855,0.000768,0.000721,0.000750,0.000900,0.000965,0.000844,0.000765,0.000643,0.000535,0.000464,0.000409,0.000403,0.000489,0.000642,0.000773,0.000819,0.000871,0.000930,0.000979,0.000950,0.000781,0.000649,0.000620,0.000653,0.000661,0.000706,0.000805,0.000856,0.000832,0.000793,0.000750,0.000702
gicello48 ftgen 0,0,4096,10,0.171752,0.537455,0.217980,0.172188,0.552902,0.583964,0.452897,0.095360,0.059208,0.033024,0.126570,0.028481,0.067671,0.029869,0.055112,0.056284,0.025151,0.038689,0.027323,0.027935,0.070762,0.023514,0.016984,0.013118,0.008692,0.004591,0.002235,0.003399,0.002568,0.002224,0.002366,0.002892,0.004660,0.003562,0.002923,0.002328,0.002327,0.001705,0.001566,0.002356,0.002199,0.003381,0.006360,0.007320,0.004930,0.002809,0.002686,0.002156,0.001566,0.001273,0.001192,0.001380,0.001683,0.002133,0.003160,0.002820,0.002065,0.002097,0.002013,0.001649,0.001366,0.001053,0.000819,0.000730,0.000775,0.000937,0.001097,0.001063,0.000917,0.000815,0.000792,0.000857,0.001010,0.001203,0.001372,0.001408,0.001295,0.001173,0.001062,0.000942,0.000825,0.000761,0.000774,0.000854,0.000932,0.000968,0.000987,0.001022,0.001018,0.000944,0.000882,0.000829,0.000779,0.000734,0.000693,0.000655,0.000602,0.000547,0.000529,0.000548
gicello60 ftgen 0,0,4096,10,0.762584,0.124687,0.088950,0.091324,0.058688,0.034069,0.038828,0.065420,0.062254,0.058503,0.033332,0.014105,0.011585,0.004135,0.005176,0.004496,0.006698,0.008491,0.007044,0.003450,0.004771,0.016317,0.009897,0.007180,0.004105,0.002477,0.003995,0.002992,0.002346,0.002233,0.002558,0.002135,0.002301,0.001713,0.001191,0.001850,0.004203,0.001813,0.000969,0.001090,0.000636,0.001237,0.000844,0.001107,0.000880,0.000791,0.000640,0.000894,0.000554,0.000727,0.001041,0.001046,0.001079,0.000456,0.000410,0.000442,0.000431,0.000437,0.000427,0.000389,0.000350,0.000284,0.000269,0.000260,0.000210,0.000253,0.000328,0.000296,0.000290,0.000419,0.000452,0.000328,0.000215,0.000229,0.000333,0.000275,0.000208,0.000204,0.000163,0.000283,0.000253,0.000264,0.000178,0.000208,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
gicello72 ftgen 0,0,4096,10,0.601382,0.263076,0.197963,0.244245,0.217992,0.114034,0.025768,0.041518,0.011954,0.006391,0.012239,0.017818,0.016819,0.012798,0.007576,0.007376,0.002891,0.021377,0.005261,0.004421,0.009226,0.004333,0.001808,0.003989,0.002078,0.001344,0.001560,0.001240,0.001586,0.001307,0.000519,0.000761,0.001009,0.000632,0.000412,0.000414,0.000361,0.000406,0.000544,0.000741,0.000281,0.000164,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giwavemapCello	ftgen	0,0,128,-27, 0,0, 36,0,  48,1,  60,2,  72,3,  127,3
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
gitabs4morfCello	ftgen	0,0,4,-2,gicello36,gicello48,gicello60,gicello72	;

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; PICCOLO
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
gipiccolo74 ftgen 0,0,4096,10,0.898113,0.247693,0.060222,0.127742,0.034019,0.044738,0.029980,0.018041,0.008219,0.009819,0.015719,0.009423,0.020117,0.011802,0.007226,0.003198,0.001597,0.002062,0.001590,0.001420,0.001087,0.000581,0.000370,0.000393,0.000393
gipiccolo80 ftgen 0,0,4096,10,0.837581,0.024769,0.144022,0.109176,0.031512,0.026122,0.004565,0.008379,0.004995,0.002685,0.003489,0.002674,0.002743,0.001129,0.000485,0.000367,0.000701,0.001563,0.001166,0.000647,0.000808,0.000622,0.000358,0.000227,0.000227
gipiccolo86 ftgen 0,0,4096,10,0.730803,0.323120,0.277720,0.044844,0.009400,0.022785,0.004602,0.005762,0.006400,0.002483,0.001490,0.002354,0.004728,0.002669,0.003175,0.001177,0.000761,0.000509,0.000449,0.000703,0.001078,0.002471,0.003905,0.004114,0.004114
gipiccolo92 ftgen 0,0,4096,10,0.883567,0.117309,0.144273,0.012664,0.016747,0.002921,0.002043,0.001429,0.002107,0.008510,0.001611,0.002330,0.000075,0.000381,0.000943,0.002268,0.001748,0.001626,0.000882,0.002765,0.003187,0.004911,0.008342,0.017209,0.017209
gipiccolo98 ftgen 0,0,4096,10,0.922186,0.144948,0.042529,0.011837,0.006901,0.000900,0.001625,0.000686,0.000507 ; ,0.000305,0.000305,0.000730,0.000922,0.001408,0.001499,0.005116,0.021056,0.151393,0.034986,0.124701,0.024182,0.008037,0.002664,0.001934,0.001934
gipiccolo106 ftgen 0,0,4096,10,0.501042,0.019695,0.008976,0.003473,0.006493,0.001700,0.002765,0.003224,0.006276 ; ,0.025062,0.036907,0.005386,0.046443,0.013720,0.005391,0.007819,0.019832,0.008441,0.006927,0.007528,0.018483,0.042516,0.057060,0.083779,0.083779
giwavemapPiccolo	ftgen	0,0,128,-27, 0,0, 74,0,  80,1,  86,2,  92,3,  98,4, 106,5, 127,5
gitabs4morfPiccolo	ftgen	0,0,8,-2,gipiccolo74,gipiccolo80,gipiccolo86,gipiccolo92,gipiccolo98,gipiccolo106,gipiccolo106,gipiccolo106	;

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; FLUTE
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
giflute59 ftgen 0,0,4096,10,0.876155,0.188136,0.766537,0.278649,0.134428,0.143342,0.201465,0.068043,0.011284,0.021093,0.021494,0.010577,0.016431,0.007352,0.006864,0.007433,0.006500,0.004716,0.004282,0.002545,0.002718,0.002045,0.001768,0.002409,0.002409
giflute65 ftgen 0,0,4096,10,0.799971,0.564039,0.327027,0.076562,0.324116,0.049951,0.035116,0.048856,0.017988,0.004316,0.007909,0.004093,0.003013,0.003329,0.001707,0.001995,0.001913,0.000937,0.001543,0.001868,0.001289,0.001463,0.001865,0.001076,0.001076
giflute71 ftgen 0,0,4096,10,0.902388,0.107786,0.423495,0.078015,0.066093,0.032990,0.012352,0.008687,0.005253,0.004091,0.001790,0.002202,0.000853,0.001228,0.000810,0.000828,0.000601,0.000593,0.000647,0.000906,0.000925,0.001111,0.001302,0.000899,0.000899
giflute77 ftgen 0,0,4096,10,0.925667,0.059839,0.214284,0.013980,0.026778,0.008733,0.019436,0.002640,0.004217,0.002126,0.003513,0.002455,0.001336,0.001508,0.001589,0.002155,0.002549,0.001951,0.001614,0.001076,0.001253,0.001138,0.001073,0.000990,0.000990
giflute83 ftgen 0,0,4096,10,0.865610,0.041090,0.054192,0.043068,0.022098,0.002450,0.005687,0.002093,0.005076,0.001357,0.003848,0.006820,0.002879,0.005038,0.002273,0.002877,0.001043,0.001188,0.000857,0.000726,0.000537,0.000320,0.000390,0.000666,0.000666
giflute89 ftgen 0,0,4096,10,0.907108,0.032221,0.007003,0.010577,0.004166,0.002274,0.001089,0.002739,0.002459,0.002194,0.001351,0.000570,0.000469,0.000388,0.000228,0.000180,0.000377,0.000470,0.000724,0.001478,0.002258,0.002625,0.006255,0.003183,0.003183
giflute95 ftgen 0,0,4096,10,0.927168,0.094811,0.014160,0.010743,0.004640,0.002540,0.000535,0.000356,0.000205,0.000147,0.000042,0.000032,0.000090,0.000201,0.000171,0.000595,0.000136,0.000338,0.000284,0.000244,0.001813,0.001310,0.002113,0.000510,0.000510
giflute98 ftgen 0,0,4096,10,0.793870,0.077609,0.047389,0.012277,0.005127,0.002760,0.002619,0.000390,0.000109,0.000105,0.000147,0.000425,0.000266,0.000201,0.000312,0.000210,0.001391,0.003570,0.001720,0.002746,0.001399,0.000749,0.000411,0.001156,0.001156
giwavemapFlute	ftgen	0,0,128,-27, 0,0, 59,0, 65,1, 71,2, 77,3, 83,4, 89,5, 95,6, 98,7, 127,7
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
gitabs4morfFlute	ftgen	0,0,8,-2,giflute59,giflute65,giflute71,giflute77,giflute83,giflute89,giflute95,giflute98

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; ALTO FLUTE
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
giAFlute55 ftgen 0,0,4096,10,0.821986,0.323726,0.027144,0.049562,0.045630,0.004837,0.008584,0.002449,0.002921,0.004780,0.006174,0.006496,0.009180,0.010020,0.008884,0.006397,0.007728,0.007543,0.005540,0.004643,0.004213,0.003464,0.002247,0.001529,0.001529
giAFlute61 ftgen 0,0,4096,10,0.629423,0.050378,0.078267,0.098147,0.002593,0.003473,0.002978,0.007847,0.002718,0.004264,0.004001,0.003129,0.002278,0.001767,0.001591,0.001198,0.000790,0.000910,0.000907,0.000909,0.000690,0.001006,0.000870,0.000801,0.000801
giAFlute67 ftgen 0,0,4096,10,0.734185,0.213440,0.086548,0.055143,0.004785,0.001811,0.011006,0.004212,0.001873,0.002130,0.001001,0.000376,0.000632,0.000823,0.000595,0.000764,0.000514,0.000403,0.000326,0.000317,0.000537,0.000523,0.000835,0.000743,0.000743
giAFlute76 ftgen 0,0,4096,10,0.868899,0.390848,0.052590,0.023839,0.033699,0.031143,0.013923,0.008881,0.003821,0.001797,0.003048,0.002506,0.002295,0.001878,0.001118,0.001109,0.001133,0.001732,0.002085,0.002020,0.001240,0.000963,0.000929,0.000456,0.000456
giwavemapAFlute	ftgen	0,0,128,-27, 0,0, 55,0, 61,1, 67,2, 76,3, 127,3
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
gitabs4morfAFlute	ftgen	0,0,4,-2,giAFlute55,giAFlute61,giAFlute67,giAFlute76

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; BASS FLUTE
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
giBFlute48 ftgen 0,0,4096,10,0.691967,0.034269,0.271945,0.033667,0.017446,0.011342,0.007238,0.006576,0.003027,0.003556,0.004425,0.004988,0.003990,0.005253,0.006140,0.003051,0.004437,0.003567,0.002838,0.001703,0.001528,0.001368,0.001703,0.001153,0.000827,0.001023,0.000899,0.000612,0.000827,0.000823,0.000948,0.001184,0.001201,0.001272,0.001032,0.001141,0.001128,0.000887,0.000790,0.000612,0.000565,0.000573,0.000586,0.000554,0.000483,0.000450,0.000404,0.000416,0.000392,0.000391,0.000327,0.000336,0.000370,0.000424,0.000460,0.000459,0.000456,0.000395,0.000319,0.000306,0.000283,0.000306,0.000338,0.000305,0.000288,0.000263,0.000247,0.000239,0.000245,0.000233,0.000190,0.000166,0.000161,0.000160,0.000150,0.000136,0.000130,0.000130,0.000126,0.000126,0.000128,0.000131,0.000131,0.000136,0.000138,0.000132,0.000122,0.000116,0.000119,0.000126,0.000122,0.000112,0.000109,0.000113,0.000118,0.000118,0.000118,0.000117,0.000116,0.000118
giBFlute54 ftgen 0,0,4096,10,0.633439,0.578363,0.200810,0.008032,0.068714,0.005615,0.005448,0.012421,0.009987,0.006289,0.004137,0.002738,0.001944,0.002935,0.003674,0.002567,0.002545,0.004116,0.003915,0.002935,0.002322,0.002647,0.003186,0.003370,0.003213,0.002193,0.001902,0.001629,0.001652,0.001274,0.001102,0.001205,0.001277,0.001134,0.001117,0.001286,0.001477,0.001607,0.002607,0.003270,0.002939,0.002558,0.001826,0.001324,0.001228,0.001070,0.001110,0.001120,0.001042,0.000924,0.000909,0.000880,0.000765,0.000674,0.000600,0.000491,0.000437,0.000441,0.000443,0.000452,0.000467,0.000527,0.000606,0.000571,0.000554,0.000518,0.000420,0.000363,0.000315,0.000275,0.000245,0.000221,0.000200,0.000202,0.000219,0.000211,0.000194,0.000187,0.000197,0.000197,0.000193,0.000201,0.000217,0.000223,0.000219,0.000213,0.000200,0.000175,0.000149,0.000131,0.000124,0.000120,0.000115,0.000111,0.000113,0.000117,0.000115,0.000107,0.000100,0.000098
giBFlute60 ftgen 0,0,4096,10,0.801592,0.068816,0.032303,0.012614,0.002660,0.014692,0.002493,0.006175,0.001826,0.001416,0.002607,0.001063,0.001542,0.001053,0.001293,0.001226,0.000781,0.001142,0.000975,0.000922,0.000693,0.000570,0.000538,0.000429,0.000587,0.000775,0.000855,0.001295,0.001190,0.000941,0.000912,0.000796,0.000662,0.000789,0.000828,0.000784,0.000614,0.000480,0.000455,0.000378,0.000334,0.000309,0.000351,0.000375,0.000427,0.000378,0.000293,0.000232,0.000224,0.000199,0.000150,0.000119,0.000100,0.000084,0.000084,0.000088,0.000085,0.000081,0.000076,0.000081,0.000080,0.000075,0.000071,0.000068,0.000063,0.000060,0.000064,0.000067,0.000065,0.000058,0.000055,0.000054,0.000054,0.000053,0.000052,0.000053,0.000053,0.000053,0.000052,0.000050,0.000049,0.000049,0.000049,0.000049,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giBFlute66 ftgen 0,0,4096,10,0.743019,0.068238,0.021487,0.010397,0.001744,0.013212,0.001676,0.005245,0.002049,0.001401,0.001686,0.001346,0.001288,0.000879,0.001087,0.000922,0.000878,0.000678,0.000904,0.000729,0.000481,0.000542,0.000525,0.000561,0.000481,0.000552,0.000745,0.001153,0.001211,0.001000,0.000706,0.000621,0.000613,0.000779,0.000764,0.000717,0.000619,0.000486,0.000448,0.000429,0.000341,0.000327,0.000331,0.000340,0.000340,0.000335,0.000288,0.000255,0.000233,0.000195,0.000173,0.000150,0.000127,0.000123,0.000119,0.000113,0.000111,0.000115,0.000116,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giBFlute72 ftgen 0,0,4096,10,0.741444,0.066744,0.018973,0.009713,0.002046,0.010742,0.001911,0.004984,0.002277,0.001308,0.001841,0.000932,0.001065,0.000889,0.001029,0.000970,0.000767,0.000708,0.000743,0.000629,0.000541,0.000457,0.000410,0.000534,0.000487,0.000489,0.000743,0.001263,0.001164,0.001062,0.000757,0.000529,0.000538,0.000606,0.000594,0.000583,0.000497,0.000463,0.000498,0.000433,0.000369,0.000363,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giBFlute76 ftgen 0,0,4096,10,0.745977,0.066489,0.014197,0.007352,0.002175,0.009766,0.002280,0.004362,0.001870,0.001375,0.001383,0.001328,0.001381,0.001194,0.001429,0.000949,0.000917,0.000802,0.000818,0.000932,0.000636,0.000646,0.000571,0.000575,0.000613,0.000679,0.000959,0.001343,0.001448,0.001365,0.001241,0.001091,0.001093,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giwavemapBFlute	ftgen	0,0,128,-27, 0,0, 48,0, 54,1, 60,2, 66,3, 72,4, 76,5, 127,5
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
gitabs4morfBFlute	ftgen	0,0,8,-2,giBFlute48,giBFlute54,giBFlute60,giBFlute66,giBFlute72,giBFlute76,giBFlute76,giBFlute76

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; AHH
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/*
giAhh24 ftgen 0,0,4096,10, 0.000412,0.000370,0.000337,0.000371,0.000555,0.000859,0.001305,0.001896,0.002601,0.003585,0.004729,0.006226,0.008387,0.010759,0.015604,0.021153,0.036276,0.057553,0.053066,0.030189,0.020360,0.014722,0.011349,0.009414,0.008036,0.007520,0.007518,0.008204,0.010188,0.013445,0.021468,0.024378,0.017218,0.010300,0.007574,0.005320,0.004125,0.003105,0.002351,0.001777,0.001280,0.000908,0.000603,0.000362,0.000194,0.000113,0.000107,0.000165,0.000269,0.000410,0.000591,0.000829,0.001124,0.001497,0.001964,0.002540,0.003281,0.004214,0.005465,0.007172,0.009487,0.012221,0.012290,0.008928,0.005554,0.004575,0.006297,0.009642,0.012002,0.011210,0.008864,0.007021,0.005649,0.004715,0.004092,0.003711,0.003540,0.003269,0.002720,0.002116,0.001696,0.001392,0.001163,0.000978,0.000817,0.000679,0.000554,0.000445,0.000349,0.000267,0.000201,0.000148,0.000112
giAhh27 ftgen 0,0,4096,10, 0.000484,0.000423,0.000410,0.000587,0.001000,0.001640,0.002515,0.003647,0.005207,0.007188,0.010221,0.013861,0.021835,0.034169,0.065821,0.062536,0.031595,0.021762,0.014578,0.011706,0.009599,0.008934,0.009048,0.011008,0.014402,0.024811,0.028584,0.017346,0.010562,0.007037,0.005089,0.003642,0.002621,0.001845,0.001237,0.000781,0.000431,0.000198,0.000132,0.000128,0.000107,0.000154,0.000279,0.000469,0.000726,0.001077,0.001533,0.002136,0.002909,0.003944,0.005309,0.007297,0.010064,0.014010,0.014733,0.009883,0.005835,0.006234,0.010391,0.014244,0.013109,0.009848,0.007528,0.005944,0.004974,0.004420,0.004181,0.003659,0.002784,0.002107,0.001664,0.001346,0.001093,0.000881,0.000697,0.000538,0.000403,0.000292,0.000206,0.000145,0.000112
giAhh30 ftgen 0,0,4096,10, 0.000560,0.000482,0.000562,0.001054,0.001899,0.003144,0.004913,0.007274,0.010934,0.015824,0.026652,0.050310,0.084386,0.048694,0.027304,0.017198,0.013209,0.010896,0.010619,0.012323,0.016925,0.031534,0.030303,0.014903,0.009410,0.006192,0.004171,0.002825,0.001804,0.001089,0.000559,0.000223,0.000135,0.000159,0.000132,0.000111,0.000205,0.000408,0.000717,0.001165,0.001784,0.002644,0.003807,0.005452,0.007846,0.011507,0.016933,0.016329,0.008970,0.006585,0.011345,0.016921,0.014673,0.010437,0.007690,0.006096,0.005243,0.004888,0.003982,0.002810,0.002096,0.001620,0.001264,0.000975,0.000730,0.000526,0.000361,0.000238,0.000159,0.000123,0.000113,0.000108
giAhh33 ftgen 0,0,4096,10, 0.000645,0.000569,0.000955,0.001964,0.003652,0.006202,0.009824,0.015928,0.027700,0.054004,0.099838,0.045530,0.026122,0.017357,0.013212,0.012640,0.015734,0.025801,0.041244,0.020359,0.011360,0.006947,0.004321,0.002669,0.001503,0.000708,0.000231,0.000110,0.000186,0.000170,0.000130,0.000254,0.000564,0.001062,0.001820,0.002933,0.004538,0.006945,0.010838,0.017334,0.020883,0.011091,0.008199,0.016262,0.019876,0.013707,0.009453,0.007159,0.006126,0.005456,0.003786,0.002617,0.001920,0.001428,0.001039,0.000721,0.000469,0.000288,0.000180,0.000140,0.000132,0.000122,0.000102
giAhh36 ftgen 0,0,4096,10, 0.000741,0.000742,0.001718,0.003793,0.007172,0.012458,0.021527,0.042327,0.115172,0.060415,0.029465,0.018842,0.015053,0.016424,0.026918,0.048812,0.020626,0.010654,0.006220,0.003560,0.001819,0.000726,0.000149,0.000187,0.000214,0.000156,0.000332,0.000822,0.001662,0.003004,0.005098,0.008459,0.014399,0.024542,0.017933,0.009191,0.019377,0.022533,0.014117,0.009483,0.007465,0.006578,0.004260,0.002803,0.001970,0.001367,0.000896,0.000539,0.000299,0.000185,0.000160,0.000148,0.000121
giAhh39 ftgen 0,0,4096,10, 0.000846,0.001173,0.003275,0.007285,0.014357,0.027687,0.068261,0.124920,0.043474,0.023386,0.017847,0.021990,0.049566,0.034657,0.014061,0.007278,0.003688,0.001560,0.000396,0.000192,0.000256,0.000187,0.000558,0.001451,0.003062,0.005814,0.010610,0.020116,0.029454,0.011668,0.020774,0.026213,0.015055,0.009950,0.008362,0.005568,0.003330,0.002188,0.001396,0.000808,0.000411,0.000223,0.000189,0.000167,0.000123
giAhh42 ftgen 0,0,4096,10, 0.000963,0.002108,0.006288,0.014551,0.031661,0.100695,0.097406,0.034417,0.021810,0.024675,0.063158,0.029838,0.012403,0.005661,0.002185,0.000448,0.000270,0.000265,0.000411,0.001440,0.003583,0.007649,0.015770,0.034040,0.018012,0.022841,0.029509,0.015471,0.010557,0.008019,0.004223,0.002548,0.001472,0.000730,0.000322,0.000229,0.000199,0.000135
giAhh45 ftgen 0,0,4096,10, 0.001138,0.003929,0.012405,0.031859,0.108048,0.091053,0.034718,0.025288,0.051642,0.040725,0.013900,0.005342,0.001417,0.000220,0.000340,0.000509,0.002128,0.005880,0.013925,0.034767,0.022222,0.032638,0.027491,0.014365,0.010950,0.005254,0.002868,0.001449,0.000579,0.000282,0.000244,0.000156
giAhh48 ftgen 0,0,4096,10, 0.001482,0.007584,0.024916,0.084669,0.120825,0.037691,0.032860,0.097651,0.021318,0.007128,0.001455,0.000373,0.000311,0.001646,0.006016,0.016943,0.049158,0.018410,0.045129,0.018996,0.013181,0.005616,0.002740,0.001081,0.000371,0.000296,0.000174,0.000109
giAhh51 ftgen 0,0,4096,10, 0.002346,0.014577,0.055410,0.249952,0.046797,0.044016,0.069343,0.014565,0.003123,0.000384,0.000374,0.002906,0.011647,0.040309,0.023365,0.052509,0.019934,0.011156,0.004385,0.001619,0.000449,0.000335,0.000163,0.000126
giAhh54 ftgen 0,0,4096,10, 0.004218,0.029108,0.201426,0.068825,0.049355,0.059660,0.011314,0.000892,0.000531,0.002882,0.015302,0.068104,0.045706,0.030943,0.016039,0.005097,0.001458,0.000457,0.000270,0.000155
giAhh57 ftgen 0,0,4096,10, 0.007858,0.063721,0.182088,0.050577,0.081435,0.010683,0.000440,0.001018,0.011764,0.069560,0.065307,0.028732,0.010508,0.002898,0.000565,0.000313,0.000177
giAhh60 ftgen 0,0,4096,10, 0.015174,0.169369,0.075380,0.195316,0.014245,0.000747,0.003294,0.033895,0.036836,0.037995,0.011232,0.002161,0.000593,0.000220,0.000121
giAhh63 ftgen 0,0,4096,10, 0.029160,0.499980,0.088056,0.029134,0.000770,0.005816,0.080662,0.105049,0.022319,0.003239,0.000671,0.000252,0.000122
giAhh66 ftgen 0,0,4096,10, 0.058218,0.137644,0.119309,0.001783,0.005763,0.136221,0.061878,0.010194,0.000915,0.000309,0.000144
giAhh69 ftgen 0,0,4096,10, 0.127432,0.101146,0.021362,0.002037,0.139115,0.057450,0.005793,0.000626,0.000185
giAhh72 ftgen 0,0,4096,10, 0.338719,0.390591,0.001495,0.067786,0.075975,0.004319,0.000439,0.000166
giAhh75 ftgen 0,0,4096,10, 1.000000,0.058271,0.011635,0.210114,0.006478,0.000504,0.000138
giAhh78 ftgen 0,0,4096,10, 0.275285,0.003566,0.272436,0.020387,0.000618,0.000157
giAhh81 ftgen 0,0,4096,10, 0.202299,0.004074,0.114905,0.001251,0.000191
giAhh84 ftgen 0,0,4096,10, 0.781181,0.135572,0.008638,0.000333
giwavemapAhh	ftgen	0,0,128,-27, 0,0, 24,0,  27,1,  30,2,  33,3,  36,4,  39,5, 42,6, 45,7, 48,8, 51,9, 54,10, 57,11, 60,12, 63,13, 66,14, 69,15, 72,16, 75,17, 78,18, 81,19, 84,20, 127,20
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
gitabs4morfAhh	ftgen	0,0,32,-2,giAhh24,giAhh27,giAhh30,giAhh33,giAhh36,giAhh39,giAhh42,giAhh45,giAhh48,giAhh51,giAhh54,giAhh57,giAhh60,giAhh63,giAhh66,giAhh69,giAhh72,giAhh75,giAhh78,giAhh81,giAhh84,giAhh84,giAhh84,giAhh84,giAhh84,giAhh84,giAhh84,giAhh84,giAhh84,giAhh84,giAhh84,giAhh84
*/

giAhh24 ftgen 0,0,4096,10,0.000412,0.000370,0.000337,0.000371,0.000555,0.000859,0.001305,0.001896,0.002601,0.003585,0.004729,0.006226,0.008387,0.010759,0.015604,0.021153,0.036276,0.057553,0.053066,0.030189,0.020360,0.014722,0.011349,0.009414,0.008036,0.007520,0.007518,0.008204,0.010188,0.013445,0.021468,0.024378,0.017218,0.010300,0.007574,0.005320,0.004125,0.003105,0.002351,0.001777,0.001280,0.000908,0.000603,0.000362,0.000194,0.000113,0.000107,0.000165,0.000269,0.000410,0.000591,0.000829,0.001124,0.001497,0.001964,0.002540,0.003281,0.004214,0.005465,0.007172,0.009487,0.012221,0.012290,0.008928,0.005554,0.004575,0.006297,0.009642,0.012002,0.011210,0.008864,0.007021,0.005649,0.004715,0.004092,0.003711,0.003540,0.003269,0.002720,0.002116,0.001696,0.001392,0.001163,0.000978,0.000817,0.000679,0.000554,0.000445,0.000349,0.000267,0.000201,0.000148,0.000112
giAhh27 ftgen 0,0,4096,10,0.000484,0.000423,0.000410,0.000587,0.001000,0.001640,0.002515,0.003647,0.005207,0.007188,0.010221,0.013861,0.021835,0.034169,0.065821,0.062536,0.031595,0.021762,0.014578,0.011706,0.009599,0.008934,0.009048,0.011008,0.014402,0.024811,0.028584,0.017346,0.010562,0.007037,0.005089,0.003642,0.002621,0.001845,0.001237,0.000781,0.000431,0.000198,0.000132,0.000128,0.000107,0.000154,0.000279,0.000469,0.000726,0.001077,0.001533,0.002136,0.002909,0.003944,0.005309,0.007297,0.010064,0.014010,0.014733,0.009883,0.005835,0.006234,0.010391,0.014244,0.013109,0.009848,0.007528,0.005944,0.004974,0.004420,0.004181,0.003659,0.002784,0.002107,0.001664,0.001346,0.001093,0.000881,0.000697,0.000538,0.000403,0.000292,0.000206,0.000145,0.000112
giAhh30 ftgen 0,0,4096,10,0.000560,0.000482,0.000562,0.001054,0.001899,0.003144,0.004913,0.007274,0.010934,0.015824,0.026652,0.050310,0.084386,0.048694,0.027304,0.017198,0.013209,0.010896,0.010619,0.012323,0.016925,0.031534,0.030303,0.014903,0.009410,0.006192,0.004171,0.002825,0.001804,0.001089,0.000559,0.000223,0.000135,0.000159,0.000132,0.000111,0.000205,0.000408,0.000717,0.001165,0.001784,0.002644,0.003807,0.005452,0.007846,0.011507,0.016933,0.016329,0.008970,0.006585,0.011345,0.016921,0.014673,0.010437,0.007690,0.006096,0.005243,0.004888,0.003982,0.002810,0.002096,0.001620,0.001264,0.000975,0.000730,0.000526,0.000361,0.000238,0.000159,0.000123,0.000113,0.000108
giAhh33 ftgen 0,0,4096,10,0.000645,0.000569,0.000955,0.001964,0.003652,0.006202,0.009824,0.015928,0.027700,0.054004,0.099838,0.045530,0.026122,0.017357,0.013212,0.012640,0.015734,0.025801,0.041244,0.020359,0.011360,0.006947,0.004321,0.002669,0.001503,0.000708,0.000231,0.000110,0.000186,0.000170,0.000130,0.000254,0.000564,0.001062,0.001820,0.002933,0.004538,0.006945,0.010838,0.017334,0.020883,0.011091,0.008199,0.016262,0.019876,0.013707,0.009453,0.007159,0.006126,0.005456,0.003786,0.002617,0.001920,0.001428,0.001039,0.000721,0.000469,0.000288,0.000180,0.000140,0.000132,0.000122,0.000102
giAhh36 ftgen 0,0,4096,10,0.001076,0.000760,0.001152,0.002918,0.006013,0.010963,0.018910,0.033003,0.065564,0.123397,0.061570,0.034546,0.024544,0.022364,0.028096,0.049779,0.048235,0.023028,0.012783,0.007477,0.004231,0.002147,0.000887,0.000349,0.000355,0.000327,0.000195,0.000152,0.000288,0.000361,0.000371,0.000539,0.001217,0.002491,0.004498,0.007542,0.012318,0.020674,0.035880,0.035208,0.020677,0.019986,0.031450,0.029001,0.018014,0.012074,0.009087,0.007807,0.005927,0.003587,0.002503,0.001834,0.001291,0.000830,0.000470,0.000249,0.000194,0.000200,0.000178,0.000130
giAhh39 ftgen 0,0,4096,10,0.001221,0.000884,0.002403,0.006103,0.012641,0.024258,0.049147,0.124843,0.094249,0.043351,0.028599,0.027085,0.040952,0.068353,0.030182,0.014975,0.007910,0.003883,0.001548,0.000473,0.000421,0.000370,0.000161,0.000304,0.000426,0.000443,0.000809,0.002086,0.004462,0.008387,0.015033,0.028032,0.047931,0.029239,0.022629,0.037393,0.031509,0.018127,0.012012,0.009537,0.007224,0.004034,0.002693,0.001836,0.001138,0.000598,0.000284,0.000232,0.000231,0.000177,0.000105
giAhh42 ftgen 0,0,4096,10,0.001347,0.001378,0.005009,0.012714,0.027848,0.064949,0.174667,0.072154,0.037557,0.031873,0.051698,0.069662,0.025483,0.011788,0.005236,0.001791,0.000485,0.000510,0.000306,0.000357,0.000517,0.000580,0.001645,0.004407,0.009531,0.019083,0.040846,0.049561,0.026461,0.041849,0.036370,0.019264,0.012655,0.010146,0.005280,0.003211,0.002020,0.001088,0.000460,0.000274,0.000277,0.000199,0.000106,0.000102
giAhh45 ftgen 0,0,4096,10,0.001435,0.002814,0.010404,0.027304,0.073592,0.204283,0.065680,0.038086,0.049867,0.090768,0.028199,0.011415,0.004006,0.000835,0.000609,0.000353,0.000145,0.000530,0.000623,0.001521,0.005124,0.012704,0.029322,0.067515,0.034280,0.047183,0.040088,0.019737,0.013502,0.007873,0.004048,0.002335,0.001073,0.000384,0.000337,0.000259,0.000126,0.000121,0.000110
giAhh48 ftgen 0,0,4096,10,0.001665,0.005802,0.022639,0.067838,0.277959,0.082343,0.043643,0.072542,0.079439,0.023326,0.007411,0.001524,0.000914,0.000509,0.000186,0.000132,0.000538,0.002041,0.005636,0.014527,0.006699,0.012109,0.005270,0.003013,0.001652,0.000778,0.000392,0.000133
giAhh51 ftgen 0,0,4096,10,0.001879,0.012367,0.050272,0.249889,0.104596,0.051557,0.135917,0.047385,0.012730,0.002203,0.001070,0.000444,0.000205,0.000486,0.002508,0.008455,0.012808,0.011617,0.007544,0.003612,0.001661,0.000745,0.000277
giAhh54 ftgen 0,0,4096,10,0.002739,0.026042,0.133355,0.175744,0.061363,0.185512,0.036813,0.006813,0.001283,0.000619,0.000238,0.000104,0.001374,0.006525,0.018731,0.014280,0.007212,0.003761,0.001187,0.000430,0.000106
giAhh57 ftgen 0,0,4096,10,0.005498,0.056620,0.471547,0.079386,0.210272,0.035484,0.003858,0.001328,0.000308,0.000117,0.001906,0.011522,0.011745,0.013323,0.004796,0.001380,0.000371,0.000133
giAhh60 ftgen 0,0,4096,10,0.002967,0.046107,0.824869,0.198093,0.082301,0.006142,0.001955,0.000496,0.001429,0.017146,0.037895,0.004766,0.005960,0.003267,0.000407,0.000157,0.000155,0.000519
giAhh63 ftgen 0,0,4096,10,0.002677,0.127443,0.233422,0.181784,0.009013,0.001717,0.000284,0.007015,0.064115,0.007331,0.007952,0.002405,0.000267,0.000125,0.000600
giAhh66 ftgen 0,0,4096,10,0.010553,0.479368,0.511917,0.027219,0.002374,0.000432,0.019753,0.029194,0.005598,0.003593,0.000314,0.000115,0.000440,0.000188
giAhh69 ftgen 0,0,4096,10,0.033509,0.499985,0.127000,0.004247,0.000403,0.034562,0.013610,0.013599,0.000498,0.000136,0.000625,0.000114
giAhh72 ftgen 0,0,4096,10,0.097704,0.332922,0.011754,0.001452,0.002670,0.003963,0.017086,0.011243,0.000618,0.000448
giAhh75 ftgen 0,0,4096,10,0.266284,0.282922,0.003635,0.000202,0.006066,0.036263,0.001979,0.003494
giAhh78 ftgen 0,0,4096,10,0.976912,0.048417,0.000970,0.026534,0.032847,0.001372,0.000907
giAhh81 ftgen 0,0,4096,10,1.000001,0.008470,0.005716,0.006895,0.001809,0.000528
giAhh84 ftgen 0,0,4096,10,0.665845,0.002904,0.007927,0.022486,0.000897

giwavemapAhh	ftgen	0,0,128,-27, 0,0, 24,0,  27,1,  30,2,  33,3,  36,4,  39,5, 42,6, 45,7, 48,8, 51,9, 54,10, 57,11, 60,12, 63,13, 66,14, 69,15, 72,16, 75,17, 78,18, 81,19, 84,20, 127,20
gitabs4morfAhh	ftgen	0,0,32,-2,giAhh24,giAhh27,giAhh30,giAhh33,giAhh36,giAhh39,giAhh42,giAhh45,giAhh48,giAhh51,giAhh54,giAhh57,giAhh60,giAhh63,giAhh66,giAhh69,giAhh72,giAhh75,giAhh78,giAhh81,giAhh84,giAhh84,giAhh84,giAhh84,giAhh84,giAhh84,giAhh84,giAhh84,giAhh84,giAhh84,giAhh84,giAhh84


;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; OOH
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/*
giOoh24 ftgen 0,0,4096,10,0.006736,0.007744,0.009173,0.011625,0.015301,0.019467,0.030031,0.040022,0.083847,0.111438,0.078627,0.038797,0.030293,0.020098,0.016517,0.013075,0.010944,0.010263,0.009904,0.012389,0.016364,0.013953,0.007558,0.004976,0.003673,0.002791,0.002294,0.001798,0.001446,0.001130,0.000839,0.000619,0.000412,0.000255,0.000142,0.000113,0.000132,0.000128,0.000119,0.000126,0.000173,0.000228,0.000299,0.000385,0.000495,0.000633,0.000806,0.001004,0.001164,0.001174,0.001025,0.000827,0.000650,0.000509,0.000398,0.000310,0.000240,0.000183,0.000137
giOoh27 ftgen 0,0,4096,10,0.008240,0.009736,0.012406,0.017177,0.022681,0.037033,0.060187,0.125058,0.110778,0.048765,0.035061,0.022345,0.017647,0.013782,0.012248,0.011790,0.016043,0.019429,0.011945,0.006214,0.004417,0.003235,0.002505,0.001898,0.001450,0.001023,0.000710,0.000427,0.000235,0.000103,0.000106,0.000137,0.000159,0.000148,0.000130,0.000131,0.000191,0.000267,0.000368,0.000496,0.000668,0.000893,0.001169,0.001399,0.001375,0.001123,0.000853,0.000637,0.000476,0.000354,0.000259,0.000186,0.000129,0.000104,0.000147,0.000202,0.000272,0.000362,0.000479,0.000623,0.000759,0.000789,0.000681,0.000530
giOoh30 ftgen 0,0,4096,10,0.010095,0.012529,0.017608,0.024663,0.043315,0.081558,0.157661,0.088611,0.046106,0.027324,0.020478,0.015548,0.014372,0.016229,0.023376,0.013886,0.006978,0.004439,0.003346,0.002384,0.001737,0.001149,0.000718,0.000372,0.000154,0.000123,0.000167,0.000187,0.000168,0.000125,0.000135,0.000212,0.000319,0.000466,0.000663,0.000940,0.001310,0.001651,0.001590,0.001211,0.000862,0.000610,0.000429,0.000296,0.000198,0.000125,0.000140,0.000209,0.000299,0.000421,0.000586,0.000792,0.000937,0.000852,0.000643,0.000461,0.000327,0.000231,0.000160,0.000107
giOoh33 ftgen 0,0,4096,10,0.012459,0.016728,0.025997,0.045900,0.091150,0.186461,0.074200,0.042360,0.026982,0.018939,0.017010,0.022371,0.024731,0.009432,0.005684,0.003945,0.002654,0.001756,0.001058,0.000513,0.000188,0.000154,0.000216,0.000210,0.000166,0.000171,0.000292,0.000464,0.000712,0.001081,0.001602,0.002011,0.001703,0.001162,0.000770,0.000507,0.000326,0.000198,0.000111,0.000102,0.000176,0.000278,0.000423,0.000631,0.000914,0.001124,0.000963,0.000669,0.000448,0.000297,0.000192,0.000119,0.000112
giOoh36 ftgen 0,0,4096,10,0.015493,0.023256,0.038946,0.080072,0.222961,0.077625,0.040215,0.026163,0.020537,0.024794,0.027925,0.009959,0.005586,0.003599,0.002262,0.001239,0.000511,0.000154,0.000227,0.000257,0.000200,0.000105,0.000183,0.000348,0.000602,0.000995,0.001621,0.002342,0.002063,0.001309,0.000802,0.000483,0.000275,0.000140,0.000124,0.000233,0.000396,0.000642,0.001014,0.001340,0.001090,0.000692,0.000426,0.000257,0.000148,0.000123,0.000130
giOoh39 ftgen 0,0,4096,10,0.019447,0.034315,0.073971,0.249826,0.097427,0.044636,0.027534,0.023553,0.038811,0.012411,0.006462,0.003791,0.002045,0.000853,0.000206,0.000273,0.000295,0.000187,0.000173,0.000381,0.000736,0.001334,0.002335,0.002747,0.001704,0.000952,0.000519,0.000258,0.000107,0.000208,0.000405,0.000725,0.001247,0.001582,0.001061,0.000602,0.000333,0.000173,0.000145,0.000152
giOoh42 ftgen 0,0,4096,10,0.025063,0.049337,0.163181,0.177222,0.054661,0.031107,0.032482,0.027778,0.008882,0.004771,0.002299,0.000744,0.000246,0.000371,0.000246,0.000109,0.000162,0.000428,0.000938,0.001893,0.003326,0.002439,0.001229,0.000596,0.000251,0.000103,0.000284,0.000607,0.001190,0.001900,0.001302,0.000662,0.000323,0.000141,0.000101,0.000172,0.000168
giOoh45 ftgen 0,0,4096,10,0.033454,0.091804,0.372905,0.084714,0.037879,0.044758,0.018864,0.007892,0.003513,0.001026,0.000308,0.000420,0.000196,0.000129,0.000187,0.000586,0.001429,0.003217,0.003417,0.001546,0.000653,0.000221,0.000103,0.000354,0.000853,0.001843,0.001938,0.000899,0.000386,0.000141,0.000147,0.000226,0.000135
giOoh48 ftgen 0,0,4096,10,0.046516,0.160169,0.155245,0.052329,0.049605,0.019920,0.007198,0.002478,0.000308,0.000509,0.000201,0.000135,0.000127,0.000370,0.001207,0.003248,0.004134,0.001606,0.000550,0.000125,0.000106,0.000468,0.001290,0.002692,0.001390,0.000516,0.000158,0.000174,0.000259,0.000118
giOoh51 ftgen 0,0,4096,10,0.068664,0.499897,0.089313,0.047133,0.024836,0.007586,0.001706,0.000547,0.000375,0.000132,0.000136,0.000347,0.001476,0.004681,0.003416,0.001040,0.000214,0.000172,0.000813,0.002504,0.002129,0.000667,0.000162,0.000186,0.000304,0.000115
giOoh54 ftgen 0,0,4096,10,0.098674,0.354398,0.062213,0.055545,0.009543,0.001487,0.000749,0.000134,0.000212,0.000123,0.000856,0.003788,0.004876,0.001194,0.000166,0.000569,0.002379,0.002608,0.000649,0.000109,0.000205,0.000338
giOoh57 ftgen 0,0,4096,10,0.183614,0.169417,0.089526,0.015785,0.002053,0.000839,0.000154,0.000122,0.000129,0.001172,0.006436,0.003091,0.000442,0.000113,0.000708,0.003688,0.001800,0.000283,0.000294,0.000271
giOoh60 ftgen 0,0,4096,10,0.320378,0.104663,0.039843,0.004956,0.001029,0.000257,0.000735,0.006501,0.003212,0.000252,0.000215,0.002579,0.002779,0.000315,0.000143,0.000522
giOoh63 ftgen 0,0,4096,10,1.000001,0.094284,0.015175,0.001094,0.000262,0.000162,0.002953,0.006834,0.000428,0.000345,0.005011,0.001335,0.000107,0.000114,0.000609
giOoh66 ftgen 0,0,4096,10,0.708750,0.111076,0.002977,0.000267,0.000246,0.007577,0.002388,0.000170,0.004759,0.001298,0.000408,0.000196
giOoh69 ftgen 0,0,4096,10,0.338803,0.031564,0.001678,0.000244,0.000258,0.012872,0.000885,0.001416,0.003598,0.000134,0.000588,0.000112
giOoh72 ftgen 0,0,4096,10,0.209313,0.009909,0.000515,0.000104,0.013000,0.000503,0.005157,0.000630,0.000287,0.000189
giOoh75 ftgen 0,0,4096,10,0.188584,0.002188,0.000154,0.005909,0.000855,0.010025,0.000214,0.001217
giOoh78 ftgen 0,0,4096,10,0.222149,0.000533,0.000493,0.004776,0.009517,0.000194,0.000393
giOoh81 ftgen 0,0,4096,10,0.063129,0.000488,0.025748,0.002834,0.000268,0.000223
giOoh84 ftgen 0,0,4096,10,0.019817,0.000207,0.001007,0.001261,0.000379
giwavemapOoh	ftgen	0,0,128,-27, 0,0, 24,0,  27,1,  30,2,  33,3,  36,4,  39,5, 42,6, 45,7, 48,8, 51,9, 54,10, 57,11, 60,12, 63,13, 66,14, 69,15, 72,16, 75,17, 78,18, 81,19, 84,20, 127,20
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
gitabs4morfOoh	ftgen	0,0,32,-2,giOoh24,giOoh27,giOoh30,giOoh33,giOoh36,giOoh39,giOoh42,giOoh45,giOoh48,giOoh51,giOoh54,giOoh57,giOoh60,giOoh63,giOoh66,giOoh69,giOoh72,giOoh75,giOoh78,giOoh81,giOoh84,giOoh84,giOoh84,giOoh84,giOoh84,giOoh84,giOoh84,giOoh84,giOoh84,giOoh84,giOoh84,giOoh84
*/

; mixed voice types
giOoh24 ftgen 0,0,4096,10,0.002656,0.003252,0.004105,0.005622,0.007160,0.009459,0.013108,0.015856,0.025894,0.031448,0.069195,0.117293,0.097983,0.042979,0.032065,0.021929,0.018078,0.015475,0.014066,0.014550,0.016289,0.021526,0.023582,0.017583,0.010850,0.007974,0.005821,0.004584,0.003615,0.002841,0.002234,0.001707,0.001268,0.000905,0.000600,0.000361,0.000186,0.000124,0.000163,0.000187,0.000186,0.000166,0.000139,0.000101,0.000100,0.000137,0.000189,0.000263,0.000361,0.000489,0.000654,0.000858,0.001117,0.001451,0.001869,0.002471,0.003247,0.004440,0.005393,0.004629,0.002917,0.002066,0.002532,0.003852,0.005391,0.005792,0.004814,0.003675,0.002842,0.002214,0.001763,0.001401,0.001091,0.000746,0.000345,0.000127,0.000165,0.000194,0.000194,0.000185,0.000171,0.000154,0.000137,0.000119,0.000101
giOoh27 ftgen 0,0,4096,10,0.003258,0.004239,0.005824,0.008031,0.011084,0.016213,0.021193,0.035813,0.061897,0.136532,0.111390,0.042393,0.033786,0.022028,0.018961,0.016732,0.017591,0.021496,0.028305,0.022987,0.013061,0.009039,0.006327,0.004802,0.003617,0.002714,0.001972,0.001369,0.000897,0.000513,0.000245,0.000108,0.000159,0.000210,0.000226,0.000203,0.000166,0.000112,0.000138,0.000201,0.000297,0.000435,0.000622,0.000874,0.001199,0.001639,0.002216,0.003089,0.004305,0.006101,0.005978,0.003630,0.002459,0.003410,0.005563,0.006988,0.005953,0.004329,0.003190,0.002395,0.001829,0.001373,0.000891,0.000334,0.000160,0.000222,0.000234,0.000222,0.000202,0.000178,0.000153,0.000127,0.000102
giOoh30 ftgen 0,0,4096,10,0.004023,0.005567,0.008482,0.012147,0.018935,0.027436,0.043784,0.124923,0.156060,0.054359,0.038530,0.025628,0.020731,0.020302,0.024164,0.033681,0.024398,0.013158,0.008555,0.006066,0.004329,0.003073,0.002076,0.001307,0.000716,0.000311,0.000128,0.000209,0.000264,0.000252,0.000205,0.000130,0.000103,0.000161,0.000252,0.000400,0.000621,0.000939,0.001374,0.001992,0.002862,0.004244,0.006522,0.007371,0.004231,0.002979,0.004965,0.007920,0.007484,0.005169,0.003596,0.002580,0.001862,0.001227,0.000441,0.000198,0.000273,0.000271,0.000248,0.000214,0.000179,0.000142,0.000109
giOoh33 ftgen 0,0,4096,10,0.005059,0.007690,0.012187,0.020150,0.031282,0.054249,0.186526,0.120147,0.052781,0.030786,0.024379,0.024804,0.034918,0.035401,0.016807,0.010063,0.006707,0.004475,0.002912,0.001727,0.000868,0.000313,0.000184,0.000294,0.000312,0.000251,0.000145,0.000162,0.000275,0.000476,0.000802,0.001297,0.002024,0.003113,0.004960,0.008196,0.007816,0.003687,0.004946,0.009187,0.008701,0.005588,0.003662,0.002498,0.001599,0.000503,0.000264,0.000332,0.000310,0.000265,0.000215,0.000163,0.000117
giOoh36 ftgen 0,0,4096,10,0.006425,0.011190,0.018900,0.031763,0.063063,0.234533,0.085077,0.042498,0.028723,0.024364,0.029248,0.052657,0.032828,0.016019,0.009256,0.005473,0.003020,0.001411,0.000472,0.000289,0.000385,0.000324,0.000169,0.000209,0.000292,0.000313,0.000363,0.000715,0.001488,0.002773,0.004783,0.007968,0.013450,0.024276,0.028174,0.012256,0.017548,0.027382,0.016871,0.007639,0.001429,0.003903,0.002935,0.001946,0.001251,0.000808,0.000539,0.000371,0.000260,0.000189,0.000148,0.000125,0.000105
giOoh39 ftgen 0,0,4096,10,0.008376,0.015990,0.032397,0.071647,0.272662,0.083705,0.042399,0.029965,0.031725,0.060042,0.036024,0.015995,0.008610,0.004457,0.001931,0.000539,0.000377,0.000438,0.000278,0.000188,0.000329,0.000372,0.000455,0.001070,0.002432,0.004805,0.008844,0.016499,0.033376,0.023715,0.015683,0.032489,0.020044,0.007073,0.004006,0.004073,0.002568,0.001523,0.000908,0.000566,0.000367,0.000246,0.000180,0.000147,0.000118
giOoh42 ftgen 0,0,4096,10,0.011034,0.024255,0.054958,0.249960,0.107468,0.049168,0.034461,0.048258,0.060049,0.020609,0.009752,0.004351,0.001387,0.000382,0.000531,0.000321,0.000134,0.000183,0.000390,0.000442,0.000696,0.002019,0.004800,0.010033,0.021149,0.044106,0.017250,0.033814,0.026431,0.007582,0.005537,0.004027,0.002216,0.001191,0.000676,0.000405,0.000256,0.000192,0.000151,0.000111
giOoh45 ftgen 0,0,4096,10,0.015273,0.040290,0.108755,0.238831,0.059213,0.041067,0.079700,0.037954,0.014459,0.005681,0.001470,0.000525,0.000572,0.000143,0.000149,0.000276,0.000507,0.000599,0.001942,0.005592,0.013421,0.033213,0.035928,0.030674,0.033762,0.006591,0.006489,0.003618,0.001724,0.000862,0.000468,0.000280,0.000206,0.000147,0.000101
giOoh48 ftgen 0,0,4096,10,0.010601,0.034815,0.190470,0.080405,0.033305,0.058053,0.024910,0.008255,0.002415,0.000380,0.000499,0.000157,0.000134,0.000544,0.001534,0.004269,0.007067,0.006352,0.013410,0.005008,0.002977,0.001313,0.000644,0.000282
giOoh51 ftgen 0,0,4096,10,0.016431,0.063467,0.235366,0.043971,0.063965,0.024873,0.006978,0.001106,0.000633,0.000237,0.000165,0.000526,0.001871,0.006744,0.006491,0.013161,0.007320,0.003558,0.001368,0.000593,0.000178
giOoh54 ftgen 0,0,4096,10,0.024710,0.140863,0.075949,0.054103,0.032225,0.006828,0.000565,0.000591,0.000130,0.000122,0.000130,0.001184,0.004810,0.008308,0.016195,0.006829,0.003189,0.000995,0.000290
giOoh57 ftgen 0,0,4096,10,0.039150,0.500037,0.055380,0.060924,0.008930,0.000650,0.000410,0.000244,0.001590,0.009065,0.009812,0.013291,0.004577,0.001153,0.000235,0.000102
giOoh60 ftgen 0,0,4096,10,0.086407,0.267040,0.196788,0.021563,0.001095,0.000450,0.000254,0.000578,0.012590,0.058595,0.005142,0.009927,0.005483,0.000502,0.000175,0.000149,0.000775
giOoh63 ftgen 0,0,4096,10,0.153433,0.155941,0.058873,0.002749,0.000677,0.000168,0.000395,0.004570,0.084026,0.008181,0.014008,0.003788,0.000261,0.000109,0.000887
giOoh66 ftgen 0,0,4096,10,0.332841,0.193621,0.018082,0.001777,0.000274,0.000623,0.014262,0.036353,0.007910,0.005829,0.000322,0.000104,0.000472,0.000204
giOoh69 ftgen 0,0,4096,10,1.000000,0.136629,0.001978,0.000708,0.000666,0.025888,0.015536,0.029450,0.000535,0.000119,0.000710,0.000111
giOoh72 ftgen 0,0,4096,10,0.528638,0.035156,0.000814,0.000113,0.012612,0.005146,0.027163,0.002875,0.000576,0.000345
giOoh75 ftgen 0,0,4096,10,0.295700,0.004617,0.000416,0.004518,0.008174,0.059391,0.000819,0.003130
giOoh78 ftgen 0,0,4096,10,0.324009,0.003159,0.000539,0.036354,0.052795,0.000895,0.000729
giOoh81 ftgen 0,0,4096,10,0.212624,0.001375,0.025936,0.013708,0.001164,0.000397
giOoh84 ftgen 0,0,4096,10,0.070310,0.000226,0.010293,0.005749,0.000690
giwavemapOoh	ftgen	0,0,128,-27, 0,0, 24,0,  27,1,  30,2,  33,3,  36,4,  39,5, 42,6, 45,7, 48,8, 51,9, 54,10, 57,11, 60,12, 63,13, 66,14, 69,15, 72,16, 75,17, 78,18, 81,19, 84,20, 127,20
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
gitabs4morfOoh	ftgen	0,0,32,-2,giOoh24,giOoh27,giOoh30,giOoh33,giOoh36,giOoh39,giOoh42,giOoh45,giOoh48,giOoh51,giOoh54,giOoh57,giOoh60,giOoh63,giOoh66,giOoh69,giOoh72,giOoh75,giOoh78,giOoh81,giOoh84,giOoh84,giOoh84,giOoh84,giOoh84,giOoh84,giOoh84,giOoh84,giOoh84,giOoh84,giOoh84,giOoh84
    

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; Eee
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/*
giEee24 ftgen 0,0,4096,10, 0.010612,0.014495,0.019809,0.028477,0.041398,0.063942,0.114518,0.124942,0.078855,0.046228,0.033959,0.023394,0.018143,0.013375,0.010099,0.007577,0.005431,0.003901,0.002611,0.001632,0.000932,0.000386,0.000171,0.000289,0.000422,0.000452,0.000449,0.000398,0.000315,0.000237,0.000144,0.000104,0.000105,0.000153,0.000215,0.000290,0.000380,0.000487,0.000633,0.000816,0.001099,0.001507,0.002203,0.003126,0.003165,0.002277,0.001567,0.001153,0.000855,0.000658,0.000500,0.000378,0.000277,0.000186,0.000102,0.000154,0.000300,0.000490,0.000733,0.001033,0.001413,0.001885,0.002475,0.003256,0.004250,0.005714,0.007781,0.011083,0.015021,0.015148,0.011378,0.008165,0.006212,0.004895,0.004095,0.003568,0.003306,0.003268,0.003450,0.003938,0.004750,0.006020,0.007017,0.006500,0.005013,0.003837,0.003082,0.002641,0.002479,0.002562
giEee27 ftgen 0,0,4096,10, 0.013361,0.019632,0.028170,0.046001,0.073446,0.142620,0.135320,0.067419,0.045253,0.028671,0.021074,0.014727,0.010611,0.007252,0.004920,0.003071,0.001747,0.000807,0.000249,0.000303,0.000500,0.000540,0.000520,0.000422,0.000309,0.000180,0.000119,0.000127,0.000103,0.000168,0.000256,0.000366,0.000497,0.000673,0.000915,0.001288,0.001877,0.003013,0.003942,0.003063,0.001933,0.001339,0.000949,0.000692,0.000498,0.000349,0.000219,0.000102,0.000105,0.000283,0.000531,0.000867,0.001300,0.001875,0.002609,0.003613,0.004968,0.007064,0.010239,0.015759,0.018744,0.014260,0.009604,0.006959,0.005391,0.004464,0.003989,0.003908,0.004207,0.005028,0.006490,0.008241,0.007854,0.005766,0.004257,0.003368,0.002997,0.003039,0.003534,0.003719,0.002952,0.002107,0.001565,0.001195,0.000929,0.000719,0.000551,0.000410,0.000295,0.000202,0.000133
giEee30 ftgen 0,0,4096,10, 0.016942,0.026728,0.044993,0.073582,0.166083,0.150187,0.067471,0.042023,0.027730,0.018157,0.012270,0.007756,0.004771,0.002544,0.001124,0.000288,0.000418,0.000628,0.000639,0.000532,0.000370,0.000189,0.000133,0.000151,0.000118,0.000167,0.000288,0.000442,0.000634,0.000915,0.001325,0.002073,0.003575,0.004636,0.003020,0.001869,0.001215,0.000836,0.000565,0.000361,0.000186,0.000308,0.000658,0.001154,0.001829,0.002760,0.004060,0.005937,0.009069,0.014428,0.021876,0.018429,0.011479,0.007850,0.005939,0.004916,0.004612,0.004928,0.006092,0.008369,0.009952,0.007626,0.005224,0.003945,0.003510,0.003799,0.004447,0.003710,0.002491,0.001752,0.001285,0.000950,0.000696,0.000493,0.000332,0.000209,0.000125
giEee33 ftgen 0,0,4096,10, 0.021903,0.037076,0.070524,0.170727,0.184856,0.075853,0.042006,0.026533,0.016384,0.009694,0.005423,0.002512,0.000745,0.000367,0.000734,0.000760,0.000589,0.000358,0.000113,0.000157,0.000177,0.000123,0.000164,0.000331,0.000549,0.000839,0.001298,0.002144,0.003934,0.005481,0.003133,0.001834,0.001150,0.000725,0.000430,0.000185,0.000178,0.000585,0.001216,0.002131,0.003468,0.005492,0.008727,0.014780,0.025548,0.021159,0.012320,0.008120,0.006189,0.005514,0.005907,0.007722,0.011241,0.010580,0.006710,0.004738,0.004184,0.004875,0.005074,0.003298,0.002150,0.001485,0.001035,0.000705,0.000453,0.000265,0.000143
giEee36 ftgen 0,0,4096,10, 0.028999,0.056971,0.127925,0.249973,0.092491,0.046808,0.026763,0.015161,0.007806,0.003265,0.000772,0.000577,0.000905,0.000797,0.000474,0.000128,0.000118,0.000208,0.000175,0.000190,0.000430,0.000762,0.001269,0.002203,0.004418,0.006347,0.003143,0.001714,0.001003,0.000555,0.000205,0.000308,0.000984,0.002075,0.003788,0.006543,0.011486,0.022285,0.030464,0.016426,0.009849,0.007181,0.006579,0.007931,0.012129,0.013098,0.007735,0.005325,0.005167,0.006343,0.004251,0.002537,0.001641,0.001065,0.000654,0.000360,0.000176,0.000109,0.000108
giEee39 ftgen 0,0,4096,10, 0.039208,0.091871,0.284850,0.134665,0.057264,0.029417,0.014487,0.006136,0.001614,0.000605,0.001080,0.000843,0.000360,0.000237,0.000205,0.000101,0.000336,0.000730,0.001345,0.002573,0.006021,0.006121,0.002677,0.001384,0.000697,0.000205,0.000565,0.001734,0.003749,0.007227,0.014133,0.031533,0.028537,0.013927,0.008934,0.007821,0.010066,0.016499,0.011547,0.006746,0.006088,0.007451,0.004223,0.002395,0.001442,0.000822,0.000405,0.000174,0.000127,0.000124
giEee42 ftgen 0,0,4096,10, 0.053470,0.147208,0.300415,0.084059,0.036324,0.015517,0.005091,0.000576,0.001256,0.001064,0.000377,0.000160,0.000303,0.000150,0.000341,0.000891,0.001840,0.004161,0.009292,0.003746,0.001676,0.000724,0.000174,0.001325,0.003681,0.008171,0.018259,0.044043,0.023100,0.011960,0.009296,0.012291,0.020077,0.010540,0.007087,0.008984,0.005033,0.002599,0.001411,0.000675,0.000255,0.000150,0.000143
giEee45 ftgen 0,0,4096,10, 0.074148,0.341465,0.151691,0.053062,0.019387,0.005023,0.000735,0.001519,0.000715,0.000141,0.000355,0.000141,0.000664,0.001681,0.004296,0.010976,0.003672,0.001452,0.000370,0.001174,0.004275,0.011021,0.029674,0.042441,0.016298,0.011074,0.015522,0.021253,0.009522,0.009803,0.006632,0.002990,0.001422,0.000537,0.000189,0.000178,0.000110
giEee48 ftgen 0,0,4096,10, 0.113952,0.499961,0.093618,0.030324,0.006532,0.001153,0.001593,0.000254,0.000416,0.000182,0.000869,0.002549,0.008846,0.006282,0.002003,0.000401,0.001977,0.007592,0.023020,0.061020,0.019732,0.013187,0.024324,0.015505,0.010364,0.008518,0.003290,0.001312,0.000353,0.000214,0.000143
giEee51 ftgen 0,0,4096,10, 0.183849,0.269450,0.058864,0.012277,0.001210,0.001686,0.000115,0.000411,0.000673,0.002694,0.012061,0.005358,0.001397,0.001131,0.007512,0.028323,0.057149,0.017903,0.020182,0.023136,0.012207,0.008465,0.002892,0.000813,0.000255,0.000186
giEee54 ftgen 0,0,4096,10, 0.294425,0.168105,0.031031,0.001152,0.002129,0.000319,0.000295,0.001773,0.008324,0.007496,0.001451,0.002648,0.016348,0.088119,0.023921,0.024596,0.021078,0.017984,0.005195,0.001344,0.000303,0.000185,0.000105
giEee57 ftgen 0,0,4096,10, 0.682961,0.106120,0.010046,0.003039,0.000281,0.000282,0.003363,0.021952,0.002902,0.002350,0.022051,0.084871,0.022153,0.042507,0.019617,0.005980,0.001075,0.000355,0.000117
giEee60 ftgen 0,0,4096,10, 0.999999,0.060648,0.002312,0.000510,0.000354,0.005083,0.012579,0.000821,0.015185,0.122052,0.026381,0.031005,0.017044,0.002622,0.000436,0.000138
giEee63 ftgen 0,0,4096,10, 0.538975,0.024555,0.003372,0.000823,0.005390,0.010718,0.002266,0.056680,0.035812,0.046282,0.016933,0.001625,0.000371,0.000151
giEee66 ftgen 0,0,4096,10, 0.336196,0.002303,0.000636,0.003546,0.014990,0.005298,0.176248,0.049197,0.035968,0.002688,0.000369,0.000111
giEee69 ftgen 0,0,4096,10, 0.212220,0.006076,0.000565,0.043897,0.004701,0.169692,0.084989,0.011954,0.000713,0.000170
giEee72 ftgen 0,0,4096,10, 0.121291,0.001021,0.010166,0.001642,0.244060,0.061995,0.005244,0.000275,0.000113
giEee75 ftgen 0,0,4096,10, 0.049112,0.001647,0.021440,0.113388,0.092568,0.003249,0.000304,0.000100
giEee78 ftgen 0,0,4096,10, 0.004609,0.007093,0.010596,0.098393,0.005375,0.000222
giEee81 ftgen 0,0,4096,10, 0.012152,0.087798,0.339376,0.023913,0.000340
giEee84 ftgen 0,0,4096,10, 0.002039,0.003283,0.123990,0.000551,0.000112
giwavemapEee	ftgen	0,0,128,-27, 0,0, 24,0,  27,1,  30,2,  33,3,  36,4,  39,5, 42,6, 45,7, 48,8, 51,9, 54,10, 57,11, 60,12, 63,13, 66,14, 69,15, 72,16, 75,17, 78,18, 81,19, 84,20, 127,20
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
gitabs4morfEee	ftgen	0,0,32,-2,giEee24,giEee27,giEee30,giEee33,giEee36,giEee39,giEee42,giEee45,giEee48,giEee51,giEee54,giEee57,giEee60,giEee63,giEee66,giEee69,giEee72,giEee75,giEee78,giEee81,giEee84,giEee84,giEee84,giEee84,giEee84,giEee84,giEee84,giEee84,giEee84,giEee84,giEee84,giEee84
*/

; mixed voice types
giEee24 ftgen 0,0,4096,10,0.010612,0.014495,0.019809,0.028477,0.041398,0.063942,0.114518,0.124942,0.078855,0.046228,0.033959,0.023394,0.018143,0.013375,0.010099,0.007577,0.005431,0.003901,0.002611,0.001632,0.000932,0.000386,0.000171,0.000289,0.000422,0.000452,0.000449,0.000398,0.000315,0.000237,0.000144,0.000104,0.000105,0.000153,0.000215,0.000290,0.000380,0.000487,0.000633,0.000816,0.001099,0.001507,0.002203,0.003126,0.003165,0.002277,0.001567,0.001153,0.000855,0.000658,0.000500,0.000378,0.000277,0.000186,0.000102,0.000154,0.000300,0.000490,0.000733,0.001033,0.001413,0.001885,0.002475,0.003256,0.004250,0.005714,0.007781,0.011083,0.015021,0.015148,0.011378,0.008165,0.006212,0.004895,0.004095,0.003568,0.003306,0.003268,0.003450,0.003938,0.004750,0.006020,0.007017,0.006500,0.005013,0.003837,0.003082,0.002641,0.002479,0.002562
giEee27 ftgen 0,0,4096,10,0.013361,0.019632,0.028170,0.046001,0.073446,0.142620,0.135320,0.067419,0.045253,0.028671,0.021074,0.014727,0.010611,0.007252,0.004920,0.003071,0.001747,0.000807,0.000249,0.000303,0.000500,0.000540,0.000520,0.000422,0.000309,0.000180,0.000119,0.000127,0.000103,0.000168,0.000256,0.000366,0.000497,0.000673,0.000915,0.001288,0.001877,0.003013,0.003942,0.003063,0.001933,0.001339,0.000949,0.000692,0.000498,0.000349,0.000219,0.000102,0.000105,0.000283,0.000531,0.000867,0.001300,0.001875,0.002609,0.003613,0.004968,0.007064,0.010239,0.015759,0.018744,0.014260,0.009604,0.006959,0.005391,0.004464,0.003989,0.003908,0.004207,0.005028,0.006490,0.008241,0.007854,0.005766,0.004257,0.003368,0.002997,0.003039,0.003534,0.003719,0.002952,0.002107,0.001565,0.001195,0.000929,0.000719,0.000551,0.000410,0.000295,0.000202,0.000133
giEee30 ftgen 0,0,4096,10,0.016942,0.026728,0.044993,0.073582,0.166083,0.150187,0.067471,0.042023,0.027730,0.018157,0.012270,0.007756,0.004771,0.002544,0.001124,0.000288,0.000418,0.000628,0.000639,0.000532,0.000370,0.000189,0.000133,0.000151,0.000118,0.000167,0.000288,0.000442,0.000634,0.000915,0.001325,0.002073,0.003575,0.004636,0.003020,0.001869,0.001215,0.000836,0.000565,0.000361,0.000186,0.000308,0.000658,0.001154,0.001829,0.002760,0.004060,0.005937,0.009069,0.014428,0.021876,0.018429,0.011479,0.007850,0.005939,0.004916,0.004612,0.004928,0.006092,0.008369,0.009952,0.007626,0.005224,0.003945,0.003510,0.003799,0.004447,0.003710,0.002491,0.001752,0.001285,0.000950,0.000696,0.000493,0.000332,0.000209,0.000125
giEee33 ftgen 0,0,4096,10,0.021903,0.037076,0.070524,0.170727,0.184856,0.075853,0.042006,0.026533,0.016384,0.009694,0.005423,0.002512,0.000745,0.000367,0.000734,0.000760,0.000589,0.000358,0.000113,0.000157,0.000177,0.000123,0.000164,0.000331,0.000549,0.000839,0.001298,0.002144,0.003934,0.005481,0.003133,0.001834,0.001150,0.000725,0.000430,0.000185,0.000178,0.000585,0.001216,0.002131,0.003468,0.005492,0.008727,0.014780,0.025548,0.021159,0.012320,0.008120,0.006189,0.005514,0.005907,0.007722,0.011241,0.010580,0.006710,0.004738,0.004184,0.004875,0.005074,0.003298,0.002150,0.001485,0.001035,0.000705,0.000453,0.000265,0.000143
giEee36 ftgen 0,0,4096,10,0.018039,0.029693,0.059894,0.185737,0.154314,0.055778,0.027787,0.014854,0.007935,0.003897,0.001432,0.000187,0.000561,0.000590,0.000401,0.000185,0.000117,0.000134,0.000109,0.000405,0.000942,0.001848,0.003332,0.005831,0.010609,0.022023,0.025121,0.011959,0.006463,0.003691,0.002042,0.001000,0.000346,0.000540,0.001193,0.002221,0.003859,0.006735,0.012934,0.018831,0.010505,0.006536,0.005174,0.005305,0.007021,0.011338,0.013114,0.007641,0.004738,0.003619,0.003554,0.002391,0.001498,0.001024,0.000703,0.000458,0.000268,0.000136
giEee39 ftgen 0,0,4096,10,0.023171,0.040165,0.103046,0.249899,0.069009,0.030296,0.014964,0.006837,0.002317,0.000262,0.000693,0.000670,0.000375,0.000134,0.000157,0.000234,0.000809,0.001919,0.003902,0.007563,0.015739,0.033909,0.016874,0.008020,0.004127,0.001993,0.000762,0.000560,0.001472,0.003025,0.005784,0.011760,0.022871,0.012484,0.007312,0.006012,0.007155,0.011847,0.015854,0.008455,0.005033,0.004257,0.003348,0.001866,0.001182,0.000751,0.000433,0.000208
giEee42 ftgen 0,0,4096,10,0.030585,0.075466,0.326397,0.089842,0.037631,0.016293,0.006004,0.001189,0.000623,0.000819,0.000421,0.000187,0.000122,0.000220,0.000997,0.002690,0.006079,0.013783,0.037543,0.020537,0.008608,0.003873,0.001483,0.000243,0.000604,0.001913,0.004382,0.009617,0.024507,0.016361,0.008552,0.007239,0.010299,0.019396,0.011363,0.006002,0.005105,0.003117,0.001699,0.001004,0.000533,0.000219,0.000103,0.000108
giEee45 ftgen 0,0,4096,10,0.042426,0.110844,0.240398,0.052093,0.020251,0.006042,0.000491,0.000993,0.000619,0.000230,0.000590,0.002336,0.006356,0.016818,0.048133,0.016906,0.006376,0.002233,0.000321,0.000910,0.003109,0.007901,0.022561,0.020975,0.009763,0.009076,0.016934,0.017670,0.007601,0.006066,0.003146,0.001615,0.000823,0.000318,0.000124,0.000127
giEee48 ftgen 0,0,4096,10,0.067500,0.499957,0.084236,0.026845,0.006246,0.000524,0.001260,0.000307,0.000263,0.000154,0.000423,0.001657,0.005126,0.020030,0.007311,0.002320,0.000560,0.000313,0.001681,0.005251,0.018793,0.008143,0.003428,0.003199,0.002838,0.002897,0.002582,0.000962,0.000359
giEee51 ftgen 0,0,4096,10,0.114392,0.346891,0.051686,0.011497,0.000495,0.001393,0.000319,0.000278,0.001711,0.006671,0.024100,0.005070,0.001207,0.000395,0.002611,0.010148,0.016063,0.004678,0.003757,0.002818,0.004738,0.001749,0.000577,0.000121
giEee54 ftgen 0,0,4096,10,0.184699,0.170704,0.027773,0.001277,0.001722,0.000135,0.000260,0.000954,0.005364,0.030213,0.005416,0.000846,0.000161,0.001816,0.009486,0.018223,0.004741,0.005826,0.003571,0.002699,0.000709,0.000111
giEee57 ftgen 0,0,4096,10,0.375525,0.096426,0.009561,0.002227,0.000108,0.000215,0.002089,0.015287,0.010294,0.001315,0.000212,0.003544,0.026847,0.007999,0.006168,0.004412,0.002362,0.000444,0.000109
giEee60 ftgen 0,0,4096,10,0.227192,0.099004,0.005244,0.001344,0.001073,0.017641,0.017350,0.001409,0.000721,0.009172,0.004060,0.000250,0.000806,0.006918,0.001617,0.000117,0.000126,0.000462
giEee63 ftgen 0,0,4096,10,0.603091,0.048190,0.002514,0.000479,0.018496,0.015302,0.000391,0.003639,0.009291,0.000469,0.001181,0.008347,0.000679,0.000111,0.000537
giEee66 ftgen 0,0,4096,10,1.000000,0.014894,0.000748,0.011456,0.020880,0.000335,0.010283,0.002934,0.000513,0.010980,0.000625,0.000358,0.000173
giEee69 ftgen 0,0,4096,10,0.383427,0.002256,0.002169,0.058726,0.000416,0.019191,0.001023,0.003871,0.002038,0.000111,0.000515,0.000103
giEee72 ftgen 0,0,4096,10,0.143330,0.001607,0.002011,0.288307,0.002276,0.014994,0.010998,0.007299,0.001333,0.000996
giEee75 ftgen 0,0,4096,10,0.061863,0.001803,0.041574,0.018718,0.022519,0.023699,0.001207,0.009907,0.000135
giEee78 ftgen 0,0,4096,10,0.008237,0.002981,0.275939,0.109772,0.021334,0.000832,0.002147
giEee81 ftgen 0,0,4096,10,0.012164,0.019280,0.007395,0.003926,0.001069,0.001101
giEee84 ftgen 0,0,4096,10,0.003212,0.576616,0.029989,0.014597,0.001991
giwavemapEee	ftgen	0,0,128,-27, 0,0, 24,0,  27,1,  30,2,  33,3,  36,4,  39,5, 42,6, 45,7, 48,8, 51,9, 54,10, 57,11, 60,12, 63,13, 66,14, 69,15, 72,16, 75,17, 78,18, 81,19, 84,20, 127,20
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
gitabs4morfEee	ftgen	0,0,32,-2,giEee24,giEee27,giEee30,giEee33,giEee36,giEee39,giEee42,giEee45,giEee48,giEee51,giEee54,giEee57,giEee60,giEee63,giEee66,giEee69,giEee72,giEee75,giEee78,giEee81,giEee84,giEee84,giEee84,giEee84,giEee84,giEee84,giEee84,giEee84,giEee84,giEee84,giEee84,giEee84




;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; HORN P
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
giHornP38 ftgen 0,0,4096,10,0.045737,0.148188,0.335691,0.493464,0.710665,0.765723,0.694286,0.628629,0.521398,0.428206,0.365416,0.306040,0.298023,0.254152,0.201721,0.154086,0.161771,0.146790,0.124044,0.110268,0.091099,0.076808,0.057743,0.042724,0.042724
giHornP50 ftgen 0,0,4096,10,0.280951,0.717837,0.823404,0.588908,0.394696,0.286430,0.176355,0.118365,0.064524,0.033209,0.016001,0.004104,0.004396,0.002069,0.002350,0.001903,0.001098,0.001262,0.001129,0.000906,0.000543,0.000575,0.000427,0.000355,0.000355
giHornP62 ftgen 0,0,4096,10,0.495327,0.909763,0.613398,0.368832,0.202553,0.124640,0.046586,0.011810,0.012510,0.011370,0.006659,0.004564,0.002331,0.001790,0.000667,0.000538,0.000352,0.000302,0.000558,0.000794,0.000797,0.000331,0.000342,0.000389,0.000389
giHornP74 ftgen 0,0,4096,10,0.796534,0.226262,0.060526,0.013273,0.003161,0.001015,0.001071,0.000595,0.000191,0.000337,0.000199,0.000173,0.000183,0.000187,0.000105,0.000113,0.000156,0.000119,0.000098,0.000067,0.000066,0.000064,0.000054,0.000043,0.000043
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
giwavemapHornP	ftgen	0,0,128,-27, 0,0, 38,0,  50,1,  62,2,  74,3,  127,3
gitabs4morfHornP	ftgen	0,0,4,-2,giHornP38,giHornP50,giHornP62,giHornP74

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; HORN F
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
giHornF38 ftgen 0,0,4096,10,0.150333,0.205756,0.869097,0.723941,0.707935,0.116871,0.238125,0.330962,0.443031,0.325212,0.131256,0.267361,0.273576,0.146568,0.209758,0.158564,0.179271,0.084668,0.112177,0.118845,0.124993,0.096945,0.128906,0.125534,0.125534
giHornF50 ftgen 0,0,4096,10,0.348154,0.319965,0.418661,0.396206,0.046368,0.198167,0.035091,0.107400,0.035358,0.066696,0.053722,0.045581,0.066494,0.109943,0.059354,0.050001,0.123615,0.052990,0.032207,0.039448,0.051629,0.014079,0.014571,0.017523,0.017523
giHornF62 ftgen 0,0,4096,10,0.449507,0.544173,0.108516,0.300530,0.163030,0.351952,0.171674,0.202505,0.098101,0.066418,0.044492,0.071036,0.074224,0.064911,0.027430,0.041991,0.022245,0.017689,0.013130,0.020853,0.016891,0.038363,0.017524,0.016841,0.016841
giHornF74 ftgen 0,0,4096,10,0.923831,0.259141,0.262670,0.175552,0.089346,0.073056,0.055113,0.031968,0.027964,0.033656,0.035303,0.010920,0.019420,0.013447,0.012944,0.006111,0.007041,0.003864,0.005702,0.004615,0.003076,0.001589,0.002756,0.001234,0.001234
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
giwavemapHornF	ftgen	0,0,128,-27, 0,0, 38,0,  50,1,  62,2,  74,3,  127,3
gitabs4morfHornF	ftgen	0,0,4,-2,giHornF38,giHornF50,giHornF62,giHornF74

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; BASS TROMBONE (HARMON MUTE)
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
giharmon33 ftgen 0,0,4096,10,0.875348,0.155770,0.111939,0.181031,0.355046,0.044216,0.039025,0.036422,0.074587,0.050492,0.042464,0.079868,0.121542,0.243299,0.253642,0.263571,0.422410,0.624259,0.742333,0.514304,0.760971,0.444426,0.456583,0.195508,0.070084,0.032239,0.029621,0.058523,0.044442,0.057324,0.077997,0.047218,0.046215,0.023786,0.017859,0.017652,0.012055,0.009595,0.009020,0.006000,0.004077,0.004950,0.004543,0.003196,0.002659,0.003533,0.004156,0.003745,0.002471,0.002264,0.003050,0.002614,0.001944,0.001709,0.001717,0.001934,0.002458,0.003618,0.004915,0.004334,0.003733,0.003804,0.003489,0.002755,0.002427,0.002273,0.002577,0.002702,0.002483,0.002059,0.002016,0.002214,0.002215,0.001947,0.001952,0.002236,0.002357,0.002417,0.002406,0.002309,0.002176,0.002227,0.002527,0.002649,0.002448,0.002165,0.002175,0.002322,0.002371,0.002202,0.001845,0.001620,0.001626,0.001927,0.002537,0.003091,0.003220,0.003231,0.003453,0.003751
giharmon34 ftgen 0,0,4096,10,0.443604,0.040301,0.041393,0.115682,0.622143,0.055550,0.073493,0.090539,0.109410,0.039052,0.138611,0.161174,0.290931,0.212197,0.410393,0.749789,0.917784,1.375368,0.934044,0.781551,0.356416,0.290222,0.181279,0.061983,0.081959,0.039112,0.044805,0.058922,0.022274,0.022731,0.038966,0.025063,0.031263,0.030753,0.032383,0.045020,0.032652,0.027144,0.033411,0.020397,0.015121,0.017071,0.014804,0.013636,0.012149,0.012930,0.014231,0.012821,0.011342,0.009001,0.008587,0.006187,0.005928,0.008836,0.012118,0.012242,0.009968,0.009445,0.006852,0.004519,0.002870,0.001975,0.001680,0.001593,0.001930,0.002744,0.003798,0.003938,0.003311,0.003174,0.003465,0.004740,0.006267,0.006620,0.006071,0.005274,0.005318,0.005795,0.006440,0.007152,0.007792,0.008192,0.007304,0.005765,0.004397,0.003369,0.002855,0.003059,0.003731,0.004377,0.004923,0.005763,0.006567,0.006834,0.006780,0.006575,0.005922,0.004714,0.003481,0.002696
giharmon36 ftgen 0,0,4096,10,0.934870,0.094639,0.263729,0.103300,0.556951,0.047384,0.167404,0.119804,0.122737,0.048833,0.154640,0.111318,0.302046,0.230750,0.517436,0.259307,0.354474,0.152230,0.109031,0.091431,0.071065,0.027335,0.037383,0.048534,0.033460,0.066084,0.041563,0.049933,0.029361,0.032804,0.017292,0.018054,0.023006,0.019576,0.018461,0.008645,0.007040,0.005924,0.005415,0.003713,0.003447,0.002816,0.003594,0.003583,0.002658,0.001561,0.001446,0.002347,0.003707,0.005343,0.007152,0.006970,0.005630,0.004404,0.002749,0.002098,0.002393,0.001708,0.001255,0.001150,0.001263,0.001445,0.001397,0.001331,0.001510,0.001783,0.001849,0.001576,0.001508,0.001400,0.001153,0.000940,0.000797,0.000734,0.000677,0.000581,0.000531,0.000644,0.000829,0.000891,0.000846,0.000864,0.000921,0.000980,0.000945,0.000994,0.001078,0.001054,0.000936,0.000863,0.000855,0.000855,0.000757,0.000683,0.000687,0.000667,0.000654,0.000639,0.000610,0.000586
giharmon38 ftgen 0,0,4096,10,0.275894,0.119750,0.302577,0.931731,0.080509,0.210351,0.194035,0.223110,0.137304,0.197845,0.327194,0.349699,0.653623,0.881895,0.939789,0.691399,0.569520,0.195895,0.129254,0.040633,0.094914,0.073078,0.145254,0.105583,0.162773,0.080818,0.095817,0.054832,0.079542,0.059357,0.055196,0.036903,0.021942,0.019084,0.020925,0.014726,0.013288,0.012653,0.010311,0.008738,0.008159,0.006852,0.004697,0.006565,0.011392,0.016788,0.018297,0.017879,0.015021,0.009463,0.005643,0.005105,0.004046,0.004010,0.005012,0.004282,0.003406,0.003104,0.003782,0.005116,0.003975,0.002459,0.001720,0.001650,0.002105,0.002882,0.003694,0.004103,0.003070,0.001947,0.001446,0.001258,0.001170,0.001349,0.001876,0.002582,0.002853,0.002391,0.002009,0.001887,0.001808,0.001514,0.001333,0.001265,0.001131,0.001082,0.001169,0.001278,0.001225,0.001070,0.000913,0.000800,0.000767,0.000799,0.000824,0.000902,0.001003,0.001061,0.001115,0.001185
giharmon39 ftgen 0,0,4096,10,0.215899,0.043569,0.155862,0.915877,0.029041,0.085938,0.096861,0.027476,0.042161,0.045780,0.077178,0.073681,0.292899,0.268475,0.052870,0.047343,0.020451,0.005226,0.004051,0.013123,0.014796,0.018766,0.016900,0.010549,0.011430,0.006502,0.006649,0.009883,0.007521,0.005298,0.002202,0.001505,0.001267,0.001744,0.001762,0.001880,0.001510,0.001300,0.001551,0.001113,0.001344,0.002682,0.004692,0.003899,0.003280,0.002211,0.001351,0.000889,0.000702,0.000681,0.000890,0.000985,0.000873,0.001082,0.000955,0.001016,0.001084,0.000930,0.000860,0.000656,0.000607,0.000724,0.000840,0.000859,0.000735,0.000640,0.000553,0.000553,0.000664,0.000694,0.000736,0.000846,0.000794,0.000763,0.000690,0.000686,0.000654,0.000659,0.000732,0.000714,0.000736,0.000748,0.000741,0.000620,0.000514,0.000484,0.000540,0.000707,0.000958,0.001141,0.001115,0.001012,0.000967,0.000906,0.000789,0.000653,0.000550,0.000512,0.000523,0.000521
giharmon40 ftgen 0,0,4096,10,0.369055,0.131998,0.314332,0.267587,0.083279,0.197505,0.246057,0.188865,0.247543,0.447904,0.311578,0.951654,0.440089,0.497270,0.248691,0.084689,0.024288,0.043815,0.092522,0.149863,0.063883,0.137365,0.089276,0.106339,0.067676,0.038080,0.044355,0.030311,0.016710,0.009404,0.009432,0.010647,0.009912,0.005595,0.004133,0.004025,0.003963,0.005248,0.007884,0.011332,0.009707,0.007295,0.004440,0.003429,0.004551,0.003060,0.002116,0.001763,0.001514,0.002027,0.002310,0.003069,0.002321,0.001811,0.001688,0.002021,0.001926,0.001770,0.001680,0.001534,0.001470,0.001491,0.001508,0.001391,0.001324,0.001260,0.001327,0.001406,0.001495,0.001338,0.001292,0.001395,0.001369,0.001408,0.001332,0.001258,0.001360,0.001502,0.001505,0.001392,0.001389,0.001469,0.001354,0.001230,0.001168,0.001229,0.001270,0.001296,0.001299,0.001384,0.001495,0.001524,0.001735,0.002015,0.002003,0.001730,0.001490,0.001313,0.001201,0.001201
giharmon41 ftgen 0,0,4096,10,0.338560,0.097872,0.404630,0.072213,0.101149,0.122271,0.088489,0.206809,0.295859,0.455726,0.802773,0.963091,0.671085,0.510166,0.125095,0.028121,0.044968,0.022808,0.033809,0.020551,0.006760,0.009093,0.007270,0.015331,0.017393,0.011093,0.005257,0.003771,0.002662,0.001862,0.002670,0.003093,0.003083,0.002636,0.001647,0.002030,0.003615,0.005828,0.005317,0.003389,0.002213,0.002189,0.002077,0.001392,0.000953,0.000899,0.000930,0.001189,0.001829,0.001616,0.001463,0.001355,0.001413,0.001368,0.001472,0.001201,0.000951,0.000804,0.000750,0.000839,0.001162,0.001540,0.001515,0.001241,0.001296,0.001396,0.001129,0.000785,0.000579,0.000562,0.000702,0.000938,0.001154,0.001155,0.001088,0.001192,0.001489,0.001693,0.001713,0.001549,0.001472,0.001606,0.001560,0.001278,0.001057,0.001106,0.001217,0.001127,0.001002,0.000959,0.000869,0.000789,0.000751,0.000712,0.000744,0.000874,0.001032,0.001112,0.001055,0.001033
giharmon43 ftgen 0,0,4096,10,0.135645,0.120943,0.979143,0.023489,0.114683,0.114072,0.130730,0.180948,0.281652,0.683720,0.964428,0.306787,0.213682,0.058648,0.025209,0.025596,0.047105,0.038846,0.017756,0.006258,0.005601,0.010206,0.010689,0.004381,0.002744,0.002982,0.002040,0.002284,0.001570,0.001528,0.002115,0.001649,0.002514,0.003304,0.005338,0.002902,0.001301,0.000713,0.000665,0.000652,0.000695,0.000698,0.000700,0.001056,0.000728,0.000485,0.000534,0.000633,0.000450,0.000429,0.000625,0.000827,0.001012,0.001160,0.001256,0.001213,0.001133,0.001362,0.001533,0.001305,0.001367,0.001616,0.001627,0.001417,0.001458,0.001637,0.001588,0.001552,0.001476,0.001327,0.001247,0.001076,0.000857,0.000699,0.000670,0.000726,0.000750,0.000854,0.000976,0.000936,0.000830,0.000768,0.000683,0.000599,0.000530,0.000491,0.000451,0.000398,0.000378,0.000368,0.000380,0.000455,0.000533,0.000535,0.000501,0.000464,0.000470,0.000496,0.000480,0.000442
giharmon45 ftgen 0,0,4096,10,0.244591,0.267325,0.126930,0.136762,0.271635,0.312002,0.223921,0.477139,0.969260,0.621811,0.276235,0.133028,0.017955,0.053396,0.048589,0.033493,0.018488,0.024467,0.024072,0.021974,0.013672,0.005364,0.005982,0.003607,0.001893,0.001866,0.001242,0.001433,0.001334,0.002488,0.002930,0.001518,0.001627,0.002275,0.001495,0.001193,0.000972,0.000737,0.000811,0.001235,0.001057,0.000838,0.001036,0.001047,0.001114,0.001012,0.000995,0.001090,0.001298,0.001286,0.001257,0.001216,0.001222,0.001045,0.001114,0.001441,0.001842,0.001582,0.001233,0.001180,0.001395,0.001374,0.001319,0.001317,0.001143,0.001024,0.001053,0.001334,0.001740,0.001862,0.001603,0.001274,0.001051,0.001022,0.000939,0.000839,0.000784,0.000794,0.000787,0.000752,0.000772,0.000742,0.000760,0.000882,0.001044,0.001103,0.001124,0.001129,0.001259,0.001523,0.001689,0.001631,0.001499,0.001332,0.001219,0.001138,0.001037,0.000952,0.000828,0.000746
giharmon46 ftgen 0,0,4096,10,0.315815,0.844525,0.164412,0.451756,0.585703,0.518759,0.681565,0.411064,0.952335,0.494514,0.366224,0.049949,0.050057,0.056689,0.053659,0.035965,0.043860,0.032015,0.019827,0.005201,0.006601,0.005746,0.007203,0.005429,0.003518,0.004758,0.003756,0.007828,0.015721,0.006418,0.003773,0.007304,0.003491,0.004073,0.002821,0.001771,0.002371,0.001798,0.002341,0.002659,0.003029,0.001998,0.001673,0.001293,0.000985,0.001051,0.001602,0.002316,0.002076,0.001608,0.001182,0.001234,0.001509,0.002038,0.001745,0.001690,0.001788,0.002285,0.002474,0.002206,0.002242,0.002438,0.002520,0.003014,0.003823,0.004834,0.005921,0.005640,0.004222,0.003103,0.002822,0.003289,0.003754,0.003426,0.002719,0.002201,0.001856,0.001927,0.002461,0.002893,0.002831,0.002430,0.002388,0.002815,0.003393,0.003964,0.004124,0.003523,0.002801,0.002546,0.002599,0.002485,0.002105,0.001812,0.001794,0.001803,0.001606,0.001468,0.001509,0.001549
giharmon48 ftgen 0,0,4096,10,0.122676,0.220788,0.073432,0.127649,0.149907,0.310663,0.320023,0.888642,0.333339,0.133323,0.020148,0.021610,0.031312,0.019058,0.010338,0.008856,0.009259,0.004665,0.008040,0.006064,0.004765,0.002412,0.001080,0.002281,0.002107,0.003516,0.001246,0.000827,0.000714,0.001050,0.000701,0.000675,0.000523,0.000934,0.001128,0.001435,0.000766,0.000427,0.000568,0.000725,0.001140,0.001379,0.000939,0.000679,0.000677,0.000639,0.000687,0.000664,0.000490,0.000511,0.000557,0.000610,0.000728,0.001052,0.001004,0.000764,0.000789,0.000916,0.000909,0.001108,0.000978,0.000656,0.000487,0.000484,0.000484,0.000521,0.000592,0.000647,0.000545,0.000494,0.000588,0.000761,0.000868,0.000902,0.000912,0.000928,0.000781,0.000667,0.000669,0.000665,0.000649,0.000608,0.000541,0.000459,0.000419,0.000435,0.000481,0.000492,0.000493,0.000550,0.000622,0.000616,0.000575,0.000571,0.000566,0.000520,0.000445,0.000380,0.000345,0.000334
giharmon50 ftgen 0,0,4096,10,0.162293,0.952587,0.107970,0.148379,0.162877,0.302263,0.378248,0.526544,0.202053,0.019075,0.035439,0.025852,0.023804,0.025676,0.028522,0.013081,0.004084,0.002802,0.001949,0.002297,0.001565,0.001596,0.004229,0.004413,0.001504,0.001251,0.001021,0.001404,0.001139,0.001161,0.000682,0.000466,0.000926,0.000495,0.000656,0.000798,0.001105,0.000691,0.000515,0.000562,0.000460,0.000566,0.000474,0.000481,0.000452,0.000510,0.000694,0.000487,0.000439,0.000584,0.000605,0.000623,0.000670,0.000916,0.000792,0.000871,0.000636,0.000514,0.000540,0.000466,0.000488,0.000461,0.000448,0.000510,0.000642,0.000795,0.000743,0.000838,0.001039,0.001142,0.000966,0.000733,0.000659,0.000657,0.000595,0.000548,0.000480,0.000411,0.000427,0.000488,0.000580,0.000723,0.000773,0.000693,0.000563,0.000471,0.000412,0.000429,0.000481,0.000468,0.000408,0.000367,0.000352,0.000329,0.000288,0.000260,0.000253,0.000249,0.000251,0.000257
giharmon52 ftgen 0,0,4096,10,0.167672,0.198778,0.227405,0.284738,0.650198,0.940684,0.975647,0.268741,0.049829,0.071939,0.024052,0.019628,0.020109,0.016231,0.003867,0.003960,0.004551,0.001438,0.002545,0.005214,0.004055,0.001727,0.002282,0.002593,0.001856,0.002206,0.001924,0.000871,0.000924,0.001558,0.001059,0.001121,0.001112,0.001260,0.001747,0.001193,0.000757,0.001035,0.000862,0.000951,0.001089,0.001598,0.001563,0.001170,0.001427,0.001409,0.001130,0.001424,0.001095,0.000785,0.000800,0.001135,0.001025,0.001093,0.000966,0.001083,0.001357,0.001272,0.001103,0.001508,0.002036,0.001512,0.001143,0.001348,0.001716,0.001528,0.001151,0.000935,0.001007,0.001124,0.000930,0.000715,0.000611,0.000658,0.000759,0.000788,0.000734,0.000745,0.000773,0.000916,0.001069,0.001056,0.000942,0.000778,0.000676,0.000670,0.000675,0.000675,0.000644,0.000597,0.000550,0.000537,0.000555,0.000559,0.000525,0.000454,0.000404,0.000407,0.000442,0.000480
giharmon53 ftgen 0,0,4096,10,0.026511,0.043338,0.103983,0.172681,0.197084,0.979650,0.257547,0.017830,0.077807,0.064492,0.041376,0.053973,0.027216,0.006355,0.007006,0.001571,0.001221,0.001837,0.007442,0.004872,0.002662,0.002280,0.002188,0.001493,0.002889,0.002534,0.002305,0.002344,0.001085,0.001468,0.002010,0.002087,0.000876,0.000665,0.000602,0.000985,0.000607,0.000521,0.000609,0.000586,0.000566,0.000481,0.000501,0.000665,0.000626,0.000653,0.000579,0.000643,0.000690,0.000651,0.000432,0.000403,0.000504,0.000532,0.000598,0.000456,0.000369,0.000393,0.000370,0.000313,0.000265,0.000292,0.000299,0.000335,0.000381,0.000415,0.000449,0.000480,0.000399,0.000307,0.000245,0.000249,0.000338,0.000468,0.000545,0.000532,0.000495,0.000471,0.000476,0.000450,0.000388,0.000331,0.000297,0.000269,0.000233,0.000202,0.000188,0.000169,0.000158,0.000175,0.000208,0.000254,0.000316,0.000380,0.000433,0.000473,0.000499,0.000504,0.000472,0.000425
giharmon55 ftgen 0,0,4096,10,0.081729,0.021968,0.138971,0.239901,0.947997,0.478402,0.152261,0.093610,0.063734,0.039617,0.032944,0.006609,0.015447,0.010428,0.006706,0.002730,0.013404,0.010554,0.003963,0.002958,0.000885,0.000799,0.001120,0.001680,0.001729,0.001274,0.001362,0.000943,0.002299,0.001254,0.001112,0.000960,0.001034,0.000866,0.000912,0.000751,0.001101,0.000945,0.000888,0.000760,0.000758,0.000764,0.000797,0.000790,0.000657,0.000779,0.000816,0.000819,0.000797,0.000793,0.000830,0.000803,0.000678,0.000695,0.000912,0.000796,0.000686,0.000833,0.000798,0.000772,0.000941,0.000835,0.000815,0.000695,0.000533,0.000448,0.000405,0.000411,0.000492,0.000554,0.000576,0.000587,0.000573,0.000542,0.000560,0.000560,0.000557,0.000544,0.000547,0.000555,0.000551,0.000537,0.000544,0.000557,0.000533,0.000512,0.000499,0.000514,0.000548,0.000548,0.000539,0.000526,0.000511,0.000513,0.000513,0.000510,0.000506,0.000503,0.000507,0.000508
giharmon57 ftgen 0,0,4096,10,0.150966,0.141943,0.169272,0.391010,0.953809,0.119929,0.039950,0.075251,0.042294,0.016963,0.005858,0.005238,0.002857,0.003841,0.008582,0.001485,0.001148,0.002596,0.001639,0.001556,0.002197,0.001142,0.001112,0.001195,0.001136,0.001245,0.000909,0.001301,0.000937,0.000941,0.001212,0.001227,0.000900,0.000862,0.000883,0.000728,0.001073,0.001100,0.000883,0.001160,0.000948,0.000936,0.001199,0.000883,0.000791,0.000945,0.000697,0.000592,0.000626,0.000588,0.000617,0.000696,0.000684,0.000803,0.000743,0.000641,0.000514,0.000453,0.000480,0.000536,0.000586,0.000581,0.000619,0.000622,0.000602,0.000589,0.000589,0.000600,0.000582,0.000552,0.000553,0.000557,0.000549,0.000526,0.000512,0.000519,0.000533,0.000535,0.000547,0.000544,0.000539,0.000534,0.000524,0.000512,0.000502,0.000502,0.000502,0.000497,0.000480,0.000468,0.000466,0.000464,0.000461,0.000459,0.000463,0.000470,0.000477,0.000482,0.000483,0.000488
giharmon60 ftgen 0,0,4096,10,0.306985,0.126374,0.301596,0.969500,0.074344,0.009729,0.006039,0.004002,0.001666,0.001675,0.002331,0.000674,0.000730,0.000729,0.000758,0.000585,0.000577,0.000687,0.000657,0.001017,0.000768,0.000581,0.000549,0.000326,0.000290,0.000463,0.000666,0.000567,0.000312,0.000634,0.000665,0.000397,0.000264,0.000232,0.000286,0.000583,0.000629,0.000663,0.000354,0.000268,0.000259,0.000263,0.000303,0.000274,0.000231,0.000322,0.000471,0.000473,0.000488,0.000569,0.000596,0.000564,0.000445,0.000430,0.000473,0.000519,0.000490,0.000446,0.000488,0.000475,0.000372,0.000301,0.000312,0.000304,0.000374,0.000526,0.000614,0.000564,0.000443,0.000349,0.000321,0.000320,0.000292,0.000243,0.000210,0.000227,0.000301,0.000393,0.000452,0.000473,0.000454,0.000415,0.000375,0.000353,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giharmon62 ftgen 0,0,4096,10,0.969106,0.095726,0.196065,0.188016,0.005133,0.010386,0.004868,0.005030,0.003515,0.002819,0.002632,0.002361,0.001260,0.000235,0.000966,0.001186,0.001018,0.000871,0.001416,0.000300,0.000430,0.000824,0.000912,0.000810,0.000516,0.000452,0.000279,0.000463,0.000690,0.000443,0.000429,0.000374,0.000579,0.000876,0.000457,0.000456,0.000449,0.000577,0.000797,0.000538,0.000571,0.000564,0.000466,0.000418,0.000306,0.000321,0.000334,0.000294,0.000244,0.000204,0.000231,0.000265,0.000340,0.000422,0.000467,0.000400,0.000291,0.000221,0.000207,0.000236,0.000249,0.000246,0.000207,0.000188,0.000203,0.000210,0.000206,0.000193,0.000167,0.000155,0.000192,0.000247,0.000284,0.000296,0.000308,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giharmon64 ftgen 0,0,4096,10,0.361663,0.582855,0.979701,0.215161,0.118878,0.052107,0.013704,0.009061,0.004379,0.007958,0.002817,0.003129,0.003908,0.003040,0.002896,0.002083,0.002113,0.004424,0.003621,0.002331,0.002616,0.002100,0.002293,0.001878,0.002282,0.002077,0.002490,0.002088,0.001811,0.001576,0.001425,0.001407,0.001400,0.001482,0.001847,0.001816,0.001426,0.001730,0.001541,0.001272,0.001398,0.001231,0.001332,0.001350,0.001199,0.001258,0.001149,0.001243,0.001247,0.001156,0.001074,0.001049,0.001142,0.001143,0.001058,0.000978,0.000854,0.000777,0.000688,0.000751,0.000914,0.001100,0.001101,0.001029,0.001044,0.001018,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giharmon65 ftgen 0,0,4096,10,0.314097,0.342771,0.973682,0.028876,0.015118,0.012713,0.002418,0.005174,0.003787,0.002218,0.002249,0.001625,0.002664,0.001830,0.002581,0.001180,0.001626,0.001619,0.001315,0.001513,0.001344,0.001175,0.000964,0.001112,0.001416,0.001129,0.001190,0.001045,0.001248,0.001029,0.000799,0.000750,0.000815,0.000965,0.000955,0.000725,0.000652,0.000709,0.000801,0.000717,0.000786,0.000648,0.000597,0.000630,0.000744,0.000667,0.000613,0.000496,0.000535,0.000596,0.000603,0.000583,0.000599,0.000593,0.000594,0.000603,0.000579,0.000588,0.000623,0.000624,0.000595,0.000573,0.000574,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
giwavemapharmon		ftgen	0,0,128,-27, 0,0, 33,0, 34,1, 36,2, 38,3, 39,3, 40,4, 41,5, 43,6, 45,7, 46,8, 48,9, 50,10,  52,11, 53,12, 55,13, 57,14, 60,15, 62,16, 64,17, 65,18, 127,18 
gitabs4morfharmon	ftgen	0,0,32,-2, giharmon33,giharmon34,giharmon36,giharmon38,giharmon39,giharmon40,giharmon41,giharmon43,giharmon45,giharmon46,giharmon48,giharmon50,giharmon52,giharmon53,giharmon55,giharmon57,giharmon60,giharmon62,giharmon64,giharmon65,giharmon65,giharmon65,giharmon65,giharmon65,giharmon65,giharmon65,giharmon65,giharmon65,giharmon65,giharmon65,giharmon65,giharmon65

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; BASS TROMBONE (STRAIGHT MUTE)
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
giMute122 ftgen 0,0,4096,10,0.164339,0.102551,0.069563,0.138697,0.223728,0.265220,0.280256,0.332069,0.420578,0.494911,0.577300,0.438019,0.538305,0.547959,0.857117,0.773953,0.517366,0.523329,0.250443,0.159600,0.171983,0.125233,0.061672,0.045591,0.028822,0.029244,0.026342,0.016326,0.018016,0.016474,0.009454,0.006045,0.003657,0.004270,0.008585,0.014528,0.017452,0.019652,0.016908,0.013257,0.016063,0.015947,0.010616,0.009647,0.007357,0.006942,0.005472,0.008460,0.014247,0.013954,0.009828,0.009192,0.009759,0.008585,0.009964,0.012870,0.010975,0.007757,0.007624,0.008209,0.008005,0.007979,0.007726,0.007655,0.007795,0.007616,0.006725,0.005945,0.005229,0.004482,0.003678,0.003014,0.002618,0.002393,0.002731,0.003322,0.003436,0.002905,0.002194,0.001589,0.001214,0.001156,0.001328,0.001483,0.001561,0.001609,0.001696,0.001872,0.001908,0.002069,0.002367,0.002374,0.002130,0.001840,0.001674,0.001720,0.001812,0.001802,0.001732,0.001622
giMute123 ftgen 0,0,4096,10,0.168432,0.062246,0.078354,0.110195,0.129041,0.377921,0.282536,0.228004,0.524063,0.552904,0.492429,0.533439,0.241793,0.431759,0.960231,0.527526,0.457018,0.447269,0.173908,0.188096,0.117536,0.088623,0.038960,0.034631,0.040187,0.030976,0.019737,0.017966,0.018488,0.010201,0.006147,0.003826,0.005925,0.007905,0.007681,0.008607,0.015400,0.021169,0.020768,0.019478,0.013836,0.014839,0.014657,0.013690,0.013236,0.016605,0.019334,0.015552,0.016319,0.019658,0.016907,0.011550,0.009411,0.009522,0.010270,0.008678,0.008528,0.008212,0.007305,0.006920,0.008975,0.009992,0.007897,0.006576,0.006398,0.005486,0.004674,0.004082,0.003255,0.002525,0.001877,0.001735,0.002072,0.002316,0.002265,0.001877,0.001508,0.001299,0.001160,0.001268,0.001500,0.001614,0.001649,0.001544,0.001559,0.001869,0.002444,0.002837,0.002564,0.002224,0.002193,0.002264,0.002103,0.001864,0.001829,0.001964,0.001969,0.001708,0.001368,0.001146
giMute124 ftgen 0,0,4096,10,0.142996,0.083116,0.064144,0.232641,0.363109,0.345440,0.348866,0.301465,0.496059,0.590541,0.450344,0.611392,0.691633,0.939595,0.719155,0.655138,0.609154,0.236629,0.218778,0.154757,0.077033,0.074852,0.040400,0.038516,0.034596,0.023126,0.013779,0.015070,0.008541,0.005439,0.004834,0.008763,0.016084,0.025053,0.033607,0.047747,0.045648,0.045497,0.025409,0.021094,0.022069,0.038009,0.041759,0.063224,0.070253,0.055822,0.048910,0.048219,0.052210,0.039531,0.037339,0.030915,0.028370,0.038122,0.044865,0.047418,0.042297,0.039872,0.040218,0.036388,0.033231,0.028010,0.022884,0.020191,0.018026,0.013653,0.011148,0.010124,0.011725,0.014502,0.015977,0.012802,0.008969,0.006321,0.005229,0.005789,0.006897,0.007670,0.008699,0.009835,0.010769,0.010605,0.010601,0.010721,0.010749,0.010852,0.010291,0.009559,0.008597,0.007779,0.007284,0.006683,0.005906,0.005353,0.005322,0.005542,0.005543,0.005124,0.004449,0.003603
giMute125 ftgen 0,0,4096,10,0.044114,0.061305,0.127226,0.214587,0.248138,0.322022,0.289079,0.300066,0.219345,0.389034,0.679974,0.361926,0.905776,0.756147,0.724622,0.413971,0.233101,0.180408,0.145204,0.056539,0.046805,0.060866,0.050067,0.038355,0.032608,0.021983,0.011622,0.006955,0.011848,0.020388,0.023077,0.028897,0.039329,0.040006,0.051071,0.030060,0.035671,0.024931,0.038339,0.037708,0.058492,0.053593,0.037184,0.045630,0.043341,0.034029,0.031437,0.034031,0.025773,0.028039,0.030454,0.031458,0.031318,0.029135,0.028627,0.025452,0.021115,0.018088,0.014741,0.013689,0.012102,0.010087,0.009117,0.010501,0.012107,0.011147,0.008670,0.006054,0.004653,0.004909,0.005979,0.007571,0.008945,0.009279,0.009403,0.009990,0.010831,0.011229,0.011576,0.012198,0.011522,0.009582,0.007918,0.007133,0.006815,0.006874,0.006545,0.005823,0.005215,0.004793,0.004226,0.003549,0.002763,0.002034,0.001527,0.001275,0.001284,0.001501,0.001663,0.001513
giMute126 ftgen 0,0,4096,10,0.060196,0.079208,0.165018,0.403007,0.474143,0.259060,0.390988,0.369395,0.520597,0.147418,0.294315,0.719113,0.948583,0.911775,0.688364,0.284237,0.196457,0.197963,0.098875,0.075773,0.045829,0.020036,0.034330,0.015751,0.015028,0.009926,0.008781,0.011622,0.026268,0.030349,0.027636,0.033521,0.031042,0.039392,0.034047,0.037282,0.023269,0.035915,0.033496,0.040946,0.033303,0.030305,0.029753,0.029612,0.029870,0.024821,0.021197,0.017836,0.015201,0.014801,0.017255,0.016419,0.014400,0.014847,0.014196,0.013845,0.010243,0.007414,0.006884,0.005313,0.005125,0.006712,0.007001,0.005537,0.003835,0.002755,0.002847,0.003574,0.003940,0.004035,0.004370,0.004927,0.004830,0.004569,0.004559,0.004585,0.004513,0.003828,0.003072,0.002596,0.002377,0.002294,0.002087,0.001940,0.001859,0.001843,0.002114,0.002255,0.001844,0.001305,0.000970,0.000768,0.000670,0.000707,0.000807,0.000885,0.000924,0.000852,0.000694,0.000544
giMute127 ftgen 0,0,4096,10,0.052401,0.049320,0.080590,0.183766,0.164401,0.307439,0.388671,0.284459,0.318081,0.164443,0.441431,0.928201,0.876487,0.740904,0.324363,0.142732,0.081529,0.077495,0.028649,0.043648,0.038991,0.025075,0.013227,0.010195,0.011781,0.010501,0.016602,0.024255,0.023187,0.036495,0.057654,0.054268,0.048563,0.024903,0.054174,0.048040,0.071704,0.054365,0.049624,0.064806,0.092036,0.062098,0.048326,0.054051,0.039134,0.032416,0.036465,0.055694,0.042371,0.035750,0.021224,0.022257,0.011427,0.014694,0.009479,0.004552,0.013174,0.019261,0.013315,0.005818,0.001677,0.002772,0.003021,0.006297,0.007154,0.008171,0.010310,0.008506,0.007517,0.010904,0.006062,0.012403,0.007495,0.006084,0.005664,0.006058,0.004342,0.006256,0.008205,0.007899,0.006624,0.007878,0.003449,0.001680,0.000514,0.001804,0.002081,0.003443,0.004990,0.003472,0.003035,0.002319,0.001815,0.000843,0.001081,0.003090,0.002248,0.001877,0.002589,0.003743
giMute128 ftgen 0,0,4096,10,0.027923,0.100208,0.119497,0.305740,0.241671,0.283542,0.288061,0.232034,0.826888,0.407135,0.944943,0.754001,0.650071,0.360755,0.163788,0.199546,0.064667,0.047976,0.067193,0.033442,0.022636,0.018891,0.006473,0.006036,0.009904,0.016425,0.024814,0.044941,0.038557,0.069982,0.053960,0.007689,0.060655,0.019491,0.072831,0.052666,0.042308,0.055883,0.044001,0.027661,0.043229,0.023057,0.025173,0.028614,0.031240,0.027168,0.026598,0.023386,0.018674,0.009964,0.010171,0.008959,0.004421,0.009443,0.011811,0.008975,0.005444,0.002992,0.002577,0.004840,0.005217,0.007905,0.008254,0.008604,0.004473,0.009592,0.008601,0.005583,0.008098,0.005796,0.002345,0.007586,0.005015,0.004900,0.007488,0.005743,0.006825,0.002224,0.002742,0.001117,0.001857,0.001298,0.003169,0.002324,0.002382,0.001822,0.001779,0.001092,0.000752,0.001206,0.002075,0.000843,0.001972,0.001844,0.002893,0.002804,0.002542,0.001110,0.001376,0.000804
giMute129 ftgen 0,0,4096,10,0.014669,0.032320,0.102462,0.174664,0.169222,0.111331,0.339606,0.209754,0.217866,0.343088,0.891951,0.530957,0.472318,0.164643,0.165367,0.091601,0.090801,0.015419,0.039607,0.019025,0.012281,0.004714,0.002434,0.014861,0.038522,0.020090,0.049806,0.050949,0.061040,0.054492,0.035308,0.046103,0.018911,0.085037,0.066539,0.090037,0.115123,0.114020,0.059158,0.070988,0.070450,0.068910,0.054753,0.043435,0.030742,0.021866,0.024247,0.013293,0.017833,0.010515,0.011265,0.016382,0.023641,0.010420,0.007923,0.005015,0.009328,0.008929,0.010346,0.011125,0.009063,0.009311,0.010454,0.010758,0.009200,0.014939,0.006906,0.005195,0.007827,0.007531,0.008761,0.010132,0.008289,0.010958,0.004572,0.001934,0.001818,0.002642,0.002171,0.002199,0.002528,0.001704,0.001645,0.001110,0.000567,0.001256,0.000671,0.001415,0.003604,0.003233,0.002086,0.001933,0.001526,0.000662,0.001458,0.000497,0.000845,0.000680,0.001138,0.001279
giMute130 ftgen 0,0,4096,10,0.064908,0.079846,0.127850,0.445046,0.330968,0.420691,0.480533,0.374119,0.245280,0.729167,0.936260,0.749421,0.381456,0.247718,0.207617,0.116908,0.051373,0.019507,0.008564,0.025213,0.010576,0.007009,0.011265,0.017944,0.027208,0.040488,0.021178,0.046272,0.038151,0.021208,0.044463,0.023287,0.045981,0.030790,0.020921,0.015858,0.026172,0.019160,0.017080,0.011607,0.015955,0.006307,0.009311,0.006865,0.003784,0.003961,0.002271,0.002504,0.000904,0.002864,0.002378,0.001916,0.001531,0.000626,0.001045,0.001491,0.001672,0.000890,0.001666,0.001476,0.001501,0.000957,0.003007,0.001529,0.001037,0.001154,0.001031,0.000515,0.000881,0.000327,0.000467,0.000436,0.000280,0.000329,0.000454,0.000243,0.000168,0.000282,0.000948,0.000411,0.000184,0.000452,0.000360,0.000354,0.000193,0.000243,0.000591,0.000203,0.000418,0.000245,0.000193,0.000287,0.000162,0.000386,0.000147,0.000097,0.000291,0.000161,0.000222,0.000228
giMute131 ftgen 0,0,4096,10,0.068230,0.065611,0.217451,0.232412,0.188182,0.427625,0.292296,0.554990,0.340081,0.915514,0.522787,0.307999,0.162151,0.094669,0.056724,0.027329,0.011538,0.010489,0.008261,0.001997,0.007832,0.008040,0.029670,0.021346,0.029403,0.071206,0.042160,0.041297,0.059757,0.018923,0.105664,0.038842,0.027166,0.042666,0.031872,0.028802,0.030657,0.019773,0.024186,0.023554,0.016848,0.015145,0.013926,0.008132,0.010479,0.005103,0.002808,0.010621,0.007445,0.004301,0.001100,0.003068,0.003063,0.004833,0.003047,0.003019,0.003716,0.005204,0.002390,0.002979,0.001408,0.001568,0.001539,0.001833,0.002366,0.001838,0.000682,0.001960,0.000613,0.000686,0.000652,0.000399,0.000606,0.000602,0.000521,0.000455,0.000432,0.000091,0.000136,0.000332,0.000272,0.000302,0.000126,0.000375,0.000314,0.000203,0.000126,0.000237,0.000293,0.000291,0.000185,0.000182,0.000275,0.000263,0.000195,0.000151,0.000202,0.000294,0.000205,0.000198
giMute132 ftgen 0,0,4096,10,0.072458,0.092631,0.167684,0.302817,0.140977,0.255042,0.110714,0.344468,0.928686,0.667412,0.338258,0.200769,0.147649,0.065744,0.004582,0.023573,0.011837,0.008391,0.007660,0.014753,0.031615,0.027782,0.039431,0.047372,0.049448,0.013895,0.042049,0.032148,0.026316,0.026284,0.049745,0.043954,0.026083,0.037453,0.029582,0.022591,0.018017,0.013163,0.009816,0.004994,0.005845,0.002926,0.004507,0.007678,0.002757,0.002125,0.001498,0.002105,0.002073,0.003179,0.003552,0.003030,0.003107,0.003121,0.004471,0.001227,0.002877,0.002488,0.002740,0.003051,0.002796,0.002240,0.000296,0.000464,0.000414,0.001290,0.000687,0.001086,0.000537,0.000387,0.000130,0.000370,0.000092,0.000561,0.000559,0.000109,0.000094,0.000089,0.000290,0.000073,0.000183,0.000250,0.000318,0.000509,0.000515,0.000390,0.000503,0.000327,0.000338,0.000232,0.000327,0.000154,0.000173,0.000108,0.000092,0.000271,0.000089,0.000076,0.000105,0.000132
giMute133 ftgen 0,0,4096,10,0.171302,0.215302,0.554037,0.602813,0.500383,0.551353,0.792246,0.972277,0.915826,0.832314,0.393008,0.188469,0.087171,0.051938,0.057335,0.030089,0.018181,0.012795,0.030872,0.033984,0.097553,0.117375,0.088919,0.019750,0.074370,0.074970,0.077987,0.098699,0.118454,0.054334,0.051802,0.037932,0.045722,0.044228,0.016572,0.018704,0.013524,0.013398,0.003788,0.004323,0.010291,0.003069,0.001274,0.001330,0.002466,0.002824,0.003268,0.005612,0.003975,0.000819,0.002777,0.002460,0.002046,0.001584,0.002892,0.002346,0.003012,0.001881,0.000649,0.000801,0.000646,0.001523,0.001240,0.001310,0.000390,0.000248,0.000279,0.000518,0.000341,0.000512,0.000393,0.000190,0.000358,0.000126,0.000196,0.000125,0.000251,0.000327,0.000531,0.000833,0.000907,0.000336,0.000482,0.000237,0.000687,0.000266,0.000316,0.000368,0.000104,0.000129,0.000172,0.000171,0.000167,0.000055,0.000143,0.000116,0.000132,0.000198,0.000238,0.000318
giMute134 ftgen 0,0,4096,10,0.097133,0.173820,0.374605,0.474497,0.645937,0.376089,0.435327,0.976798,0.725285,0.297676,0.120366,0.069249,0.033502,0.014976,0.014214,0.011249,0.006081,0.003570,0.011892,0.014690,0.022764,0.024186,0.025001,0.044955,0.049727,0.048851,0.047898,0.053897,0.023052,0.038993,0.025427,0.027582,0.022350,0.021270,0.010750,0.009160,0.013099,0.002909,0.008796,0.006376,0.001857,0.001716,0.003061,0.001735,0.002918,0.004325,0.002877,0.003817,0.005184,0.003931,0.001995,0.004293,0.003739,0.003678,0.003158,0.002071,0.001133,0.000232,0.000323,0.001563,0.001268,0.000658,0.000426,0.000063,0.000421,0.000195,0.000767,0.000535,0.000446,0.000289,0.000184,0.000296,0.000288,0.000200,0.000535,0.000186,0.000733,0.000229,0.000412,0.000107,0.000166,0.000355,0.000312,0.000317,0.000354,0.000185,0.000132,0.000137,0.000206,0.000233,0.000262,0.000150,0.000123,0.000145,0.000145,0.000117,0.000140,0.000106,0.000135,0.000169
giMute135 ftgen 0,0,4096,10,0.179021,0.401691,0.729330,0.982922,0.746447,0.524380,0.900583,0.585038,0.953435,0.443166,0.289448,0.098763,0.031244,0.011392,0.020066,0.020371,0.036289,0.021837,0.044660,0.116353,0.070855,0.059093,0.066299,0.083923,0.069741,0.061417,0.033091,0.045547,0.029414,0.028975,0.021471,0.021629,0.010855,0.013960,0.004240,0.008225,0.009562,0.004312,0.001601,0.002687,0.001271,0.003054,0.004689,0.003158,0.006429,0.004058,0.005468,0.002640,0.001551,0.003253,0.003142,0.003027,0.001217,0.000340,0.000216,0.000471,0.000540,0.000381,0.000432,0.000182,0.000650,0.000176,0.000758,0.000323,0.000522,0.000156,0.000289,0.000185,0.000281,0.000179,0.000391,0.000461,0.000214,0.000356,0.000189,0.000425,0.000214,0.000172,0.000322,0.000195,0.000387,0.000323,0.000373,0.000170,0.000176,0.000048,0.000079,0.000049,0.000161,0.000129,0.000141,0.000083,0.000119,0.000204,0.000318,0.000410,0.000202,0.000283,0.000292,0.000127
giMute136 ftgen 0,0,4096,10,0.084007,0.199308,0.212901,0.389112,0.310014,0.209644,0.951984,0.633937,0.286005,0.146120,0.053652,0.047694,0.020100,0.016786,0.003816,0.018198,0.008332,0.020077,0.037293,0.016675,0.022299,0.027356,0.023496,0.049061,0.039132,0.026396,0.012922,0.017081,0.012583,0.010068,0.005525,0.002721,0.003104,0.004799,0.003308,0.002047,0.001239,0.002036,0.002197,0.002242,0.003547,0.004859,0.003272,0.001567,0.002063,0.002229,0.001760,0.001286,0.001961,0.000541,0.000366,0.000986,0.000730,0.000861,0.000630,0.000616,0.000358,0.001058,0.000464,0.000438,0.000450,0.000487,0.000193,0.000559,0.000479,0.000260,0.000259,0.000887,0.000529,0.000258,0.000611,0.000375,0.000388,0.000092,0.000430,0.000337,0.000138,0.000312,0.000579,0.000492,0.000207,0.000330,0.000350,0.000212,0.000159,0.000387,0.000350,0.000158,0.000191,0.000374,0.000113,0.000150,0.000260,0.000156,0.000117,0.000208,0.000235,0.000105,0.000074,0.000268
giMute137 ftgen 0,0,4096,10,0.121187,0.301409,0.437255,0.488546,0.532406,0.556320,0.940536,0.612558,0.171145,0.078278,0.033359,0.039980,0.019198,0.003684,0.014541,0.021902,0.025869,0.028022,0.020078,0.018008,0.063141,0.040559,0.061443,0.025176,0.045882,0.030795,0.027823,0.023490,0.015819,0.011054,0.004279,0.008778,0.007683,0.002850,0.002807,0.001837,0.004594,0.006832,0.003882,0.006682,0.004472,0.002359,0.002653,0.002120,0.002271,0.001366,0.001048,0.000977,0.001563,0.000795,0.000741,0.000197,0.000435,0.000663,0.000303,0.000697,0.000460,0.000621,0.000388,0.000298,0.000103,0.000484,0.000378,0.000376,0.000296,0.000134,0.000043,0.000150,0.000155,0.000176,0.000187,0.000055,0.000111,0.000091,0.000143,0.000129,0.000153,0.000171,0.000204,0.000159,0.000206,0.000139,0.000065,0.000078,0.000107,0.000102,0.000128,0.000113,0.000157,0.000150,0.000078,0.000128,0.000144,0.000084,0.000114,0.000188,0.000043,0.000106,0.000116,0.000128
giMute138 ftgen 0,0,4096,10,0.137239,0.608302,0.333203,0.546467,0.231739,0.766708,0.950744,0.327806,0.160412,0.060869,0.019878,0.003953,0.008113,0.006915,0.028018,0.027245,0.043331,0.020302,0.014454,0.025972,0.026882,0.018782,0.017822,0.013846,0.010287,0.009995,0.005808,0.004941,0.003243,0.000812,0.002013,0.001670,0.000819,0.000666,0.000772,0.000298,0.000436,0.000772,0.000741,0.000154,0.001321,0.000422,0.000226,0.000631,0.000439,0.000344,0.000337,0.000336,0.000616,0.000238,0.000312,0.000215,0.000181,0.000430,0.000292,0.000227,0.000331,0.000311,0.000246,0.000311,0.000279,0.000324,0.000208,0.000103,0.000266,0.000302,0.000310,0.000240,0.000310,0.000296,0.000228,0.000305,0.000203,0.000181,0.000235,0.000154,0.000238,0.000155,0.000185,0.000226,0.000170,0.000202,0.000202,0.000228,0.000150,0.000178,0.000239,0.000187,0.000194,0.000253,0.000070,0.000165,0.000223,0.000127,0.000156,0.000160,0.000180,0.000163,0.000129,0.000224
giMute139 ftgen 0,0,4096,10,0.061443,0.238708,0.356688,0.269787,0.339649,0.912187,0.776022,0.165931,0.073909,0.021161,0.016878,0.008990,0.003708,0.022300,0.041143,0.038233,0.004859,0.023579,0.053718,0.052003,0.042268,0.022601,0.022660,0.029648,0.019517,0.017414,0.011974,0.004870,0.011305,0.003101,0.000546,0.002006,0.003619,0.004048,0.005624,0.003647,0.002198,0.002634,0.003291,0.001943,0.000613,0.000545,0.000250,0.000451,0.000789,0.000299,0.000410,0.000212,0.000138,0.000424,0.000415,0.000404,0.000244,0.000269,0.000335,0.000329,0.000230,0.000373,0.000400,0.000370,0.000260,0.000376,0.000293,0.000187,0.000119,0.000256,0.000177,0.000244,0.000278,0.000293,0.000302,0.000158,0.000215,0.000196,0.000203,0.000167,0.000136,0.000170,0.000168,0.000137,0.000166,0.000168,0.000160,0.000177,0.000247,0.000183,0.000197,0.000135,0.000162,0.000164,0.000186,0.000121,0.000206,0.000166,0.000144,0.000145,0.000141,0.000122,0.000131,0.000148
giMute140 ftgen 0,0,4096,10,0.171458,0.486737,0.414556,0.287720,0.507039,0.974434,0.387302,0.180263,0.044683,0.029233,0.014770,0.003589,0.009392,0.033786,0.054370,0.010033,0.024497,0.035533,0.046495,0.020949,0.024322,0.023346,0.018462,0.011212,0.009184,0.003515,0.005537,0.002905,0.001147,0.001777,0.002912,0.002534,0.003007,0.002041,0.002109,0.001352,0.001160,0.001111,0.000145,0.000433,0.000205,0.000056,0.000347,0.000268,0.000294,0.000170,0.000469,0.000118,0.000167,0.000252,0.000207,0.000132,0.000371,0.000145,0.000293,0.000072,0.000271,0.000135,0.000201,0.000141,0.000204,0.000171,0.000237,0.000126,0.000167,0.000093,0.000231,0.000074,0.000160,0.000043,0.000250,0.000055,0.000217,0.000066,0.000199,0.000066,0.000231,0.000104,0.000233,0.000061,0.000246,0.000078,0.000219,0.000099,0.000254,0.000073,0.000200,0.000053,0.000175,0.000057,0.000197,0.000066,0.000126,0.000068,0.000163,0.000069,0.000139,0.000114,0.000270,0.000106
giMute141 ftgen 0,0,4096,10,0.096700,0.501938,0.304973,0.388545,0.605784,0.973491,0.310298,0.166062,0.031823,0.020041,0.008197,0.018099,0.031406,0.032118,0.028621,0.035283,0.026152,0.031724,0.045821,0.032749,0.023933,0.009329,0.006590,0.003520,0.002035,0.005414,0.003178,0.001420,0.002462,0.001216,0.000800,0.002760,0.002395,0.001093,0.001088,0.001647,0.001527,0.000979,0.001163,0.001119,0.001071,0.001064,0.001131,0.001297,0.001070,0.001080,0.000990,0.000967,0.000985,0.001105,0.000916,0.000726,0.000869,0.000896,0.000931,0.000845,0.000797,0.000762,0.000805,0.000802,0.000683,0.000685,0.000708,0.000714,0.000719,0.000727,0.000634,0.000711,0.000686,0.000637,0.000694,0.000701,0.000592,0.000664,0.000534,0.000558,0.000681,0.000688,0.000614,0.000609,0.000647,0.000479,0.000513,0.000489,0.000396,0.000420,0.000504,0.000454,0.000492,0.000467,0.000503,0.000515,0.000470,0.000401,0.000502,0.000592,0.000567,0.000411,0.000453,0.000449
giMute142 ftgen 0,0,4096,10,0.079836,0.330689,0.372144,0.493873,0.925375,0.694151,0.118777,0.028983,0.015396,0.009622,0.001526,0.002627,0.008783,0.011024,0.010140,0.015272,0.009621,0.006265,0.004497,0.003760,0.002472,0.001108,0.000363,0.000521,0.000643,0.000834,0.000511,0.000843,0.000434,0.000735,0.001056,0.000991,0.001287,0.000997,0.000751,0.000669,0.000309,0.000891,0.000656,0.000613,0.000705,0.000663,0.000676,0.000561,0.000583,0.000611,0.000611,0.000702,0.000495,0.000478,0.000451,0.000393,0.000461,0.000506,0.000433,0.000473,0.000465,0.000454,0.000425,0.000361,0.000423,0.000458,0.000385,0.000422,0.000473,0.000380,0.000405,0.000421,0.000338,0.000379,0.000351,0.000358,0.000335,0.000353,0.000378,0.000372,0.000313,0.000331,0.000343,0.000315,0.000320,0.000280,0.000296,0.000226,0.000364,0.000296,0.000272,0.000282,0.000254,0.000289,0.000277,0.000204,0.000220,0.000269,0.000299,0.000321,0.000450,0.000259,0.000266,0.000435
giMute143 ftgen 0,0,4096,10,0.093603,0.658042,0.988507,0.565236,0.957972,0.360885,0.102049,0.051660,0.027922,0.005483,0.010335,0.012495,0.003673,0.003952,0.012964,0.008898,0.005397,0.006281,0.001252,0.006122,0.003828,0.000827,0.003226,0.002089,0.001925,0.000243,0.002872,0.002421,0.003325,0.002270,0.001755,0.001168,0.001149,0.000770,0.000928,0.000937,0.000720,0.000406,0.000688,0.000732,0.000790,0.000819,0.000398,0.000728,0.000703,0.001198,0.000151,0.000857,0.000600,0.000571,0.000660,0.000529,0.000450,0.000520,0.000520,0.000470,0.000463,0.000462,0.000454,0.000347,0.000590,0.000427,0.000210,0.000402,0.000401,0.000381,0.000525,0.000294,0.000410,0.000335,0.000296,0.000348,0.000580,0.000399,0.000186,0.000198,0.000288,0.000442,0.000411,0.000234,0.000356,0.000386,0.000271,0.000338,0.000271,0.000303,0.000385,0.000352,0.000226,0.000193,0.000103,0.000388,0.000349,0.000222,0.000208,0.000266,0.000232,0.000314,0.000425,0.000268
giMute144 ftgen 0,0,4096,10,0.127739,0.412859,0.669901,0.617303,0.972749,0.358440,0.065748,0.045528,0.010129,0.008737,0.005631,0.028396,0.004839,0.008872,0.006019,0.011096,0.006903,0.003885,0.004722,0.003204,0.000936,0.002573,0.001532,0.001369,0.001172,0.001160,0.002432,0.000544,0.000609,0.001867,0.000966,0.001039,0.001031,0.000884,0.000753,0.000848,0.000659,0.000749,0.000579,0.000769,0.000665,0.000754,0.000781,0.000490,0.000653,0.000626,0.000524,0.000572,0.000539,0.000566,0.000514,0.000414,0.000441,0.000453,0.000417,0.000478,0.000444,0.000495,0.000551,0.000346,0.000475,0.000442,0.000477,0.000269,0.000501,0.000483,0.000442,0.000267,0.000338,0.000368,0.000470,0.000382,0.000335,0.000358,0.000341,0.000354,0.000345,0.000310,0.000359,0.000228,0.000299,0.000348,0.000336,0.000319,0.000275,0.000294,0.000244,0.000271,0.000232,0.000358,0.000237,0.000269,0.000247,0.000360,0.000301,0.000208,0.000223,0.000248,0.000270,0.000258
giMute145 ftgen 0,0,4096,10,0.172584,0.253006,0.499844,0.963093,0.599448,0.063091,0.027923,0.009556,0.005430,0.007267,0.030576,0.010839,0.007632,0.008691,0.007373,0.004773,0.004338,0.006857,0.003189,0.000319,0.002787,0.001103,0.001002,0.001076,0.001129,0.001241,0.000702,0.000657,0.000919,0.000769,0.000959,0.000576,0.000715,0.000619,0.000732,0.000611,0.000499,0.000600,0.000491,0.000700,0.000580,0.000348,0.000432,0.000611,0.000489,0.000494,0.000446,0.000425,0.000537,0.000395,0.000420,0.000348,0.000423,0.000452,0.000417,0.000289,0.000444,0.000331,0.000335,0.000289,0.000366,0.000340,0.000289,0.000333,0.000336,0.000346,0.000297,0.000305,0.000318,0.000278,0.000199,0.000327,0.000258,0.000240,0.000298,0.000311,0.000247,0.000309,0.000274,0.000297,0.000343,0.000148,0.000267,0.000204,0.000326,0.000251,0.000194,0.000230,0.000250,0.000186,0.000238,0.000251,0.000196,0.000238,0.000292,0.000233,0.000162,0.000197,0.000198,0.000193
giMute146 ftgen 0,0,4096,10,0.169930,0.357871,0.478870,0.971148,0.103667,0.027577,0.012460,0.004728,0.004455,0.018143,0.018903,0.009745,0.013588,0.009707,0.007034,0.005601,0.003105,0.000981,0.000341,0.001493,0.000631,0.000446,0.000832,0.000522,0.000996,0.001277,0.000334,0.000333,0.000435,0.000326,0.000323,0.000353,0.000202,0.000214,0.000190,0.000284,0.000171,0.000339,0.000329,0.000183,0.000124,0.000342,0.000303,0.000128,0.000091,0.000224,0.000255,0.000167,0.000148,0.000089,0.000154,0.000248,0.000151,0.000141,0.000149,0.000108,0.000284,0.000121,0.000121,0.000193,0.000201,0.000123,0.000226,0.000223,0.000154,0.000094,0.000194,0.000058,0.000146,0.000232,0.000097,0.000224,0.000132,0.000062,0.000163,0.000214,0.000246,0.000418,0.000139,0.000221,0.000100,0.000095,0.000131,0.000152,0.000158,0.000051,0.000077,0.000080,0.000061,0.000131,0.000109,0.000055,0.000120,0.000091,0.000080,0.000081,0.000120,0.000053,0.000045,0.000123
giMute147 ftgen 0,0,4096,10,0.175950,0.306151,0.921267,0.803899,0.232506,0.029817,0.015312,0.002411,0.010177,0.008768,0.003962,0.004998,0.003485,0.001495,0.002390,0.001727,0.000838,0.000237,0.000572,0.000579,0.000740,0.001153,0.000286,0.000378,0.000226,0.000269,0.000314,0.000265,0.000200,0.000117,0.000250,0.000150,0.000183,0.000079,0.000168,0.000177,0.000049,0.000188,0.000111,0.000136,0.000108,0.000088,0.000122,0.000076,0.000110,0.000119,0.000091,0.000137,0.000123,0.000074,0.000144,0.000146,0.000077,0.000035,0.000056,0.000085,0.000020,0.000095,0.000092,0.000051,0.000122,0.000063,0.000147,0.000073,0.000076,0.000045,0.000098,0.000114,0.000063,0.000075,0.000037,0.000125,0.000019,0.000072,0.000077,0.000087,0.000132,0.000061,0.000112,0.000071,0.000050,0.000051,0.000054,0.000046,0.000107,0.000026,0.000027,0.000021,0.000035,0.000042,0.000030,0.000041,0.000038,0.000047,0.000015,0.000021,0.000032,0.000120,0.000147,0.000238
giMute148 ftgen 0,0,4096,10,0.546831,0.588315,0.974745,0.966438,0.134855,0.030603,0.009346,0.000932,0.030580,0.012583,0.020113,0.009766,0.016236,0.007109,0.004226,0.002316,0.001376,0.000358,0.001380,0.001135,0.000319,0.000940,0.000401,0.000703,0.000385,0.000515,0.000292,0.000252,0.000145,0.000137,0.000403,0.000278,0.000292,0.000275,0.000222,0.000110,0.000160,0.000085,0.000217,0.000270,0.000172,0.000158,0.000177,0.000095,0.000182,0.000067,0.000232,0.000159,0.000178,0.000150,0.000206,0.000086,0.000273,0.000112,0.000141,0.000195,0.000084,0.000079,0.000246,0.000201,0.000063,0.000129,0.000125,0.000117,0.000158,0.000162,0.000192,0.000121,0.000175,0.000267,0.000096,0.000179,0.000039,0.000074,0.000268,0.000160,0.000033,0.000069,0.000065,0.000055,0.000088,0.000054,0.000142,0.000087,0.000045,0.000095,0.000026,0.000039,0.000075,0.000073,0.000067,0.000054,0.000068,0.000091,0.000101,0.000092,0.000171,0.000084,0.000049,0.000055
giMute149 ftgen 0,0,4096,10,0.294629,0.975075,0.694387,0.796446,0.188314,0.013147,0.006022,0.018607,0.064160,0.026936,0.065686,0.065969,0.031796,0.020120,0.015238,0.003443,0.002738,0.001360,0.003362,0.001182,0.001135,0.002047,0.001013,0.000558,0.000429,0.000717,0.000504,0.000555,0.000624,0.000479,0.000343,0.000421,0.000606,0.000462,0.000385,0.000445,0.000230,0.000176,0.000301,0.000222,0.000323,0.000195,0.000306,0.000246,0.000307,0.000237,0.000215,0.000210,0.000380,0.000241,0.000377,0.000152,0.000491,0.000197,0.000367,0.000186,0.000204,0.000108,0.000304,0.000260,0.000093,0.000231,0.000163,0.000112,0.000185,0.000239,0.000226,0.000179,0.000200,0.000203,0.000175,0.000088,0.000156,0.000218,0.000201,0.000222,0.000100,0.000212,0.000151,0.000114,0.000168,0.000167,0.000170,0.000170,0.000116,0.000205,0.000116,0.000133,0.000139,0.000176,0.000154,0.000145,0.000119,0.000095,0.000085,0.000125,0.000145,0.000106,0.000145,0.000141
giMute150 ftgen 0,0,4096,10,0.594912,0.608509,0.961469,0.229985,0.033626,0.009789,0.002734,0.011904,0.013878,0.018699,0.018956,0.006098,0.006134,0.002889,0.000518,0.000310,0.000591,0.000264,0.000257,0.000698,0.000478,0.000286,0.000276,0.000212,0.000349,0.000257,0.000272,0.000224,0.000177,0.000174,0.000082,0.000176,0.000161,0.000172,0.000230,0.000066,0.000165,0.000161,0.000152,0.000109,0.000094,0.000130,0.000185,0.000186,0.000258,0.000200,0.000154,0.000204,0.000184,0.000157,0.000047,0.000131,0.000123,0.000097,0.000062,0.000144,0.000118,0.000149,0.000134,0.000157,0.000198,0.000063,0.000156,0.000144,0.000094,0.000105,0.000096,0.000093,0.000113,0.000081,0.000076,0.000079,0.000049,0.000061,0.000040,0.000104,0.000079,0.000022,0.000068,0.000078,0.000072,0.000063,0.000085,0.000086,0.000053,0.000080,0.000082,0.000054,0.000046,0.000081,0.000075,0.000056,0.000061,0.000025,0.000072,0.000042,0.000050,0.000054,0.000053,0.000068
giMute151 ftgen 0,0,4096,10,0.206347,0.510370,0.950258,0.127507,0.010206,0.002549,0.001810,0.012483,0.004635,0.004683,0.005187,0.003165,0.001760,0.000999,0.000554,0.000268,0.000624,0.000195,0.000027,0.000147,0.000141,0.000163,0.000117,0.000060,0.000105,0.000099,0.000067,0.000093,0.000160,0.000103,0.000140,0.000060,0.000090,0.000115,0.000051,0.000073,0.000045,0.000055,0.000143,0.000072,0.000114,0.000130,0.000048,0.000106,0.000081,0.000052,0.000096,0.000074,0.000050,0.000088,0.000108,0.000167,0.000065,0.000093,0.000168,0.000053,0.000085,0.000083,0.000061,0.000128,0.000058,0.000064,0.000040,0.000027,0.000100,0.000081,0.000054,0.000030,0.000036,0.000081,0.000048,0.000047,0.000067,0.000034,0.000037,0.000030,0.000021,0.000028,0.000043,0.000106,0.000063,0.000019,0.000039,0.000057,0.000021,0.000037,0.000026,0.000041,0.000039,0.000032,0.000024,0.000048,0.000021,0.000064,0.000037,0.000065,0.000049,0.000031,0.000048,0.000014
giMute152 ftgen 0,0,4096,10,0.718310,0.828992,0.971094,0.089148,0.007432,0.001882,0.006326,0.016275,0.013664,0.005083,0.004192,0.002987,0.000575,0.000244,0.000598,0.000195,0.000566,0.000394,0.000580,0.000162,0.000255,0.000166,0.000116,0.000132,0.000146,0.000108,0.000133,0.000237,0.000251,0.000229,0.000158,0.000127,0.000139,0.000150,0.000119,0.000043,0.000076,0.000198,0.000147,0.000151,0.000075,0.000073,0.000078,0.000098,0.000125,0.000095,0.000098,0.000053,0.000180,0.000068,0.000097,0.000168,0.000085,0.000055,0.000094,0.000084,0.000102,0.000047,0.000079,0.000083,0.000046,0.000050,0.000047,0.000066,0.000081,0.000049,0.000040,0.000040,0.000068,0.000075,0.000057,0.000054,0.000024,0.000106,0.000054,0.000084,0.000044,0.000058,0.000034,0.000045,0.000058,0.000029,0.000068,0.000046,0.000029,0.000029,0.000066,0.000045,0.000077,0.000038,0.000027,0.000035,0.000043,0.000036,0.000049,0.000024,0.000024,0.000045,0.000046,0.000034
giMute153 ftgen 0,0,4096,10,0.551061,0.501444,0.953401,0.068491,0.008520,0.012056,0.020903,0.021636,0.008585,0.007399,0.006298,0.001414,0.000788,0.000891,0.000358,0.000686,0.001110,0.000613,0.000691,0.000460,0.000664,0.000614,0.000565,0.000426,0.000472,0.000397,0.000391,0.000456,0.000378,0.000437,0.000434,0.000310,0.000368,0.000415,0.000400,0.000343,0.000353,0.000349,0.000357,0.000326,0.000313,0.000231,0.000257,0.000212,0.000281,0.000273,0.000286,0.000207,0.000174,0.000326,0.000097,0.000332,0.000115,0.000149,0.000211,0.000305,0.000186,0.000198,0.000220,0.000141,0.000131,0.000182,0.000188,0.000186,0.000182,0.000117,0.000163,0.000173,0.000185,0.000121,0.000186,0.000073,0.000203,0.000192,0.000150,0.000147,0.000131,0.000138,0.000145,0.000135,0.000111,0.000135,0.000109,0.000125,0.000126,0.000121,0.000105,0.000083,0.000102,0.000109,0.000069,0.000107,0.000148,0.000139,0.000126,0.000096,0.000101,0.000123,0.000104,0.000104
giMute154 ftgen 0,0,4096,10,0.965465,0.238341,0.801452,0.050222,0.006640,0.011475,0.012533,0.012724,0.004704,0.006848,0.004228,0.001130,0.001409,0.001463,0.000398,0.000800,0.000513,0.001091,0.001100,0.000393,0.000445,0.000310,0.000446,0.000589,0.000358,0.000505,0.000369,0.000525,0.000346,0.000322,0.000437,0.000435,0.000262,0.000286,0.000307,0.000308,0.000358,0.000350,0.000347,0.000237,0.000076,0.000385,0.000217,0.000215,0.000278,0.000200,0.000335,0.000203,0.000329,0.000194,0.000066,0.000171,0.000388,0.000178,0.000305,0.000205,0.000231,0.000150,0.000228,0.000249,0.000070,0.000179,0.000201,0.000134,0.000138,0.000151,0.000193,0.000156,0.000150,0.000137,0.000132,0.000132,0.000128,0.000118,0.000138,0.000126,0.000141,0.000133,0.000148,0.000184,0.000137,0.000131,0.000138,0.000107,0.000100,0.000116,0.000121,0.000092,0.000099,0.000106,0.000080,0.000101,0.000102,0.000073,0.000094,0.000104,0.000107,0.000106,0.000093,0.000085
giMute155 ftgen 0,0,4096,10,0.938142,0.970313,0.508740,0.021568,0.001864,0.002894,0.002724,0.002263,0.003861,0.001793,0.000443,0.001267,0.000409,0.000899,0.000541,0.000180,0.000417,0.000464,0.000377,0.000359,0.000247,0.000485,0.000254,0.000339,0.000219,0.000319,0.000168,0.000254,0.000251,0.000160,0.000021,0.000183,0.000145,0.000251,0.000161,0.000219,0.000034,0.000174,0.000112,0.000219,0.000100,0.000130,0.000289,0.000226,0.000368,0.000095,0.000094,0.000122,0.000072,0.000121,0.000126,0.000143,0.000135,0.000153,0.000050,0.000099,0.000080,0.000071,0.000089,0.000079,0.000117,0.000090,0.000082,0.000068,0.000126,0.000073,0.000077,0.000094,0.000076,0.000063,0.000056,0.000070,0.000076,0.000063,0.000036,0.000059,0.000040,0.000039,0.000031,0.000048,0.000048,0.000066,0.000072,0.000047,0.000057,0.000058,0.000066,0.000033,0.000044,0.000035,0.000051,0.000038,0.000039,0.000047,0.000046,0.000052,0.000050,0.000033,0.000052,0.000039
giMute156 ftgen 0,0,4096,10,0.625565,0.965980,0.202403,0.024063,0.002481,0.005337,0.005024,0.008205,0.003554,0.001210,0.000983,0.001570,0.000901,0.000291,0.000664,0.000883,0.000489,0.000671,0.000602,0.000605,0.000552,0.000393,0.000580,0.000544,0.000508,0.000536,0.000523,0.000420,0.000400,0.000436,0.000414,0.000508,0.000302,0.000362,0.000336,0.000489,0.000355,0.000362,0.000320,0.000350,0.000246,0.000251,0.000326,0.000214,0.000175,0.000260,0.000273,0.000224,0.000202,0.000232,0.000185,0.000237,0.000245,0.000169,0.000199,0.000160,0.000153,0.000211,0.000161,0.000157,0.000165,0.000177,0.000207,0.000214,0.000158,0.000167,0.000146,0.000138,0.000161,0.000162,0.000163,0.000138,0.000160,0.000141,0.000113,0.000139,0.000144,0.000099,0.000091,0.000160,0.000120,0.000102,0.000131,0.000108,0.000113,0.000114,0.000113,0.000111,0.000105,0.000113,0.000123,0.000107,0.000110,0.000112,0.000110,0.000106,0.000122,0.000112,0.000105,0.000101
giMute157 ftgen 0,0,4096,10,0.314475,0.959696,0.048444,0.004582,0.006574,0.012611,0.005426,0.002115,0.000604,0.000404,0.000356,0.000685,0.001096,0.000409,0.000072,0.000321,0.000329,0.000236,0.000403,0.000240,0.000158,0.000233,0.000268,0.000168,0.000154,0.000209,0.000165,0.000121,0.000111,0.000136,0.000085,0.000217,0.000086,0.000083,0.000149,0.000151,0.000115,0.000148,0.000123,0.000087,0.000095,0.000113,0.000089,0.000044,0.000137,0.000116,0.000130,0.000027,0.000101,0.000085,0.000121,0.000079,0.000106,0.000042,0.000011,0.000071,0.000080,0.000029,0.000039,0.000081,0.000041,0.000060,0.000040,0.000068,0.000066,0.000052,0.000050,0.000031,0.000056,0.000054,0.000039,0.000051,0.000037,0.000059,0.000054,0.000037,0.000046,0.000043,0.000038,0.000041,0.000031,0.000049,0.000033,0.000040,0.000038,0.000035,0.000050,0.000040,0.000043,0.000039,0.000051,0.000035,0.000045,0.000020,0.000038,0.000032,0.000026,0.000030,0.000031,0.000030
giMute158 ftgen 0,0,4096,10,0.428817,0.965152,0.013016,0.001790,0.004347,0.004997,0.005604,0.002582,0.000836,0.000569,0.000599,0.000465,0.000517,0.000563,0.000538,0.000350,0.000281,0.000361,0.000460,0.000274,0.000209,0.000199,0.000249,0.000304,0.000340,0.000213,0.000240,0.000152,0.000238,0.000157,0.000200,0.000196,0.000164,0.000118,0.000156,0.000141,0.000124,0.000105,0.000108,0.000150,0.000140,0.000124,0.000109,0.000104,0.000111,0.000096,0.000120,0.000092,0.000094,0.000103,0.000077,0.000064,0.000066,0.000111,0.000094,0.000093,0.000082,0.000078,0.000073,0.000096,0.000082,0.000079,0.000075,0.000072,0.000085,0.000068,0.000072,0.000053,0.000069,0.000054,0.000057,0.000058,0.000058,0.000065,0.000055,0.000063,0.000066,0.000063,0.000063,0.000058,0.000053,0.000052,0.000046,0.000046,0.000050,0.000049,0.000047,0.000045,0.000043,0.000050,0.000047,0.000052,0.000050,0.000049,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
giwavemapMute1		ftgen	0,0,128,-27, 0,0, 22,0, 23,1, 24,2, 25,3, 26,4, 27,5, 28,6, 29,7, 30,8, 31,9, 32,10, 33,11, 34,12, 35,13, 36,14, 37,15, 38,16, 39,17, 40,18, 41,19, 42,20, 43,21, 44,22, 45,23, 46,24, 47,25, 48,26, 49,27, 50,28, 51,29, 52,30, 53,31, 54,32, 55,33, 56,34, 57,35, 58,36, 127,36
gitabs4morfMute1	ftgen	0,0,64,-2, giMute122,giMute123,giMute124,giMute125,giMute126,giMute127,giMute128,giMute129,giMute130,giMute131,giMute132,giMute133,giMute134,giMute135,giMute136,giMute137,giMute138,giMute139,giMute140,giMute141,giMute142,giMute143,giMute144,giMute145,giMute146,giMute147,giMute148,giMute149,giMute150,giMute151,giMute152,giMute153,giMute154,giMute155,giMute156,giMute157,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; BASS TROMBONE (OPEN)
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
giUnmuted22 ftgen 0,0,4096,10,0.209301,0.150536,0.083014,0.207956,0.321939,0.399510,0.327987,0.421479,0.539528,0.533091,0.721756,0.467196,0.947246,0.770314,0.912692,0.965128,0.962101,1.093136,0.708144,0.664071,0.619031,0.643414,0.371645,0.533120,0.477851,0.481481,0.451545,0.370726,0.360377,0.459325,0.288110,0.235271,0.205264,0.198828,0.206768,0.219183,0.205657,0.164230,0.168498,0.156362,0.109323,0.096989,0.105552,0.095551,0.069663,0.068933,0.067166,0.055414,0.072408,0.055978,0.033534,0.049491,0.054904,0.029956,0.018835,0.027602,0.035912,0.015979,0.021303,0.011033,0.024278,0.030411,0.020777,0.027002,0.020715,0.010245,0.010418,0.019612,0.017841,0.017176,0.012772,0.008424,0.009403,0.002947,0.006355,0.006158,0.015418,0.015477,0.011268,0.008620,0.008935,0.006072,0.005458,0.006560,0.006368,0.007559,0.004779,0.008830,0.007041,0.006334,0.002719,0.003830,0.006208,0.008425,0.006728,0.006139,0.002789,0.007133,0.005592,0.005069
giUnmuted23 ftgen 0,0,4096,10,0.129222,0.088552,0.116290,0.170792,0.176577,0.331680,0.281710,0.247957,0.379599,0.404781,0.432966,0.873924,0.774290,0.657216,0.986727,0.929760,0.832314,0.808580,0.585809,0.684034,0.674170,0.330450,0.888687,0.598954,0.599019,0.566506,0.632303,0.502653,0.431058,0.214554,0.351572,0.335693,0.277218,0.341691,0.264970,0.296760,0.293654,0.224055,0.213823,0.138880,0.188425,0.156849,0.137821,0.185206,0.172163,0.184744,0.153256,0.116401,0.138614,0.155349,0.095606,0.075646,0.091523,0.087233,0.081355,0.068920,0.094557,0.066191,0.069861,0.065915,0.072343,0.065165,0.065968,0.041851,0.063905,0.036430,0.041801,0.035516,0.038545,0.044169,0.038034,0.042219,0.032505,0.038202,0.034556,0.037548,0.036070,0.036673,0.037173,0.024089,0.029610,0.028726,0.018206,0.028118,0.023534,0.023563,0.025997,0.024870,0.021673,0.024752,0.020165,0.019645,0.016172,0.017942,0.018241,0.016560,0.014997,0.013671,0.015848,0.011383
giUnmuted24 ftgen 0,0,4096,10,0.014100,0.027948,0.037471,0.118589,0.278733,0.166216,0.237592,0.204888,0.303225,0.239198,0.590081,0.558590,0.488846,0.934503,0.791766,0.769104,0.451529,0.465344,0.363957,0.375648,0.362512,0.527955,0.584553,0.562238,0.409571,0.447397,0.547498,0.349795,0.363085,0.318352,0.305372,0.298282,0.236937,0.259059,0.251424,0.235425,0.253896,0.305811,0.227171,0.177695,0.218484,0.204418,0.227246,0.182265,0.183710,0.198997,0.141695,0.093968,0.119182,0.128975,0.118829,0.086353,0.143691,0.082113,0.096768,0.076006,0.108551,0.073045,0.080734,0.075566,0.076978,0.047507,0.057911,0.055554,0.070030,0.060662,0.054519,0.055938,0.064493,0.032839,0.043612,0.052568,0.034145,0.054702,0.041937,0.045108,0.037413,0.033601,0.044130,0.036376,0.036994,0.032488,0.031456,0.030170,0.029857,0.031038,0.027679,0.029891,0.027195,0.023506,0.027610,0.023146,0.022810,0.019058,0.018170,0.018749,0.017019,0.015480,0.016379,0.015893
giUnmuted25 ftgen 0,0,4096,10,0.075402,0.101145,0.176728,0.270616,0.291285,0.324780,0.333295,0.233831,0.290677,0.540830,0.767506,0.512758,0.980849,0.771417,0.804053,0.408122,0.631555,0.670085,0.408376,0.681153,0.911500,0.859956,0.697578,0.595419,0.593307,0.469251,0.543682,0.529757,0.367768,0.498910,0.305667,0.300578,0.386836,0.363336,0.347656,0.332606,0.322633,0.253819,0.316454,0.284584,0.227632,0.212815,0.324061,0.212387,0.161264,0.199347,0.187103,0.169679,0.152185,0.206879,0.129213,0.127022,0.158412,0.109282,0.134290,0.097383,0.119959,0.099454,0.111739,0.076911,0.100854,0.086224,0.089536,0.075617,0.075879,0.080690,0.071350,0.079834,0.089408,0.079954,0.081367,0.068297,0.067636,0.067458,0.048890,0.064138,0.053887,0.056479,0.047270,0.039648,0.049324,0.050416,0.048009,0.042951,0.034023,0.037808,0.026799,0.042091,0.023668,0.027252,0.027430,0.027822,0.030900,0.025171,0.030639,0.031093,0.018787,0.024957,0.020116,0.016682
giUnmuted26 ftgen 0,0,4096,10,0.043072,0.066480,0.103784,0.299131,0.266755,0.210417,0.254095,0.299260,0.120587,0.627381,0.502409,0.682945,0.896451,0.718962,0.798438,0.342935,0.438196,0.391451,0.571924,0.500613,0.522119,0.554206,0.351133,0.573747,0.415485,0.314183,0.377587,0.407768,0.269407,0.243405,0.358414,0.278435,0.297179,0.205957,0.278884,0.139884,0.230059,0.203655,0.273754,0.208405,0.268930,0.220588,0.093617,0.135109,0.140624,0.125541,0.127288,0.075447,0.145203,0.086283,0.144206,0.092668,0.097130,0.101259,0.096756,0.087998,0.053647,0.093505,0.075780,0.063445,0.057768,0.067925,0.062568,0.059886,0.049874,0.061576,0.047362,0.059277,0.045356,0.045205,0.049725,0.059766,0.051216,0.043048,0.047544,0.034671,0.055494,0.029430,0.038554,0.039949,0.030711,0.033481,0.031643,0.028951,0.022707,0.022752,0.019352,0.028349,0.020961,0.022731,0.022740,0.021957,0.021687,0.023511,0.015741,0.017651,0.017310,0.015487,0.015835,0.014889
giUnmuted27 ftgen 0,0,4096,10,0.116392,0.064448,0.127432,0.239485,0.257590,0.362741,0.449254,0.199901,0.348867,0.637406,0.429112,0.918400,0.936649,0.907354,0.601632,0.359938,0.492393,0.465346,0.501258,0.682788,0.539385,0.377763,0.493182,0.284353,0.308310,0.236111,0.324894,0.290903,0.171987,0.259098,0.209363,0.188311,0.165040,0.129121,0.179891,0.142395,0.192837,0.155400,0.140506,0.154670,0.085903,0.084914,0.123353,0.033350,0.085811,0.066361,0.064805,0.053334,0.059168,0.051871,0.024556,0.050781,0.036654,0.034625,0.037417,0.026993,0.036074,0.041271,0.034852,0.030858,0.035521,0.039943,0.029248,0.023157,0.034015,0.022517,0.032273,0.025478,0.021464,0.021306,0.020706,0.015205,0.017217,0.016590,0.014839,0.015475,0.014872,0.012173,0.018427,0.015918,0.010766,0.011403,0.007469,0.006837,0.010460,0.009821,0.011490,0.012841,0.009228,0.009485,0.005268,0.008016,0.007500,0.007632,0.009359,0.005060,0.006834,0.006729,0.005832,0.006610
giUnmuted28 ftgen 0,0,4096,10,0.076757,0.165970,0.231682,0.474308,0.397207,0.459106,0.300853,0.244548,0.666795,0.602133,0.902710,0.655767,0.483398,0.313870,0.349970,0.212690,0.704653,0.764853,0.648917,0.660316,0.500843,0.406945,0.437095,0.364433,0.332150,0.247819,0.335990,0.413334,0.272378,0.303040,0.347189,0.202684,0.273591,0.358844,0.326756,0.187244,0.245830,0.136904,0.149347,0.181123,0.074118,0.123133,0.099890,0.059919,0.124875,0.090488,0.085029,0.115332,0.036687,0.106389,0.065025,0.070006,0.054270,0.053720,0.068047,0.055966,0.079658,0.070141,0.046135,0.065892,0.044587,0.048301,0.044148,0.045919,0.038547,0.040422,0.052374,0.032757,0.026433,0.030900,0.031810,0.034349,0.013986,0.030399,0.015539,0.018593,0.017769,0.024225,0.019160,0.022166,0.018451,0.016544,0.010230,0.012227,0.012961,0.015889,0.015651,0.009872,0.014459,0.011942,0.015592,0.014711,0.013394,0.010871,0.008229,0.007572,0.008106,0.008828,0.011451,0.009952
giUnmuted30 ftgen 0,0,4096,10,0.102601,0.100887,0.167098,0.516781,0.330986,0.422868,0.412850,0.397849,0.628756,0.686835,0.929709,0.845577,0.935266,0.508059,0.792158,0.281350,0.378308,0.568489,0.346813,0.566233,0.413541,0.405762,0.359363,0.216505,0.366221,0.301854,0.216945,0.249969,0.168763,0.194386,0.278248,0.046419,0.257812,0.124464,0.096054,0.116201,0.059755,0.096572,0.074147,0.047405,0.054049,0.073919,0.023499,0.080643,0.079127,0.031933,0.076588,0.051990,0.032645,0.031250,0.046055,0.022654,0.038293,0.031067,0.045355,0.035515,0.043591,0.024758,0.020123,0.028097,0.025231,0.014737,0.015258,0.020891,0.010029,0.015487,0.004561,0.009797,0.007038,0.006923,0.012160,0.005577,0.012809,0.007007,0.007626,0.004440,0.008034,0.008475,0.006052,0.009027,0.006419,0.007999,0.005562,0.004974,0.008232,0.007159,0.005841,0.004633,0.005878,0.004708,0.005378,0.005775,0.004317,0.003135,0.006019,0.002682,0.003519,0.002106,0.001173,0.002911
giUnmuted31 ftgen 0,0,4096,10,0.066770,0.048141,0.313114,0.280252,0.266590,0.227818,0.195576,0.598114,0.585360,0.631625,0.922780,0.476250,0.557175,0.516114,0.284400,0.347304,0.327824,0.186298,0.429619,0.319332,0.143321,0.268362,0.179246,0.187779,0.187831,0.069696,0.157916,0.087219,0.051108,0.180413,0.090807,0.061893,0.087674,0.029616,0.053852,0.035420,0.032698,0.030786,0.031084,0.040347,0.022290,0.019770,0.033986,0.022503,0.008514,0.028204,0.013058,0.011683,0.016372,0.011838,0.005125,0.012279,0.007251,0.009685,0.008196,0.009381,0.007698,0.004608,0.004124,0.002835,0.002636,0.005858,0.004185,0.001287,0.002347,0.002862,0.004396,0.003505,0.001776,0.002038,0.003386,0.001389,0.002214,0.001394,0.002558,0.001971,0.001212,0.000993,0.001220,0.001435,0.001036,0.000315,0.000862,0.001509,0.000972,0.000423,0.000797,0.001030,0.001800,0.000491,0.000318,0.000990,0.000987,0.000840,0.000380,0.000536,0.000975,0.000576,0.000444,0.000286
giUnmuted32 ftgen 0,0,4096,10,0.153577,0.222613,0.376395,0.526417,0.515836,0.662033,0.484716,0.943689,0.936088,0.683402,0.940687,0.666224,0.399824,0.298609,0.378373,0.633100,0.213897,0.505597,0.312328,0.232655,0.144484,0.129531,0.225201,0.231697,0.116577,0.093467,0.083941,0.021798,0.081229,0.048477,0.071105,0.034486,0.057723,0.028194,0.029190,0.019811,0.027128,0.025539,0.014725,0.015158,0.019471,0.022215,0.011935,0.015510,0.012182,0.010768,0.007979,0.010226,0.004972,0.009394,0.006760,0.006326,0.005823,0.003912,0.005859,0.001846,0.002697,0.003683,0.003892,0.002554,0.002904,0.004195,0.000672,0.001703,0.001212,0.002070,0.001499,0.001454,0.002153,0.001936,0.000769,0.001242,0.001260,0.000672,0.000842,0.001179,0.001096,0.001223,0.001090,0.001644,0.001218,0.000337,0.000969,0.000736,0.000734,0.000228,0.000786,0.000788,0.000390,0.000223,0.001065,0.000755,0.000257,0.000513,0.000711,0.000538,0.000385,0.000437,0.000469,0.000430
giUnmuted33 ftgen 0,0,4096,10,0.199259,0.293112,0.678605,0.427095,0.796552,0.592920,0.832602,0.749712,0.753129,0.956136,0.706813,0.595711,0.292833,0.370551,0.334616,0.299621,0.458159,0.299313,0.277013,0.116169,0.127934,0.137952,0.174017,0.060317,0.067909,0.049889,0.073748,0.061114,0.028611,0.050743,0.022684,0.016755,0.015577,0.022867,0.023917,0.026384,0.015817,0.016226,0.020209,0.017937,0.014795,0.014935,0.011316,0.011197,0.003987,0.006306,0.007657,0.008754,0.008017,0.001430,0.002030,0.006426,0.004673,0.001697,0.003547,0.003128,0.001704,0.002225,0.003744,0.001255,0.001218,0.001706,0.000784,0.001874,0.002414,0.001450,0.001425,0.001431,0.001039,0.000512,0.001115,0.001012,0.000767,0.001368,0.000891,0.001254,0.000438,0.001473,0.000396,0.000944,0.000406,0.000645,0.000805,0.000497,0.000596,0.000632,0.000660,0.000453,0.000657,0.000437,0.000597,0.000534,0.000231,0.000579,0.000359,0.000597,0.000289,0.000515,0.000474,0.000508
giUnmuted34 ftgen 0,0,4096,10,0.156283,0.263433,0.503588,0.547226,0.458841,0.440476,0.745137,0.926771,0.703339,0.326809,0.455305,0.144506,0.578160,0.557536,0.390538,0.373849,0.349519,0.171391,0.136852,0.175680,0.170348,0.095999,0.101795,0.067277,0.069750,0.038210,0.062274,0.031281,0.045966,0.025999,0.019665,0.025196,0.019584,0.017978,0.018616,0.019068,0.009254,0.008323,0.009829,0.007950,0.009281,0.004125,0.006169,0.005516,0.008089,0.004623,0.003210,0.003435,0.002272,0.003102,0.002101,0.002482,0.000800,0.001308,0.001448,0.002671,0.000440,0.001102,0.000625,0.001246,0.000739,0.001198,0.000853,0.000982,0.000459,0.000870,0.000679,0.000793,0.000524,0.000192,0.000634,0.000314,0.000778,0.000405,0.000532,0.000235,0.000824,0.000204,0.000655,0.000308,0.000375,0.000408,0.000459,0.000698,0.000335,0.000370,0.000416,0.000463,0.000712,0.000202,0.000604,0.000194,0.000642,0.000492,0.000566,0.000304,0.000430,0.000666,0.000460,0.000725
giUnmuted35 ftgen 0,0,4096,10,0.109719,0.205679,0.327171,0.211979,0.275588,0.441424,0.909739,0.954713,0.704080,0.558176,0.412328,0.520298,0.672399,0.332547,0.403159,0.369356,0.239488,0.211806,0.231043,0.127727,0.249776,0.131377,0.104229,0.096938,0.102833,0.065079,0.066313,0.070405,0.083568,0.043975,0.062456,0.056332,0.053849,0.056551,0.038084,0.032551,0.031631,0.024900,0.019231,0.022793,0.025653,0.029848,0.012080,0.012343,0.008958,0.007429,0.009658,0.011782,0.006432,0.008668,0.004940,0.004961,0.011409,0.003677,0.005188,0.006053,0.002706,0.005660,0.005030,0.003473,0.004147,0.002260,0.003165,0.004611,0.001572,0.002973,0.001712,0.001380,0.002403,0.001241,0.001415,0.002559,0.000850,0.001416,0.000832,0.001164,0.001932,0.000912,0.001026,0.000996,0.000473,0.001056,0.000666,0.000709,0.000940,0.000380,0.000715,0.000818,0.000554,0.000733,0.000482,0.000638,0.000669,0.000419,0.000706,0.000551,0.000449,0.000615,0.000441,0.000574
giUnmuted37 ftgen 0,0,4096,10,0.163591,0.404564,0.575089,0.472316,0.486294,0.822510,0.806591,0.969411,0.362995,0.433080,0.496749,0.467537,0.467839,0.267451,0.183238,0.218200,0.199060,0.155508,0.175596,0.093844,0.131201,0.054473,0.064991,0.054622,0.028696,0.047964,0.032300,0.032288,0.027946,0.028929,0.025863,0.016471,0.015090,0.011768,0.012035,0.007896,0.009150,0.007422,0.006861,0.006328,0.006340,0.003206,0.001979,0.001196,0.003410,0.003344,0.001708,0.001304,0.001426,0.001391,0.002381,0.001136,0.000501,0.000621,0.001295,0.001362,0.001331,0.000559,0.000199,0.000503,0.000879,0.001032,0.000443,0.000370,0.000358,0.000616,0.000749,0.000331,0.000239,0.000475,0.000621,0.000552,0.000280,0.000188,0.000404,0.000434,0.000385,0.000500,0.000299,0.000339,0.000250,0.000436,0.000389,0.000319,0.000252,0.000279,0.000331,0.000496,0.000362,0.000299,0.000301,0.000389,0.000340,0.000331,0.000305,0.000321,0.000282,0.000312,0.000322,0.000305
giUnmuted38 ftgen 0,0,4096,10,0.088638,0.393952,0.219528,0.233796,0.390552,0.873953,0.973908,0.452420,0.406845,0.369372,0.418449,0.275682,0.233818,0.174596,0.176589,0.199987,0.084305,0.099145,0.066017,0.092595,0.045456,0.041233,0.057805,0.035677,0.029982,0.021224,0.023785,0.011487,0.013368,0.009656,0.009504,0.010544,0.006813,0.005152,0.006761,0.004720,0.005569,0.005772,0.003926,0.003876,0.001447,0.001937,0.001824,0.001260,0.001196,0.001056,0.001716,0.000597,0.000870,0.000129,0.001182,0.000562,0.000716,0.000558,0.000346,0.000458,0.000280,0.000472,0.000305,0.000628,0.000215,0.000532,0.000286,0.000686,0.000363,0.000433,0.000417,0.000257,0.000323,0.000182,0.000362,0.000182,0.000308,0.000090,0.000457,0.000168,0.000301,0.000207,0.000232,0.000295,0.000234,0.000253,0.000115,0.000278,0.000128,0.000246,0.000142,0.000206,0.000208,0.000168,0.000245,0.000156,0.000184,0.000153,0.000195,0.000110,0.000237,0.000120,0.000147,0.000197
giUnmuted39 ftgen 0,0,4096,10,0.072477,0.251689,0.379198,0.380111,0.725478,0.949509,0.692901,0.578175,0.268676,0.362999,0.292393,0.221151,0.135379,0.142198,0.166308,0.080654,0.080723,0.055948,0.052355,0.045652,0.019205,0.017803,0.021033,0.012636,0.010918,0.015171,0.012617,0.010832,0.009232,0.006483,0.005626,0.003851,0.002409,0.001860,0.003662,0.003232,0.003431,0.001824,0.002610,0.001564,0.001117,0.000540,0.000571,0.001003,0.001335,0.000552,0.000678,0.000584,0.001061,0.000360,0.000733,0.000138,0.000610,0.000585,0.000395,0.000329,0.000646,0.000491,0.000414,0.000402,0.000119,0.000403,0.000173,0.000409,0.000081,0.000323,0.000367,0.000312,0.000184,0.000390,0.000085,0.000295,0.000195,0.000268,0.000142,0.000267,0.000047,0.000196,0.000144,0.000201,0.000119,0.000264,0.000129,0.000192,0.000106,0.000089,0.000146,0.000206,0.000209,0.000106,0.000142,0.000140,0.000184,0.000083,0.000036,0.000158,0.000137,0.000135,0.000284,0.000115
giUnmuted40 ftgen 0,0,4096,10,0.225959,0.669389,0.383703,0.337797,0.897874,0.917315,0.679617,0.847733,0.413981,0.550916,0.384995,0.299373,0.229249,0.175955,0.251333,0.151143,0.072766,0.141216,0.038843,0.059075,0.024251,0.038600,0.034595,0.024303,0.012174,0.014682,0.023313,0.013042,0.011554,0.011010,0.010318,0.007734,0.007817,0.007700,0.004889,0.002809,0.002953,0.002732,0.002419,0.002929,0.001031,0.001758,0.002569,0.001934,0.000195,0.000657,0.000465,0.000529,0.000132,0.000495,0.000114,0.000374,0.000066,0.000383,0.000298,0.000374,0.000325,0.000203,0.000379,0.000195,0.000256,0.000055,0.000261,0.000143,0.000303,0.000225,0.000165,0.000287,0.000154,0.000362,0.000079,0.000339,0.000076,0.000304,0.000074,0.000377,0.000110,0.000203,0.000160,0.000220,0.000170,0.000246,0.000154,0.000238,0.000107,0.000233,0.000176,0.000143,0.000173,0.000149,0.000209,0.000112,0.000150,0.000111,0.000112,0.000142,0.000096,0.000126,0.000128,0.000116
giUnmuted41 ftgen 0,0,4096,10,0.097703,0.458893,0.214092,0.303131,0.643075,0.941287,0.605134,0.446467,0.333405,0.230717,0.265198,0.183918,0.159675,0.159325,0.106876,0.068197,0.087184,0.044215,0.041701,0.023995,0.024583,0.018444,0.017021,0.012909,0.009709,0.009292,0.005646,0.005169,0.005487,0.004703,0.003198,0.001953,0.002304,0.001896,0.001346,0.001214,0.000950,0.001006,0.000408,0.000899,0.000811,0.000603,0.000416,0.000186,0.000451,0.000580,0.000293,0.000134,0.000491,0.000610,0.000365,0.000202,0.000238,0.000284,0.000383,0.000318,0.000171,0.000207,0.000319,0.000262,0.000156,0.000201,0.000269,0.000277,0.000189,0.000255,0.000252,0.000251,0.000238,0.000176,0.000262,0.000221,0.000254,0.000156,0.000243,0.000273,0.000203,0.000144,0.000205,0.000227,0.000273,0.000231,0.000129,0.000148,0.000263,0.000231,0.000178,0.000240,0.000111,0.000150,0.000125,0.000253,0.000117,0.000217,0.000249,0.000167,0.000129,0.000153,0.000156,0.000166
giUnmuted42 ftgen 0,0,4096,10,0.124305,0.470693,0.408472,0.419845,0.726811,0.899803,0.320069,0.227380,0.170542,0.278327,0.087448,0.075657,0.070450,0.011278,0.027231,0.027560,0.017657,0.007864,0.003498,0.005879,0.002004,0.003338,0.002302,0.002026,0.001182,0.001269,0.001074,0.000364,0.000612,0.000235,0.000662,0.000064,0.000466,0.000427,0.000278,0.000267,0.000353,0.000292,0.000282,0.000261,0.000314,0.000191,0.000121,0.000300,0.000198,0.000184,0.000171,0.000233,0.000128,0.000158,0.000242,0.000129,0.000168,0.000158,0.000221,0.000105,0.000151,0.000134,0.000034,0.000239,0.000107,0.000190,0.000107,0.000133,0.000170,0.000077,0.000159,0.000133,0.000084,0.000139,0.000186,0.000114,0.000238,0.000054,0.000180,0.000124,0.000143,0.000260,0.000043,0.000132,0.000091,0.000030,0.000116,0.000080,0.000072,0.000057,0.000105,0.000076,0.000116,0.000065,0.000171,0.000053,0.000072,0.000074,0.000062,0.000114,0.000055,0.000095,0.000113,0.000044
giUnmuted43 ftgen 0,0,4096,10,0.125142,0.748133,0.488996,0.937672,0.810384,0.425414,0.265649,0.228407,0.170598,0.111821,0.121106,0.061239,0.019591,0.017183,0.019865,0.007807,0.001783,0.002592,0.001011,0.003527,0.002854,0.000493,0.002776,0.000788,0.001901,0.002961,0.000261,0.000981,0.000309,0.001260,0.001590,0.000419,0.000880,0.000853,0.000491,0.001106,0.000390,0.000507,0.000664,0.000732,0.000588,0.000322,0.000375,0.000612,0.000570,0.000284,0.000276,0.000346,0.000470,0.000510,0.000208,0.000313,0.000421,0.000286,0.000339,0.000330,0.000236,0.000285,0.000339,0.000333,0.000325,0.000301,0.000405,0.000289,0.000185,0.000254,0.000429,0.000220,0.000088,0.000342,0.000434,0.000323,0.000114,0.000423,0.000294,0.000189,0.000274,0.000329,0.000150,0.000193,0.000230,0.000213,0.000130,0.000222,0.000238,0.000078,0.000370,0.000313,0.000161,0.000338,0.000185,0.000246,0.000194,0.000179,0.000174,0.000154,0.000140,0.000235,0.000115,0.000258
giUnmuted44 ftgen 0,0,4096,10,0.302063,0.713050,0.452426,0.930055,0.680724,0.256993,0.187429,0.166946,0.128520,0.034480,0.011033,0.010095,0.010484,0.013378,0.003779,0.001842,0.002372,0.003682,0.002032,0.001052,0.001063,0.001158,0.000116,0.001123,0.001585,0.000539,0.001398,0.000809,0.000447,0.000282,0.000640,0.000371,0.000503,0.000484,0.000108,0.000162,0.000180,0.000319,0.000232,0.000211,0.000045,0.000246,0.000082,0.000069,0.000149,0.000105,0.000143,0.000097,0.000032,0.000091,0.000142,0.000202,0.000052,0.000133,0.000185,0.000054,0.000154,0.000137,0.000181,0.000042,0.000135,0.000129,0.000100,0.000108,0.000143,0.000065,0.000082,0.000182,0.000049,0.000189,0.000083,0.000061,0.000143,0.000078,0.000056,0.000079,0.000120,0.000037,0.000098,0.000063,0.000110,0.000162,0.000076,0.000078,0.000059,0.000095,0.000049,0.000104,0.000088,0.000117,0.000133,0.000031,0.000103,0.000040,0.000058,0.000025,0.000024,0.000077,0.000069,0.000155
giUnmuted45 ftgen 0,0,4096,10,0.233846,0.388855,0.488775,0.775865,0.964456,0.501325,0.291914,0.282804,0.153115,0.120898,0.100772,0.061525,0.021515,0.015412,0.010305,0.004386,0.004785,0.007854,0.004759,0.004311,0.003465,0.002391,0.000787,0.001491,0.000948,0.000812,0.000611,0.000750,0.000529,0.000347,0.000811,0.000462,0.000235,0.000129,0.000100,0.000270,0.000180,0.000344,0.000298,0.000283,0.000076,0.000033,0.000229,0.000057,0.000107,0.000302,0.000392,0.000250,0.000158,0.000123,0.000211,0.000176,0.000204,0.000052,0.000045,0.000073,0.000098,0.000048,0.000042,0.000062,0.000184,0.000108,0.000087,0.000108,0.000246,0.000201,0.000114,0.000035,0.000098,0.000163,0.000193,0.000214,0.000220,0.000138,0.000157,0.000201,0.000169,0.000255,0.000225,0.000166,0.000090,0.000040,0.000130,0.000094,0.000063,0.000032,0.000089,0.000092,0.000126,0.000045,0.000031,0.000089,0.000106,0.000113,0.000102,0.000097,0.000078,0.000087,0.000116,0.000073
giUnmuted46 ftgen 0,0,4096,10,0.278221,0.573695,0.445852,0.941888,0.349456,0.146739,0.401320,0.181176,0.109258,0.079677,0.027531,0.020462,0.010172,0.004976,0.008831,0.004459,0.003116,0.005925,0.003482,0.001955,0.000824,0.000849,0.000990,0.000555,0.000572,0.000248,0.000282,0.000312,0.000425,0.000324,0.000073,0.000533,0.000097,0.000455,0.000267,0.000126,0.000125,0.000100,0.000382,0.000051,0.000129,0.000240,0.000307,0.000083,0.000247,0.000140,0.000183,0.000087,0.000275,0.000383,0.000065,0.000167,0.000138,0.000204,0.000147,0.000389,0.000087,0.000087,0.000085,0.000041,0.000137,0.000224,0.000036,0.000053,0.000195,0.000205,0.000101,0.000065,0.000194,0.000064,0.000193,0.000258,0.000182,0.000073,0.000094,0.000173,0.000055,0.000075,0.000093,0.000129,0.000045,0.000085,0.000107,0.000117,0.000074,0.000107,0.000122,0.000085,0.000048,0.000110,0.000056,0.000075,0.000100,0.000057,0.000058,0.000070,0.000058,0.000062,0.000024,0.000053
giUnmuted48 ftgen 0,0,4096,10,0.452762,0.304359,0.946745,0.826937,0.631116,0.540533,0.395792,0.137892,0.089376,0.056327,0.024940,0.018700,0.015991,0.009294,0.006775,0.006495,0.001878,0.002247,0.000868,0.001248,0.001564,0.001249,0.001144,0.001326,0.001103,0.000911,0.000811,0.000899,0.000763,0.000818,0.000796,0.000855,0.000820,0.000710,0.000624,0.000684,0.000656,0.000643,0.000581,0.000503,0.000628,0.000640,0.000595,0.000471,0.000287,0.000521,0.000550,0.000603,0.000454,0.000276,0.000515,0.000524,0.000515,0.000548,0.000414,0.000417,0.000623,0.000306,0.000257,0.000314,0.000328,0.000356,0.000371,0.000363,0.000334,0.000261,0.000258,0.000294,0.000248,0.000426,0.000222,0.000250,0.000403,0.000222,0.000365,0.000158,0.000358,0.000267,0.000252,0.000328,0.000186,0.000291,0.000280,0.000198,0.000269,0.000258,0.000279,0.000252,0.000236,0.000257,0.000228,0.000248,0.000225,0.000222,0.000211,0.000262,0.000206,0.000219,0.000216,0.000223
giUnmuted49 ftgen 0,0,4096,10,0.384255,0.558888,0.714667,0.956957,0.356637,0.233667,0.190339,0.102786,0.061868,0.032079,0.017290,0.009522,0.005673,0.005487,0.002456,0.002036,0.000425,0.001796,0.002623,0.001222,0.000730,0.000805,0.000937,0.000709,0.000258,0.000626,0.000855,0.000810,0.000503,0.000376,0.000366,0.000792,0.000435,0.000475,0.000434,0.000367,0.000729,0.000327,0.000400,0.000367,0.000285,0.000247,0.000517,0.000305,0.000346,0.000356,0.000254,0.000337,0.000385,0.000231,0.000456,0.000215,0.000106,0.000201,0.000338,0.000284,0.000295,0.000166,0.000172,0.000132,0.000143,0.000401,0.000352,0.000229,0.000228,0.000272,0.000210,0.000234,0.000250,0.000182,0.000231,0.000084,0.000152,0.000170,0.000231,0.000207,0.000174,0.000130,0.000145,0.000280,0.000219,0.000185,0.000135,0.000104,0.000157,0.000222,0.000197,0.000090,0.000129,0.000142,0.000121,0.000183,0.000157,0.000120,0.000130,0.000101,0.000113,0.000151,0.000146,0.000114
giUnmuted50 ftgen 0,0,4096,10,0.446591,0.477584,0.426492,0.970753,0.374135,0.215282,0.306904,0.140851,0.070867,0.038834,0.002282,0.017849,0.007741,0.003585,0.006831,0.006003,0.003705,0.001554,0.003344,0.000137,0.001907,0.000924,0.001095,0.001011,0.000580,0.000998,0.001204,0.000696,0.001058,0.000873,0.000742,0.000768,0.000685,0.000814,0.000666,0.000827,0.000659,0.000713,0.000613,0.000584,0.000711,0.000452,0.000535,0.000517,0.000488,0.000572,0.000501,0.000577,0.000468,0.000403,0.000316,0.000555,0.000474,0.000513,0.000541,0.000421,0.000425,0.000418,0.000385,0.000321,0.000462,0.000415,0.000342,0.000312,0.000347,0.000323,0.000339,0.000320,0.000298,0.000318,0.000268,0.000265,0.000232,0.000302,0.000354,0.000263,0.000304,0.000222,0.000312,0.000311,0.000342,0.000363,0.000274,0.000300,0.000250,0.000296,0.000254,0.000287,0.000249,0.000199,0.000219,0.000195,0.000210,0.000230,0.000217,0.000181,0.000209,0.000200,0.000218,0.000224
giUnmuted51 ftgen 0,0,4096,10,0.287446,0.531276,0.971557,0.630155,0.300795,0.250731,0.098819,0.107126,0.053101,0.062126,0.011011,0.012837,0.004178,0.006909,0.004394,0.002253,0.002430,0.002140,0.001992,0.000671,0.000287,0.000471,0.000271,0.000130,0.000051,0.000046,0.000110,0.000021,0.000075,0.000192,0.000076,0.000065,0.000131,0.000125,0.000081,0.000150,0.000030,0.000017,0.000085,0.000079,0.000026,0.000096,0.000129,0.000153,0.000110,0.000071,0.000054,0.000060,0.000076,0.000043,0.000064,0.000017,0.000052,0.000117,0.000038,0.000047,0.000024,0.000058,0.000033,0.000021,0.000042,0.000074,0.000063,0.000027,0.000066,0.000039,0.000035,0.000030,0.000050,0.000068,0.000048,0.000058,0.000037,0.000069,0.000030,0.000032,0.000081,0.000067,0.000051,0.000033,0.000053,0.000067,0.000038,0.000025,0.000009,0.000037,0.000026,0.000021,0.000009,0.000039,0.000025,0.000029,0.000019,0.000007,0.000014,0.000020,0.000025,0.000019,0.000024,0.000011
giUnmuted52 ftgen 0,0,4096,10,0.780315,0.602043,0.971703,0.598540,0.419892,0.250576,0.135924,0.028914,0.007076,0.002504,0.001073,0.002881,0.002091,0.001033,0.001393,0.001759,0.002069,0.001160,0.001046,0.000119,0.000300,0.000679,0.000689,0.000161,0.000393,0.000523,0.000306,0.000179,0.000312,0.000431,0.000186,0.000165,0.000492,0.000276,0.000209,0.000416,0.000299,0.000153,0.000254,0.000350,0.000169,0.000155,0.000291,0.000165,0.000059,0.000258,0.000299,0.000257,0.000195,0.000128,0.000254,0.000142,0.000138,0.000172,0.000115,0.000086,0.000226,0.000168,0.000117,0.000109,0.000203,0.000108,0.000106,0.000096,0.000163,0.000088,0.000138,0.000083,0.000076,0.000118,0.000119,0.000130,0.000104,0.000106,0.000157,0.000102,0.000046,0.000053,0.000071,0.000098,0.000102,0.000096,0.000078,0.000080,0.000075,0.000076,0.000080,0.000077,0.000073,0.000056,0.000081,0.000076,0.000093,0.000054,0.000098,0.000069,0.000047,0.000076,0.000050,0.000039
giUnmuted53 ftgen 0,0,4096,10,0.372046,0.398945,0.933433,0.303716,0.202319,0.090480,0.045828,0.011018,0.009763,0.001157,0.003828,0.006742,0.001634,0.000320,0.001952,0.001823,0.000292,0.001455,0.000996,0.000511,0.001143,0.001002,0.000470,0.000777,0.000907,0.000648,0.000685,0.000677,0.000506,0.000454,0.000526,0.000488,0.000439,0.000473,0.000508,0.000505,0.000540,0.000447,0.000407,0.000416,0.000398,0.000364,0.000198,0.000374,0.000324,0.000391,0.000404,0.000361,0.000265,0.000399,0.000341,0.000282,0.000274,0.000277,0.000232,0.000236,0.000232,0.000234,0.000221,0.000241,0.000245,0.000215,0.000179,0.000214,0.000247,0.000215,0.000207,0.000202,0.000207,0.000195,0.000189,0.000164,0.000193,0.000172,0.000163,0.000189,0.000196,0.000183,0.000169,0.000170,0.000159,0.000177,0.000172,0.000148,0.000148,0.000174,0.000160,0.000170,0.000159,0.000159,0.000153,0.000140,0.000152,0.000124,0.000137,0.000135,0.000132,0.000111,0.000136,0.000145
giUnmuted55 ftgen 0,0,4096,10,0.553293,0.970661,0.775964,0.469479,0.247296,0.167610,0.076609,0.033410,0.020341,0.014035,0.008333,0.004948,0.005841,0.001285,0.003257,0.000737,0.001858,0.001036,0.001645,0.001036,0.001103,0.001137,0.001058,0.001046,0.000830,0.000920,0.000754,0.000986,0.000805,0.000941,0.000725,0.000785,0.000639,0.000792,0.000693,0.000710,0.000502,0.000630,0.000647,0.000611,0.000541,0.000612,0.000564,0.000535,0.000526,0.000550,0.000561,0.000452,0.000489,0.000502,0.000455,0.000494,0.000395,0.000489,0.000391,0.000455,0.000426,0.000401,0.000395,0.000424,0.000366,0.000409,0.000441,0.000420,0.000368,0.000384,0.000385,0.000372,0.000378,0.000347,0.000334,0.000364,0.000324,0.000342,0.000334,0.000331,0.000328,0.000319,0.000317,0.000303,0.000307,0.000324,0.000295,0.000316,0.000284,0.000293,0.000301,0.000292,0.000308,0.000294,0.000306,0.000291,0.000290,0.000281,0.000282,0.000284,0.000276,0.000270,0.000271,0.000271
giUnmuted56 ftgen 0,0,4096,10,0.400932,0.968520,0.498998,0.389257,0.178633,0.106598,0.036188,0.017795,0.012342,0.000119,0.001239,0.002906,0.000849,0.000166,0.001155,0.001166,0.000733,0.000431,0.000261,0.000740,0.000954,0.000788,0.000425,0.000292,0.000215,0.000111,0.000367,0.000116,0.000157,0.000202,0.000291,0.000325,0.000311,0.000291,0.000228,0.000258,0.000334,0.000245,0.000207,0.000181,0.000101,0.000272,0.000256,0.000160,0.000202,0.000191,0.000135,0.000209,0.000287,0.000145,0.000174,0.000142,0.000151,0.000158,0.000211,0.000156,0.000085,0.000205,0.000120,0.000149,0.000178,0.000110,0.000128,0.000155,0.000127,0.000078,0.000172,0.000112,0.000089,0.000134,0.000141,0.000080,0.000122,0.000145,0.000057,0.000148,0.000118,0.000076,0.000098,0.000141,0.000071,0.000118,0.000134,0.000051,0.000121,0.000094,0.000107,0.000067,0.000125,0.000091,0.000070,0.000129,0.000072,0.000073,0.000102,0.000110,0.000065,0.000125,0.000102,0.000073
giUnmuted57 ftgen 0,0,4096,10,0.291306,0.935026,0.610503,0.348987,0.214608,0.091185,0.014377,0.010820,0.009119,0.004516,0.002313,0.001529,0.002367,0.001896,0.001988,0.001276,0.001387,0.001297,0.001665,0.001145,0.001069,0.001265,0.001014,0.000912,0.000914,0.000884,0.001057,0.000657,0.000966,0.000629,0.000867,0.000822,0.000934,0.000930,0.000759,0.000705,0.000586,0.000610,0.000554,0.000522,0.000534,0.000515,0.000527,0.000475,0.000482,0.000475,0.000461,0.000481,0.000430,0.000442,0.000430,0.000434,0.000438,0.000393,0.000406,0.000411,0.000359,0.000372,0.000357,0.000351,0.000349,0.000324,0.000336,0.000324,0.000314,0.000303,0.000301,0.000285,0.000290,0.000281,0.000290,0.000278,0.000275,0.000275,0.000263,0.000266,0.000238,0.000227,0.000236,0.000240,0.000236,0.000232,0.000222,0.000228,0.000230,0.000219,0.000211,0.000210,0.000218,0.000220,0.000216,0.000205,0.000201,0.000207,0.000204,0.000198,0.000198,0.000199,0.000198,0.000204
giUnmuted58 ftgen 0,0,4096,10,0.424856,0.955425,0.300308,0.167209,0.106790,0.022221,0.009677,0.003945,0.002919,0.000972,0.002109,0.001042,0.000179,0.000802,0.000783,0.000469,0.000622,0.000452,0.000340,0.000342,0.000529,0.000442,0.000227,0.000537,0.000344,0.000279,0.000438,0.000291,0.000255,0.000281,0.000355,0.000226,0.000212,0.000190,0.000247,0.000230,0.000217,0.000203,0.000212,0.000229,0.000161,0.000199,0.000193,0.000163,0.000189,0.000156,0.000148,0.000176,0.000153,0.000136,0.000144,0.000163,0.000148,0.000142,0.000156,0.000124,0.000124,0.000128,0.000131,0.000128,0.000116,0.000119,0.000096,0.000126,0.000103,0.000119,0.000108,0.000098,0.000108,0.000100,0.000109,0.000095,0.000104,0.000104,0.000089,0.000098,0.000092,0.000092,0.000094,0.000088,0.000084,0.000083,0.000085,0.000085,0.000078,0.000083,0.000080,0.000081,0.000078,0.000077,0.000082,0.000082,0.000079,0.000080,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giUnmuted59 ftgen 0,0,4096,10,0.359547,0.978853,0.629720,0.355319,0.173057,0.062497,0.018952,0.015355,0.001883,0.003244,0.000776,0.001277,0.001682,0.000930,0.001021,0.000861,0.000797,0.000784,0.000905,0.000938,0.000691,0.000529,0.000651,0.000668,0.000567,0.000394,0.000564,0.000553,0.000563,0.000374,0.000399,0.000503,0.000337,0.000498,0.000410,0.000391,0.000452,0.000316,0.000406,0.000293,0.000417,0.000301,0.000349,0.000279,0.000358,0.000270,0.000271,0.000287,0.000270,0.000252,0.000235,0.000266,0.000229,0.000223,0.000239,0.000206,0.000237,0.000201,0.000212,0.000207,0.000197,0.000204,0.000185,0.000193,0.000174,0.000185,0.000168,0.000173,0.000159,0.000158,0.000167,0.000156,0.000160,0.000158,0.000153,0.000144,0.000156,0.000152,0.000147,0.000148,0.000140,0.000141,0.000134,0.000134,0.000132,0.000133,0.000132,0.000129,0.000139,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giUnmuted60 ftgen 0,0,4096,10,0.261374,0.958638,0.539283,0.255231,0.147692,0.058306,0.039086,0.029455,0.008523,0.006366,0.003368,0.001295,0.000525,0.000726,0.000847,0.000590,0.000475,0.000526,0.000505,0.000443,0.000320,0.000407,0.000362,0.000443,0.000436,0.000378,0.000327,0.000302,0.000313,0.000302,0.000287,0.000249,0.000268,0.000271,0.000288,0.000219,0.000205,0.000188,0.000206,0.000244,0.000213,0.000204,0.000153,0.000138,0.000190,0.000183,0.000175,0.000180,0.000157,0.000145,0.000159,0.000168,0.000161,0.000138,0.000144,0.000137,0.000134,0.000133,0.000132,0.000126,0.000126,0.000129,0.000119,0.000120,0.000108,0.000109,0.000110,0.000111,0.000101,0.000092,0.000091,0.000098,0.000100,0.000096,0.000094,0.000096,0.000089,0.000087,0.000090,0.000085,0.000088,0.000082,0.000081,0.000085,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giUnmuted61 ftgen 0,0,4096,10,0.417597,0.966833,0.416727,0.180794,0.059064,0.009951,0.012483,0.005985,0.000936,0.001803,0.000655,0.001165,0.001044,0.000808,0.000730,0.000802,0.000431,0.000761,0.000635,0.000600,0.000672,0.000449,0.000439,0.000419,0.000423,0.000466,0.000371,0.000301,0.000340,0.000369,0.000332,0.000355,0.000303,0.000303,0.000266,0.000327,0.000298,0.000235,0.000293,0.000250,0.000196,0.000286,0.000226,0.000187,0.000270,0.000214,0.000201,0.000218,0.000195,0.000204,0.000206,0.000186,0.000183,0.000183,0.000170,0.000171,0.000168,0.000166,0.000163,0.000161,0.000161,0.000147,0.000147,0.000142,0.000139,0.000140,0.000142,0.000142,0.000138,0.000137,0.000135,0.000131,0.000129,0.000130,0.000131,0.000129,0.000128,0.000128,0.000129,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giUnmuted62 ftgen 0,0,4096,10,0.619523,0.961285,0.413119,0.108674,0.024175,0.002125,0.004476,0.003247,0.001352,0.001965,0.000417,0.001471,0.001777,0.000808,0.001622,0.001287,0.001022,0.001266,0.000711,0.000939,0.000934,0.000662,0.000613,0.000589,0.000621,0.000570,0.000567,0.000537,0.000348,0.000623,0.000348,0.000581,0.000430,0.000433,0.000451,0.000404,0.000403,0.000380,0.000391,0.000385,0.000372,0.000351,0.000360,0.000320,0.000325,0.000307,0.000314,0.000267,0.000307,0.000276,0.000259,0.000269,0.000263,0.000231,0.000245,0.000235,0.000254,0.000203,0.000228,0.000209,0.000210,0.000212,0.000201,0.000201,0.000200,0.000193,0.000197,0.000181,0.000186,0.000191,0.000187,0.000179,0.000186,0.000183,0.000156,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giUnmuted63 ftgen 0,0,4096,10,0.930506,0.830293,0.419689,0.124916,0.038385,0.024593,0.004794,0.004719,0.003135,0.000873,0.001282,0.002043,0.001147,0.000967,0.000988,0.000678,0.000173,0.000513,0.000302,0.000290,0.000411,0.000762,0.000371,0.000406,0.000100,0.000164,0.000359,0.000407,0.000105,0.000293,0.000391,0.000246,0.000158,0.000094,0.000092,0.000176,0.000072,0.000179,0.000079,0.000130,0.000159,0.000270,0.000068,0.000103,0.000061,0.000031,0.000141,0.000112,0.000103,0.000058,0.000084,0.000104,0.000104,0.000093,0.000106,0.000081,0.000073,0.000109,0.000082,0.000051,0.000083,0.000073,0.000065,0.000063,0.000070,0.000082,0.000059,0.000073,0.000066,0.000057,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giUnmuted64 ftgen 0,0,4096,10,0.972240,0.962179,0.327494,0.131881,0.030060,0.012594,0.010159,0.006424,0.001103,0.003403,0.002598,0.002451,0.001553,0.001352,0.001133,0.001503,0.001006,0.001536,0.001309,0.001202,0.000888,0.001138,0.001263,0.001203,0.001186,0.000543,0.000766,0.000841,0.000896,0.000659,0.000695,0.000682,0.000638,0.000554,0.000597,0.000599,0.000595,0.000633,0.000510,0.000491,0.000552,0.000483,0.000426,0.000553,0.000423,0.000448,0.000409,0.000425,0.000270,0.000375,0.000420,0.000306,0.000414,0.000322,0.000332,0.000333,0.000282,0.000349,0.000328,0.000344,0.000339,0.000347,0.000316,0.000285,0.000300,0.000263,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giUnmuted65 ftgen 0,0,4096,10,0.946888,0.960545,0.184774,0.018883,0.010446,0.014745,0.001268,0.004635,0.003175,0.000946,0.004142,0.002215,0.000862,0.002500,0.001973,0.001800,0.000634,0.001025,0.001812,0.001970,0.001697,0.001360,0.000855,0.000747,0.001079,0.000849,0.000880,0.000574,0.000730,0.000688,0.000981,0.000337,0.000974,0.000733,0.000756,0.000555,0.000861,0.000545,0.000749,0.000475,0.000535,0.000441,0.000525,0.000483,0.000584,0.000565,0.000414,0.000551,0.000370,0.000472,0.000237,0.000446,0.000374,0.000619,0.000426,0.000403,0.000396,0.000408,0.000394,0.000340,0.000296,0.000324,0.000299,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giUnmuted67 ftgen 0,0,4096,10,0.904104,0.687203,0.074239,0.008596,0.008832,0.003406,0.003870,0.000671,0.001852,0.001635,0.001087,0.000499,0.001292,0.000964,0.000856,0.000780,0.000614,0.000711,0.000618,0.000934,0.000903,0.000581,0.000840,0.000399,0.000489,0.000328,0.000505,0.000515,0.000432,0.000365,0.000364,0.000454,0.000390,0.000377,0.000361,0.000314,0.000378,0.000357,0.000330,0.000270,0.000342,0.000244,0.000217,0.000204,0.000235,0.000181,0.000230,0.000167,0.000212,0.000212,0.000203,0.000218,0.000163,0.000210,0.000170,0.000173,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giUnmuted69 ftgen 0,0,4096,10,0.944934,0.293223,0.066919,0.017808,0.007234,0.002307,0.002545,0.000739,0.000556,0.000511,0.000549,0.000723,0.000242,0.000601,0.000453,0.000316,0.000324,0.000312,0.000164,0.000264,0.000131,0.000093,0.000233,0.000211,0.000152,0.000187,0.000090,0.000233,0.000171,0.000154,0.000116,0.000082,0.000095,0.000121,0.000103,0.000074,0.000094,0.000088,0.000098,0.000122,0.000105,0.000080,0.000084,0.000079,0.000074,0.000104,0.000062,0.000071,0.000065,0.000064,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giUnmuted70 ftgen 0,0,4096,10,0.943312,0.441802,0.052080,0.022643,0.001043,0.002473,0.002554,0.002310,0.001720,0.000881,0.001191,0.001619,0.000857,0.000858,0.001539,0.000697,0.000554,0.000498,0.000409,0.000174,0.000105,0.000147,0.000252,0.000549,0.000348,0.000262,0.000426,0.000336,0.000226,0.000305,0.000193,0.000333,0.000263,0.000183,0.000164,0.000171,0.000202,0.000221,0.000188,0.000137,0.000129,0.000098,0.000100,0.000144,0.000071,0.000094,0.000086,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
giwavemapUnmuted	ftgen	0,0,128,-27, 0,0, 22,0, 23,1, 24,2, 25,3, 26,4, 27,5, 28,6, 30,7, 31,8, 32,9, 33,10, 34,11, 35,12, 37,13, 38,14, 39,15, 40,16, 41,17, 42,18, 43,19, 44,20, 45,21, 46,22, 48,23, 49,24, 50,25, 51,26, 52,27, 53,28, 55,29, 56,30, 57,31, 58,32, 59,33, 60,34, 61,35, 62,36, 63,37, 64,38, 65,39, 67,40, 69,41, 70,42, 127,42
gitabs4morfUnmuted	ftgen	0,0,64,-2, giUnmuted22,giUnmuted23,giUnmuted24,giUnmuted25,giUnmuted26,giUnmuted27,giUnmuted28,giUnmuted30,giUnmuted31,giUnmuted32,giUnmuted33,giUnmuted34,giUnmuted35,giUnmuted37,giUnmuted38,giUnmuted39,giUnmuted40,giUnmuted41,giUnmuted42,giUnmuted43,giUnmuted44,giUnmuted45,giUnmuted46,giUnmuted48,giUnmuted49,giUnmuted50,giUnmuted51,giUnmuted52,giUnmuted53,giUnmuted55,giUnmuted56,giUnmuted57,giUnmuted58,giUnmuted59,giUnmuted60,giUnmuted61,giUnmuted62,giUnmuted63,giUnmuted64,giUnmuted65,giUnmuted67,giUnmuted69,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70

isaw	ftgen	0,0,4096,7,1,4096,-1

icount	=	0
loop1:
imaxh	=  sr / (2 * 440.0 * exp(log(2.0) * (icount - 69) / 12))
ifn	ftgen	1000+icount,0,4096,-30,isaw,1,imaxh
	loop_le	icount,1,127,loop1

;gisquare	ftgen	0,0,4096,10, 1,0, 1/3,0, 1/5,0, 1/7,0, 1/9,0, 1/11,0, 1/13,0, 1/15,0, 1/17,0, 1/19,0, 1/21,0, 1/23,0, 1/25,0, 1/27,0, 1/29,0, 1/31,0, 1/33,0, 1/35,0, 1/37,0, 1/39

isquare		ftgen	0,0,4096,7,1,2048,1,0,-1,2048,-1

icount	=	0
loop2:
imaxh	=  sr / (2 * 440.0 * exp(log(2.0) * (icount - 69) / 12))
ifn	ftgen	2000+icount,0,4096,-30,isquare,1,imaxh
	loop_le	icount,1,127,loop2

giorg		ftgen	0,0,4096,9, 1,1,rnd(1), 2,1/2,rnd(1), 4,1/4,rnd(1), 8,1/8,rnd(1), 16,1/16,rnd(1), 32,1/32,rnd(1), 64,1/64,rnd(1), 128,1/128,rnd(1)

gicos		ftgen	0,0,4096,11,1		;COSINE WAVE (USED BY THE LFOS)
gieqffn		ftgen	0,0,4097,7,-1,4096,1
gieqlfn		ftgen	0,0,4097,7,-1,4096,1
gieqqfn		ftgen	0,0,4097,7,-1,4096,1

gasendL,gasendR	init	0

gkactive	init	0	; Will contain number of active instances of instr 3 when legato mode is chosen. NB. notes in release stage will not be regarded as active. 

opcode	sspline,k,Kiii
	kdur,istart,iend,icurve	xin										;READ IN INPUT ARGUMENTS
	imid	=	istart+((iend-istart)/2)								;SPLINE MID POINT VALUE
	isspline	ftgentmp	0,0,4096,-16,istart,4096*0.5,icurve,imid,(4096/2)-1,-icurve,iend	;GENERATE 'S' SPLINE
	kspd	=	i(kdur)/kdur										;POINTER SPEED AS A RATIO (WITH REFERENCE TO THE ORIGINAL DURATION)
	kptr	init	0											;POINTER INITIAL VALUE	
	kout	tablei	kptr,isspline										;READ VALUE FROM TABLE
	kptr	limit	kptr+((ftlen(isspline)/(i(kdur)*kr))*kspd), 0, ftlen(isspline)-1			;INCREMENT THE POINTER BY THE REQUIRED NUMBER OF TABLE POINTS IN ONE CONTROL CYCLE AND LIMIT IT BETWEEN FIRST AND LAST TABLE POINT - FINAL VALUE WILL BE HELD IF POINTER ATTEMPTS TO EXCEED TABLE DURATION
		xout	kout											;SEND VALUE BACK TO CALLER INSTRUMENT
endop

instr	ReadWidgets
	kporttime	linseg	0,0.001,0.1

	;OSCILLATOR
	gkamp		chnget	"amp"
	gkNOscs		chnget	"NOscs"
	gkfmd		chnget	"fmd"
	gkmvt		chnget	"mvt"
	gkwaveform	chnget	"waveform"
	gkwaveform	init	1
	gkwidth		chnget	"width"
	gkWTableShift	chnget	"WTableShift"
	gkPBend		chnget	"PBend"
 	kMOUSE_DOWN_LEFT       chnget  "MOUSE_DOWN_LEFT"
 	kOff	init	0
 	if trigger(kMOUSE_DOWN_LEFT,0.5,1)==1 then
  	 chnset	kOff,"PBend"
 	endif
	gkBendRange	chnget	"BendRange"
	gkPchBend	portk	(gkPBend)*gkBendRange, kporttime

	gkWTableShift	portk	gkWTableShift, kporttime
	gkFiltLayers	chnget	"FiltLayers"

	gkFlfoType	chnget	"FlfoType"
	gkFRte		chnget	"FRte"
	gkFDep		chnget	"FDep"
	gkFDel		chnget	"FDel"
	gkFRis		chnget	"FRis"

	gkcfoct		chnget	"cf"
	gkFEnvAmt	chnget	"FEnvAmt"
	gkFAtt		chnget	"FAtt"
	gkFDec		chnget	"FDec"
	gkFSus		chnget	"FSus"
	gkFRel		chnget	"FRel"

	gkRvbMix	chnget	"RvbMix"

	gkAAtt		chnget	"AAtt"
	gkADec		chnget	"ADec"
	gkASus		chnget	"ASus"
	gkARel		chnget	"ARel"

	gklegato	chnget	"legato"
	gkLegTim	chnget	"LegTim"
	gkmono		chnget	"mono"

	gkExciterAmount	chnget	"ExciterAmount"	
	if trigger:k(gkExciterAmount,0.1,2)==1 then
	 reinit UPDATE_EXCITER
	endif
	UPDATE_EXCITER:
	if i(gkExciterAmount)>0 then
	 chnset	"alpha(1)", "ExciterID"
	else
	 chnset	"alpha(.5)", "ExciterID"
	endif
	gkExciterFreq	chnget	"ExciterFreq"
endin

instr	1	; triggered via midi
	gkNoteTrig	init	1	;at the beginning of a new note set note trigger flag to '1'
	inum		notnum
	gknum		=	inum
	ivel		veloc	0,1	;read in midi note velocity

	if i(gklegato)==0 then		;if we are *not* in legato mode...

	 ;aL,aR	subinstr	p1+1,inum	;call voice instrument as a subinstrument. Audio will be fed back to this instrument before being sent to the outputs.
	 ;	outs	aL,aR		;send audio to outputs
	 
	 	event_i	"i",p1+1+(inum*0.001),0,-1,inum,ivel	; call sound producing instr
	 krel	release						; release flag (1 when note is released, 0 otherwise)
	 if krel==1 then					; when note is released...
	  turnoff2	p1+1+(inum*0.001),4,1			; turn off the called instrument
	 endif							; end of conditional	 	 
	 
	else				;otherwise... (i.e. legato mode)
	 iactive	=	i(gkactive)			;number of active notes of instr 3 (note in release are disregarded)
	 if iactive==0 then					;...if no notes are active
	  event_i	"i",p1+1,0,3600,inum,ivel		;...start a new held note
	 endif
	endif
endin

instr	2	; triggered by instr 1
	;kporttime	linseg	0,0.001,1		;portamento time function rises quickly from zero to a held value
	kLegTime	=	gkLegTim;*kporttime	;scale portamento time function with value from GUI knob widget
	
	if i(gklegato)==1 then				;if we are in legato mode...
	 krel	release					;sense when  note has been released
	 gkactive	=	1-krel			;if note is in release, gkactive=0, otherwise =1
	 if krel==0 then
	  ktrig	changed	gknum						;...GENERATE A TRIGGER IS A NEW NOTE NUMBER IS GENERATED (FROM INSTR. 1)
	  gkNoteTrig	=	0
	 endif
	 gkOldNum	init	p4												; OLD NOTE NUMBER = FIRST NOTE NUMBER UPON INITIAL NOTE BEING PLAYED 
	 if ktrig=1 then													; IF A NEW (LEGATO) NOTE HAS BEEN PRESSED
	  reinit	S_CURVE_2												; BEGIN A REINITIALISATION PASS FROM LABEL
	 endif																; END OF CONDITIONAL BRANCH
	 S_CURVE_2:															; A LABEL. REINITIALISATION BEGINS FROM HERE.
	 idiff	=	1+abs(i(gknum)-i(gkOldNum))								; ABSOLUTE DIFFERENCE BETWEEN OLD NOTE AND NEW NOTE IN STEPS (+ 1)
	 knum	sspline	(kLegTime*idiff)+ksmps/sr,i(gkOldNum),i(gknum),1 	; CALL sspline UDO (PORTAMENTO TIME MULTIPLIED BY NOTE GAP (idiff))
	 rireturn															; RETURN FROM INITIALISATION PASS
	 gkOldNum	=	knum												; SET OLD NUMBER CURRENT NUMBER
	 kactive	active	p1-1											; ...check number of active midi notes (previous instrument)
	 if kactive==0 then													; if no midi notes are active...
	  turnoff															; ... turn this instrument off
	 endif
	else																; otherwise... (polyphonic / non-legato mode)
	 knum	=	p4
	endif

	knum	init	p4

	knum	=	knum + gkPchBend		;add pitch bend
	
	;AMPLITUDE ENVELOPE
	aenv		linsegr	0.001,i(gkAAtt)+0.001,1,i(gkADec)+0.001,i(gkASus),i(gkARel)+0.001,0.001	;AMPLITUDE ENVELOPE
	aenv		=	aenv-0.001
	
	;FILTER AND FILTER ENVELOPE
	kFEnv		linsegr	0,i(gkFAtt)+0.001,1,i(gkFDec)+0.001,i(gkFSus),i(gkFRel)+0.001,0
	kFEnv		=	kFEnv * gkFEnvAmt

	;FILTER LFO
	kdepth		linseg		0,i(gkFDel)+0.001,0,i(gkFRis)+0.001,1	;DEPTH OF MODULATION ENVELOPE
	
	if gkFlfoType==1 then
	 kFLFO		lfo		kdepth*gkFDep,gkFRte,0		;LFO (sine)
	elseif gkFlfoType==2 then
	 kFLFO		jspline		kdepth*gkFDep,gkFRte,gkFRte
	elseif gkFlfoType==3 then
	 kFLFO		randomh		-kdepth*gkFDep,kdepth*gkFDep,gkFRte
	 kFLFO		port		kFLFO,0.004			;smooth out the clicks
	else
	 kFLFO		lfo		kdepth*gkFDep,gkFRte,2		;LFO (bi-square)
	 kFLFO		port		kFLFO,0.004			;smooth out the clicks
	endif

	kCFoct		limit	4+kFEnv+gkcfoct+kFLFO,4,14
	kCF		=	cpsoct(kCFoct)
	  
	if i(gkwaveform)==1 then
	 kwave	=	1000+knum
	elseif i(gkwaveform)==2 then
	 kwave	=	2000+knum
	elseif i(gkwaveform)==3 then
	 kwave	=	giorg
	elseif i(gkwaveform)==4 then
	 giwavemap	=	giwavemapClar
	 gitabs4morf	=	gitabs4morfClar
	 imorphtab	ftgentmp	0,0,4096,10,1
	 kndx		limit		knum+gkWTableShift,0,127
	 kftndx		tablei		kndx,giwavemap			;ftndx REMAPPED ACCORDING TO THE WAVETABLE MAP FOR THIS INSTRUMENT
			ftmorf		kftndx, gitabs4morf, imorphtab	;CREATE THE MORPHED TABLE ACCORDING TO THE VALUE OF THE FUNCTION TABLE INDEX CREATED ABOVE
	 kwave		=		imorphtab
	elseif i(gkwaveform)==5 then
	 giwavemap	=	giwavemapBClar
	 gitabs4morf	=	gitabs4morfBClar
	 imorphtab	ftgentmp	0,0,4096,10,1
	 kndx		limit		knum+gkWTableShift,0,127
	 kftndx		tablei		kndx,giwavemap			;ftndx REMAPPED ACCORDING TO THE WAVETABLE MAP FOR THIS INSTRUMENT
			ftmorf		kftndx, gitabs4morf, imorphtab	;CREATE THE MORPHED TABLE ACCORDING TO THE VALUE OF THE FUNCTION TABLE INDEX CREATED ABOVE
	 kwave		=		imorphtab
	elseif i(gkwaveform)==6 then
	 giwavemap	=	giwavemapCBClar
	 gitabs4morf	=	gitabs4morfCBClar
	 imorphtab	ftgentmp	0,0,4096,10,1
	 kndx		limit		knum+gkWTableShift,0,127
	 kftndx		tablei		kndx,giwavemap			;ftndx REMAPPED ACCORDING TO THE WAVETABLE MAP FOR THIS INSTRUMENT
			ftmorf		kftndx, gitabs4morf, imorphtab	;CREATE THE MORPHED TABLE ACCORDING TO THE VALUE OF THE FUNCTION TABLE INDEX CREATED ABOVE
	 kwave		=		imorphtab
	elseif i(gkwaveform)==7 then
	 giwavemap	=	giwavemapOboe
	 gitabs4morf	=	gitabs4morfOboe
	 imorphtab	ftgentmp	0,0,4096,10,1
	 kndx		limit		knum+gkWTableShift,0,127
	 kftndx		tablei		kndx,giwavemap			;ftndx REMAPPED ACCORDING TO THE WAVETABLE MAP FOR THIS INSTRUMENT
			ftmorf		kftndx, gitabs4morf, imorphtab	;CREATE THE MORPHED TABLE ACCORDING TO THE VALUE OF THE FUNCTION TABLE INDEX CREATED ABOVE
	 kwave		=		imorphtab
	elseif i(gkwaveform)==8 then
	 giwavemap	=	giwavemapBassoon
	 gitabs4morf	=	gitabs4morfBassoon
	 imorphtab	ftgentmp	0,0,4096,10,1
	 kndx		limit		knum+gkWTableShift,0,127
	 kftndx		tablei		kndx,giwavemap			;ftndx REMAPPED ACCORDING TO THE WAVETABLE MAP FOR THIS INSTRUMENT
			ftmorf		kftndx, gitabs4morf, imorphtab	;CREATE THE MORPHED TABLE ACCORDING TO THE VALUE OF THE FUNCTION TABLE INDEX CREATED ABOVE
	 kwave		=		imorphtab
	elseif i(gkwaveform)==9 then
	 giwavemap	=	giwavemapCBassoon
	 gitabs4morf	=	gitabs4morfCBassoon
	 imorphtab	ftgentmp	0,0,4096,10,1
	 kndx		limit		knum+gkWTableShift,0,127
	 kftndx		tablei		kndx,giwavemap			;ftndx REMAPPED ACCORDING TO THE WAVETABLE MAP FOR THIS INSTRUMENT
			ftmorf		kftndx, gitabs4morf, imorphtab	;CREATE THE MORPHED TABLE ACCORDING TO THE VALUE OF THE FUNCTION TABLE INDEX CREATED ABOVE
	 kwave		=		imorphtab
	elseif i(gkwaveform)==10 then
	 giwavemap	=	giwavemapViolin
	 gitabs4morf	=	gitabs4morfViolin
	 imorphtab	ftgentmp	0,0,4096,10,1
	 kndx		limit		knum+gkWTableShift,0,127
	 kftndx		tablei		kndx,giwavemap			;ftndx REMAPPED ACCORDING TO THE WAVETABLE MAP FOR THIS INSTRUMENT
			ftmorf		kftndx, gitabs4morf, imorphtab	;CREATE THE MORPHED TABLE ACCORDING TO THE VALUE OF THE FUNCTION TABLE INDEX CREATED ABOVE
	 kwave		=		imorphtab
	elseif i(gkwaveform)==11 then
	 giwavemap	=	giwavemapCello
	 gitabs4morf	=	gitabs4morfCello
	 imorphtab	ftgentmp	0,0,4096,10,1
	 kndx		limit		knum+gkWTableShift,0,127
	 kftndx		tablei		kndx,giwavemap			;ftndx REMAPPED ACCORDING TO THE WAVETABLE MAP FOR THIS INSTRUMENT
			ftmorf		kftndx, gitabs4morf, imorphtab	;CREATE THE MORPHED TABLE ACCORDING TO THE VALUE OF THE FUNCTION TABLE INDEX CREATED ABOVE
	 kwave		=		imorphtab
	elseif i(gkwaveform)==12 then
	 giwavemap	=	giwavemapPiccolo
	 gitabs4morf	=	gitabs4morfPiccolo
	 imorphtab	ftgentmp	0,0,4096,10,1
	 kndx		limit		knum+gkWTableShift,0,127
	 kftndx		tablei		kndx,giwavemap			;ftndx REMAPPED ACCORDING TO THE WAVETABLE MAP FOR THIS INSTRUMENT
			ftmorf		kftndx, gitabs4morf, imorphtab	;CREATE THE MORPHED TABLE ACCORDING TO THE VALUE OF THE FUNCTION TABLE INDEX CREATED ABOVE
	 kwave		=		imorphtab
	elseif i(gkwaveform)==13 then
	 giwavemap	=	giwavemapFlute
	 gitabs4morf	=	gitabs4morfFlute
	 imorphtab	ftgentmp	0,0,4096,10,1
	 kndx		limit		knum+gkWTableShift,0,127
	 kftndx		tablei		kndx,giwavemap			;ftndx REMAPPED ACCORDING TO THE WAVETABLE MAP FOR THIS INSTRUMENT
			ftmorf		kftndx, gitabs4morf, imorphtab	;CREATE THE MORPHED TABLE ACCORDING TO THE VALUE OF THE FUNCTION TABLE INDEX CREATED ABOVE
	 kwave		=		imorphtab
	elseif i(gkwaveform)==14 then
	 giwavemap	=	giwavemapAFlute
	 gitabs4morf	=	gitabs4morfAFlute
	 imorphtab	ftgentmp	0,0,4096,10,1
	 kndx		limit		knum+gkWTableShift,0,127
	 kftndx		tablei		kndx,giwavemap			;ftndx REMAPPED ACCORDING TO THE WAVETABLE MAP FOR THIS INSTRUMENT
			ftmorf		kftndx, gitabs4morf, imorphtab	;CREATE THE MORPHED TABLE ACCORDING TO THE VALUE OF THE FUNCTION TABLE INDEX CREATED ABOVE
	 kwave		=		imorphtab
	elseif i(gkwaveform)==15 then
	 giwavemap	=	giwavemapBFlute
	 gitabs4morf	=	gitabs4morfBFlute
	 imorphtab	ftgentmp	0,0,4096,10,1
	 kndx		limit		knum+gkWTableShift,0,127
	 kftndx		tablei		kndx,giwavemap			;ftndx REMAPPED ACCORDING TO THE WAVETABLE MAP FOR THIS INSTRUMENT
			ftmorf		kftndx, gitabs4morf, imorphtab	;CREATE THE MORPHED TABLE ACCORDING TO THE VALUE OF THE FUNCTION TABLE INDEX CREATED ABOVE
	 kwave		=		imorphtab
	elseif i(gkwaveform)==16 then
	 giwavemap	=	giwavemapAhh
	 gitabs4morf	=	gitabs4morfAhh
	 imorphtab	ftgentmp	0,0,4096,10,1
	 kndx		limit		knum+gkWTableShift,0,127
	 kftndx		tablei		kndx,giwavemap			;ftndx REMAPPED ACCORDING TO THE WAVETABLE MAP FOR THIS INSTRUMENT
			ftmorf		kftndx, gitabs4morf, imorphtab	;CREATE THE MORPHED TABLE ACCORDING TO THE VALUE OF THE FUNCTION TABLE INDEX CREATED ABOVE
	 kwave		=		imorphtab
	elseif i(gkwaveform)==17 then
	 giwavemap	=	giwavemapOoh
	 gitabs4morf	=	gitabs4morfOoh
	 imorphtab	ftgentmp	0,0,4096,10,1
	 kndx		limit		knum+gkWTableShift,0,127
	 kftndx		tablei		kndx,giwavemap			;ftndx REMAPPED ACCORDING TO THE WAVETABLE MAP FOR THIS INSTRUMENT
			ftmorf		kftndx, gitabs4morf, imorphtab	;CREATE THE MORPHED TABLE ACCORDING TO THE VALUE OF THE FUNCTION TABLE INDEX CREATED ABOVE
	 kwave		=		imorphtab
	elseif i(gkwaveform)==18 then
	 giwavemap	=	giwavemapEee
	 gitabs4morf	=	gitabs4morfEee
	 imorphtab	ftgentmp	0,0,4096,10,1
	 kndx		limit		knum+gkWTableShift,0,127
	 kftndx		tablei		kndx,giwavemap			;ftndx REMAPPED ACCORDING TO THE WAVETABLE MAP FOR THIS INSTRUMENT
			ftmorf		kftndx, gitabs4morf, imorphtab	;CREATE THE MORPHED TABLE ACCORDING TO THE VALUE OF THE FUNCTION TABLE INDEX CREATED ABOVE
	 kwave		=		imorphtab
	elseif i(gkwaveform)==19 then
	 giwavemap	=	giwavemapHornP
	 gitabs4morf	=	gitabs4morfHornP
	 imorphtab	ftgentmp	0,0,4096,10,1
	 kndx		limit		knum+gkWTableShift,0,127
	 kftndx		tablei		kndx,giwavemap			;ftndx REMAPPED ACCORDING TO THE WAVETABLE MAP FOR THIS INSTRUMENT
			ftmorf		kftndx, gitabs4morf, imorphtab	;CREATE THE MORPHED TABLE ACCORDING TO THE VALUE OF THE FUNCTION TABLE INDEX CREATED ABOVE
	 kwave		=		imorphtab
	elseif i(gkwaveform)==20 then
	 giwavemap	=	giwavemapHornF
	 gitabs4morf	=	gitabs4morfHornF
	 imorphtab	ftgentmp	0,0,4096,10,1
	 kndx		limit		knum+gkWTableShift,0,127
	 kftndx		tablei		kndx,giwavemap			;ftndx REMAPPED ACCORDING TO THE WAVETABLE MAP FOR THIS INSTRUMENT
			ftmorf		kftndx, gitabs4morf, imorphtab	;CREATE THE MORPHED TABLE ACCORDING TO THE VALUE OF THE FUNCTION TABLE INDEX CREATED ABOVE
	 kwave		=		imorphtab
	elseif i(gkwaveform)==21 then
	 giwavemap	=	giwavemapharmon
	 gitabs4morf	=	gitabs4morfharmon
	 imorphtab	ftgentmp	0,0,4096,10,1
	 kndx		limit		knum+gkWTableShift,0,127
	 kftndx		tablei		kndx,giwavemap			;ftndx REMAPPED ACCORDING TO THE WAVETABLE MAP FOR THIS INSTRUMENT
			ftmorf		kftndx, gitabs4morf, imorphtab	;CREATE THE MORPHED TABLE ACCORDING TO THE VALUE OF THE FUNCTION TABLE INDEX CREATED ABOVE
	 kwave		=		imorphtab
	elseif i(gkwaveform)==22 then
	 giwavemap	=	giwavemapMute1
	 gitabs4morf	=	gitabs4morfMute1
	 imorphtab	ftgentmp	0,0,4096,10,1
	 kndx		limit		knum+gkWTableShift,0,127
	 kftndx		tablei		kndx,giwavemap			;ftndx REMAPPED ACCORDING TO THE WAVETABLE MAP FOR THIS INSTRUMENT
			ftmorf		kftndx, gitabs4morf, imorphtab	;CREATE THE MORPHED TABLE ACCORDING TO THE VALUE OF THE FUNCTION TABLE INDEX CREATED ABOVE
	 kwave		=		imorphtab
	elseif i(gkwaveform)==23 then
	 giwavemap	=	giwavemapUnmuted
	 gitabs4morf	=	gitabs4morfUnmuted
	 imorphtab	ftgentmp	0,0,4096,10,1
	 kndx		limit		knum+gkWTableShift,0,127
	 kftndx		tablei		kndx,giwavemap			;ftndx REMAPPED ACCORDING TO THE WAVETABLE MAP FOR THIS INSTRUMENT
			ftmorf		kftndx, gitabs4morf, imorphtab	;CREATE THE MORPHED TABLE ACCORDING TO THE VALUE OF THE FUNCTION TABLE INDEX CREATED ABOVE
	 kwave		=		imorphtab
	endif


	ktrig	changed	gkNOscs,gkmono				;IF ANY OF THE CONTROLS WHICH MUST BE ENTERED AS I-RATE CONTROLLERS HAVE CHANGED GENERATE A TRIGGER IMPULSE AT THE OUTPUT
	if ktrig==1 then					;IF ANY I-RATE CONTROL HAS CHANGED...
	  reinit	UPDATE					;BEGIN A RE-INITILISATION PASS FROM LABEL 'UPDATE'
	endif							
	UPDATE:							;BEGIN REINIT PASS FROM HERE
	kmvt	jspline	gkmvt,gkmvt,gkmvt
	kcps	=	cpsmidinn(knum)

	; RANDOM SEED
	iSeedMode	chnget	"seed"
	if iSeedMode==1 then			; clock mono
	 iseedL	=	times:i()
	 iseedR	=	iseedL
	elseif iSeedMode==2 then		; clock stereo
	 iseedL	=	times:i()
	 iseedR	=	iseedL + 1000
	elseif iSeedMode==3 then		; note mono
	 iseedL	=	p4
	 iseedR	=	iseedL
	elseif iSeedMode==4 then		; note stereo
	 iseedL	=	p4
	 iseedR	=	iseedL + 1000
	elseif iSeedMode==5 then		; fixed mono
	 iseedL	=	1
	 iseedR	=	iseedL
	elseif iSeedMode==6 then		; fixed stereo
	 iseedL	=	1
	 iseedR	=	iseedL + 1000
	endif
	
	if i(gkmono)==1 then
	;OUTPUT	OPCODE  CPS  | AMD  |    FMD     | PMD | OVERLAPS   | SEED | L1MINF  | L1MAXF  | L2MINF  | L2MAXF  | LFOMODE | EQMINF  | EQMAXF | EQMINL | EQMAXL | EQMINQ | EQMAXQ  | EQMODE | KFN  | L1FN | L2FN | EQFFN  | EQLF   |  EQQFN |  TABL  | OUTFN
	 aL	oscbnk	kcps,   0,    gkfmd*kcps,    0,  i(gkNOscs),  iseedL,    0,      kmvt,      0,        0,       238,      0,       8000,      1,       1,       1,       1,       -1,   kwave, gicos, gicos, gieqffn, gieqlfn, gieqqfn
	 aR	=	aL
	else
	 ;TWO ITERATIONS OF oscbnk ARE CREATED, ONE FOR EACH OF THE STEREO AUDIO CHANNELS. THE OUTPUTS WILL BE DIFFERENT AS THE RANDOM NUMBER GENERATORS WILL BE SEEDED BY THE SYSTEM CLOCK
	 ;OUTPUT	OPCODE  CPS  | AMD  |    FMD     | PMD | OVERLAPS   | SEED  | L1MINF  | L1MAXF  | L2MINF  | L2MAXF  | LFOMODE | EQMINF  | EQMAXF | EQMINL | EQMAXL | EQMINQ | EQMAXQ  | EQMODE | KFN  | L1FN | L2FN | EQFFN  | EQLF   |  EQQFN |  TABL  | OUTFN
	 aL		oscbnk	kcps,   0,    gkfmd*kcps,   0,  i(gkNOscs),   iseedL,   0,       kmvt,      0,        0,       238,      0,       8000,      1,       1,       1,       1,       -1,   kwave, gicos, gicos, gieqffn, gieqlfn, gieqqfn
	 aR		oscbnk	kcps,   0,    gkfmd*kcps,   0,  i(gkNOscs),   iseedR,   0,      -kmvt,      0,        0,       238,      0,       8000,      1,       1,       1,       1,       -1,   kwave, gicos, gicos, gieqffn, gieqlfn, gieqqfn
	 aL	ntrpol	(aL+aR)*0.66,aL,gkwidth
	 aR	ntrpol	(aL+aR)*0.66,aR,gkwidth
	endif
	rireturn						;RETURN FROM REINIT PASS

	;aL 	clfilt 		aL, kCF,0,2
	;aR 	clfilt 		aR, kCF,0,2
	
	if gkExciterAmount>0 then
	 aEL 	exciter 	aL*gkExciterAmount, gkExciterFreq, 20000, 10, 10
	 aER 	exciter 	aR*gkExciterAmount, gkExciterFreq, 20000, 10, 10
	 aL		ntrpol		aL,aEL,0.5
	 aR		ntrpol		aR,aER,0.5
	endif

	ktrig	changed	gkFiltLayers
	if ktrig=1 then
	 reinit RESTART_TONEX
	endif
	RESTART_TONEX:
	aL 	tonex 		aL, kCF,i(gkFiltLayers)
	aR 	tonex 		aR, kCF,i(gkFiltLayers)
	rireturn
	
	aL	=	aL*aenv*gkamp*p5*0.2
	aR	=	aR*aenv*gkamp*p5*0.2
	
		outs		aL, aR	;SEND AUDIO TO THE OUTPUTS. RESCALE EACH CHANNEL WITH NOTE VELOCITY, AMPLITUDE ENVELOPE AND AMP CONTROL WIDGET.
	gasendL	=	gasendL+(aL*gkRvbMix)
	gasendR	=	gasendR+(aR*gkRvbMix)
endin

instr	4	;reverb
	gkRvbSize	chnget	"RvbSize"
	gkRvbCF		chnget	"RvbCF"
	if gkRvbMix==0 goto SKIP_REVERB
	aL,aR	reverbsc	gasendL,gasendR,gkRvbSize,gkRvbCF
		outs	aL,aR
	SKIP_REVERB:
		clear	gasendL,gasendR
endin

</CsInstruments>

<CsScore>
i "ReadWidgets" 0 [3600*24*7]
i 4 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>; PadSynth.csd
; Written by Iain McCurdy, 2015

; 'padsynth' is actually a GEN routine that generates a loopable function table exhibiting a dense texture that, 
; when replayed using an oscillator, resembles what is referred to as a 'pad'.
; Changing parameters that influence the padsynth GEN routine ('Table', 'Base Freq', 'Bandwidth', 'Part.Scal.', 
; 'Harm.Str.', 'Table Size' and the 'User Table' sliders) will force the table to be rebuilt, and result in 
; interruptions in the output. In performance it will be better to think of 'padsynth' as creating a fixed complex 
; spectrum which is then processed using techniques of subtractive synthesis.

; Two tables are actually created, one with a reduced number of partials (5 partials). As higher notes are played
; the synthesizer increasing uses this second table in order to avoid the aliasing issues that would occur with using 
; only the first table. 

; Table		--	Function table type to be used by padsynth. If 'User Table' is selected the partials are 
; 			set manually using the mini vertical sliders. Sliders can also be set by 'drawing' within 
;			the table area using click and drag.
; 			A variety of additional 'preset' tables are also offered. If any of these are chosen the 
; 			partial sliders and 'Base Freq.' are not available. 'Base Freq.' will be set automatically 
; 			to the value corrsponding to the analysed pitch that produced the partial data. Note that 
; 			these are single tables that are scaled scaled up or down the entire keyboard from their 
; 			point of unison therefore they will sound less like their sources, the further away from 
; 			their points of unison they are played.      
; 
; 
; Bandwidth	--	effectively controls modulation of the partial frequencies 
; 			(amplitude and phase modulation)
; 			Increasing this increases the amount a noise component that will be preset in all partials.       
; Base Freq. 	--	The fundemental of the tone. Too high a value here will result in quantisation artefacts.            
; Part.Scal.	--	scales the modulations from partial to partial, raising this beyond 1 will result in increasing     
; 			excursive modulations in higher partials - this effect can be likened to adding 'air' into 
; 			the pad texture whilst retaining clarity in the lower partials. Experimentation with this 
; 			parameter should help in gaining an understanding of its effect.                                     
; Harm.Str. 	--	Scales all partial frequencies.
; Table Size	--	Size of the table created by padsynth. (Actual size will be 2 ^ 'Table Size'.)
; 			Reducing the table size will reduce the load time and the time it takes to recalculate the 
; 			table whenever a change is made to 'padsynth's parameters, but if the table becomes too small, 
; 			looping will become obvious.                          
; 
; When 'User Table' is selected the amplitudes of the harmonic partials are set using the mini vertical slider bars.
; 
; The filter envelope added to this example modulates a bandpass filter's bandwidth as opposed to its cutoff frequency. 
; The cutoff frequency is defined using the 'Pos' slider and defines a ratio above the base frequency. Therefore a value 
; of '3' here will emphasise the 3rd partial of any note when bandwidth is narrowed.

; Layers - controls a number of additional dissonant layers added for each note played. This is a feature that is still under development
                                                           
<Cabbage>
form caption("Pad Synth"), size(1120, 420), pluginid("PdSy") style("legacy")

#define PlantBoxAppearance # shape("sharp"), colour( 20, 20, 40), outlinecolour("grey"), outlinethickness(2) #

csoundoutput bounds(5,275,1110,60)

image    bounds(  5,  5,470,130), plant("Main"), $PlantBoxAppearance {
label    bounds(  5,  4,490, 15), text("Main")
label    bounds(  5, 28,100, 13), text("Table")
combobox bounds(  5, 42,100, 22), channel("Table"), text("User 30","D.Bass","Clarinet","Bass Clarinet","CB.Clarinet","Oboe","Bassoon","C.Bassoon","Bass Ahh"), value(1)

label    bounds(  5, 68,100, 13), text("Tuning")
combobox bounds(  5, 82,100, 22), channel("Tuning"), text("Equal","Just","Pythagorean","Quarter Tones"), value(1)

rslider  bounds(100, 25, 90, 90), channel("Base"), text("Base Freq."), range(0,127,60,1,1), valuetextbox(1), textbox(1), popuptext("Base frequency of the created waveform"), identchannel("BaseID")
rslider  bounds(170, 25, 90, 90), channel("BW"),   text("Bandwidth"),  range(1,999,6,0.25,0.01), valuetextbox(1), textbox(1), popuptext("Bandwidth of Modulation")
rslider  bounds(240, 25, 90, 90), channel("PartScal"), text("Part.Scal."),  range(1,30,1.6,0.5,0.01), valuetextbox(1), textbox(1), popuptext("Partial Scaling")
rslider  bounds(310, 25, 90, 90), channel("HarmStr"), text("Harm.Str."),  range(0.1,8,1,0.5,0.01), valuetextbox(1), textbox(1), popuptext("Harmonic Stretch")
rslider  bounds(380, 25, 90, 90), channel("TabSize"), text("Table Size"),  range(1,24,18,1,1), valuetextbox(1), textbox(1), popuptext("Larger values slow down table rebuilds!")
}

image    bounds(480,  5,635,130), plant("UserControlSliders"), identchannel("UserControlSlidersID"), $PlantBoxAppearance {
label    bounds(  4,  5,635, 15), text("User Table")
vslider  bounds( 25, 25, 10, 85), channel("1"),  range(0,1,0 	,0.5), visible(0)
vslider  bounds( 50, 25, 10, 85), channel("2"),  range(0,1,0.1 	,0.5), visible(0)
vslider  bounds( 75, 25, 10, 85), channel("3"),  range(0,1,0.2 	,0.5), visible(0)
vslider  bounds(100, 25, 10, 85), channel("4"),  range(0,1,0.1 	,0.5), visible(0)
vslider  bounds(125, 25, 10, 85), channel("5"),  range(0,1,0	,0.5), visible(0)
vslider  bounds(150, 25, 10, 85), channel("6"),  range(0,1,0	,0.5), visible(0)
vslider  bounds(175, 25, 10, 85), channel("7"),  range(0,1,0	,0.5), visible(0)
vslider  bounds(200, 25, 10, 85), channel("8"),  range(0,1,0	,0.5), visible(0)
vslider  bounds(225, 25, 10, 85), channel("9"),  range(0,1,0	,0.5), visible(0)
vslider  bounds(250, 25, 10, 85), channel("10"), range(0,1,0	,0.5), visible(0)
vslider  bounds(275, 25, 10, 85), channel("11"), range(0,1,0.1 	,0.5), visible(0)
vslider  bounds(300, 25, 10, 85), channel("12"), range(0,1,0.2 	,0.5), visible(0)
vslider  bounds(325, 25, 10, 85), channel("13"), range(0,1,0.4 	,0.5), visible(0)
vslider  bounds(350, 25, 10, 85), channel("14"), range(0,1,0.5 	,0.5), visible(0)
vslider  bounds(375, 25, 10, 85), channel("15"), range(0,1,0.7 	,0.5), visible(0)
vslider  bounds(400, 25, 10, 85), channel("16"), range(0,1,0.9 	,0.5), visible(0)
vslider  bounds(425, 25, 10, 85), channel("17"), range(0,1,0.5 	,0.5), visible(0)
vslider  bounds(450, 25, 10, 85), channel("18"), range(0,1,0.2 	,0.5), visible(0)
vslider  bounds(475, 25, 10, 85), channel("19"), range(0,1,0.001,0.5), visible(0)
vslider  bounds(500, 25, 10, 85), channel("20"), range(0,1,0	,0.5), visible(0)
vslider  bounds(525, 25, 10, 85), channel("21"), range(0,1,0	,0.5), visible(0)
vslider  bounds(550, 25, 10, 85), channel("22"), range(0,1,0	,0.5), visible(0)
vslider  bounds(575, 25, 10, 85), channel("23"), range(0,1,0	,0.5), visible(0)
vslider  bounds(600, 25, 10, 85), channel("24"), range(0,1,0    ,0.5), visible(0)

image  bounds( 20, 25, 20, 1), colour("silver"), identchannel("Slider1")  , outlinecolour( 20, 20, 40), outlinethickness(1)
image  bounds( 40, 25, 20, 0), colour("silver"), identchannel("Slider2")  , outlinecolour( 20, 20, 40), outlinethickness(1)
image  bounds( 60, 25, 20, 0), colour("silver"), identchannel("Slider3")  , outlinecolour( 20, 20, 40), outlinethickness(1)
image  bounds( 80, 25, 20, 0), colour("silver"), identchannel("Slider4")  , outlinecolour( 20, 20, 40), outlinethickness(1)
image  bounds(100 ,25, 20, 0), colour("silver"), identchannel("Slider5")  , outlinecolour( 20, 20, 40), outlinethickness(1)
image  bounds(120, 25, 20, 0), colour("silver"), identchannel("Slider6")  , outlinecolour( 20, 20, 40), outlinethickness(1)
image  bounds(140, 25, 20, 0), colour("silver"), identchannel("Slider7")  , outlinecolour( 20, 20, 40), outlinethickness(1)
image  bounds(160, 25, 20, 0), colour("silver"), identchannel("Slider8")  , outlinecolour( 20, 20, 40), outlinethickness(1)
image  bounds(180, 25, 20, 0), colour("silver"), identchannel("Slider9")  , outlinecolour( 20, 20, 40), outlinethickness(1)
image  bounds(200, 25, 20, 0), colour("silver"), identchannel("Slider10") , outlinecolour( 20, 20, 40), outlinethickness(1)
image  bounds(220, 25, 20, 0), colour("silver"), identchannel("Slider11") , outlinecolour( 20, 20, 40), outlinethickness(1)
image  bounds(240, 25, 20, 0), colour("silver"), identchannel("Slider12") , outlinecolour( 20, 20, 40), outlinethickness(1)
image  bounds(260, 25, 20, 0), colour("silver"), identchannel("Slider13") , outlinecolour( 20, 20, 40), outlinethickness(1)
image  bounds(280, 25, 20, 0), colour("silver"), identchannel("Slider14") , outlinecolour( 20, 20, 40), outlinethickness(1)
image  bounds(300, 25, 20, 0), colour("silver"), identchannel("Slider15") , outlinecolour( 20, 20, 40), outlinethickness(1)
image  bounds(320, 25, 20, 0), colour("silver"), identchannel("Slider16") , outlinecolour( 20, 20, 40), outlinethickness(1)
image  bounds(340, 25, 20, 0), colour("silver"), identchannel("Slider17") , outlinecolour( 20, 20, 40), outlinethickness(1)
image  bounds(360, 25, 20, 0), colour("silver"), identchannel("Slider18") , outlinecolour( 20, 20, 40), outlinethickness(1)
image  bounds(380, 25, 20, 0), colour("silver"), identchannel("Slider19") , outlinecolour( 20, 20, 40), outlinethickness(1)
image  bounds(400, 25, 20, 0), colour("silver"), identchannel("Slider20") , outlinecolour( 20, 20, 40), outlinethickness(1)
image  bounds(420, 25, 20, 0), colour("silver"), identchannel("Slider21") , outlinecolour( 20, 20, 40), outlinethickness(1)
image  bounds(440, 25, 20, 0), colour("silver"), identchannel("Slider22") , outlinecolour( 20, 20, 40), outlinethickness(1)
image  bounds(460, 25, 20, 0), colour("silver"), identchannel("Slider23") , outlinecolour( 20, 20, 40), outlinethickness(1)
image  bounds(480, 25, 20, 0), colour("silver"), identchannel("Slider24") , outlinecolour( 20, 20, 40), outlinethickness(1)
image  bounds(500, 25, 20, 0), colour("silver"), identchannel("Slider25") , outlinecolour( 20, 20, 40), outlinethickness(1)
image  bounds(520, 25, 20, 0), colour("silver"), identchannel("Slider26") , outlinecolour( 20, 20, 40), outlinethickness(1)
image  bounds(540, 25, 20, 0), colour("silver"), identchannel("Slider27") , outlinecolour( 20, 20, 40), outlinethickness(1)
image  bounds(560, 25, 20, 0), colour("silver"), identchannel("Slider28") , outlinecolour( 20, 20, 40), outlinethickness(1)
image  bounds(580, 25, 20, 0), colour("silver"), identchannel("Slider29") , outlinecolour( 20, 20, 40), outlinethickness(1)
image  bounds(600, 25, 20, 0), colour("silver"), identchannel("Slider30") , outlinecolour( 20, 20, 40), outlinethickness(1)

label  bounds( 20,106, 20,11), text("1")
label  bounds( 40,106, 20,11), text("2")
label  bounds( 60,106, 20,11), text("3")
label  bounds( 80,106, 20,11), text("4")
label  bounds(100,106, 20,11), text("5")
label  bounds(120,106, 20,11), text("6")
label  bounds(140,106, 20,11), text("7")
label  bounds(160,106, 20,11), text("8")
label  bounds(180,106, 20,11), text("9")
label  bounds(200,106, 20,11), text("10")
label  bounds(220,106, 20,11), text("11")
label  bounds(240,106, 20,11), text("12")
label  bounds(260,106, 20,11), text("13")
label  bounds(280,106, 20,11), text("14")
label  bounds(300,106, 20,11), text("15")
label  bounds(320,106, 20,11), text("16")
label  bounds(340,106, 20,11), text("17")
label  bounds(360,106, 20,11), text("18")
label  bounds(380,106, 20,11), text("19")
label  bounds(400,106, 20,11), text("20")
label  bounds(420,106, 20,11), text("21")
label  bounds(440,106, 20,11), text("22")
label  bounds(460,106, 20,11), text("23")
label  bounds(480,106, 20,11), text("24")
label  bounds(500,106, 20,11), text("25")
label  bounds(520,106, 20,11), text("26")
label  bounds(540,106, 20,11), text("27")
label  bounds(560,106, 20,11), text("28")
label  bounds(580,106, 20,11), text("29")
label  bounds(600,106, 20,11), text("30")
}               
                
image    bounds(  5,140,370,130), plant("AmplitudeEnvelope"), $PlantBoxAppearance {
label    bounds(  5,  4,370, 15), text("Amplitude Envelope")
rslider  bounds(  0, 30, 90, 90), channel("AAtt"), text("Attack"), range(0.001,5,0.5,0.5,0.001), valuetextbox(1), textbox(1)   
rslider  bounds( 70, 30, 90, 90), channel("ADec"), text("Decay"),  range(0.001,5,0.01,0.5,0.001), valuetextbox(1), textbox(1)
rslider  bounds(140, 30, 90, 90), channel("ASus"), text("Sustain"),range(0,    1,1,0.5,0.001), valuetextbox(1), textbox(1)
rslider  bounds(210, 30, 90, 90), channel("ARel"), text("Release"),range(0.001,5,0.5,0.5,0.001), valuetextbox(1), textbox(1)
rslider  bounds(280, 30, 90, 90), channel("AGain"),text("Gain"),   range(0.1,  5,1,0.5,0.001), valuetextbox(1), textbox(1)
}               
                

image    bounds(380,140, 55,130), plant("Layers"), $PlantBoxAppearance 
{
label    bounds(  5, 10, 45, 12), text("Layers")   
rslider  bounds( 10, 25, 35, 35), channel("Layers"), range(1,20,1,1,1);, valuetextbox(1), textbox(1)
label    bounds(  5, 65, 45, 12), text("Interval")   
rslider  bounds( 10, 80, 35, 35), channel("Interval"), range(-12,12,5,1,0.1);, valuetextbox(1), textbox(1)
}

image    bounds(440,140,440,130), plant("Filter"), $PlantBoxAppearance 
{
label    bounds(  5,  4,440, 15), text("Filter Bandwidth")
checkbox bounds( 10, 10, 80, 12), channel("FOnOff"), text("On/Off"), value(1)
rslider  bounds(  0, 30, 90, 90), channel("FL1"), text("Level 1"), range(0.001,9.999,9.999,0.5,0.001), valuetextbox(1), textbox(1)
rslider  bounds( 70, 30, 90, 90), channel("FT1"), text("Attack"), range(0.001,8,3,0.5), valuetextbox(1), textbox(1)
rslider  bounds(140, 30, 90, 90), channel("FSus"), text("Sustain"), range(0.001,9.999,1.5,0.5,0.01), valuetextbox(1), textbox(1)
rslider  bounds(210, 30, 90, 90), channel("FRelTim"), text("Rel.Time"), range(0.001,8,0.25,0.5), valuetextbox(1), textbox(1)
rslider  bounds(280, 30, 90, 90), channel("FRelLev"), text("Rel.Level"), range(0.001,9.999,0.1,0.5,0.01), valuetextbox(1), textbox(1)
rslider  bounds(350, 30, 90, 90), channel("FPos"), text("Position"), range(1,24,3,1,1), valuetextbox(1), textbox(1)
}

image    bounds(885,140,230,130), plant("Reverb"), $PlantBoxAppearance {
label    bounds(  5,  4,230, 15), text("Reverb")
rslider  bounds(  0, 30, 90, 90), channel("RSend"), text("Send"), range(0,1,0.5), valuetextbox(1), textbox(1)
rslider  bounds( 70, 30, 90, 90), channel("RSize"), text("Size"),  range(0,0.99,0.85), valuetextbox(1), textbox(1)
rslider  bounds(140, 30, 90, 90), channel("R__CF"), text("Damping"),range(20,20000,8000,0.5,1), valuetextbox(1), textbox(1)
}

keyboard bounds(5,335,1110, 80)
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>
sr	=	44100
ksmps	=	32
nchnls	=	2
0dbfs	=	1

massign	0,3						; DIRECT ALL MIDI EVENTS TO INSTRUMENT 3
giFade	ftgen	0,0,128,-7,0,60,0,36,1,128-60-36,1	; KEY-FOLLOWING MAP DEFINING FADES BETWEEN TWO TABLES USED TO PREVENT ALIASING

giequal	ftgen  201,           0,        64,        -2,          12,         2,     cpsmidinn(60),        60,                       1, 1.059463,1.1224619,1.1892069,1.2599207,1.33483924,1.414213,1.4983063,1.5874001,1.6817917,1.7817962, 1.8877471,     2	;STANDARD
gijust	ftgen  202,           0,        64,        -2,          12,         2,     cpsmidinn(60),        60,                       1,   16/15,    9/8,     6/5,      5/4,       4/3,     45/32,     3/2,     8/5,      5/3,       9/5,     15/8,     2		;RATIOS FOR JUST INTONATION
gipyth	ftgen  203,           0,        64,        -2,          12,         2,     cpsmidinn(60),        60,                       1,  256/243,   9/8,    32/27,    81/64,      4/3,    729/512,    3/2,    128/81,   27/16,     16/9,     243/128,  2		;RATIOS FOR PYTHAGOREAN TUNING
giquat	ftgen  204,           0,        64,        -2,          24,         2,     cpsmidinn(60),        60,                       1, 1.0293022,1.059463,1.0905076,1.1224619,1.1553525,1.1892069,1.2240532,1.2599207,1.2968391,1.33483924,1.3739531,1.414213,1.4556525,1.4983063, 1.54221, 1.5874001, 1.6339145,1.6817917,1.73107,  1.7817962,1.8340067,1.8877471,1.9430623,    2	;QUARTER TONES

gaRvbL,gaRvbR	init	0				; GLOBAL AUDIO VARIABLE USED TO MIX AND SEND SIGNAL TO THE REVERB INSTRUMENT

; INITIALISE TABLE
gk1,gk2,gk3,gk4,gk5,gk6,gk7,gk8,gk9,gk10,gk11,gk12,gk13,gk14,gk15,gk16,gk17,gk18,gk19,gk20,gk21,gk22,gk23,gk24,gk25,gk26,gk27,gk28,gk29,gk30	init	0
gkBW		init	6
gkPartScal	init	1.6
gkTabSize	init	18
gkBase		init	cpsmidinn(60)
gkHarmStr	init	1
gkTable		init	1
giTable 	ftgen 1, 0, 2^i(gkTabSize), "padsynth", i(gkBase), i(gkBW), i(gkPartScal), i(gkHarmStr), 1, 1, 0.00001+(i(gk1)*0.99999),i(gk2),i(gk3),i(gk4),i(gk5),i(gk6),i(gk7),i(gk8),i(gk9),i(gk10),i(gk11),i(gk12),i(gk13),i(gk14),i(gk15),i(gk16),i(gk17),i(gk18),i(gk19),i(gk20),i(gk21),i(gk22),i(gk23),i(gk24),i(gk25),i(gk26),i(gk27),i(gk28),i(gk29),i(gk30)
giTable2 	ftgen 2, 0, 2^i(gkTabSize), "padsynth", i(gkBase), i(gkBW), i(gkPartScal), i(gkHarmStr), 1, 1, 0.00001+(i(gk1)*0.99999),i(gk2),i(gk3),i(gk4),i(gk5)

instr	1	; Always on. Reads widgets.
 kMOUSE_X	chnget	"MOUSE_X"				; READ IN MOUSE X POSITION ON A RESERVED CABBAGE CHANNEL
 kMOUSE_Y	chnget	"MOUSE_Y"				; READ IN MOUSE Y POSITION ON A RESERVED CABBAGE CHANNEL
 kMOUSE_DOWN_LEFT	chnget	"MOUSE_DOWN_LEFT"		; LEFT CLICK STATUS (ONLY ALLOWING A REINIT WHEN THE MOUSE BUTTON IS RELEASED SMOOTHS INTERACTION)
 if kMOUSE_DOWN_LEFT==1 then								; IF LEFT CLICK BUTTON IS HELD...
 #define	SLIDER(X1'WIDTH'COUNT)
 #
  if kMOUSE_X>$X1 && kMOUSE_X<$X1+$WIDTH && kMOUSE_Y>10 && kMOUSE_Y<120 then		; IF MOUSE LIES WITHIN BOUNDARYS OF SLIDER (IMAGE WIDGET)...
   kLen	limit	105 - kMOUSE_Y,0,80							; LENGTH OF SLIDER IN PIXELS. 
   			; N.B. MOUSE CAN STILL STRAY BEYOND LIMITS OF THE WIDGET SLIGHTLY WITH THE VALUE OUTPUT WILL STILL BE LIMITED TO BE HELD WITHIN RANGE
   if changed(kLen)==1 then								; IF MOUSE HAS MOVED WITHIN WIDGET AREA
    Sstr	sprintfk	"bounds(%d,%d,%d,%d)",$X1-480,25+(80-kLen),$WIDTH,kLen	; NEW STRING FOR SLIDER POSITION
    		chnset		Sstr,"Slider$COUNT"					; SEND 'BOUNDS' MESSAGE TO WIDGET
    k$COUNT	=	(kLen/80)^1.5							; CREATE THE ACTUAL VALUE OF THE SLIDER (RANGE 0 - 1)
   endif
  endif
#
 $SLIDER(500'20'1)
 $SLIDER(520'20'2)
 $SLIDER(540'20'3)
 $SLIDER(560'20'4)
 $SLIDER(580'20'5)
 $SLIDER(600'20'6)
 $SLIDER(620'20'7)
 $SLIDER(640'20'8)
 $SLIDER(660'20'9)
 $SLIDER(680'20'10)
 $SLIDER(700'20'11)
 $SLIDER(720'20'12)
 $SLIDER(740'20'13)
 $SLIDER(760'20'14)
 $SLIDER(780'20'15)
 $SLIDER(800'20'16)
 $SLIDER(820'20'17)
 $SLIDER(840'20'18)
 $SLIDER(860'20'19)
 $SLIDER(880'20'20)
 $SLIDER(900'20'21)
 $SLIDER(920'20'22)
 $SLIDER(940'20'23)
 $SLIDER(960'20'24)
 $SLIDER(980'20'25)
 $SLIDER(1000'20'26)
 $SLIDER(1020'20'27)
 $SLIDER(1040'20'28)
 $SLIDER(1060'20'29)
 $SLIDER(1080'20'30)

endif
 gkTable	chnget	"Table"
 gkTuning	chnget	"Tuning"
 if timeinstk()==1 then
  kMOUSE_DOWN_LEFT	=	1
 endif
 if trigger(kMOUSE_DOWN_LEFT,0.5,1)==1 then
  gkBase	chnget	"Base"
  gkBW		chnget	"BW"
  gkPartScal	chnget	"PartScal"
  gkHarmStr	chnget	"HarmStr"
  gkTabSize	chnget	"TabSize"
  
  gk1 		=	k1	
  gk2 		=	k2	
  gk3 		=	k3
  gk4 		=	k4
  gk5 		=	k5
  gk6 		=	k6
  gk7 		=	k7
  gk8 		=	k8
  gk9 		=	k9
  gk10		=	k10
  gk11		=	k11
  gk12		=	k12
  gk13		=	k13
  gk14		=	k14
  gk15		=	k15
  gk16		=	k16
  gk17		=	k17
  gk18		=	k18
  gk19		=	k19
  gk20		=	k20
  gk21		=	k21
  gk22		=	k22
  gk23		=	k23
  gk24		=	k24
  gk25		=	k25
  gk26		=	k26
  gk27		=	k27
  gk28		=	k28
  gk29		=	k29
  gk30		=	k30
 endif

 gkAAtt         chnget	"AAtt"
 gkADec         chnget	"ADec"	
 gkASus         chnget	"ASus"	
 gkARel         chnget	"ARel"	
 gkAGain        chnget	"AGain"

 gkFOnOff       chnget	"FOnOff"
 gkFL1 		chnget	"FL1"
 gkFT1 		chnget	"FT1"
 gkFSus 	chnget	"FSus"
 gkFRelTim 	chnget	"FRelTim"
 gkFRelLev 	chnget	"FRelLev"
 gkFPos 	chnget	"FPos"

 gkRSend        chnget	"RSend"
 gkRSize        chnget	"RSize"
 gkR__CF        chnget	"R__CF"

 if changed(gkTable)==1 then
  kVisible	=	gkTable==1?1:0
   Smsg		sprintfk	"visible(%d)", kVisible
  	chnset	Smsg, "BaseID"
  	chnset	Smsg, "UserControlSlidersID"
 endif
endin

instr	2	; Always on. Updates PadSynth table when relevant widgets are changed.
 ktrig	changed	gkBase,gkBW,gkPartScal,gkHarmStr,gkTabSize,gkTable,gk1,gk2,gk3,gk4,gk5,gk6,gk7,gk8,gk9,gk10,gk11,gk12,gk13,gk14,gk15,gk16,gk17,gk18,gk19,gk20,gk21,gk22,gk23,gk24,gk25,gk26,gk27,gk28,gk29,gk30 
 if ktrig==1 then
  reinit	UpdateTable
 endif
 UpdateTable:
 giBW		=	i(gkBW)
 giPartScal	=	i(gkPartScal)
 giTabLen	=	2^i(gkTabSize)	; IF THIS IS TOO SMALL, LOOPING OF THE SPECTRUM WILL BECOME AUDIBLE
 ;                                                                                        FIRST TWO VALUES FOR hampl NEED TO BE '1'.
 if i(gkTable)==1 then
  giBase		=	i(gkBase)
  giTable 	ftgen 1, 0, giTabLen, "padsynth", giBase, giBW, giPartScal, i(gkHarmStr), 1, 1, 0.00001+(i(gk1)*0.99999),i(gk2),i(gk3),i(gk4),i(gk5),i(gk6),i(gk7),i(gk8),i(gk9),i(gk10),i(gk11),i(gk12),i(gk13),i(gk14),i(gk15),i(gk16),i(gk17),i(gk18),i(gk19),i(gk20),i(gk21),i(gk22),i(gk23),i(gk24),i(gk25),i(gk26),i(gk27),i(gk28),i(gk29),i(gk30)
  giTable2 	ftgen 2, 0, giTabLen, "padsynth", giBase, giBW, giPartScal, i(gkHarmStr), 1, 1, 0.00001+(i(gk1)*0.99999),i(gk2),i(gk3),i(gk4),i(gk5)
 elseif i(gkTable)==2 then	; double bass
  giBase		=	cpsmidinn(24)
  giTable 	ftgen 1, 0, giTabLen, "padsynth", giBase, giBW, giPartScal, i(gkHarmStr), 1, 1, 0.050982,0.269147,1.000005,0.658602,0.409921,0.234611,0.371689,0.081631,0.193677,0.176088,0.325643,0.073972,0.139508,0.089290,0.133734,0.084015,0.019990,0.027201,0.017902,0.041521,0.007125,0.015291,0.015586,0.060973,0.014650,0.002686,0.018208,0.022200,0.005778,0.016678,0.011366,0.005039,0.010690,0.004182,0.004080,0.022196,0.001317,0.015622,0.006383,0.048913,0.043438,0.028458,0.019492,0.004084,0.022969,0.008893,0.009430,0.005096,0.011939,0.003356,0.002472,0.010081,0.003020,0.007064,0.020432,0.002298,0.004490,0.004640,0.005406,0.000578,0.002732,0.004642,0.003090,0.002380,0.003776,0.003052,0.002165,0.001143,0.004033,0.002833,0.000987,0.002324,0.003665,0.000774,0.003714,0.003576,0.003869,0.000651,0.001704,0.000521,0.002186,0.000385,0.001712,0.000832,0.000895,0.001616,0.000491,0.000556,0.000794,0.000267,0.000365,0.000915,0.000410,0.000555,0.000234,0.000876,0.001052,0.001316,0.000456
  giTable2 	ftgen 2, 0, giTabLen, "padsynth", giBase, giBW, giPartScal, i(gkHarmStr), 1, 1, 0.050982,0.269147,1.000005,0.658602,0.409921
 elseif i(gkTable)==3 then	; clarinet
  giBase		=	cpsmidinn(50)
  giTable 	ftgen 1, 0, giTabLen, "padsynth", giBase, giBW, giPartScal, i(gkHarmStr), 1, 1, 0.273597,0.027434,0.737705,0.049480,0.448437,0.272536,0.131175,0.129945,0.283082,0.130714,0.026719,0.037582,0.018953,0.010729,0.067580,0.024573,0.016586,0.049988,0.033294,0.017090,0.008591,0.021128,0.007237,0.016060,0.016060
  giTable2 	ftgen 2, 0, giTabLen, "padsynth", giBase, giBW, giPartScal, i(gkHarmStr), 1, 1, 0.273597,0.027434,0.737705,0.049480,0.448437
 elseif i(gkTable)==4 then	; bass clarinet
  giBase		=	cpsmidinn(35)
  giTable 	ftgen 1, 0, giTabLen, "padsynth", giBase, giBW, giPartScal, i(gkHarmStr), 1, 1, 0.384232,0.038085,0.578537,0.029558,0.143002,0.119033,0.397678,0.113380,0.577246,0.158831,0.577514,0.094994,0.440674,0.109136,0.500666,0.132354,0.360370,0.104810,0.231403,0.089565,0.207353,0.099773,0.209066,0.123801,0.158769,0.079383,0.036078,0.019583,0.010310,0.017060,0.029465,0.045821,0.031622,0.038326,0.052222,0.058647,0.083956,0.079748,0.081955,0.097274,0.069934,0.075100,0.049259,0.058121,0.068078,0.065276,0.070165,0.065898,0.072432,0.055423,0.052283,0.036547,0.034082,0.035287,0.044801,0.053917,0.050263,0.036979,0.034264,0.035892,0.035011,0.037199,0.041542,0.043201,0.039923,0.035164,0.035828,0.036193,0.037155,0.035493,0.034546,0.035091,0.029891,0.027394,0.026174,0.023757,0.021365,0.019468,0.016295,0.015301,0.015263,0.014310,0.013239,0.011972,0.011445,0.011727,0.012391,0.013892,0.015395,0.015147,0.015137,0.014816,0.013898,0.012682,0.011462,0.009883,0.008579,0.007797,0.007749
  giTable2 	ftgen 2, 0, giTabLen, "padsynth", giBase, giBW, giPartScal, i(gkHarmStr), 1, 1, 0.384232,0.038085,0.578537,0.029558,0.143002
 elseif i(gkTable)==5 then	; contrabass clarinet
  giBase		=	cpsmidinn(26)
  giTable 	ftgen 1, 0, giTabLen, "padsynth", giBase, giBW, giPartScal, i(gkHarmStr), 1, 1, 0.100160,0.005519,0.631940,0.013046,0.749042,0.308868,0.475605,0.152792,0.074315,0.238927,0.152260,0.251283,0.030787,0.052465,0.032473,0.121972,0.064172,0.090564,0.043994,0.091868,0.039563,0.058622,0.024531,0.023127,0.026665,0.067522,0.081377,0.057914,0.066176,0.036134,0.026135,0.021056,0.038011,0.036534,0.058393,0.040915,0.050051,0.038446,0.034166,0.021341,0.014481,0.015708,0.025527,0.026622,0.033577,0.027355,0.034434,0.022920,0.016354,0.010905,0.011160,0.015075,0.019871,0.017505,0.013189,0.011442,0.008511,0.007974,0.006368,0.005988,0.005976,0.005922,0.006590,0.008199,0.006566,0.005254,0.004955,0.005576,0.005463,0.005101,0.003955,0.003622,0.004027,0.003772,0.003504,0.002848,0.002183,0.002075,0.002143,0.002014,0.001907,0.001850,0.001736,0.001543,0.001318,0.001180,0.001107,0.001066,0.001169,0.001372,0.001533,0.001667,0.001738,0.001655,0.001604,0.001603,0.001571,0.001575,0.001638,0.001696
  giTable2 	ftgen 2, 0, giTabLen, "padsynth", giBase, giBW, giPartScal, i(gkHarmStr), 1, 1, 0.100160,0.005519,0.631940,0.013046,0.749042
 elseif i(gkTable)==6 then	; oboe
  giBase		=	cpsmidinn(59)
  giTable 	ftgen 1, 0, giTabLen, "padsynth", giBase, giBW, giPartScal, i(gkHarmStr), 1, 1, 0.239013,0.078927,0.241030,0.206347,0.832266,0.054540,0.013821,0.007450,0.022905,0.021737,0.018123,0.013105,0.002361,0.001433,0.003509,0.002589,0.001326,0.000743,0.000990,0.000868,0.000863,0.000994,0.000406,0.000288,0.000288
  giTable2 	ftgen 2, 0, giTabLen, "padsynth", giBase, giBW, giPartScal, i(gkHarmStr), 1, 1, 0.239013,0.078927,0.241030,0.206347,0.832266
 elseif i(gkTable)==7 then	; bassoon
  giBase		=	cpsmidinn(34)
  giTable 	ftgen 1, 0, giTabLen, "padsynth", giBase, giBW, giPartScal, i(gkHarmStr), 1, 1, 0.213868,0.268493,0.244166,0.230801,0.105833,0.308087,0.556920,0.478956,0.523357,0.900665,0.213470,0.229596,0.031221,0.040117,0.067113,0.060158,0.030778,0.061028,0.143814,0.063668,0.126426,0.055009,0.049138,0.085854,0.113027,0.111464,0.088765,0.037342,0.050990,0.035579,0.040460,0.032219,0.027305,0.034141,0.019655,0.009315,0.008270,0.006748,0.006472,0.007088,0.008133,0.007046,0.007850,0.005791,0.006273,0.006847,0.007249,0.009398,0.010309,0.010418,0.010247,0.010333,0.009562,0.008180,0.009576,0.009469,0.008529,0.008844,0.008053,0.007565,0.008026,0.007284,0.007299,0.007423,0.008280,0.008374,0.008239,0.008512,0.009431,0.010246,0.010350,0.009381,0.008652,0.008150,0.007888,0.007951,0.008166,0.008210,0.007921,0.007548,0.007147,0.006991,0.006978,0.006527,0.005617,0.004781,0.004549,0.004707,0.004803,0.004640,0.004303,0.003866,0.003524,0.003348,0.003108,0.002766,0.002439,0.002278,0.002406,0.002733
  giTable2 	ftgen 2, 0, giTabLen, "padsynth", giBase, giBW, giPartScal, i(gkHarmStr), 1, 1, 0.213868,0.268493,0.244166,0.230801,0.105833
 elseif i(gkTable)==8 then	; contrabassoon
  giBase		=	cpsmidinn(38)
  giTable 	ftgen 1, 0, giTabLen, "padsynth", giBase, giBW, giPartScal, i(gkHarmStr), 1, 1, 0.240531,0.304670,0.289169,0.727482,0.578083,0.169149,0.057305,0.193624,0.167977,0.206006,0.182632,0.057408,0.103574,0.044785,0.084239,0.068303,0.030771,0.133375,0.096231,0.037016,0.046566,0.020770,0.020264,0.015211,0.029647,0.018603,0.027940,0.062861,0.033828,0.015594,0.016305,0.025478,0.034356,0.038642,0.028451,0.026747,0.014914,0.016727,0.015524,0.013236,0.014264,0.013651,0.014838,0.016490,0.021208,0.017660,0.013009,0.014867,0.013013,0.010426,0.009144,0.009462,0.009367,0.009624,0.008079,0.007399,0.009012,0.009384,0.008661,0.009051,0.009394,0.010578,0.011610,0.012184,0.010442,0.009130,0.008795,0.008468,0.010039,0.011205,0.011438,0.011489,0.010526,0.008902,0.007391,0.006198,0.005970,0.005264,0.004331,0.003874,0.003514,0.003418,0.003518,0.003409,0.003150,0.003023,0.003047,0.003199,0.003624,0.003999,0.003839,0.003629,0.003712,0.003872,0.003974,0.003836,0.003596,0.003353,0.003177,0.003070
  giTable2 	ftgen 2, 0, giTabLen, "padsynth", giBase, giBW, giPartScal, i(gkHarmStr), 1, 1, 0.240531,0.304670,0.289169,0.727482,0.578083
 elseif i(gkTable)==9 then	; contrabassoon
  giBase		=	cpsmidinn(48)
  giTable 	ftgen 1, 0, giTabLen, "padsynth", giBase, giBW, giPartScal, i(gkHarmStr), 1, 1, 0.001482,0.007584,0.024916,0.084669,0.120825,0.037691,0.032860,0.097651,0.021318,0.007128,0.001455,0.000373,0.000311,0.001646,0.006016,0.016943,0.049158,0.018410,0.045129,0.018996,0.013181,0.005616,0.002740,0.001081,0.000371,0.000296,0.000174,0.000109
  giTable2 	ftgen 2, 0, giTabLen, "padsynth", giBase, giBW, giPartScal, i(gkHarmStr), 1, 1, 0.001482,0.007584,0.024916,0.084669,0.120825
 endif
 prints	"Ready!"
endin

giMaxLayers	init	8

opcode PoscilLayer,a,kiikkp
 kCPS,iTable,iPhase,kInterval,kLayers,iCount	xin
 iInterval	=	semitone(10*(iCount-1))
 kAmp		limit	(kLayers+1) - iCount, 0, 1
 aSig		poscil	kAmp,kCPS,iTable,iPhase
 if iCount<giMaxLayers then
  aMix	PoscilLayer	kCPS*semitone(kInterval*iCount),iTable,iPhase,kInterval,kLayers,iCount+1
 endif
 			xout		aMix+aSig
endop


instr	3	; SOUNDING INSTRUMENT. TRIGGERED BY MIDI NOTES.
 
 ifreq	cpstmid	i(gkTuning)+200
 ivel	ampmidi	0.4
 
; aAmpEnv	cossegr		0, i(gkAAtt),1, i(gkADec), i(gkASus), 36000, i(gkASus),i(gkARel), 0	; SUSTAIN SEGMENT (36000) NECESSARY DUE TO cosseg BUG
 aAmpEnv	linsegr		0, i(gkAAtt),1, i(gkADec), i(gkASus),                  i(gkARel), 0	
 
 kLayers	chnget	"Layers"
 kInterval	chnget	"Interval"

 aL		PoscilLayer		(ifreq*sr*1.01)/(giTabLen*giBase), giTable, 0,   kInterval, kLayers
 aR		PoscilLayer		(ifreq*sr)     /(giTabLen*giBase), giTable, 0.5, kInterval, kLayers	; OFFSET RIGHT CHANNEL PHASE FOR STEREO BREADTH 
 
 aL		*=				ivel*aAmpEnv*gkAGain
 aR		*=				ivel*aAmpEnv*gkAGain
 
 ;aL		poscil	ivel*aAmpEnv*gkAGain, (ifreq*iInterval*sr*1.01)/(giTabLen*giBase), giTable
 ;aR		poscil	ivel*aAmpEnv*gkAGain, (ifreq*iInterval*sr)     /(giTabLen*giBase), giTable, 0.5	; OFFSET RIGHT CHANNEL PHASE FOR STEREO BREADTH 
 ; TABLE 2 IN A BAND LIMITED VERSION OF TABLE 1 BUT IS CURRENTLY NOT USED
 ;aL2	poscil	ivel*aAmpEnv*gkAGain, (ifreq*iInterval*sr*1.01)/(giTabLen*giBase), giTable2
 ;aR2	poscil	ivel*aAmpEnv*gkAGain, (ifreq*iInterval*sr)     /(giTabLen*giBase), giTable2, 0.5	; OFFSET RIGHT CHANNEL PHASE FOR STEREO BREADTH 


 if i(gkFOnOff)==1 then									; IF FILTER SWITCH IS 'ON'
  kBW		expsegr	i(gkFL1), i(gkFT1), i(gkFSus), i(gkFRelTim), i(gkFRelLev)	; BANDWIDTH ENVELOPE
  kPortTime	linseg	0,0.001,0.1							; RAMPING UP FUNCTION
  kCF		portk	ifreq * gkFPos, kPortTime					; SMOOTH CHANGES TO CUTOFF POSITION COUNTER
  aL		reson	aL, kCF, kCF*kBW, 1						; BANDPASS FILTER
  aR		reson	aR, kCF, kCF*kBW, 1
 endif 
 
 	outs	aL,aR

 gaRvbL	+=	aL*gkRSend								; MIX IN DRY SIGNAL TO SEND TO REVERB
 gaRvbR	+=	aR*gkRSend
 
endin


instr	99	; Reverb. Always on.
 aL,aR	reverbsc	gaRvbL,gaRvbR,gkRSize,gkR__CF
 	outs		aL,aR
 	clear		gaRvbL,gaRvbR
endin


</CsInstruments>

<CsScore>
i 1  0 [3600*24*7]	; READ IN WIDGETS (ALWAYS ON)
i 2  0.01 [3600*24*7]	; UPDATE TABLES (ALWAYS ON)
i 99 0 [3600*24*7]	; REVERB (ALWAYS ON)
</CsScore>

</CsoundSynthesizer>; PadSynthChoir.csd
; Written by Iain McCurdy, 2015

; Voices are created from wavetables created using the "padsynth" GEN routine.
; Each time a new voice is selected or if 'Bandwidth', 'Partial Scaling', 'Table Size', or either of the keyboard mapping tables are modified, the tables require recalculation which will take a little time.
;  The Csound Output window should indicate this activity. If it doesn't, please be patient before assuming it has crashed!

; Keygroups are used (21 in total), each group extending across 6 notes and crossfading into the next or previous wavetable stepping up or down the keyboard.
; The complete note range for each voice and vowel is from note number 24 to note number 84.
; Notes played above or below these limits will simply employ the same wavetable scaled up or down. 
; Using more wavetables which extend across fewer keys would result in very long load times.
; Using fewer wavetables which extend across more keys would result in poor results as wavetables will be scaled excessively.

; Voice		--	Choose from 5 different voice types and for each of those from 5 different vowels. 
;			'Mixed' voice types use a combination of all five voice types with the appropriate voice type chosen the various pitch ranges.
; Bandwidth	--	effectively controls modulation of the partial frequencies 
; 			(amplitude and phase modulation)
; 			Increasing this increases the amount a noise component that will be preset in all partials.       
; B.width.Kybd	--	This editable function table allows keyboard tracking according to the map defined by this table to influence bandwidth values.
;			The value derived from mapping the note played through this table is multiplied to the rotary slider value for bandwidth. 
; Part.Scal.	--	scales the modulations from partial to partial, raising this beyond 1 will result in increasing     
; 			excursive modulations in higher partials - this effect can be likened to adding 'air' into 
; 			the pad texture whilst retaining clarity in the lower partials. Experimentation with this 
; 			parameter should help in gaining an understanding of its effect.                                     
;			This control will be less effective in sounds with just a small number of partials defined. In this example this means that
;			higher notes (which call tables with fewer partials) will be less affected.
; P.scal.Kybd	--	This editable function table allows keyboard tracking according to the map defined by this table to influence partial modulation scaling.
;			The value derived from mapping the note played through this table is multiplied to the rotary slider value for partial modulation scaling. 
; Table Size	--	Size of the table created by padsynth. (Actual size will be 2 ^ 'Table Size'.)
; 			Reducing the table size will reduce the load time and the time it takes to recalculate the 
; 			table whenever a change is made to 'padsynth's parameters, but if the table becomes too small, 
; 			looping will become obvious.                          

; Filter	--	The filter section feature three stages in series: low cut (highpass), bandpass and high cut (lowpass)

<Cabbage>
form caption("Padsynth Choir"), size(1060, 420), pluginid("PSCh") style("legacy")

#define PlantBoxAppearance # shape("rounded"), colour( 30, 20, 20), outlinecolour("silver"), outlinethickness(3) #

image    bounds(  5,  5,580,130), plant("Voice 1"), $PlantBoxAppearance {
label    bounds(  5,  4,580, 15), text("Main")
label    bounds( 15, 26,100, 13), text("Voice")
combobox bounds( 15, 40,100, 25), channel("Voice"), text("Bass Ah","Bass Eh","Bass Eee","Bass Oh","Bass Ooh","Tenor Ah","Tenor Eh","Tenor Eee","Tenor Oh","Tenor Ooh","C.tenor Ah","C.tenor Eh","C.tenor Eee","C.tenor Oh","C.tenor Ooh","Alto Ah","Alto Eh","Alto Eee","Alto Oh","Alto Ooh","Soprano Ah","Soprano Eh","Soprano Eee","Soprano Oh","Soprano Ooh","Mixed Ah","Mixed Eh","Mixed Eee","Mixed Oh","Mixed Ooh"), value(26)
rslider  bounds(130, 25, 90, 90), channel("BW"),   text("Bandwidth"),  range(1,999,100,0.25,0.1), valuetextbox(1), textbox(1), popuptext("Bandwidth of Modulation")
label    bounds(220, 29, 90, 13), text("B.width Kybd.")                                                            
gentable bounds(220, 45, 90, 70), tablenumber(51), identchannel(BW_Kybd), amprange(0.001,2,51), zoom(-1), tablecolour(turquoise), active(1), fill(0)
rslider  bounds(310, 25, 90, 90), channel("PartScal"), text("Part.Scal."),  range(1,30,1,0.5,0.01), valuetextbox(1), textbox(1), popuptext("Partial Scaling")
label    bounds(400, 29, 90, 13), text("P.scal.Kybd.")
gentable bounds(400, 45, 90, 70), tablenumber(52), identchannel(PS_Kybd), amprange(0,2,52), zoom(-1), tablecolour(turquoise), active(1), fill(0)
rslider  bounds(490, 25, 90, 90), channel("TabSize"), text("Table Size"),  range(1,24,16,1,1), valuetextbox(1), textbox(1), popuptext("Larger values slow down table rebuilds!")
}

image    bounds(590,  5,270,130), plant("Voice2"), $PlantBoxAppearance {
label    bounds(  5,  4,270, 15), text("Voice 2")
checkbox bounds( 15, 33, 80, 15), channel("V2OnOff"), text("On/Off") value(1)
label    bounds( 15, 56,100, 13), text("Voice 2")
combobox bounds( 15, 70,100, 25), channel("Voice2"), text("Bass Ah","Bass Eh","Bass Eee","Bass Oh","Bass Ooh","Tenor Ah","Tenor Eh","Tenor Eee","Tenor Oh","Tenor Ooh","C.tenor Ah","C.tenor Eh","C.tenor Eee","C.tenor Oh","C.tenor Ooh","Alto Ah","Alto Eh","Alto Eee","Alto Oh","Alto Ooh","Soprano Ah","Soprano Eh","Soprano Eee","Soprano Oh","Soprano Ooh","Mixed Ah","Mixed Eh","Mixed Eee","Mixed Oh","Mixed Ooh"), value(30)
rslider  bounds(110, 25, 90, 90), channel("BW_V2"), text("Bandwidth"), range(1,999,200,0.25,0.1), valuetextbox(1), textbox(1), popuptext("Bandwidth of Modulation")
rslider  bounds(180, 25, 90, 90), channel("VoiceMix"), text("Manual"),  range(0,1,0), valuetextbox(1) textbox(1)
}

image    bounds(865,  5,160,130), plant("Exciter"), identchannel("ExciterID") alpha(0.5) $PlantBoxAppearance {
label    bounds(  5,  4,160, 15), text("Exciter")
rslider  bounds(  0, 25, 90, 90), channel("ExciterAmount"), text("Amount"),  range(0,100,0,1,0.1), valuetextbox(1), textbox(1)
rslider  bounds( 70, 25, 90, 90), channel("ExciterFreq"), text("Freq."),  range(1000,10000,3000,1,1), valuetextbox(1), textbox(1)
}

image    bounds(  5,140,370,130), plant("AmplitudeEnvelope") $PlantBoxAppearance {
label    bounds(  5,  4,370, 15), text("Amplitude Envelope")
rslider  bounds(  0, 30, 90, 90), channel("AAtt"), text("Attack"), range(0.001,5,0.5,0.5,0.001), valuetextbox(1), textbox(1)
rslider  bounds( 70, 30, 90, 90), channel("ADec"), text("Decay"),  range(0.001,5,0.01,0.5,0.001), valuetextbox(1), textbox(1)
rslider  bounds(140, 30, 90, 90), channel("ASus"), text("Sustain"),range(0,    1,1,0.5,0.001), valuetextbox(1), textbox(1)
rslider  bounds(210, 30, 90, 90), channel("ARel"), text("Release"),range(0.001,5,0.5,0.5,0.001), valuetextbox(1), textbox(1)
rslider  bounds(280, 30, 90, 90), channel("AGain"),text("Gain"),   range(0.1,  5,1,0.5,0.001), valuetextbox(1), textbox(1)
}

image    bounds(380,140,440,130), plant("FilterEnvelope"), $PlantBoxAppearance {
label    bounds(  5,  4,440, 15), text("Filter Envelope")
checkbox bounds( 15, 33, 80, 15), channel("FOnOff"), text("On/Off") value(1)
rslider  bounds( 70, 30, 90, 90), channel("FiltLowCut"), text("Low Cut"), range(20,8000,20,0.5,1), valuetextbox(1), textbox(1)
rslider  bounds(140, 30, 90, 90), channel("FiltCF"), text("Freq."), range(20,8000,150,0.5,1), valuetextbox(1), textbox(1)
rslider  bounds(210, 30, 90, 90), channel("FiltBW"), text("Bandwidth"), range(0.1,10,1,0.5), valuetextbox(1), textbox(1)
rslider  bounds(280, 30, 90, 90), channel("FiltGain"), text("Gain"), range(-24,24,12,1,0.1), valuetextbox(1), textbox(1)
rslider  bounds(350, 30, 90, 90), channel("FiltHighCut"), text("High Cut"), range(100,20000,20000,0.25,1), valuetextbox(1), textbox(1)
}

image    bounds(825,140,230,130), plant("Reverb"), $PlantBoxAppearance {
label    bounds(  5,  4,230, 15), text("Reverb")
rslider  bounds(  0, 30, 90, 90), channel("RSend"), text("Send"), range(0,1,0.5), valuetextbox(1), textbox(1)
rslider  bounds( 70, 30, 90, 90), channel("RSize"), text("Size"),  range(0,0.99,0.85), valuetextbox(1), textbox(1)
rslider  bounds(140, 30, 90, 90), channel("R__CF"), text("Damping"),range(20,20000,8000,0.5,1), valuetextbox(1), textbox(1)
}

csoundoutput bounds(5,275,1050,60)

keyboard bounds(5,335,1050, 80)
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>
sr	=	44100
ksmps	=	32
nchnls	=	2
0dbfs	=	1

massign	0,3

gaRvbL,gaRvbR	init	0

giBW_Kybd	ftgen	51,0,128,-5,1,127,1
giPS_Kybd	ftgen	52,0,128,-5,1,127,1

giNoteMap	ftgen	53,0,128,-17,   0,24,   24,24,   30,30,    36,36,    42,42,    48,48,    54,54,  60,60,  66,66,  72,72,   78,78,  84,84,  127,84
iCurve			=	-1
giFadeMap	ftgen	54,0,-6,-16,   0,  3,-iCurve,1,  3,iCurve,0

instr	1
 kMOUSE_DOWN_LEFT	chnget	"MOUSE_DOWN_LEFT"		; left click status (only allowing a reinit when the mouse button is released smooths interaction)
 if timeinstk()==1 then
  kMOUSE_DOWN_LEFT	=	1
 endif
 gkVoice	chnget	"Voice"  
 iVoice2	chnget	"Voice2"
 gkVoice2	init	iVoice2
 gkVoiceMix chnget  "VoiceMix"
 if trigger(kMOUSE_DOWN_LEFT,0.5,1)==1 then			; when left click is released update these values
  gkBW		    chnget	"BW"
  gkBW_V2		    chnget	"BW_V2"
  gkPartScal    chnget	"PartScal"
  gkHarmStr	    chnget	"HarmStr"
  gkTabSize	    chnget	"TabSize"
  gkBW1		=	limit(gkBW*table:k(24,giBW_Kybd),1,999)	
  gkBW2		=	limit(gkBW*table:k(27,giBW_Kybd),1,999)	
  gkBW3		=	limit(gkBW*table:k(30,giBW_Kybd),1,999)	
  gkBW4		=	limit(gkBW*table:k(33,giBW_Kybd),1,999)	
  gkBW5		=	limit(gkBW*table:k(36,giBW_Kybd),1,999)	
  gkBW6		=	limit(gkBW*table:k(39,giBW_Kybd),1,999)	
  gkBW7		=	limit(gkBW*table:k(42,giBW_Kybd),1,999)	
  gkBW8		=	limit(gkBW*table:k(45,giBW_Kybd),1,999)	
  gkBW9		=	limit(gkBW*table:k(48,giBW_Kybd),1,999)	
  gkBW10	=	limit(gkBW*table:k(51,giBW_Kybd),1,999)	
  gkBW11	=	limit(gkBW*table:k(54,giBW_Kybd),1,999)	
  gkBW12	=	limit(gkBW*table:k(57,giBW_Kybd),1,999)
  gkBW13	=	limit(gkBW*table:k(60,giBW_Kybd),1,999)	
  gkBW14	=	limit(gkBW*table:k(63,giBW_Kybd),1,999)	
  gkBW15	=	limit(gkBW*table:k(66,giBW_Kybd),1,999)	
  gkBW16	=	limit(gkBW*table:k(69,giBW_Kybd),1,999)	
  gkBW17	=	limit(gkBW*table:k(72,giBW_Kybd),1,999)	
  gkBW18	=	limit(gkBW*table:k(75,giBW_Kybd),1,999)	
  gkBW19	=	limit(gkBW*table:k(78,giBW_Kybd),1,999)	
  gkBW20	=	limit(gkBW*table:k(81,giBW_Kybd),1,999)	
  gkBW21	=	limit(gkBW*table:k(84,giBW_Kybd),1,999)	

  gkBW1_V2		=	limit(gkBW_V2*table:k(24,giBW_Kybd),1,999)	
  gkBW2_V2		=	limit(gkBW_V2*table:k(27,giBW_Kybd),1,999)	
  gkBW3_V2		=	limit(gkBW_V2*table:k(30,giBW_Kybd),1,999)	
  gkBW4_V2		=	limit(gkBW_V2*table:k(33,giBW_Kybd),1,999)	
  gkBW5_V2		=	limit(gkBW_V2*table:k(36,giBW_Kybd),1,999)	
  gkBW6_V2		=	limit(gkBW_V2*table:k(39,giBW_Kybd),1,999)	
  gkBW7_V2		=	limit(gkBW_V2*table:k(42,giBW_Kybd),1,999)	
  gkBW8_V2		=	limit(gkBW_V2*table:k(45,giBW_Kybd),1,999)	
  gkBW9_V2		=	limit(gkBW_V2*table:k(48,giBW_Kybd),1,999)	
  gkBW10_V2		=	limit(gkBW_V2*table:k(51,giBW_Kybd),1,999)	
  gkBW11_V2		=	limit(gkBW_V2*table:k(54,giBW_Kybd),1,999)	
  gkBW12_V2		=	limit(gkBW_V2*table:k(57,giBW_Kybd),1,999)
  gkBW13_V2		=	limit(gkBW_V2*table:k(60,giBW_Kybd),1,999)	
  gkBW14_V2		=	limit(gkBW_V2*table:k(63,giBW_Kybd),1,999)	
  gkBW15_V2		=	limit(gkBW_V2*table:k(66,giBW_Kybd),1,999)	
  gkBW16_V2		=	limit(gkBW_V2*table:k(69,giBW_Kybd),1,999)	
  gkBW17_V2		=	limit(gkBW_V2*table:k(72,giBW_Kybd),1,999)	
  gkBW18_V2		=	limit(gkBW_V2*table:k(75,giBW_Kybd),1,999)	
  gkBW19_V2		=	limit(gkBW_V2*table:k(78,giBW_Kybd),1,999)	
  gkBW20_V2		=	limit(gkBW_V2*table:k(81,giBW_Kybd),1,999)	
  gkBW21_V2		=	limit(gkBW_V2*table:k(84,giBW_Kybd),1,999)	

  gkPS1		=	limit(gkPartScal*table:k(24,giPS_Kybd),1,30)	
  gkPS2		=	limit(gkPartScal*table:k(27,giPS_Kybd),1,30)	
  gkPS3		=	limit(gkPartScal*table:k(30,giPS_Kybd),1,30)	
  gkPS4		=	limit(gkPartScal*table:k(33,giPS_Kybd),1,30)	
  gkPS5		=	limit(gkPartScal*table:k(36,giPS_Kybd),1,30)	
  gkPS6		=	limit(gkPartScal*table:k(39,giPS_Kybd),1,30)	
  gkPS7		=	limit(gkPartScal*table:k(42,giPS_Kybd),1,30)	
  gkPS8		=	limit(gkPartScal*table:k(45,giPS_Kybd),1,30)	
  gkPS9		=	limit(gkPartScal*table:k(48,giPS_Kybd),1,30)	
  gkPS10	=	limit(gkPartScal*table:k(51,giPS_Kybd),1,30)	
  gkPS11	=	limit(gkPartScal*table:k(54,giPS_Kybd),1,30)	
  gkPS12	=	limit(gkPartScal*table:k(57,giPS_Kybd),1,30)	
  gkPS13	=	limit(gkPartScal*table:k(60,giPS_Kybd),1,30)	
  gkPS14	=	limit(gkPartScal*table:k(63,giPS_Kybd),1,30)	
  gkPS15	=	limit(gkPartScal*table:k(66,giPS_Kybd),1,30)	
  gkPS16	=	limit(gkPartScal*table:k(69,giPS_Kybd),1,30)	
  gkPS17	=	limit(gkPartScal*table:k(72,giPS_Kybd),1,30)	
  gkPS18	=	limit(gkPartScal*table:k(75,giPS_Kybd),1,30)	
  gkPS19	=	limit(gkPartScal*table:k(78,giPS_Kybd),1,30)	
  gkPS20	=	limit(gkPartScal*table:k(81,giPS_Kybd),1,30)	
  gkPS21	=	limit(gkPartScal*table:k(84,giPS_Kybd),1,30)	

 endif
  
 gkAAtt         chnget	"AAtt"
 gkADec         chnget	"ADec"	
 gkASus         chnget	"ASus"
 gkARel         chnget	"ARel"	
 gkAGain        chnget	"AGain"

 gkFOnOff       chnget	"FOnOff"
 gkFiltLowCut   chnget	"FiltLowCut"
 gkFiltCF	    chnget	"FiltCF"
 gkFiltBW	    chnget	"FiltBW"
 gkFiltGain 	chnget	"FiltGain"
 gkFiltHighCut  chnget	"FiltHighCut"

 gkRSend        chnget	"RSend"
 gkRSize        chnget	"RSize"
 gkR__CF        chnget	"R__CF"

 gkMonoStereo    	init	1		

 gkExciterAmount	chnget	"ExciterAmount"	
 if trigger:k(gkExciterAmount,0.1,2)==1 then
  reinit UPDATE_EXCITER
 endif 
 UPDATE_EXCITER:
 if i(gkExciterAmount)>0 then
  chnset	"alpha(1)", "ExciterID"
 else
  chnset	"alpha(.5)", "ExciterID"
 endif
 gkExciterFreq	chnget	"ExciterFreq"

 gkV2OnOff	chnget	"V2OnOff"
 if gkV2OnOff==1 then
  gkVoiceMix	chnget	"VoiceMix"
  gkVoice2		chnget	"Voice2"
 endif
endin

instr	2	; Always on. Updates PadSynth table when relevant widgets are changed.
 ktrig	changed	gkBW,gkBW_V2,gkPartScal,gkVoice,gkVoice2,gkTabSize,gkBW1,gkBW2,gkBW3,gkBW4,gkBW5,gkBW6,gkBW7,gkBW8,gkBW9,gkBW10,gkBW11,gkBW12,gkBW13,gkBW14,gkBW15,gkBW16,gkBW17,gkBW18,gkBW19,gkBW20,gkBW21,gkPS1,gkPS2,gkPS3,gkPS4,gkPS5,gkPS6,gkPS7,gkPS8,gkPS9,gkPS10,gkPS11,gkPS12,gkPS13,gkPS14,gkPS15,gkPS16,gkPS17,gkPS18,gkPS19,gkPS20,gkPS21
 
 if ktrig==1 then
  reinit	UpdateTable
 endif
 UpdateTable:
 giBW		=	i(gkBW)
 giPartScal	=	i(gkPartScal)
 iVoice		=	i(gkVoice)
 giTabLen	=	(2^i(gkTabSize))	; IF THIS IS TOO SMALL, LOOPING OF THE SPECTRUM WILL BECOME AUDIBLE
 
 /* BASS */
 if iVoice==1 then
  giBassAh24 ftgen  1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1) , i(gkPS1)  ,1,1,1	,0.000412,0.000370,0.000337,0.000371,0.000555,0.000859,0.001305,0.001896,0.002601,0.003585,0.004729,0.006226,0.008387,0.010759,0.015604,0.021153,0.036276,0.057553,0.053066,0.030189,0.020360,0.014722,0.011349,0.009414,0.008036,0.007520,0.007518,0.008204,0.010188,0.013445,0.021468,0.024378,0.017218,0.010300,0.007574,0.005320,0.004125,0.003105,0.002351,0.001777,0.001280,0.000908,0.000603,0.000362,0.000194,0.000113,0.000107,0.000165,0.000269,0.000410,0.000591,0.000829,0.001124,0.001497,0.001964,0.002540,0.003281,0.004214,0.005465,0.007172,0.009487,0.012221,0.012290,0.008928,0.005554,0.004575,0.006297,0.009642,0.012002,0.011210,0.008864,0.007021,0.005649,0.004715,0.004092,0.003711,0.003540,0.003269,0.002720,0.002116,0.001696,0.001392,0.001163,0.000978,0.000817,0.000679,0.000554,0.000445,0.000349,0.000267,0.000201,0.000148,0.000112
  giBassAh27 ftgen  2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2) , i(gkPS2)  ,1,1,1	,0.000484,0.000423,0.000410,0.000587,0.001000,0.001640,0.002515,0.003647,0.005207,0.007188,0.010221,0.013861,0.021835,0.034169,0.065821,0.062536,0.031595,0.021762,0.014578,0.011706,0.009599,0.008934,0.009048,0.011008,0.014402,0.024811,0.028584,0.017346,0.010562,0.007037,0.005089,0.003642,0.002621,0.001845,0.001237,0.000781,0.000431,0.000198,0.000132,0.000128,0.000107,0.000154,0.000279,0.000469,0.000726,0.001077,0.001533,0.002136,0.002909,0.003944,0.005309,0.007297,0.010064,0.014010,0.014733,0.009883,0.005835,0.006234,0.010391,0.014244,0.013109,0.009848,0.007528,0.005944,0.004974,0.004420,0.004181,0.003659,0.002784,0.002107,0.001664,0.001346,0.001093,0.000881,0.000697,0.000538,0.000403,0.000292,0.000206,0.000145,0.000112
  giBassAh30 ftgen  3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3) , i(gkPS3)  ,1,1,1	,0.000560,0.000482,0.000562,0.001054,0.001899,0.003144,0.004913,0.007274,0.010934,0.015824,0.026652,0.050310,0.084386,0.048694,0.027304,0.017198,0.013209,0.010896,0.010619,0.012323,0.016925,0.031534,0.030303,0.014903,0.009410,0.006192,0.004171,0.002825,0.001804,0.001089,0.000559,0.000223,0.000135,0.000159,0.000132,0.000111,0.000205,0.000408,0.000717,0.001165,0.001784,0.002644,0.003807,0.005452,0.007846,0.011507,0.016933,0.016329,0.008970,0.006585,0.011345,0.016921,0.014673,0.010437,0.007690,0.006096,0.005243,0.004888,0.003982,0.002810,0.002096,0.001620,0.001264,0.000975,0.000730,0.000526,0.000361,0.000238,0.000159,0.000123,0.000113,0.000108
  giBassAh33 ftgen  4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4) , i(gkPS4)  ,1,1,1	,0.000645,0.000569,0.000955,0.001964,0.003652,0.006202,0.009824,0.015928,0.027700,0.054004,0.099838,0.045530,0.026122,0.017357,0.013212,0.012640,0.015734,0.025801,0.041244,0.020359,0.011360,0.006947,0.004321,0.002669,0.001503,0.000708,0.000231,0.000110,0.000186,0.000170,0.000130,0.000254,0.000564,0.001062,0.001820,0.002933,0.004538,0.006945,0.010838,0.017334,0.020883,0.011091,0.008199,0.016262,0.019876,0.013707,0.009453,0.007159,0.006126,0.005456,0.003786,0.002617,0.001920,0.001428,0.001039,0.000721,0.000469,0.000288,0.000180,0.000140,0.000132,0.000122,0.000102
  giBassAh36 ftgen  5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5) , i(gkPS5)  ,1,1,1	,0.000741,0.000742,0.001718,0.003793,0.007172,0.012458,0.021527,0.042327,0.115172,0.060415,0.029465,0.018842,0.015053,0.016424,0.026918,0.048812,0.020626,0.010654,0.006220,0.003560,0.001819,0.000726,0.000149,0.000187,0.000214,0.000156,0.000332,0.000822,0.001662,0.003004,0.005098,0.008459,0.014399,0.024542,0.017933,0.009191,0.019377,0.022533,0.014117,0.009483,0.007465,0.006578,0.004260,0.002803,0.001970,0.001367,0.000896,0.000539,0.000299,0.000185,0.000160,0.000148,0.000121
  giBassAh39 ftgen  6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6) , i(gkPS6)  ,1,1,1	,0.000846,0.001173,0.003275,0.007285,0.014357,0.027687,0.068261,0.124920,0.043474,0.023386,0.017847,0.021990,0.049566,0.034657,0.014061,0.007278,0.003688,0.001560,0.000396,0.000192,0.000256,0.000187,0.000558,0.001451,0.003062,0.005814,0.010610,0.020116,0.029454,0.011668,0.020774,0.026213,0.015055,0.009950,0.008362,0.005568,0.003330,0.002188,0.001396,0.000808,0.000411,0.000223,0.000189,0.000167,0.000123
  giBassAh42 ftgen  7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7) , i(gkPS7)  ,1,1,1	,0.000963,0.002108,0.006288,0.014551,0.031661,0.100695,0.097406,0.034417,0.021810,0.024675,0.063158,0.029838,0.012403,0.005661,0.002185,0.000448,0.000270,0.000265,0.000411,0.001440,0.003583,0.007649,0.015770,0.034040,0.018012,0.022841,0.029509,0.015471,0.010557,0.008019,0.004223,0.002548,0.001472,0.000730,0.000322,0.000229,0.000199,0.000135
  giBassAh45 ftgen  8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8) , i(gkPS8)  ,1,1,1	,0.001138,0.003929,0.012405,0.031859,0.108048,0.091053,0.034718,0.025288,0.051642,0.040725,0.013900,0.005342,0.001417,0.000220,0.000340,0.000509,0.002128,0.005880,0.013925,0.034767,0.022222,0.032638,0.027491,0.014365,0.010950,0.005254,0.002868,0.001449,0.000579,0.000282,0.000244,0.000156
  giBassAh48 ftgen  9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9) , i(gkPS9)  ,1,1,1	,0.001482,0.007584,0.024916,0.084669,0.120825,0.037691,0.032860,0.097651,0.021318,0.007128,0.001455,0.000373,0.000311,0.001646,0.006016,0.016943,0.049158,0.018410,0.045129,0.018996,0.013181,0.005616,0.002740,0.001081,0.000371,0.000296,0.000174,0.000109
  giBassAh51 ftgen 10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10), i(gkPS10) ,1,1,1	,0.002346,0.014577,0.055410,0.249952,0.046797,0.044016,0.069343,0.014565,0.003123,0.000384,0.000374,0.002906,0.011647,0.040309,0.023365,0.052509,0.019934,0.011156,0.004385,0.001619,0.000449,0.000335,0.000163,0.000126
  giBassAh54 ftgen 11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11), i(gkPS11) ,1,1,1	,0.004218,0.029108,0.201426,0.068825,0.049355,0.059660,0.011314,0.000892,0.000531,0.002882,0.015302,0.068104,0.045706,0.030943,0.016039,0.005097,0.001458,0.000457,0.000270,0.000155
  giBassAh57 ftgen 12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12), i(gkPS12) ,1,1,1	,0.007858,0.063721,0.182088,0.050577,0.081435,0.010683,0.000440,0.001018,0.011764,0.069560,0.065307,0.028732,0.010508,0.002898,0.000565,0.000313,0.000177
  giBassAh60 ftgen 13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13), i(gkPS13) ,1,1,1	,0.015174,0.169369,0.075380,0.195316,0.014245,0.000747,0.003294,0.033895,0.036836,0.037995,0.011232,0.002161,0.000593,0.000220,0.000121
  giBassAh63 ftgen 14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14), i(gkPS14) ,1,1,1	,0.029160,0.499980,0.088056,0.029134,0.000770,0.005816,0.080662,0.105049,0.022319,0.003239,0.000671,0.000252,0.000122
  giBassAh66 ftgen 15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15), i(gkPS15) ,1,1,1	,0.058218,0.137644,0.119309,0.001783,0.005763,0.136221,0.061878,0.010194,0.000915,0.000309,0.000144
  giBassAh69 ftgen 16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16), i(gkPS16) ,1,1,1	,0.127432,0.101146,0.021362,0.002037,0.139115,0.057450,0.005793,0.000626,0.000185
  giBassAh72 ftgen 17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17), i(gkPS17) ,1,1,1	,0.338719,0.390591,0.001495,0.067786,0.075975,0.004319,0.000439,0.000166
  giBassAh75 ftgen 18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18), i(gkPS18) ,1,1,1	,1.000000,0.058271,0.011635,0.210114,0.006478,0.000504,0.000138
  giBassAh78 ftgen 19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19), i(gkPS19) ,1,1,1	,0.275285,0.003566,0.272436,0.020387,0.000618,0.000157
  giBassAh81 ftgen 20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20), i(gkPS20) ,1,1,1	,0.202299,0.004074,0.114905,0.001251,0.000191
  giBassAh84 ftgen 21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21), i(gkPS21) ,1,1,1	,0.781181,0.135572,0.008638,0.000333
 elseif iVoice==2 then
  giBassEh24 ftgen  1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1) , i(gkPS1)  ,1,1,1	,0.002549,0.003134,0.003974,0.005478,0.007017,0.009323,0.012997,0.015800,0.025880,0.031561,0.069262,0.116966,0.096839,0.041388,0.030133,0.019258,0.014690,0.010922,0.008058,0.006191,0.004473,0.003237,0.002267,0.001451,0.000894,0.000442,0.000126,0.000210,0.000263,0.000265,0.000240,0.000174,0.000100,0.000185,0.000338,0.000545,0.000796,0.001110,0.001516,0.002015,0.002652,0.003519,0.004603,0.006308,0.008742,0.013114,0.019649,0.020048,0.013747,0.009105,0.006633,0.004842,0.003722,0.002793,0.002088,0.001484,0.000943,0.000453,0.000147,0.000600,0.001155,0.001779,0.002508,0.003367,0.004414,0.005764,0.007472,0.010017,0.013566,0.019406,0.025684,0.025076,0.018739,0.013927,0.011049,0.009282,0.008375,0.008024,0.008229,0.009065,0.010646,0.013251,0.016228,0.016401,0.013297,0.010080,0.008006,0.006682,0.006049,0.005955,0.006476,0.007437,0.007523,0.006180,0.004613,0.003551,0.002779,0.002235
  giBassEh27 ftgen  2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2) , i(gkPS2)  ,1,1,1	,0.003129,0.004092,0.005657,0.007860,0.010921,0.016087,0.021139,0.035868,0.062023,0.136227,0.109956,0.040456,0.031049,0.018374,0.013762,0.009515,0.006960,0.004597,0.003159,0.001921,0.001079,0.000444,0.000177,0.000312,0.000316,0.000280,0.000177,0.000171,0.000376,0.000664,0.001031,0.001514,0.002167,0.002999,0.004195,0.005777,0.008581,0.012777,0.021830,0.024145,0.015340,0.009845,0.006641,0.004815,0.003434,0.002428,0.001585,0.000853,0.000201,0.000618,0.001398,0.002299,0.003391,0.004727,0.006500,0.008859,0.012573,0.018214,0.027784,0.031145,0.022997,0.016195,0.012414,0.010478,0.009647,0.009763,0.010916,0.013349,0.017534,0.020106,0.016727,0.012049,0.009207,0.007617,0.007098,0.007517,0.008848,0.008867,0.006730,0.004810,0.003566,0.002737,0.002122,0.001644,0.001252,0.000929,0.000662,0.000447,0.000285,0.000180,0.000139,0.000140,0.000147,0.000144,0.000130,0.000107
  giBassEh30 ftgen  3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3) , i(gkPS3)  ,1,1,1	,0.003867,0.005384,0.008278,0.011948,0.018781,0.027378,0.043927,0.124923,0.154756,0.052079,0.035175,0.020879,0.013635,0.009198,0.005837,0.003709,0.002010,0.000982,0.000220,0.000161,0.000370,0.000376,0.000299,0.000147,0.000155,0.000424,0.000832,0.001379,0.002152,0.003202,0.004758,0.006982,0.011177,0.019325,0.029701,0.020304,0.011682,0.007361,0.005041,0.003356,0.002114,0.001056,0.000187,0.001017,0.002186,0.003609,0.005412,0.007905,0.011471,0.017562,0.028740,0.037414,0.026954,0.018054,0.013544,0.011691,0.011440,0.012869,0.016457,0.022485,0.022347,0.015528,0.011112,0.008894,0.008412,0.009625,0.010828,0.008346,0.005596,0.003939,0.002900,0.002141,0.001562,0.001098,0.000729,0.000449,0.000257,0.000169,0.000165,0.000175,0.000167,0.000140,0.000106
  giBassEh33 ftgen  4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4) , i(gkPS4)  ,1,1,1	,0.004867,0.007460,0.011945,0.019946,0.031209,0.054453,0.186212,0.117747,0.049349,0.025385,0.015675,0.009940,0.005668,0.003035,0.001342,0.000247,0.000261,0.000440,0.000408,0.000208,0.000179,0.000569,0.001196,0.002093,0.003439,0.005483,0.008701,0.015148,0.030996,0.029556,0.014724,0.008576,0.005437,0.003329,0.001707,0.000348,0.001213,0.002897,0.005055,0.008006,0.012446,0.020472,0.036633,0.042329,0.025547,0.017331,0.014092,0.013706,0.016241,0.022858,0.028248,0.019753,0.013157,0.010345,0.010349,0.012777,0.010845,0.006746,0.004465,0.003112,0.002165,0.001447,0.000902,0.000506,0.000263,0.000193,0.000207,0.000202,0.000165,0.000114
  giBassEh36 ftgen  5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5) , i(gkPS5)  ,1,1,1	,0.006269,0.010960,0.018651,0.031612,0.063145,0.234031,0.082814,0.038536,0.021856,0.012390,0.006478,0.002903,0.000884,0.000151,0.000526,0.000481,0.000201,0.000371,0.001091,0.002222,0.004038,0.007052,0.012642,0.026285,0.040191,0.018257,0.009711,0.005602,0.002977,0.000908,0.001205,0.003571,0.006760,0.011575,0.020120,0.038989,0.050394,0.027994,0.018663,0.016137,0.018236,0.026663,0.033012,0.020295,0.013457,0.011996,0.014986,0.012457,0.007161,0.004508,0.002937,0.001849,0.001061,0.000524,0.000256,0.000239,0.000246,0.000199,0.000126
  giBassEh39 ftgen  6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6) , i(gkPS6)  ,1,1,1	,0.008173,0.015702,0.032144,0.071650,0.272194,0.080839,0.036707,0.019016,0.009188,0.003840,0.000888,0.000353,0.000631,0.000355,0.000343,0.001326,0.003025,0.005992,0.011542,0.025532,0.048254,0.019676,0.009624,0.004854,0.001705,0.001234,0.004596,0.009451,0.017714,0.036427,0.062296,0.032396,0.020962,0.019531,0.026707,0.040231,0.024114,0.015246,0.015050,0.017756,0.009634,0.005482,0.003293,0.001861,0.000896,0.000362,0.000281,0.000290,0.000215,0.000115,0.000101
  giBassEh42 ftgen  7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7) , i(gkPS7)  ,1,1,1	,0.010770,0.023902,0.054774,0.249962,0.104159,0.041772,0.018402,0.007420,0.001965,0.000321,0.000751,0.000293,0.000854,0.002767,0.006422,0.014005,0.038772,0.040687,0.014759,0.006732,0.002120,0.002044,0.007252,0.015890,0.035324,0.075238,0.036306,0.023528,0.025922,0.045315,0.031277,0.017930,0.019424,0.016834,0.007953,0.004326,0.002219,0.000907,0.000341,0.000353,0.000285,0.000144,0.000103,0.000123
  giBassEh45 ftgen  8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8) , i(gkPS8)  ,1,1,1	,0.014919,0.039894,0.108912,0.235444,0.050771,0.019880,0.006071,0.000493,0.000880,0.000415,0.001140,0.004191,0.010980,0.030342,0.059163,0.017172,0.006666,0.000696,0.005809,0.016058,0.041074,0.084879,0.034762,0.027511,0.045921,0.039646,0.020777,0.025682,0.013556,0.006258,0.002911,0.001018,0.000389,0.000407,0.000231,0.000117,0.000145
  giBassEh48 ftgen  9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9) , i(gkPS9)  ,1,1,1	,0.021924,0.063232,0.468119,0.077063,0.024778,0.005806,0.000302,0.000961,0.000747,0.004455,0.014122,0.052633,0.036527,0.011211,0.001822,0.007148,0.023183,0.078131,0.056059,0.032330,0.053450,0.040659,0.024048,0.024961,0.009037,0.003707,0.001049,0.000481,0.000402,0.000146,0.000173,0.000107
  giBassEh51 ftgen 10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10), i(gkPS10) ,1,1,1	,0.031418,0.143370,0.161725,0.038046,0.007682,0.000705,0.000709,0.002656,0.011998,0.051134,0.039384,0.009717,0.002474,0.018934,0.072998,0.064883,0.039139,0.080623,0.030556,0.035586,0.010987,0.003730,0.000725,0.000582,0.000232,0.000203,0.000114
  giBassEh54 ftgen 11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11), i(gkPS11) ,1,1,1	,0.047801,0.499973,0.083544,0.014840,0.000643,0.000586,0.005528,0.028009,0.081360,0.013462,0.004094,0.031800,0.150499,0.047062,0.090670,0.035868,0.033668,0.008649,0.001814,0.000708,0.000286,0.000243,0.000113
  giBassEh57 ftgen 12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12), i(gkPS12) ,1,1,1	,0.079790,0.470826,0.039758,0.000985,0.000829,0.008383,0.060699,0.034340,0.001390,0.032127,0.169760,0.055035,0.079288,0.051382,0.012516,0.002036,0.000814,0.000234,0.000188,0.000140
  giBassEh60 ftgen 13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13), i(gkPS13) ,1,1,1	,0.126470,0.154125,0.011612,0.001926,0.008899,0.105301,0.022420,0.014314,0.156341,0.064675,0.081320,0.049928,0.007414,0.000961,0.000290,0.000213,0.000158
  giBassEh63 ftgen 14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14), i(gkPS14) ,1,1,1	,0.286799,0.076099,0.001412,0.005314,0.102313,0.019436,0.037889,0.129794,0.161320,0.071197,0.007462,0.001164,0.000406,0.000186,0.000100
  giBassEh66 ftgen 15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15), i(gkPS15) ,1,1,1	,0.999999,0.029677,0.001175,0.056021,0.026921,0.063607,0.094120,0.071732,0.017296,0.001415,0.000487,0.000226,0.000113
  giBassEh69 ftgen 16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16), i(gkPS16) ,1,1,1	,0.941545,0.001970,0.016767,0.068666,0.064251,0.110055,0.102753,0.004071,0.000467,0.000280,0.000117
  giBassEh72 ftgen 17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17), i(gkPS17) ,1,1,1	,0.308230,0.003850,0.210611,0.028628,0.129335,0.099831,0.001921,0.000427,0.000186
  giBassEh75 ftgen 18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18), i(gkPS18) ,1,1,1	,0.152203,0.010631,0.038873,0.259601,0.142407,0.002328,0.000372,0.000102
  giBassEh78 ftgen 19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19), i(gkPS19) ,1,1,1	,0.059354,0.112042,0.127210,0.143460,0.002830,0.000452,0.000116
  giBassEh81 ftgen 20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20), i(gkPS20) ,1,1,1	,0.003941,0.137332,0.220127,0.008140,0.000560
  giBassEh84 ftgen 21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21), i(gkPS21) ,1,1,1	,0.007699,0.057256,0.199662,0.000854,0.000109
 elseif iVoice==3 then
  giBassEee24 ftgen  1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1) , i(gkPS1)  ,1,1,1	,0.010612,0.014495,0.019809,0.028477,0.041398,0.063942,0.114518,0.124942,0.078855,0.046228,0.033959,0.023394,0.018143,0.013375,0.010099,0.007577,0.005431,0.003901,0.002611,0.001632,0.000932,0.000386,0.000171,0.000289,0.000422,0.000452,0.000449,0.000398,0.000315,0.000237,0.000144,0.000104,0.000105,0.000153,0.000215,0.000290,0.000380,0.000487,0.000633,0.000816,0.001099,0.001507,0.002203,0.003126,0.003165,0.002277,0.001567,0.001153,0.000855,0.000658,0.000500,0.000378,0.000277,0.000186,0.000102,0.000154,0.000300,0.000490,0.000733,0.001033,0.001413,0.001885,0.002475,0.003256,0.004250,0.005714,0.007781,0.011083,0.015021,0.015148,0.011378,0.008165,0.006212,0.004895,0.004095,0.003568,0.003306,0.003268,0.003450,0.003938,0.004750,0.006020,0.007017,0.006500,0.005013,0.003837,0.003082,0.002641,0.002479,0.002562
  giBassEee27 ftgen  2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2) , i(gkPS2)  ,1,1,1	,0.013361,0.019632,0.028170,0.046001,0.073446,0.142620,0.135320,0.067419,0.045253,0.028671,0.021074,0.014727,0.010611,0.007252,0.004920,0.003071,0.001747,0.000807,0.000249,0.000303,0.000500,0.000540,0.000520,0.000422,0.000309,0.000180,0.000119,0.000127,0.000103,0.000168,0.000256,0.000366,0.000497,0.000673,0.000915,0.001288,0.001877,0.003013,0.003942,0.003063,0.001933,0.001339,0.000949,0.000692,0.000498,0.000349,0.000219,0.000102,0.000105,0.000283,0.000531,0.000867,0.001300,0.001875,0.002609,0.003613,0.004968,0.007064,0.010239,0.015759,0.018744,0.014260,0.009604,0.006959,0.005391,0.004464,0.003989,0.003908,0.004207,0.005028,0.006490,0.008241,0.007854,0.005766,0.004257,0.003368,0.002997,0.003039,0.003534,0.003719,0.002952,0.002107,0.001565,0.001195,0.000929,0.000719,0.000551,0.000410,0.000295,0.000202,0.000133
  giBassEee30 ftgen  3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3) , i(gkPS3)  ,1,1,1	,0.016942,0.026728,0.044993,0.073582,0.166083,0.150187,0.067471,0.042023,0.027730,0.018157,0.012270,0.007756,0.004771,0.002544,0.001124,0.000288,0.000418,0.000628,0.000639,0.000532,0.000370,0.000189,0.000133,0.000151,0.000118,0.000167,0.000288,0.000442,0.000634,0.000915,0.001325,0.002073,0.003575,0.004636,0.003020,0.001869,0.001215,0.000836,0.000565,0.000361,0.000186,0.000308,0.000658,0.001154,0.001829,0.002760,0.004060,0.005937,0.009069,0.014428,0.021876,0.018429,0.011479,0.007850,0.005939,0.004916,0.004612,0.004928,0.006092,0.008369,0.009952,0.007626,0.005224,0.003945,0.003510,0.003799,0.004447,0.003710,0.002491,0.001752,0.001285,0.000950,0.000696,0.000493,0.000332,0.000209,0.000125
  giBassEee33 ftgen  4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4) , i(gkPS4)  ,1,1,1	,0.021903,0.037076,0.070524,0.170727,0.184856,0.075853,0.042006,0.026533,0.016384,0.009694,0.005423,0.002512,0.000745,0.000367,0.000734,0.000760,0.000589,0.000358,0.000113,0.000157,0.000177,0.000123,0.000164,0.000331,0.000549,0.000839,0.001298,0.002144,0.003934,0.005481,0.003133,0.001834,0.001150,0.000725,0.000430,0.000185,0.000178,0.000585,0.001216,0.002131,0.003468,0.005492,0.008727,0.014780,0.025548,0.021159,0.012320,0.008120,0.006189,0.005514,0.005907,0.007722,0.011241,0.010580,0.006710,0.004738,0.004184,0.004875,0.005074,0.003298,0.002150,0.001485,0.001035,0.000705,0.000453,0.000265,0.000143
  giBassEee36 ftgen  5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5) , i(gkPS5)  ,1,1,1	,0.028999,0.056971,0.127925,0.249973,0.092491,0.046808,0.026763,0.015161,0.007806,0.003265,0.000772,0.000577,0.000905,0.000797,0.000474,0.000128,0.000118,0.000208,0.000175,0.000190,0.000430,0.000762,0.001269,0.002203,0.004418,0.006347,0.003143,0.001714,0.001003,0.000555,0.000205,0.000308,0.000984,0.002075,0.003788,0.006543,0.011486,0.022285,0.030464,0.016426,0.009849,0.007181,0.006579,0.007931,0.012129,0.013098,0.007735,0.005325,0.005167,0.006343,0.004251,0.002537,0.001641,0.001065,0.000654,0.000360,0.000176,0.000109,0.000108
  giBassEee39 ftgen  6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6) , i(gkPS6)  ,1,1,1	,0.039208,0.091871,0.284850,0.134665,0.057264,0.029417,0.014487,0.006136,0.001614,0.000605,0.001080,0.000843,0.000360,0.000237,0.000205,0.000101,0.000336,0.000730,0.001345,0.002573,0.006021,0.006121,0.002677,0.001384,0.000697,0.000205,0.000565,0.001734,0.003749,0.007227,0.014133,0.031533,0.028537,0.013927,0.008934,0.007821,0.010066,0.016499,0.011547,0.006746,0.006088,0.007451,0.004223,0.002395,0.001442,0.000822,0.000405,0.000174,0.000127,0.000124
  giBassEee42 ftgen  7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7) , i(gkPS7)  ,1,1,1	,0.053470,0.147208,0.300415,0.084059,0.036324,0.015517,0.005091,0.000576,0.001256,0.001064,0.000377,0.000160,0.000303,0.000150,0.000341,0.000891,0.001840,0.004161,0.009292,0.003746,0.001676,0.000724,0.000174,0.001325,0.003681,0.008171,0.018259,0.044043,0.023100,0.011960,0.009296,0.012291,0.020077,0.010540,0.007087,0.008984,0.005033,0.002599,0.001411,0.000675,0.000255,0.000150,0.000143
  giBassEee45 ftgen  8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8) , i(gkPS8)  ,1,1,1	,0.074148,0.341465,0.151691,0.053062,0.019387,0.005023,0.000735,0.001519,0.000715,0.000141,0.000355,0.000141,0.000664,0.001681,0.004296,0.010976,0.003672,0.001452,0.000370,0.001174,0.004275,0.011021,0.029674,0.042441,0.016298,0.011074,0.015522,0.021253,0.009522,0.009803,0.006632,0.002990,0.001422,0.000537,0.000189,0.000178,0.000110
  giBassEee48 ftgen  9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9) , i(gkPS9)  ,1,1,1	,0.113952,0.499961,0.093618,0.030324,0.006532,0.001153,0.001593,0.000254,0.000416,0.000182,0.000869,0.002549,0.008846,0.006282,0.002003,0.000401,0.001977,0.007592,0.023020,0.061020,0.019732,0.013187,0.024324,0.015505,0.010364,0.008518,0.003290,0.001312,0.000353,0.000214,0.000143
  giBassEee51 ftgen 10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10), i(gkPS10) ,1,1,1	,0.183849,0.269450,0.058864,0.012277,0.001210,0.001686,0.000115,0.000411,0.000673,0.002694,0.012061,0.005358,0.001397,0.001131,0.007512,0.028323,0.057149,0.017903,0.020182,0.023136,0.012207,0.008465,0.002892,0.000813,0.000255,0.000186
  giBassEee54 ftgen 11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11), i(gkPS11) ,1,1,1	,0.294425,0.168105,0.031031,0.001152,0.002129,0.000319,0.000295,0.001773,0.008324,0.007496,0.001451,0.002648,0.016348,0.088119,0.023921,0.024596,0.021078,0.017984,0.005195,0.001344,0.000303,0.000185,0.000105
  giBassEee57 ftgen 12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12), i(gkPS12) ,1,1,1	,0.682961,0.106120,0.010046,0.003039,0.000281,0.000282,0.003363,0.021952,0.002902,0.002350,0.022051,0.084871,0.022153,0.042507,0.019617,0.005980,0.001075,0.000355,0.000117
  giBassEee60 ftgen 13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13), i(gkPS13) ,1,1,1	,0.999999,0.060648,0.002312,0.000510,0.000354,0.005083,0.012579,0.000821,0.015185,0.122052,0.026381,0.031005,0.017044,0.002622,0.000436,0.000138
  giBassEee63 ftgen 14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14), i(gkPS14) ,1,1,1	,0.538975,0.024555,0.003372,0.000823,0.005390,0.010718,0.002266,0.056680,0.035812,0.046282,0.016933,0.001625,0.000371,0.000151
  giBassEee66 ftgen 15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15), i(gkPS15) ,1,1,1	,0.336196,0.002303,0.000636,0.003546,0.014990,0.005298,0.176248,0.049197,0.035968,0.002688,0.000369,0.000111
  giBassEee69 ftgen 16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16), i(gkPS16) ,1,1,1	,0.212220,0.006076,0.000565,0.043897,0.004701,0.169692,0.084989,0.011954,0.000713,0.000170
  giBassEee72 ftgen 17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17), i(gkPS17) ,1,1,1	,0.121291,0.001021,0.010166,0.001642,0.244060,0.061995,0.005244,0.000275,0.000113
  giBassEee75 ftgen 18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18), i(gkPS18) ,1,1,1	,0.049112,0.001647,0.021440,0.113388,0.092568,0.003249,0.000304,0.000100
  giBassEee78 ftgen 19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19), i(gkPS19) ,1,1,1	,0.004609,0.007093,0.010596,0.098393,0.005375,0.000222
  giBassEee81 ftgen 20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20), i(gkPS20) ,1,1,1	,0.012152,0.087798,0.339376,0.023913,0.000340
  giBassEee84 ftgen 21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21), i(gkPS21) ,1,1,1	,0.002039,0.003283,0.123990,0.000551,0.000112
 elseif iVoice==4 then
  giBassOh24 ftgen  1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1) , i(gkPS1)  ,1,1,1	,0.002656,0.003252,0.004105,0.005622,0.007160,0.009459,0.013108,0.015856,0.025894,0.031448,0.069195,0.117293,0.097983,0.042979,0.032065,0.021929,0.018078,0.015475,0.014066,0.014550,0.016289,0.021526,0.023582,0.017583,0.010850,0.007974,0.005821,0.004584,0.003615,0.002841,0.002234,0.001707,0.001268,0.000905,0.000600,0.000361,0.000186,0.000124,0.000163,0.000187,0.000186,0.000166,0.000139,0.000101,0.000100,0.000137,0.000189,0.000263,0.000361,0.000489,0.000654,0.000858,0.001117,0.001451,0.001869,0.002471,0.003247,0.004440,0.005393,0.004629,0.002917,0.002066,0.002532,0.003852,0.005391,0.005792,0.004814,0.003675,0.002842,0.002214,0.001763,0.001401,0.001091,0.000746,0.000345,0.000127,0.000165,0.000194,0.000194,0.000185,0.000171,0.000154,0.000137,0.000119,0.000101
  giBassOh27 ftgen  2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2) , i(gkPS2)  ,1,1,1	,0.003258,0.004239,0.005824,0.008031,0.011084,0.016213,0.021193,0.035813,0.061897,0.136532,0.111390,0.042393,0.033786,0.022028,0.018961,0.016732,0.017591,0.021496,0.028305,0.022987,0.013061,0.009039,0.006327,0.004802,0.003617,0.002714,0.001972,0.001369,0.000897,0.000513,0.000245,0.000108,0.000159,0.000210,0.000226,0.000203,0.000166,0.000112,0.000138,0.000201,0.000297,0.000435,0.000622,0.000874,0.001199,0.001639,0.002216,0.003089,0.004305,0.006101,0.005978,0.003630,0.002459,0.003410,0.005563,0.006988,0.005953,0.004329,0.003190,0.002395,0.001829,0.001373,0.000891,0.000334,0.000160,0.000222,0.000234,0.000222,0.000202,0.000178,0.000153,0.000127,0.000102
  giBassOh30 ftgen  3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3) , i(gkPS3)  ,1,1,1	,0.004023,0.005567,0.008482,0.012147,0.018935,0.027436,0.043784,0.124923,0.156060,0.054359,0.038530,0.025628,0.020731,0.020302,0.024164,0.033681,0.024398,0.013158,0.008555,0.006066,0.004329,0.003073,0.002076,0.001307,0.000716,0.000311,0.000128,0.000209,0.000264,0.000252,0.000205,0.000130,0.000103,0.000161,0.000252,0.000400,0.000621,0.000939,0.001374,0.001992,0.002862,0.004244,0.006522,0.007371,0.004231,0.002979,0.004965,0.007920,0.007484,0.005169,0.003596,0.002580,0.001862,0.001227,0.000441,0.000198,0.000273,0.000271,0.000248,0.000214,0.000179,0.000142,0.000109
  giBassOh33 ftgen  4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4) , i(gkPS4)  ,1,1,1	,0.005059,0.007690,0.012187,0.020150,0.031282,0.054249,0.186526,0.120147,0.052781,0.030786,0.024379,0.024804,0.034918,0.035401,0.016807,0.010063,0.006707,0.004475,0.002912,0.001727,0.000868,0.000313,0.000184,0.000294,0.000312,0.000251,0.000145,0.000162,0.000275,0.000476,0.000802,0.001297,0.002024,0.003113,0.004960,0.008196,0.007816,0.003687,0.004946,0.009187,0.008701,0.005588,0.003662,0.002498,0.001599,0.000503,0.000264,0.000332,0.000310,0.000265,0.000215,0.000163,0.000117
  giBassOh36 ftgen  5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5) , i(gkPS5)  ,1,1,1	,0.006506,0.011247,0.018924,0.031724,0.062920,0.234685,0.085997,0.043880,0.030968,0.029117,0.043082,0.035194,0.015962,0.009176,0.005688,0.003419,0.001811,0.000723,0.000184,0.000326,0.000373,0.000279,0.000129,0.000146,0.000275,0.000527,0.000981,0.001724,0.002915,0.004964,0.008921,0.009303,0.004152,0.007745,0.011649,0.007393,0.004456,0.002821,0.001501,0.000256,0.000391,0.000373,0.000311,0.000239,0.000169,0.000110
  giBassOh39 ftgen  6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6) , i(gkPS6)  ,1,1,1	,0.008468,0.016044,0.032394,0.071542,0.272804,0.084708,0.044003,0.033428,0.042935,0.045900,0.018050,0.009589,0.005421,0.002735,0.001024,0.000216,0.000420,0.000405,0.000225,0.000125,0.000277,0.000594,0.001244,0.002397,0.004430,0.008609,0.011959,0.004919,0.011123,0.011908,0.006381,0.003660,0.001783,0.000320,0.000469,0.000405,0.000305,0.000205,0.000123
  giBassOh42 ftgen  7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7) , i(gkPS7)  ,1,1,1	,0.011135,0.024299,0.054889,0.249961,0.108722,0.051276,0.040626,0.067415,0.026335,0.012142,0.006153,0.002616,0.000622,0.000415,0.000502,0.000257,0.000119,0.000122,0.000324,0.000801,0.001884,0.004002,0.008536,0.014820,0.005995,0.015949,0.010404,0.005196,0.002469,0.000400,0.000547,0.000433,0.000288,0.000164
  giBassOh45 ftgen  8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8) , i(gkPS8)  ,1,1,1	,0.015381,0.040301,0.108505,0.240245,0.061575,0.049617,0.070803,0.020128,0.008953,0.003454,0.000627,0.000589,0.000502,0.000134,0.000183,0.000551,0.001609,0.004060,0.009951,0.015670,0.009932,0.017456,0.007348,0.003209,0.000530,0.000621,0.000431,0.000236,0.000113
  giBassOh48 ftgen  9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9) , i(gkPS9)  ,1,1,1	,0.022496,0.063453,0.469427,0.087754,0.058244,0.070388,0.018356,0.006838,0.001446,0.000651,0.000556,0.000143,0.000122,0.000550,0.001961,0.005833,0.017875,0.008317,0.023338,0.008927,0.003005,0.000784,0.000625,0.000341,0.000143
  giBassOh51 ftgen 10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10), i(gkPS10) ,1,1,1	,0.032102,0.143154,0.169468,0.066893,0.091855,0.019191,0.005474,0.000433,0.000811,0.000162,0.000249,0.001190,0.004802,0.017251,0.009855,0.023855,0.007334,0.000641,0.000812,0.000411,0.000150,0.000101
  giBassOh54 ftgen 11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11), i(gkPS11) ,1,1,1	,0.048599,0.499974,0.102552,0.134829,0.024280,0.005230,0.000837,0.000520,0.000237,0.000241,0.001607,0.008013,0.029637,0.031910,0.010392,0.000800,0.000865,0.000325,0.000132
  giBassOh57 ftgen 12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12), i(gkPS12) ,1,1,1	,0.080605,0.480428,0.099238,0.040254,0.006909,0.001178,0.000182,0.000102,0.001103,0.008123,0.031336,0.034912,0.006417,0.001243,0.000473,0.000155
  giBassOh60 ftgen 13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13), i(gkPS13) ,1,1,1	,0.126917,0.175507,0.140772,0.013677,0.001307,0.000241,0.003934,0.035768,0.046682,0.006011,0.001247,0.000283,0.000138
  giBassOh63 ftgen 14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14), i(gkPS14) ,1,1,1	,0.286365,0.133810,0.038389,0.000867,0.000107,0.000499,0.009611,0.019717,0.014670,0.001624,0.000299,0.000129
  giBassOh66 ftgen 15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15), i(gkPS15) ,1,1,1	,1.000002,0.269661,0.010462,0.001040,0.000483,0.016028,0.063825,0.001601,0.000650,0.000177
  giBassOh69 ftgen 16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16), i(gkPS16) ,1,1,1	,0.960747,0.080495,0.002355,0.000205,0.016245,0.069803,0.002487,0.000311,0.000112
  giBassOh72 ftgen 17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17), i(gkPS17) ,1,1,1	,0.350990,0.027349,0.007868,0.093348,0.002493,0.000277
  giBassOh75 ftgen 18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18), i(gkPS18) ,1,1,1	,0.267641,0.001732,0.001001,0.039440,0.003247,0.000257
  giBassOh78 ftgen 19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19), i(gkPS19) ,1,1,1	,0.539313,0.002079,0.032056,0.003202,0.000354
  giBassOh81 ftgen 20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20), i(gkPS20) ,1,1,1	,0.160992,0.000409,0.139609,0.000620,0.000116
  giBassOh84 ftgen 21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21), i(gkPS21) ,1,1,1	,0.054697,0.015735,0.004986,0.000134
 elseif iVoice==5 then
  giBassOoh24 ftgen  1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1) , i(gkPS1)  ,1,1,1	,0.004170,0.004767,0.005809,0.007125,0.009423,0.012338,0.016616,0.025281,0.036773,0.084223,0.097509,0.055644,0.026776,0.021850,0.013883,0.011537,0.008646,0.005282,0.002155,0.001654,0.001414,0.001239,0.001040,0.000878,0.000785,0.000712,0.000629,0.000575,0.000483,0.000406,0.000327,0.000237,0.000173,0.000104,0.000121,0.000160,0.000207,0.000263,0.000334,0.000421,0.000551,0.000726,0.001018,0.001329,0.001313,0.001049,0.000891,0.000885,0.000983,0.001199,0.001540,0.001977,0.002121,0.001784,0.001340,0.001034,0.000826,0.000705,0.000652,0.000680,0.000715,0.000646,0.000503,0.000390,0.000309,0.000249,0.000204,0.000167,0.000137,0.000111
  giBassOoh27 ftgen  2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2) , i(gkPS2)  ,1,1,1	,0.005030,0.006191,0.007651,0.010372,0.014571,0.021434,0.030781,0.071907,0.119545,0.072776,0.031574,0.022556,0.015399,0.011394,0.007041,0.002518,0.001911,0.001634,0.001295,0.001096,0.000937,0.000834,0.000721,0.000630,0.000508,0.000397,0.000272,0.000181,0.000107,0.000153,0.000213,0.000285,0.000379,0.000500,0.000688,0.000967,0.001445,0.001618,0.001277,0.001057,0.001077,0.001285,0.001687,0.002301,0.002526,0.001994,0.001425,0.001068,0.000863,0.000780,0.000826,0.000841,0.000676,0.000495,0.000375,0.000290,0.000229,0.000180,0.000141,0.000108
  giBassOoh30 ftgen  3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3) , i(gkPS3)  ,1,1,1	,0.006083,0.008003,0.010711,0.016374,0.024519,0.037449,0.112833,0.124998,0.041417,0.028771,0.018019,0.012343,0.005402,0.002386,0.001972,0.001531,0.001231,0.001066,0.000905,0.000784,0.000607,0.000449,0.000285,0.000153,0.000101,0.000109,0.000153,0.000230,0.000327,0.000460,0.000642,0.000947,0.001505,0.001937,0.001502,0.001242,0.001345,0.001774,0.002567,0.002998,0.002232,0.001518,0.001113,0.000935,0.000970,0.000984,0.000727,0.000511,0.000372,0.000279,0.000210,0.000157,0.000113
  giBassOoh33 ftgen  4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4) , i(gkPS4)  ,1,1,1	,0.007502,0.010380,0.016096,0.024230,0.043922,0.147876,0.113247,0.043397,0.022792,0.015355,0.005760,0.002715,0.002152,0.001629,0.001298,0.001071,0.000882,0.000647,0.000405,0.000215,0.000125,0.000127,0.000114,0.000198,0.000315,0.000473,0.000703,0.001106,0.001912,0.002216,0.001551,0.001530,0.002044,0.003150,0.003426,0.002208,0.001462,0.001135,0.001161,0.001127,0.000745,0.000502,0.000355,0.000253,0.000178,0.000120
  giBassOoh36 ftgen  5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5) , i(gkPS5)  ,1,1,1	,0.009537,0.014254,0.024685,0.050579,0.168510,0.111335,0.043720,0.023086,0.010571,0.003311,0.002480,0.001757,0.001426,0.001152,0.000813,0.000474,0.000209,0.000141,0.000155,0.000117,0.000124,0.000242,0.000415,0.000671,0.001107,0.002045,0.002638,0.001790,0.001976,0.003097,0.004267,0.002696,0.001662,0.001314,0.001439,0.001013,0.000623,0.000411,0.000275,0.000178,0.000106
  giBassOoh39 ftgen  6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6) , i(gkPS6)  ,1,1,1	,0.012372,0.020730,0.042850,0.143721,0.145460,0.045094,0.022771,0.005016,0.003262,0.002189,0.001666,0.001260,0.000793,0.000362,0.000117,0.000168,0.000179,0.000112,0.000138,0.000307,0.000569,0.001000,0.001934,0.003236,0.002114,0.002570,0.004603,0.003988,0.002137,0.001561,0.001683,0.000990,0.000581,0.000361,0.000217,0.000117
  giBassOoh42 ftgen  7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7) , i(gkPS7)  ,1,1,1	,0.016008,0.032755,0.074919,0.250025,0.057545,0.024692,0.004776,0.003064,0.002133,0.001569,0.000898,0.000306,0.000146,0.000215,0.000146,0.000188,0.000459,0.000921,0.001903,0.003897,0.002498,0.003572,0.006036,0.003057,0.001884,0.001984,0.001031,0.000565,0.000317,0.000160
  giBassOoh45 ftgen  8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8) , i(gkPS8)  ,1,1,1	,0.020759,0.048464,0.295785,0.086792,0.030710,0.005430,0.003258,0.002143,0.001295,0.000430,0.000194,0.000255,0.000111,0.000112,0.000397,0.000949,0.002219,0.004444,0.003070,0.006325,0.004431,0.002278,0.002265,0.001008,0.000508,0.000241
  giBassOoh48 ftgen  9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9) , i(gkPS9)  ,1,1,1	,0.028510,0.101166,0.222637,0.046174,0.006623,0.003513,0.002303,0.000949,0.000184,0.000305,0.000110,0.000102,0.000478,0.001339,0.004097,0.003587,0.006207,0.005401,0.002632,0.002031,0.000827,0.000359,0.000115
  giBassOoh51 ftgen 10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10), i(gkPS10) ,1,1,1	,0.041474,0.287568,0.090200,0.010044,0.004379,0.002520,0.000724,0.000336,0.000224,0.000275,0.001139,0.003874,0.004235,0.009226,0.004283,0.003373,0.001165,0.000434,0.000107
  giBassOoh54 ftgen 11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11), i(gkPS11) ,1,1,1	,0.065511,0.500015,0.049381,0.006128,0.003138,0.000611,0.000437,0.000383,0.001850,0.007794,0.007149,0.006113,0.003967,0.001128,0.000317
  giBassOoh57 ftgen 12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12), i(gkPS12) ,1,1,1	,0.096931,0.173581,0.010859,0.004286,0.000861,0.000510,0.000225,0.001899,0.008888,0.012656,0.004558,0.002017,0.000482
  giBassOoh60 ftgen 13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13), i(gkPS13) ,1,1,1	,0.202350,0.092351,0.007027,0.001897,0.000620,0.000129,0.000970,0.008202,0.012422,0.005266,0.001649,0.000227
  giBassOoh63 ftgen 14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14), i(gkPS14) ,1,1,1	,0.575236,0.020098,0.005041,0.000672,0.000138,0.002281,0.008473,0.008567,0.002331,0.000214
  giBassOoh66 ftgen 15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15), i(gkPS15) ,1,1,1	,1.000000,0.012255,0.001224,0.000167,0.000119,0.003699,0.014299,0.007933,0.000634,0.000110
  giBassOoh69 ftgen 16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16), i(gkPS16) ,1,1,1	,0.347133,0.008571,0.001019,0.003798,0.025311,0.004032,0.000169
  giBassOoh72 ftgen 17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17), i(gkPS17) ,1,1,1	,0.184689,0.003794,0.000258,0.001940,0.024843,0.003298,0.000182
  giBassOoh75 ftgen 18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18), i(gkPS18) ,1,1,1	,0.040199,0.001344,0.000201,0.016948,0.004662,0.000147
  giBassOoh78 ftgen 19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19), i(gkPS19) ,1,1,1	,0.024509,0.000334,0.007398,0.015866,0.000219
  giBassOoh81 ftgen 20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20), i(gkPS20) ,1,1,1	,0.017142,0.050630,0.000336
  giBassOoh84 ftgen 21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21), i(gkPS21) ,1,1,1	,0.007586,0.003880,0.006596
 /* TENOR */
 elseif iVoice==6 then
  giTenorAh24 ftgen  1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1) , i(gkPS1)  ,1,1,1	,0.000583,0.000538,0.000460,0.000380,0.000388,0.000576,0.000951,0.001458,0.002147,0.003005,0.004083,0.005479,0.007166,0.009451,0.012430,0.016493,0.023155,0.032764,0.051969,0.061659,0.047828,0.030764,0.022969,0.017260,0.014303,0.012261,0.011262,0.011171,0.011848,0.014033,0.017624,0.024861,0.029338,0.024087,0.015948,0.011498,0.008368,0.006382,0.004890,0.003733,0.002846,0.002112,0.001533,0.001072,0.000708,0.000443,0.000260,0.000174,0.000165,0.000177,0.000179,0.000163,0.000135,0.000113,0.000143,0.000167,0.000180,0.000184,0.000185,0.000201,0.000268,0.000401,0.000606,0.000882,0.001240,0.001688,0.002239,0.002922,0.003753,0.004799,0.006128,0.007860,0.010282,0.013541,0.017840,0.020070,0.017502,0.013105,0.010276,0.009233,0.009930,0.012379,0.015621,0.016680,0.014400,0.011294,0.008942,0.007204,0.005991,0.005111,0.004508,0.004114,0.003872,0.003547,0.002939
  giTenorAh27 ftgen  2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2) , i(gkPS2)  ,1,1,1	,0.000687,0.000612,0.000487,0.000443,0.000667,0.001204,0.001979,0.003057,0.004439,0.006332,0.008723,0.012150,0.016682,0.024614,0.036410,0.062524,0.071897,0.047198,0.030625,0.021709,0.017111,0.014322,0.013279,0.013564,0.015875,0.020510,0.030613,0.034231,0.023560,0.015114,0.010394,0.007498,0.005453,0.003961,0.002827,0.001944,0.001277,0.000775,0.000433,0.000237,0.000194,0.000210,0.000212,0.000185,0.000139,0.000103,0.000152,0.000190,0.000213,0.000219,0.000222,0.000264,0.000405,0.000664,0.001044,0.001561,0.002232,0.003095,0.004195,0.005621,0.007518,0.010165,0.014016,0.019655,0.023962,0.020629,0.014615,0.011499,0.011311,0.014111,0.018689,0.019687,0.015745,0.011810,0.009057,0.007235,0.006000,0.005218,0.004763,0.004396,0.003608,0.002646,0.002014,0.001621,0.001344,0.001117,0.000916,0.000734,0.000568,0.000422,0.000298,0.000203,0.000142,0.000117,0.000116,0.000118,0.000115
  giTenorAh30 ftgen  3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3) , i(gkPS3)  ,1,1,1	,0.000802,0.000674,0.000523,0.000689,0.001389,0.002504,0.004118,0.006355,0.009422,0.013917,0.020353,0.032454,0.055699,0.087276,0.061357,0.036058,0.024181,0.018765,0.016031,0.015921,0.018738,0.025814,0.040021,0.034794,0.019857,0.012723,0.008611,0.005883,0.004012,0.002612,0.001611,0.000893,0.000439,0.000242,0.000241,0.000254,0.000220,0.000152,0.000106,0.000178,0.000230,0.000257,0.000260,0.000288,0.000455,0.000818,0.001385,0.002191,0.003277,0.004737,0.006712,0.009481,0.013715,0.020280,0.027934,0.024626,0.016448,0.013135,0.014739,0.020750,0.023477,0.018047,0.012882,0.009552,0.007507,0.006271,0.005611,0.005025,0.003750,0.002614,0.001991,0.001589,0.001273,0.000999,0.000753,0.000538,0.000359,0.000228,0.000153,0.000136,0.000139,0.000137,0.000122
  giTenorAh33 ftgen  4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4) , i(gkPS4)  ,1,1,1	,0.000932,0.000718,0.000659,0.001407,0.002892,0.005202,0.008652,0.013651,0.021662,0.036789,0.070120,0.102139,0.054521,0.032839,0.023181,0.019038,0.019227,0.024920,0.041242,0.045371,0.023935,0.014094,0.008980,0.005704,0.003505,0.002002,0.000991,0.000417,0.000274,0.000304,0.000270,0.000176,0.000182,0.000265,0.000306,0.000311,0.000394,0.000759,0.001464,0.002554,0.004117,0.006330,0.009569,0.014606,0.023150,0.033635,0.026442,0.017079,0.016240,0.023483,0.027945,0.019964,0.013524,0.009824,0.007738,0.006717,0.005807,0.003917,0.002676,0.002012,0.001549,0.001160,0.000819,0.000533,0.000316,0.000191,0.000162,0.000167,0.000158,0.000129
  giTenorAh36 ftgen  5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5) , i(gkPS5)  ,1,1,1	,0.001076,0.000760,0.001152,0.002918,0.006013,0.010963,0.018910,0.033003,0.065564,0.123397,0.061570,0.034546,0.024544,0.022364,0.028096,0.049779,0.048235,0.023028,0.012783,0.007477,0.004231,0.002147,0.000887,0.000349,0.000355,0.000327,0.000195,0.000152,0.000288,0.000361,0.000371,0.000539,0.001217,0.002491,0.004498,0.007542,0.012318,0.020674,0.035880,0.035208,0.020677,0.019986,0.031450,0.029001,0.018014,0.012074,0.009087,0.007807,0.005927,0.003587,0.002503,0.001834,0.001291,0.000830,0.000470,0.000249,0.000194,0.000200,0.000178,0.000130
  giTenorAh39 ftgen  6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6) , i(gkPS6)  ,1,1,1	,0.001221,0.000884,0.002403,0.006103,0.012641,0.024258,0.049147,0.124843,0.094249,0.043351,0.028599,0.027085,0.040952,0.068353,0.030182,0.014975,0.007910,0.003883,0.001548,0.000473,0.000421,0.000370,0.000161,0.000304,0.000426,0.000443,0.000809,0.002086,0.004462,0.008387,0.015033,0.028032,0.047931,0.029239,0.022629,0.037393,0.031509,0.018127,0.012012,0.009537,0.007224,0.004034,0.002693,0.001836,0.001138,0.000598,0.000284,0.000232,0.000231,0.000177,0.000105
  giTenorAh42 ftgen  7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7) , i(gkPS7)  ,1,1,1	,0.001347,0.001378,0.005009,0.012714,0.027848,0.064949,0.174667,0.072154,0.037557,0.031873,0.051698,0.069662,0.025483,0.011788,0.005236,0.001791,0.000485,0.000510,0.000306,0.000357,0.000517,0.000580,0.001645,0.004407,0.009531,0.019083,0.040846,0.049561,0.026461,0.041849,0.036370,0.019264,0.012655,0.010146,0.005280,0.003211,0.002020,0.001088,0.000460,0.000274,0.000277,0.000199,0.000106,0.000102
  giTenorAh45 ftgen  8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8) , i(gkPS8)  ,1,1,1	,0.001435,0.002814,0.010404,0.027304,0.073592,0.204283,0.065680,0.038086,0.049867,0.090768,0.028199,0.011415,0.004006,0.000835,0.000609,0.000353,0.000145,0.000530,0.000623,0.001521,0.005124,0.012704,0.029322,0.067515,0.034280,0.047183,0.040088,0.019737,0.013502,0.007873,0.004048,0.002335,0.001073,0.000384,0.000337,0.000259,0.000126,0.000121,0.000110
  giTenorAh48 ftgen  9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9) , i(gkPS9)  ,1,1,1	,0.001521,0.005836,0.021928,0.066019,0.246823,0.069099,0.044735,0.099607,0.046071,0.014964,0.004298,0.000698,0.000655,0.000576,0.000744,0.002438,0.009011,0.024682,0.071912,0.041426,0.063055,0.036096,0.018215,0.011882,0.005020,0.002589,0.000943,0.000389,0.000358,0.000166,0.000147,0.000118
  giTenorAh51 ftgen 10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10), i(gkPS10) ,1,1,1	,0.001771,0.012217,0.048556,0.249892,0.086762,0.054219,0.136820,0.029974,0.007772,0.000947,0.000741,0.000186,0.000854,0.001622,0.008944,0.030132,0.096048,0.045359,0.063137,0.024077,0.014480,0.005399,0.002282,0.000570,0.000463,0.000211,0.000176,0.000111
  giTenorAh54 ftgen 11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11), i(gkPS11) ,1,1,1	,0.002757,0.025433,0.129910,0.144292,0.063753,0.139297,0.023565,0.003578,0.001018,0.000106,0.001032,0.003292,0.019074,0.081740,0.052932,0.072742,0.025316,0.010562,0.004040,0.000921,0.000554,0.000212,0.000203
  giTenorAh57 ftgen 12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12), i(gkPS12) ,1,1,1	,0.005629,0.054612,0.408549,0.076173,0.181522,0.022828,0.001670,0.000706,0.001061,0.003044,0.025417,0.135064,0.094412,0.039477,0.015746,0.004670,0.000769,0.000519,0.000243,0.000120,0.000116
  giTenorAh60 ftgen 13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13), i(gkPS13) ,1,1,1	,0.011675,0.132064,0.138210,0.199271,0.029918,0.001395,0.000113,0.001485,0.018035,0.143887,0.126163,0.036439,0.010040,0.001886,0.000716,0.000291,0.000124
  giTenorAh63 ftgen 14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14), i(gkPS14) ,1,1,1	,0.024440,0.499943,0.108469,0.059961,0.001897,0.000373,0.003245,0.060299,0.090767,0.048171,0.010803,0.001140,0.000421,0.000222,0.000136
  giTenorAh66 ftgen 15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15), i(gkPS15) ,1,1,1	,0.050867,0.288566,0.278569,0.007157,0.000212,0.006586,0.163506,0.145461,0.021119,0.001842,0.000424,0.000177,0.000102
  giTenorAh69 ftgen 16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16), i(gkPS16) ,1,1,1	,0.109214,0.152326,0.045647,0.001411,0.006088,0.270092,0.078932,0.009337,0.001038,0.000241,0.000131
  giTenorAh72 ftgen 17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17), i(gkPS17) ,1,1,1	,0.264112,0.398522,0.002789,0.002968,0.287762,0.072864,0.003770,0.000582,0.000183,0.000108
  giTenorAh75 ftgen 18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18), i(gkPS18) ,1,1,1	,1.000000,0.119936,0.000746,0.120626,0.096351,0.002278,0.000445,0.000181
  giTenorAh78 ftgen 19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19), i(gkPS19) ,1,1,1	,0.577120,0.014313,0.013172,0.290914,0.003683,0.000354,0.000139
  giTenorAh81 ftgen 20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20), i(gkPS20) ,1,1,1	,0.304668,0.002822,0.540234,0.018674,0.000482,0.000178
  giTenorAh84 ftgen 21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21), i(gkPS21) ,1,1,1	,0.797043,0.005936,0.145727,0.001164,0.000216
 elseif iVoice==7 then
  giTenorEh24 ftgen  1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1) , i(gkPS1)  ,1,1,1	,0.003711,0.004448,0.005620,0.007420,0.009664,0.012761,0.017128,0.022353,0.032172,0.044202,0.073680,0.104950,0.091828,0.054791,0.037776,0.026500,0.019680,0.014875,0.011123,0.008435,0.006205,0.004488,0.003152,0.002073,0.001292,0.000697,0.000324,0.000231,0.000316,0.000377,0.000378,0.000345,0.000277,0.000200,0.000121,0.000127,0.000231,0.000372,0.000572,0.000833,0.001169,0.001615,0.002156,0.002881,0.003837,0.005088,0.007184,0.010048,0.015987,0.019744,0.015794,0.009935,0.007135,0.005064,0.003843,0.002896,0.002183,0.001646,0.001193,0.000842,0.000546,0.000290,0.000179,0.000420,0.000705,0.001053,0.001472,0.002002,0.002658,0.003482,0.004575,0.005975,0.008042,0.010971,0.015644,0.021201,0.021315,0.015876,0.011198,0.008260,0.006172,0.004757,0.003667,0.002902,0.002421,0.002278,0.002500,0.003021,0.003820,0.004887,0.006330,0.008360,0.011171,0.014732,0.016196,0.013872,0.010516
  giTenorEh27 ftgen  2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2) , i(gkPS2)  ,1,1,1	,0.004552,0.005760,0.007814,0.010792,0.014955,0.021165,0.029612,0.045235,0.074156,0.122974,0.105870,0.057214,0.038741,0.025625,0.018589,0.013142,0.009439,0.006465,0.004364,0.002718,0.001559,0.000735,0.000308,0.000321,0.000440,0.000451,0.000405,0.000302,0.000194,0.000158,0.000311,0.000537,0.000866,0.001309,0.001925,0.002713,0.003839,0.005325,0.007903,0.011718,0.020082,0.022933,0.014817,0.009328,0.006254,0.004484,0.003195,0.002291,0.001599,0.001065,0.000642,0.000286,0.000381,0.000762,0.001246,0.001850,0.002651,0.003674,0.005077,0.006985,0.009944,0.014441,0.022249,0.026413,0.019930,0.013155,0.009153,0.006590,0.004826,0.003613,0.002894,0.002744,0.003188,0.004118,0.005508,0.007468,0.010395,0.014756,0.019114,0.017765,0.012963,0.009621,0.007541,0.006420,0.005922,0.006058,0.006871,0.008554,0.009629,0.007928,0.005529,0.003971,0.002926,0.002205,0.001657,0.001233,0.000892
  giTenorEh30 ftgen  3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3) , i(gkPS3)  ,1,1,1	,0.005607,0.007614,0.011207,0.016365,0.024712,0.037348,0.060375,0.121842,0.141500,0.072108,0.044425,0.028047,0.018770,0.012615,0.008179,0.005124,0.002879,0.001420,0.000505,0.000350,0.000521,0.000532,0.000443,0.000289,0.000131,0.000204,0.000437,0.000812,0.001364,0.002176,0.003280,0.004954,0.007398,0.011851,0.021792,0.027213,0.015773,0.009598,0.006088,0.004119,0.002767,0.001798,0.001092,0.000534,0.000408,0.000945,0.001653,0.002596,0.003890,0.005707,0.008347,0.012773,0.020361,0.030867,0.025823,0.015735,0.010227,0.007000,0.004859,0.003600,0.003233,0.003864,0.005306,0.007526,0.011040,0.016627,0.022728,0.019669,0.013379,0.009687,0.007778,0.007000,0.007281,0.008747,0.011171,0.010086,0.006655,0.004490,0.003153,0.002248,0.001593,0.001092,0.000713,0.000433,0.000247,0.000157,0.000144,0.000149,0.000141,0.000119
  giTenorEh33 ftgen  4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4) , i(gkPS4)  ,1,1,1	,0.007001,0.010427,0.016456,0.026630,0.043168,0.076989,0.169617,0.125049,0.061026,0.034673,0.021596,0.013484,0.007893,0.004258,0.001928,0.000584,0.000462,0.000640,0.000585,0.000382,0.000160,0.000329,0.000737,0.001424,0.002500,0.004083,0.006621,0.011222,0.020906,0.033101,0.018125,0.010139,0.006169,0.003823,0.002339,0.001300,0.000525,0.000152,0.000829,0.001747,0.003025,0.004885,0.007717,0.012276,0.020847,0.036056,0.029616,0.016722,0.010179,0.006565,0.004476,0.003867,0.004909,0.007299,0.011244,0.018113,0.027071,0.022114,0.014163,0.010128,0.008501,0.008626,0.010768,0.013620,0.009945,0.006082,0.003944,0.002638,0.001744,0.001093,0.000630,0.000328,0.000188,0.000175,0.000178,0.000156,0.000116
  giTenorEh36 ftgen  5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5) , i(gkPS5)  ,1,1,1	,0.008898,0.014845,0.025531,0.044722,0.088437,0.209987,0.109632,0.053027,0.029768,0.016881,0.008983,0.004150,0.001395,0.000463,0.000755,0.000691,0.000400,0.000255,0.000745,0.001668,0.003236,0.005773,0.010198,0.020143,0.039588,0.019923,0.010157,0.005810,0.003302,0.001689,0.000582,0.000359,0.001415,0.002957,0.005341,0.009195,0.016165,0.031454,0.042867,0.022527,0.012419,0.007380,0.004874,0.005036,0.007696,0.012757,0.022519,0.032658,0.021211,0.013339,0.010317,0.010331,0.013816,0.015314,0.008765,0.005134,0.003184,0.001938,0.001090,0.000535,0.000250,0.000207,0.000210,0.000173,0.000113
  giTenorEh39 ftgen  6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6) , i(gkPS6)  ,1,1,1	,0.011502,0.021549,0.042263,0.090322,0.245564,0.114253,0.051172,0.026245,0.012912,0.005428,0.001469,0.000641,0.000901,0.000604,0.000162,0.000315,0.001073,0.002614,0.005421,0.010640,0.023418,0.045836,0.018645,0.008963,0.004582,0.002130,0.000572,0.000762,0.002491,0.005301,0.010156,0.019894,0.044518,0.039884,0.018319,0.009661,0.005793,0.006382,0.011028,0.020816,0.038283,0.025968,0.015109,0.011870,0.013774,0.019307,0.011088,0.005870,0.003324,0.001790,0.000830,0.000329,0.000246,0.000244,0.000178
  giTenorEh42 ftgen  7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7) , i(gkPS7)  ,1,1,1	,0.015233,0.032741,0.074724,0.243797,0.144246,0.056112,0.025240,0.010252,0.002839,0.000700,0.001067,0.000580,0.000104,0.000883,0.002741,0.006585,0.014845,0.043733,0.031620,0.012214,0.005557,0.002198,0.000195,0.001893,0.005217,0.011479,0.025712,0.062141,0.031662,0.014093,0.007252,0.007795,0.015192,0.033589,0.039695,0.019565,0.014153,0.017708,0.020404,0.009087,0.004554,0.002215,0.000878,0.000317,0.000301,0.000241,0.000125
  giTenorEh45 ftgen  8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8) , i(gkPS8)  ,1,1,1	,0.020852,0.053258,0.153984,0.250056,0.069342,0.026968,0.008516,0.001168,0.001282,0.000765,0.000162,0.001475,0.005006,0.013261,0.041892,0.036286,0.012356,0.004686,0.001052,0.001663,0.006070,0.015487,0.041856,0.059403,0.020427,0.008986,0.009865,0.022609,0.054432,0.028468,0.017103,0.021683,0.020009,0.007941,0.003514,0.001272,0.000379,0.000357,0.000233,0.000104,0.000116
  giTenorEh48 ftgen  9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9) , i(gkPS9)  ,1,1,1	,0.029695,0.089457,0.420024,0.106052,0.033762,0.008298,0.000925,0.001385,0.000186,0.001501,0.006486,0.020422,0.079237,0.020329,0.006617,0.001174,0.002828,0.010697,0.032394,0.085861,0.024877,0.009765,0.015434,0.045175,0.042511,0.020691,0.027733,0.017578,0.006386,0.002185,0.000498,0.000422,0.000230,0.000123,0.000124
  giTenorEh51 ftgen 10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10), i(gkPS10) ,1,1,1	,0.043127,0.180772,0.228631,0.052523,0.010863,0.001282,0.001207,0.000630,0.005235,0.021308,0.091756,0.017942,0.004263,0.001528,0.010624,0.039871,0.079869,0.019355,0.012797,0.041749,0.052038,0.023798,0.038715,0.011768,0.003590,0.000660,0.000489,0.000194,0.000164
  giTenorEh54 ftgen 11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11), i(gkPS11) ,1,1,1	,0.065477,0.487624,0.112219,0.020505,0.001401,0.001155,0.001754,0.013158,0.087497,0.024420,0.004380,0.003803,0.022978,0.124331,0.028184,0.015603,0.067238,0.039134,0.035441,0.018175,0.004427,0.000636,0.000482,0.000172,0.000145
  giTenorEh57 ftgen 12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12), i(gkPS12) ,1,1,1	,0.106518,0.500069,0.053933,0.002334,0.001530,0.002950,0.026528,0.072557,0.009371,0.003329,0.030986,0.118789,0.017972,0.045243,0.056938,0.043394,0.015883,0.002543,0.000714,0.000208,0.000179,0.000107
  giTenorEh60 ftgen 13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13), i(gkPS13) ,1,1,1	,0.178931,0.212116,0.016600,0.002767,0.002985,0.040842,0.040651,0.002326,0.021412,0.171741,0.019535,0.090410,0.041394,0.035157,0.004372,0.000844,0.000247,0.000120
  giTenorEh63 ftgen 14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14), i(gkPS14) ,1,1,1	,0.361640,0.105064,0.002567,0.001261,0.042631,0.035890,0.003057,0.079786,0.038715,0.083552,0.047617,0.023541,0.001321,0.000388,0.000190,0.000108
  giTenorEh66 ftgen 15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15), i(gkPS15) ,1,1,1	,0.975277,0.041007,0.002314,0.026319,0.048835,0.007606,0.248676,0.031209,0.078257,0.036342,0.001274,0.000344,0.000170
  giTenorEh69 ftgen 16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16), i(gkPS16) ,1,1,1	,0.999999,0.004669,0.005900,0.145077,0.006659,0.237507,0.090489,0.086786,0.005082,0.000415,0.000215,0.000103
  giTenorEh72 ftgen 17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17), i(gkPS17) ,1,1,1	,0.424187,0.005531,0.081687,0.004650,0.343420,0.180822,0.070293,0.001686,0.000240,0.000139
  giTenorEh75 ftgen 18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18), i(gkPS18) ,1,1,1	,0.210142,0.002525,0.071786,0.159607,0.167145,0.047085,0.000779,0.000220
  giTenorEh78 ftgen 19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19), i(gkPS19) ,1,1,1	,0.082013,0.052640,0.015212,0.062417,0.072683,0.000688,0.000200
  giTenorEh81 ftgen 20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20), i(gkPS20) ,1,1,1	,0.009338,0.290149,0.475002,0.173594,0.000829,0.000206
  giTenorEh84 ftgen 21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21), i(gkPS21) ,1,1,1	,0.011062,0.009300,0.361645,0.003372,0.000278
 elseif iVoice==8 then
  giTenorEee24 ftgen  1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1) , i(gkPS1)  ,1,1,1	,0.007836,0.009017,0.011311,0.014842,0.018645,0.029937,0.038490,0.092836,0.120812,0.077127,0.033458,0.027877,0.016830,0.013887,0.009932,0.007423,0.005705,0.003965,0.002903,0.001947,0.001187,0.000715,0.000276,0.000168,0.000280,0.000294,0.000295,0.000264,0.000200,0.000154,0.000111,0.000202,0.000314,0.000470,0.000672,0.000922,0.001256,0.001662,0.002194,0.002908,0.003823,0.005290,0.007297,0.010980,0.014156,0.012522,0.008422,0.005960,0.004302,0.003220,0.002441,0.001839,0.001385,0.001017,0.000728,0.000498,0.000315,0.000172,0.000153,0.000269,0.000415,0.000594,0.000822,0.001105,0.001457,0.001919,0.002506,0.003348,0.004555,0.006428,0.008898,0.009355,0.007247,0.005218,0.004033,0.003245,0.002812,0.002568,0.002513,0.002633,0.002927,0.003483,0.004336,0.005623,0.006787,0.006501
  giTenorEee27 ftgen  2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2) , i(gkPS2)  ,1,1,1	,0.009549,0.011595,0.015950,0.020100,0.035178,0.051554,0.130198,0.125062,0.047558,0.034534,0.019595,0.015158,0.010326,0.007489,0.004997,0.003422,0.002102,0.001160,0.000517,0.000131,0.000196,0.000347,0.000349,0.000335,0.000261,0.000188,0.000102,0.000117,0.000241,0.000405,0.000645,0.000960,0.001392,0.001953,0.002719,0.003785,0.005367,0.007876,0.012538,0.016966,0.013606,0.008442,0.005765,0.004012,0.002889,0.002064,0.001464,0.000997,0.000649,0.000381,0.000181,0.000125,0.000280,0.000481,0.000736,0.001075,0.001512,0.002098,0.002890,0.004070,0.005876,0.009027,0.011425,0.009230,0.006235,0.004602,0.003652,0.003170,0.003002,0.003138,0.003573,0.004460,0.005915,0.007838,0.007914,0.005903,0.004220,0.003145,0.002512,0.002171,0.002123,0.002075,0.001670,0.001214,0.000931,0.000732,0.000589,0.000472,0.000374,0.000289,0.000216
  giTenorEee30 ftgen  3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3) , i(gkPS3)  ,1,1,1	,0.011630,0.015290,0.021759,0.037725,0.057788,0.163156,0.117975,0.044909,0.026599,0.018812,0.011933,0.008144,0.004975,0.003001,0.001508,0.000594,0.000130,0.000311,0.000418,0.000409,0.000314,0.000210,0.000107,0.000263,0.000494,0.000849,0.001339,0.002047,0.003027,0.004491,0.006866,0.010927,0.018703,0.017814,0.010239,0.006481,0.004290,0.002881,0.001930,0.001234,0.000740,0.000381,0.000122,0.000299,0.000577,0.000950,0.001469,0.002176,0.003199,0.004773,0.007413,0.012158,0.012680,0.008124,0.005577,0.004243,0.003652,0.003588,0.004011,0.005100,0.007116,0.009602,0.008448,0.005627,0.003915,0.002969,0.002529,0.002523,0.002225,0.001542,0.001115,0.000840,0.000647,0.000496,0.000369,0.000263,0.000176,0.000109
  giTenorEee33 ftgen  4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4) , i(gkPS4)  ,1,1,1	,0.014340,0.021213,0.032104,0.055421,0.189690,0.120221,0.050550,0.026047,0.016045,0.010125,0.005723,0.003021,0.001308,0.000246,0.000324,0.000496,0.000471,0.000309,0.000160,0.000115,0.000295,0.000626,0.001166,0.001976,0.003173,0.005084,0.008393,0.014976,0.024026,0.015041,0.008440,0.005111,0.003182,0.001956,0.001114,0.000544,0.000160,0.000136,0.000453,0.000897,0.001549,0.002490,0.003935,0.006420,0.011227,0.016103,0.010451,0.006593,0.004861,0.004256,0.004516,0.005730,0.008419,0.011629,0.008791,0.005493,0.003779,0.003042,0.003014,0.002416,0.001563,0.001093,0.000802,0.000584,0.000408,0.000266,0.000158
  giTenorEee36 ftgen  5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5) , i(gkPS5)  ,1,1,1	,0.018039,0.029693,0.059894,0.185737,0.154314,0.055778,0.027787,0.014854,0.007935,0.003897,0.001432,0.000187,0.000561,0.000590,0.000401,0.000185,0.000117,0.000134,0.000109,0.000405,0.000942,0.001848,0.003332,0.005831,0.010609,0.022023,0.025121,0.011959,0.006463,0.003691,0.002042,0.001000,0.000346,0.000540,0.001193,0.002221,0.003859,0.006735,0.012934,0.018831,0.010505,0.006536,0.005174,0.005305,0.007021,0.011338,0.013114,0.007641,0.004738,0.003619,0.003554,0.002391,0.001498,0.001024,0.000703,0.000458,0.000268,0.000136
  giTenorEee39 ftgen  6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6) , i(gkPS6)  ,1,1,1	,0.023171,0.040165,0.103046,0.249899,0.069009,0.030296,0.014964,0.006837,0.002317,0.000262,0.000693,0.000670,0.000375,0.000134,0.000157,0.000234,0.000809,0.001919,0.003902,0.007563,0.015739,0.033909,0.016874,0.008020,0.004127,0.001993,0.000762,0.000560,0.001472,0.003025,0.005784,0.011760,0.022871,0.012484,0.007312,0.006012,0.007155,0.011847,0.015854,0.008455,0.005033,0.004257,0.003348,0.001866,0.001182,0.000751,0.000433,0.000208
  giTenorEee42 ftgen  7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7) , i(gkPS7)  ,1,1,1	,0.030585,0.075466,0.326397,0.089842,0.037631,0.016293,0.006004,0.001189,0.000623,0.000819,0.000421,0.000187,0.000122,0.000220,0.000997,0.002690,0.006079,0.013783,0.037543,0.020537,0.008608,0.003873,0.001483,0.000243,0.000604,0.001913,0.004382,0.009617,0.024507,0.016361,0.008552,0.007239,0.010299,0.019396,0.011363,0.006002,0.005105,0.003117,0.001699,0.001004,0.000533,0.000219,0.000103,0.000108
  giTenorEee45 ftgen  8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8) , i(gkPS8)  ,1,1,1	,0.042426,0.110844,0.240398,0.052093,0.020251,0.006042,0.000491,0.000993,0.000619,0.000230,0.000590,0.002336,0.006356,0.016818,0.048133,0.016906,0.006376,0.002233,0.000321,0.000910,0.003109,0.007901,0.022561,0.020975,0.009763,0.009076,0.016934,0.017670,0.007601,0.006066,0.003146,0.001615,0.000823,0.000318,0.000124,0.000127
  giTenorEee48 ftgen  9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9) , i(gkPS9)  ,1,1,1	,0.059390,0.371533,0.111553,0.029708,0.007793,0.000375,0.001180,0.000370,0.000232,0.000146,0.000819,0.003706,0.011680,0.044106,0.023926,0.007382,0.001997,0.000198,0.002392,0.007734,0.025933,0.021044,0.010370,0.014081,0.026288,0.009501,0.007130,0.003002,0.001408,0.000534,0.000152,0.000151
  giTenorEee51 ftgen 10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10), i(gkPS10) ,1,1,1	,0.080361,0.499941,0.060609,0.013679,0.000525,0.001340,0.000163,0.000315,0.000469,0.003843,0.015148,0.067904,0.016057,0.003990,0.002951,0.011593,0.045827,0.014651,0.014346,0.031778,0.010090,0.006709,0.002369,0.000868,0.000190,0.000173
  giTenorEee54 ftgen 11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11), i(gkPS11) ,1,1,1	,0.150937,0.179680,0.032584,0.002376,0.001637,0.000158,0.000252,0.001981,0.012152,0.075113,0.017221,0.002972,0.001205,0.008768,0.049043,0.017107,0.020616,0.022725,0.010214,0.003400,0.001068,0.000208,0.000166
  giTenorEee57 ftgen 12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12), i(gkPS12) ,1,1,1	,0.221694,0.104185,0.012082,0.001986,0.000188,0.000185,0.004673,0.033646,0.033807,0.004465,0.001822,0.015810,0.041944,0.018160,0.035337,0.012137,0.003231,0.000635,0.000256
  giTenorEee60 ftgen 13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13), i(gkPS13) ,1,1,1	,0.743154,0.059418,0.000747,0.000739,0.000301,0.007400,0.088245,0.014776,0.000388,0.015476,0.042088,0.028181,0.019002,0.006011,0.001075,0.000301,0.000101
  giTenorEee63 ftgen 14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14), i(gkPS14) ,1,1,1	,0.999999,0.027360,0.002680,0.000630,0.007690,0.135857,0.007982,0.005905,0.091694,0.028709,0.020187,0.004740,0.000381,0.000133
  giTenorEee66 ftgen 15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15), i(gkPS15) ,1,1,1	,0.359360,0.004751,0.000315,0.003964,0.150241,0.005941,0.017540,0.034212,0.045442,0.006799,0.000416,0.000140
  giTenorEee69 ftgen 16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16), i(gkPS16) ,1,1,1	,0.208351,0.003970,0.000371,0.067291,0.008928,0.031620,0.036318,0.024271,0.001270,0.000155
  giTenorEee72 ftgen 17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17), i(gkPS17) ,1,1,1	,0.118830,0.001480,0.014801,0.029546,0.030951,0.056360,0.012020,0.000602
  giTenorEee75 ftgen 18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18), i(gkPS18) ,1,1,1	,0.054723,0.001258,0.271741,0.011812,0.057430,0.009479,0.000266
  giTenorEee78 ftgen 19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19), i(gkPS19) ,1,1,1	,0.009503,0.007927,0.011882,0.068422,0.013599,0.000280
  giTenorEee81 ftgen 20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20), i(gkPS20) ,1,1,1	,0.007941,0.134597,0.063248,0.048544,0.000311
  giTenorEee84 ftgen 21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21), i(gkPS21) ,1,1,1	,0.002957,0.059093,0.112719,0.001203,0.000131
 elseif iVoice==9 then
  giTenorOh24 ftgen  1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1) , i(gkPS1)  ,1,1,1	,0.002609,0.003212,0.004071,0.005593,0.007140,0.009447,0.013108,0.015876,0.025921,0.031520,0.069218,0.117217,0.097674,0.042519,0.031624,0.021238,0.017323,0.014353,0.012627,0.012174,0.012732,0.014614,0.019478,0.026308,0.024844,0.016400,0.010959,0.008002,0.005958,0.004623,0.003544,0.002734,0.002055,0.001508,0.001067,0.000705,0.000436,0.000235,0.000143,0.000144,0.000177,0.000192,0.000182,0.000161,0.000124,0.000104,0.000128,0.000145,0.000153,0.000156,0.000157,0.000181,0.000242,0.000356,0.000521,0.000741,0.001027,0.001380,0.001829,0.002381,0.003069,0.003965,0.005082,0.006691,0.008822,0.012074,0.015298,0.014009,0.009283,0.006092,0.006121,0.008720,0.012324,0.013604,0.011387,0.008379,0.005974,0.003793,0.001511,0.000709,0.001826,0.001937,0.001735,0.001456,0.001193,0.000965,0.000774,0.000620
  giTenorOh27 ftgen  2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2) , i(gkPS2)  ,1,1,1	,0.003203,0.004193,0.005787,0.008004,0.011069,0.016214,0.021222,0.035866,0.061952,0.136461,0.110996,0.041891,0.033083,0.021225,0.017671,0.014999,0.014528,0.015884,0.020089,0.030066,0.029796,0.018039,0.011760,0.008010,0.005921,0.004311,0.003164,0.002231,0.001534,0.000966,0.000557,0.000270,0.000164,0.000189,0.000228,0.000219,0.000192,0.000139,0.000133,0.000165,0.000180,0.000186,0.000188,0.000227,0.000336,0.000535,0.000821,0.001216,0.001726,0.002403,0.003262,0.004422,0.005950,0.008247,0.011486,0.016679,0.017937,0.011848,0.007184,0.007840,0.012354,0.016239,0.014304,0.010016,0.006636,0.003533,0.000306,0.002001,0.002325,0.002034,0.001635,0.001282,0.000989,0.000760,0.000584,0.000453,0.000355,0.000283,0.000227,0.000183,0.000149,0.000123,0.000103
  giTenorOh30 ftgen  3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3) , i(gkPS3)  ,1,1,1	,0.003960,0.005516,0.008444,0.012125,0.018936,0.027471,0.043879,0.124923,0.155727,0.053732,0.037654,0.024575,0.019046,0.017222,0.018408,0.024108,0.037434,0.030007,0.016142,0.010296,0.007092,0.004871,0.003350,0.002173,0.001311,0.000693,0.000293,0.000193,0.000251,0.000266,0.000236,0.000161,0.000147,0.000194,0.000215,0.000221,0.000238,0.000349,0.000604,0.001006,0.001590,0.002388,0.003477,0.004987,0.007107,0.010506,0.015883,0.021912,0.015844,0.008572,0.009907,0.016773,0.018799,0.013123,0.008157,0.003769,0.000813,0.002743,0.002542,0.001996,0.001496,0.001097,0.000802,0.000589,0.000439,0.000334,0.000257,0.000200,0.000157,0.000127,0.000107
  giTenorOh33 ftgen  4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4) , i(gkPS4)  ,1,1,1	,0.004986,0.007636,0.012153,0.020144,0.031323,0.054374,0.186452,0.119440,0.051970,0.029606,0.022330,0.020530,0.024026,0.039836,0.039006,0.018975,0.011161,0.007228,0.004658,0.002839,0.001584,0.000735,0.000266,0.000262,0.000323,0.000286,0.000181,0.000138,0.000212,0.000253,0.000263,0.000299,0.000510,0.000968,0.001707,0.002787,0.004353,0.006688,0.010300,0.016543,0.025924,0.017916,0.009680,0.015265,0.023074,0.016822,0.009587,0.003290,0.002408,0.003229,0.002528,0.001800,0.001245,0.000857,0.000598,0.000428,0.000313,0.000233,0.000176,0.000139,0.000117,0.000102
  giTenorOh36 ftgen  5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5) , i(gkPS5)  ,1,1,1	,0.006425,0.011190,0.018900,0.031763,0.063063,0.234533,0.085077,0.042498,0.028723,0.024364,0.029248,0.052657,0.032828,0.016019,0.009256,0.005473,0.003020,0.001411,0.000472,0.000289,0.000385,0.000324,0.000169,0.000209,0.000292,0.000313,0.000363,0.000715,0.001488,0.002773,0.004783,0.007968,0.013450,0.024276,0.028174,0.012256,0.017548,0.027382,0.016871,0.007639,0.001429,0.003903,0.002935,0.001946,0.001251,0.000808,0.000539,0.000371,0.000260,0.000189,0.000148,0.000125,0.000105
  giTenorOh39 ftgen  6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6) , i(gkPS6)  ,1,1,1	,0.008376,0.015990,0.032397,0.071647,0.272662,0.083705,0.042399,0.029965,0.031725,0.060042,0.036024,0.015995,0.008610,0.004457,0.001931,0.000539,0.000377,0.000438,0.000278,0.000188,0.000329,0.000372,0.000455,0.001070,0.002432,0.004805,0.008844,0.016499,0.033376,0.023715,0.015683,0.032489,0.020044,0.007073,0.004006,0.004073,0.002568,0.001523,0.000908,0.000566,0.000367,0.000246,0.000180,0.000147,0.000118
  giTenorOh42 ftgen  7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7) , i(gkPS7)  ,1,1,1	,0.011034,0.024255,0.054958,0.249960,0.107468,0.049168,0.034461,0.048258,0.060049,0.020609,0.009752,0.004351,0.001387,0.000382,0.000531,0.000321,0.000134,0.000183,0.000390,0.000442,0.000696,0.002019,0.004800,0.010033,0.021149,0.044106,0.017250,0.033814,0.026431,0.007582,0.005537,0.004027,0.002216,0.001191,0.000676,0.000405,0.000256,0.000192,0.000151,0.000111
  giTenorOh45 ftgen  8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8) , i(gkPS8)  ,1,1,1	,0.015273,0.040290,0.108755,0.238831,0.059213,0.041067,0.079700,0.037954,0.014459,0.005681,0.001470,0.000525,0.000572,0.000143,0.000149,0.000276,0.000507,0.000599,0.001942,0.005592,0.013421,0.033213,0.035928,0.030674,0.033762,0.006591,0.006489,0.003618,0.001724,0.000862,0.000468,0.000280,0.000206,0.000147,0.000101
  giTenorOh48 ftgen  9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9) , i(gkPS9)  ,1,1,1	,0.022381,0.063531,0.469122,0.084990,0.048733,0.105348,0.032042,0.010949,0.002821,0.000574,0.000647,0.000166,0.000185,0.000584,0.000720,0.002976,0.009583,0.026955,0.056424,0.035183,0.033796,0.002879,0.005885,0.002510,0.001081,0.000521,0.000299,0.000213,0.000130
  giTenorOh51 ftgen 10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10), i(gkPS10) ,1,1,1	,0.031994,0.143365,0.167462,0.059961,0.120183,0.032013,0.008919,0.001080,0.000876,0.000112,0.000190,0.000377,0.000745,0.002145,0.009630,0.033066,0.047478,0.065117,0.014161,0.008162,0.003051,0.001136,0.000494,0.000295,0.000181,0.000121
  giTenorOh54 ftgen 11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11), i(gkPS11) ,1,1,1	,0.048511,0.499973,0.098337,0.096526,0.041209,0.008700,0.000772,0.000645,0.000267,0.000365,0.000886,0.004049,0.020077,0.088236,0.067669,0.015154,0.008053,0.002378,0.000809,0.000383,0.000218,0.000140
  giTenorOh57 ftgen 12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12), i(gkPS12) ,1,1,1	,0.080583,0.477600,0.082135,0.075901,0.011361,0.001051,0.000287,0.001014,0.003886,0.026853,0.071839,0.067519,0.012982,0.003449,0.000937,0.000412,0.000202,0.000131
  giTenorOh60 ftgen 13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13), i(gkPS13) ,1,1,1	,0.127073,0.169977,0.210725,0.021898,0.001155,0.000367,0.001455,0.019176,0.112848,0.067589,0.011765,0.002161,0.000595,0.000260,0.000153
  giTenorOh63 ftgen 14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14), i(gkPS14) ,1,1,1	,0.286787,0.119943,0.064037,0.002159,0.000224,0.000754,0.004292,0.066166,0.130304,0.016330,0.002272,0.000591,0.000243,0.000124
  giTenorOh66 ftgen 15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15), i(gkPS15) ,1,1,1	,1.000000,0.193060,0.017402,0.001290,0.000730,0.008099,0.176475,0.030291,0.004757,0.000766,0.000282,0.000138
  giTenorOh69 ftgen 16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16), i(gkPS16) ,1,1,1	,0.955092,0.151776,0.002102,0.000192,0.007772,0.143628,0.025957,0.001874,0.000402,0.000171
  giTenorOh72 ftgen 17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17), i(gkPS17) ,1,1,1	,0.339931,0.043789,0.000154,0.002909,0.225646,0.023525,0.001190,0.000305,0.000120
  giTenorOh75 ftgen 18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18), i(gkPS18) ,1,1,1	,0.239903,0.004318,0.001511,0.132362,0.032662,0.001182,0.000249
  giTenorOh78 ftgen 19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19), i(gkPS19) ,1,1,1	,0.386114,0.002580,0.016199,0.060581,0.001531,0.000277
  giTenorOh81 ftgen 20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20), i(gkPS20) ,1,1,1	,0.303561,0.000384,0.287242,0.003746,0.000342
  giTenorOh84 ftgen 21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21), i(gkPS21) ,1,1,1	,0.087577,0.005818,0.047050,0.000610,0.000103
 elseif iVoice==10 then
  giTenorOoh24 ftgen  1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1) , i(gkPS1)  ,1,1,1	,0.004160,0.004756,0.005796,0.007110,0.009404,0.012319,0.016588,0.025253,0.036732,0.084172,0.097499,0.055655,0.026840,0.021900,0.014064,0.011724,0.009450,0.006251,0.002854,0.002079,0.001522,0.001320,0.001012,0.000844,0.000726,0.000657,0.000578,0.000532,0.000449,0.000378,0.000306,0.000221,0.000161,0.000112,0.000145,0.000197,0.000271,0.000371,0.000502,0.000666,0.000873,0.001133,0.001454,0.001875,0.002392,0.003125,0.004070,0.005451,0.006740,0.005949,0.003815,0.003032,0.004216,0.006465,0.009166,0.010218,0.008738,0.006687,0.005210,0.004127,0.003395,0.002882,0.002550,0.002381,0.002374,0.002539,0.002842
  giTenorOoh27 ftgen  2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2) , i(gkPS2)  ,1,1,1	,0.005018,0.006177,0.007634,0.010351,0.014548,0.021399,0.030750,0.071843,0.119517,0.072786,0.031652,0.022635,0.015612,0.012023,0.008250,0.003348,0.002272,0.001786,0.001280,0.001064,0.000866,0.000770,0.000661,0.000586,0.000473,0.000372,0.000254,0.000169,0.000102,0.000123,0.000163,0.000233,0.000341,0.000493,0.000700,0.000970,0.001326,0.001786,0.002410,0.003241,0.004476,0.006249,0.008081,0.006509,0.003821,0.004319,0.007145,0.010967,0.012075,0.009457,0.006928,0.005206,0.004101,0.003382,0.002964,0.002823,0.002955,0.003370,0.003360,0.002535,0.001765,0.001296,0.000988,0.000767,0.000592,0.000451,0.000332,0.000236,0.000160,0.000105
  giTenorOoh30 ftgen  3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3) , i(gkPS3)  ,1,1,1	,0.006069,0.007985,0.010689,0.016347,0.024478,0.037411,0.112759,0.124998,0.041485,0.028849,0.018264,0.013449,0.006554,0.003139,0.002141,0.001509,0.001181,0.000981,0.000833,0.000728,0.000565,0.000421,0.000265,0.000141,0.000101,0.000117,0.000142,0.000198,0.000307,0.000479,0.000736,0.001090,0.001584,0.002260,0.003208,0.004668,0.006836,0.009554,0.007100,0.004250,0.006687,0.011831,0.014395,0.010804,0.007515,0.005449,0.004235,0.003554,0.003339,0.003592,0.004112,0.003422,0.002223,0.001532,0.001113,0.000822,0.000601,0.000424,0.000284,0.000179,0.000109
  giTenorOoh33 ftgen  4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4) , i(gkPS4)  ,1,1,1	,0.007484,0.010358,0.016064,0.024189,0.043878,0.147795,0.113259,0.043500,0.023110,0.016473,0.007061,0.003259,0.002323,0.001591,0.001196,0.000986,0.000820,0.000603,0.000378,0.000199,0.000110,0.000113,0.000104,0.000123,0.000148,0.000202,0.000327,0.000558,0.000928,0.001473,0.002265,0.003459,0.005340,0.008451,0.011341,0.006178,0.006471,0.013053,0.017137,0.011865,0.007810,0.005560,0.004372,0.003989,0.004406,0.004836,0.003238,0.002015,0.001363,0.000950,0.000651,0.000420,0.000250,0.000139
  giTenorOoh36 ftgen  5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5) , i(gkPS5)  ,1,1,1	,0.009514,0.014225,0.024646,0.050523,0.168409,0.111356,0.043820,0.023460,0.012509,0.004160,0.002642,0.001689,0.001315,0.001065,0.000757,0.000443,0.000192,0.000123,0.000137,0.000101,0.000120,0.000148,0.000186,0.000291,0.000545,0.001008,0.001755,0.002924,0.004809,0.008185,0.013559,0.007678,0.008486,0.018454,0.017597,0.010496,0.006842,0.005140,0.004787,0.005732,0.004640,0.002578,0.001610,0.001047,0.000655,0.000372,0.000189,0.000109,0.000102
  giTenorOoh39 ftgen  6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6) , i(gkPS6)  ,1,1,1	,0.012343,0.020687,0.042780,0.143593,0.145481,0.045253,0.024030,0.006681,0.003567,0.002127,0.001539,0.001172,0.000743,0.000337,0.000147,0.000158,0.000139,0.000180,0.000245,0.000466,0.000987,0.001939,0.003573,0.006484,0.012507,0.013031,0.008641,0.021946,0.018929,0.010423,0.006772,0.005654,0.006751,0.005079,0.002597,0.001537,0.000903,0.000473,0.000212,0.000124,0.000121
  giTenorOoh42 ftgen  7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7) , i(gkPS7)  ,1,1,1	,0.015973,0.032700,0.074843,0.250024,0.057702,0.026906,0.006281,0.003020,0.001964,0.001456,0.000842,0.000281,0.000120,0.000190,0.000125,0.000117,0.000172,0.000230,0.000397,0.000965,0.002195,0.004549,0.009401,0.019240,0.008562,0.023865,0.021772,0.010988,0.007172,0.007255,0.006908,0.003095,0.001662,0.000857,0.000363,0.000158,0.000146,0.000111
  giTenorOoh45 ftgen  8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8) , i(gkPS8)  ,1,1,1	,0.020715,0.048381,0.295623,0.086997,0.032947,0.006518,0.003184,0.001972,0.001207,0.000399,0.000165,0.000225,0.000166,0.000247,0.000405,0.001120,0.002956,0.006943,0.016973,0.012394,0.026234,0.023823,0.011169,0.008018,0.009723,0.004053,0.001912,0.000846,0.000280,0.000172,0.000144
  giTenorOoh48 ftgen  9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9) , i(gkPS9)  ,1,1,1	,0.028452,0.101054,0.222679,0.046921,0.008320,0.003378,0.002130,0.000886,0.000146,0.000269,0.000181,0.000290,0.000582,0.002022,0.005860,0.016406,0.015371,0.037003,0.021032,0.010304,0.011498,0.005167,0.002100,0.000748,0.000221,0.000191
  giTenorOoh51 ftgen 10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10), i(gkPS10) ,1,1,1	,0.041389,0.287313,0.090518,0.013371,0.004256,0.002343,0.000674,0.000295,0.000189,0.000130,0.000278,0.000491,0.001979,0.007162,0.025068,0.017327,0.037924,0.013572,0.013536,0.005205,0.001811,0.000424,0.000243,0.000123
  giTenorOoh54 ftgen 11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11), i(gkPS11) ,1,1,1	,0.065400,0.500015,0.053810,0.006040,0.002913,0.000562,0.000387,0.000141,0.000350,0.000798,0.004390,0.018813,0.017129,0.043544,0.014348,0.013820,0.003325,0.000724,0.000290,0.000124
  giTenorOoh57 ftgen 12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12), i(gkPS12) ,1,1,1	,0.096766,0.173992,0.013034,0.003944,0.000798,0.000451,0.000332,0.000810,0.005915,0.033962,0.052501,0.022340,0.019449,0.003824,0.000560,0.000287,0.000114
  giTenorOoh60 ftgen 13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13), i(gkPS13) ,1,1,1	,0.202127,0.093846,0.006755,0.001771,0.000549,0.000186,0.000594,0.004041,0.032826,0.074042,0.020610,0.010337,0.001493,0.000384,0.000136
  giTenorOoh63 ftgen 14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14), i(gkPS14) ,1,1,1	,0.574725,0.026750,0.004688,0.000591,0.000260,0.000983,0.014330,0.034680,0.027154,0.010414,0.000848,0.000246,0.000117
  giTenorOoh66 ftgen 15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15), i(gkPS15) ,1,1,1	,0.999999,0.012080,0.001126,0.000101,0.000282,0.001597,0.037631,0.087072,0.027634,0.001448,0.000249
  giTenorOoh69 ftgen 16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16), i(gkPS16) ,1,1,1	,0.347954,0.007887,0.000902,0.000132,0.001620,0.067927,0.044669,0.007647,0.000575,0.000129
  giTenorOoh72 ftgen 17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17), i(gkPS17) ,1,1,1	,0.187680,0.003542,0.000182,0.001188,0.065653,0.041213,0.002984,0.000272
  giTenorOoh75 ftgen 18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18), i(gkPS18) ,1,1,1	,0.053502,0.001181,0.000524,0.028666,0.054314,0.001696,0.000234
  giTenorOoh78 ftgen 19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19), i(gkPS19) ,1,1,1	,0.024159,0.000201,0.003194,0.174139,0.002895,0.000179
  giTenorOoh81 ftgen 20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20), i(gkPS20) ,1,1,1	,0.015774,0.000264,0.135872,0.015294,0.000258
  giTenorOoh84 ftgen 21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21), i(gkPS21) ,1,1,1	,0.007082,0.002375,0.082425,0.000545
 /* COUNTERTENOR */
 elseif iVoice==11 then
  giCountertenorAh24 ftgen  1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1) , i(gkPS1)  ,1,1,1	,0.000622,0.000579,0.000505,0.000416,0.000404,0.000563,0.000935,0.001450,0.002158,0.003063,0.004178,0.005657,0.007437,0.009784,0.012967,0.016948,0.023788,0.032799,0.051846,0.069434,0.060781,0.039066,0.027913,0.020569,0.016254,0.013456,0.011669,0.010899,0.010953,0.011875,0.014299,0.018107,0.025757,0.032911,0.029411,0.019830,0.013946,0.010125,0.007600,0.005820,0.004423,0.003377,0.002523,0.001848,0.001319,0.000899,0.000595,0.000380,0.000265,0.000228,0.000227,0.000228,0.000214,0.000192,0.000160,0.000127,0.000135,0.000199,0.000281,0.000383,0.000508,0.000661,0.000851,0.001091,0.001400,0.001829,0.002402,0.003168,0.003603,0.003179,0.002384,0.001859,0.001660,0.001771,0.002195,0.002778,0.002998,0.002611,0.002049,0.001621,0.001304,0.001084,0.000925,0.000816,0.000745
  giCountertenorAh27 ftgen  2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2) , i(gkPS2)  ,1,1,1	,0.000735,0.000662,0.000536,0.000470,0.000654,0.001187,0.001971,0.003095,0.004543,0.006527,0.009051,0.012579,0.017418,0.025067,0.036897,0.062520,0.083382,0.061395,0.037338,0.026171,0.019458,0.015588,0.013449,0.012898,0.013720,0.016734,0.022266,0.033995,0.038925,0.027154,0.017317,0.011854,0.008501,0.006153,0.004459,0.003184,0.002202,0.001467,0.000918,0.000551,0.000338,0.000273,0.000271,0.000267,0.000243,0.000203,0.000155,0.000111,0.000121,0.000200,0.000308,0.000447,0.000626,0.000852,0.001149,0.001540,0.002109,0.002917,0.003991,0.004205,0.003195,0.002308,0.001985,0.002187,0.002895,0.003567,0.003282,0.002484,0.001880,0.001465,0.001192,0.001010,0.000899,0.000836,0.000741,0.000567,0.000414,0.000324,0.000266,0.000223,0.000186,0.000152,0.000121
  giCountertenorAh30 ftgen  3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3) , i(gkPS3)  ,1,1,1	,0.000859,0.000737,0.000570,0.000685,0.001368,0.002498,0.004192,0.006507,0.009781,0.014407,0.021215,0.033314,0.054502,0.095648,0.079270,0.043918,0.028744,0.021058,0.016749,0.015325,0.016241,0.020739,0.030451,0.046307,0.036821,0.021184,0.013513,0.009191,0.006237,0.004238,0.002750,0.001701,0.000967,0.000518,0.000340,0.000320,0.000317,0.000281,0.000219,0.000154,0.000105,0.000201,0.000341,0.000534,0.000794,0.001139,0.001619,0.002329,0.003422,0.004882,0.004650,0.003126,0.002393,0.002545,0.003536,0.004253,0.003418,0.002429,0.001787,0.001395,0.001156,0.001026,0.000931,0.000712,0.000489,0.000368,0.000293,0.000237,0.000189,0.000145,0.000106
  giCountertenorAh33 ftgen  4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4) , i(gkPS4)  ,1,1,1	,0.001001,0.000790,0.000685,0.001374,0.002883,0.005307,0.008904,0.014153,0.022631,0.037604,0.068470,0.117881,0.069973,0.039907,0.026187,0.019843,0.018237,0.020805,0.030099,0.052526,0.044464,0.023490,0.013922,0.008867,0.005619,0.003393,0.001911,0.000964,0.000476,0.000379,0.000381,0.000331,0.000241,0.000152,0.000120,0.000258,0.000474,0.000785,0.001223,0.001861,0.002867,0.004562,0.006080,0.004315,0.002924,0.003059,0.004530,0.004842,0.003317,0.002269,0.001676,0.001348,0.001192,0.000989,0.000643,0.000449,0.000343,0.000266,0.000200,0.000142
  giCountertenorAh36 ftgen  5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5) , i(gkPS5)  ,1,1,1	,0.001159,0.000833,0.001127,0.002901,0.006128,0.011319,0.019577,0.033913,0.065634,0.138955,0.078186,0.041169,0.026935,0.021819,0.023774,0.036256,0.065905,0.039715,0.020280,0.011658,0.006765,0.003703,0.001801,0.000761,0.000458,0.000456,0.000385,0.000254,0.000139,0.000103,0.000271,0.000566,0.001022,0.001711,0.002815,0.004833,0.007250,0.004799,0.003342,0.004420,0.006040,0.004129,0.002629,0.001866,0.001503,0.001298,0.000824,0.000531,0.000388,0.000284,0.000196,0.000121
  giCountertenorAh39 ftgen  6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6) , i(gkPS6)  ,1,1,1	,0.001323,0.000939,0.002370,0.006179,0.013031,0.025116,0.050054,0.124839,0.122598,0.052264,0.031128,0.025756,0.033416,0.067885,0.054229,0.023674,0.012290,0.006360,0.002931,0.001101,0.000546,0.000534,0.000406,0.000222,0.000118,0.000103,0.000242,0.000615,0.001251,0.002297,0.004218,0.007984,0.006394,0.003973,0.005794,0.006570,0.003764,0.002387,0.001801,0.001484,0.000829,0.000532,0.000372,0.000243,0.000138
  giCountertenorAh42 ftgen  7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7) , i(gkPS7)  ,1,1,1	,0.001473,0.001369,0.004998,0.013019,0.028826,0.066670,0.191435,0.087882,0.042145,0.030678,0.041530,0.092746,0.042423,0.018412,0.008493,0.003408,0.001039,0.000642,0.000564,0.000309,0.000143,0.000118,0.000210,0.000683,0.001594,0.003257,0.006894,0.009365,0.004822,0.007137,0.006892,0.003605,0.002334,0.001880,0.000988,0.000593,0.000383,0.000215
  giCountertenorAh45 ftgen  8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8) , i(gkPS8)  ,1,1,1	,0.001580,0.002749,0.010614,0.028309,0.075224,0.235778,0.079815,0.039694,0.041631,0.105124,0.046998,0.017743,0.006790,0.001929,0.000758,0.000664,0.000304,0.000154,0.000113,0.000242,0.000953,0.002455,0.005759,0.012206,0.005872,0.009102,0.006662,0.003369,0.002397,0.001292,0.000690,0.000403,0.000185
  giCountertenorAh48 ftgen  9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9) , i(gkPS9)  ,1,1,1	,0.001665,0.005802,0.022639,0.067838,0.277959,0.082343,0.043643,0.072542,0.079439,0.023326,0.007411,0.001524,0.000914,0.000509,0.000186,0.000132,0.000538,0.002041,0.005636,0.014527,0.006699,0.012109,0.005270,0.003013,0.001652,0.000778,0.000392,0.000133
  giCountertenorAh51 ftgen 10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10), i(gkPS10) ,1,1,1	,0.001879,0.012367,0.050272,0.249889,0.104596,0.051557,0.135917,0.047385,0.012730,0.002203,0.001070,0.000444,0.000205,0.000486,0.002508,0.008455,0.012808,0.011617,0.007544,0.003612,0.001661,0.000745,0.000277
  giCountertenorAh54 ftgen 11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11), i(gkPS11) ,1,1,1	,0.002739,0.026042,0.133355,0.175744,0.061363,0.185512,0.036813,0.006813,0.001283,0.000619,0.000238,0.000104,0.001374,0.006525,0.018731,0.014280,0.007212,0.003761,0.001187,0.000430,0.000106
  giCountertenorAh57 ftgen 12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12), i(gkPS12) ,1,1,1	,0.005498,0.056620,0.471547,0.079386,0.210272,0.035484,0.003858,0.001328,0.000308,0.000117,0.001906,0.011522,0.011745,0.013323,0.004796,0.001380,0.000371,0.000133
  giCountertenorAh60 ftgen 13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13), i(gkPS13) ,1,1,1	,0.011607,0.135706,0.164696,0.145131,0.046646,0.003046,0.001018,0.000264,0.001087,0.011288,0.013399,0.010542,0.003304,0.000785,0.000154
  giCountertenorAh63 ftgen 14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14), i(gkPS14) ,1,1,1	,0.024741,0.499940,0.103142,0.094789,0.004409,0.000888,0.000177,0.005018,0.025621,0.015091,0.003323,0.000554,0.000160
  giCountertenorAh66 ftgen 15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15), i(gkPS15) ,1,1,1	,0.052086,0.351464,0.371032,0.013625,0.001238,0.000209,0.013050,0.028566,0.007522,0.000861,0.000171
  giCountertenorAh69 ftgen 16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16), i(gkPS16) ,1,1,1	,0.113230,0.158750,0.070954,0.002655,0.000236,0.023043,0.026638,0.002759,0.000266
  giCountertenorAh72 ftgen 17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17), i(gkPS17) ,1,1,1	,0.271393,0.290247,0.006089,0.000528,0.022576,0.021078,0.001570,0.000118
  giCountertenorAh75 ftgen 18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18), i(gkPS18) ,1,1,1	,1.000001,0.189594,0.001776,0.010036,0.030183,0.001107,0.000150
  giCountertenorAh78 ftgen 19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19), i(gkPS19) ,1,1,1	,0.702916,0.027248,0.000418,0.057129,0.001722,0.000133
  giCountertenorAh81 ftgen 20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20), i(gkPS20) ,1,1,1	,0.317514,0.005311,0.046093,0.005518,0.000190
  giCountertenorAh84 ftgen 21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21), i(gkPS21) ,1,1,1	,0.580494,0.001056,0.042157,0.000235
 elseif iVoice==12 then
  giCountertenorEh24 ftgen  1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1) , i(gkPS1)  ,1,1,1	,0.001407,0.001909,0.002654,0.003601,0.004888,0.006467,0.008499,0.011368,0.014805,0.020766,0.028754,0.045419,0.070436,0.068915,0.043266,0.028132,0.020165,0.014552,0.011119,0.008287,0.006270,0.004661,0.003363,0.002384,0.001583,0.000990,0.000554,0.000266,0.000187,0.000237,0.000286,0.000284,0.000259,0.000207,0.000143,0.000115,0.000212,0.000361,0.000554,0.000797,0.001116,0.001495,0.001997,0.002660,0.003508,0.004943,0.006866,0.010908,0.013782,0.011286,0.007103,0.005073,0.003604,0.002726,0.002060,0.001553,0.001173,0.000855,0.000607,0.000405,0.000237,0.000102,0.000142,0.000257,0.000388,0.000538,0.000722,0.000944,0.001216,0.001571,0.002018,0.002669,0.003593,0.005060,0.006932,0.007192,0.005615,0.004200,0.003465,0.003069,0.003039,0.003286,0.003878,0.004703,0.004898,0.004167,0.003337,0.002887,0.002710,0.002818,0.003204,0.003908,0.004910
  giCountertenorEh27 ftgen  2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2) , i(gkPS2)  ,1,1,1	,0.001760,0.002580,0.003766,0.005400,0.007590,0.010513,0.014826,0.020586,0.031392,0.050841,0.085318,0.074894,0.040539,0.027387,0.018076,0.013133,0.009279,0.006665,0.004564,0.003073,0.001908,0.001086,0.000511,0.000236,0.000261,0.000339,0.000336,0.000293,0.000209,0.000123,0.000106,0.000226,0.000430,0.000709,0.001084,0.001575,0.002218,0.003126,0.004372,0.006522,0.010363,0.016022,0.014016,0.008187,0.005534,0.003746,0.002718,0.001937,0.001388,0.000948,0.000622,0.000358,0.000154,0.000191,0.000360,0.000557,0.000798,0.001104,0.001493,0.002025,0.002744,0.003904,0.005749,0.008373,0.008259,0.005844,0.004423,0.003722,0.003634,0.004027,0.005025,0.005913,0.005254,0.004033,0.003408,0.003246,0.003572,0.004377,0.005760,0.006334,0.005015,0.003516,0.002533,0.001874,0.001408,0.001059,0.000788,0.000573,0.000405,0.000272,0.000175,0.000109
  giCountertenorEh30 ftgen  3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3) , i(gkPS3)  ,1,1,1	,0.002230,0.003552,0.005479,0.008344,0.012266,0.018381,0.028255,0.045291,0.091892,0.093320,0.046217,0.028853,0.018680,0.012419,0.008371,0.005365,0.003320,0.001818,0.000856,0.000315,0.000307,0.000407,0.000387,0.000299,0.000173,0.000214,0.000472,0.000862,0.001419,0.002166,0.003268,0.004826,0.007739,0.013719,0.019452,0.012299,0.007218,0.004524,0.003078,0.002064,0.001362,0.000843,0.000456,0.000166,0.000314,0.000574,0.000894,0.001319,0.001890,0.002704,0.004006,0.006196,0.009856,0.009370,0.006160,0.004704,0.004267,0.004706,0.006105,0.006965,0.005453,0.004205,0.003832,0.004261,0.005524,0.007380,0.006685,0.004432,0.002994,0.002099,0.001494,0.001061,0.000733,0.000488,0.000304,0.000177,0.000104
  giCountertenorEh33 ftgen  4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4) , i(gkPS4)  ,1,1,1	,0.002887,0.005002,0.008336,0.013250,0.021432,0.036173,0.067184,0.125012,0.067454,0.036388,0.021564,0.013251,0.008195,0.004726,0.002405,0.000993,0.000329,0.000429,0.000479,0.000385,0.000209,0.000200,0.000531,0.001087,0.001932,0.003147,0.005052,0.008695,0.016946,0.022167,0.011132,0.006361,0.003959,0.002459,0.001486,0.000816,0.000333,0.000360,0.000731,0.001217,0.001892,0.002907,0.004565,0.007708,0.012368,0.009215,0.006087,0.005095,0.005647,0.007722,0.007793,0.005459,0.004595,0.005065,0.006975,0.009015,0.006440,0.003971,0.002578,0.001720,0.001140,0.000724,0.000427,0.000229,0.000121,0.000102
  giCountertenorEh36 ftgen  5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5) , i(gkPS5)  ,1,1,1	,0.003820,0.007205,0.012939,0.022744,0.041548,0.090875,0.137894,0.056293,0.029121,0.016585,0.009329,0.004772,0.001982,0.000532,0.000474,0.000568,0.000415,0.000167,0.000107,0.000231,0.000723,0.001597,0.002997,0.005333,0.009912,0.021876,0.022637,0.010177,0.005470,0.003116,0.001715,0.000813,0.000206,0.000285,0.000781,0.001450,0.002444,0.004058,0.007225,0.013945,0.011299,0.006974,0.006118,0.007810,0.009866,0.006724,0.005463,0.006461,0.009905,0.009117,0.005103,0.003040,0.001880,0.001137,0.000638,0.000315,0.000147,0.000119,0.000122,0.000104
  giCountertenorEh39 ftgen  6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6) , i(gkPS6)  ,1,1,1	,0.005152,0.010784,0.020993,0.041111,0.101534,0.149567,0.054696,0.026229,0.013311,0.006139,0.002170,0.000472,0.000676,0.000586,0.000246,0.000127,0.000452,0.001417,0.003147,0.006248,0.013035,0.032027,0.016366,0.007490,0.003873,0.001896,0.000717,0.000720,0.001596,0.002988,0.005491,0.011506,0.016531,0.008854,0.007274,0.010059,0.010519,0.006824,0.007155,0.011539,0.010048,0.005075,0.002823,0.001580,0.000811,0.000351,0.000153,0.000145,0.000134
  giCountertenorEh42 ftgen  7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7) , i(gkPS7)  ,1,1,1	,0.007108,0.016693,0.036775,0.090623,0.186687,0.057721,0.024848,0.010735,0.003637,0.000631,0.000815,0.000597,0.000102,0.000150,0.000433,0.001732,0.004346,0.009685,0.027540,0.024661,0.009079,0.004147,0.001697,0.000337,0.000629,0.001796,0.003803,0.008068,0.019855,0.012401,0.008599,0.012317,0.010998,0.007737,0.011164,0.013499,0.006048,0.003019,0.001484,0.000615,0.000211,0.000173,0.000156
  giCountertenorEh45 ftgen  8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8) , i(gkPS8)  ,1,1,1	,0.010002,0.026500,0.072350,0.250024,0.072769,0.026502,0.009452,0.001985,0.000858,0.000771,0.000180,0.001063,0.003870,0.010120,0.033965,0.022292,0.007930,0.002977,0.000666,0.000722,0.002442,0.005835,0.015483,0.018490,0.010231,0.015520,0.010969,0.010186,0.018128,0.007983,0.003461,0.001456,0.000460,0.000199,0.000194,0.000107
  giCountertenorEh48 ftgen  9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9) , i(gkPS9)  ,1,1,1	,0.014412,0.045494,0.181791,0.112588,0.033171,0.009544,0.001064,0.001135,0.000329,0.000220,0.001449,0.006000,0.019846,0.045292,0.010951,0.003439,0.000417,0.001563,0.004898,0.014483,0.022627,0.012262,0.019775,0.010955,0.019872,0.010229,0.003771,0.001279,0.000296,0.000245,0.000142
  giCountertenorEh51 ftgen 10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10), i(gkPS10) ,1,1,1	,0.021582,0.082278,0.299289,0.052488,0.012284,0.000944,0.001172,0.000108,0.000906,0.006303,0.026106,0.032757,0.007753,0.001434,0.001444,0.005988,0.023064,0.017739,0.020167,0.013678,0.023142,0.010173,0.003168,0.000704,0.000290,0.000184
  giCountertenorEh54 ftgen 11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11), i(gkPS11) ,1,1,1	,0.033385,0.181253,0.115431,0.021468,0.001260,0.001196,0.000294,0.003460,0.019374,0.049307,0.008286,0.000663,0.003599,0.016148,0.024802,0.024651,0.015477,0.027005,0.006039,0.001230,0.000344,0.000180,0.000106
  giCountertenorEh57 ftgen 12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12), i(gkPS12) ,1,1,1	,0.053000,0.500048,0.052999,0.003969,0.001543,0.000360,0.007742,0.067956,0.015859,0.001332,0.004887,0.030983,0.020466,0.021939,0.036267,0.006921,0.000920,0.000388,0.000110
  giCountertenorEh60 ftgen 13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13), i(gkPS13) ,1,1,1	,0.090997,0.225190,0.019088,0.002273,0.000427,0.012001,0.090580,0.006866,0.003130,0.028980,0.024535,0.021910,0.020460,0.002558,0.000490,0.000131
  giCountertenorEh63 ftgen 14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14), i(gkPS14) ,1,1,1	,0.164597,0.104995,0.001890,0.000217,0.012610,0.065521,0.002869,0.011981,0.035487,0.027366,0.020351,0.001408,0.000368,0.000158
  giCountertenorEh66 ftgen 15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15), i(gkPS15) ,1,1,1	,0.362512,0.042934,0.002393,0.006921,0.098595,0.001326,0.032300,0.049308,0.054000,0.002460,0.000362,0.000116
  giCountertenorEh69 ftgen 16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16), i(gkPS16) ,1,1,1	,0.999999,0.007938,0.000720,0.135918,0.002663,0.061969,0.043865,0.013840,0.000774,0.000180
  giCountertenorEh72 ftgen 17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17), i(gkPS17) ,1,1,1	,0.450330,0.004546,0.024003,0.013728,0.057960,0.043814,0.005114,0.000263,0.000126
  giCountertenorEh75 ftgen 18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18), i(gkPS18) ,1,1,1	,0.210003,0.000432,0.131045,0.023965,0.054738,0.002817,0.000316
  giCountertenorEh78 ftgen 19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19), i(gkPS19) ,1,1,1	,0.085867,0.013843,0.002652,0.098614,0.004920,0.000232
  giCountertenorEh81 ftgen 20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20), i(gkPS20) ,1,1,1	,0.015875,0.271870,0.123957,0.027679,0.000360
  giCountertenorEh84 ftgen 21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21), i(gkPS21) ,1,1,1	,0.009092,0.027457,0.087628,0.000525
 elseif iVoice==13 then
  giCountertenorEee24 ftgen  1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1) , i(gkPS1)  ,1,1,1	,0.008519,0.010447,0.014054,0.016869,0.027416,0.033625,0.072566,0.124934,0.105409,0.045534,0.032582,0.021052,0.015918,0.011883,0.008760,0.006708,0.004852,0.003497,0.002443,0.001561,0.000949,0.000462,0.000135,0.000131,0.000257,0.000327,0.000331,0.000315,0.000264,0.000201,0.000142,0.000104,0.000153,0.000219,0.000301,0.000411,0.000551,0.000728,0.000969,0.001276,0.001735,0.002395,0.003484,0.004988,0.005127,0.003704,0.002506,0.001822,0.001332,0.001016,0.000765,0.000579,0.000431,0.000311,0.000217,0.000141,0.000129,0.000204,0.000297,0.000417,0.000566,0.000751,0.000993,0.001302,0.001740,0.002374,0.003337,0.004655,0.004963,0.003852,0.002706,0.002017,0.001532,0.001224,0.000999,0.000848,0.000756,0.000711,0.000725,0.000791
  giCountertenorEee27 ftgen  2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2) , i(gkPS2)  ,1,1,1	,0.010469,0.013785,0.018825,0.028603,0.039687,0.096960,0.152046,0.086764,0.039736,0.026663,0.018685,0.012926,0.009150,0.006583,0.004367,0.002875,0.001660,0.000901,0.000280,0.000124,0.000303,0.000390,0.000394,0.000348,0.000255,0.000176,0.000123,0.000196,0.000297,0.000428,0.000613,0.000855,0.001201,0.001667,0.002454,0.003667,0.005797,0.006023,0.003933,0.002587,0.001760,0.001267,0.000906,0.000649,0.000452,0.000302,0.000186,0.000179,0.000295,0.000448,0.000651,0.000911,0.001270,0.001753,0.002529,0.003719,0.005568,0.005777,0.004005,0.002734,0.001948,0.001480,0.001166,0.000973,0.000869,0.000856,0.000935,0.001116,0.001223,0.000990,0.000701,0.000607,0.000678,0.000910,0.001178,0.001113,0.000812,0.000589,0.000435,0.000331,0.000252,0.000192,0.000143
  giCountertenorEee30 ftgen  3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3) , i(gkPS3)  ,1,1,1	,0.012961,0.018883,0.025737,0.046165,0.109238,0.177786,0.070937,0.042673,0.023396,0.016018,0.010600,0.006942,0.004369,0.002442,0.001200,0.000319,0.000192,0.000435,0.000467,0.000430,0.000306,0.000189,0.000101,0.000137,0.000238,0.000385,0.000597,0.000894,0.001336,0.001977,0.003125,0.005266,0.007527,0.005281,0.003131,0.001989,0.001349,0.000906,0.000600,0.000374,0.000211,0.000133,0.000263,0.000450,0.000714,0.001069,0.001585,0.002351,0.003649,0.006036,0.006943,0.004523,0.002921,0.002003,0.001483,0.001174,0.001024,0.001026,0.001183,0.001440,0.001243,0.000829,0.000719,0.000881,0.001279,0.001377,0.000977,0.000667,0.000469,0.000340,0.000246,0.000175,0.000119
  giCountertenorEee33 ftgen  4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4) , i(gkPS4)  ,1,1,1	,0.016304,0.025781,0.047131,0.093856,0.213577,0.070728,0.040472,0.024108,0.014169,0.008749,0.004988,0.002391,0.000889,0.000136,0.000481,0.000556,0.000488,0.000316,0.000133,0.000122,0.000156,0.000299,0.000521,0.000870,0.001395,0.002231,0.003813,0.007216,0.008330,0.004423,0.002570,0.001607,0.001002,0.000602,0.000328,0.000143,0.000109,0.000260,0.000510,0.000882,0.001420,0.002252,0.003738,0.006675,0.008239,0.004852,0.002954,0.001992,0.001464,0.001227,0.001245,0.001533,0.001684,0.001095,0.000857,0.001094,0.001647,0.001436,0.000900,0.000587,0.000399,0.000272,0.000179,0.000111
  giCountertenorEee36 ftgen  5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5) , i(gkPS5)  ,1,1,1	,0.020901,0.033747,0.067272,0.249956,0.091103,0.042121,0.023777,0.013422,0.006998,0.003123,0.000925,0.000261,0.000655,0.000630,0.000402,0.000153,0.000132,0.000136,0.000207,0.000439,0.000824,0.001459,0.002557,0.004804,0.010004,0.007430,0.003657,0.002038,0.001162,0.000624,0.000283,0.000156,0.000410,0.000838,0.001510,0.002619,0.004778,0.009373,0.007757,0.004064,0.002466,0.001710,0.001434,0.001595,0.002067,0.001417,0.001024,0.001442,0.002020,0.001289,0.000763,0.000481,0.000304,0.000181
  giCountertenorEee39 ftgen  6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6) , i(gkPS6)  ,1,1,1	,0.027550,0.057179,0.193782,0.173420,0.053305,0.025836,0.013158,0.005747,0.001800,0.000247,0.000779,0.000697,0.000352,0.000147,0.000159,0.000139,0.000391,0.000854,0.001707,0.003330,0.007329,0.012038,0.005171,0.002532,0.001299,0.000603,0.000200,0.000196,0.000590,0.001302,0.002541,0.005062,0.011149,0.008021,0.003901,0.002335,0.001741,0.001874,0.002450,0.001406,0.001360,0.002362,0.001629,0.000873,0.000506,0.000288,0.000146
  giCountertenorEee42 ftgen  7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7) , i(gkPS7)  ,1,1,1	,0.037773,0.092350,0.355634,0.085357,0.032041,0.013887,0.004884,0.000639,0.000872,0.000861,0.000379,0.000202,0.000130,0.000134,0.000483,0.001202,0.002686,0.006275,0.015101,0.006277,0.002705,0.001203,0.000420,0.000268,0.000907,0.002154,0.004740,0.012176,0.009112,0.004038,0.002369,0.002070,0.002909,0.001676,0.001786,0.002785,0.001348,0.000686,0.000353,0.000154
  giCountertenorEee45 ftgen  8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8) , i(gkPS8)  ,1,1,1	,0.051559,0.187745,0.141432,0.048215,0.017498,0.004781,0.000273,0.001114,0.000633,0.000244,0.000108,0.000313,0.001044,0.002794,0.007641,0.016682,0.005148,0.002007,0.000658,0.000106,0.000523,0.001771,0.004523,0.013415,0.009741,0.003999,0.002464,0.003082,0.002203,0.002205,0.002887,0.001181,0.000547,0.000222
  giCountertenorEee48 ftgen  9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9) , i(gkPS9)  ,1,1,1	,0.067500,0.499957,0.084236,0.026845,0.006246,0.000524,0.001260,0.000307,0.000263,0.000154,0.000423,0.001657,0.005126,0.020030,0.007311,0.002320,0.000560,0.000313,0.001681,0.005251,0.018793,0.008143,0.003428,0.003199,0.002838,0.002897,0.002582,0.000962,0.000359
  giCountertenorEee51 ftgen 10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10), i(gkPS10) ,1,1,1	,0.114392,0.346891,0.051686,0.011497,0.000495,0.001393,0.000319,0.000278,0.001711,0.006671,0.024100,0.005070,0.001207,0.000395,0.002611,0.010148,0.016063,0.004678,0.003757,0.002818,0.004738,0.001749,0.000577,0.000121
  giCountertenorEee54 ftgen 11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11), i(gkPS11) ,1,1,1	,0.184699,0.170704,0.027773,0.001277,0.001722,0.000135,0.000260,0.000954,0.005364,0.030213,0.005416,0.000846,0.000161,0.001816,0.009486,0.018223,0.004741,0.005826,0.003571,0.002699,0.000709,0.000111
  giCountertenorEee57 ftgen 12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12), i(gkPS12) ,1,1,1	,0.375525,0.096426,0.009561,0.002227,0.000108,0.000215,0.002089,0.015287,0.010294,0.001315,0.000212,0.003544,0.026847,0.007999,0.006168,0.004412,0.002362,0.000444,0.000109
  giCountertenorEee60 ftgen 13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13), i(gkPS13) ,1,1,1	,1.000001,0.053693,0.001047,0.000612,0.000311,0.003299,0.040074,0.004652,0.000183,0.003363,0.037603,0.006857,0.005682,0.005170,0.000725,0.000129
  giCountertenorEee63 ftgen 14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14), i(gkPS14) ,1,1,1	,0.693800,0.022994,0.002786,0.000638,0.003424,0.048210,0.002415,0.000789,0.020308,0.009360,0.005636,0.003499,0.000242
  giCountertenorEee66 ftgen 15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15), i(gkPS15) ,1,1,1	,0.341398,0.002553,0.000269,0.001909,0.060427,0.001690,0.003632,0.036438,0.011652,0.005397,0.000221
  giCountertenorEee69 ftgen 16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16), i(gkPS16) ,1,1,1	,0.192837,0.004454,0.000431,0.030573,0.002629,0.007088,0.015996,0.008825,0.000889
  giCountertenorEee72 ftgen 17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17), i(gkPS17) ,1,1,1	,0.107381,0.001225,0.006599,0.009301,0.006726,0.013712,0.010336,0.000259
  giCountertenorEee75 ftgen 18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18), i(gkPS18) ,1,1,1	,0.045989,0.001278,0.096423,0.001577,0.018720,0.006999,0.000144
  giCountertenorEee78 ftgen 19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19), i(gkPS19) ,1,1,1	,0.005108,0.003817,0.003379,0.072873,0.010794
  giCountertenorEee81 ftgen 20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20), i(gkPS20) ,1,1,1	,0.008908,0.061152,0.014177,0.017652,0.000134
  giCountertenorEee84 ftgen 21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21), i(gkPS21) ,1,1,1	,0.002448,0.018603,0.027424,0.000518
 elseif iVoice==14 then
  giCountertenorOh24 ftgen  1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1) , i(gkPS1)  ,1,1,1	,0.000976,0.001418,0.001996,0.002649,0.003721,0.004755,0.006289,0.008700,0.010470,0.017279,0.020680,0.047585,0.075931,0.059717,0.025499,0.020090,0.013249,0.011161,0.009282,0.008320,0.008180,0.008813,0.010336,0.014497,0.017321,0.013886,0.008690,0.006221,0.004488,0.003467,0.002671,0.002061,0.001592,0.001183,0.000868,0.000603,0.000392,0.000239,0.000128,0.000106,0.000126,0.000132,0.000124,0.000110,0.000135,0.000180,0.000235,0.000301,0.000381,0.000484,0.000612,0.000797,0.001059,0.001479,0.002029,0.002140,0.001753,0.001427,0.001336,0.001376,0.001574,0.001924,0.002473,0.003150,0.003321,0.002752,0.002057,0.001579,0.001239,0.001017,0.000865,0.000776,0.000736
  giCountertenorOh27 ftgen  2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2) , i(gkPS2)  ,1,1,1	,0.001238,0.001930,0.002779,0.004109,0.005581,0.007795,0.011138,0.015868,0.023498,0.051584,0.090982,0.058872,0.024979,0.018745,0.013492,0.010997,0.009771,0.009964,0.011317,0.016000,0.020636,0.015422,0.009037,0.006223,0.004400,0.003252,0.002389,0.001745,0.001211,0.000817,0.000496,0.000277,0.000133,0.000115,0.000142,0.000158,0.000148,0.000126,0.000131,0.000189,0.000261,0.000353,0.000467,0.000621,0.000824,0.001156,0.001681,0.002451,0.002478,0.001885,0.001618,0.001623,0.001883,0.002404,0.003279,0.004007,0.003505,0.002498,0.001824,0.001384,0.001115,0.000952,0.000886,0.000783,0.000591,0.000435,0.000341,0.000275,0.000225,0.000183,0.000147,0.000116
  giCountertenorOh30 ftgen  3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3) , i(gkPS3)  ,1,1,1	,0.001604,0.002674,0.004072,0.006176,0.009086,0.013563,0.023369,0.035194,0.101582,0.077033,0.029449,0.018986,0.014865,0.011952,0.011694,0.013514,0.020789,0.023285,0.013030,0.008051,0.005265,0.003665,0.002550,0.001705,0.001091,0.000616,0.000306,0.000141,0.000150,0.000186,0.000177,0.000148,0.000124,0.000198,0.000294,0.000421,0.000588,0.000823,0.001193,0.001814,0.002885,0.002835,0.002063,0.001887,0.002113,0.002782,0.004010,0.004725,0.003536,0.002382,0.001692,0.001306,0.001100,0.001011,0.000790,0.000541,0.000403,0.000313,0.000246,0.000192,0.000145,0.000106
  giCountertenorOh33 ftgen  4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4) , i(gkPS4)  ,1,1,1	,0.002118,0.003720,0.006338,0.009787,0.015959,0.030101,0.065229,0.125015,0.039115,0.024298,0.017276,0.013843,0.014630,0.020706,0.028742,0.015233,0.008650,0.005463,0.003511,0.002232,0.001316,0.000660,0.000266,0.000162,0.000213,0.000212,0.000170,0.000102,0.000144,0.000251,0.000396,0.000597,0.000891,0.001362,0.002256,0.003634,0.002895,0.002272,0.002441,0.003352,0.005140,0.005242,0.003308,0.002161,0.001568,0.001294,0.001139,0.000764,0.000520,0.000381,0.000286,0.000212,0.000149
  giCountertenorOh36 ftgen  5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5) , i(gkPS5)  ,1,1,1	,0.002837,0.005300,0.009514,0.017406,0.034571,0.095209,0.119489,0.040201,0.022335,0.016651,0.017637,0.029015,0.027795,0.012453,0.006942,0.004127,0.002369,0.001209,0.000479,0.000192,0.000252,0.000249,0.000173,0.000136,0.000271,0.000472,0.000765,0.001230,0.002129,0.004081,0.003528,0.002689,0.003169,0.004981,0.006691,0.004146,0.002498,0.001745,0.001484,0.001074,0.000655,0.000451,0.000321,0.000221,0.000141
  giCountertenorOh39 ftgen  6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6) , i(gkPS6)  ,1,1,1	,0.003856,0.008213,0.015579,0.031723,0.103107,0.117667,0.037472,0.021976,0.019904,0.031955,0.030799,0.012429,0.006496,0.003487,0.001632,0.000553,0.000231,0.000316,0.000252,0.000119,0.000102,0.000262,0.000522,0.000934,0.001650,0.003365,0.004960,0.003239,0.003768,0.006564,0.007017,0.003653,0.002234,0.001775,0.001184,0.000682,0.000451,0.000296,0.000176
  giCountertenorOh42 ftgen  7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7) , i(gkPS7)  ,1,1,1	,0.005349,0.012355,0.027133,0.070422,0.154071,0.037978,0.023916,0.027050,0.046604,0.016115,0.007338,0.003414,0.001231,0.000279,0.000372,0.000296,0.000104,0.000102,0.000249,0.000591,0.001183,0.002404,0.005812,0.004154,0.004259,0.008091,0.007129,0.003415,0.002221,0.001594,0.000813,0.000497,0.000294,0.000145
  giCountertenorOh45 ftgen  8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8) , i(gkPS8)  ,1,1,1	,0.007441,0.019575,0.060208,0.250025,0.048593,0.027690,0.041429,0.030466,0.010928,0.004465,0.001320,0.000325,0.000425,0.000205,0.000122,0.000289,0.000795,0.001788,0.004530,0.005810,0.004904,0.010331,0.006646,0.003152,0.002288,0.001045,0.000576,0.000300,0.000117
  giCountertenorOh48 ftgen  9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9) , i(gkPS9)  ,1,1,1	,0.010601,0.034815,0.190470,0.080405,0.033305,0.058053,0.024910,0.008255,0.002415,0.000380,0.000499,0.000157,0.000134,0.000544,0.001534,0.004269,0.007067,0.006352,0.013410,0.005008,0.002977,0.001313,0.000644,0.000282
  giCountertenorOh51 ftgen 10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10), i(gkPS10) ,1,1,1	,0.016431,0.063467,0.235366,0.043971,0.063965,0.024873,0.006978,0.001106,0.000633,0.000237,0.000165,0.000526,0.001871,0.006744,0.006491,0.013161,0.007320,0.003558,0.001368,0.000593,0.000178
  giCountertenorOh54 ftgen 11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11), i(gkPS11) ,1,1,1	,0.024710,0.140863,0.075949,0.054103,0.032225,0.006828,0.000565,0.000591,0.000130,0.000122,0.000130,0.001184,0.004810,0.008308,0.016195,0.006829,0.003189,0.000995,0.000290
  giCountertenorOh57 ftgen 12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12), i(gkPS12) ,1,1,1	,0.039150,0.500037,0.055380,0.060924,0.008930,0.000650,0.000410,0.000244,0.001590,0.009065,0.009812,0.013291,0.004577,0.001153,0.000235,0.000102
  giCountertenorOh60 ftgen 13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13), i(gkPS13) ,1,1,1	,0.069637,0.160819,0.116129,0.016511,0.000768,0.000310,0.000199,0.000121,0.001088,0.008540,0.012711,0.010013,0.002627,0.000564,0.000125
  giCountertenorOh63 ftgen 14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14), i(gkPS14) ,1,1,1	,0.126948,0.087953,0.049754,0.002213,0.000474,0.000165,0.003744,0.012986,0.014644,0.002737,0.000355,0.000112
  giCountertenorOh66 ftgen 15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15), i(gkPS15) ,1,1,1	,0.281744,0.108208,0.013656,0.001182,0.000243,0.000261,0.009621,0.032394,0.006377,0.000580,0.000114
  giCountertenorOh69 ftgen 16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16), i(gkPS16) ,1,1,1	,1.000000,0.121825,0.001300,0.000487,0.000199,0.018133,0.026571,0.002305,0.000202
  giCountertenorOh72 ftgen 17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17), i(gkPS17) ,1,1,1	,0.321614,0.033016,0.000620,0.000243,0.017081,0.020022,0.001128
  giCountertenorOh75 ftgen 18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18), i(gkPS18) ,1,1,1	,0.175915,0.004425,0.000329,0.007489,0.029288,0.000710,0.000103
  giCountertenorOh78 ftgen 19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19), i(gkPS19) ,1,1,1	,0.216413,0.002364,0.000521,0.064787,0.001159
  giCountertenorOh81 ftgen 20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20), i(gkPS20) ,1,1,1	,0.243654,0.000974,0.036270,0.004610,0.000126
  giCountertenorOh84 ftgen 21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21), i(gkPS21) ,1,1,1	,0.066032,0.000487,0.040044,0.000145
 elseif iVoice==15 then
  giCountertenorOoh24 ftgen  1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1) , i(gkPS1)  ,1,1,1	,0.002930,0.003338,0.004209,0.005237,0.006779,0.009344,0.011428,0.018295,0.022905,0.047515,0.085264,0.075133,0.033639,0.022964,0.015677,0.011837,0.009420,0.008016,0.005598,0.002825,0.001635,0.001188,0.001026,0.000841,0.000709,0.000648,0.000588,0.000526,0.000477,0.000401,0.000336,0.000264,0.000191,0.000133,0.000108,0.000159,0.000223,0.000304,0.000406,0.000530,0.000690,0.000897,0.001168,0.001579,0.002149,0.003081,0.003723,0.003238,0.002269,0.001653,0.001261,0.001042,0.001008,0.001130,0.001209,0.001084,0.000893,0.000767,0.000687,0.000655,0.000659,0.000701,0.000788
  giCountertenorOoh27 ftgen  2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2) , i(gkPS2)  ,1,1,1	,0.003586,0.004256,0.005702,0.007556,0.010921,0.014024,0.024945,0.035150,0.092038,0.093788,0.037116,0.026081,0.015318,0.012347,0.009771,0.006560,0.002960,0.001559,0.001368,0.001026,0.000848,0.000758,0.000673,0.000602,0.000498,0.000407,0.000303,0.000209,0.000120,0.000160,0.000244,0.000355,0.000499,0.000686,0.000937,0.001278,0.001812,0.002618,0.003961,0.004359,0.003122,0.002085,0.001507,0.001221,0.001248,0.001432,0.001351,0.001078,0.000901,0.000805,0.000781,0.000820,0.000929,0.001142,0.001493,0.001896,0.001791,0.001284,0.000903,0.000650,0.000483,0.000359,0.000267,0.000194,0.000137
  giCountertenorOoh30 ftgen  3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3) , i(gkPS3)  ,1,1,1	,0.004387,0.005685,0.007842,0.011742,0.016404,0.030852,0.061026,0.124965,0.062106,0.031873,0.017790,0.013428,0.010387,0.004571,0.002046,0.001614,0.001183,0.000962,0.000842,0.000729,0.000595,0.000464,0.000313,0.000193,0.000161,0.000272,0.000424,0.000634,0.000922,0.001335,0.001984,0.003066,0.004916,0.004770,0.002924,0.001939,0.001459,0.001499,0.001713,0.001437,0.001123,0.000961,0.000924,0.000992,0.001191,0.001581,0.002177,0.002117,0.001415,0.000940,0.000647,0.000456,0.000320,0.000219,0.000143
  giCountertenorOoh33 ftgen  4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4) , i(gkPS4)  ,1,1,1	,0.005388,0.007726,0.011546,0.018473,0.036095,0.086804,0.138411,0.041289,0.024565,0.016650,0.011902,0.004266,0.001997,0.001497,0.001165,0.000998,0.000847,0.000647,0.000450,0.000263,0.000103,0.000118,0.000101,0.000207,0.000376,0.000627,0.000985,0.001532,0.002453,0.004202,0.006295,0.004173,0.002462,0.001735,0.001864,0.001976,0.001463,0.001175,0.001103,0.001211,0.001558,0.002280,0.002680,0.001752,0.001076,0.000697,0.000459,0.000297,0.000181,0.000101
  giCountertenorOoh36 ftgen  5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5) , i(gkPS5)  ,1,1,1	,0.006678,0.010477,0.018695,0.036602,0.095066,0.150330,0.045948,0.023685,0.016041,0.005653,0.002378,0.001682,0.001298,0.001053,0.000802,0.000528,0.000265,0.000105,0.000138,0.000118,0.000217,0.000449,0.000815,0.001387,0.002350,0.004323,0.007492,0.004566,0.002539,0.002030,0.002436,0.001799,0.001386,0.001329,0.001590,0.002352,0.003257,0.002059,0.001161,0.000702,0.000425,0.000243,0.000123
  giCountertenorOoh39 ftgen  6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6) , i(gkPS6)  ,1,1,1	,0.008507,0.015099,0.028021,0.070256,0.187408,0.052114,0.024673,0.013102,0.003116,0.002049,0.001515,0.001204,0.000813,0.000417,0.000115,0.000127,0.000167,0.000128,0.000197,0.000489,0.000998,0.001875,0.003627,0.007929,0.006251,0.003018,0.002497,0.002704,0.001804,0.001564,0.001861,0.002991,0.003590,0.001811,0.000967,0.000535,0.000275,0.000118
  giCountertenorOoh42 ftgen  7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7) , i(gkPS7)  ,1,1,1	,0.011372,0.023489,0.061720,0.249997,0.063763,0.026863,0.009143,0.003230,0.001926,0.001459,0.000929,0.000387,0.000186,0.000157,0.000177,0.000548,0.001276,0.002689,0.006178,0.009604,0.003905,0.003024,0.002899,0.001942,0.002006,0.003198,0.004277,0.001900,0.000922,0.000444,0.000179
  giCountertenorOoh45 ftgen  8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8) , i(gkPS8)  ,1,1,1	,0.015452,0.036944,0.173650,0.082571,0.033299,0.008530,0.002994,0.001997,0.001295,0.000526,0.000105,0.000236,0.000137,0.000202,0.000755,0.001978,0.004926,0.012637,0.004941,0.003746,0.002939,0.002218,0.003135,0.005390,0.002165,0.000924,0.000366,0.000102
  giCountertenorOoh48 ftgen  9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9) , i(gkPS9)  ,1,1,1	,0.020956,0.073214,0.300650,0.047374,0.011304,0.003365,0.002105,0.001056,0.000160,0.000271,0.000143,0.000105,0.000437,0.001635,0.004710,0.015016,0.005087,0.004883,0.002780,0.003191,0.006532,0.002329,0.000854,0.000249
  giCountertenorOoh51 ftgen 10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10), i(gkPS10) ,1,1,1	,0.030210,0.140577,0.104265,0.026214,0.004100,0.002408,0.000835,0.000254,0.000256,0.000123,0.000395,0.002001,0.007270,0.012518,0.005007,0.003616,0.003732,0.007195,0.001939,0.000551
  giCountertenorOoh54 ftgen 11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11), i(gkPS11) ,1,1,1	,0.046979,0.499997,0.053723,0.006460,0.002919,0.000773,0.000378,0.000118,0.000106,0.000152,0.001094,0.005381,0.019208,0.006051,0.003882,0.006400,0.003801,0.000886,0.000115
  giCountertenorOoh57 ftgen 12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12), i(gkPS12) ,1,1,1	,0.073889,0.165133,0.017058,0.003994,0.001052,0.000471,0.000177,0.001512,0.009857,0.009881,0.005879,0.006275,0.004329,0.000733,0.000125
  giCountertenorOoh60 ftgen 13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13), i(gkPS13) ,1,1,1	,0.146440,0.094756,0.006731,0.002111,0.000551,0.000141,0.000870,0.009425,0.010175,0.005557,0.013068,0.001707,0.000146
  giCountertenorOoh63 ftgen 14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14), i(gkPS14) ,1,1,1	,0.281199,0.052436,0.004817,0.000509,0.000247,0.004004,0.025038,0.007235,0.014393,0.001102,0.000174
  giCountertenorOoh66 ftgen 15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15), i(gkPS15) ,1,1,1	,1.000000,0.012920,0.001547,0.000236,0.000305,0.010763,0.012104,0.012802,0.001771,0.000185
  giCountertenorOoh69 ftgen 16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16), i(gkPS16) ,1,1,1	,0.330234,0.007988,0.000942,0.000128,0.000355,0.019716,0.011755,0.008656,0.000251
  giCountertenorOoh72 ftgen 17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17), i(gkPS17) ,1,1,1	,0.189497,0.004222,0.000170,0.000283,0.018851,0.011112,0.003413,0.000105
  giCountertenorOoh75 ftgen 18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18), i(gkPS18) ,1,1,1	,0.104873,0.001016,0.008010,0.014471,0.002205,0.000124
  giCountertenorOoh78 ftgen 19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19), i(gkPS19) ,1,1,1	,0.025840,0.000472,0.000610,0.024208,0.003543,0.000116
  giCountertenorOoh81 ftgen 20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20), i(gkPS20) ,1,1,1	,0.015975,0.000256,0.039437,0.017313,0.000164
  giCountertenorOoh84 ftgen 21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21), i(gkPS21) ,1,1,1	,0.008443,0.000565,0.022224,0.000210
 /* ALTO */
 elseif iVoice==16 then
  giAltoAh24 ftgen  1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1) , i(gkPS1)  ,1,1,1	,0.000189,0.000296,0.000384,0.000470,0.000519,0.000516,0.000488,0.000371,0.000272,0.000362,0.000762,0.001312,0.002068,0.003050,0.004182,0.005758,0.007569,0.009859,0.013271,0.016801,0.024312,0.033001,0.056588,0.102975,0.102169,0.056712,0.036664,0.028737,0.023278,0.022005,0.021266,0.024719,0.028942,0.046575,0.063428,0.051044,0.027265,0.019362,0.013395,0.010268,0.007894,0.006039,0.004698,0.003520,0.002602,0.001851,0.001231,0.000766,0.000406,0.000199,0.000194,0.000263,0.000310,0.000314,0.000289,0.000244,0.000184,0.000124,0.000126,0.000177,0.000255,0.000364,0.000514,0.000708,0.000954,0.001263,0.001646,0.002126,0.002727,0.003491,0.004448,0.005556,0.006485,0.006605,0.005809,0.004697,0.003698,0.002896,0.002268,0.001771,0.001374,0.001053,0.000794,0.000590,0.000437,0.000344,0.000317,0.000349
  giAltoAh27 ftgen  2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2) , i(gkPS2)  ,1,1,1	,0.000244,0.000397,0.000518,0.000607,0.000616,0.000568,0.000396,0.000335,0.000726,0.001487,0.002548,0.003987,0.005730,0.008260,0.011227,0.015932,0.020978,0.034291,0.049287,0.113108,0.122662,0.059916,0.041411,0.029183,0.026718,0.025244,0.029994,0.038221,0.068475,0.069216,0.035306,0.022725,0.014644,0.011021,0.007946,0.005866,0.004193,0.002921,0.001910,0.001127,0.000578,0.000244,0.000241,0.000340,0.000374,0.000356,0.000298,0.000215,0.000128,0.000113,0.000169,0.000257,0.000396,0.000598,0.000875,0.001242,0.001721,0.002342,0.003155,0.004233,0.005634,0.007200,0.007995,0.007183,0.005618,0.004224,0.003160,0.002359,0.001750,0.001279,0.000914,0.000639,0.000456,0.000380,0.000412,0.000508,0.000638,0.000799,0.000989,0.001180,0.001248,0.001102,0.000867,0.000662,0.000507,0.000390,0.000299,0.000227,0.000169,0.000122
  giAltoAh30 ftgen  3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3) , i(gkPS3)  ,1,1,1	,0.000322,0.000523,0.000687,0.000739,0.000683,0.000446,0.000481,0.001318,0.002593,0.004536,0.007027,0.010628,0.015538,0.022888,0.037867,0.059838,0.147441,0.117395,0.052829,0.036972,0.031809,0.030303,0.037765,0.063847,0.088422,0.044709,0.025986,0.015831,0.011132,0.007664,0.005234,0.003397,0.002015,0.001038,0.000395,0.000267,0.000404,0.000445,0.000401,0.000296,0.000178,0.000161,0.000262,0.000438,0.000716,0.001120,0.001683,0.002450,0.003502,0.004969,0.006966,0.009036,0.009149,0.007148,0.005115,0.003622,0.002556,0.001780,0.001208,0.000794,0.000531,0.000449,0.000528,0.000692,0.000905,0.001168,0.001426,0.001435,0.001144,0.000835,0.000607,0.000444,0.000323,0.000231,0.000159,0.000104
  giAltoAh33 ftgen  4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4) , i(gkPS4)  ,1,1,1	,0.000435,0.000700,0.000875,0.000843,0.000544,0.000647,0.001988,0.004188,0.007324,0.012179,0.019122,0.029406,0.054206,0.141337,0.157466,0.062492,0.040883,0.036334,0.041267,0.064121,0.105743,0.045932,0.025684,0.015869,0.010059,0.006455,0.003844,0.001991,0.000808,0.000291,0.000460,0.000530,0.000454,0.000294,0.000125,0.000105,0.000104,0.000188,0.000335,0.000614,0.001080,0.001786,0.002812,0.004302,0.006516,0.009550,0.011271,0.008968,0.006048,0.004011,0.002642,0.001695,0.001040,0.000640,0.000541,0.000692,0.000956,0.001306,0.001686,0.001690,0.001250,0.000853,0.000587,0.000404,0.000271,0.000172,0.000103,0.000102,0.000112
  giAltoAh36 ftgen  5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5) , i(gkPS5)  ,1,1,1	,0.000591,0.000940,0.001033,0.000742,0.000724,0.002625,0.006104,0.011523,0.019729,0.033624,0.066046,0.206109,0.113522,0.057528,0.044055,0.049494,0.093266,0.102229,0.038781,0.020569,0.012100,0.007054,0.003709,0.001535,0.000398,0.000528,0.000629,0.000488,0.000249,0.000106,0.000124,0.000180,0.000356,0.000732,0.001422,0.002539,0.004275,0.007024,0.011180,0.013295,0.009456,0.005833,0.003569,0.002122,0.001189,0.000693,0.000704,0.001020,0.001484,0.002021,0.001923,0.001279,0.000814,0.000523,0.000327,0.000190,0.000101,0.000126,0.000129
  giAltoAh39 ftgen  6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6) , i(gkPS6)  ,1,1,1	,0.000792,0.001213,0.001135,0.000668,0.002969,0.007965,0.016502,0.031835,0.068519,0.226014,0.119754,0.058321,0.050446,0.076384,0.138316,0.045413,0.022028,0.011725,0.005840,0.002252,0.000488,0.000680,0.000712,0.000429,0.000104,0.000120,0.000144,0.000149,0.000337,0.000791,0.001747,0.003438,0.006303,0.011258,0.015979,0.011229,0.006318,0.003500,0.001828,0.000913,0.000824,0.001276,0.001980,0.002497,0.001737,0.001015,0.000599,0.000339,0.000171,0.000148,0.000149
  giAltoAh42 ftgen  7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7) , i(gkPS7)  ,1,1,1	,0.001046,0.001479,0.000892,0.002638,0.009076,0.021269,0.045807,0.119803,0.234872,0.073996,0.060678,0.127922,0.089484,0.031708,0.015355,0.006806,0.002080,0.000536,0.000893,0.000593,0.000132,0.000160,0.000143,0.000109,0.000328,0.000883,0.002256,0.004934,0.010012,0.018210,0.014399,0.007297,0.003587,0.001599,0.000905,0.001398,0.002364,0.002903,0.001690,0.000899,0.000467,0.000211,0.000109,0.000178,0.000165
  giAltoAh45 ftgen  8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8) , i(gkPS8)  ,1,1,1	,0.001400,0.001687,0.001294,0.008377,0.024362,0.058827,0.282834,0.125013,0.072697,0.128373,0.091880,0.031757,0.012918,0.003985,0.000583,0.001062,0.000588,0.000210,0.000100,0.000377,0.001233,0.003586,0.008637,0.019180,0.018001,0.008054,0.003404,0.001286,0.001393,0.002629,0.003400,0.001717,0.000813,0.000347,0.000124,0.000156,0.000228,0.000128
  giAltoAh48 ftgen  9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9) , i(gkPS9)  ,1,1,1	,0.001880,0.001482,0.005251,0.023053,0.067263,0.412366,0.115064,0.099033,0.204459,0.041147,0.014111,0.003072,0.001057,0.000977,0.000247,0.000164,0.000717,0.002848,0.008565,0.022410,0.018941,0.007145,0.002378,0.001413,0.002978,0.003857,0.001634,0.000655,0.000202,0.000113,0.000183,0.000258,0.000115
  giAltoAh51 ftgen 10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10), i(gkPS10) ,1,1,1	,0.002427,0.001338,0.015940,0.063709,0.452338,0.116697,0.152906,0.090878,0.023464,0.004506,0.001360,0.000857,0.000242,0.000142,0.000677,0.003504,0.012640,0.032038,0.012664,0.003664,0.001654,0.003974,0.003484,0.001202,0.000342,0.000133,0.000199,0.000300,0.000106
  giAltoAh54 ftgen 11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11), i(gkPS11) ,1,1,1	,0.002958,0.005276,0.042538,0.239659,0.147975,0.255925,0.063414,0.013610,0.001072,0.001187,0.000319,0.000216,0.001764,0.009875,0.036436,0.014599,0.003203,0.002798,0.005807,0.001797,0.000423,0.000157,0.000220,0.000330
  giAltoAh57 ftgen 12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12), i(gkPS12) ,1,1,1	,0.003374,0.016755,0.117663,0.250019,0.256814,0.063510,0.007969,0.002123,0.000140,0.000201,0.002468,0.017282,0.036001,0.006807,0.002788,0.006801,0.001627,0.000248,0.000137,0.000312,0.000255
  giAltoAh60 ftgen 13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13), i(gkPS13) ,1,1,1	,0.002967,0.046107,0.824869,0.198093,0.082301,0.006142,0.001955,0.000496,0.001429,0.017146,0.037895,0.004766,0.005960,0.003267,0.000407,0.000157,0.000155,0.000519
  giAltoAh63 ftgen 14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14), i(gkPS14) ,1,1,1	,0.002677,0.127443,0.233422,0.181784,0.009013,0.001717,0.000284,0.007015,0.064115,0.007331,0.007952,0.002405,0.000267,0.000125,0.000600
  giAltoAh66 ftgen 15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15), i(gkPS15) ,1,1,1	,0.010553,0.479368,0.511917,0.027219,0.002374,0.000432,0.019753,0.029194,0.005598,0.003593,0.000314,0.000115,0.000440,0.000188
  giAltoAh69 ftgen 16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16), i(gkPS16) ,1,1,1	,0.033509,0.499985,0.127000,0.004247,0.000403,0.034562,0.013610,0.013599,0.000498,0.000136,0.000625,0.000114
  giAltoAh72 ftgen 17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17), i(gkPS17) ,1,1,1	,0.092211,0.396173,0.012280,0.000993,0.034289,0.009528,0.006532,0.000315,0.000310,0.000185
  giAltoAh75 ftgen 18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18), i(gkPS18) ,1,1,1	,0.254908,0.363579,0.003434,0.014036,0.014660,0.004810,0.000173,0.001201
  giAltoAh78 ftgen 19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19), i(gkPS19) ,1,1,1	,0.958726,0.054439,0.000865,0.058385,0.007186,0.000230,0.000375
  giAltoAh81 ftgen 20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20), i(gkPS20) ,1,1,1	,1.000000,0.008493,0.069131,0.027200,0.000272,0.000228
  giAltoAh84 ftgen 21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21), i(gkPS21) ,1,1,1	,0.792347,0.001986,0.019056,0.000630,0.000371
 elseif iVoice==17 then
  giAltoEh24 ftgen  1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1) , i(gkPS1)  ,1,1,1	,0.003362,0.004063,0.005154,0.006879,0.008943,0.011836,0.016028,0.020650,0.030582,0.041256,0.073678,0.110417,0.094909,0.051940,0.035835,0.024628,0.018327,0.013819,0.010292,0.007833,0.005745,0.004159,0.002926,0.001916,0.001193,0.000629,0.000269,0.000196,0.000305,0.000382,0.000393,0.000375,0.000314,0.000239,0.000159,0.000177,0.000278,0.000395,0.000541,0.000706,0.000932,0.001227,0.001618,0.002273,0.003186,0.005042,0.006061,0.004724,0.002963,0.002132,0.001509,0.001144,0.000862,0.000649,0.000491,0.000359,0.000260,0.000181,0.000118,0.000128,0.000186,0.000258,0.000348,0.000460,0.000604,0.000788,0.001043,0.001394,0.001891,0.002418,0.002462,0.001970,0.001456,0.001095,0.000833,0.000649,0.000509,0.000407,0.000337,0.000299,0.000298,0.000331,0.000397,0.000491,0.000619,0.000790,0.001006,0.001234
  giAltoEh27 ftgen  2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2) , i(gkPS2)  ,1,1,1	,0.004127,0.005275,0.007209,0.009991,0.013867,0.019808,0.027445,0.042904,0.071987,0.129126,0.108909,0.053400,0.036759,0.023688,0.017299,0.012158,0.008774,0.005971,0.004053,0.002515,0.001440,0.000656,0.000247,0.000296,0.000443,0.000468,0.000441,0.000347,0.000241,0.000122,0.000217,0.000362,0.000543,0.000763,0.001053,0.001462,0.002056,0.003040,0.004969,0.007193,0.005760,0.003352,0.002274,0.001551,0.001119,0.000797,0.000571,0.000393,0.000264,0.000165,0.000115,0.000188,0.000283,0.000406,0.000567,0.000781,0.001077,0.001517,0.002169,0.002914,0.002838,0.002063,0.001457,0.001046,0.000776,0.000583,0.000451,0.000372,0.000353,0.000394,0.000488,0.000633,0.000840,0.001123,0.001453,0.001578,0.001331,0.000989,0.000724,0.000534,0.000397,0.000294,0.000216,0.000156,0.000110
  giAltoEh30 ftgen  3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3) , i(gkPS3)  ,1,1,1	,0.005092,0.006977,0.010396,0.015163,0.023130,0.034809,0.056474,0.124888,0.147945,0.067675,0.042041,0.026103,0.017387,0.011699,0.007558,0.004760,0.002659,0.001309,0.000425,0.000311,0.000523,0.000556,0.000492,0.000344,0.000181,0.000108,0.000276,0.000487,0.000768,0.001122,0.001665,0.002495,0.003962,0.007356,0.007971,0.004348,0.002698,0.001734,0.001166,0.000785,0.000511,0.000320,0.000182,0.000190,0.000315,0.000486,0.000720,0.001051,0.001562,0.002371,0.003434,0.003234,0.002153,0.001437,0.000994,0.000705,0.000521,0.000426,0.000432,0.000535,0.000722,0.001009,0.001423,0.001836,0.001720,0.001239,0.000855,0.000596,0.000418,0.000292,0.000200,0.000132
  giAltoEh33 ftgen  4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4) , i(gkPS4)  ,1,1,1	,0.006374,0.009593,0.015226,0.024859,0.040118,0.071823,0.177585,0.125051,0.058039,0.032167,0.019996,0.012533,0.007307,0.003947,0.001782,0.000489,0.000427,0.000651,0.000634,0.000446,0.000221,0.000149,0.000413,0.000750,0.001205,0.001923,0.003136,0.005583,0.010175,0.006418,0.003433,0.002024,0.001259,0.000784,0.000459,0.000244,0.000111,0.000114,0.000244,0.000436,0.000711,0.001122,0.001783,0.002933,0.004251,0.003241,0.001974,0.001256,0.000835,0.000588,0.000498,0.000577,0.000806,0.001196,0.001794,0.002240,0.001746,0.001130,0.000733,0.000481,0.000313,0.000196,0.000116,0.000107,0.000123,0.000104
  giAltoEh36 ftgen  5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5) , i(gkPS5)  ,1,1,1	,0.008128,0.013762,0.023679,0.041314,0.082543,0.220926,0.103928,0.049281,0.027654,0.015677,0.008325,0.003834,0.001260,0.000392,0.000764,0.000751,0.000478,0.000163,0.000354,0.000791,0.001415,0.002458,0.004555,0.010107,0.009469,0.004274,0.002294,0.001301,0.000721,0.000362,0.000148,0.000256,0.000519,0.000925,0.001584,0.002804,0.004864,0.003965,0.002203,0.001307,0.000820,0.000602,0.000668,0.000990,0.001593,0.002490,0.002373,0.001446,0.000864,0.000523,0.000310,0.000173,0.000135,0.000143,0.000103
  giAltoEh39 ftgen  6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6) , i(gkPS6)  ,1,1,1	,0.010535,0.019953,0.039560,0.085683,0.257901,0.106658,0.047311,0.024286,0.011928,0.005025,0.001312,0.000591,0.000935,0.000693,0.000244,0.000433,0.001084,0.002103,0.004108,0.009930,0.011512,0.004545,0.002237,0.001142,0.000527,0.000191,0.000230,0.000566,0.001133,0.002154,0.004340,0.005678,0.002915,0.001553,0.000903,0.000707,0.000977,0.001682,0.002909,0.002665,0.001449,0.000795,0.000433,0.000220,0.000158,0.000169,0.000109
  giAltoEh42 ftgen  7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7) , i(gkPS7)  ,1,1,1	,0.013958,0.030334,0.069643,0.249891,0.135371,0.052225,0.023407,0.009523,0.002620,0.000623,0.001115,0.000690,0.000220,0.000978,0.002252,0.005006,0.014753,0.008712,0.003477,0.001575,0.000644,0.000191,0.000198,0.000633,0.001450,0.003146,0.006918,0.004334,0.002002,0.001048,0.000872,0.001457,0.002874,0.003471,0.001726,0.000845,0.000403,0.000170,0.000107,0.000188,0.000185,0.000102
  giAltoEh45 ftgen  8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8) , i(gkPS8)  ,1,1,1	,0.019186,0.049717,0.143654,0.250057,0.064333,0.025066,0.007894,0.000978,0.001303,0.000893,0.000298,0.001501,0.003852,0.011185,0.012845,0.004053,0.001570,0.000488,0.000229,0.000874,0.002252,0.005891,0.006503,0.002521,0.001180,0.001158,0.002404,0.004502,0.002271,0.000968,0.000395,0.000131,0.000158,0.000250,0.000148
  giAltoEh48 ftgen  9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9) , i(gkPS9)  ,1,1,1	,0.027527,0.082639,0.441905,0.098560,0.031354,0.007669,0.000785,0.001502,0.000330,0.001589,0.004927,0.020236,0.008549,0.002604,0.000730,0.000119,0.000515,0.001854,0.005620,0.007941,0.002618,0.001208,0.001989,0.004995,0.002897,0.001049,0.000348,0.000188,0.000287,0.000130
  giAltoEh51 ftgen 10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10), i(gkPS10) ,1,1,1	,0.039930,0.171475,0.213415,0.048597,0.010054,0.001181,0.001385,0.000867,0.004211,0.019887,0.009096,0.002286,0.000383,0.000109,0.000463,0.002271,0.008699,0.005840,0.001810,0.001961,0.005836,0.002906,0.000868,0.000198,0.000198,0.000336,0.000125
  giAltoEh54 ftgen 11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11), i(gkPS11) ,1,1,1	,0.060669,0.499820,0.104443,0.019045,0.001245,0.001376,0.001951,0.010010,0.017427,0.003148,0.000373,0.001269,0.006296,0.008668,0.002099,0.002917,0.006949,0.001692,0.000339,0.000217,0.000372,0.000107
  giAltoEh57 ftgen 12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12), i(gkPS12) ,1,1,1	,0.099436,0.500065,0.050129,0.001955,0.001786,0.003004,0.022378,0.008105,0.000976,0.000133,0.001750,0.011786,0.005041,0.002318,0.009006,0.001935,0.000261,0.000101,0.000315,0.000297
  giAltoEh60 ftgen 13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13), i(gkPS13) ,1,1,1	,0.165294,0.197124,0.015337,0.003004,0.003167,0.040484,0.005206,0.000220,0.001029,0.011247,0.005236,0.003975,0.005800,0.000693,0.000124,0.000151,0.000577,0.000103
  giAltoEh63 ftgen 14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14), i(gkPS14) ,1,1,1	,0.343032,0.097209,0.002364,0.001736,0.039793,0.004573,0.000222,0.004544,0.011682,0.003924,0.005813,0.000396,0.000102,0.000125,0.000672
  giAltoEh66 ftgen 15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15), i(gkPS15) ,1,1,1	,0.999678,0.038087,0.002755,0.020021,0.006295,0.000187,0.012594,0.004197,0.013896,0.000677,0.000104,0.000433,0.000213
  giAltoEh69 ftgen 16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16), i(gkPS16) ,1,1,1	,1.000001,0.003910,0.006008,0.016207,0.000265,0.023574,0.004637,0.003870,0.000201,0.000631,0.000123
  giAltoEh72 ftgen 17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17), i(gkPS17) ,1,1,1	,0.394210,0.006006,0.080968,0.000440,0.022493,0.007950,0.001386,0.000302,0.000206
  giAltoEh75 ftgen 18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18), i(gkPS18) ,1,1,1	,0.194429,0.003472,0.009145,0.009090,0.007850,0.000792,0.001344
  giAltoEh78 ftgen 19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19), i(gkPS19) ,1,1,1	,0.076172,0.040042,0.000373,0.008393,0.001355,0.000427
  giAltoEh81 ftgen 20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20), i(gkPS20) ,1,1,1	,0.007820,0.032414,0.047156,0.007739,0.000246
  giAltoEh84 ftgen 21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21), i(gkPS21) ,1,1,1	,0.012011,0.000881,0.015900,0.000124,0.000412
 elseif iVoice==18 then
  giAltoEee24 ftgen  1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1) , i(gkPS1)  ,1,1,1	,0.004734,0.005426,0.006616,0.008187,0.010807,0.014143,0.019214,0.028383,0.042150,0.084741,0.096689,0.058804,0.031217,0.023777,0.015637,0.012369,0.009000,0.006764,0.005109,0.003621,0.002624,0.001760,0.001102,0.000655,0.000294,0.000144,0.000174,0.000252,0.000263,0.000258,0.000224,0.000168,0.000120,0.000134,0.000222,0.000342,0.000495,0.000695,0.000938,0.001253,0.001659,0.002197,0.003006,0.004145,0.005948,0.006987,0.005870,0.004071,0.002952,0.002161,0.001639,0.001249,0.000949,0.000719,0.000532,0.000385,0.000268,0.000175,0.000107,0.000136,0.000197,0.000274,0.000368,0.000490,0.000641,0.000851,0.001137,0.001539,0.001960,0.001987,0.001583,0.001163,0.000868,0.000655,0.000503,0.000386,0.000296,0.000224,0.000165,0.000118
  giAltoEee27 ftgen  2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2) , i(gkPS2)  ,1,1,1	,0.005733,0.007002,0.008794,0.011941,0.016656,0.024458,0.035967,0.075403,0.118292,0.075882,0.036455,0.024866,0.016911,0.011927,0.008415,0.006026,0.004028,0.002674,0.001591,0.000891,0.000358,0.000167,0.000242,0.000314,0.000312,0.000271,0.000193,0.000123,0.000109,0.000199,0.000350,0.000552,0.000829,0.001181,0.001665,0.002311,0.003324,0.004850,0.007381,0.008158,0.005824,0.003857,0.002663,0.001912,0.001382,0.000998,0.000708,0.000485,0.000316,0.000189,0.000101,0.000135,0.000213,0.000320,0.000454,0.000635,0.000878,0.001238,0.001765,0.002361,0.002288,0.001653,0.001159,0.000824,0.000602,0.000439,0.000319,0.000226,0.000154,0.000147,0.000209,0.000290,0.000395,0.000538,0.000733,0.000978,0.001145,0.001038,0.000788,0.000577,0.000424,0.000314
  giAltoEee30 ftgen  3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3) , i(gkPS3)  ,1,1,1	,0.006959,0.009081,0.012315,0.018565,0.028153,0.044588,0.114187,0.124993,0.048859,0.031482,0.019683,0.012844,0.008644,0.005471,0.003421,0.001862,0.000902,0.000286,0.000233,0.000370,0.000371,0.000309,0.000202,0.000154,0.000316,0.000568,0.000934,0.001428,0.002143,0.003188,0.004956,0.008182,0.009679,0.006341,0.003982,0.002603,0.001775,0.001204,0.000799,0.000504,0.000291,0.000147,0.000134,0.000236,0.000382,0.000579,0.000856,0.001275,0.001931,0.002784,0.002605,0.001721,0.001138,0.000774,0.000533,0.000364,0.000239,0.000148,0.000108,0.000174,0.000263,0.000386,0.000556,0.000803,0.001139,0.001354,0.001132,0.000793,0.000548,0.000383,0.000267,0.000183,0.000121
  giAltoEee33 ftgen  4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4) , i(gkPS4)  ,1,1,1	,0.008585,0.011910,0.018442,0.028601,0.051881,0.148152,0.116598,0.047937,0.025511,0.015999,0.009973,0.005757,0.003142,0.001432,0.000410,0.000282,0.000444,0.000423,0.000287,0.000140,0.000115,0.000271,0.000586,0.001072,0.001777,0.002864,0.004718,0.008269,0.011724,0.007336,0.004255,0.002631,0.001661,0.001032,0.000600,0.000308,0.000128,0.000173,0.000332,0.000566,0.000913,0.001456,0.002388,0.003440,0.002602,0.001568,0.000982,0.000630,0.000399,0.000238,0.000128,0.000101,0.000183,0.000304,0.000480,0.000742,0.001146,0.001590,0.001412,0.000931,0.000601,0.000393,0.000254,0.000158
  giAltoEee36 ftgen  5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5) , i(gkPS5)  ,1,1,1	,0.010854,0.016378,0.028295,0.056786,0.169548,0.117657,0.047576,0.024750,0.013535,0.007247,0.003523,0.001311,0.000289,0.000504,0.000516,0.000336,0.000126,0.000268,0.000684,0.001392,0.002510,0.004405,0.008309,0.014010,0.008164,0.004335,0.002505,0.001443,0.000773,0.000352,0.000118,0.000180,0.000395,0.000740,0.001290,0.002287,0.003943,0.003185,0.001748,0.001013,0.000595,0.000332,0.000163,0.000200,0.000368,0.000630,0.001059,0.001722,0.001799,0.001123,0.000669,0.000403,0.000236,0.000128,0.000109,0.000115
  giAltoEee39 ftgen  6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6) , i(gkPS6)  ,1,1,1	,0.013990,0.023858,0.048875,0.150665,0.151627,0.049694,0.023833,0.012042,0.005344,0.001779,0.000333,0.000629,0.000543,0.000246,0.000119,0.000397,0.001102,0.002359,0.004615,0.009688,0.016299,0.007706,0.003821,0.001994,0.000969,0.000378,0.000160,0.000427,0.000907,0.001756,0.003531,0.004578,0.002318,0.001204,0.000638,0.000309,0.000117,0.000128,0.000294,0.000580,0.001078,0.001961,0.002080,0.001158,0.000629,0.000339,0.000169,0.000128,0.000135
  giAltoEee42 ftgen  7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7) , i(gkPS7)  ,1,1,1	,0.018166,0.037139,0.089205,0.250023,0.062972,0.025695,0.010945,0.003725,0.000572,0.000740,0.000619,0.000188,0.000311,0.001143,0.002867,0.006399,0.016417,0.012713,0.005223,0.002421,0.001017,0.000300,0.000144,0.000475,0.001166,0.002569,0.005607,0.003464,0.001560,0.000733,0.000297,0.000129,0.000351,0.000781,0.001627,0.002743,0.001605,0.000774,0.000369,0.000155,0.000152,0.000148
  giAltoEee45 ftgen  8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8) , i(gkPS8)  ,1,1,1	,0.023819,0.057203,0.296329,0.095870,0.031997,0.011515,0.002863,0.000564,0.000846,0.000280,0.000125,0.000542,0.002146,0.005737,0.016566,0.014688,0.005270,0.002068,0.000618,0.000104,0.000168,0.000665,0.001832,0.004795,0.005221,0.001970,0.000800,0.000255,0.000106,0.000370,0.000967,0.002308,0.002840,0.001209,0.000509,0.000186,0.000129,0.000201,0.000118
  giAltoEee48 ftgen  9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9) , i(gkPS9)  ,1,1,1	,0.032760,0.113585,0.235289,0.049500,0.014494,0.002623,0.001009,0.000673,0.000541,0.002795,0.008824,0.028041,0.008677,0.002894,0.000711,0.000113,0.000362,0.001483,0.004584,0.006379,0.002029,0.000664,0.000124,0.000401,0.001264,0.003457,0.002250,0.000805,0.000255,0.000153,0.000229,0.000104
  giAltoEee51 ftgen 10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10), i(gkPS10) ,1,1,1	,0.047737,0.301484,0.099415,0.024093,0.003561,0.001256,0.000492,0.000239,0.002207,0.009245,0.032634,0.007649,0.001940,0.000195,0.000322,0.001819,0.007079,0.004645,0.001280,0.000235,0.000103,0.000590,0.002164,0.004171,0.001262,0.000339,0.000163,0.000268
  giAltoEee54 ftgen 11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11), i(gkPS11) ,1,1,1	,0.074277,0.500015,0.051387,0.007447,0.001481,0.000373,0.000619,0.005727,0.032843,0.010441,0.002023,0.000168,0.000950,0.005141,0.006928,0.001467,0.000161,0.000256,0.001563,0.005490,0.001551,0.000312,0.000179,0.000297
  giAltoEee57 ftgen 12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12), i(gkPS12) ,1,1,1	,0.114410,0.191733,0.023028,0.001128,0.000560,0.001084,0.011476,0.029371,0.004136,0.000208,0.001331,0.009595,0.003939,0.000510,0.000212,0.001935,0.005681,0.001019,0.000104,0.000257,0.000236
  giAltoEee60 ftgen 13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13), i(gkPS13) ,1,1,1	,0.227192,0.099004,0.005244,0.001344,0.001073,0.017641,0.017350,0.001409,0.000721,0.009172,0.004060,0.000250,0.000806,0.006918,0.001617,0.000117,0.000126,0.000462
  giAltoEee63 ftgen 14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14), i(gkPS14) ,1,1,1	,0.603091,0.048190,0.002514,0.000479,0.018496,0.015302,0.000391,0.003639,0.009291,0.000469,0.001181,0.008347,0.000679,0.000111,0.000537
  giAltoEee66 ftgen 15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15), i(gkPS15) ,1,1,1	,1.000000,0.014894,0.000748,0.011456,0.020880,0.000335,0.010283,0.002934,0.000513,0.010980,0.000625,0.000358,0.000173
  giAltoEee69 ftgen 16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16), i(gkPS16) ,1,1,1	,0.383427,0.002256,0.002169,0.058726,0.000416,0.019191,0.001023,0.003871,0.002038,0.000111,0.000515,0.000103
  giAltoEee72 ftgen 17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17), i(gkPS17) ,1,1,1	,0.197992,0.002686,0.035282,0.002817,0.018344,0.000500,0.013835,0.000234,0.000252,0.000171
  giAltoEee75 ftgen 18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18), i(gkPS18) ,1,1,1	,0.096384,0.000955,0.030609,0.007281,0.000937,0.016694,0.000198,0.001073
  giAltoEee78 ftgen 19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19), i(gkPS19) ,1,1,1	,0.029788,0.022912,0.000669,0.005868,0.021959,0.000130,0.000347
  giAltoEee81 ftgen 20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20), i(gkPS20) ,1,1,1	,0.004512,0.117453,0.038387,0.007742,0.000221,0.000205
  giAltoEee84 ftgen 21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21), i(gkPS21) ,1,1,1	,0.005371,0.005634,0.001000,0.000468,0.000341
 elseif iVoice==19 then
  giAltoOh24 ftgen  1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1) , i(gkPS1)  ,1,1,1	,0.001309,0.001824,0.002584,0.003538,0.004745,0.006302,0.008180,0.010795,0.014134,0.018933,0.026852,0.038995,0.065576,0.075348,0.053728,0.033361,0.025424,0.019181,0.016443,0.014528,0.014284,0.015282,0.019092,0.024569,0.022662,0.014749,0.009877,0.007312,0.005506,0.004369,0.003422,0.002692,0.002087,0.001569,0.001146,0.000793,0.000510,0.000298,0.000163,0.000137,0.000169,0.000197,0.000203,0.000190,0.000165,0.000129,0.000119,0.000199,0.000310,0.000458,0.000645,0.000885,0.001184,0.001561,0.002059,0.002697,0.003630,0.004955,0.007043,0.009589,0.009724,0.007266,0.005090,0.003734,0.002767,0.002112,0.001597,0.001205,0.000890,0.000637,0.000446,0.000328,0.000322,0.000409
  giAltoOh27 ftgen  2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2) , i(gkPS2)  ,1,1,1	,0.001648,0.002485,0.003697,0.005250,0.007398,0.010097,0.014102,0.019191,0.029184,0.043902,0.080410,0.085492,0.050018,0.033402,0.023668,0.019505,0.017033,0.017382,0.020190,0.028304,0.027191,0.016200,0.010650,0.007363,0.005554,0.004157,0.003124,0.002287,0.001614,0.001073,0.000647,0.000344,0.000174,0.000178,0.000225,0.000243,0.000227,0.000190,0.000138,0.000111,0.000208,0.000358,0.000570,0.000849,0.001223,0.001706,0.002371,0.003273,0.004688,0.006827,0.010463,0.011909,0.008681,0.005736,0.003964,0.002840,0.002045,0.001463,0.001019,0.000679,0.000447,0.000373,0.000475,0.000673,0.000930,0.001272,0.001741,0.002371,0.002729,0.002294,0.001637,0.001172,0.000856,0.000635,0.000471,0.000346,0.000248,0.000173,0.000114
  giAltoOh30 ftgen  3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3) , i(gkPS3)  ,1,1,1	,0.002103,0.003449,0.005368,0.008129,0.011793,0.017521,0.025816,0.041586,0.082368,0.104390,0.056599,0.036283,0.025378,0.020950,0.020421,0.024179,0.034910,0.027177,0.014524,0.009440,0.006646,0.004712,0.003347,0.002258,0.001434,0.000804,0.000377,0.000190,0.000239,0.000286,0.000274,0.000222,0.000148,0.000107,0.000224,0.000430,0.000739,0.001171,0.001769,0.002615,0.003842,0.005897,0.009422,0.014095,0.011544,0.006995,0.004512,0.003054,0.002058,0.001364,0.000851,0.000518,0.000455,0.000652,0.000977,0.001416,0.002057,0.002938,0.003127,0.002245,0.001501,0.001027,0.000720,0.000504,0.000346,0.000228,0.000141
  giAltoOh33 ftgen  4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4) , i(gkPS4)  ,1,1,1	,0.002740,0.004898,0.008092,0.012802,0.020408,0.032961,0.058600,0.125001,0.084118,0.045111,0.029687,0.024133,0.025379,0.037896,0.035451,0.017081,0.010266,0.006879,0.004582,0.002935,0.001729,0.000859,0.000329,0.000247,0.000333,0.000330,0.000255,0.000149,0.000102,0.000140,0.000335,0.000687,0.001224,0.002024,0.003222,0.005108,0.008605,0.015395,0.014809,0.008247,0.004922,0.003108,0.001934,0.001129,0.000626,0.000566,0.000903,0.001426,0.002224,0.003432,0.003660,0.002373,0.001484,0.000966,0.000632,0.000404,0.000244,0.000132,0.000134,0.000170,0.000126
  giAltoOh36 ftgen  5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5) , i(gkPS5)  ,1,1,1	,0.003650,0.007078,0.012608,0.021597,0.037879,0.078022,0.150765,0.066755,0.038384,0.029074,0.030586,0.049175,0.029523,0.014638,0.008747,0.005389,0.003142,0.001589,0.000598,0.000274,0.000395,0.000382,0.000259,0.000113,0.000103,0.000103,0.000112,0.000118,0.000144,0.000399,0.000921,0.001779,0.003139,0.005426,0.009970,0.019301,0.014629,0.007520,0.004255,0.002429,0.001283,0.000662,0.000825,0.001460,0.002472,0.004136,0.004073,0.002334,0.001367,0.000828,0.000489,0.000266,0.000125,0.000105,0.000173,0.000193,0.000114
  giAltoOh39 ftgen  6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6) , i(gkPS6)  ,1,1,1	,0.004962,0.010483,0.020163,0.038322,0.087672,0.170724,0.066701,0.038951,0.034708,0.056519,0.032353,0.014706,0.008302,0.004569,0.002143,0.000687,0.000355,0.000485,0.000379,0.000169,0.000126,0.000109,0.000144,0.000141,0.000416,0.001139,0.002447,0.004744,0.009383,0.020945,0.017383,0.007938,0.004095,0.002042,0.000896,0.000951,0.001864,0.003489,0.005470,0.003280,0.001715,0.000944,0.000498,0.000228,0.000109,0.000199,0.000222,0.000115
  giAltoOh42 ftgen  7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7) , i(gkPS7)  ,1,1,1	,0.006900,0.016262,0.035055,0.083207,0.208846,0.072590,0.041922,0.048400,0.054385,0.018894,0.009431,0.004519,0.001606,0.000377,0.000573,0.000445,0.000153,0.000115,0.000150,0.000151,0.000158,0.000452,0.001488,0.003562,0.007739,0.018995,0.023248,0.009091,0.004149,0.001716,0.000922,0.001977,0.004164,0.006325,0.003036,0.001458,0.000702,0.000287,0.000117,0.000240,0.000232,0.000105
  giAltoOh45 ftgen  8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8) , i(gkPS8)  ,1,1,1	,0.009796,0.025603,0.065926,0.250014,0.090217,0.048269,0.075817,0.034166,0.013762,0.005873,0.001719,0.000494,0.000660,0.000298,0.000114,0.000177,0.000166,0.000192,0.000672,0.002456,0.006469,0.017288,0.029726,0.009883,0.003885,0.001258,0.001818,0.004479,0.007363,0.002986,0.001274,0.000492,0.000134,0.000177,0.000345,0.000157
  giAltoOh48 ftgen  9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9) , i(gkPS9)  ,1,1,1	,0.014156,0.043198,0.156079,0.133513,0.058152,0.098380,0.029278,0.010778,0.003174,0.000545,0.000767,0.000229,0.000206,0.000126,0.000217,0.000289,0.001848,0.006291,0.019985,0.029302,0.008528,0.002573,0.001656,0.004961,0.008168,0.002742,0.000983,0.000252,0.000109,0.000211,0.000387,0.000132
  giAltoOh51 ftgen 10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10), i(gkPS10) ,1,1,1	,0.020980,0.076697,0.341641,0.077953,0.113133,0.029431,0.009144,0.001375,0.000970,0.000338,0.000253,0.000198,0.000284,0.002284,0.009509,0.041987,0.015901,0.004091,0.001908,0.007000,0.006575,0.001893,0.000457,0.000130,0.000219,0.000443,0.000123
  giAltoOh54 ftgen 11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11), i(gkPS11) ,1,1,1	,0.032525,0.166419,0.145169,0.096808,0.037784,0.009041,0.000762,0.000889,0.000227,0.000137,0.000311,0.000902,0.007130,0.038020,0.018180,0.003431,0.003954,0.012653,0.002915,0.000570,0.000161,0.000236,0.000466,0.000102
  giAltoOh57 ftgen 12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12), i(gkPS12) ,1,1,1	,0.051206,0.500042,0.096536,0.068326,0.011745,0.000989,0.000597,0.000354,0.000333,0.001345,0.012944,0.059447,0.007770,0.003639,0.014729,0.002548,0.000268,0.000152,0.000355,0.000315
  giAltoOh60 ftgen 13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13), i(gkPS13) ,1,1,1	,0.086407,0.267040,0.196788,0.021563,0.001095,0.000450,0.000254,0.000578,0.012590,0.058595,0.005142,0.009927,0.005483,0.000502,0.000175,0.000149,0.000775
  giAltoOh63 ftgen 14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14), i(gkPS14) ,1,1,1	,0.153433,0.155941,0.058873,0.002749,0.000677,0.000168,0.000395,0.004570,0.084026,0.008181,0.014008,0.003788,0.000261,0.000109,0.000887
  giAltoOh66 ftgen 15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15), i(gkPS15) ,1,1,1	,0.332841,0.193621,0.018082,0.001777,0.000274,0.000623,0.014262,0.036353,0.007910,0.005829,0.000322,0.000104,0.000472,0.000204
  giAltoOh69 ftgen 16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16), i(gkPS16) ,1,1,1	,1.000000,0.136629,0.001978,0.000708,0.000666,0.025888,0.015536,0.029450,0.000535,0.000119,0.000710,0.000111
  giAltoOh72 ftgen 17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17), i(gkPS17) ,1,1,1	,0.534019,0.043120,0.000901,0.000124,0.025180,0.010281,0.010963,0.000350,0.000297,0.000193
  giAltoOh75 ftgen 18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18), i(gkPS18) ,1,1,1	,0.311907,0.005497,0.000334,0.009143,0.016361,0.007576,0.000139,0.001773
  giAltoOh78 ftgen 19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19), i(gkPS19) ,1,1,1	,0.387236,0.003555,0.001246,0.072704,0.011658,0.000208,0.000409
  giAltoOh81 ftgen 20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20), i(gkPS20) ,1,1,1	,0.273266,0.001417,0.051783,0.058903,0.000238,0.000221
  giAltoOh84 ftgen 21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21), i(gkPS21) ,1,1,1	,0.086239,0.000247,0.020561,0.000699,0.000385
 elseif iVoice==20 then
  giAltoOoh24 ftgen  1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1) , i(gkPS1)  ,1,1,1	,0.006790,0.007793,0.009214,0.011657,0.015318,0.019466,0.030008,0.039968,0.083795,0.111525,0.078922,0.039204,0.030853,0.020835,0.017482,0.014376,0.012615,0.012668,0.013183,0.017897,0.025293,0.022448,0.012428,0.008118,0.005897,0.004389,0.003515,0.002702,0.002132,0.001638,0.001205,0.000879,0.000585,0.000364,0.000202,0.000102,0.000109,0.000138,0.000164,0.000161,0.000150,0.000126,0.000128,0.000187,0.000263,0.000356,0.000471,0.000613,0.000790,0.001010,0.001285,0.001628,0.002033,0.002437,0.002674,0.002567,0.002185,0.001749,0.001375,0.001076,0.000841,0.000653,0.000504,0.000384,0.000287,0.000212,0.000152,0.000108
  giAltoOoh27 ftgen  2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2) , i(gkPS2)  ,1,1,1	,0.008303,0.009791,0.012449,0.017203,0.022681,0.037000,0.060114,0.125058,0.111065,0.049238,0.035746,0.023284,0.018963,0.015616,0.014922,0.015724,0.023589,0.030602,0.019515,0.010173,0.007095,0.005069,0.003809,0.002822,0.002111,0.001470,0.001008,0.000607,0.000336,0.000144,0.000127,0.000167,0.000197,0.000186,0.000164,0.000119,0.000110,0.000180,0.000275,0.000399,0.000559,0.000764,0.001030,0.001376,0.001826,0.002391,0.002958,0.003205,0.002870,0.002255,0.001699,0.001269,0.000946,0.000699,0.000510,0.000363,0.000253,0.000171,0.000113
  giAltoOoh30 ftgen  3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3) , i(gkPS3)  ,1,1,1	,0.010169,0.012589,0.017650,0.024669,0.043280,0.081468,0.157756,0.089091,0.046827,0.028403,0.022088,0.017894,0.018301,0.023035,0.036512,0.022702,0.011378,0.007064,0.005144,0.003564,0.002530,0.001649,0.001018,0.000530,0.000218,0.000148,0.000204,0.000233,0.000212,0.000159,0.000100,0.000185,0.000312,0.000486,0.000722,0.001039,0.001472,0.002066,0.002849,0.003616,0.003709,0.002969,0.002140,0.001514,0.001066,0.000741,0.000504,0.000331,0.000209,0.000128
  giAltoOoh33 ftgen  4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4) , i(gkPS4)  ,1,1,1	,0.012545,0.016792,0.026024,0.045873,0.091044,0.186641,0.074850,0.043441,0.028672,0.021632,0.021853,0.032802,0.039616,0.015496,0.009086,0.006060,0.003944,0.002536,0.001505,0.000730,0.000267,0.000184,0.000267,0.000264,0.000210,0.000125,0.000135,0.000272,0.000482,0.000785,0.001216,0.001840,0.002746,0.003908,0.004522,0.003656,0.002483,0.001644,0.001079,0.000691,0.000424,0.000246,0.000138
  giAltoOoh36 ftgen  5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5) , i(gkPS5)  ,1,1,1	,0.015591,0.023322,0.038944,0.079963,0.223136,0.078440,0.041689,0.028767,0.025351,0.035817,0.044928,0.016249,0.008786,0.005409,0.003279,0.001761,0.000729,0.000205,0.000277,0.000322,0.000253,0.000133,0.000168,0.000376,0.000714,0.001232,0.002029,0.003271,0.004898,0.005161,0.003518,0.002165,0.001315,0.000773,0.000427,0.000218,0.000115
  giAltoOoh39 ftgen  6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6) , i(gkPS6)  ,1,1,1	,0.019557,0.034366,0.073907,0.249826,0.098371,0.046511,0.031196,0.031410,0.061129,0.020319,0.010124,0.005639,0.002938,0.001212,0.000288,0.000334,0.000372,0.000238,0.000103,0.000220,0.000550,0.001116,0.002056,0.003647,0.005908,0.005733,0.003394,0.001890,0.001019,0.000506,0.000227,0.000115
  giAltoOoh42 ftgen  7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7) , i(gkPS7)  ,1,1,1	,0.025184,0.049350,0.163002,0.178182,0.056821,0.035802,0.046106,0.045414,0.014134,0.007132,0.003299,0.001061,0.000296,0.000463,0.000314,0.000107,0.000120,0.000103,0.000103,0.000367,0.000973,0.002088,0.004156,0.007278,0.005975,0.003047,0.001492,0.000668,0.000258,0.000125,0.000108,0.000107
  giAltoOoh45 ftgen  8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8) , i(gkPS8)  ,1,1,1	,0.033583,0.091750,0.373265,0.086876,0.043265,0.065631,0.030991,0.012123,0.005072,0.001461,0.000369,0.000528,0.000250,0.000145,0.000109,0.000271,0.000967,0.002440,0.005510,0.009071,0.004981,0.002164,0.000851,0.000277,0.000138,0.000103,0.000143
  giAltoOoh48 ftgen  9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9) , i(gkPS9)  ,1,1,1	,0.046646,0.159951,0.156876,0.057537,0.071660,0.032501,0.010818,0.003521,0.000411,0.000638,0.000258,0.000149,0.000132,0.000138,0.000328,0.001425,0.004063,0.009814,0.007048,0.002634,0.000855,0.000228,0.000144,0.000107,0.000164
  giAltoOoh51 ftgen 10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10), i(gkPS10) ,1,1,1	,0.068767,0.499897,0.093067,0.062857,0.040662,0.011282,0.002425,0.000668,0.000477,0.000140,0.000137,0.000132,0.000162,0.001101,0.004121,0.011845,0.006803,0.002043,0.000456,0.000183,0.000114,0.000193
  giAltoOoh54 ftgen 11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11), i(gkPS11) ,1,1,1	,0.098701,0.356319,0.071604,0.090809,0.014265,0.002121,0.000932,0.000159,0.000235,0.000129,0.000214,0.001955,0.008318,0.011948,0.002984,0.000517,0.000201,0.000125,0.000215
  giAltoOoh57 ftgen 12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12), i(gkPS12) ,1,1,1	,0.183506,0.173742,0.131280,0.024244,0.002922,0.001057,0.000152,0.000219,0.001935,0.011024,0.009962,0.001703,0.000276,0.000113,0.000181,0.000173
  giAltoOoh60 ftgen 13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13), i(gkPS13) ,1,1,1	,0.319941,0.115082,0.065007,0.007044,0.001288,0.000283,0.000127,0.000673,0.008134,0.014095,0.001709,0.000289,0.000332
  giAltoOoh63 ftgen 14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14), i(gkPS14) ,1,1,1	,1.000001,0.125741,0.022569,0.001337,0.000279,0.000263,0.002205,0.023707,0.004085,0.000367,0.000387
  giAltoOoh66 ftgen 15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15), i(gkPS15) ,1,1,1	,0.712592,0.181596,0.004243,0.000318,0.000259,0.003910,0.023893,0.001033,0.000156,0.000248,0.000124
  giAltoOoh69 ftgen 16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16), i(gkPS16) ,1,1,1	,0.347452,0.048482,0.002113,0.000185,0.003869,0.019916,0.000554,0.000125,0.000363
  giAltoOoh72 ftgen 17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17), i(gkPS17) ,1,1,1	,0.230150,0.014084,0.000566,0.001346,0.028182,0.000579,0.000168,0.000119
  giAltoOoh75 ftgen 18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18), i(gkPS18) ,1,1,1	,0.251504,0.002674,0.000531,0.047427,0.000734,0.000774
  giAltoOoh78 ftgen 19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19), i(gkPS19) ,1,1,1	,0.363188,0.000636,0.007820,0.002067,0.000109,0.000249
  giAltoOoh81 ftgen 20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20), i(gkPS20) ,1,1,1	,0.096965,0.000370,0.039833,0.000247,0.000141
  giAltoOoh84 ftgen 21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21), i(gkPS21) ,1,1,1	,0.028166,0.002692,0.001157,0.000239
 /* SOPRANO */
 elseif iVoice==21 then
  giSopranoAh24 ftgen  1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1) , i(gkPS1)  ,1,1,1	,0.000243,0.000331,0.000420,0.000500,0.000551,0.000561,0.000535,0.000457,0.000407,0.000521,0.000895,0.001468,0.002246,0.003261,0.004498,0.006101,0.008059,0.010521,0.013877,0.018007,0.024724,0.033985,0.051610,0.076040,0.075738,0.052053,0.036243,0.028064,0.022858,0.020510,0.019512,0.020774,0.023901,0.031564,0.037490,0.031794,0.021090,0.015085,0.011109,0.008541,0.006680,0.005201,0.004060,0.003097,0.002311,0.001666,0.001140,0.000733,0.000435,0.000268,0.000244,0.000282,0.000311,0.000312,0.000289,0.000247,0.000195,0.000140,0.000112,0.000165,0.000229,0.000305,0.000401,0.000521,0.000683,0.000907,0.001221,0.001582,0.001659,0.001357,0.001002,0.000751,0.000566,0.000433,0.000328,0.000245,0.000178,0.000123
  giSopranoAh27 ftgen  2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2) , i(gkPS2)  ,1,1,1	,0.000306,0.000437,0.000557,0.000646,0.000669,0.000627,0.000515,0.000518,0.000901,0.001666,0.002762,0.004254,0.006165,0.008737,0.011991,0.016649,0.022748,0.033722,0.050609,0.085620,0.090728,0.057631,0.039541,0.029400,0.025061,0.023243,0.025034,0.030554,0.042366,0.041517,0.026592,0.017689,0.012328,0.009171,0.006810,0.005073,0.003690,0.002597,0.001732,0.001065,0.000592,0.000326,0.000296,0.000351,0.000375,0.000355,0.000301,0.000227,0.000150,0.000102,0.000108,0.000106,0.000176,0.000263,0.000371,0.000511,0.000698,0.000974,0.001379,0.001893,0.001941,0.001448,0.001016,0.000723,0.000525,0.000378,0.000266,0.000177,0.000111,0.000134,0.000234,0.000381,0.000580,0.000844,0.001189,0.001641,0.002250,0.003093,0.004320,0.006062,0.007661
  giSopranoAh30 ftgen  3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3) , i(gkPS3)  ,1,1,1	,0.000390,0.000574,0.000730,0.000796,0.000751,0.000597,0.000704,0.001497,0.002843,0.004841,0.007543,0.011311,0.016537,0.024179,0.037585,0.060986,0.108486,0.093219,0.053086,0.036955,0.029857,0.027640,0.031245,0.043881,0.052110,0.032914,0.020217,0.013324,0.009422,0.006627,0.004584,0.003021,0.001841,0.000997,0.000471,0.000343,0.000417,0.000445,0.000401,0.000308,0.000200,0.000106,0.000107,0.000127,0.000122,0.000173,0.000287,0.000435,0.000637,0.000926,0.001386,0.002094,0.002326,0.001646,0.001087,0.000731,0.000499,0.000330,0.000205,0.000116,0.000177,0.000335,0.000575,0.000913,0.001379,0.002023,0.002940,0.004333,0.006473,0.008929,0.008243,0.005616,0.003765,0.002575,0.001770,0.001205,0.000794,0.000500,0.000293,0.000161
  giSopranoAh33 ftgen  4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4) , i(gkPS4)  ,1,1,1	,0.000506,0.000759,0.000930,0.000920,0.000718,0.000914,0.002228,0.004508,0.007891,0.012923,0.020316,0.031841,0.054837,0.111349,0.120063,0.062505,0.041150,0.033769,0.034811,0.047594,0.062278,0.035528,0.020648,0.013186,0.008671,0.005635,0.003425,0.001850,0.000831,0.000409,0.000484,0.000529,0.000455,0.000312,0.000163,0.000128,0.000152,0.000137,0.000193,0.000356,0.000577,0.000900,0.001436,0.002358,0.002764,0.001789,0.001100,0.000697,0.000432,0.000248,0.000125,0.000200,0.000427,0.000795,0.001343,0.002141,0.003346,0.005301,0.008544,0.010941,0.007840,0.004856,0.003081,0.001971,0.001236,0.000735,0.000401,0.000199,0.000112,0.000101,0.000129,0.000193,0.000281,0.000339,0.000248,0.000156,0.000103
  giSopranoAh36 ftgen  5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5) , i(gkPS5)  ,1,1,1	,0.000663,0.001001,0.001123,0.000915,0.001042,0.002938,0.006525,0.012209,0.021053,0.036037,0.068016,0.152197,0.104196,0.056180,0.041062,0.041595,0.063208,0.063675,0.030215,0.017110,0.010421,0.006205,0.003340,0.001470,0.000537,0.000565,0.000626,0.000496,0.000281,0.000117,0.000145,0.000181,0.000152,0.000138,0.000333,0.000614,0.001047,0.001825,0.003186,0.002732,0.001512,0.000873,0.000495,0.000248,0.000109,0.000106,0.000245,0.000590,0.001185,0.002126,0.003633,0.006253,0.010976,0.012260,0.007210,0.004145,0.002442,0.001401,0.000743,0.000345,0.000154,0.000120,0.000112,0.000142,0.000230,0.000359,0.000380,0.000227,0.000136
  giSopranoAh39 ftgen  6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6) , i(gkPS6)  ,1,1,1	,0.000871,0.001289,0.001252,0.001035,0.003325,0.008494,0.017445,0.033243,0.067334,0.170973,0.115091,0.058712,0.046417,0.061016,0.082910,0.035326,0.018317,0.010133,0.005189,0.002129,0.000651,0.000702,0.000709,0.000454,0.000173,0.000166,0.000215,0.000159,0.000213,0.000526,0.001023,0.001949,0.003788,0.002898,0.001448,0.000757,0.000355,0.000135,0.000106,0.000155,0.000469,0.001164,0.002384,0.004512,0.008666,0.015371,0.010478,0.005371,0.002862,0.001463,0.000658,0.000247,0.000145,0.000134,0.000130,0.000242,0.000414,0.000435,0.000230,0.000129
  giSopranoAh42 ftgen  7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7) , i(gkPS7)  ,1,1,1	,0.001148,0.001591,0.001193,0.002995,0.009688,0.022636,0.048394,0.122093,0.186546,0.073972,0.055348,0.087905,0.065898,0.026687,0.013278,0.006054,0.001998,0.000689,0.000892,0.000619,0.000212,0.000215,0.000244,0.000119,0.000343,0.000873,0.001866,0.004223,0.003315,0.001471,0.000664,0.000232,0.000124,0.000185,0.000679,0.001851,0.004101,0.008791,0.018115,0.011387,0.005227,0.002448,0.001017,0.000329,0.000170,0.000149,0.000119,0.000263,0.000501,0.000460,0.000214,0.000113
  giSopranoAh45 ftgen  8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8) , i(gkPS8)  ,1,1,1	,0.001518,0.001840,0.001829,0.009018,0.025849,0.063699,0.222787,0.125025,0.067561,0.095260,0.071075,0.026387,0.011277,0.003702,0.000818,0.001059,0.000625,0.000181,0.000305,0.000184,0.000153,0.000714,0.001808,0.004736,0.003592,0.001400,0.000498,0.000149,0.000193,0.000861,0.002706,0.006746,0.017233,0.015795,0.006213,0.002495,0.000811,0.000226,0.000191,0.000161,0.000390,0.000688,0.000316,0.000144
  giSopranoAh48 ftgen  9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9) , i(gkPS9)  ,1,1,1	,0.002001,0.001828,0.005878,0.024425,0.072091,0.304494,0.112379,0.083227,0.127363,0.034228,0.012415,0.002941,0.001132,0.000993,0.000234,0.000361,0.000158,0.000116,0.000662,0.002099,0.006388,0.003027,0.000988,0.000219,0.000213,0.001186,0.004269,0.012560,0.024604,0.008321,0.002813,0.000693,0.000241,0.000162,0.000153,0.000462,0.000765,0.000273,0.000112
  giSopranoAh51 ftgen 10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10), i(gkPS10) ,1,1,1	,0.002580,0.002072,0.017002,0.066543,0.342244,0.117509,0.122162,0.070710,0.020284,0.004261,0.001405,0.000907,0.000333,0.000319,0.000105,0.001054,0.003908,0.005806,0.001517,0.000271,0.000310,0.002335,0.009056,0.030843,0.010772,0.002935,0.000495,0.000270,0.000120,0.000486,0.000873,0.000259
  giSopranoAh54 ftgen 11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11), i(gkPS11) ,1,1,1	,0.003183,0.005991,0.045273,0.244218,0.147927,0.175844,0.053372,0.012105,0.001376,0.001237,0.000431,0.000243,0.000165,0.000696,0.003738,0.006635,0.001332,0.000247,0.001360,0.008210,0.036260,0.010453,0.002030,0.000343,0.000153,0.000529,0.000919,0.000227
  giSopranoAh57 ftgen 12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12), i(gkPS12) ,1,1,1	,0.003681,0.018037,0.127409,0.250032,0.190549,0.052769,0.007402,0.002118,0.000363,0.000368,0.000180,0.001429,0.009476,0.002801,0.000297,0.001724,0.013504,0.031591,0.004990,0.000452,0.000189,0.000780,0.000631,0.000132
  giSopranoAh60 ftgen 13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13), i(gkPS13) ,1,1,1	,0.003660,0.048855,0.609099,0.166474,0.068463,0.005879,0.001985,0.000726,0.000219,0.001335,0.012780,0.001982,0.000427,0.008543,0.049218,0.005623,0.000484,0.000309,0.001530,0.000224
  giSopranoAh63 ftgen 14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14), i(gkPS14) ,1,1,1	,0.004145,0.133126,0.235070,0.141452,0.008522,0.001818,0.000636,0.000100,0.007822,0.003035,0.000622,0.018126,0.021549,0.000989,0.000240,0.001747,0.000173
  giSopranoAh66 ftgen 15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15), i(gkPS15) ,1,1,1	,0.011982,0.488465,0.351711,0.024209,0.002473,0.000485,0.001393,0.013267,0.000494,0.016424,0.020902,0.000686,0.001057,0.000454
  giSopranoAh69 ftgen 16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16), i(gkPS16) ,1,1,1	,0.036071,0.499985,0.105518,0.004235,0.000736,0.002858,0.005599,0.003447,0.063157,0.000904,0.001561,0.000264
  giSopranoAh72 ftgen 17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17), i(gkPS17) ,1,1,1	,0.097704,0.332922,0.011754,0.001452,0.002670,0.003963,0.017086,0.011243,0.000618,0.000448
  giSopranoAh75 ftgen 18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18), i(gkPS18) ,1,1,1	,0.266284,0.282922,0.003635,0.000202,0.006066,0.036263,0.001979,0.003494
  giSopranoAh78 ftgen 19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19), i(gkPS19) ,1,1,1	,0.976912,0.048417,0.000970,0.026534,0.032847,0.001372,0.000907
  giSopranoAh81 ftgen 20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20), i(gkPS20) ,1,1,1	,1.000001,0.008470,0.005716,0.006895,0.001809,0.000528
  giSopranoAh84 ftgen 21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21), i(gkPS21) ,1,1,1	,0.665845,0.002904,0.007927,0.022486,0.000897
 elseif iVoice==22 then
  giSopranoEh24 ftgen  1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1) , i(gkPS1)  ,1,1,1	,0.005375,0.006159,0.007497,0.009319,0.012241,0.016007,0.021786,0.031498,0.046972,0.085088,0.095763,0.062094,0.035620,0.026336,0.017966,0.013939,0.010264,0.007721,0.005804,0.004160,0.003000,0.002025,0.001285,0.000766,0.000371,0.000201,0.000222,0.000300,0.000319,0.000316,0.000283,0.000227,0.000174,0.000113,0.000102,0.000163,0.000248,0.000363,0.000507,0.000697,0.000930,0.001233,0.001635,0.002152,0.002976,0.004104,0.006179,0.007906,0.006942,0.004677,0.003337,0.002428,0.001839,0.001407,0.001067,0.000799,0.000561,0.000352,0.000151,0.000282,0.000528,0.000809,0.001145,0.001552,0.002050,0.002702,0.003535,0.004730,0.006447,0.009098,0.012551,0.013076,0.009939,0.006919,0.005067,0.003738,0.002853,0.002164,0.001644,0.001235,0.000905,0.000647,0.000439,0.000277,0.000158
  giSopranoEh27 ftgen  2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2) , i(gkPS2)  ,1,1,1	,0.006525,0.007911,0.010016,0.013570,0.018820,0.027493,0.040827,0.078633,0.116838,0.079159,0.041386,0.027974,0.019129,0.013581,0.009612,0.006849,0.004621,0.003064,0.001847,0.001036,0.000450,0.000231,0.000298,0.000377,0.000380,0.000341,0.000263,0.000186,0.000103,0.000174,0.000289,0.000453,0.000672,0.000967,0.001352,0.001893,0.002630,0.003869,0.005875,0.008999,0.008671,0.005518,0.003725,0.002567,0.001876,0.001352,0.000961,0.000627,0.000335,0.000265,0.000606,0.001006,0.001504,0.002127,0.002953,0.004076,0.005751,0.008319,0.012764,0.016038,0.012717,0.008268,0.005702,0.004030,0.002916,0.002101,0.001501,0.001036,0.000687,0.000418,0.000226,0.000113,0.000126,0.000192,0.000258,0.000326,0.000405,0.000509,0.000644,0.000773,0.000757,0.000593,0.000433,0.000318,0.000237,0.000178,0.000133
  giSopranoEh30 ftgen  3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3) , i(gkPS3)  ,1,1,1	,0.007934,0.010268,0.014014,0.020866,0.031775,0.051069,0.115300,0.124988,0.056004,0.035128,0.022210,0.014648,0.009836,0.006282,0.003915,0.002162,0.001056,0.000377,0.000301,0.000440,0.000452,0.000392,0.000282,0.000165,0.000151,0.000284,0.000497,0.000798,0.001223,0.001822,0.002695,0.004186,0.006781,0.010969,0.009099,0.005272,0.003380,0.002303,0.001560,0.001027,0.000581,0.000179,0.000255,0.000730,0.001308,0.002061,0.003062,0.004509,0.006743,0.010496,0.017164,0.017655,0.010910,0.006960,0.004610,0.003129,0.002119,0.001387,0.000863,0.000480,0.000225,0.000124,0.000196,0.000291,0.000386,0.000499,0.000657,0.000858,0.000920,0.000712,0.000490,0.000340,0.000241,0.000172,0.000121
  giSopranoEh33 ftgen  4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4) , i(gkPS4)  ,1,1,1	,0.009785,0.013551,0.020874,0.032859,0.059208,0.148132,0.120179,0.053098,0.029187,0.018238,0.011338,0.006607,0.003610,0.001666,0.000527,0.000362,0.000533,0.000521,0.000386,0.000227,0.000106,0.000248,0.000500,0.000893,0.001489,0.002395,0.003832,0.006593,0.012423,0.010837,0.005786,0.003451,0.002202,0.001367,0.000718,0.000151,0.000475,0.001206,0.002167,0.003503,0.005548,0.009076,0.015888,0.022570,0.014146,0.008203,0.005068,0.003190,0.001979,0.001150,0.000585,0.000233,0.000166,0.000296,0.000428,0.000584,0.000810,0.001083,0.001004,0.000662,0.000427,0.000283,0.000188,0.000123,0.000110,0.000151,0.000172,0.000144,0.000101
  giSopranoEh36 ftgen  5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5) , i(gkPS5)  ,1,1,1	,0.012322,0.018644,0.032024,0.063018,0.170241,0.124239,0.052696,0.027893,0.015451,0.008324,0.004052,0.001533,0.000402,0.000600,0.000632,0.000454,0.000226,0.000100,0.000205,0.000497,0.001017,0.001865,0.003279,0.005970,0.012399,0.013933,0.006699,0.003693,0.002143,0.001128,0.000303,0.000567,0.001626,0.003121,0.005435,0.009514,0.018307,0.026321,0.013931,0.007528,0.004359,0.002490,0.001304,0.000559,0.000184,0.000297,0.000486,0.000704,0.001040,0.001332,0.000946,0.000559,0.000342,0.000211,0.000126,0.000132,0.000189,0.000199,0.000143
  giSopranoEh39 ftgen  6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6) , i(gkPS6)  ,1,1,1	,0.015802,0.027106,0.054923,0.157076,0.158131,0.055887,0.027131,0.013682,0.006122,0.002071,0.000461,0.000753,0.000682,0.000372,0.000101,0.000111,0.000194,0.000578,0.001344,0.002701,0.005258,0.011744,0.017335,0.007449,0.003752,0.001922,0.000671,0.000529,0.002012,0.004255,0.008157,0.016650,0.032107,0.016554,0.008071,0.004209,0.002076,0.000838,0.000227,0.000384,0.000654,0.001019,0.001550,0.001189,0.000637,0.000357,0.000199,0.000105,0.000142,0.000222,0.000233,0.000149
  giSopranoEh42 ftgen  7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7) , i(gkPS7)  ,1,1,1	,0.020540,0.041742,0.102173,0.250022,0.070268,0.029304,0.012569,0.004326,0.000755,0.000881,0.000785,0.000331,0.000140,0.000302,0.000996,0.002454,0.005411,0.013623,0.018252,0.006779,0.003128,0.001162,0.000516,0.002634,0.006167,0.013587,0.034596,0.021969,0.009288,0.004271,0.001737,0.000452,0.000399,0.000782,0.001331,0.001862,0.000991,0.000488,0.000244,0.000113,0.000153,0.000264,0.000258,0.000143
  giSopranoEh45 ftgen  8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8) , i(gkPS8)  ,1,1,1	,0.027101,0.065718,0.296280,0.106187,0.036474,0.013213,0.003330,0.000725,0.001042,0.000455,0.000159,0.000213,0.001002,0.002983,0.007680,0.024903,0.011593,0.004412,0.001440,0.000954,0.004351,0.011141,0.031928,0.028388,0.010175,0.003972,0.001172,0.000336,0.000864,0.001632,0.002019,0.000860,0.000380,0.000158,0.000105,0.000224,0.000349,0.000206
  giSopranoEh48 ftgen  9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9) , i(gkPS9)  ,1,1,1	,0.037289,0.126049,0.248462,0.055787,0.016649,0.003067,0.001199,0.000908,0.000105,0.000195,0.000408,0.002033,0.006568,0.024837,0.013399,0.004282,0.000601,0.003260,0.010894,0.036706,0.027905,0.008733,0.002613,0.000372,0.000976,0.002088,0.001895,0.000683,0.000249,0.000103,0.000265,0.000399,0.000182
  giSopranoEh51 ftgen 10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10), i(gkPS10) ,1,1,1	,0.054241,0.314339,0.111819,0.027377,0.004143,0.001507,0.000744,0.000202,0.000389,0.002690,0.010531,0.034705,0.007511,0.001342,0.004034,0.016350,0.064332,0.016169,0.004160,0.000455,0.001312,0.003109,0.001277,0.000398,0.000117,0.000282,0.000466,0.000173
  giSopranoEh54 ftgen 11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11), i(gkPS11) ,1,1,1	,0.083485,0.500013,0.058605,0.008650,0.001763,0.000659,0.000290,0.000127,0.001996,0.010824,0.036509,0.006267,0.001028,0.012340,0.069232,0.018578,0.003478,0.000794,0.002663,0.001984,0.000490,0.000121,0.000310,0.000517,0.000148
  giSopranoEh57 ftgen 12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12), i(gkPS12) ,1,1,1	,0.131440,0.212366,0.026425,0.001451,0.000910,0.000318,0.000426,0.005968,0.049821,0.008823,0.001910,0.022293,0.056767,0.007944,0.000675,0.003266,0.001719,0.000315,0.000447,0.000411
  giSopranoEh60 ftgen 13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13), i(gkPS13) ,1,1,1	,0.252130,0.111578,0.006131,0.001816,0.000401,0.000821,0.013137,0.026816,0.001212,0.021797,0.055807,0.005226,0.001951,0.003795,0.000506,0.000104,0.000211,0.000803,0.000143
  giSopranoEh63 ftgen 14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14), i(gkPS14) ,1,1,1	,0.628823,0.054762,0.003015,0.000404,0.000779,0.021073,0.015027,0.008072,0.128717,0.008320,0.002625,0.002555,0.000234,0.000174,0.000934,0.000112
  giSopranoEh66 ftgen 15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15), i(gkPS15) ,1,1,1	,1.000000,0.017299,0.001321,0.000255,0.021650,0.012533,0.024684,0.037149,0.001588,0.003967,0.000242,0.000619,0.000296
  giSopranoEh69 ftgen 16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16), i(gkPS16) ,1,1,1	,0.424682,0.002901,0.000637,0.011935,0.017641,0.044586,0.015886,0.006533,0.000631,0.000895,0.000169
  giSopranoEh72 ftgen 17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17), i(gkPS17) ,1,1,1	,0.223136,0.003631,0.001641,0.053621,0.043595,0.010450,0.007588,0.000208,0.000421,0.000286
  giSopranoEh75 ftgen 18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18), i(gkPS18) ,1,1,1	,0.109531,0.000806,0.042151,0.016149,0.016640,0.005110,0.000133,0.001866
  giSopranoEh78 ftgen 19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19), i(gkPS19) ,1,1,1	,0.034598,0.000509,0.025064,0.074296,0.007935,0.000130,0.000593
  giSopranoEh81 ftgen 20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20), i(gkPS20) ,1,1,1	,0.005801,0.023872,0.089183,0.013066,0.000176,0.000337
  giSopranoEh84 ftgen 21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21), i(gkPS21) ,1,1,1	,0.007260,0.107242,0.020899,0.000417,0.000572
 elseif iVoice==23 then
  giSopranoEee24 ftgen  1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1) , i(gkPS1)  ,1,1,1	,0.010638,0.013301,0.017800,0.022937,0.034070,0.046177,0.082117,0.124931,0.109118,0.060110,0.041165,0.028412,0.021053,0.015886,0.011808,0.008953,0.006545,0.004708,0.003285,0.002126,0.001294,0.000655,0.000252,0.000225,0.000362,0.000444,0.000451,0.000423,0.000354,0.000271,0.000187,0.000100,0.000102,0.000106,0.000127,0.000140,0.000138,0.000125,0.000158,0.000300,0.000501,0.000769,0.001120,0.001555,0.002122,0.002825,0.003721,0.004928,0.006460,0.008829,0.012145,0.017913,0.024865,0.024284,0.017013,0.011692,0.008487,0.006258,0.004772,0.003600,0.002730,0.002031,0.001468,0.001022,0.000652,0.000355,0.000117,0.000141,0.000322,0.000509,0.000701,0.000919,0.001190,0.001528,0.002038,0.002743,0.003904,0.004865,0.004376,0.003081,0.002205,0.001615,0.001216,0.000928,0.000704,0.000533,0.000394,0.000284
  giSopranoEee27 ftgen  2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2) , i(gkPS2)  ,1,1,1	,0.013143,0.017627,0.024484,0.036616,0.054010,0.106371,0.151537,0.098520,0.052871,0.035393,0.024586,0.017401,0.012353,0.008770,0.005907,0.003868,0.002280,0.001215,0.000447,0.000241,0.000427,0.000533,0.000532,0.000465,0.000348,0.000231,0.000110,0.000104,0.000121,0.000112,0.000126,0.000155,0.000168,0.000158,0.000125,0.000106,0.000207,0.000430,0.000749,0.001201,0.001793,0.002594,0.003630,0.005050,0.007012,0.009981,0.014625,0.023409,0.030837,0.024037,0.014956,0.010218,0.007150,0.005156,0.003700,0.002635,0.001801,0.001168,0.000663,0.000277,0.000105,0.000356,0.000621,0.000897,0.001231,0.001659,0.002305,0.003282,0.004967,0.005817,0.004341,0.002841,0.001963,0.001402,0.001015,0.000731,0.000517,0.000352,0.000228,0.000134,0.000126,0.000225,0.000358,0.000534,0.000764,0.001064,0.001470,0.002034,0.002872,0.004116,0.005339
  giSopranoEee30 ftgen  3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3) , i(gkPS3)  ,1,1,1	,0.016328,0.023966,0.035128,0.059257,0.121512,0.177707,0.090670,0.053040,0.031736,0.021506,0.014296,0.009353,0.005850,0.003306,0.001623,0.000515,0.000325,0.000586,0.000639,0.000576,0.000417,0.000250,0.000114,0.000143,0.000131,0.000145,0.000186,0.000199,0.000175,0.000123,0.000211,0.000510,0.000977,0.001671,0.002629,0.003977,0.005882,0.008680,0.013457,0.021730,0.035492,0.029923,0.017181,0.010895,0.007320,0.004922,0.003309,0.002111,0.001243,0.000586,0.000119,0.000355,0.000727,0.001119,0.001622,0.002326,0.003519,0.005702,0.006806,0.004491,0.002815,0.001839,0.001255,0.000850,0.000559,0.000348,0.000196,0.000189,0.000349,0.000574,0.000885,0.001314,0.001924,0.002866,0.004356,0.006214,0.005671,0.003728,0.002462,0.001676,0.001149,0.000782,0.000516,0.000324,0.000187
  giSopranoEee33 ftgen  4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4) , i(gkPS4)  ,1,1,1	,0.020626,0.032969,0.058370,0.115099,0.213096,0.095777,0.052675,0.031539,0.019117,0.011719,0.006681,0.003278,0.001235,0.000319,0.000658,0.000760,0.000651,0.000420,0.000175,0.000135,0.000172,0.000141,0.000168,0.000224,0.000231,0.000176,0.000187,0.000547,0.001202,0.002233,0.003774,0.006037,0.009634,0.016040,0.029029,0.043390,0.025586,0.014544,0.008907,0.005565,0.003428,0.001951,0.000904,0.000184,0.000459,0.000990,0.001589,0.002432,0.003929,0.006894,0.007727,0.004364,0.002585,0.001631,0.001026,0.000621,0.000346,0.000162,0.000243,0.000488,0.000854,0.001385,0.002187,0.003507,0.005798,0.007630,0.005258,0.003185,0.002005,0.001280,0.000803,0.000478,0.000258,0.000123,0.000170,0.000276,0.000437,0.000708,0.000961,0.000685,0.000413,0.000261,0.000170,0.000110
  giSopranoEee36 ftgen  5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5) , i(gkPS5)  ,1,1,1	,0.026610,0.045888,0.092383,0.249950,0.120266,0.056848,0.031787,0.017916,0.009422,0.004255,0.001310,0.000450,0.000889,0.000846,0.000542,0.000201,0.000187,0.000191,0.000120,0.000112,0.000212,0.000280,0.000251,0.000180,0.000602,0.001541,0.003119,0.005667,0.009889,0.017719,0.035957,0.048756,0.023480,0.012570,0.007234,0.004081,0.002055,0.000713,0.000283,0.001024,0.001849,0.003076,0.005523,0.009798,0.006208,0.003254,0.001871,0.001075,0.000573,0.000258,0.000108,0.000344,0.000740,0.001368,0.002373,0.004137,0.007509,0.008478,0.004765,0.002699,0.001585,0.000909,0.000481,0.000219,0.000165,0.000304,0.000524,0.000930,0.001082,0.000610,0.000347,0.000208,0.000124
  giSopranoEee39 ftgen  6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6) , i(gkPS6)  ,1,1,1	,0.035209,0.073147,0.212478,0.196804,0.070708,0.034761,0.017520,0.007728,0.002428,0.000481,0.001065,0.000929,0.000462,0.000208,0.000225,0.000124,0.000181,0.000310,0.000315,0.000211,0.000859,0.002401,0.005185,0.010096,0.019955,0.046808,0.048070,0.020438,0.010314,0.005271,0.002337,0.000554,0.000712,0.001795,0.003321,0.006570,0.011649,0.005690,0.002809,0.001465,0.000706,0.000269,0.000254,0.000717,0.001531,0.002949,0.005763,0.010715,0.006995,0.003499,0.001858,0.000950,0.000424,0.000150,0.000118,0.000278,0.000538,0.001060,0.001234,0.000610,0.000321,0.000174
  giSopranoEee42 ftgen  7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7) , i(gkPS7)  ,1,1,1	,0.047942,0.118546,0.355496,0.106101,0.043023,0.018713,0.006614,0.001030,0.001174,0.001153,0.000500,0.000284,0.000191,0.000193,0.000380,0.000359,0.000423,0.001960,0.005278,0.011817,0.027041,0.071322,0.034504,0.014706,0.006650,0.002498,0.000238,0.001464,0.003270,0.007097,0.013721,0.005674,0.002532,0.001128,0.000397,0.000382,0.001165,0.002666,0.005818,0.012613,0.007557,0.003399,0.001587,0.000656,0.000201,0.000104,0.000255,0.000576,0.001288,0.001283,0.000555,0.000270,0.000125
  giSopranoEee45 ftgen  8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8) , i(gkPS8)  ,1,1,1	,0.065934,0.230214,0.191525,0.063074,0.023438,0.006556,0.000638,0.001521,0.000841,0.000343,0.000179,0.000337,0.000464,0.000376,0.002409,0.007565,0.019312,0.058226,0.051263,0.017853,0.006873,0.001812,0.000923,0.003191,0.007896,0.015518,0.005189,0.002060,0.000693,0.000490,0.001722,0.004412,0.011699,0.010593,0.004042,0.001620,0.000520,0.000134,0.000111,0.000344,0.000887,0.001947,0.000836,0.000344,0.000137
  giSopranoEee48 ftgen  9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9) , i(gkPS9)  ,1,1,1	,0.091783,0.499950,0.113693,0.035833,0.008510,0.000901,0.001693,0.000403,0.000370,0.000237,0.000436,0.000513,0.001200,0.006244,0.019806,0.072046,0.047005,0.014484,0.004113,0.000568,0.003707,0.011075,0.012437,0.003752,0.001151,0.000146,0.000689,0.002748,0.008313,0.017019,0.005417,0.001825,0.000438,0.000148,0.000332,0.001055,0.002175,0.000698,0.000249
  giSopranoEee51 ftgen 10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10), i(gkPS10) ,1,1,1	,0.146370,0.393762,0.069555,0.015463,0.000962,0.001858,0.000450,0.000362,0.000631,0.001719,0.010386,0.039977,0.096231,0.020650,0.004678,0.001429,0.006658,0.023341,0.005628,0.001415,0.001439,0.005919,0.021497,0.007017,0.001904,0.000301,0.000156,0.000237,0.001080,0.002476,0.000648,0.000179
  giSopranoEee54 ftgen 11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11), i(gkPS11) ,1,1,1	,0.237094,0.212185,0.037422,0.002059,0.002305,0.000169,0.000384,0.000744,0.000848,0.010559,0.054094,0.068997,0.013299,0.000476,0.006544,0.027445,0.005064,0.000793,0.000765,0.005332,0.025238,0.006800,0.001313,0.000208,0.000144,0.001157,0.002565,0.000537
  giSopranoEee57 ftgen 12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12), i(gkPS12) ,1,1,1	,0.460456,0.126143,0.013110,0.003041,0.000110,0.000358,0.000928,0.004819,0.038635,0.102507,0.013746,0.001848,0.015801,0.010379,0.001387,0.000981,0.008831,0.021187,0.003241,0.000268,0.000155,0.001775,0.001673,0.000275
  giSopranoEee60 ftgen 13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13), i(gkPS13) ,1,1,1	,0.999999,0.071669,0.001801,0.000804,0.000480,0.001006,0.012498,0.144146,0.028964,0.001138,0.022162,0.007499,0.000284,0.005499,0.034034,0.003651,0.000296,0.000666,0.004356,0.000498
  giSopranoEee63 ftgen 14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14), i(gkPS14) ,1,1,1	,0.787626,0.030929,0.003718,0.000901,0.001263,0.020781,0.192483,0.009358,0.013320,0.011259,0.000185,0.011846,0.014037,0.000603,0.000473,0.004954,0.000357
  giSopranoEee66 ftgen 15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15), i(gkPS15) ,1,1,1	,0.424357,0.004117,0.000335,0.001490,0.021121,0.137972,0.000951,0.054887,0.001585,0.010667,0.013598,0.000416,0.002313,0.001073
  giSopranoEee69 ftgen 16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16), i(gkPS16) ,1,1,1	,0.252260,0.006081,0.000717,0.009639,0.204955,0.003697,0.020753,0.001961,0.042356,0.000535,0.003552,0.000551
  giSopranoEee72 ftgen 17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17), i(gkPS17) ,1,1,1	,0.143330,0.001607,0.002011,0.288307,0.002276,0.014994,0.010998,0.007299,0.001333,0.000996
  giSopranoEee75 ftgen 18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18), i(gkPS18) ,1,1,1	,0.061863,0.001803,0.041574,0.018718,0.022519,0.023699,0.001207,0.009907,0.000135
  giSopranoEee78 ftgen 19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19), i(gkPS19) ,1,1,1	,0.008237,0.002981,0.275939,0.109772,0.021334,0.000832,0.002147
  giSopranoEee81 ftgen 20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20), i(gkPS20) ,1,1,1	,0.012164,0.019280,0.007395,0.003926,0.001069,0.001101
  giSopranoEee84 ftgen 21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21), i(gkPS21) ,1,1,1	,0.003212,0.576616,0.029989,0.014597,0.001991
 elseif iVoice==24 then
  giSopranoOh24 ftgen  1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1) , i(gkPS1)  ,1,1,1	,0.001294,0.001804,0.002559,0.003508,0.004711,0.006268,0.008148,0.010769,0.014119,0.018933,0.026874,0.039039,0.065610,0.075277,0.053501,0.033025,0.024955,0.018554,0.015599,0.013411,0.012721,0.013105,0.015740,0.019623,0.017772,0.011470,0.007689,0.005735,0.004357,0.003493,0.002766,0.002194,0.001717,0.001300,0.000955,0.000665,0.000428,0.000251,0.000137,0.000118,0.000148,0.000173,0.000179,0.000168,0.000147,0.000115,0.000151,0.000226,0.000321,0.000442,0.000592,0.000782,0.001031,0.001351,0.001818,0.002481,0.003526,0.004801,0.004868,0.003637,0.002548,0.001868,0.001383,0.001054,0.000797,0.000601,0.000445,0.000319,0.000220,0.000141
  giSopranoOh27 ftgen  2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2) , i(gkPS2)  ,1,1,1	,0.001630,0.002458,0.003663,0.005211,0.007357,0.010060,0.014075,0.019183,0.029201,0.043953,0.080445,0.085357,0.049683,0.032906,0.022953,0.018492,0.015615,0.015240,0.016916,0.022734,0.021331,0.012592,0.008310,0.005802,0.004428,0.003356,0.002549,0.001886,0.001341,0.000898,0.000544,0.000289,0.000147,0.000155,0.000197,0.000214,0.000201,0.000168,0.000123,0.000175,0.000282,0.000423,0.000611,0.000854,0.001187,0.001639,0.002348,0.003418,0.005238,0.005962,0.004346,0.002871,0.001982,0.001418,0.001020,0.000730,0.000509,0.000340,0.000212,0.000117,0.000123,0.000210,0.000333,0.000498,0.000717,0.001000,0.001380,0.001892,0.002632,0.003685,0.005013,0.005372,0.004237,0.003015
  giSopranoOh30 ftgen  3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3) , i(gkPS3)  ,1,1,1	,0.002079,0.003414,0.005324,0.008081,0.011748,0.017492,0.025815,0.041628,0.082430,0.104259,0.056186,0.035627,0.024387,0.019456,0.018039,0.020232,0.027855,0.021210,0.011299,0.007422,0.005297,0.003812,0.002741,0.001871,0.001197,0.000675,0.000317,0.000162,0.000209,0.000251,0.000242,0.000197,0.000132,0.000107,0.000210,0.000366,0.000584,0.000885,0.001310,0.001924,0.002953,0.004717,0.007057,0.005779,0.003501,0.002256,0.001525,0.001026,0.000681,0.000426,0.000243,0.000117,0.000130,0.000248,0.000426,0.000678,0.001026,0.001509,0.002196,0.003251,0.004858,0.006394,0.005489,0.003690,0.002478,0.001703,0.001172,0.000797,0.000524,0.000327,0.000190,0.000103
  giSopranoOh33 ftgen  4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4) , i(gkPS4)  ,1,1,1	,0.002709,0.004852,0.008035,0.012747,0.020371,0.032964,0.058669,0.125001,0.083706,0.044369,0.028467,0.022150,0.021874,0.030653,0.027728,0.013291,0.008093,0.005517,0.003734,0.002427,0.001444,0.000721,0.000277,0.000215,0.000292,0.000291,0.000227,0.000134,0.000161,0.000338,0.000610,0.001012,0.001614,0.002559,0.004309,0.007707,0.007414,0.004128,0.002461,0.001551,0.000965,0.000565,0.000295,0.000120,0.000108,0.000252,0.000490,0.000850,0.001378,0.002169,0.003420,0.005508,0.007680,0.005998,0.003714,0.002344,0.001506,0.000954,0.000577,0.000322,0.000161,0.000107,0.000158,0.000239,0.000301,0.000222,0.000137
  giSopranoOh36 ftgen  5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5) , i(gkPS5)  ,1,1,1	,0.003609,0.007017,0.012541,0.021545,0.037880,0.078111,0.150624,0.066083,0.037128,0.026838,0.026228,0.039276,0.022960,0.011480,0.006993,0.004394,0.002604,0.001332,0.000502,0.000236,0.000346,0.000337,0.000231,0.000102,0.000101,0.000192,0.000455,0.000888,0.001572,0.002718,0.004992,0.009663,0.007323,0.003762,0.002124,0.001211,0.000642,0.000285,0.000266,0.000594,0.001132,0.001982,0.003379,0.005927,0.009151,0.006623,0.003751,0.002204,0.001292,0.000718,0.000358,0.000154,0.000119,0.000190,0.000308,0.000340,0.000202,0.000117
  giSopranoOh39 ftgen  6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6) , i(gkPS6)  ,1,1,1	,0.004909,0.010405,0.020089,0.038305,0.087774,0.170455,0.065711,0.036928,0.030431,0.045396,0.025146,0.011587,0.006704,0.003768,0.001793,0.000577,0.000309,0.000427,0.000337,0.000152,0.000119,0.000109,0.000199,0.000563,0.001223,0.002376,0.004699,0.010486,0.008702,0.003969,0.002043,0.001020,0.000424,0.000103,0.000125,0.000420,0.000997,0.002005,0.003793,0.007390,0.010776,0.006049,0.003151,0.001678,0.000839,0.000359,0.000132,0.000102,0.000113,0.000198,0.000355,0.000391,0.000203,0.000109
  giSopranoOh42 ftgen  7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7) , i(gkPS7)  ,1,1,1	,0.006830,0.016166,0.034995,0.083292,0.208584,0.071275,0.038932,0.040498,0.042444,0.014854,0.007630,0.003744,0.001348,0.000320,0.000504,0.000396,0.000138,0.000106,0.000146,0.000215,0.000737,0.001782,0.003877,0.009510,0.011639,0.004546,0.002069,0.000859,0.000236,0.000109,0.000501,0.001372,0.003057,0.006592,0.012961,0.007475,0.003451,0.001615,0.000663,0.000208,0.000120,0.000112,0.000108,0.000215,0.000428,0.000411,0.000185
  giSopranoOh45 ftgen  8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8) , i(gkPS8)  ,1,1,1	,0.009704,0.025493,0.065932,0.250014,0.088732,0.044302,0.061324,0.026584,0.011036,0.004855,0.001443,0.000431,0.000582,0.000267,0.000105,0.000172,0.000323,0.001223,0.003240,0.008657,0.014882,0.004940,0.001937,0.000593,0.000507,0.001712,0.004370,0.011103,0.012077,0.004722,0.001922,0.000649,0.000167,0.000146,0.000143,0.000321,0.000611,0.000278,0.000117
  giSopranoOh48 ftgen  9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9) , i(gkPS9)  ,1,1,1	,0.014035,0.043095,0.156256,0.132167,0.053681,0.078574,0.022962,0.008787,0.002659,0.000470,0.000678,0.000207,0.000194,0.000136,0.000137,0.000913,0.003151,0.010006,0.014670,0.004259,0.001289,0.000160,0.000534,0.002274,0.006787,0.018371,0.007525,0.002591,0.000717,0.000172,0.000153,0.000144,0.000382,0.000684,0.000234
  giSopranoOh51 ftgen 10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10), i(gkPS10) ,1,1,1	,0.020824,0.076663,0.341102,0.073904,0.090867,0.023190,0.007540,0.001155,0.000855,0.000304,0.000238,0.000105,0.000141,0.001129,0.004763,0.021021,0.007952,0.002044,0.000206,0.000843,0.004024,0.014832,0.012128,0.003366,0.000720,0.000204,0.000117,0.000109,0.000398,0.000782,0.000218
  giSopranoOh54 ftgen 11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11), i(gkPS11) ,1,1,1	,0.032333,0.166589,0.142539,0.081002,0.029705,0.007490,0.000649,0.000790,0.000209,0.000157,0.000135,0.000430,0.003567,0.019036,0.009090,0.001717,0.000218,0.002747,0.013196,0.014956,0.003234,0.000418,0.000224,0.000433,0.000823,0.000182
  giSopranoOh57 ftgen 12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12), i(gkPS12) ,1,1,1	,0.050988,0.500042,0.088602,0.053164,0.009710,0.000862,0.000535,0.000344,0.000132,0.000646,0.006483,0.029761,0.003875,0.000144,0.003426,0.022224,0.009445,0.001297,0.000291,0.000642,0.000556
  giSopranoOh60 ftgen 13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13), i(gkPS13) ,1,1,1	,0.086202,0.264349,0.157171,0.017580,0.000946,0.000407,0.000273,0.000276,0.006305,0.029333,0.002574,0.001071,0.013581,0.015055,0.001438,0.000307,0.000288,0.001369,0.000173
  giSopranoOh63 ftgen 14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14), i(gkPS14) ,1,1,1	,0.153365,0.147839,0.046389,0.002309,0.000608,0.000209,0.000135,0.002259,0.042068,0.004087,0.001687,0.029687,0.006733,0.000409,0.000218,0.001565,0.000131
  giSopranoOh66 ftgen 15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15), i(gkPS15) ,1,1,1	,0.333182,0.162007,0.014981,0.001580,0.000313,0.000270,0.007135,0.018178,0.000437,0.026398,0.006466,0.000447,0.000865,0.000364
  giSopranoOh69 ftgen 16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16), i(gkPS16) ,1,1,1	,0.999999,0.106309,0.001723,0.000687,0.000264,0.012966,0.007747,0.006853,0.018884,0.000582,0.001285,0.000199
  giSopranoOh72 ftgen 17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17), i(gkPS17) ,1,1,1	,0.528638,0.035156,0.000814,0.000113,0.012612,0.005146,0.027163,0.002875,0.000576,0.000345
  giSopranoOh75 ftgen 18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18), i(gkPS18) ,1,1,1	,0.295700,0.004617,0.000416,0.004518,0.008174,0.059391,0.000819,0.003130
  giSopranoOh78 ftgen 19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19), i(gkPS19) ,1,1,1	,0.324009,0.003159,0.000539,0.036354,0.052795,0.000895,0.000729
  giSopranoOh81 ftgen 20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20), i(gkPS20) ,1,1,1	,0.212624,0.001375,0.025936,0.013708,0.001164,0.000397
  giSopranoOh84 ftgen 21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21), i(gkPS21) ,1,1,1	,0.070310,0.000226,0.010293,0.005749,0.000690
 elseif iVoice==25 then
  giSopranoOoh24 ftgen  1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1) , i(gkPS1)  ,1,1,1	,0.006736,0.007744,0.009173,0.011625,0.015301,0.019467,0.030031,0.040022,0.083847,0.111438,0.078627,0.038797,0.030293,0.020098,0.016517,0.013075,0.010944,0.010263,0.009904,0.012389,0.016364,0.013953,0.007558,0.004976,0.003673,0.002791,0.002294,0.001798,0.001446,0.001130,0.000839,0.000619,0.000412,0.000255,0.000142,0.000113,0.000132,0.000128,0.000119,0.000126,0.000173,0.000228,0.000299,0.000385,0.000495,0.000633,0.000806,0.001004,0.001164,0.001174,0.001025,0.000827,0.000650,0.000509,0.000398,0.000310,0.000240,0.000183,0.000137
  giSopranoOoh27 ftgen  2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2) , i(gkPS2)  ,1,1,1	,0.008240,0.009736,0.012406,0.017177,0.022681,0.037033,0.060187,0.125058,0.110778,0.048765,0.035061,0.022345,0.017647,0.013782,0.012248,0.011790,0.016043,0.019429,0.011945,0.006214,0.004417,0.003235,0.002505,0.001898,0.001450,0.001023,0.000710,0.000427,0.000235,0.000103,0.000106,0.000137,0.000159,0.000148,0.000130,0.000131,0.000191,0.000267,0.000368,0.000496,0.000668,0.000893,0.001169,0.001399,0.001375,0.001123,0.000853,0.000637,0.000476,0.000354,0.000259,0.000186,0.000129,0.000104,0.000147,0.000202,0.000272,0.000362,0.000479,0.000623,0.000759,0.000789,0.000681,0.000530
  giSopranoOoh30 ftgen  3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3) , i(gkPS3)  ,1,1,1	,0.010095,0.012529,0.017608,0.024663,0.043315,0.081558,0.157661,0.088611,0.046106,0.027324,0.020478,0.015548,0.014372,0.016229,0.023376,0.013886,0.006978,0.004439,0.003346,0.002384,0.001737,0.001149,0.000718,0.000372,0.000154,0.000123,0.000167,0.000187,0.000168,0.000125,0.000135,0.000212,0.000319,0.000466,0.000663,0.000940,0.001310,0.001651,0.001590,0.001211,0.000862,0.000610,0.000429,0.000296,0.000198,0.000125,0.000140,0.000209,0.000299,0.000421,0.000586,0.000792,0.000937,0.000852,0.000643,0.000461,0.000327,0.000231,0.000160,0.000107
  giSopranoOoh33 ftgen  4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4) , i(gkPS4)  ,1,1,1	,0.012459,0.016728,0.025997,0.045900,0.091150,0.186461,0.074200,0.042360,0.026982,0.018939,0.017010,0.022371,0.024731,0.009432,0.005684,0.003945,0.002654,0.001756,0.001058,0.000513,0.000188,0.000154,0.000216,0.000210,0.000166,0.000171,0.000292,0.000464,0.000712,0.001081,0.001602,0.002011,0.001703,0.001162,0.000770,0.000507,0.000326,0.000198,0.000111,0.000102,0.000176,0.000278,0.000423,0.000631,0.000914,0.001124,0.000963,0.000669,0.000448,0.000297,0.000192,0.000119,0.000112
  giSopranoOoh36 ftgen  5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5) , i(gkPS5)  ,1,1,1	,0.015493,0.023256,0.038946,0.080072,0.222961,0.077625,0.040215,0.026163,0.020537,0.024794,0.027925,0.009959,0.005586,0.003599,0.002262,0.001239,0.000511,0.000154,0.000227,0.000257,0.000200,0.000105,0.000183,0.000348,0.000602,0.000995,0.001621,0.002342,0.002063,0.001309,0.000802,0.000483,0.000275,0.000140,0.000124,0.000233,0.000396,0.000642,0.001014,0.001340,0.001090,0.000692,0.000426,0.000257,0.000148,0.000123,0.000130
  giSopranoOoh39 ftgen  6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6) , i(gkPS6)  ,1,1,1	,0.019447,0.034315,0.073971,0.249826,0.097427,0.044636,0.027534,0.023553,0.038811,0.012411,0.006462,0.003791,0.002045,0.000853,0.000206,0.000273,0.000295,0.000187,0.000173,0.000381,0.000736,0.001334,0.002335,0.002747,0.001704,0.000952,0.000519,0.000258,0.000107,0.000208,0.000405,0.000725,0.001247,0.001582,0.001061,0.000602,0.000333,0.000173,0.000145,0.000152
  giSopranoOoh42 ftgen  7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7) , i(gkPS7)  ,1,1,1	,0.025063,0.049337,0.163181,0.177222,0.054661,0.031107,0.032482,0.027778,0.008882,0.004771,0.002299,0.000744,0.000246,0.000371,0.000246,0.000109,0.000162,0.000428,0.000938,0.001893,0.003326,0.002439,0.001229,0.000596,0.000251,0.000103,0.000284,0.000607,0.001190,0.001900,0.001302,0.000662,0.000323,0.000141,0.000101,0.000172,0.000168
  giSopranoOoh45 ftgen  8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8) , i(gkPS8)  ,1,1,1	,0.033454,0.091804,0.372905,0.084714,0.037879,0.044758,0.018864,0.007892,0.003513,0.001026,0.000308,0.000420,0.000196,0.000129,0.000187,0.000586,0.001429,0.003217,0.003417,0.001546,0.000653,0.000221,0.000103,0.000354,0.000853,0.001843,0.001938,0.000899,0.000386,0.000141,0.000147,0.000226,0.000135
  giSopranoOoh48 ftgen  9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9) , i(gkPS9)  ,1,1,1	,0.046516,0.160169,0.155245,0.052329,0.049605,0.019920,0.007198,0.002478,0.000308,0.000509,0.000201,0.000135,0.000127,0.000370,0.001207,0.003248,0.004134,0.001606,0.000550,0.000125,0.000106,0.000468,0.001290,0.002692,0.001390,0.000516,0.000158,0.000174,0.000259,0.000118
  giSopranoOoh51 ftgen 10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10), i(gkPS10) ,1,1,1	,0.068664,0.499897,0.089313,0.047133,0.024836,0.007586,0.001706,0.000547,0.000375,0.000132,0.000136,0.000347,0.001476,0.004681,0.003416,0.001040,0.000214,0.000172,0.000813,0.002504,0.002129,0.000667,0.000162,0.000186,0.000304,0.000115
  giSopranoOoh54 ftgen 11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11), i(gkPS11) ,1,1,1	,0.098674,0.354398,0.062213,0.055545,0.009543,0.001487,0.000749,0.000134,0.000212,0.000123,0.000856,0.003788,0.004876,0.001194,0.000166,0.000569,0.002379,0.002608,0.000649,0.000109,0.000205,0.000338
  giSopranoOoh57 ftgen 12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12), i(gkPS12) ,1,1,1	,0.183614,0.169417,0.089526,0.015785,0.002053,0.000839,0.000154,0.000122,0.000129,0.001172,0.006436,0.003091,0.000442,0.000113,0.000708,0.003688,0.001800,0.000283,0.000294,0.000271
  giSopranoOoh60 ftgen 13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13), i(gkPS13) ,1,1,1	,0.320378,0.104663,0.039843,0.004956,0.001029,0.000257,0.000735,0.006501,0.003212,0.000252,0.000215,0.002579,0.002779,0.000315,0.000143,0.000522
  giSopranoOoh63 ftgen 14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14), i(gkPS14) ,1,1,1	,1.000001,0.094284,0.015175,0.001094,0.000262,0.000162,0.002953,0.006834,0.000428,0.000345,0.005011,0.001335,0.000107,0.000114,0.000609
  giSopranoOoh66 ftgen 15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15), i(gkPS15) ,1,1,1	,0.708750,0.111076,0.002977,0.000267,0.000246,0.007577,0.002388,0.000170,0.004759,0.001298,0.000408,0.000196
  giSopranoOoh69 ftgen 16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16), i(gkPS16) ,1,1,1	,0.338803,0.031564,0.001678,0.000244,0.000258,0.012872,0.000885,0.001416,0.003598,0.000134,0.000588,0.000112
  giSopranoOoh72 ftgen 17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17), i(gkPS17) ,1,1,1	,0.209313,0.009909,0.000515,0.000104,0.013000,0.000503,0.005157,0.000630,0.000287,0.000189
  giSopranoOoh75 ftgen 18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18), i(gkPS18) ,1,1,1	,0.188584,0.002188,0.000154,0.005909,0.000855,0.010025,0.000214,0.001217
  giSopranoOoh78 ftgen 19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19), i(gkPS19) ,1,1,1	,0.222149,0.000533,0.000493,0.004776,0.009517,0.000194,0.000393
  giSopranoOoh81 ftgen 20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20), i(gkPS20) ,1,1,1	,0.063129,0.000488,0.025748,0.002834,0.000268,0.000223
  giSopranoOoh84 ftgen 21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21), i(gkPS21) ,1,1,1	,0.019817,0.000207,0.001007,0.001261,0.000379
 elseif iVoice==26 then
  giMixedAh24 ftgen  1,0,giTabLen,"padsynth",cpsmidinn(24), i(gkBW1)  , i(gkPS1)  ,1,1,1	,0.000412,0.000370,0.000337,0.000371,0.000555,0.000859,0.001305,0.001896,0.002601,0.003585,0.004729,0.006226,0.008387,0.010759,0.015604,0.021153,0.036276,0.057553,0.053066,0.030189,0.020360,0.014722,0.011349,0.009414,0.008036,0.007520,0.007518,0.008204,0.010188,0.013445,0.021468,0.024378,0.017218,0.010300,0.007574,0.005320,0.004125,0.003105,0.002351,0.001777,0.001280,0.000908,0.000603,0.000362,0.000194,0.000113,0.000107,0.000165,0.000269,0.000410,0.000591,0.000829,0.001124,0.001497,0.001964,0.002540,0.003281,0.004214,0.005465,0.007172,0.009487,0.012221,0.012290,0.008928,0.005554,0.004575,0.006297,0.009642,0.012002,0.011210,0.008864,0.007021,0.005649,0.004715,0.004092,0.003711,0.003540,0.003269,0.002720,0.002116,0.001696,0.001392,0.001163,0.000978,0.000817,0.000679,0.000554,0.000445,0.000349,0.000267,0.000201,0.000148,0.000112
  giMixedAh27 ftgen  2,0,giTabLen,"padsynth",cpsmidinn(27), i(gkBW2)  , i(gkPS2)  ,1,1,1	,0.000484,0.000423,0.000410,0.000587,0.001000,0.001640,0.002515,0.003647,0.005207,0.007188,0.010221,0.013861,0.021835,0.034169,0.065821,0.062536,0.031595,0.021762,0.014578,0.011706,0.009599,0.008934,0.009048,0.011008,0.014402,0.024811,0.028584,0.017346,0.010562,0.007037,0.005089,0.003642,0.002621,0.001845,0.001237,0.000781,0.000431,0.000198,0.000132,0.000128,0.000107,0.000154,0.000279,0.000469,0.000726,0.001077,0.001533,0.002136,0.002909,0.003944,0.005309,0.007297,0.010064,0.014010,0.014733,0.009883,0.005835,0.006234,0.010391,0.014244,0.013109,0.009848,0.007528,0.005944,0.004974,0.004420,0.004181,0.003659,0.002784,0.002107,0.001664,0.001346,0.001093,0.000881,0.000697,0.000538,0.000403,0.000292,0.000206,0.000145,0.000112
  giMixedAh30 ftgen  3,0,giTabLen,"padsynth",cpsmidinn(30), i(gkBW3)  , i(gkPS3)  ,1,1,1	,0.000560,0.000482,0.000562,0.001054,0.001899,0.003144,0.004913,0.007274,0.010934,0.015824,0.026652,0.050310,0.084386,0.048694,0.027304,0.017198,0.013209,0.010896,0.010619,0.012323,0.016925,0.031534,0.030303,0.014903,0.009410,0.006192,0.004171,0.002825,0.001804,0.001089,0.000559,0.000223,0.000135,0.000159,0.000132,0.000111,0.000205,0.000408,0.000717,0.001165,0.001784,0.002644,0.003807,0.005452,0.007846,0.011507,0.016933,0.016329,0.008970,0.006585,0.011345,0.016921,0.014673,0.010437,0.007690,0.006096,0.005243,0.004888,0.003982,0.002810,0.002096,0.001620,0.001264,0.000975,0.000730,0.000526,0.000361,0.000238,0.000159,0.000123,0.000113,0.000108
  giMixedAh33 ftgen  4,0,giTabLen,"padsynth",cpsmidinn(33), i(gkBW4)  , i(gkPS4)  ,1,1,1	,0.000645,0.000569,0.000955,0.001964,0.003652,0.006202,0.009824,0.015928,0.027700,0.054004,0.099838,0.045530,0.026122,0.017357,0.013212,0.012640,0.015734,0.025801,0.041244,0.020359,0.011360,0.006947,0.004321,0.002669,0.001503,0.000708,0.000231,0.000110,0.000186,0.000170,0.000130,0.000254,0.000564,0.001062,0.001820,0.002933,0.004538,0.006945,0.010838,0.017334,0.020883,0.011091,0.008199,0.016262,0.019876,0.013707,0.009453,0.007159,0.006126,0.005456,0.003786,0.002617,0.001920,0.001428,0.001039,0.000721,0.000469,0.000288,0.000180,0.000140,0.000132,0.000122,0.000102
  giMixedAh36 ftgen  5,0,giTabLen,"padsynth",cpsmidinn(36), i(gkBW5)  , i(gkPS5)  ,1,1,1	,0.001076,0.000760,0.001152,0.002918,0.006013,0.010963,0.018910,0.033003,0.065564,0.123397,0.061570,0.034546,0.024544,0.022364,0.028096,0.049779,0.048235,0.023028,0.012783,0.007477,0.004231,0.002147,0.000887,0.000349,0.000355,0.000327,0.000195,0.000152,0.000288,0.000361,0.000371,0.000539,0.001217,0.002491,0.004498,0.007542,0.012318,0.020674,0.035880,0.035208,0.020677,0.019986,0.031450,0.029001,0.018014,0.012074,0.009087,0.007807,0.005927,0.003587,0.002503,0.001834,0.001291,0.000830,0.000470,0.000249,0.000194,0.000200,0.000178,0.000130
  giMixedAh39 ftgen  6,0,giTabLen,"padsynth",cpsmidinn(39), i(gkBW6)  , i(gkPS6)  ,1,1,1	,0.001221,0.000884,0.002403,0.006103,0.012641,0.024258,0.049147,0.124843,0.094249,0.043351,0.028599,0.027085,0.040952,0.068353,0.030182,0.014975,0.007910,0.003883,0.001548,0.000473,0.000421,0.000370,0.000161,0.000304,0.000426,0.000443,0.000809,0.002086,0.004462,0.008387,0.015033,0.028032,0.047931,0.029239,0.022629,0.037393,0.031509,0.018127,0.012012,0.009537,0.007224,0.004034,0.002693,0.001836,0.001138,0.000598,0.000284,0.000232,0.000231,0.000177,0.000105
  giMixedAh42 ftgen  7,0,giTabLen,"padsynth",cpsmidinn(42), i(gkBW7)  , i(gkPS7)  ,1,1,1	,0.001347,0.001378,0.005009,0.012714,0.027848,0.064949,0.174667,0.072154,0.037557,0.031873,0.051698,0.069662,0.025483,0.011788,0.005236,0.001791,0.000485,0.000510,0.000306,0.000357,0.000517,0.000580,0.001645,0.004407,0.009531,0.019083,0.040846,0.049561,0.026461,0.041849,0.036370,0.019264,0.012655,0.010146,0.005280,0.003211,0.002020,0.001088,0.000460,0.000274,0.000277,0.000199,0.000106,0.000102
  giMixedAh45 ftgen  8,0,giTabLen,"padsynth",cpsmidinn(45), i(gkBW8)  , i(gkPS8)  ,1,1,1	,0.001435,0.002814,0.010404,0.027304,0.073592,0.204283,0.065680,0.038086,0.049867,0.090768,0.028199,0.011415,0.004006,0.000835,0.000609,0.000353,0.000145,0.000530,0.000623,0.001521,0.005124,0.012704,0.029322,0.067515,0.034280,0.047183,0.040088,0.019737,0.013502,0.007873,0.004048,0.002335,0.001073,0.000384,0.000337,0.000259,0.000126,0.000121,0.000110
  giMixedAh48 ftgen  9,0,giTabLen,"padsynth",cpsmidinn(48), i(gkBW9)  , i(gkPS9)  ,1,1,1	,0.001665,0.005802,0.022639,0.067838,0.277959,0.082343,0.043643,0.072542,0.079439,0.023326,0.007411,0.001524,0.000914,0.000509,0.000186,0.000132,0.000538,0.002041,0.005636,0.014527,0.006699,0.012109,0.005270,0.003013,0.001652,0.000778,0.000392,0.000133
  giMixedAh51 ftgen 10,0,giTabLen,"padsynth",cpsmidinn(51), i(gkBW10) , i(gkPS10) ,1,1,1	,0.001879,0.012367,0.050272,0.249889,0.104596,0.051557,0.135917,0.047385,0.012730,0.002203,0.001070,0.000444,0.000205,0.000486,0.002508,0.008455,0.012808,0.011617,0.007544,0.003612,0.001661,0.000745,0.000277
  giMixedAh54 ftgen 11,0,giTabLen,"padsynth",cpsmidinn(54), i(gkBW11) , i(gkPS11) ,1,1,1	,0.002739,0.026042,0.133355,0.175744,0.061363,0.185512,0.036813,0.006813,0.001283,0.000619,0.000238,0.000104,0.001374,0.006525,0.018731,0.014280,0.007212,0.003761,0.001187,0.000430,0.000106
  giMixedAh57 ftgen 12,0,giTabLen,"padsynth",cpsmidinn(57), i(gkBW12) , i(gkPS12) ,1,1,1	,0.005498,0.056620,0.471547,0.079386,0.210272,0.035484,0.003858,0.001328,0.000308,0.000117,0.001906,0.011522,0.011745,0.013323,0.004796,0.001380,0.000371,0.000133
  giMixedAh60 ftgen 13,0,giTabLen,"padsynth",cpsmidinn(60), i(gkBW13) , i(gkPS13) ,1,1,1	,0.002967,0.046107,0.824869,0.198093,0.082301,0.006142,0.001955,0.000496,0.001429,0.017146,0.037895,0.004766,0.005960,0.003267,0.000407,0.000157,0.000155,0.000519
  giMixedAh63 ftgen 14,0,giTabLen,"padsynth",cpsmidinn(63), i(gkBW14) , i(gkPS14) ,1,1,1	,0.002677,0.127443,0.233422,0.181784,0.009013,0.001717,0.000284,0.007015,0.064115,0.007331,0.007952,0.002405,0.000267,0.000125,0.000600
  giMixedAh66 ftgen 15,0,giTabLen,"padsynth",cpsmidinn(66), i(gkBW15) , i(gkPS15) ,1,1,1	,0.010553,0.479368,0.511917,0.027219,0.002374,0.000432,0.019753,0.029194,0.005598,0.003593,0.000314,0.000115,0.000440,0.000188
  giMixedAh69 ftgen 16,0,giTabLen,"padsynth",cpsmidinn(69), i(gkBW16) , i(gkPS16) ,1,1,1	,0.033509,0.499985,0.127000,0.004247,0.000403,0.034562,0.013610,0.013599,0.000498,0.000136,0.000625,0.000114
  giMixedAh72 ftgen 17,0,giTabLen,"padsynth",cpsmidinn(72), i(gkBW17) , i(gkPS17) ,1,1,1	,0.097704,0.332922,0.011754,0.001452,0.002670,0.003963,0.017086,0.011243,0.000618,0.000448
  giMixedAh75 ftgen 18,0,giTabLen,"padsynth",cpsmidinn(75), i(gkBW18) , i(gkPS18) ,1,1,1	,0.266284,0.282922,0.003635,0.000202,0.006066,0.036263,0.001979,0.003494
  giMixedAh78 ftgen 19,0,giTabLen,"padsynth",cpsmidinn(78), i(gkBW19) , i(gkPS19) ,1,1,1	,0.976912,0.048417,0.000970,0.026534,0.032847,0.001372,0.000907
  giMixedAh81 ftgen 20,0,giTabLen,"padsynth",cpsmidinn(81), i(gkBW20) , i(gkPS20) ,1,1,1	,1.000001,0.008470,0.005716,0.006895,0.001809,0.000528
  giMixedAh84 ftgen 21,0,giTabLen,"padsynth",cpsmidinn(84), i(gkBW21) , i(gkPS21) ,1,1,1	,0.665845,0.002904,0.007927,0.022486,0.000897
 elseif iVoice==27 then
  giMixedEh24 ftgen  1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1) , i(gkPS1)  ,1,1,1	,0.002549,0.003134,0.003974,0.005478,0.007017,0.009323,0.012997,0.015800,0.025880,0.031561,0.069262,0.116966,0.096839,0.041388,0.030133,0.019258,0.014690,0.010922,0.008058,0.006191,0.004473,0.003237,0.002267,0.001451,0.000894,0.000442,0.000126,0.000210,0.000263,0.000265,0.000240,0.000174,0.000100,0.000185,0.000338,0.000545,0.000796,0.001110,0.001516,0.002015,0.002652,0.003519,0.004603,0.006308,0.008742,0.013114,0.019649,0.020048,0.013747,0.009105,0.006633,0.004842,0.003722,0.002793,0.002088,0.001484,0.000943,0.000453,0.000147,0.000600,0.001155,0.001779,0.002508,0.003367,0.004414,0.005764,0.007472,0.010017,0.013566,0.019406,0.025684,0.025076,0.018739,0.013927,0.011049,0.009282,0.008375,0.008024,0.008229,0.009065,0.010646,0.013251,0.016228,0.016401,0.013297,0.010080,0.008006,0.006682,0.006049,0.005955,0.006476,0.007437,0.007523,0.006180,0.004613,0.003551,0.002779,0.002235
  giMixedEh27 ftgen  2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2) , i(gkPS2)  ,1,1,1	,0.003129,0.004092,0.005657,0.007860,0.010921,0.016087,0.021139,0.035868,0.062023,0.136227,0.109956,0.040456,0.031049,0.018374,0.013762,0.009515,0.006960,0.004597,0.003159,0.001921,0.001079,0.000444,0.000177,0.000312,0.000316,0.000280,0.000177,0.000171,0.000376,0.000664,0.001031,0.001514,0.002167,0.002999,0.004195,0.005777,0.008581,0.012777,0.021830,0.024145,0.015340,0.009845,0.006641,0.004815,0.003434,0.002428,0.001585,0.000853,0.000201,0.000618,0.001398,0.002299,0.003391,0.004727,0.006500,0.008859,0.012573,0.018214,0.027784,0.031145,0.022997,0.016195,0.012414,0.010478,0.009647,0.009763,0.010916,0.013349,0.017534,0.020106,0.016727,0.012049,0.009207,0.007617,0.007098,0.007517,0.008848,0.008867,0.006730,0.004810,0.003566,0.002737,0.002122,0.001644,0.001252,0.000929,0.000662,0.000447,0.000285,0.000180,0.000139,0.000140,0.000147,0.000144,0.000130,0.000107
  giMixedEh30 ftgen  3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3) , i(gkPS3)  ,1,1,1	,0.003867,0.005384,0.008278,0.011948,0.018781,0.027378,0.043927,0.124923,0.154756,0.052079,0.035175,0.020879,0.013635,0.009198,0.005837,0.003709,0.002010,0.000982,0.000220,0.000161,0.000370,0.000376,0.000299,0.000147,0.000155,0.000424,0.000832,0.001379,0.002152,0.003202,0.004758,0.006982,0.011177,0.019325,0.029701,0.020304,0.011682,0.007361,0.005041,0.003356,0.002114,0.001056,0.000187,0.001017,0.002186,0.003609,0.005412,0.007905,0.011471,0.017562,0.028740,0.037414,0.026954,0.018054,0.013544,0.011691,0.011440,0.012869,0.016457,0.022485,0.022347,0.015528,0.011112,0.008894,0.008412,0.009625,0.010828,0.008346,0.005596,0.003939,0.002900,0.002141,0.001562,0.001098,0.000729,0.000449,0.000257,0.000169,0.000165,0.000175,0.000167,0.000140,0.000106
  giMixedEh33 ftgen  4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4) , i(gkPS4)  ,1,1,1	,0.004867,0.007460,0.011945,0.019946,0.031209,0.054453,0.186212,0.117747,0.049349,0.025385,0.015675,0.009940,0.005668,0.003035,0.001342,0.000247,0.000261,0.000440,0.000408,0.000208,0.000179,0.000569,0.001196,0.002093,0.003439,0.005483,0.008701,0.015148,0.030996,0.029556,0.014724,0.008576,0.005437,0.003329,0.001707,0.000348,0.001213,0.002897,0.005055,0.008006,0.012446,0.020472,0.036633,0.042329,0.025547,0.017331,0.014092,0.013706,0.016241,0.022858,0.028248,0.019753,0.013157,0.010345,0.010349,0.012777,0.010845,0.006746,0.004465,0.003112,0.002165,0.001447,0.000902,0.000506,0.000263,0.000193,0.000207,0.000202,0.000165,0.000114
  giMixedEh36 ftgen  5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5) , i(gkPS5)  ,1,1,1	,0.008898,0.014845,0.025531,0.044722,0.088437,0.209987,0.109632,0.053027,0.029768,0.016881,0.008983,0.004150,0.001395,0.000463,0.000755,0.000691,0.000400,0.000255,0.000745,0.001668,0.003236,0.005773,0.010198,0.020143,0.039588,0.019923,0.010157,0.005810,0.003302,0.001689,0.000582,0.000359,0.001415,0.002957,0.005341,0.009195,0.016165,0.031454,0.042867,0.022527,0.012419,0.007380,0.004874,0.005036,0.007696,0.012757,0.022519,0.032658,0.021211,0.013339,0.010317,0.010331,0.013816,0.015314,0.008765,0.005134,0.003184,0.001938,0.001090,0.000535,0.000250,0.000207,0.000210,0.000173,0.000113
  giMixedEh39 ftgen  6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6) , i(gkPS6)  ,1,1,1	,0.011502,0.021549,0.042263,0.090322,0.245564,0.114253,0.051172,0.026245,0.012912,0.005428,0.001469,0.000641,0.000901,0.000604,0.000162,0.000315,0.001073,0.002614,0.005421,0.010640,0.023418,0.045836,0.018645,0.008963,0.004582,0.002130,0.000572,0.000762,0.002491,0.005301,0.010156,0.019894,0.044518,0.039884,0.018319,0.009661,0.005793,0.006382,0.011028,0.020816,0.038283,0.025968,0.015109,0.011870,0.013774,0.019307,0.011088,0.005870,0.003324,0.001790,0.000830,0.000329,0.000246,0.000244,0.000178
  giMixedEh42 ftgen  7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7) , i(gkPS7)  ,1,1,1	,0.015233,0.032741,0.074724,0.243797,0.144246,0.056112,0.025240,0.010252,0.002839,0.000700,0.001067,0.000580,0.000104,0.000883,0.002741,0.006585,0.014845,0.043733,0.031620,0.012214,0.005557,0.002198,0.000195,0.001893,0.005217,0.011479,0.025712,0.062141,0.031662,0.014093,0.007252,0.007795,0.015192,0.033589,0.039695,0.019565,0.014153,0.017708,0.020404,0.009087,0.004554,0.002215,0.000878,0.000317,0.000301,0.000241,0.000125
  giMixedEh45 ftgen  8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8) , i(gkPS8)  ,1,1,1	,0.020852,0.053258,0.153984,0.250056,0.069342,0.026968,0.008516,0.001168,0.001282,0.000765,0.000162,0.001475,0.005006,0.013261,0.041892,0.036286,0.012356,0.004686,0.001052,0.001663,0.006070,0.015487,0.041856,0.059403,0.020427,0.008986,0.009865,0.022609,0.054432,0.028468,0.017103,0.021683,0.020009,0.007941,0.003514,0.001272,0.000379,0.000357,0.000233,0.000104,0.000116
  giMixedEh48 ftgen  9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9) , i(gkPS9)  ,1,1,1	,0.014412,0.045494,0.181791,0.112588,0.033171,0.009544,0.001064,0.001135,0.000329,0.000220,0.001449,0.006000,0.019846,0.045292,0.010951,0.003439,0.000417,0.001563,0.004898,0.014483,0.022627,0.012262,0.019775,0.010955,0.019872,0.010229,0.003771,0.001279,0.000296,0.000245,0.000142
  giMixedEh51 ftgen 10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10), i(gkPS10) ,1,1,1	,0.021582,0.082278,0.299289,0.052488,0.012284,0.000944,0.001172,0.000108,0.000906,0.006303,0.026106,0.032757,0.007753,0.001434,0.001444,0.005988,0.023064,0.017739,0.020167,0.013678,0.023142,0.010173,0.003168,0.000704,0.000290,0.000184
  giMixedEh54 ftgen 11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11), i(gkPS11) ,1,1,1	,0.033385,0.181253,0.115431,0.021468,0.001260,0.001196,0.000294,0.003460,0.019374,0.049307,0.008286,0.000663,0.003599,0.016148,0.024802,0.024651,0.015477,0.027005,0.006039,0.001230,0.000344,0.000180,0.000106
  giMixedEh57 ftgen 12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12), i(gkPS12) ,1,1,1	,0.053000,0.500048,0.052999,0.003969,0.001543,0.000360,0.007742,0.067956,0.015859,0.001332,0.004887,0.030983,0.020466,0.021939,0.036267,0.006921,0.000920,0.000388,0.000110
  giMixedEh60 ftgen 13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13), i(gkPS13) ,1,1,1	,0.165294,0.197124,0.015337,0.003004,0.003167,0.040484,0.005206,0.000220,0.001029,0.011247,0.005236,0.003975,0.005800,0.000693,0.000124,0.000151,0.000577,0.000103
  giMixedEh63 ftgen 14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14), i(gkPS14) ,1,1,1	,0.343032,0.097209,0.002364,0.001736,0.039793,0.004573,0.000222,0.004544,0.011682,0.003924,0.005813,0.000396,0.000102,0.000125,0.000672
  giMixedEh66 ftgen 15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15), i(gkPS15) ,1,1,1	,0.999678,0.038087,0.002755,0.020021,0.006295,0.000187,0.012594,0.004197,0.013896,0.000677,0.000104,0.000433,0.000213
  giMixedEh69 ftgen 16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16), i(gkPS16) ,1,1,1	,1.000001,0.003910,0.006008,0.016207,0.000265,0.023574,0.004637,0.003870,0.000201,0.000631,0.000123
  giMixedEh72 ftgen 17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17), i(gkPS17) ,1,1,1	,0.223136,0.003631,0.001641,0.053621,0.043595,0.010450,0.007588,0.000208,0.000421,0.000286
  giMixedEh75 ftgen 18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18), i(gkPS18) ,1,1,1	,0.109531,0.000806,0.042151,0.016149,0.016640,0.005110,0.000133,0.001866
  giMixedEh78 ftgen 19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19), i(gkPS19) ,1,1,1	,0.034598,0.000509,0.025064,0.074296,0.007935,0.000130,0.000593
  giMixedEh81 ftgen 20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20), i(gkPS20) ,1,1,1	,0.005801,0.023872,0.089183,0.013066,0.000176,0.000337
  giMixedEh84 ftgen 21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21), i(gkPS21) ,1,1,1	,0.007260,0.107242,0.020899,0.000417,0.000572
 elseif iVoice==28 then
  giMixedEee24 ftgen  1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1) , i(gkPS1)  ,1,1,1	,0.010612,0.014495,0.019809,0.028477,0.041398,0.063942,0.114518,0.124942,0.078855,0.046228,0.033959,0.023394,0.018143,0.013375,0.010099,0.007577,0.005431,0.003901,0.002611,0.001632,0.000932,0.000386,0.000171,0.000289,0.000422,0.000452,0.000449,0.000398,0.000315,0.000237,0.000144,0.000104,0.000105,0.000153,0.000215,0.000290,0.000380,0.000487,0.000633,0.000816,0.001099,0.001507,0.002203,0.003126,0.003165,0.002277,0.001567,0.001153,0.000855,0.000658,0.000500,0.000378,0.000277,0.000186,0.000102,0.000154,0.000300,0.000490,0.000733,0.001033,0.001413,0.001885,0.002475,0.003256,0.004250,0.005714,0.007781,0.011083,0.015021,0.015148,0.011378,0.008165,0.006212,0.004895,0.004095,0.003568,0.003306,0.003268,0.003450,0.003938,0.004750,0.006020,0.007017,0.006500,0.005013,0.003837,0.003082,0.002641,0.002479,0.002562
  giMixedEee27 ftgen  2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2) , i(gkPS2)  ,1,1,1	,0.013361,0.019632,0.028170,0.046001,0.073446,0.142620,0.135320,0.067419,0.045253,0.028671,0.021074,0.014727,0.010611,0.007252,0.004920,0.003071,0.001747,0.000807,0.000249,0.000303,0.000500,0.000540,0.000520,0.000422,0.000309,0.000180,0.000119,0.000127,0.000103,0.000168,0.000256,0.000366,0.000497,0.000673,0.000915,0.001288,0.001877,0.003013,0.003942,0.003063,0.001933,0.001339,0.000949,0.000692,0.000498,0.000349,0.000219,0.000102,0.000105,0.000283,0.000531,0.000867,0.001300,0.001875,0.002609,0.003613,0.004968,0.007064,0.010239,0.015759,0.018744,0.014260,0.009604,0.006959,0.005391,0.004464,0.003989,0.003908,0.004207,0.005028,0.006490,0.008241,0.007854,0.005766,0.004257,0.003368,0.002997,0.003039,0.003534,0.003719,0.002952,0.002107,0.001565,0.001195,0.000929,0.000719,0.000551,0.000410,0.000295,0.000202,0.000133
  giMixedEee30 ftgen  3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3) , i(gkPS3)  ,1,1,1	,0.016942,0.026728,0.044993,0.073582,0.166083,0.150187,0.067471,0.042023,0.027730,0.018157,0.012270,0.007756,0.004771,0.002544,0.001124,0.000288,0.000418,0.000628,0.000639,0.000532,0.000370,0.000189,0.000133,0.000151,0.000118,0.000167,0.000288,0.000442,0.000634,0.000915,0.001325,0.002073,0.003575,0.004636,0.003020,0.001869,0.001215,0.000836,0.000565,0.000361,0.000186,0.000308,0.000658,0.001154,0.001829,0.002760,0.004060,0.005937,0.009069,0.014428,0.021876,0.018429,0.011479,0.007850,0.005939,0.004916,0.004612,0.004928,0.006092,0.008369,0.009952,0.007626,0.005224,0.003945,0.003510,0.003799,0.004447,0.003710,0.002491,0.001752,0.001285,0.000950,0.000696,0.000493,0.000332,0.000209,0.000125
  giMixedEee33 ftgen  4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4) , i(gkPS4)  ,1,1,1	,0.021903,0.037076,0.070524,0.170727,0.184856,0.075853,0.042006,0.026533,0.016384,0.009694,0.005423,0.002512,0.000745,0.000367,0.000734,0.000760,0.000589,0.000358,0.000113,0.000157,0.000177,0.000123,0.000164,0.000331,0.000549,0.000839,0.001298,0.002144,0.003934,0.005481,0.003133,0.001834,0.001150,0.000725,0.000430,0.000185,0.000178,0.000585,0.001216,0.002131,0.003468,0.005492,0.008727,0.014780,0.025548,0.021159,0.012320,0.008120,0.006189,0.005514,0.005907,0.007722,0.011241,0.010580,0.006710,0.004738,0.004184,0.004875,0.005074,0.003298,0.002150,0.001485,0.001035,0.000705,0.000453,0.000265,0.000143
  giMixedEee36 ftgen  5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5) , i(gkPS5)  ,1,1,1	,0.018039,0.029693,0.059894,0.185737,0.154314,0.055778,0.027787,0.014854,0.007935,0.003897,0.001432,0.000187,0.000561,0.000590,0.000401,0.000185,0.000117,0.000134,0.000109,0.000405,0.000942,0.001848,0.003332,0.005831,0.010609,0.022023,0.025121,0.011959,0.006463,0.003691,0.002042,0.001000,0.000346,0.000540,0.001193,0.002221,0.003859,0.006735,0.012934,0.018831,0.010505,0.006536,0.005174,0.005305,0.007021,0.011338,0.013114,0.007641,0.004738,0.003619,0.003554,0.002391,0.001498,0.001024,0.000703,0.000458,0.000268,0.000136
  giMixedEee39 ftgen  6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6) , i(gkPS6)  ,1,1,1	,0.023171,0.040165,0.103046,0.249899,0.069009,0.030296,0.014964,0.006837,0.002317,0.000262,0.000693,0.000670,0.000375,0.000134,0.000157,0.000234,0.000809,0.001919,0.003902,0.007563,0.015739,0.033909,0.016874,0.008020,0.004127,0.001993,0.000762,0.000560,0.001472,0.003025,0.005784,0.011760,0.022871,0.012484,0.007312,0.006012,0.007155,0.011847,0.015854,0.008455,0.005033,0.004257,0.003348,0.001866,0.001182,0.000751,0.000433,0.000208
  giMixedEee42 ftgen  7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7) , i(gkPS7)  ,1,1,1	,0.030585,0.075466,0.326397,0.089842,0.037631,0.016293,0.006004,0.001189,0.000623,0.000819,0.000421,0.000187,0.000122,0.000220,0.000997,0.002690,0.006079,0.013783,0.037543,0.020537,0.008608,0.003873,0.001483,0.000243,0.000604,0.001913,0.004382,0.009617,0.024507,0.016361,0.008552,0.007239,0.010299,0.019396,0.011363,0.006002,0.005105,0.003117,0.001699,0.001004,0.000533,0.000219,0.000103,0.000108
  giMixedEee45 ftgen  8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8) , i(gkPS8)  ,1,1,1	,0.042426,0.110844,0.240398,0.052093,0.020251,0.006042,0.000491,0.000993,0.000619,0.000230,0.000590,0.002336,0.006356,0.016818,0.048133,0.016906,0.006376,0.002233,0.000321,0.000910,0.003109,0.007901,0.022561,0.020975,0.009763,0.009076,0.016934,0.017670,0.007601,0.006066,0.003146,0.001615,0.000823,0.000318,0.000124,0.000127
  giMixedEee48 ftgen  9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9) , i(gkPS9)  ,1,1,1	,0.067500,0.499957,0.084236,0.026845,0.006246,0.000524,0.001260,0.000307,0.000263,0.000154,0.000423,0.001657,0.005126,0.020030,0.007311,0.002320,0.000560,0.000313,0.001681,0.005251,0.018793,0.008143,0.003428,0.003199,0.002838,0.002897,0.002582,0.000962,0.000359
  giMixedEee51 ftgen 10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10), i(gkPS10) ,1,1,1	,0.114392,0.346891,0.051686,0.011497,0.000495,0.001393,0.000319,0.000278,0.001711,0.006671,0.024100,0.005070,0.001207,0.000395,0.002611,0.010148,0.016063,0.004678,0.003757,0.002818,0.004738,0.001749,0.000577,0.000121
  giMixedEee54 ftgen 11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11), i(gkPS11) ,1,1,1	,0.184699,0.170704,0.027773,0.001277,0.001722,0.000135,0.000260,0.000954,0.005364,0.030213,0.005416,0.000846,0.000161,0.001816,0.009486,0.018223,0.004741,0.005826,0.003571,0.002699,0.000709,0.000111
  giMixedEee57 ftgen 12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12), i(gkPS12) ,1,1,1	,0.375525,0.096426,0.009561,0.002227,0.000108,0.000215,0.002089,0.015287,0.010294,0.001315,0.000212,0.003544,0.026847,0.007999,0.006168,0.004412,0.002362,0.000444,0.000109
  giMixedEee60 ftgen 13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13), i(gkPS13) ,1,1,1	,0.227192,0.099004,0.005244,0.001344,0.001073,0.017641,0.017350,0.001409,0.000721,0.009172,0.004060,0.000250,0.000806,0.006918,0.001617,0.000117,0.000126,0.000462
  giMixedEee63 ftgen 14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14), i(gkPS14) ,1,1,1	,0.603091,0.048190,0.002514,0.000479,0.018496,0.015302,0.000391,0.003639,0.009291,0.000469,0.001181,0.008347,0.000679,0.000111,0.000537
  giMixedEee66 ftgen 15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15), i(gkPS15) ,1,1,1	,1.000000,0.014894,0.000748,0.011456,0.020880,0.000335,0.010283,0.002934,0.000513,0.010980,0.000625,0.000358,0.000173
  giMixedEee69 ftgen 16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16), i(gkPS16) ,1,1,1	,0.383427,0.002256,0.002169,0.058726,0.000416,0.019191,0.001023,0.003871,0.002038,0.000111,0.000515,0.000103
  giMixedEee72 ftgen 17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17), i(gkPS17) ,1,1,1	,0.143330,0.001607,0.002011,0.288307,0.002276,0.014994,0.010998,0.007299,0.001333,0.000996
  giMixedEee75 ftgen 18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18), i(gkPS18) ,1,1,1	,0.061863,0.001803,0.041574,0.018718,0.022519,0.023699,0.001207,0.009907,0.000135
  giMixedEee78 ftgen 19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19), i(gkPS19) ,1,1,1	,0.008237,0.002981,0.275939,0.109772,0.021334,0.000832,0.002147
  giMixedEee81 ftgen 20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20), i(gkPS20) ,1,1,1	,0.012164,0.019280,0.007395,0.003926,0.001069,0.001101
  giMixedEee84 ftgen 21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21), i(gkPS21) ,1,1,1	,0.003212,0.576616,0.029989,0.014597,0.001991
 elseif iVoice==29 then
  giMixedOh24 ftgen  1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1) , i(gkPS1)  ,1,1,1	,0.002656,0.003252,0.004105,0.005622,0.007160,0.009459,0.013108,0.015856,0.025894,0.031448,0.069195,0.117293,0.097983,0.042979,0.032065,0.021929,0.018078,0.015475,0.014066,0.014550,0.016289,0.021526,0.023582,0.017583,0.010850,0.007974,0.005821,0.004584,0.003615,0.002841,0.002234,0.001707,0.001268,0.000905,0.000600,0.000361,0.000186,0.000124,0.000163,0.000187,0.000186,0.000166,0.000139,0.000101,0.000100,0.000137,0.000189,0.000263,0.000361,0.000489,0.000654,0.000858,0.001117,0.001451,0.001869,0.002471,0.003247,0.004440,0.005393,0.004629,0.002917,0.002066,0.002532,0.003852,0.005391,0.005792,0.004814,0.003675,0.002842,0.002214,0.001763,0.001401,0.001091,0.000746,0.000345,0.000127,0.000165,0.000194,0.000194,0.000185,0.000171,0.000154,0.000137,0.000119,0.000101
  giMixedOh27 ftgen  2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2) , i(gkPS2)  ,1,1,1	,0.003258,0.004239,0.005824,0.008031,0.011084,0.016213,0.021193,0.035813,0.061897,0.136532,0.111390,0.042393,0.033786,0.022028,0.018961,0.016732,0.017591,0.021496,0.028305,0.022987,0.013061,0.009039,0.006327,0.004802,0.003617,0.002714,0.001972,0.001369,0.000897,0.000513,0.000245,0.000108,0.000159,0.000210,0.000226,0.000203,0.000166,0.000112,0.000138,0.000201,0.000297,0.000435,0.000622,0.000874,0.001199,0.001639,0.002216,0.003089,0.004305,0.006101,0.005978,0.003630,0.002459,0.003410,0.005563,0.006988,0.005953,0.004329,0.003190,0.002395,0.001829,0.001373,0.000891,0.000334,0.000160,0.000222,0.000234,0.000222,0.000202,0.000178,0.000153,0.000127,0.000102
  giMixedOh30 ftgen  3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3) , i(gkPS3)  ,1,1,1	,0.004023,0.005567,0.008482,0.012147,0.018935,0.027436,0.043784,0.124923,0.156060,0.054359,0.038530,0.025628,0.020731,0.020302,0.024164,0.033681,0.024398,0.013158,0.008555,0.006066,0.004329,0.003073,0.002076,0.001307,0.000716,0.000311,0.000128,0.000209,0.000264,0.000252,0.000205,0.000130,0.000103,0.000161,0.000252,0.000400,0.000621,0.000939,0.001374,0.001992,0.002862,0.004244,0.006522,0.007371,0.004231,0.002979,0.004965,0.007920,0.007484,0.005169,0.003596,0.002580,0.001862,0.001227,0.000441,0.000198,0.000273,0.000271,0.000248,0.000214,0.000179,0.000142,0.000109
  giMixedOh33 ftgen  4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4) , i(gkPS4)  ,1,1,1	,0.005059,0.007690,0.012187,0.020150,0.031282,0.054249,0.186526,0.120147,0.052781,0.030786,0.024379,0.024804,0.034918,0.035401,0.016807,0.010063,0.006707,0.004475,0.002912,0.001727,0.000868,0.000313,0.000184,0.000294,0.000312,0.000251,0.000145,0.000162,0.000275,0.000476,0.000802,0.001297,0.002024,0.003113,0.004960,0.008196,0.007816,0.003687,0.004946,0.009187,0.008701,0.005588,0.003662,0.002498,0.001599,0.000503,0.000264,0.000332,0.000310,0.000265,0.000215,0.000163,0.000117
  giMixedOh36 ftgen  5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5) , i(gkPS5)  ,1,1,1	,0.006425,0.011190,0.018900,0.031763,0.063063,0.234533,0.085077,0.042498,0.028723,0.024364,0.029248,0.052657,0.032828,0.016019,0.009256,0.005473,0.003020,0.001411,0.000472,0.000289,0.000385,0.000324,0.000169,0.000209,0.000292,0.000313,0.000363,0.000715,0.001488,0.002773,0.004783,0.007968,0.013450,0.024276,0.028174,0.012256,0.017548,0.027382,0.016871,0.007639,0.001429,0.003903,0.002935,0.001946,0.001251,0.000808,0.000539,0.000371,0.000260,0.000189,0.000148,0.000125,0.000105
  giMixedOh39 ftgen  6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6) , i(gkPS6)  ,1,1,1	,0.008376,0.015990,0.032397,0.071647,0.272662,0.083705,0.042399,0.029965,0.031725,0.060042,0.036024,0.015995,0.008610,0.004457,0.001931,0.000539,0.000377,0.000438,0.000278,0.000188,0.000329,0.000372,0.000455,0.001070,0.002432,0.004805,0.008844,0.016499,0.033376,0.023715,0.015683,0.032489,0.020044,0.007073,0.004006,0.004073,0.002568,0.001523,0.000908,0.000566,0.000367,0.000246,0.000180,0.000147,0.000118
  giMixedOh42 ftgen  7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7) , i(gkPS7)  ,1,1,1	,0.011034,0.024255,0.054958,0.249960,0.107468,0.049168,0.034461,0.048258,0.060049,0.020609,0.009752,0.004351,0.001387,0.000382,0.000531,0.000321,0.000134,0.000183,0.000390,0.000442,0.000696,0.002019,0.004800,0.010033,0.021149,0.044106,0.017250,0.033814,0.026431,0.007582,0.005537,0.004027,0.002216,0.001191,0.000676,0.000405,0.000256,0.000192,0.000151,0.000111
  giMixedOh45 ftgen  8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8) , i(gkPS8)  ,1,1,1	,0.015273,0.040290,0.108755,0.238831,0.059213,0.041067,0.079700,0.037954,0.014459,0.005681,0.001470,0.000525,0.000572,0.000143,0.000149,0.000276,0.000507,0.000599,0.001942,0.005592,0.013421,0.033213,0.035928,0.030674,0.033762,0.006591,0.006489,0.003618,0.001724,0.000862,0.000468,0.000280,0.000206,0.000147,0.000101
  giMixedOh48 ftgen  9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9) , i(gkPS9)  ,1,1,1	,0.010601,0.034815,0.190470,0.080405,0.033305,0.058053,0.024910,0.008255,0.002415,0.000380,0.000499,0.000157,0.000134,0.000544,0.001534,0.004269,0.007067,0.006352,0.013410,0.005008,0.002977,0.001313,0.000644,0.000282
  giMixedOh51 ftgen 10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10), i(gkPS10) ,1,1,1	,0.016431,0.063467,0.235366,0.043971,0.063965,0.024873,0.006978,0.001106,0.000633,0.000237,0.000165,0.000526,0.001871,0.006744,0.006491,0.013161,0.007320,0.003558,0.001368,0.000593,0.000178
  giMixedOh54 ftgen 11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11), i(gkPS11) ,1,1,1	,0.024710,0.140863,0.075949,0.054103,0.032225,0.006828,0.000565,0.000591,0.000130,0.000122,0.000130,0.001184,0.004810,0.008308,0.016195,0.006829,0.003189,0.000995,0.000290
  giMixedOh57 ftgen 12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12), i(gkPS12) ,1,1,1	,0.039150,0.500037,0.055380,0.060924,0.008930,0.000650,0.000410,0.000244,0.001590,0.009065,0.009812,0.013291,0.004577,0.001153,0.000235,0.000102
  giMixedOh60 ftgen 13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13), i(gkPS13) ,1,1,1	,0.086407,0.267040,0.196788,0.021563,0.001095,0.000450,0.000254,0.000578,0.012590,0.058595,0.005142,0.009927,0.005483,0.000502,0.000175,0.000149,0.000775
  giMixedOh63 ftgen 14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14), i(gkPS14) ,1,1,1	,0.153433,0.155941,0.058873,0.002749,0.000677,0.000168,0.000395,0.004570,0.084026,0.008181,0.014008,0.003788,0.000261,0.000109,0.000887
  giMixedOh66 ftgen 15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15), i(gkPS15) ,1,1,1	,0.332841,0.193621,0.018082,0.001777,0.000274,0.000623,0.014262,0.036353,0.007910,0.005829,0.000322,0.000104,0.000472,0.000204
  giMixedOh69 ftgen 16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16), i(gkPS16) ,1,1,1	,1.000000,0.136629,0.001978,0.000708,0.000666,0.025888,0.015536,0.029450,0.000535,0.000119,0.000710,0.000111
  giMixedOh72 ftgen 17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17), i(gkPS17) ,1,1,1	,0.528638,0.035156,0.000814,0.000113,0.012612,0.005146,0.027163,0.002875,0.000576,0.000345
  giMixedOh75 ftgen 18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18), i(gkPS18) ,1,1,1	,0.295700,0.004617,0.000416,0.004518,0.008174,0.059391,0.000819,0.003130
  giMixedOh78 ftgen 19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19), i(gkPS19) ,1,1,1	,0.324009,0.003159,0.000539,0.036354,0.052795,0.000895,0.000729
  giMixedOh81 ftgen 20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20), i(gkPS20) ,1,1,1	,0.212624,0.001375,0.025936,0.013708,0.001164,0.000397
  giMixedOh84 ftgen 21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21), i(gkPS21) ,1,1,1	,0.070310,0.000226,0.010293,0.005749,0.000690
 elseif iVoice==30 then
  giMixedOoh24 ftgen  1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1) , i(gkPS1)  ,1,1,1	,0.004170,0.004767,0.005809,0.007125,0.009423,0.012338,0.016616,0.025281,0.036773,0.084223,0.097509,0.055644,0.026776,0.021850,0.013883,0.011537,0.008646,0.005282,0.002155,0.001654,0.001414,0.001239,0.001040,0.000878,0.000785,0.000712,0.000629,0.000575,0.000483,0.000406,0.000327,0.000237,0.000173,0.000104,0.000121,0.000160,0.000207,0.000263,0.000334,0.000421,0.000551,0.000726,0.001018,0.001329,0.001313,0.001049,0.000891,0.000885,0.000983,0.001199,0.001540,0.001977,0.002121,0.001784,0.001340,0.001034,0.000826,0.000705,0.000652,0.000680,0.000715,0.000646,0.000503,0.000390,0.000309,0.000249,0.000204,0.000167,0.000137,0.000111
  giMixedOoh27 ftgen  2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2) , i(gkPS2)  ,1,1,1	,0.005030,0.006191,0.007651,0.010372,0.014571,0.021434,0.030781,0.071907,0.119545,0.072776,0.031574,0.022556,0.015399,0.011394,0.007041,0.002518,0.001911,0.001634,0.001295,0.001096,0.000937,0.000834,0.000721,0.000630,0.000508,0.000397,0.000272,0.000181,0.000107,0.000153,0.000213,0.000285,0.000379,0.000500,0.000688,0.000967,0.001445,0.001618,0.001277,0.001057,0.001077,0.001285,0.001687,0.002301,0.002526,0.001994,0.001425,0.001068,0.000863,0.000780,0.000826,0.000841,0.000676,0.000495,0.000375,0.000290,0.000229,0.000180,0.000141,0.000108
  giMixedOoh30 ftgen  3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3) , i(gkPS3)  ,1,1,1	,0.006083,0.008003,0.010711,0.016374,0.024519,0.037449,0.112833,0.124998,0.041417,0.028771,0.018019,0.012343,0.005402,0.002386,0.001972,0.001531,0.001231,0.001066,0.000905,0.000784,0.000607,0.000449,0.000285,0.000153,0.000101,0.000109,0.000153,0.000230,0.000327,0.000460,0.000642,0.000947,0.001505,0.001937,0.001502,0.001242,0.001345,0.001774,0.002567,0.002998,0.002232,0.001518,0.001113,0.000935,0.000970,0.000984,0.000727,0.000511,0.000372,0.000279,0.000210,0.000157,0.000113
  giMixedOoh33 ftgen  4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4) , i(gkPS4)  ,1,1,1	,0.007502,0.010380,0.016096,0.024230,0.043922,0.147876,0.113247,0.043397,0.022792,0.015355,0.005760,0.002715,0.002152,0.001629,0.001298,0.001071,0.000882,0.000647,0.000405,0.000215,0.000125,0.000127,0.000114,0.000198,0.000315,0.000473,0.000703,0.001106,0.001912,0.002216,0.001551,0.001530,0.002044,0.003150,0.003426,0.002208,0.001462,0.001135,0.001161,0.001127,0.000745,0.000502,0.000355,0.000253,0.000178,0.000120
  giMixedOoh36 ftgen  5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5) , i(gkPS5)  ,1,1,1	,0.009514,0.014225,0.024646,0.050523,0.168409,0.111356,0.043820,0.023460,0.012509,0.004160,0.002642,0.001689,0.001315,0.001065,0.000757,0.000443,0.000192,0.000123,0.000137,0.000101,0.000120,0.000148,0.000186,0.000291,0.000545,0.001008,0.001755,0.002924,0.004809,0.008185,0.013559,0.007678,0.008486,0.018454,0.017597,0.010496,0.006842,0.005140,0.004787,0.005732,0.004640,0.002578,0.001610,0.001047,0.000655,0.000372,0.000189,0.000109,0.000102
  giMixedOoh39 ftgen  6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6) , i(gkPS6)  ,1,1,1	,0.012343,0.020687,0.042780,0.143593,0.145481,0.045253,0.024030,0.006681,0.003567,0.002127,0.001539,0.001172,0.000743,0.000337,0.000147,0.000158,0.000139,0.000180,0.000245,0.000466,0.000987,0.001939,0.003573,0.006484,0.012507,0.013031,0.008641,0.021946,0.018929,0.010423,0.006772,0.005654,0.006751,0.005079,0.002597,0.001537,0.000903,0.000473,0.000212,0.000124,0.000121
  giMixedOoh42 ftgen  7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7) , i(gkPS7)  ,1,1,1	,0.015973,0.032700,0.074843,0.250024,0.057702,0.026906,0.006281,0.003020,0.001964,0.001456,0.000842,0.000281,0.000120,0.000190,0.000125,0.000117,0.000172,0.000230,0.000397,0.000965,0.002195,0.004549,0.009401,0.019240,0.008562,0.023865,0.021772,0.010988,0.007172,0.007255,0.006908,0.003095,0.001662,0.000857,0.000363,0.000158,0.000146,0.000111
  giMixedOoh45 ftgen  8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8) , i(gkPS8)  ,1,1,1	,0.020715,0.048381,0.295623,0.086997,0.032947,0.006518,0.003184,0.001972,0.001207,0.000399,0.000165,0.000225,0.000166,0.000247,0.000405,0.001120,0.002956,0.006943,0.016973,0.012394,0.026234,0.023823,0.011169,0.008018,0.009723,0.004053,0.001912,0.000846,0.000280,0.000172,0.000144
  giMixedOoh48 ftgen  9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9) , i(gkPS9)  ,1,1,1	,0.020956,0.073214,0.300650,0.047374,0.011304,0.003365,0.002105,0.001056,0.000160,0.000271,0.000143,0.000105,0.000437,0.001635,0.004710,0.015016,0.005087,0.004883,0.002780,0.003191,0.006532,0.002329,0.000854,0.000249
  giMixedOoh51 ftgen 10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10), i(gkPS10) ,1,1,1	,0.030210,0.140577,0.104265,0.026214,0.004100,0.002408,0.000835,0.000254,0.000256,0.000123,0.000395,0.002001,0.007270,0.012518,0.005007,0.003616,0.003732,0.007195,0.001939,0.000551
  giMixedOoh54 ftgen 11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11), i(gkPS11) ,1,1,1	,0.046979,0.499997,0.053723,0.006460,0.002919,0.000773,0.000378,0.000118,0.000106,0.000152,0.001094,0.005381,0.019208,0.006051,0.003882,0.006400,0.003801,0.000886,0.000115
  giMixedOoh57 ftgen 12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12), i(gkPS12) ,1,1,1	,0.073889,0.165133,0.017058,0.003994,0.001052,0.000471,0.000177,0.001512,0.009857,0.009881,0.005879,0.006275,0.004329,0.000733,0.000125
  giMixedOoh60 ftgen 13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13), i(gkPS13) ,1,1,1	,0.319941,0.115082,0.065007,0.007044,0.001288,0.000283,0.000127,0.000673,0.008134,0.014095,0.001709,0.000289,0.000332
  giMixedOoh63 ftgen 14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14), i(gkPS14) ,1,1,1	,1.000001,0.125741,0.022569,0.001337,0.000279,0.000263,0.002205,0.023707,0.004085,0.000367,0.000387
  giMixedOoh66 ftgen 15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15), i(gkPS15) ,1,1,1	,0.712592,0.181596,0.004243,0.000318,0.000259,0.003910,0.023893,0.001033,0.000156,0.000248,0.000124
  giMixedOoh69 ftgen 16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16), i(gkPS16) ,1,1,1	,0.347452,0.048482,0.002113,0.000185,0.003869,0.019916,0.000554,0.000125,0.000363
  giMixedOoh72 ftgen 17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17), i(gkPS17) ,1,1,1	,0.209313,0.009909,0.000515,0.000104,0.013000,0.000503,0.005157,0.000630,0.000287,0.000189
  giMixedOoh75 ftgen 18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18), i(gkPS18) ,1,1,1	,0.188584,0.002188,0.000154,0.005909,0.000855,0.010025,0.000214,0.001217
  giMixedOoh78 ftgen 19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19), i(gkPS19) ,1,1,1	,0.222149,0.000533,0.000493,0.004776,0.009517,0.000194,0.000393
  giMixedOoh81 ftgen 20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20), i(gkPS20) ,1,1,1	,0.063129,0.000488,0.025748,0.002834,0.000268,0.000223
  giMixedOoh84 ftgen 21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21), i(gkPS21) ,1,1,1	,0.019817,0.000207,0.001007,0.001261,0.000379
 endif

 ktrig	changed	gkVoice2
 if ktrig==1 && gkV2OnOff==1 then
  reinit	UpdateTable2
 endif
 UpdateTable2:
 iVoice2	=	i(gkVoice2)
 ; BASS
 if iVoice2==1 then
  giBassAh24 ftgen 100+1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1_V2) , i(gkPS1)  ,1,1,1	,0.000412,0.000370,0.000337,0.000371,0.000555,0.000859,0.001305,0.001896,0.002601,0.003585,0.004729,0.006226,0.008387,0.010759,0.015604,0.021153,0.036276,0.057553,0.053066,0.030189,0.020360,0.014722,0.011349,0.009414,0.008036,0.007520,0.007518,0.008204,0.010188,0.013445,0.021468,0.024378,0.017218,0.010300,0.007574,0.005320,0.004125,0.003105,0.002351,0.001777,0.001280,0.000908,0.000603,0.000362,0.000194,0.000113,0.000107,0.000165,0.000269,0.000410,0.000591,0.000829,0.001124,0.001497,0.001964,0.002540,0.003281,0.004214,0.005465,0.007172,0.009487,0.012221,0.012290,0.008928,0.005554,0.004575,0.006297,0.009642,0.012002,0.011210,0.008864,0.007021,0.005649,0.004715,0.004092,0.003711,0.003540,0.003269,0.002720,0.002116,0.001696,0.001392,0.001163,0.000978,0.000817,0.000679,0.000554,0.000445,0.000349,0.000267,0.000201,0.000148,0.000112
  giBassAh27 ftgen 100+2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2_V2) , i(gkPS2)  ,1,1,1	,0.000484,0.000423,0.000410,0.000587,0.001000,0.001640,0.002515,0.003647,0.005207,0.007188,0.010221,0.013861,0.021835,0.034169,0.065821,0.062536,0.031595,0.021762,0.014578,0.011706,0.009599,0.008934,0.009048,0.011008,0.014402,0.024811,0.028584,0.017346,0.010562,0.007037,0.005089,0.003642,0.002621,0.001845,0.001237,0.000781,0.000431,0.000198,0.000132,0.000128,0.000107,0.000154,0.000279,0.000469,0.000726,0.001077,0.001533,0.002136,0.002909,0.003944,0.005309,0.007297,0.010064,0.014010,0.014733,0.009883,0.005835,0.006234,0.010391,0.014244,0.013109,0.009848,0.007528,0.005944,0.004974,0.004420,0.004181,0.003659,0.002784,0.002107,0.001664,0.001346,0.001093,0.000881,0.000697,0.000538,0.000403,0.000292,0.000206,0.000145,0.000112
  giBassAh30 ftgen 100+3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3_V2) , i(gkPS3)  ,1,1,1	,0.000560,0.000482,0.000562,0.001054,0.001899,0.003144,0.004913,0.007274,0.010934,0.015824,0.026652,0.050310,0.084386,0.048694,0.027304,0.017198,0.013209,0.010896,0.010619,0.012323,0.016925,0.031534,0.030303,0.014903,0.009410,0.006192,0.004171,0.002825,0.001804,0.001089,0.000559,0.000223,0.000135,0.000159,0.000132,0.000111,0.000205,0.000408,0.000717,0.001165,0.001784,0.002644,0.003807,0.005452,0.007846,0.011507,0.016933,0.016329,0.008970,0.006585,0.011345,0.016921,0.014673,0.010437,0.007690,0.006096,0.005243,0.004888,0.003982,0.002810,0.002096,0.001620,0.001264,0.000975,0.000730,0.000526,0.000361,0.000238,0.000159,0.000123,0.000113,0.000108
  giBassAh33 ftgen 100+4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4_V2) , i(gkPS4)  ,1,1,1	,0.000645,0.000569,0.000955,0.001964,0.003652,0.006202,0.009824,0.015928,0.027700,0.054004,0.099838,0.045530,0.026122,0.017357,0.013212,0.012640,0.015734,0.025801,0.041244,0.020359,0.011360,0.006947,0.004321,0.002669,0.001503,0.000708,0.000231,0.000110,0.000186,0.000170,0.000130,0.000254,0.000564,0.001062,0.001820,0.002933,0.004538,0.006945,0.010838,0.017334,0.020883,0.011091,0.008199,0.016262,0.019876,0.013707,0.009453,0.007159,0.006126,0.005456,0.003786,0.002617,0.001920,0.001428,0.001039,0.000721,0.000469,0.000288,0.000180,0.000140,0.000132,0.000122,0.000102
  giBassAh36 ftgen 100+5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5_V2) , i(gkPS5)  ,1,1,1	,0.000741,0.000742,0.001718,0.003793,0.007172,0.012458,0.021527,0.042327,0.115172,0.060415,0.029465,0.018842,0.015053,0.016424,0.026918,0.048812,0.020626,0.010654,0.006220,0.003560,0.001819,0.000726,0.000149,0.000187,0.000214,0.000156,0.000332,0.000822,0.001662,0.003004,0.005098,0.008459,0.014399,0.024542,0.017933,0.009191,0.019377,0.022533,0.014117,0.009483,0.007465,0.006578,0.004260,0.002803,0.001970,0.001367,0.000896,0.000539,0.000299,0.000185,0.000160,0.000148,0.000121
  giBassAh39 ftgen 100+6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6_V2) , i(gkPS6)  ,1,1,1	,0.000846,0.001173,0.003275,0.007285,0.014357,0.027687,0.068261,0.124920,0.043474,0.023386,0.017847,0.021990,0.049566,0.034657,0.014061,0.007278,0.003688,0.001560,0.000396,0.000192,0.000256,0.000187,0.000558,0.001451,0.003062,0.005814,0.010610,0.020116,0.029454,0.011668,0.020774,0.026213,0.015055,0.009950,0.008362,0.005568,0.003330,0.002188,0.001396,0.000808,0.000411,0.000223,0.000189,0.000167,0.000123
  giBassAh42 ftgen 100+7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7_V2) , i(gkPS7)  ,1,1,1	,0.000963,0.002108,0.006288,0.014551,0.031661,0.100695,0.097406,0.034417,0.021810,0.024675,0.063158,0.029838,0.012403,0.005661,0.002185,0.000448,0.000270,0.000265,0.000411,0.001440,0.003583,0.007649,0.015770,0.034040,0.018012,0.022841,0.029509,0.015471,0.010557,0.008019,0.004223,0.002548,0.001472,0.000730,0.000322,0.000229,0.000199,0.000135
  giBassAh45 ftgen 100+8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8_V2) , i(gkPS8)  ,1,1,1	,0.001138,0.003929,0.012405,0.031859,0.108048,0.091053,0.034718,0.025288,0.051642,0.040725,0.013900,0.005342,0.001417,0.000220,0.000340,0.000509,0.002128,0.005880,0.013925,0.034767,0.022222,0.032638,0.027491,0.014365,0.010950,0.005254,0.002868,0.001449,0.000579,0.000282,0.000244,0.000156
  giBassAh48 ftgen 100+9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9_V2) , i(gkPS9)  ,1,1,1	,0.001482,0.007584,0.024916,0.084669,0.120825,0.037691,0.032860,0.097651,0.021318,0.007128,0.001455,0.000373,0.000311,0.001646,0.006016,0.016943,0.049158,0.018410,0.045129,0.018996,0.013181,0.005616,0.002740,0.001081,0.000371,0.000296,0.000174,0.000109
  giBassAh51 ftgen 100+10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10_V2), i(gkPS10) ,1,1,1	,0.002346,0.014577,0.055410,0.249952,0.046797,0.044016,0.069343,0.014565,0.003123,0.000384,0.000374,0.002906,0.011647,0.040309,0.023365,0.052509,0.019934,0.011156,0.004385,0.001619,0.000449,0.000335,0.000163,0.000126
  giBassAh54 ftgen 100+11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11_V2), i(gkPS11) ,1,1,1	,0.004218,0.029108,0.201426,0.068825,0.049355,0.059660,0.011314,0.000892,0.000531,0.002882,0.015302,0.068104,0.045706,0.030943,0.016039,0.005097,0.001458,0.000457,0.000270,0.000155
  giBassAh57 ftgen 100+12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12_V2), i(gkPS12) ,1,1,1	,0.007858,0.063721,0.182088,0.050577,0.081435,0.010683,0.000440,0.001018,0.011764,0.069560,0.065307,0.028732,0.010508,0.002898,0.000565,0.000313,0.000177
  giBassAh60 ftgen 100+13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13_V2), i(gkPS13) ,1,1,1	,0.015174,0.169369,0.075380,0.195316,0.014245,0.000747,0.003294,0.033895,0.036836,0.037995,0.011232,0.002161,0.000593,0.000220,0.000121
  giBassAh63 ftgen 100+14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14_V2), i(gkPS14) ,1,1,1	,0.029160,0.499980,0.088056,0.029134,0.000770,0.005816,0.080662,0.105049,0.022319,0.003239,0.000671,0.000252,0.000122
  giBassAh66 ftgen 100+15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15_V2), i(gkPS15) ,1,1,1	,0.058218,0.137644,0.119309,0.001783,0.005763,0.136221,0.061878,0.010194,0.000915,0.000309,0.000144
  giBassAh69 ftgen 100+16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16_V2), i(gkPS16) ,1,1,1	,0.127432,0.101146,0.021362,0.002037,0.139115,0.057450,0.005793,0.000626,0.000185
  giBassAh72 ftgen 100+17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17_V2), i(gkPS17) ,1,1,1	,0.338719,0.390591,0.001495,0.067786,0.075975,0.004319,0.000439,0.000166
  giBassAh75 ftgen 100+18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18_V2), i(gkPS18) ,1,1,1	,1.000000,0.058271,0.011635,0.210114,0.006478,0.000504,0.000138
  giBassAh78 ftgen 100+19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19_V2), i(gkPS19) ,1,1,1	,0.275285,0.003566,0.272436,0.020387,0.000618,0.000157
  giBassAh81 ftgen 100+20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20_V2), i(gkPS20) ,1,1,1	,0.202299,0.004074,0.114905,0.001251,0.000191
  giBassAh84 ftgen 100+21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21_V2), i(gkPS21) ,1,1,1	,0.781181,0.135572,0.008638,0.000333
 elseif iVoice2==2 then
  giBassEh24 ftgen 100+1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1_V2) , i(gkPS1)  ,1,1,1	,0.002549,0.003134,0.003974,0.005478,0.007017,0.009323,0.012997,0.015800,0.025880,0.031561,0.069262,0.116966,0.096839,0.041388,0.030133,0.019258,0.014690,0.010922,0.008058,0.006191,0.004473,0.003237,0.002267,0.001451,0.000894,0.000442,0.000126,0.000210,0.000263,0.000265,0.000240,0.000174,0.000100,0.000185,0.000338,0.000545,0.000796,0.001110,0.001516,0.002015,0.002652,0.003519,0.004603,0.006308,0.008742,0.013114,0.019649,0.020048,0.013747,0.009105,0.006633,0.004842,0.003722,0.002793,0.002088,0.001484,0.000943,0.000453,0.000147,0.000600,0.001155,0.001779,0.002508,0.003367,0.004414,0.005764,0.007472,0.010017,0.013566,0.019406,0.025684,0.025076,0.018739,0.013927,0.011049,0.009282,0.008375,0.008024,0.008229,0.009065,0.010646,0.013251,0.016228,0.016401,0.013297,0.010080,0.008006,0.006682,0.006049,0.005955,0.006476,0.007437,0.007523,0.006180,0.004613,0.003551,0.002779,0.002235
  giBassEh27 ftgen 100+2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2_V2) , i(gkPS2)  ,1,1,1	,0.003129,0.004092,0.005657,0.007860,0.010921,0.016087,0.021139,0.035868,0.062023,0.136227,0.109956,0.040456,0.031049,0.018374,0.013762,0.009515,0.006960,0.004597,0.003159,0.001921,0.001079,0.000444,0.000177,0.000312,0.000316,0.000280,0.000177,0.000171,0.000376,0.000664,0.001031,0.001514,0.002167,0.002999,0.004195,0.005777,0.008581,0.012777,0.021830,0.024145,0.015340,0.009845,0.006641,0.004815,0.003434,0.002428,0.001585,0.000853,0.000201,0.000618,0.001398,0.002299,0.003391,0.004727,0.006500,0.008859,0.012573,0.018214,0.027784,0.031145,0.022997,0.016195,0.012414,0.010478,0.009647,0.009763,0.010916,0.013349,0.017534,0.020106,0.016727,0.012049,0.009207,0.007617,0.007098,0.007517,0.008848,0.008867,0.006730,0.004810,0.003566,0.002737,0.002122,0.001644,0.001252,0.000929,0.000662,0.000447,0.000285,0.000180,0.000139,0.000140,0.000147,0.000144,0.000130,0.000107
  giBassEh30 ftgen 100+3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3_V2) , i(gkPS3)  ,1,1,1	,0.003867,0.005384,0.008278,0.011948,0.018781,0.027378,0.043927,0.124923,0.154756,0.052079,0.035175,0.020879,0.013635,0.009198,0.005837,0.003709,0.002010,0.000982,0.000220,0.000161,0.000370,0.000376,0.000299,0.000147,0.000155,0.000424,0.000832,0.001379,0.002152,0.003202,0.004758,0.006982,0.011177,0.019325,0.029701,0.020304,0.011682,0.007361,0.005041,0.003356,0.002114,0.001056,0.000187,0.001017,0.002186,0.003609,0.005412,0.007905,0.011471,0.017562,0.028740,0.037414,0.026954,0.018054,0.013544,0.011691,0.011440,0.012869,0.016457,0.022485,0.022347,0.015528,0.011112,0.008894,0.008412,0.009625,0.010828,0.008346,0.005596,0.003939,0.002900,0.002141,0.001562,0.001098,0.000729,0.000449,0.000257,0.000169,0.000165,0.000175,0.000167,0.000140,0.000106
  giBassEh33 ftgen 100+4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4_V2) , i(gkPS4)  ,1,1,1	,0.004867,0.007460,0.011945,0.019946,0.031209,0.054453,0.186212,0.117747,0.049349,0.025385,0.015675,0.009940,0.005668,0.003035,0.001342,0.000247,0.000261,0.000440,0.000408,0.000208,0.000179,0.000569,0.001196,0.002093,0.003439,0.005483,0.008701,0.015148,0.030996,0.029556,0.014724,0.008576,0.005437,0.003329,0.001707,0.000348,0.001213,0.002897,0.005055,0.008006,0.012446,0.020472,0.036633,0.042329,0.025547,0.017331,0.014092,0.013706,0.016241,0.022858,0.028248,0.019753,0.013157,0.010345,0.010349,0.012777,0.010845,0.006746,0.004465,0.003112,0.002165,0.001447,0.000902,0.000506,0.000263,0.000193,0.000207,0.000202,0.000165,0.000114
  giBassEh36 ftgen 100+5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5_V2) , i(gkPS5)  ,1,1,1	,0.006269,0.010960,0.018651,0.031612,0.063145,0.234031,0.082814,0.038536,0.021856,0.012390,0.006478,0.002903,0.000884,0.000151,0.000526,0.000481,0.000201,0.000371,0.001091,0.002222,0.004038,0.007052,0.012642,0.026285,0.040191,0.018257,0.009711,0.005602,0.002977,0.000908,0.001205,0.003571,0.006760,0.011575,0.020120,0.038989,0.050394,0.027994,0.018663,0.016137,0.018236,0.026663,0.033012,0.020295,0.013457,0.011996,0.014986,0.012457,0.007161,0.004508,0.002937,0.001849,0.001061,0.000524,0.000256,0.000239,0.000246,0.000199,0.000126
  giBassEh39 ftgen 100+6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6_V2) , i(gkPS6)  ,1,1,1	,0.008173,0.015702,0.032144,0.071650,0.272194,0.080839,0.036707,0.019016,0.009188,0.003840,0.000888,0.000353,0.000631,0.000355,0.000343,0.001326,0.003025,0.005992,0.011542,0.025532,0.048254,0.019676,0.009624,0.004854,0.001705,0.001234,0.004596,0.009451,0.017714,0.036427,0.062296,0.032396,0.020962,0.019531,0.026707,0.040231,0.024114,0.015246,0.015050,0.017756,0.009634,0.005482,0.003293,0.001861,0.000896,0.000362,0.000281,0.000290,0.000215,0.000115,0.000101
  giBassEh42 ftgen 100+7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7_V2) , i(gkPS7)  ,1,1,1	,0.010770,0.023902,0.054774,0.249962,0.104159,0.041772,0.018402,0.007420,0.001965,0.000321,0.000751,0.000293,0.000854,0.002767,0.006422,0.014005,0.038772,0.040687,0.014759,0.006732,0.002120,0.002044,0.007252,0.015890,0.035324,0.075238,0.036306,0.023528,0.025922,0.045315,0.031277,0.017930,0.019424,0.016834,0.007953,0.004326,0.002219,0.000907,0.000341,0.000353,0.000285,0.000144,0.000103,0.000123
  giBassEh45 ftgen 100+8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8_V2) , i(gkPS8)  ,1,1,1	,0.014919,0.039894,0.108912,0.235444,0.050771,0.019880,0.006071,0.000493,0.000880,0.000415,0.001140,0.004191,0.010980,0.030342,0.059163,0.017172,0.006666,0.000696,0.005809,0.016058,0.041074,0.084879,0.034762,0.027511,0.045921,0.039646,0.020777,0.025682,0.013556,0.006258,0.002911,0.001018,0.000389,0.000407,0.000231,0.000117,0.000145
  giBassEh48 ftgen 100+9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9_V2) , i(gkPS9)  ,1,1,1	,0.021924,0.063232,0.468119,0.077063,0.024778,0.005806,0.000302,0.000961,0.000747,0.004455,0.014122,0.052633,0.036527,0.011211,0.001822,0.007148,0.023183,0.078131,0.056059,0.032330,0.053450,0.040659,0.024048,0.024961,0.009037,0.003707,0.001049,0.000481,0.000402,0.000146,0.000173,0.000107
  giBassEh51 ftgen 100+10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10_V2), i(gkPS10) ,1,1,1	,0.031418,0.143370,0.161725,0.038046,0.007682,0.000705,0.000709,0.002656,0.011998,0.051134,0.039384,0.009717,0.002474,0.018934,0.072998,0.064883,0.039139,0.080623,0.030556,0.035586,0.010987,0.003730,0.000725,0.000582,0.000232,0.000203,0.000114
  giBassEh54 ftgen 100+11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11_V2), i(gkPS11) ,1,1,1	,0.047801,0.499973,0.083544,0.014840,0.000643,0.000586,0.005528,0.028009,0.081360,0.013462,0.004094,0.031800,0.150499,0.047062,0.090670,0.035868,0.033668,0.008649,0.001814,0.000708,0.000286,0.000243,0.000113
  giBassEh57 ftgen 100+12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12_V2), i(gkPS12) ,1,1,1	,0.079790,0.470826,0.039758,0.000985,0.000829,0.008383,0.060699,0.034340,0.001390,0.032127,0.169760,0.055035,0.079288,0.051382,0.012516,0.002036,0.000814,0.000234,0.000188,0.000140
  giBassEh60 ftgen 100+13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13_V2), i(gkPS13) ,1,1,1	,0.126470,0.154125,0.011612,0.001926,0.008899,0.105301,0.022420,0.014314,0.156341,0.064675,0.081320,0.049928,0.007414,0.000961,0.000290,0.000213,0.000158
  giBassEh63 ftgen 100+14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14_V2), i(gkPS14) ,1,1,1	,0.286799,0.076099,0.001412,0.005314,0.102313,0.019436,0.037889,0.129794,0.161320,0.071197,0.007462,0.001164,0.000406,0.000186,0.000100
  giBassEh66 ftgen 100+15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15_V2), i(gkPS15) ,1,1,1	,0.999999,0.029677,0.001175,0.056021,0.026921,0.063607,0.094120,0.071732,0.017296,0.001415,0.000487,0.000226,0.000113
  giBassEh69 ftgen 100+16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16_V2), i(gkPS16) ,1,1,1	,0.941545,0.001970,0.016767,0.068666,0.064251,0.110055,0.102753,0.004071,0.000467,0.000280,0.000117
  giBassEh72 ftgen 100+17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17_V2), i(gkPS17) ,1,1,1	,0.308230,0.003850,0.210611,0.028628,0.129335,0.099831,0.001921,0.000427,0.000186
  giBassEh75 ftgen 100+18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18_V2), i(gkPS18) ,1,1,1	,0.152203,0.010631,0.038873,0.259601,0.142407,0.002328,0.000372,0.000102
  giBassEh78 ftgen 100+19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19_V2), i(gkPS19) ,1,1,1	,0.059354,0.112042,0.127210,0.143460,0.002830,0.000452,0.000116
  giBassEh81 ftgen 100+20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20_V2), i(gkPS20) ,1,1,1	,0.003941,0.137332,0.220127,0.008140,0.000560
  giBassEh84 ftgen 100+21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21_V2), i(gkPS21) ,1,1,1	,0.007699,0.057256,0.199662,0.000854,0.000109
 elseif iVoice2==3 then
  giBassEee24 ftgen 100+1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1_V2) , i(gkPS1)  ,1,1,1	,0.010612,0.014495,0.019809,0.028477,0.041398,0.063942,0.114518,0.124942,0.078855,0.046228,0.033959,0.023394,0.018143,0.013375,0.010099,0.007577,0.005431,0.003901,0.002611,0.001632,0.000932,0.000386,0.000171,0.000289,0.000422,0.000452,0.000449,0.000398,0.000315,0.000237,0.000144,0.000104,0.000105,0.000153,0.000215,0.000290,0.000380,0.000487,0.000633,0.000816,0.001099,0.001507,0.002203,0.003126,0.003165,0.002277,0.001567,0.001153,0.000855,0.000658,0.000500,0.000378,0.000277,0.000186,0.000102,0.000154,0.000300,0.000490,0.000733,0.001033,0.001413,0.001885,0.002475,0.003256,0.004250,0.005714,0.007781,0.011083,0.015021,0.015148,0.011378,0.008165,0.006212,0.004895,0.004095,0.003568,0.003306,0.003268,0.003450,0.003938,0.004750,0.006020,0.007017,0.006500,0.005013,0.003837,0.003082,0.002641,0.002479,0.002562
  giBassEee27 ftgen 100+2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2_V2) , i(gkPS2)  ,1,1,1	,0.013361,0.019632,0.028170,0.046001,0.073446,0.142620,0.135320,0.067419,0.045253,0.028671,0.021074,0.014727,0.010611,0.007252,0.004920,0.003071,0.001747,0.000807,0.000249,0.000303,0.000500,0.000540,0.000520,0.000422,0.000309,0.000180,0.000119,0.000127,0.000103,0.000168,0.000256,0.000366,0.000497,0.000673,0.000915,0.001288,0.001877,0.003013,0.003942,0.003063,0.001933,0.001339,0.000949,0.000692,0.000498,0.000349,0.000219,0.000102,0.000105,0.000283,0.000531,0.000867,0.001300,0.001875,0.002609,0.003613,0.004968,0.007064,0.010239,0.015759,0.018744,0.014260,0.009604,0.006959,0.005391,0.004464,0.003989,0.003908,0.004207,0.005028,0.006490,0.008241,0.007854,0.005766,0.004257,0.003368,0.002997,0.003039,0.003534,0.003719,0.002952,0.002107,0.001565,0.001195,0.000929,0.000719,0.000551,0.000410,0.000295,0.000202,0.000133
  giBassEee30 ftgen 100+3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3_V2) , i(gkPS3)  ,1,1,1	,0.016942,0.026728,0.044993,0.073582,0.166083,0.150187,0.067471,0.042023,0.027730,0.018157,0.012270,0.007756,0.004771,0.002544,0.001124,0.000288,0.000418,0.000628,0.000639,0.000532,0.000370,0.000189,0.000133,0.000151,0.000118,0.000167,0.000288,0.000442,0.000634,0.000915,0.001325,0.002073,0.003575,0.004636,0.003020,0.001869,0.001215,0.000836,0.000565,0.000361,0.000186,0.000308,0.000658,0.001154,0.001829,0.002760,0.004060,0.005937,0.009069,0.014428,0.021876,0.018429,0.011479,0.007850,0.005939,0.004916,0.004612,0.004928,0.006092,0.008369,0.009952,0.007626,0.005224,0.003945,0.003510,0.003799,0.004447,0.003710,0.002491,0.001752,0.001285,0.000950,0.000696,0.000493,0.000332,0.000209,0.000125
  giBassEee33 ftgen 100+4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4_V2) , i(gkPS4)  ,1,1,1	,0.021903,0.037076,0.070524,0.170727,0.184856,0.075853,0.042006,0.026533,0.016384,0.009694,0.005423,0.002512,0.000745,0.000367,0.000734,0.000760,0.000589,0.000358,0.000113,0.000157,0.000177,0.000123,0.000164,0.000331,0.000549,0.000839,0.001298,0.002144,0.003934,0.005481,0.003133,0.001834,0.001150,0.000725,0.000430,0.000185,0.000178,0.000585,0.001216,0.002131,0.003468,0.005492,0.008727,0.014780,0.025548,0.021159,0.012320,0.008120,0.006189,0.005514,0.005907,0.007722,0.011241,0.010580,0.006710,0.004738,0.004184,0.004875,0.005074,0.003298,0.002150,0.001485,0.001035,0.000705,0.000453,0.000265,0.000143
  giBassEee36 ftgen 100+5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5_V2) , i(gkPS5)  ,1,1,1	,0.028999,0.056971,0.127925,0.249973,0.092491,0.046808,0.026763,0.015161,0.007806,0.003265,0.000772,0.000577,0.000905,0.000797,0.000474,0.000128,0.000118,0.000208,0.000175,0.000190,0.000430,0.000762,0.001269,0.002203,0.004418,0.006347,0.003143,0.001714,0.001003,0.000555,0.000205,0.000308,0.000984,0.002075,0.003788,0.006543,0.011486,0.022285,0.030464,0.016426,0.009849,0.007181,0.006579,0.007931,0.012129,0.013098,0.007735,0.005325,0.005167,0.006343,0.004251,0.002537,0.001641,0.001065,0.000654,0.000360,0.000176,0.000109,0.000108
  giBassEee39 ftgen 100+6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6_V2) , i(gkPS6)  ,1,1,1	,0.039208,0.091871,0.284850,0.134665,0.057264,0.029417,0.014487,0.006136,0.001614,0.000605,0.001080,0.000843,0.000360,0.000237,0.000205,0.000101,0.000336,0.000730,0.001345,0.002573,0.006021,0.006121,0.002677,0.001384,0.000697,0.000205,0.000565,0.001734,0.003749,0.007227,0.014133,0.031533,0.028537,0.013927,0.008934,0.007821,0.010066,0.016499,0.011547,0.006746,0.006088,0.007451,0.004223,0.002395,0.001442,0.000822,0.000405,0.000174,0.000127,0.000124
  giBassEee42 ftgen 100+7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7_V2) , i(gkPS7)  ,1,1,1	,0.053470,0.147208,0.300415,0.084059,0.036324,0.015517,0.005091,0.000576,0.001256,0.001064,0.000377,0.000160,0.000303,0.000150,0.000341,0.000891,0.001840,0.004161,0.009292,0.003746,0.001676,0.000724,0.000174,0.001325,0.003681,0.008171,0.018259,0.044043,0.023100,0.011960,0.009296,0.012291,0.020077,0.010540,0.007087,0.008984,0.005033,0.002599,0.001411,0.000675,0.000255,0.000150,0.000143
  giBassEee45 ftgen 100+8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8_V2) , i(gkPS8)  ,1,1,1	,0.074148,0.341465,0.151691,0.053062,0.019387,0.005023,0.000735,0.001519,0.000715,0.000141,0.000355,0.000141,0.000664,0.001681,0.004296,0.010976,0.003672,0.001452,0.000370,0.001174,0.004275,0.011021,0.029674,0.042441,0.016298,0.011074,0.015522,0.021253,0.009522,0.009803,0.006632,0.002990,0.001422,0.000537,0.000189,0.000178,0.000110
  giBassEee48 ftgen 100+9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9_V2) , i(gkPS9)  ,1,1,1	,0.113952,0.499961,0.093618,0.030324,0.006532,0.001153,0.001593,0.000254,0.000416,0.000182,0.000869,0.002549,0.008846,0.006282,0.002003,0.000401,0.001977,0.007592,0.023020,0.061020,0.019732,0.013187,0.024324,0.015505,0.010364,0.008518,0.003290,0.001312,0.000353,0.000214,0.000143
  giBassEee51 ftgen 100+10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10_V2), i(gkPS10) ,1,1,1	,0.183849,0.269450,0.058864,0.012277,0.001210,0.001686,0.000115,0.000411,0.000673,0.002694,0.012061,0.005358,0.001397,0.001131,0.007512,0.028323,0.057149,0.017903,0.020182,0.023136,0.012207,0.008465,0.002892,0.000813,0.000255,0.000186
  giBassEee54 ftgen 100+11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11_V2), i(gkPS11) ,1,1,1	,0.294425,0.168105,0.031031,0.001152,0.002129,0.000319,0.000295,0.001773,0.008324,0.007496,0.001451,0.002648,0.016348,0.088119,0.023921,0.024596,0.021078,0.017984,0.005195,0.001344,0.000303,0.000185,0.000105
  giBassEee57 ftgen 100+12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12_V2), i(gkPS12) ,1,1,1	,0.682961,0.106120,0.010046,0.003039,0.000281,0.000282,0.003363,0.021952,0.002902,0.002350,0.022051,0.084871,0.022153,0.042507,0.019617,0.005980,0.001075,0.000355,0.000117
  giBassEee60 ftgen 100+13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13_V2), i(gkPS13) ,1,1,1	,0.999999,0.060648,0.002312,0.000510,0.000354,0.005083,0.012579,0.000821,0.015185,0.122052,0.026381,0.031005,0.017044,0.002622,0.000436,0.000138
  giBassEee63 ftgen 100+14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14_V2), i(gkPS14) ,1,1,1	,0.538975,0.024555,0.003372,0.000823,0.005390,0.010718,0.002266,0.056680,0.035812,0.046282,0.016933,0.001625,0.000371,0.000151
  giBassEee66 ftgen 100+15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15_V2), i(gkPS15) ,1,1,1	,0.336196,0.002303,0.000636,0.003546,0.014990,0.005298,0.176248,0.049197,0.035968,0.002688,0.000369,0.000111
  giBassEee69 ftgen 100+16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16_V2), i(gkPS16) ,1,1,1	,0.212220,0.006076,0.000565,0.043897,0.004701,0.169692,0.084989,0.011954,0.000713,0.000170
  giBassEee72 ftgen 100+17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17_V2), i(gkPS17) ,1,1,1	,0.121291,0.001021,0.010166,0.001642,0.244060,0.061995,0.005244,0.000275,0.000113
  giBassEee75 ftgen 100+18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18_V2), i(gkPS18) ,1,1,1	,0.049112,0.001647,0.021440,0.113388,0.092568,0.003249,0.000304,0.000100
  giBassEee78 ftgen 100+19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19_V2), i(gkPS19) ,1,1,1	,0.004609,0.007093,0.010596,0.098393,0.005375,0.000222
  giBassEee81 ftgen 100+20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20_V2), i(gkPS20) ,1,1,1	,0.012152,0.087798,0.339376,0.023913,0.000340
  giBassEee84 ftgen 100+21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21_V2), i(gkPS21) ,1,1,1	,0.002039,0.003283,0.123990,0.000551,0.000112
 elseif iVoice2==4 then
  giBassOh24 ftgen 100+1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1_V2) , i(gkPS1)  ,1,1,1	,0.002656,0.003252,0.004105,0.005622,0.007160,0.009459,0.013108,0.015856,0.025894,0.031448,0.069195,0.117293,0.097983,0.042979,0.032065,0.021929,0.018078,0.015475,0.014066,0.014550,0.016289,0.021526,0.023582,0.017583,0.010850,0.007974,0.005821,0.004584,0.003615,0.002841,0.002234,0.001707,0.001268,0.000905,0.000600,0.000361,0.000186,0.000124,0.000163,0.000187,0.000186,0.000166,0.000139,0.000101,0.000100,0.000137,0.000189,0.000263,0.000361,0.000489,0.000654,0.000858,0.001117,0.001451,0.001869,0.002471,0.003247,0.004440,0.005393,0.004629,0.002917,0.002066,0.002532,0.003852,0.005391,0.005792,0.004814,0.003675,0.002842,0.002214,0.001763,0.001401,0.001091,0.000746,0.000345,0.000127,0.000165,0.000194,0.000194,0.000185,0.000171,0.000154,0.000137,0.000119,0.000101
  giBassOh27 ftgen 100+2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2_V2) , i(gkPS2)  ,1,1,1	,0.003258,0.004239,0.005824,0.008031,0.011084,0.016213,0.021193,0.035813,0.061897,0.136532,0.111390,0.042393,0.033786,0.022028,0.018961,0.016732,0.017591,0.021496,0.028305,0.022987,0.013061,0.009039,0.006327,0.004802,0.003617,0.002714,0.001972,0.001369,0.000897,0.000513,0.000245,0.000108,0.000159,0.000210,0.000226,0.000203,0.000166,0.000112,0.000138,0.000201,0.000297,0.000435,0.000622,0.000874,0.001199,0.001639,0.002216,0.003089,0.004305,0.006101,0.005978,0.003630,0.002459,0.003410,0.005563,0.006988,0.005953,0.004329,0.003190,0.002395,0.001829,0.001373,0.000891,0.000334,0.000160,0.000222,0.000234,0.000222,0.000202,0.000178,0.000153,0.000127,0.000102
  giBassOh30 ftgen 100+3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3_V2) , i(gkPS3)  ,1,1,1	,0.004023,0.005567,0.008482,0.012147,0.018935,0.027436,0.043784,0.124923,0.156060,0.054359,0.038530,0.025628,0.020731,0.020302,0.024164,0.033681,0.024398,0.013158,0.008555,0.006066,0.004329,0.003073,0.002076,0.001307,0.000716,0.000311,0.000128,0.000209,0.000264,0.000252,0.000205,0.000130,0.000103,0.000161,0.000252,0.000400,0.000621,0.000939,0.001374,0.001992,0.002862,0.004244,0.006522,0.007371,0.004231,0.002979,0.004965,0.007920,0.007484,0.005169,0.003596,0.002580,0.001862,0.001227,0.000441,0.000198,0.000273,0.000271,0.000248,0.000214,0.000179,0.000142,0.000109
  giBassOh33 ftgen 100+4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4_V2) , i(gkPS4)  ,1,1,1	,0.005059,0.007690,0.012187,0.020150,0.031282,0.054249,0.186526,0.120147,0.052781,0.030786,0.024379,0.024804,0.034918,0.035401,0.016807,0.010063,0.006707,0.004475,0.002912,0.001727,0.000868,0.000313,0.000184,0.000294,0.000312,0.000251,0.000145,0.000162,0.000275,0.000476,0.000802,0.001297,0.002024,0.003113,0.004960,0.008196,0.007816,0.003687,0.004946,0.009187,0.008701,0.005588,0.003662,0.002498,0.001599,0.000503,0.000264,0.000332,0.000310,0.000265,0.000215,0.000163,0.000117
  giBassOh36 ftgen 100+5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5_V2) , i(gkPS5)  ,1,1,1	,0.006506,0.011247,0.018924,0.031724,0.062920,0.234685,0.085997,0.043880,0.030968,0.029117,0.043082,0.035194,0.015962,0.009176,0.005688,0.003419,0.001811,0.000723,0.000184,0.000326,0.000373,0.000279,0.000129,0.000146,0.000275,0.000527,0.000981,0.001724,0.002915,0.004964,0.008921,0.009303,0.004152,0.007745,0.011649,0.007393,0.004456,0.002821,0.001501,0.000256,0.000391,0.000373,0.000311,0.000239,0.000169,0.000110
  giBassOh39 ftgen 100+6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6_V2) , i(gkPS6)  ,1,1,1	,0.008468,0.016044,0.032394,0.071542,0.272804,0.084708,0.044003,0.033428,0.042935,0.045900,0.018050,0.009589,0.005421,0.002735,0.001024,0.000216,0.000420,0.000405,0.000225,0.000125,0.000277,0.000594,0.001244,0.002397,0.004430,0.008609,0.011959,0.004919,0.011123,0.011908,0.006381,0.003660,0.001783,0.000320,0.000469,0.000405,0.000305,0.000205,0.000123
  giBassOh42 ftgen 100+7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7_V2) , i(gkPS7)  ,1,1,1	,0.011135,0.024299,0.054889,0.249961,0.108722,0.051276,0.040626,0.067415,0.026335,0.012142,0.006153,0.002616,0.000622,0.000415,0.000502,0.000257,0.000119,0.000122,0.000324,0.000801,0.001884,0.004002,0.008536,0.014820,0.005995,0.015949,0.010404,0.005196,0.002469,0.000400,0.000547,0.000433,0.000288,0.000164
  giBassOh45 ftgen 100+8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8_V2) , i(gkPS8)  ,1,1,1	,0.015381,0.040301,0.108505,0.240245,0.061575,0.049617,0.070803,0.020128,0.008953,0.003454,0.000627,0.000589,0.000502,0.000134,0.000183,0.000551,0.001609,0.004060,0.009951,0.015670,0.009932,0.017456,0.007348,0.003209,0.000530,0.000621,0.000431,0.000236,0.000113
  giBassOh48 ftgen 100+9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9_V2) , i(gkPS9)  ,1,1,1	,0.022496,0.063453,0.469427,0.087754,0.058244,0.070388,0.018356,0.006838,0.001446,0.000651,0.000556,0.000143,0.000122,0.000550,0.001961,0.005833,0.017875,0.008317,0.023338,0.008927,0.003005,0.000784,0.000625,0.000341,0.000143
  giBassOh51 ftgen 100+10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10_V2), i(gkPS10) ,1,1,1	,0.032102,0.143154,0.169468,0.066893,0.091855,0.019191,0.005474,0.000433,0.000811,0.000162,0.000249,0.001190,0.004802,0.017251,0.009855,0.023855,0.007334,0.000641,0.000812,0.000411,0.000150,0.000101
  giBassOh54 ftgen 100+11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11_V2), i(gkPS11) ,1,1,1	,0.048599,0.499974,0.102552,0.134829,0.024280,0.005230,0.000837,0.000520,0.000237,0.000241,0.001607,0.008013,0.029637,0.031910,0.010392,0.000800,0.000865,0.000325,0.000132
  giBassOh57 ftgen 100+12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12_V2), i(gkPS12) ,1,1,1	,0.080605,0.480428,0.099238,0.040254,0.006909,0.001178,0.000182,0.000102,0.001103,0.008123,0.031336,0.034912,0.006417,0.001243,0.000473,0.000155
  giBassOh60 ftgen 100+13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13_V2), i(gkPS13) ,1,1,1	,0.126917,0.175507,0.140772,0.013677,0.001307,0.000241,0.003934,0.035768,0.046682,0.006011,0.001247,0.000283,0.000138
  giBassOh63 ftgen 100+14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14_V2), i(gkPS14) ,1,1,1	,0.286365,0.133810,0.038389,0.000867,0.000107,0.000499,0.009611,0.019717,0.014670,0.001624,0.000299,0.000129
  giBassOh66 ftgen 100+15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15_V2), i(gkPS15) ,1,1,1	,1.000002,0.269661,0.010462,0.001040,0.000483,0.016028,0.063825,0.001601,0.000650,0.000177
  giBassOh69 ftgen 100+16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16_V2), i(gkPS16) ,1,1,1	,0.960747,0.080495,0.002355,0.000205,0.016245,0.069803,0.002487,0.000311,0.000112
  giBassOh72 ftgen 100+17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17_V2), i(gkPS17) ,1,1,1	,0.350990,0.027349,0.007868,0.093348,0.002493,0.000277
  giBassOh75 ftgen 100+18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18_V2), i(gkPS18) ,1,1,1	,0.267641,0.001732,0.001001,0.039440,0.003247,0.000257
  giBassOh78 ftgen 100+19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19_V2), i(gkPS19) ,1,1,1	,0.539313,0.002079,0.032056,0.003202,0.000354
  giBassOh81 ftgen 100+20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20_V2), i(gkPS20) ,1,1,1	,0.160992,0.000409,0.139609,0.000620,0.000116
  giBassOh84 ftgen 100+21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21_V2), i(gkPS21) ,1,1,1	,0.054697,0.015735,0.004986,0.000134
 elseif iVoice2==5 then
  giBassOoh24 ftgen 100+1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1_V2) , i(gkPS1)  ,1,1,1	,0.004170,0.004767,0.005809,0.007125,0.009423,0.012338,0.016616,0.025281,0.036773,0.084223,0.097509,0.055644,0.026776,0.021850,0.013883,0.011537,0.008646,0.005282,0.002155,0.001654,0.001414,0.001239,0.001040,0.000878,0.000785,0.000712,0.000629,0.000575,0.000483,0.000406,0.000327,0.000237,0.000173,0.000104,0.000121,0.000160,0.000207,0.000263,0.000334,0.000421,0.000551,0.000726,0.001018,0.001329,0.001313,0.001049,0.000891,0.000885,0.000983,0.001199,0.001540,0.001977,0.002121,0.001784,0.001340,0.001034,0.000826,0.000705,0.000652,0.000680,0.000715,0.000646,0.000503,0.000390,0.000309,0.000249,0.000204,0.000167,0.000137,0.000111
  giBassOoh27 ftgen 100+2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2_V2) , i(gkPS2)  ,1,1,1	,0.005030,0.006191,0.007651,0.010372,0.014571,0.021434,0.030781,0.071907,0.119545,0.072776,0.031574,0.022556,0.015399,0.011394,0.007041,0.002518,0.001911,0.001634,0.001295,0.001096,0.000937,0.000834,0.000721,0.000630,0.000508,0.000397,0.000272,0.000181,0.000107,0.000153,0.000213,0.000285,0.000379,0.000500,0.000688,0.000967,0.001445,0.001618,0.001277,0.001057,0.001077,0.001285,0.001687,0.002301,0.002526,0.001994,0.001425,0.001068,0.000863,0.000780,0.000826,0.000841,0.000676,0.000495,0.000375,0.000290,0.000229,0.000180,0.000141,0.000108
  giBassOoh30 ftgen 100+3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3_V2) , i(gkPS3)  ,1,1,1	,0.006083,0.008003,0.010711,0.016374,0.024519,0.037449,0.112833,0.124998,0.041417,0.028771,0.018019,0.012343,0.005402,0.002386,0.001972,0.001531,0.001231,0.001066,0.000905,0.000784,0.000607,0.000449,0.000285,0.000153,0.000101,0.000109,0.000153,0.000230,0.000327,0.000460,0.000642,0.000947,0.001505,0.001937,0.001502,0.001242,0.001345,0.001774,0.002567,0.002998,0.002232,0.001518,0.001113,0.000935,0.000970,0.000984,0.000727,0.000511,0.000372,0.000279,0.000210,0.000157,0.000113
  giBassOoh33 ftgen 100+4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4_V2) , i(gkPS4)  ,1,1,1	,0.007502,0.010380,0.016096,0.024230,0.043922,0.147876,0.113247,0.043397,0.022792,0.015355,0.005760,0.002715,0.002152,0.001629,0.001298,0.001071,0.000882,0.000647,0.000405,0.000215,0.000125,0.000127,0.000114,0.000198,0.000315,0.000473,0.000703,0.001106,0.001912,0.002216,0.001551,0.001530,0.002044,0.003150,0.003426,0.002208,0.001462,0.001135,0.001161,0.001127,0.000745,0.000502,0.000355,0.000253,0.000178,0.000120
  giBassOoh36 ftgen 100+5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5_V2) , i(gkPS5)  ,1,1,1	,0.009537,0.014254,0.024685,0.050579,0.168510,0.111335,0.043720,0.023086,0.010571,0.003311,0.002480,0.001757,0.001426,0.001152,0.000813,0.000474,0.000209,0.000141,0.000155,0.000117,0.000124,0.000242,0.000415,0.000671,0.001107,0.002045,0.002638,0.001790,0.001976,0.003097,0.004267,0.002696,0.001662,0.001314,0.001439,0.001013,0.000623,0.000411,0.000275,0.000178,0.000106
  giBassOoh39 ftgen 100+6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6_V2) , i(gkPS6)  ,1,1,1	,0.012372,0.020730,0.042850,0.143721,0.145460,0.045094,0.022771,0.005016,0.003262,0.002189,0.001666,0.001260,0.000793,0.000362,0.000117,0.000168,0.000179,0.000112,0.000138,0.000307,0.000569,0.001000,0.001934,0.003236,0.002114,0.002570,0.004603,0.003988,0.002137,0.001561,0.001683,0.000990,0.000581,0.000361,0.000217,0.000117
  giBassOoh42 ftgen 100+7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7_V2) , i(gkPS7)  ,1,1,1	,0.016008,0.032755,0.074919,0.250025,0.057545,0.024692,0.004776,0.003064,0.002133,0.001569,0.000898,0.000306,0.000146,0.000215,0.000146,0.000188,0.000459,0.000921,0.001903,0.003897,0.002498,0.003572,0.006036,0.003057,0.001884,0.001984,0.001031,0.000565,0.000317,0.000160
  giBassOoh45 ftgen 100+8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8_V2) , i(gkPS8)  ,1,1,1	,0.020759,0.048464,0.295785,0.086792,0.030710,0.005430,0.003258,0.002143,0.001295,0.000430,0.000194,0.000255,0.000111,0.000112,0.000397,0.000949,0.002219,0.004444,0.003070,0.006325,0.004431,0.002278,0.002265,0.001008,0.000508,0.000241
  giBassOoh48 ftgen 100+9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9_V2) , i(gkPS9)  ,1,1,1	,0.028510,0.101166,0.222637,0.046174,0.006623,0.003513,0.002303,0.000949,0.000184,0.000305,0.000110,0.000102,0.000478,0.001339,0.004097,0.003587,0.006207,0.005401,0.002632,0.002031,0.000827,0.000359,0.000115
  giBassOoh51 ftgen 100+10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10_V2), i(gkPS10) ,1,1,1	,0.041474,0.287568,0.090200,0.010044,0.004379,0.002520,0.000724,0.000336,0.000224,0.000275,0.001139,0.003874,0.004235,0.009226,0.004283,0.003373,0.001165,0.000434,0.000107
  giBassOoh54 ftgen 100+11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11_V2), i(gkPS11) ,1,1,1	,0.065511,0.500015,0.049381,0.006128,0.003138,0.000611,0.000437,0.000383,0.001850,0.007794,0.007149,0.006113,0.003967,0.001128,0.000317
  giBassOoh57 ftgen 100+12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12_V2), i(gkPS12) ,1,1,1	,0.096931,0.173581,0.010859,0.004286,0.000861,0.000510,0.000225,0.001899,0.008888,0.012656,0.004558,0.002017,0.000482
  giBassOoh60 ftgen 100+13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13_V2), i(gkPS13) ,1,1,1	,0.202350,0.092351,0.007027,0.001897,0.000620,0.000129,0.000970,0.008202,0.012422,0.005266,0.001649,0.000227
  giBassOoh63 ftgen 100+14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14_V2), i(gkPS14) ,1,1,1	,0.575236,0.020098,0.005041,0.000672,0.000138,0.002281,0.008473,0.008567,0.002331,0.000214
  giBassOoh66 ftgen 100+15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15_V2), i(gkPS15) ,1,1,1	,1.000000,0.012255,0.001224,0.000167,0.000119,0.003699,0.014299,0.007933,0.000634,0.000110
  giBassOoh69 ftgen 100+16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16_V2), i(gkPS16) ,1,1,1	,0.347133,0.008571,0.001019,0.003798,0.025311,0.004032,0.000169
  giBassOoh72 ftgen 100+17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17_V2), i(gkPS17) ,1,1,1	,0.184689,0.003794,0.000258,0.001940,0.024843,0.003298,0.000182
  giBassOoh75 ftgen 100+18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18_V2), i(gkPS18) ,1,1,1	,0.040199,0.001344,0.000201,0.016948,0.004662,0.000147
  giBassOoh78 ftgen 100+19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19_V2), i(gkPS19) ,1,1,1	,0.024509,0.000334,0.007398,0.015866,0.000219
  giBassOoh81 ftgen 100+20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20_V2), i(gkPS20) ,1,1,1	,0.017142,0.050630,0.000336
  giBassOoh84 ftgen 100+21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21_V2), i(gkPS21) ,1,1,1	,0.007586,0.003880,0.006596
 ; TENOR
 elseif iVoice2==6 then
  giTenorAh24 ftgen 100+1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1_V2) , i(gkPS1)  ,1,1,1	,0.000583,0.000538,0.000460,0.000380,0.000388,0.000576,0.000951,0.001458,0.002147,0.003005,0.004083,0.005479,0.007166,0.009451,0.012430,0.016493,0.023155,0.032764,0.051969,0.061659,0.047828,0.030764,0.022969,0.017260,0.014303,0.012261,0.011262,0.011171,0.011848,0.014033,0.017624,0.024861,0.029338,0.024087,0.015948,0.011498,0.008368,0.006382,0.004890,0.003733,0.002846,0.002112,0.001533,0.001072,0.000708,0.000443,0.000260,0.000174,0.000165,0.000177,0.000179,0.000163,0.000135,0.000113,0.000143,0.000167,0.000180,0.000184,0.000185,0.000201,0.000268,0.000401,0.000606,0.000882,0.001240,0.001688,0.002239,0.002922,0.003753,0.004799,0.006128,0.007860,0.010282,0.013541,0.017840,0.020070,0.017502,0.013105,0.010276,0.009233,0.009930,0.012379,0.015621,0.016680,0.014400,0.011294,0.008942,0.007204,0.005991,0.005111,0.004508,0.004114,0.003872,0.003547,0.002939
  giTenorAh27 ftgen 100+2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2_V2) , i(gkPS2)  ,1,1,1	,0.000687,0.000612,0.000487,0.000443,0.000667,0.001204,0.001979,0.003057,0.004439,0.006332,0.008723,0.012150,0.016682,0.024614,0.036410,0.062524,0.071897,0.047198,0.030625,0.021709,0.017111,0.014322,0.013279,0.013564,0.015875,0.020510,0.030613,0.034231,0.023560,0.015114,0.010394,0.007498,0.005453,0.003961,0.002827,0.001944,0.001277,0.000775,0.000433,0.000237,0.000194,0.000210,0.000212,0.000185,0.000139,0.000103,0.000152,0.000190,0.000213,0.000219,0.000222,0.000264,0.000405,0.000664,0.001044,0.001561,0.002232,0.003095,0.004195,0.005621,0.007518,0.010165,0.014016,0.019655,0.023962,0.020629,0.014615,0.011499,0.011311,0.014111,0.018689,0.019687,0.015745,0.011810,0.009057,0.007235,0.006000,0.005218,0.004763,0.004396,0.003608,0.002646,0.002014,0.001621,0.001344,0.001117,0.000916,0.000734,0.000568,0.000422,0.000298,0.000203,0.000142,0.000117,0.000116,0.000118,0.000115
  giTenorAh30 ftgen 100+3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3_V2) , i(gkPS3)  ,1,1,1	,0.000802,0.000674,0.000523,0.000689,0.001389,0.002504,0.004118,0.006355,0.009422,0.013917,0.020353,0.032454,0.055699,0.087276,0.061357,0.036058,0.024181,0.018765,0.016031,0.015921,0.018738,0.025814,0.040021,0.034794,0.019857,0.012723,0.008611,0.005883,0.004012,0.002612,0.001611,0.000893,0.000439,0.000242,0.000241,0.000254,0.000220,0.000152,0.000106,0.000178,0.000230,0.000257,0.000260,0.000288,0.000455,0.000818,0.001385,0.002191,0.003277,0.004737,0.006712,0.009481,0.013715,0.020280,0.027934,0.024626,0.016448,0.013135,0.014739,0.020750,0.023477,0.018047,0.012882,0.009552,0.007507,0.006271,0.005611,0.005025,0.003750,0.002614,0.001991,0.001589,0.001273,0.000999,0.000753,0.000538,0.000359,0.000228,0.000153,0.000136,0.000139,0.000137,0.000122
  giTenorAh33 ftgen 100+4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4_V2) , i(gkPS4)  ,1,1,1	,0.000932,0.000718,0.000659,0.001407,0.002892,0.005202,0.008652,0.013651,0.021662,0.036789,0.070120,0.102139,0.054521,0.032839,0.023181,0.019038,0.019227,0.024920,0.041242,0.045371,0.023935,0.014094,0.008980,0.005704,0.003505,0.002002,0.000991,0.000417,0.000274,0.000304,0.000270,0.000176,0.000182,0.000265,0.000306,0.000311,0.000394,0.000759,0.001464,0.002554,0.004117,0.006330,0.009569,0.014606,0.023150,0.033635,0.026442,0.017079,0.016240,0.023483,0.027945,0.019964,0.013524,0.009824,0.007738,0.006717,0.005807,0.003917,0.002676,0.002012,0.001549,0.001160,0.000819,0.000533,0.000316,0.000191,0.000162,0.000167,0.000158,0.000129
  giTenorAh36 ftgen 100+5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5_V2) , i(gkPS5)  ,1,1,1	,0.001076,0.000760,0.001152,0.002918,0.006013,0.010963,0.018910,0.033003,0.065564,0.123397,0.061570,0.034546,0.024544,0.022364,0.028096,0.049779,0.048235,0.023028,0.012783,0.007477,0.004231,0.002147,0.000887,0.000349,0.000355,0.000327,0.000195,0.000152,0.000288,0.000361,0.000371,0.000539,0.001217,0.002491,0.004498,0.007542,0.012318,0.020674,0.035880,0.035208,0.020677,0.019986,0.031450,0.029001,0.018014,0.012074,0.009087,0.007807,0.005927,0.003587,0.002503,0.001834,0.001291,0.000830,0.000470,0.000249,0.000194,0.000200,0.000178,0.000130
  giTenorAh39 ftgen 100+6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6_V2) , i(gkPS6)  ,1,1,1	,0.001221,0.000884,0.002403,0.006103,0.012641,0.024258,0.049147,0.124843,0.094249,0.043351,0.028599,0.027085,0.040952,0.068353,0.030182,0.014975,0.007910,0.003883,0.001548,0.000473,0.000421,0.000370,0.000161,0.000304,0.000426,0.000443,0.000809,0.002086,0.004462,0.008387,0.015033,0.028032,0.047931,0.029239,0.022629,0.037393,0.031509,0.018127,0.012012,0.009537,0.007224,0.004034,0.002693,0.001836,0.001138,0.000598,0.000284,0.000232,0.000231,0.000177,0.000105
  giTenorAh42 ftgen 100+7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7_V2) , i(gkPS7)  ,1,1,1	,0.001347,0.001378,0.005009,0.012714,0.027848,0.064949,0.174667,0.072154,0.037557,0.031873,0.051698,0.069662,0.025483,0.011788,0.005236,0.001791,0.000485,0.000510,0.000306,0.000357,0.000517,0.000580,0.001645,0.004407,0.009531,0.019083,0.040846,0.049561,0.026461,0.041849,0.036370,0.019264,0.012655,0.010146,0.005280,0.003211,0.002020,0.001088,0.000460,0.000274,0.000277,0.000199,0.000106,0.000102
  giTenorAh45 ftgen 100+8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8_V2) , i(gkPS8)  ,1,1,1	,0.001435,0.002814,0.010404,0.027304,0.073592,0.204283,0.065680,0.038086,0.049867,0.090768,0.028199,0.011415,0.004006,0.000835,0.000609,0.000353,0.000145,0.000530,0.000623,0.001521,0.005124,0.012704,0.029322,0.067515,0.034280,0.047183,0.040088,0.019737,0.013502,0.007873,0.004048,0.002335,0.001073,0.000384,0.000337,0.000259,0.000126,0.000121,0.000110
  giTenorAh48 ftgen 100+9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9_V2) , i(gkPS9)  ,1,1,1	,0.001521,0.005836,0.021928,0.066019,0.246823,0.069099,0.044735,0.099607,0.046071,0.014964,0.004298,0.000698,0.000655,0.000576,0.000744,0.002438,0.009011,0.024682,0.071912,0.041426,0.063055,0.036096,0.018215,0.011882,0.005020,0.002589,0.000943,0.000389,0.000358,0.000166,0.000147,0.000118
  giTenorAh51 ftgen 100+10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10_V2), i(gkPS10) ,1,1,1	,0.001771,0.012217,0.048556,0.249892,0.086762,0.054219,0.136820,0.029974,0.007772,0.000947,0.000741,0.000186,0.000854,0.001622,0.008944,0.030132,0.096048,0.045359,0.063137,0.024077,0.014480,0.005399,0.002282,0.000570,0.000463,0.000211,0.000176,0.000111
  giTenorAh54 ftgen 100+11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11_V2), i(gkPS11) ,1,1,1	,0.002757,0.025433,0.129910,0.144292,0.063753,0.139297,0.023565,0.003578,0.001018,0.000106,0.001032,0.003292,0.019074,0.081740,0.052932,0.072742,0.025316,0.010562,0.004040,0.000921,0.000554,0.000212,0.000203
  giTenorAh57 ftgen 100+12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12_V2), i(gkPS12) ,1,1,1	,0.005629,0.054612,0.408549,0.076173,0.181522,0.022828,0.001670,0.000706,0.001061,0.003044,0.025417,0.135064,0.094412,0.039477,0.015746,0.004670,0.000769,0.000519,0.000243,0.000120,0.000116
  giTenorAh60 ftgen 100+13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13_V2), i(gkPS13) ,1,1,1	,0.011675,0.132064,0.138210,0.199271,0.029918,0.001395,0.000113,0.001485,0.018035,0.143887,0.126163,0.036439,0.010040,0.001886,0.000716,0.000291,0.000124
  giTenorAh63 ftgen 100+14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14_V2), i(gkPS14) ,1,1,1	,0.024440,0.499943,0.108469,0.059961,0.001897,0.000373,0.003245,0.060299,0.090767,0.048171,0.010803,0.001140,0.000421,0.000222,0.000136
  giTenorAh66 ftgen 100+15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15_V2), i(gkPS15) ,1,1,1	,0.050867,0.288566,0.278569,0.007157,0.000212,0.006586,0.163506,0.145461,0.021119,0.001842,0.000424,0.000177,0.000102
  giTenorAh69 ftgen 100+16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16_V2), i(gkPS16) ,1,1,1	,0.109214,0.152326,0.045647,0.001411,0.006088,0.270092,0.078932,0.009337,0.001038,0.000241,0.000131
  giTenorAh72 ftgen 100+17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17_V2), i(gkPS17) ,1,1,1	,0.264112,0.398522,0.002789,0.002968,0.287762,0.072864,0.003770,0.000582,0.000183,0.000108
  giTenorAh75 ftgen 100+18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18_V2), i(gkPS18) ,1,1,1	,1.000000,0.119936,0.000746,0.120626,0.096351,0.002278,0.000445,0.000181
  giTenorAh78 ftgen 100+19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19_V2), i(gkPS19) ,1,1,1	,0.577120,0.014313,0.013172,0.290914,0.003683,0.000354,0.000139
  giTenorAh81 ftgen 100+20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20_V2), i(gkPS20) ,1,1,1	,0.304668,0.002822,0.540234,0.018674,0.000482,0.000178
  giTenorAh84 ftgen 100+21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21_V2), i(gkPS21) ,1,1,1	,0.797043,0.005936,0.145727,0.001164,0.000216
 elseif iVoice2==7 then
  giTenorEh24 ftgen 100+1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1_V2) , i(gkPS1)  ,1,1,1	,0.003711,0.004448,0.005620,0.007420,0.009664,0.012761,0.017128,0.022353,0.032172,0.044202,0.073680,0.104950,0.091828,0.054791,0.037776,0.026500,0.019680,0.014875,0.011123,0.008435,0.006205,0.004488,0.003152,0.002073,0.001292,0.000697,0.000324,0.000231,0.000316,0.000377,0.000378,0.000345,0.000277,0.000200,0.000121,0.000127,0.000231,0.000372,0.000572,0.000833,0.001169,0.001615,0.002156,0.002881,0.003837,0.005088,0.007184,0.010048,0.015987,0.019744,0.015794,0.009935,0.007135,0.005064,0.003843,0.002896,0.002183,0.001646,0.001193,0.000842,0.000546,0.000290,0.000179,0.000420,0.000705,0.001053,0.001472,0.002002,0.002658,0.003482,0.004575,0.005975,0.008042,0.010971,0.015644,0.021201,0.021315,0.015876,0.011198,0.008260,0.006172,0.004757,0.003667,0.002902,0.002421,0.002278,0.002500,0.003021,0.003820,0.004887,0.006330,0.008360,0.011171,0.014732,0.016196,0.013872,0.010516
  giTenorEh27 ftgen 100+2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2_V2) , i(gkPS2)  ,1,1,1	,0.004552,0.005760,0.007814,0.010792,0.014955,0.021165,0.029612,0.045235,0.074156,0.122974,0.105870,0.057214,0.038741,0.025625,0.018589,0.013142,0.009439,0.006465,0.004364,0.002718,0.001559,0.000735,0.000308,0.000321,0.000440,0.000451,0.000405,0.000302,0.000194,0.000158,0.000311,0.000537,0.000866,0.001309,0.001925,0.002713,0.003839,0.005325,0.007903,0.011718,0.020082,0.022933,0.014817,0.009328,0.006254,0.004484,0.003195,0.002291,0.001599,0.001065,0.000642,0.000286,0.000381,0.000762,0.001246,0.001850,0.002651,0.003674,0.005077,0.006985,0.009944,0.014441,0.022249,0.026413,0.019930,0.013155,0.009153,0.006590,0.004826,0.003613,0.002894,0.002744,0.003188,0.004118,0.005508,0.007468,0.010395,0.014756,0.019114,0.017765,0.012963,0.009621,0.007541,0.006420,0.005922,0.006058,0.006871,0.008554,0.009629,0.007928,0.005529,0.003971,0.002926,0.002205,0.001657,0.001233,0.000892
  giTenorEh30 ftgen 100+3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3_V2) , i(gkPS3)  ,1,1,1	,0.005607,0.007614,0.011207,0.016365,0.024712,0.037348,0.060375,0.121842,0.141500,0.072108,0.044425,0.028047,0.018770,0.012615,0.008179,0.005124,0.002879,0.001420,0.000505,0.000350,0.000521,0.000532,0.000443,0.000289,0.000131,0.000204,0.000437,0.000812,0.001364,0.002176,0.003280,0.004954,0.007398,0.011851,0.021792,0.027213,0.015773,0.009598,0.006088,0.004119,0.002767,0.001798,0.001092,0.000534,0.000408,0.000945,0.001653,0.002596,0.003890,0.005707,0.008347,0.012773,0.020361,0.030867,0.025823,0.015735,0.010227,0.007000,0.004859,0.003600,0.003233,0.003864,0.005306,0.007526,0.011040,0.016627,0.022728,0.019669,0.013379,0.009687,0.007778,0.007000,0.007281,0.008747,0.011171,0.010086,0.006655,0.004490,0.003153,0.002248,0.001593,0.001092,0.000713,0.000433,0.000247,0.000157,0.000144,0.000149,0.000141,0.000119
  giTenorEh33 ftgen 100+4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4_V2) , i(gkPS4)  ,1,1,1	,0.007001,0.010427,0.016456,0.026630,0.043168,0.076989,0.169617,0.125049,0.061026,0.034673,0.021596,0.013484,0.007893,0.004258,0.001928,0.000584,0.000462,0.000640,0.000585,0.000382,0.000160,0.000329,0.000737,0.001424,0.002500,0.004083,0.006621,0.011222,0.020906,0.033101,0.018125,0.010139,0.006169,0.003823,0.002339,0.001300,0.000525,0.000152,0.000829,0.001747,0.003025,0.004885,0.007717,0.012276,0.020847,0.036056,0.029616,0.016722,0.010179,0.006565,0.004476,0.003867,0.004909,0.007299,0.011244,0.018113,0.027071,0.022114,0.014163,0.010128,0.008501,0.008626,0.010768,0.013620,0.009945,0.006082,0.003944,0.002638,0.001744,0.001093,0.000630,0.000328,0.000188,0.000175,0.000178,0.000156,0.000116
  giTenorEh36 ftgen 100+5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5_V2) , i(gkPS5)  ,1,1,1	,0.008898,0.014845,0.025531,0.044722,0.088437,0.209987,0.109632,0.053027,0.029768,0.016881,0.008983,0.004150,0.001395,0.000463,0.000755,0.000691,0.000400,0.000255,0.000745,0.001668,0.003236,0.005773,0.010198,0.020143,0.039588,0.019923,0.010157,0.005810,0.003302,0.001689,0.000582,0.000359,0.001415,0.002957,0.005341,0.009195,0.016165,0.031454,0.042867,0.022527,0.012419,0.007380,0.004874,0.005036,0.007696,0.012757,0.022519,0.032658,0.021211,0.013339,0.010317,0.010331,0.013816,0.015314,0.008765,0.005134,0.003184,0.001938,0.001090,0.000535,0.000250,0.000207,0.000210,0.000173,0.000113
  giTenorEh39 ftgen 100+6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6_V2) , i(gkPS6)  ,1,1,1	,0.011502,0.021549,0.042263,0.090322,0.245564,0.114253,0.051172,0.026245,0.012912,0.005428,0.001469,0.000641,0.000901,0.000604,0.000162,0.000315,0.001073,0.002614,0.005421,0.010640,0.023418,0.045836,0.018645,0.008963,0.004582,0.002130,0.000572,0.000762,0.002491,0.005301,0.010156,0.019894,0.044518,0.039884,0.018319,0.009661,0.005793,0.006382,0.011028,0.020816,0.038283,0.025968,0.015109,0.011870,0.013774,0.019307,0.011088,0.005870,0.003324,0.001790,0.000830,0.000329,0.000246,0.000244,0.000178
  giTenorEh42 ftgen 100+7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7_V2) , i(gkPS7)  ,1,1,1	,0.015233,0.032741,0.074724,0.243797,0.144246,0.056112,0.025240,0.010252,0.002839,0.000700,0.001067,0.000580,0.000104,0.000883,0.002741,0.006585,0.014845,0.043733,0.031620,0.012214,0.005557,0.002198,0.000195,0.001893,0.005217,0.011479,0.025712,0.062141,0.031662,0.014093,0.007252,0.007795,0.015192,0.033589,0.039695,0.019565,0.014153,0.017708,0.020404,0.009087,0.004554,0.002215,0.000878,0.000317,0.000301,0.000241,0.000125
  giTenorEh45 ftgen 100+8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8_V2) , i(gkPS8)  ,1,1,1	,0.020852,0.053258,0.153984,0.250056,0.069342,0.026968,0.008516,0.001168,0.001282,0.000765,0.000162,0.001475,0.005006,0.013261,0.041892,0.036286,0.012356,0.004686,0.001052,0.001663,0.006070,0.015487,0.041856,0.059403,0.020427,0.008986,0.009865,0.022609,0.054432,0.028468,0.017103,0.021683,0.020009,0.007941,0.003514,0.001272,0.000379,0.000357,0.000233,0.000104,0.000116
  giTenorEh48 ftgen 100+9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9_V2) , i(gkPS9)  ,1,1,1	,0.029695,0.089457,0.420024,0.106052,0.033762,0.008298,0.000925,0.001385,0.000186,0.001501,0.006486,0.020422,0.079237,0.020329,0.006617,0.001174,0.002828,0.010697,0.032394,0.085861,0.024877,0.009765,0.015434,0.045175,0.042511,0.020691,0.027733,0.017578,0.006386,0.002185,0.000498,0.000422,0.000230,0.000123,0.000124
  giTenorEh51 ftgen 100+10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10_V2), i(gkPS10) ,1,1,1	,0.043127,0.180772,0.228631,0.052523,0.010863,0.001282,0.001207,0.000630,0.005235,0.021308,0.091756,0.017942,0.004263,0.001528,0.010624,0.039871,0.079869,0.019355,0.012797,0.041749,0.052038,0.023798,0.038715,0.011768,0.003590,0.000660,0.000489,0.000194,0.000164
  giTenorEh54 ftgen 100+11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11_V2), i(gkPS11) ,1,1,1	,0.065477,0.487624,0.112219,0.020505,0.001401,0.001155,0.001754,0.013158,0.087497,0.024420,0.004380,0.003803,0.022978,0.124331,0.028184,0.015603,0.067238,0.039134,0.035441,0.018175,0.004427,0.000636,0.000482,0.000172,0.000145
  giTenorEh57 ftgen 100+12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12_V2), i(gkPS12) ,1,1,1	,0.106518,0.500069,0.053933,0.002334,0.001530,0.002950,0.026528,0.072557,0.009371,0.003329,0.030986,0.118789,0.017972,0.045243,0.056938,0.043394,0.015883,0.002543,0.000714,0.000208,0.000179,0.000107
  giTenorEh60 ftgen 100+13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13_V2), i(gkPS13) ,1,1,1	,0.178931,0.212116,0.016600,0.002767,0.002985,0.040842,0.040651,0.002326,0.021412,0.171741,0.019535,0.090410,0.041394,0.035157,0.004372,0.000844,0.000247,0.000120
  giTenorEh63 ftgen 100+14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14_V2), i(gkPS14) ,1,1,1	,0.361640,0.105064,0.002567,0.001261,0.042631,0.035890,0.003057,0.079786,0.038715,0.083552,0.047617,0.023541,0.001321,0.000388,0.000190,0.000108
  giTenorEh66 ftgen 100+15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15_V2), i(gkPS15) ,1,1,1	,0.975277,0.041007,0.002314,0.026319,0.048835,0.007606,0.248676,0.031209,0.078257,0.036342,0.001274,0.000344,0.000170
  giTenorEh69 ftgen 100+16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16_V2), i(gkPS16) ,1,1,1	,0.999999,0.004669,0.005900,0.145077,0.006659,0.237507,0.090489,0.086786,0.005082,0.000415,0.000215,0.000103
  giTenorEh72 ftgen 100+17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17_V2), i(gkPS17) ,1,1,1	,0.424187,0.005531,0.081687,0.004650,0.343420,0.180822,0.070293,0.001686,0.000240,0.000139
  giTenorEh75 ftgen 100+18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18_V2), i(gkPS18) ,1,1,1	,0.210142,0.002525,0.071786,0.159607,0.167145,0.047085,0.000779,0.000220
  giTenorEh78 ftgen 100+19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19_V2), i(gkPS19) ,1,1,1	,0.082013,0.052640,0.015212,0.062417,0.072683,0.000688,0.000200
  giTenorEh81 ftgen 100+20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20_V2), i(gkPS20) ,1,1,1	,0.009338,0.290149,0.475002,0.173594,0.000829,0.000206
  giTenorEh84 ftgen 100+21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21_V2), i(gkPS21) ,1,1,1	,0.011062,0.009300,0.361645,0.003372,0.000278
 elseif iVoice2==8 then
  giTenorEee24 ftgen 100+1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1_V2) , i(gkPS1)  ,1,1,1	,0.007836,0.009017,0.011311,0.014842,0.018645,0.029937,0.038490,0.092836,0.120812,0.077127,0.033458,0.027877,0.016830,0.013887,0.009932,0.007423,0.005705,0.003965,0.002903,0.001947,0.001187,0.000715,0.000276,0.000168,0.000280,0.000294,0.000295,0.000264,0.000200,0.000154,0.000111,0.000202,0.000314,0.000470,0.000672,0.000922,0.001256,0.001662,0.002194,0.002908,0.003823,0.005290,0.007297,0.010980,0.014156,0.012522,0.008422,0.005960,0.004302,0.003220,0.002441,0.001839,0.001385,0.001017,0.000728,0.000498,0.000315,0.000172,0.000153,0.000269,0.000415,0.000594,0.000822,0.001105,0.001457,0.001919,0.002506,0.003348,0.004555,0.006428,0.008898,0.009355,0.007247,0.005218,0.004033,0.003245,0.002812,0.002568,0.002513,0.002633,0.002927,0.003483,0.004336,0.005623,0.006787,0.006501
  giTenorEee27 ftgen 100+2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2_V2) , i(gkPS2)  ,1,1,1	,0.009549,0.011595,0.015950,0.020100,0.035178,0.051554,0.130198,0.125062,0.047558,0.034534,0.019595,0.015158,0.010326,0.007489,0.004997,0.003422,0.002102,0.001160,0.000517,0.000131,0.000196,0.000347,0.000349,0.000335,0.000261,0.000188,0.000102,0.000117,0.000241,0.000405,0.000645,0.000960,0.001392,0.001953,0.002719,0.003785,0.005367,0.007876,0.012538,0.016966,0.013606,0.008442,0.005765,0.004012,0.002889,0.002064,0.001464,0.000997,0.000649,0.000381,0.000181,0.000125,0.000280,0.000481,0.000736,0.001075,0.001512,0.002098,0.002890,0.004070,0.005876,0.009027,0.011425,0.009230,0.006235,0.004602,0.003652,0.003170,0.003002,0.003138,0.003573,0.004460,0.005915,0.007838,0.007914,0.005903,0.004220,0.003145,0.002512,0.002171,0.002123,0.002075,0.001670,0.001214,0.000931,0.000732,0.000589,0.000472,0.000374,0.000289,0.000216
  giTenorEee30 ftgen 100+3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3_V2) , i(gkPS3)  ,1,1,1	,0.011630,0.015290,0.021759,0.037725,0.057788,0.163156,0.117975,0.044909,0.026599,0.018812,0.011933,0.008144,0.004975,0.003001,0.001508,0.000594,0.000130,0.000311,0.000418,0.000409,0.000314,0.000210,0.000107,0.000263,0.000494,0.000849,0.001339,0.002047,0.003027,0.004491,0.006866,0.010927,0.018703,0.017814,0.010239,0.006481,0.004290,0.002881,0.001930,0.001234,0.000740,0.000381,0.000122,0.000299,0.000577,0.000950,0.001469,0.002176,0.003199,0.004773,0.007413,0.012158,0.012680,0.008124,0.005577,0.004243,0.003652,0.003588,0.004011,0.005100,0.007116,0.009602,0.008448,0.005627,0.003915,0.002969,0.002529,0.002523,0.002225,0.001542,0.001115,0.000840,0.000647,0.000496,0.000369,0.000263,0.000176,0.000109
  giTenorEee33 ftgen 100+4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4_V2) , i(gkPS4)  ,1,1,1	,0.014340,0.021213,0.032104,0.055421,0.189690,0.120221,0.050550,0.026047,0.016045,0.010125,0.005723,0.003021,0.001308,0.000246,0.000324,0.000496,0.000471,0.000309,0.000160,0.000115,0.000295,0.000626,0.001166,0.001976,0.003173,0.005084,0.008393,0.014976,0.024026,0.015041,0.008440,0.005111,0.003182,0.001956,0.001114,0.000544,0.000160,0.000136,0.000453,0.000897,0.001549,0.002490,0.003935,0.006420,0.011227,0.016103,0.010451,0.006593,0.004861,0.004256,0.004516,0.005730,0.008419,0.011629,0.008791,0.005493,0.003779,0.003042,0.003014,0.002416,0.001563,0.001093,0.000802,0.000584,0.000408,0.000266,0.000158
  giTenorEee36 ftgen 100+5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5_V2) , i(gkPS5)  ,1,1,1	,0.018039,0.029693,0.059894,0.185737,0.154314,0.055778,0.027787,0.014854,0.007935,0.003897,0.001432,0.000187,0.000561,0.000590,0.000401,0.000185,0.000117,0.000134,0.000109,0.000405,0.000942,0.001848,0.003332,0.005831,0.010609,0.022023,0.025121,0.011959,0.006463,0.003691,0.002042,0.001000,0.000346,0.000540,0.001193,0.002221,0.003859,0.006735,0.012934,0.018831,0.010505,0.006536,0.005174,0.005305,0.007021,0.011338,0.013114,0.007641,0.004738,0.003619,0.003554,0.002391,0.001498,0.001024,0.000703,0.000458,0.000268,0.000136
  giTenorEee39 ftgen 100+6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6_V2) , i(gkPS6)  ,1,1,1	,0.023171,0.040165,0.103046,0.249899,0.069009,0.030296,0.014964,0.006837,0.002317,0.000262,0.000693,0.000670,0.000375,0.000134,0.000157,0.000234,0.000809,0.001919,0.003902,0.007563,0.015739,0.033909,0.016874,0.008020,0.004127,0.001993,0.000762,0.000560,0.001472,0.003025,0.005784,0.011760,0.022871,0.012484,0.007312,0.006012,0.007155,0.011847,0.015854,0.008455,0.005033,0.004257,0.003348,0.001866,0.001182,0.000751,0.000433,0.000208
  giTenorEee42 ftgen 100+7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7_V2) , i(gkPS7)  ,1,1,1	,0.030585,0.075466,0.326397,0.089842,0.037631,0.016293,0.006004,0.001189,0.000623,0.000819,0.000421,0.000187,0.000122,0.000220,0.000997,0.002690,0.006079,0.013783,0.037543,0.020537,0.008608,0.003873,0.001483,0.000243,0.000604,0.001913,0.004382,0.009617,0.024507,0.016361,0.008552,0.007239,0.010299,0.019396,0.011363,0.006002,0.005105,0.003117,0.001699,0.001004,0.000533,0.000219,0.000103,0.000108
  giTenorEee45 ftgen 100+8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8_V2) , i(gkPS8)  ,1,1,1	,0.042426,0.110844,0.240398,0.052093,0.020251,0.006042,0.000491,0.000993,0.000619,0.000230,0.000590,0.002336,0.006356,0.016818,0.048133,0.016906,0.006376,0.002233,0.000321,0.000910,0.003109,0.007901,0.022561,0.020975,0.009763,0.009076,0.016934,0.017670,0.007601,0.006066,0.003146,0.001615,0.000823,0.000318,0.000124,0.000127
  giTenorEee48 ftgen 100+9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9_V2) , i(gkPS9)  ,1,1,1	,0.059390,0.371533,0.111553,0.029708,0.007793,0.000375,0.001180,0.000370,0.000232,0.000146,0.000819,0.003706,0.011680,0.044106,0.023926,0.007382,0.001997,0.000198,0.002392,0.007734,0.025933,0.021044,0.010370,0.014081,0.026288,0.009501,0.007130,0.003002,0.001408,0.000534,0.000152,0.000151
  giTenorEee51 ftgen 100+10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10_V2), i(gkPS10) ,1,1,1	,0.080361,0.499941,0.060609,0.013679,0.000525,0.001340,0.000163,0.000315,0.000469,0.003843,0.015148,0.067904,0.016057,0.003990,0.002951,0.011593,0.045827,0.014651,0.014346,0.031778,0.010090,0.006709,0.002369,0.000868,0.000190,0.000173
  giTenorEee54 ftgen 100+11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11_V2), i(gkPS11) ,1,1,1	,0.150937,0.179680,0.032584,0.002376,0.001637,0.000158,0.000252,0.001981,0.012152,0.075113,0.017221,0.002972,0.001205,0.008768,0.049043,0.017107,0.020616,0.022725,0.010214,0.003400,0.001068,0.000208,0.000166
  giTenorEee57 ftgen 100+12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12_V2), i(gkPS12) ,1,1,1	,0.221694,0.104185,0.012082,0.001986,0.000188,0.000185,0.004673,0.033646,0.033807,0.004465,0.001822,0.015810,0.041944,0.018160,0.035337,0.012137,0.003231,0.000635,0.000256
  giTenorEee60 ftgen 100+13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13_V2), i(gkPS13) ,1,1,1	,0.743154,0.059418,0.000747,0.000739,0.000301,0.007400,0.088245,0.014776,0.000388,0.015476,0.042088,0.028181,0.019002,0.006011,0.001075,0.000301,0.000101
  giTenorEee63 ftgen 100+14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14_V2), i(gkPS14) ,1,1,1	,0.999999,0.027360,0.002680,0.000630,0.007690,0.135857,0.007982,0.005905,0.091694,0.028709,0.020187,0.004740,0.000381,0.000133
  giTenorEee66 ftgen 100+15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15_V2), i(gkPS15) ,1,1,1	,0.359360,0.004751,0.000315,0.003964,0.150241,0.005941,0.017540,0.034212,0.045442,0.006799,0.000416,0.000140
  giTenorEee69 ftgen 100+16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16_V2), i(gkPS16) ,1,1,1	,0.208351,0.003970,0.000371,0.067291,0.008928,0.031620,0.036318,0.024271,0.001270,0.000155
  giTenorEee72 ftgen 100+17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17_V2), i(gkPS17) ,1,1,1	,0.118830,0.001480,0.014801,0.029546,0.030951,0.056360,0.012020,0.000602
  giTenorEee75 ftgen 100+18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18_V2), i(gkPS18) ,1,1,1	,0.054723,0.001258,0.271741,0.011812,0.057430,0.009479,0.000266
  giTenorEee78 ftgen 100+19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19_V2), i(gkPS19) ,1,1,1	,0.009503,0.007927,0.011882,0.068422,0.013599,0.000280
  giTenorEee81 ftgen 100+20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20_V2), i(gkPS20) ,1,1,1	,0.007941,0.134597,0.063248,0.048544,0.000311
  giTenorEee84 ftgen 100+21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21_V2), i(gkPS21) ,1,1,1	,0.002957,0.059093,0.112719,0.001203,0.000131
 elseif iVoice2==9 then
  giTenorOh24 ftgen 100+1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1_V2) , i(gkPS1)  ,1,1,1	,0.002609,0.003212,0.004071,0.005593,0.007140,0.009447,0.013108,0.015876,0.025921,0.031520,0.069218,0.117217,0.097674,0.042519,0.031624,0.021238,0.017323,0.014353,0.012627,0.012174,0.012732,0.014614,0.019478,0.026308,0.024844,0.016400,0.010959,0.008002,0.005958,0.004623,0.003544,0.002734,0.002055,0.001508,0.001067,0.000705,0.000436,0.000235,0.000143,0.000144,0.000177,0.000192,0.000182,0.000161,0.000124,0.000104,0.000128,0.000145,0.000153,0.000156,0.000157,0.000181,0.000242,0.000356,0.000521,0.000741,0.001027,0.001380,0.001829,0.002381,0.003069,0.003965,0.005082,0.006691,0.008822,0.012074,0.015298,0.014009,0.009283,0.006092,0.006121,0.008720,0.012324,0.013604,0.011387,0.008379,0.005974,0.003793,0.001511,0.000709,0.001826,0.001937,0.001735,0.001456,0.001193,0.000965,0.000774,0.000620
  giTenorOh27 ftgen 100+2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2_V2) , i(gkPS2)  ,1,1,1	,0.003203,0.004193,0.005787,0.008004,0.011069,0.016214,0.021222,0.035866,0.061952,0.136461,0.110996,0.041891,0.033083,0.021225,0.017671,0.014999,0.014528,0.015884,0.020089,0.030066,0.029796,0.018039,0.011760,0.008010,0.005921,0.004311,0.003164,0.002231,0.001534,0.000966,0.000557,0.000270,0.000164,0.000189,0.000228,0.000219,0.000192,0.000139,0.000133,0.000165,0.000180,0.000186,0.000188,0.000227,0.000336,0.000535,0.000821,0.001216,0.001726,0.002403,0.003262,0.004422,0.005950,0.008247,0.011486,0.016679,0.017937,0.011848,0.007184,0.007840,0.012354,0.016239,0.014304,0.010016,0.006636,0.003533,0.000306,0.002001,0.002325,0.002034,0.001635,0.001282,0.000989,0.000760,0.000584,0.000453,0.000355,0.000283,0.000227,0.000183,0.000149,0.000123,0.000103
  giTenorOh30 ftgen 100+3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3_V2) , i(gkPS3)  ,1,1,1	,0.003960,0.005516,0.008444,0.012125,0.018936,0.027471,0.043879,0.124923,0.155727,0.053732,0.037654,0.024575,0.019046,0.017222,0.018408,0.024108,0.037434,0.030007,0.016142,0.010296,0.007092,0.004871,0.003350,0.002173,0.001311,0.000693,0.000293,0.000193,0.000251,0.000266,0.000236,0.000161,0.000147,0.000194,0.000215,0.000221,0.000238,0.000349,0.000604,0.001006,0.001590,0.002388,0.003477,0.004987,0.007107,0.010506,0.015883,0.021912,0.015844,0.008572,0.009907,0.016773,0.018799,0.013123,0.008157,0.003769,0.000813,0.002743,0.002542,0.001996,0.001496,0.001097,0.000802,0.000589,0.000439,0.000334,0.000257,0.000200,0.000157,0.000127,0.000107
  giTenorOh33 ftgen 100+4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4_V2) , i(gkPS4)  ,1,1,1	,0.004986,0.007636,0.012153,0.020144,0.031323,0.054374,0.186452,0.119440,0.051970,0.029606,0.022330,0.020530,0.024026,0.039836,0.039006,0.018975,0.011161,0.007228,0.004658,0.002839,0.001584,0.000735,0.000266,0.000262,0.000323,0.000286,0.000181,0.000138,0.000212,0.000253,0.000263,0.000299,0.000510,0.000968,0.001707,0.002787,0.004353,0.006688,0.010300,0.016543,0.025924,0.017916,0.009680,0.015265,0.023074,0.016822,0.009587,0.003290,0.002408,0.003229,0.002528,0.001800,0.001245,0.000857,0.000598,0.000428,0.000313,0.000233,0.000176,0.000139,0.000117,0.000102
  giTenorOh36 ftgen 100+5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5_V2) , i(gkPS5)  ,1,1,1	,0.006425,0.011190,0.018900,0.031763,0.063063,0.234533,0.085077,0.042498,0.028723,0.024364,0.029248,0.052657,0.032828,0.016019,0.009256,0.005473,0.003020,0.001411,0.000472,0.000289,0.000385,0.000324,0.000169,0.000209,0.000292,0.000313,0.000363,0.000715,0.001488,0.002773,0.004783,0.007968,0.013450,0.024276,0.028174,0.012256,0.017548,0.027382,0.016871,0.007639,0.001429,0.003903,0.002935,0.001946,0.001251,0.000808,0.000539,0.000371,0.000260,0.000189,0.000148,0.000125,0.000105
  giTenorOh39 ftgen 100+6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6_V2) , i(gkPS6)  ,1,1,1	,0.008376,0.015990,0.032397,0.071647,0.272662,0.083705,0.042399,0.029965,0.031725,0.060042,0.036024,0.015995,0.008610,0.004457,0.001931,0.000539,0.000377,0.000438,0.000278,0.000188,0.000329,0.000372,0.000455,0.001070,0.002432,0.004805,0.008844,0.016499,0.033376,0.023715,0.015683,0.032489,0.020044,0.007073,0.004006,0.004073,0.002568,0.001523,0.000908,0.000566,0.000367,0.000246,0.000180,0.000147,0.000118
  giTenorOh42 ftgen 100+7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7_V2) , i(gkPS7)  ,1,1,1	,0.011034,0.024255,0.054958,0.249960,0.107468,0.049168,0.034461,0.048258,0.060049,0.020609,0.009752,0.004351,0.001387,0.000382,0.000531,0.000321,0.000134,0.000183,0.000390,0.000442,0.000696,0.002019,0.004800,0.010033,0.021149,0.044106,0.017250,0.033814,0.026431,0.007582,0.005537,0.004027,0.002216,0.001191,0.000676,0.000405,0.000256,0.000192,0.000151,0.000111
  giTenorOh45 ftgen 100+8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8_V2) , i(gkPS8)  ,1,1,1	,0.015273,0.040290,0.108755,0.238831,0.059213,0.041067,0.079700,0.037954,0.014459,0.005681,0.001470,0.000525,0.000572,0.000143,0.000149,0.000276,0.000507,0.000599,0.001942,0.005592,0.013421,0.033213,0.035928,0.030674,0.033762,0.006591,0.006489,0.003618,0.001724,0.000862,0.000468,0.000280,0.000206,0.000147,0.000101
  giTenorOh48 ftgen 100+9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9_V2) , i(gkPS9)  ,1,1,1	,0.022381,0.063531,0.469122,0.084990,0.048733,0.105348,0.032042,0.010949,0.002821,0.000574,0.000647,0.000166,0.000185,0.000584,0.000720,0.002976,0.009583,0.026955,0.056424,0.035183,0.033796,0.002879,0.005885,0.002510,0.001081,0.000521,0.000299,0.000213,0.000130
  giTenorOh51 ftgen 100+10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10_V2), i(gkPS10) ,1,1,1	,0.031994,0.143365,0.167462,0.059961,0.120183,0.032013,0.008919,0.001080,0.000876,0.000112,0.000190,0.000377,0.000745,0.002145,0.009630,0.033066,0.047478,0.065117,0.014161,0.008162,0.003051,0.001136,0.000494,0.000295,0.000181,0.000121
  giTenorOh54 ftgen 100+11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11_V2), i(gkPS11) ,1,1,1	,0.048511,0.499973,0.098337,0.096526,0.041209,0.008700,0.000772,0.000645,0.000267,0.000365,0.000886,0.004049,0.020077,0.088236,0.067669,0.015154,0.008053,0.002378,0.000809,0.000383,0.000218,0.000140
  giTenorOh57 ftgen 100+12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12_V2), i(gkPS12) ,1,1,1	,0.080583,0.477600,0.082135,0.075901,0.011361,0.001051,0.000287,0.001014,0.003886,0.026853,0.071839,0.067519,0.012982,0.003449,0.000937,0.000412,0.000202,0.000131
  giTenorOh60 ftgen 100+13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13_V2), i(gkPS13) ,1,1,1	,0.127073,0.169977,0.210725,0.021898,0.001155,0.000367,0.001455,0.019176,0.112848,0.067589,0.011765,0.002161,0.000595,0.000260,0.000153
  giTenorOh63 ftgen 100+14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14_V2), i(gkPS14) ,1,1,1	,0.286787,0.119943,0.064037,0.002159,0.000224,0.000754,0.004292,0.066166,0.130304,0.016330,0.002272,0.000591,0.000243,0.000124
  giTenorOh66 ftgen 100+15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15_V2), i(gkPS15) ,1,1,1	,1.000000,0.193060,0.017402,0.001290,0.000730,0.008099,0.176475,0.030291,0.004757,0.000766,0.000282,0.000138
  giTenorOh69 ftgen 100+16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16_V2), i(gkPS16) ,1,1,1	,0.955092,0.151776,0.002102,0.000192,0.007772,0.143628,0.025957,0.001874,0.000402,0.000171
  giTenorOh72 ftgen 100+17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17_V2), i(gkPS17) ,1,1,1	,0.339931,0.043789,0.000154,0.002909,0.225646,0.023525,0.001190,0.000305,0.000120
  giTenorOh75 ftgen 100+18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18_V2), i(gkPS18) ,1,1,1	,0.239903,0.004318,0.001511,0.132362,0.032662,0.001182,0.000249
  giTenorOh78 ftgen 100+19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19_V2), i(gkPS19) ,1,1,1	,0.386114,0.002580,0.016199,0.060581,0.001531,0.000277
  giTenorOh81 ftgen 100+20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20_V2), i(gkPS20) ,1,1,1	,0.303561,0.000384,0.287242,0.003746,0.000342
  giTenorOh84 ftgen 100+21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21_V2), i(gkPS21) ,1,1,1	,0.087577,0.005818,0.047050,0.000610,0.000103
 elseif iVoice2==10 then
  giTenorOoh24 ftgen 100+1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1_V2) , i(gkPS1)  ,1,1,1	,0.004160,0.004756,0.005796,0.007110,0.009404,0.012319,0.016588,0.025253,0.036732,0.084172,0.097499,0.055655,0.026840,0.021900,0.014064,0.011724,0.009450,0.006251,0.002854,0.002079,0.001522,0.001320,0.001012,0.000844,0.000726,0.000657,0.000578,0.000532,0.000449,0.000378,0.000306,0.000221,0.000161,0.000112,0.000145,0.000197,0.000271,0.000371,0.000502,0.000666,0.000873,0.001133,0.001454,0.001875,0.002392,0.003125,0.004070,0.005451,0.006740,0.005949,0.003815,0.003032,0.004216,0.006465,0.009166,0.010218,0.008738,0.006687,0.005210,0.004127,0.003395,0.002882,0.002550,0.002381,0.002374,0.002539,0.002842
  giTenorOoh27 ftgen 100+2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2_V2) , i(gkPS2)  ,1,1,1	,0.005018,0.006177,0.007634,0.010351,0.014548,0.021399,0.030750,0.071843,0.119517,0.072786,0.031652,0.022635,0.015612,0.012023,0.008250,0.003348,0.002272,0.001786,0.001280,0.001064,0.000866,0.000770,0.000661,0.000586,0.000473,0.000372,0.000254,0.000169,0.000102,0.000123,0.000163,0.000233,0.000341,0.000493,0.000700,0.000970,0.001326,0.001786,0.002410,0.003241,0.004476,0.006249,0.008081,0.006509,0.003821,0.004319,0.007145,0.010967,0.012075,0.009457,0.006928,0.005206,0.004101,0.003382,0.002964,0.002823,0.002955,0.003370,0.003360,0.002535,0.001765,0.001296,0.000988,0.000767,0.000592,0.000451,0.000332,0.000236,0.000160,0.000105
  giTenorOoh30 ftgen 100+3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3_V2) , i(gkPS3)  ,1,1,1	,0.006069,0.007985,0.010689,0.016347,0.024478,0.037411,0.112759,0.124998,0.041485,0.028849,0.018264,0.013449,0.006554,0.003139,0.002141,0.001509,0.001181,0.000981,0.000833,0.000728,0.000565,0.000421,0.000265,0.000141,0.000101,0.000117,0.000142,0.000198,0.000307,0.000479,0.000736,0.001090,0.001584,0.002260,0.003208,0.004668,0.006836,0.009554,0.007100,0.004250,0.006687,0.011831,0.014395,0.010804,0.007515,0.005449,0.004235,0.003554,0.003339,0.003592,0.004112,0.003422,0.002223,0.001532,0.001113,0.000822,0.000601,0.000424,0.000284,0.000179,0.000109
  giTenorOoh33 ftgen 100+4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4_V2) , i(gkPS4)  ,1,1,1	,0.007484,0.010358,0.016064,0.024189,0.043878,0.147795,0.113259,0.043500,0.023110,0.016473,0.007061,0.003259,0.002323,0.001591,0.001196,0.000986,0.000820,0.000603,0.000378,0.000199,0.000110,0.000113,0.000104,0.000123,0.000148,0.000202,0.000327,0.000558,0.000928,0.001473,0.002265,0.003459,0.005340,0.008451,0.011341,0.006178,0.006471,0.013053,0.017137,0.011865,0.007810,0.005560,0.004372,0.003989,0.004406,0.004836,0.003238,0.002015,0.001363,0.000950,0.000651,0.000420,0.000250,0.000139
  giTenorOoh36 ftgen 100+5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5_V2) , i(gkPS5)  ,1,1,1	,0.009514,0.014225,0.024646,0.050523,0.168409,0.111356,0.043820,0.023460,0.012509,0.004160,0.002642,0.001689,0.001315,0.001065,0.000757,0.000443,0.000192,0.000123,0.000137,0.000101,0.000120,0.000148,0.000186,0.000291,0.000545,0.001008,0.001755,0.002924,0.004809,0.008185,0.013559,0.007678,0.008486,0.018454,0.017597,0.010496,0.006842,0.005140,0.004787,0.005732,0.004640,0.002578,0.001610,0.001047,0.000655,0.000372,0.000189,0.000109,0.000102
  giTenorOoh39 ftgen 100+6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6_V2) , i(gkPS6)  ,1,1,1	,0.012343,0.020687,0.042780,0.143593,0.145481,0.045253,0.024030,0.006681,0.003567,0.002127,0.001539,0.001172,0.000743,0.000337,0.000147,0.000158,0.000139,0.000180,0.000245,0.000466,0.000987,0.001939,0.003573,0.006484,0.012507,0.013031,0.008641,0.021946,0.018929,0.010423,0.006772,0.005654,0.006751,0.005079,0.002597,0.001537,0.000903,0.000473,0.000212,0.000124,0.000121
  giTenorOoh42 ftgen 100+7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7_V2) , i(gkPS7)  ,1,1,1	,0.015973,0.032700,0.074843,0.250024,0.057702,0.026906,0.006281,0.003020,0.001964,0.001456,0.000842,0.000281,0.000120,0.000190,0.000125,0.000117,0.000172,0.000230,0.000397,0.000965,0.002195,0.004549,0.009401,0.019240,0.008562,0.023865,0.021772,0.010988,0.007172,0.007255,0.006908,0.003095,0.001662,0.000857,0.000363,0.000158,0.000146,0.000111
  giTenorOoh45 ftgen 100+8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8_V2) , i(gkPS8)  ,1,1,1	,0.020715,0.048381,0.295623,0.086997,0.032947,0.006518,0.003184,0.001972,0.001207,0.000399,0.000165,0.000225,0.000166,0.000247,0.000405,0.001120,0.002956,0.006943,0.016973,0.012394,0.026234,0.023823,0.011169,0.008018,0.009723,0.004053,0.001912,0.000846,0.000280,0.000172,0.000144
  giTenorOoh48 ftgen 100+9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9_V2) , i(gkPS9)  ,1,1,1	,0.028452,0.101054,0.222679,0.046921,0.008320,0.003378,0.002130,0.000886,0.000146,0.000269,0.000181,0.000290,0.000582,0.002022,0.005860,0.016406,0.015371,0.037003,0.021032,0.010304,0.011498,0.005167,0.002100,0.000748,0.000221,0.000191
  giTenorOoh51 ftgen 100+10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10_V2), i(gkPS10) ,1,1,1	,0.041389,0.287313,0.090518,0.013371,0.004256,0.002343,0.000674,0.000295,0.000189,0.000130,0.000278,0.000491,0.001979,0.007162,0.025068,0.017327,0.037924,0.013572,0.013536,0.005205,0.001811,0.000424,0.000243,0.000123
  giTenorOoh54 ftgen 100+11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11_V2), i(gkPS11) ,1,1,1	,0.065400,0.500015,0.053810,0.006040,0.002913,0.000562,0.000387,0.000141,0.000350,0.000798,0.004390,0.018813,0.017129,0.043544,0.014348,0.013820,0.003325,0.000724,0.000290,0.000124
  giTenorOoh57 ftgen 100+12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12_V2), i(gkPS12) ,1,1,1	,0.096766,0.173992,0.013034,0.003944,0.000798,0.000451,0.000332,0.000810,0.005915,0.033962,0.052501,0.022340,0.019449,0.003824,0.000560,0.000287,0.000114
  giTenorOoh60 ftgen 100+13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13_V2), i(gkPS13) ,1,1,1	,0.202127,0.093846,0.006755,0.001771,0.000549,0.000186,0.000594,0.004041,0.032826,0.074042,0.020610,0.010337,0.001493,0.000384,0.000136
  giTenorOoh63 ftgen 100+14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14_V2), i(gkPS14) ,1,1,1	,0.574725,0.026750,0.004688,0.000591,0.000260,0.000983,0.014330,0.034680,0.027154,0.010414,0.000848,0.000246,0.000117
  giTenorOoh66 ftgen 100+15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15_V2), i(gkPS15) ,1,1,1	,0.999999,0.012080,0.001126,0.000101,0.000282,0.001597,0.037631,0.087072,0.027634,0.001448,0.000249
  giTenorOoh69 ftgen 100+16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16_V2), i(gkPS16) ,1,1,1	,0.347954,0.007887,0.000902,0.000132,0.001620,0.067927,0.044669,0.007647,0.000575,0.000129
  giTenorOoh72 ftgen 100+17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17_V2), i(gkPS17) ,1,1,1	,0.187680,0.003542,0.000182,0.001188,0.065653,0.041213,0.002984,0.000272
  giTenorOoh75 ftgen 100+18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18_V2), i(gkPS18) ,1,1,1	,0.053502,0.001181,0.000524,0.028666,0.054314,0.001696,0.000234
  giTenorOoh78 ftgen 100+19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19_V2), i(gkPS19) ,1,1,1	,0.024159,0.000201,0.003194,0.174139,0.002895,0.000179
  giTenorOoh81 ftgen 100+20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20_V2), i(gkPS20) ,1,1,1	,0.015774,0.000264,0.135872,0.015294,0.000258
  giTenorOoh84 ftgen 100+21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21_V2), i(gkPS21) ,1,1,1	,0.007082,0.002375,0.082425,0.000545
 ; COUNTERTENOR
 elseif iVoice2==11 then
  giCountertenorAh24 ftgen 100+1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1_V2) , i(gkPS1)  ,1,1,1	,0.000622,0.000579,0.000505,0.000416,0.000404,0.000563,0.000935,0.001450,0.002158,0.003063,0.004178,0.005657,0.007437,0.009784,0.012967,0.016948,0.023788,0.032799,0.051846,0.069434,0.060781,0.039066,0.027913,0.020569,0.016254,0.013456,0.011669,0.010899,0.010953,0.011875,0.014299,0.018107,0.025757,0.032911,0.029411,0.019830,0.013946,0.010125,0.007600,0.005820,0.004423,0.003377,0.002523,0.001848,0.001319,0.000899,0.000595,0.000380,0.000265,0.000228,0.000227,0.000228,0.000214,0.000192,0.000160,0.000127,0.000135,0.000199,0.000281,0.000383,0.000508,0.000661,0.000851,0.001091,0.001400,0.001829,0.002402,0.003168,0.003603,0.003179,0.002384,0.001859,0.001660,0.001771,0.002195,0.002778,0.002998,0.002611,0.002049,0.001621,0.001304,0.001084,0.000925,0.000816,0.000745
  giCountertenorAh27 ftgen 100+2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2_V2) , i(gkPS2)  ,1,1,1	,0.000735,0.000662,0.000536,0.000470,0.000654,0.001187,0.001971,0.003095,0.004543,0.006527,0.009051,0.012579,0.017418,0.025067,0.036897,0.062520,0.083382,0.061395,0.037338,0.026171,0.019458,0.015588,0.013449,0.012898,0.013720,0.016734,0.022266,0.033995,0.038925,0.027154,0.017317,0.011854,0.008501,0.006153,0.004459,0.003184,0.002202,0.001467,0.000918,0.000551,0.000338,0.000273,0.000271,0.000267,0.000243,0.000203,0.000155,0.000111,0.000121,0.000200,0.000308,0.000447,0.000626,0.000852,0.001149,0.001540,0.002109,0.002917,0.003991,0.004205,0.003195,0.002308,0.001985,0.002187,0.002895,0.003567,0.003282,0.002484,0.001880,0.001465,0.001192,0.001010,0.000899,0.000836,0.000741,0.000567,0.000414,0.000324,0.000266,0.000223,0.000186,0.000152,0.000121
  giCountertenorAh30 ftgen 100+3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3_V2) , i(gkPS3)  ,1,1,1	,0.000859,0.000737,0.000570,0.000685,0.001368,0.002498,0.004192,0.006507,0.009781,0.014407,0.021215,0.033314,0.054502,0.095648,0.079270,0.043918,0.028744,0.021058,0.016749,0.015325,0.016241,0.020739,0.030451,0.046307,0.036821,0.021184,0.013513,0.009191,0.006237,0.004238,0.002750,0.001701,0.000967,0.000518,0.000340,0.000320,0.000317,0.000281,0.000219,0.000154,0.000105,0.000201,0.000341,0.000534,0.000794,0.001139,0.001619,0.002329,0.003422,0.004882,0.004650,0.003126,0.002393,0.002545,0.003536,0.004253,0.003418,0.002429,0.001787,0.001395,0.001156,0.001026,0.000931,0.000712,0.000489,0.000368,0.000293,0.000237,0.000189,0.000145,0.000106
  giCountertenorAh33 ftgen 100+4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4_V2) , i(gkPS4)  ,1,1,1	,0.001001,0.000790,0.000685,0.001374,0.002883,0.005307,0.008904,0.014153,0.022631,0.037604,0.068470,0.117881,0.069973,0.039907,0.026187,0.019843,0.018237,0.020805,0.030099,0.052526,0.044464,0.023490,0.013922,0.008867,0.005619,0.003393,0.001911,0.000964,0.000476,0.000379,0.000381,0.000331,0.000241,0.000152,0.000120,0.000258,0.000474,0.000785,0.001223,0.001861,0.002867,0.004562,0.006080,0.004315,0.002924,0.003059,0.004530,0.004842,0.003317,0.002269,0.001676,0.001348,0.001192,0.000989,0.000643,0.000449,0.000343,0.000266,0.000200,0.000142
  giCountertenorAh36 ftgen 100+5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5_V2) , i(gkPS5)  ,1,1,1	,0.001159,0.000833,0.001127,0.002901,0.006128,0.011319,0.019577,0.033913,0.065634,0.138955,0.078186,0.041169,0.026935,0.021819,0.023774,0.036256,0.065905,0.039715,0.020280,0.011658,0.006765,0.003703,0.001801,0.000761,0.000458,0.000456,0.000385,0.000254,0.000139,0.000103,0.000271,0.000566,0.001022,0.001711,0.002815,0.004833,0.007250,0.004799,0.003342,0.004420,0.006040,0.004129,0.002629,0.001866,0.001503,0.001298,0.000824,0.000531,0.000388,0.000284,0.000196,0.000121
  giCountertenorAh39 ftgen 100+6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6_V2) , i(gkPS6)  ,1,1,1	,0.001323,0.000939,0.002370,0.006179,0.013031,0.025116,0.050054,0.124839,0.122598,0.052264,0.031128,0.025756,0.033416,0.067885,0.054229,0.023674,0.012290,0.006360,0.002931,0.001101,0.000546,0.000534,0.000406,0.000222,0.000118,0.000103,0.000242,0.000615,0.001251,0.002297,0.004218,0.007984,0.006394,0.003973,0.005794,0.006570,0.003764,0.002387,0.001801,0.001484,0.000829,0.000532,0.000372,0.000243,0.000138
  giCountertenorAh42 ftgen 100+7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7_V2) , i(gkPS7)  ,1,1,1	,0.001473,0.001369,0.004998,0.013019,0.028826,0.066670,0.191435,0.087882,0.042145,0.030678,0.041530,0.092746,0.042423,0.018412,0.008493,0.003408,0.001039,0.000642,0.000564,0.000309,0.000143,0.000118,0.000210,0.000683,0.001594,0.003257,0.006894,0.009365,0.004822,0.007137,0.006892,0.003605,0.002334,0.001880,0.000988,0.000593,0.000383,0.000215
  giCountertenorAh45 ftgen 100+8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8_V2) , i(gkPS8)  ,1,1,1	,0.001580,0.002749,0.010614,0.028309,0.075224,0.235778,0.079815,0.039694,0.041631,0.105124,0.046998,0.017743,0.006790,0.001929,0.000758,0.000664,0.000304,0.000154,0.000113,0.000242,0.000953,0.002455,0.005759,0.012206,0.005872,0.009102,0.006662,0.003369,0.002397,0.001292,0.000690,0.000403,0.000185
  giCountertenorAh48 ftgen 100+9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9_V2) , i(gkPS9)  ,1,1,1	,0.001665,0.005802,0.022639,0.067838,0.277959,0.082343,0.043643,0.072542,0.079439,0.023326,0.007411,0.001524,0.000914,0.000509,0.000186,0.000132,0.000538,0.002041,0.005636,0.014527,0.006699,0.012109,0.005270,0.003013,0.001652,0.000778,0.000392,0.000133
  giCountertenorAh51 ftgen 100+10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10_V2), i(gkPS10) ,1,1,1	,0.001879,0.012367,0.050272,0.249889,0.104596,0.051557,0.135917,0.047385,0.012730,0.002203,0.001070,0.000444,0.000205,0.000486,0.002508,0.008455,0.012808,0.011617,0.007544,0.003612,0.001661,0.000745,0.000277
  giCountertenorAh54 ftgen 100+11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11_V2), i(gkPS11) ,1,1,1	,0.002739,0.026042,0.133355,0.175744,0.061363,0.185512,0.036813,0.006813,0.001283,0.000619,0.000238,0.000104,0.001374,0.006525,0.018731,0.014280,0.007212,0.003761,0.001187,0.000430,0.000106
  giCountertenorAh57 ftgen 100+12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12_V2), i(gkPS12) ,1,1,1	,0.005498,0.056620,0.471547,0.079386,0.210272,0.035484,0.003858,0.001328,0.000308,0.000117,0.001906,0.011522,0.011745,0.013323,0.004796,0.001380,0.000371,0.000133
  giCountertenorAh60 ftgen 100+13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13_V2), i(gkPS13) ,1,1,1	,0.011607,0.135706,0.164696,0.145131,0.046646,0.003046,0.001018,0.000264,0.001087,0.011288,0.013399,0.010542,0.003304,0.000785,0.000154
  giCountertenorAh63 ftgen 100+14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14_V2), i(gkPS14) ,1,1,1	,0.024741,0.499940,0.103142,0.094789,0.004409,0.000888,0.000177,0.005018,0.025621,0.015091,0.003323,0.000554,0.000160
  giCountertenorAh66 ftgen 100+15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15_V2), i(gkPS15) ,1,1,1	,0.052086,0.351464,0.371032,0.013625,0.001238,0.000209,0.013050,0.028566,0.007522,0.000861,0.000171
  giCountertenorAh69 ftgen 100+16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16_V2), i(gkPS16) ,1,1,1	,0.113230,0.158750,0.070954,0.002655,0.000236,0.023043,0.026638,0.002759,0.000266
  giCountertenorAh72 ftgen 100+17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17_V2), i(gkPS17) ,1,1,1	,0.271393,0.290247,0.006089,0.000528,0.022576,0.021078,0.001570,0.000118
  giCountertenorAh75 ftgen 100+18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18_V2), i(gkPS18) ,1,1,1	,1.000001,0.189594,0.001776,0.010036,0.030183,0.001107,0.000150
  giCountertenorAh78 ftgen 100+19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19_V2), i(gkPS19) ,1,1,1	,0.702916,0.027248,0.000418,0.057129,0.001722,0.000133
  giCountertenorAh81 ftgen 100+20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20_V2), i(gkPS20) ,1,1,1	,0.317514,0.005311,0.046093,0.005518,0.000190
  giCountertenorAh84 ftgen 100+21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21_V2), i(gkPS21) ,1,1,1	,0.580494,0.001056,0.042157,0.000235
 elseif iVoice2==12 then
  giCountertenorEh24 ftgen 100+1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1_V2) , i(gkPS1)  ,1,1,1	,0.001407,0.001909,0.002654,0.003601,0.004888,0.006467,0.008499,0.011368,0.014805,0.020766,0.028754,0.045419,0.070436,0.068915,0.043266,0.028132,0.020165,0.014552,0.011119,0.008287,0.006270,0.004661,0.003363,0.002384,0.001583,0.000990,0.000554,0.000266,0.000187,0.000237,0.000286,0.000284,0.000259,0.000207,0.000143,0.000115,0.000212,0.000361,0.000554,0.000797,0.001116,0.001495,0.001997,0.002660,0.003508,0.004943,0.006866,0.010908,0.013782,0.011286,0.007103,0.005073,0.003604,0.002726,0.002060,0.001553,0.001173,0.000855,0.000607,0.000405,0.000237,0.000102,0.000142,0.000257,0.000388,0.000538,0.000722,0.000944,0.001216,0.001571,0.002018,0.002669,0.003593,0.005060,0.006932,0.007192,0.005615,0.004200,0.003465,0.003069,0.003039,0.003286,0.003878,0.004703,0.004898,0.004167,0.003337,0.002887,0.002710,0.002818,0.003204,0.003908,0.004910
  giCountertenorEh27 ftgen 100+2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2_V2) , i(gkPS2)  ,1,1,1	,0.001760,0.002580,0.003766,0.005400,0.007590,0.010513,0.014826,0.020586,0.031392,0.050841,0.085318,0.074894,0.040539,0.027387,0.018076,0.013133,0.009279,0.006665,0.004564,0.003073,0.001908,0.001086,0.000511,0.000236,0.000261,0.000339,0.000336,0.000293,0.000209,0.000123,0.000106,0.000226,0.000430,0.000709,0.001084,0.001575,0.002218,0.003126,0.004372,0.006522,0.010363,0.016022,0.014016,0.008187,0.005534,0.003746,0.002718,0.001937,0.001388,0.000948,0.000622,0.000358,0.000154,0.000191,0.000360,0.000557,0.000798,0.001104,0.001493,0.002025,0.002744,0.003904,0.005749,0.008373,0.008259,0.005844,0.004423,0.003722,0.003634,0.004027,0.005025,0.005913,0.005254,0.004033,0.003408,0.003246,0.003572,0.004377,0.005760,0.006334,0.005015,0.003516,0.002533,0.001874,0.001408,0.001059,0.000788,0.000573,0.000405,0.000272,0.000175,0.000109
  giCountertenorEh30 ftgen 100+3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3_V2) , i(gkPS3)  ,1,1,1	,0.002230,0.003552,0.005479,0.008344,0.012266,0.018381,0.028255,0.045291,0.091892,0.093320,0.046217,0.028853,0.018680,0.012419,0.008371,0.005365,0.003320,0.001818,0.000856,0.000315,0.000307,0.000407,0.000387,0.000299,0.000173,0.000214,0.000472,0.000862,0.001419,0.002166,0.003268,0.004826,0.007739,0.013719,0.019452,0.012299,0.007218,0.004524,0.003078,0.002064,0.001362,0.000843,0.000456,0.000166,0.000314,0.000574,0.000894,0.001319,0.001890,0.002704,0.004006,0.006196,0.009856,0.009370,0.006160,0.004704,0.004267,0.004706,0.006105,0.006965,0.005453,0.004205,0.003832,0.004261,0.005524,0.007380,0.006685,0.004432,0.002994,0.002099,0.001494,0.001061,0.000733,0.000488,0.000304,0.000177,0.000104
  giCountertenorEh33 ftgen 100+4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4_V2) , i(gkPS4)  ,1,1,1	,0.002887,0.005002,0.008336,0.013250,0.021432,0.036173,0.067184,0.125012,0.067454,0.036388,0.021564,0.013251,0.008195,0.004726,0.002405,0.000993,0.000329,0.000429,0.000479,0.000385,0.000209,0.000200,0.000531,0.001087,0.001932,0.003147,0.005052,0.008695,0.016946,0.022167,0.011132,0.006361,0.003959,0.002459,0.001486,0.000816,0.000333,0.000360,0.000731,0.001217,0.001892,0.002907,0.004565,0.007708,0.012368,0.009215,0.006087,0.005095,0.005647,0.007722,0.007793,0.005459,0.004595,0.005065,0.006975,0.009015,0.006440,0.003971,0.002578,0.001720,0.001140,0.000724,0.000427,0.000229,0.000121,0.000102
  giCountertenorEh36 ftgen 100+5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5_V2) , i(gkPS5)  ,1,1,1	,0.003820,0.007205,0.012939,0.022744,0.041548,0.090875,0.137894,0.056293,0.029121,0.016585,0.009329,0.004772,0.001982,0.000532,0.000474,0.000568,0.000415,0.000167,0.000107,0.000231,0.000723,0.001597,0.002997,0.005333,0.009912,0.021876,0.022637,0.010177,0.005470,0.003116,0.001715,0.000813,0.000206,0.000285,0.000781,0.001450,0.002444,0.004058,0.007225,0.013945,0.011299,0.006974,0.006118,0.007810,0.009866,0.006724,0.005463,0.006461,0.009905,0.009117,0.005103,0.003040,0.001880,0.001137,0.000638,0.000315,0.000147,0.000119,0.000122,0.000104
  giCountertenorEh39 ftgen 100+6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6_V2) , i(gkPS6)  ,1,1,1	,0.005152,0.010784,0.020993,0.041111,0.101534,0.149567,0.054696,0.026229,0.013311,0.006139,0.002170,0.000472,0.000676,0.000586,0.000246,0.000127,0.000452,0.001417,0.003147,0.006248,0.013035,0.032027,0.016366,0.007490,0.003873,0.001896,0.000717,0.000720,0.001596,0.002988,0.005491,0.011506,0.016531,0.008854,0.007274,0.010059,0.010519,0.006824,0.007155,0.011539,0.010048,0.005075,0.002823,0.001580,0.000811,0.000351,0.000153,0.000145,0.000134
  giCountertenorEh42 ftgen 100+7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7_V2) , i(gkPS7)  ,1,1,1	,0.007108,0.016693,0.036775,0.090623,0.186687,0.057721,0.024848,0.010735,0.003637,0.000631,0.000815,0.000597,0.000102,0.000150,0.000433,0.001732,0.004346,0.009685,0.027540,0.024661,0.009079,0.004147,0.001697,0.000337,0.000629,0.001796,0.003803,0.008068,0.019855,0.012401,0.008599,0.012317,0.010998,0.007737,0.011164,0.013499,0.006048,0.003019,0.001484,0.000615,0.000211,0.000173,0.000156
  giCountertenorEh45 ftgen 100+8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8_V2) , i(gkPS8)  ,1,1,1	,0.010002,0.026500,0.072350,0.250024,0.072769,0.026502,0.009452,0.001985,0.000858,0.000771,0.000180,0.001063,0.003870,0.010120,0.033965,0.022292,0.007930,0.002977,0.000666,0.000722,0.002442,0.005835,0.015483,0.018490,0.010231,0.015520,0.010969,0.010186,0.018128,0.007983,0.003461,0.001456,0.000460,0.000199,0.000194,0.000107
  giCountertenorEh48 ftgen 100+9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9_V2) , i(gkPS9)  ,1,1,1	,0.014412,0.045494,0.181791,0.112588,0.033171,0.009544,0.001064,0.001135,0.000329,0.000220,0.001449,0.006000,0.019846,0.045292,0.010951,0.003439,0.000417,0.001563,0.004898,0.014483,0.022627,0.012262,0.019775,0.010955,0.019872,0.010229,0.003771,0.001279,0.000296,0.000245,0.000142
  giCountertenorEh51 ftgen 100+10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10_V2), i(gkPS10) ,1,1,1	,0.021582,0.082278,0.299289,0.052488,0.012284,0.000944,0.001172,0.000108,0.000906,0.006303,0.026106,0.032757,0.007753,0.001434,0.001444,0.005988,0.023064,0.017739,0.020167,0.013678,0.023142,0.010173,0.003168,0.000704,0.000290,0.000184
  giCountertenorEh54 ftgen 100+11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11_V2), i(gkPS11) ,1,1,1	,0.033385,0.181253,0.115431,0.021468,0.001260,0.001196,0.000294,0.003460,0.019374,0.049307,0.008286,0.000663,0.003599,0.016148,0.024802,0.024651,0.015477,0.027005,0.006039,0.001230,0.000344,0.000180,0.000106
  giCountertenorEh57 ftgen 100+12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12_V2), i(gkPS12) ,1,1,1	,0.053000,0.500048,0.052999,0.003969,0.001543,0.000360,0.007742,0.067956,0.015859,0.001332,0.004887,0.030983,0.020466,0.021939,0.036267,0.006921,0.000920,0.000388,0.000110
  giCountertenorEh60 ftgen 100+13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13_V2), i(gkPS13) ,1,1,1	,0.090997,0.225190,0.019088,0.002273,0.000427,0.012001,0.090580,0.006866,0.003130,0.028980,0.024535,0.021910,0.020460,0.002558,0.000490,0.000131
  giCountertenorEh63 ftgen 100+14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14_V2), i(gkPS14) ,1,1,1	,0.164597,0.104995,0.001890,0.000217,0.012610,0.065521,0.002869,0.011981,0.035487,0.027366,0.020351,0.001408,0.000368,0.000158
  giCountertenorEh66 ftgen 100+15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15_V2), i(gkPS15) ,1,1,1	,0.362512,0.042934,0.002393,0.006921,0.098595,0.001326,0.032300,0.049308,0.054000,0.002460,0.000362,0.000116
  giCountertenorEh69 ftgen 100+16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16_V2), i(gkPS16) ,1,1,1	,0.999999,0.007938,0.000720,0.135918,0.002663,0.061969,0.043865,0.013840,0.000774,0.000180
  giCountertenorEh72 ftgen 100+17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17_V2), i(gkPS17) ,1,1,1	,0.450330,0.004546,0.024003,0.013728,0.057960,0.043814,0.005114,0.000263,0.000126
  giCountertenorEh75 ftgen 100+18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18_V2), i(gkPS18) ,1,1,1	,0.210003,0.000432,0.131045,0.023965,0.054738,0.002817,0.000316
  giCountertenorEh78 ftgen 100+19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19_V2), i(gkPS19) ,1,1,1	,0.085867,0.013843,0.002652,0.098614,0.004920,0.000232
  giCountertenorEh81 ftgen 100+20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20_V2), i(gkPS20) ,1,1,1	,0.015875,0.271870,0.123957,0.027679,0.000360
  giCountertenorEh84 ftgen 100+21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21_V2), i(gkPS21) ,1,1,1	,0.009092,0.027457,0.087628,0.000525
 elseif iVoice2==13 then
  giCountertenorEee24 ftgen 100+1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1_V2) , i(gkPS1)  ,1,1,1	,0.008519,0.010447,0.014054,0.016869,0.027416,0.033625,0.072566,0.124934,0.105409,0.045534,0.032582,0.021052,0.015918,0.011883,0.008760,0.006708,0.004852,0.003497,0.002443,0.001561,0.000949,0.000462,0.000135,0.000131,0.000257,0.000327,0.000331,0.000315,0.000264,0.000201,0.000142,0.000104,0.000153,0.000219,0.000301,0.000411,0.000551,0.000728,0.000969,0.001276,0.001735,0.002395,0.003484,0.004988,0.005127,0.003704,0.002506,0.001822,0.001332,0.001016,0.000765,0.000579,0.000431,0.000311,0.000217,0.000141,0.000129,0.000204,0.000297,0.000417,0.000566,0.000751,0.000993,0.001302,0.001740,0.002374,0.003337,0.004655,0.004963,0.003852,0.002706,0.002017,0.001532,0.001224,0.000999,0.000848,0.000756,0.000711,0.000725,0.000791
  giCountertenorEee27 ftgen 100+2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2_V2) , i(gkPS2)  ,1,1,1	,0.010469,0.013785,0.018825,0.028603,0.039687,0.096960,0.152046,0.086764,0.039736,0.026663,0.018685,0.012926,0.009150,0.006583,0.004367,0.002875,0.001660,0.000901,0.000280,0.000124,0.000303,0.000390,0.000394,0.000348,0.000255,0.000176,0.000123,0.000196,0.000297,0.000428,0.000613,0.000855,0.001201,0.001667,0.002454,0.003667,0.005797,0.006023,0.003933,0.002587,0.001760,0.001267,0.000906,0.000649,0.000452,0.000302,0.000186,0.000179,0.000295,0.000448,0.000651,0.000911,0.001270,0.001753,0.002529,0.003719,0.005568,0.005777,0.004005,0.002734,0.001948,0.001480,0.001166,0.000973,0.000869,0.000856,0.000935,0.001116,0.001223,0.000990,0.000701,0.000607,0.000678,0.000910,0.001178,0.001113,0.000812,0.000589,0.000435,0.000331,0.000252,0.000192,0.000143
  giCountertenorEee30 ftgen 100+3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3_V2) , i(gkPS3)  ,1,1,1	,0.012961,0.018883,0.025737,0.046165,0.109238,0.177786,0.070937,0.042673,0.023396,0.016018,0.010600,0.006942,0.004369,0.002442,0.001200,0.000319,0.000192,0.000435,0.000467,0.000430,0.000306,0.000189,0.000101,0.000137,0.000238,0.000385,0.000597,0.000894,0.001336,0.001977,0.003125,0.005266,0.007527,0.005281,0.003131,0.001989,0.001349,0.000906,0.000600,0.000374,0.000211,0.000133,0.000263,0.000450,0.000714,0.001069,0.001585,0.002351,0.003649,0.006036,0.006943,0.004523,0.002921,0.002003,0.001483,0.001174,0.001024,0.001026,0.001183,0.001440,0.001243,0.000829,0.000719,0.000881,0.001279,0.001377,0.000977,0.000667,0.000469,0.000340,0.000246,0.000175,0.000119
  giCountertenorEee33 ftgen 100+4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4_V2) , i(gkPS4)  ,1,1,1	,0.016304,0.025781,0.047131,0.093856,0.213577,0.070728,0.040472,0.024108,0.014169,0.008749,0.004988,0.002391,0.000889,0.000136,0.000481,0.000556,0.000488,0.000316,0.000133,0.000122,0.000156,0.000299,0.000521,0.000870,0.001395,0.002231,0.003813,0.007216,0.008330,0.004423,0.002570,0.001607,0.001002,0.000602,0.000328,0.000143,0.000109,0.000260,0.000510,0.000882,0.001420,0.002252,0.003738,0.006675,0.008239,0.004852,0.002954,0.001992,0.001464,0.001227,0.001245,0.001533,0.001684,0.001095,0.000857,0.001094,0.001647,0.001436,0.000900,0.000587,0.000399,0.000272,0.000179,0.000111
  giCountertenorEee36 ftgen 100+5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5_V2) , i(gkPS5)  ,1,1,1	,0.020901,0.033747,0.067272,0.249956,0.091103,0.042121,0.023777,0.013422,0.006998,0.003123,0.000925,0.000261,0.000655,0.000630,0.000402,0.000153,0.000132,0.000136,0.000207,0.000439,0.000824,0.001459,0.002557,0.004804,0.010004,0.007430,0.003657,0.002038,0.001162,0.000624,0.000283,0.000156,0.000410,0.000838,0.001510,0.002619,0.004778,0.009373,0.007757,0.004064,0.002466,0.001710,0.001434,0.001595,0.002067,0.001417,0.001024,0.001442,0.002020,0.001289,0.000763,0.000481,0.000304,0.000181
  giCountertenorEee39 ftgen 100+6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6_V2) , i(gkPS6)  ,1,1,1	,0.027550,0.057179,0.193782,0.173420,0.053305,0.025836,0.013158,0.005747,0.001800,0.000247,0.000779,0.000697,0.000352,0.000147,0.000159,0.000139,0.000391,0.000854,0.001707,0.003330,0.007329,0.012038,0.005171,0.002532,0.001299,0.000603,0.000200,0.000196,0.000590,0.001302,0.002541,0.005062,0.011149,0.008021,0.003901,0.002335,0.001741,0.001874,0.002450,0.001406,0.001360,0.002362,0.001629,0.000873,0.000506,0.000288,0.000146
  giCountertenorEee42 ftgen 100+7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7_V2) , i(gkPS7)  ,1,1,1	,0.037773,0.092350,0.355634,0.085357,0.032041,0.013887,0.004884,0.000639,0.000872,0.000861,0.000379,0.000202,0.000130,0.000134,0.000483,0.001202,0.002686,0.006275,0.015101,0.006277,0.002705,0.001203,0.000420,0.000268,0.000907,0.002154,0.004740,0.012176,0.009112,0.004038,0.002369,0.002070,0.002909,0.001676,0.001786,0.002785,0.001348,0.000686,0.000353,0.000154
  giCountertenorEee45 ftgen 100+8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8_V2) , i(gkPS8)  ,1,1,1	,0.051559,0.187745,0.141432,0.048215,0.017498,0.004781,0.000273,0.001114,0.000633,0.000244,0.000108,0.000313,0.001044,0.002794,0.007641,0.016682,0.005148,0.002007,0.000658,0.000106,0.000523,0.001771,0.004523,0.013415,0.009741,0.003999,0.002464,0.003082,0.002203,0.002205,0.002887,0.001181,0.000547,0.000222
  giCountertenorEee48 ftgen 100+9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9_V2) , i(gkPS9)  ,1,1,1	,0.067500,0.499957,0.084236,0.026845,0.006246,0.000524,0.001260,0.000307,0.000263,0.000154,0.000423,0.001657,0.005126,0.020030,0.007311,0.002320,0.000560,0.000313,0.001681,0.005251,0.018793,0.008143,0.003428,0.003199,0.002838,0.002897,0.002582,0.000962,0.000359
  giCountertenorEee51 ftgen 100+10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10_V2), i(gkPS10) ,1,1,1	,0.114392,0.346891,0.051686,0.011497,0.000495,0.001393,0.000319,0.000278,0.001711,0.006671,0.024100,0.005070,0.001207,0.000395,0.002611,0.010148,0.016063,0.004678,0.003757,0.002818,0.004738,0.001749,0.000577,0.000121
  giCountertenorEee54 ftgen 100+11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11_V2), i(gkPS11) ,1,1,1	,0.184699,0.170704,0.027773,0.001277,0.001722,0.000135,0.000260,0.000954,0.005364,0.030213,0.005416,0.000846,0.000161,0.001816,0.009486,0.018223,0.004741,0.005826,0.003571,0.002699,0.000709,0.000111
  giCountertenorEee57 ftgen 100+12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12_V2), i(gkPS12) ,1,1,1	,0.375525,0.096426,0.009561,0.002227,0.000108,0.000215,0.002089,0.015287,0.010294,0.001315,0.000212,0.003544,0.026847,0.007999,0.006168,0.004412,0.002362,0.000444,0.000109
  giCountertenorEee60 ftgen 100+13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13_V2), i(gkPS13) ,1,1,1	,1.000001,0.053693,0.001047,0.000612,0.000311,0.003299,0.040074,0.004652,0.000183,0.003363,0.037603,0.006857,0.005682,0.005170,0.000725,0.000129
  giCountertenorEee63 ftgen 100+14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14_V2), i(gkPS14) ,1,1,1	,0.693800,0.022994,0.002786,0.000638,0.003424,0.048210,0.002415,0.000789,0.020308,0.009360,0.005636,0.003499,0.000242
  giCountertenorEee66 ftgen 100+15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15_V2), i(gkPS15) ,1,1,1	,0.341398,0.002553,0.000269,0.001909,0.060427,0.001690,0.003632,0.036438,0.011652,0.005397,0.000221
  giCountertenorEee69 ftgen 100+16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16_V2), i(gkPS16) ,1,1,1	,0.192837,0.004454,0.000431,0.030573,0.002629,0.007088,0.015996,0.008825,0.000889
  giCountertenorEee72 ftgen 100+17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17_V2), i(gkPS17) ,1,1,1	,0.107381,0.001225,0.006599,0.009301,0.006726,0.013712,0.010336,0.000259
  giCountertenorEee75 ftgen 100+18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18_V2), i(gkPS18) ,1,1,1	,0.045989,0.001278,0.096423,0.001577,0.018720,0.006999,0.000144
  giCountertenorEee78 ftgen 100+19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19_V2), i(gkPS19) ,1,1,1	,0.005108,0.003817,0.003379,0.072873,0.010794
  giCountertenorEee81 ftgen 100+20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20_V2), i(gkPS20) ,1,1,1	,0.008908,0.061152,0.014177,0.017652,0.000134
  giCountertenorEee84 ftgen 100+21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21_V2), i(gkPS21) ,1,1,1	,0.002448,0.018603,0.027424,0.000518
 elseif iVoice2==14 then
  giCountertenorOh24 ftgen 100+1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1_V2) , i(gkPS1)  ,1,1,1	,0.000976,0.001418,0.001996,0.002649,0.003721,0.004755,0.006289,0.008700,0.010470,0.017279,0.020680,0.047585,0.075931,0.059717,0.025499,0.020090,0.013249,0.011161,0.009282,0.008320,0.008180,0.008813,0.010336,0.014497,0.017321,0.013886,0.008690,0.006221,0.004488,0.003467,0.002671,0.002061,0.001592,0.001183,0.000868,0.000603,0.000392,0.000239,0.000128,0.000106,0.000126,0.000132,0.000124,0.000110,0.000135,0.000180,0.000235,0.000301,0.000381,0.000484,0.000612,0.000797,0.001059,0.001479,0.002029,0.002140,0.001753,0.001427,0.001336,0.001376,0.001574,0.001924,0.002473,0.003150,0.003321,0.002752,0.002057,0.001579,0.001239,0.001017,0.000865,0.000776,0.000736
  giCountertenorOh27 ftgen 100+2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2_V2) , i(gkPS2)  ,1,1,1	,0.001238,0.001930,0.002779,0.004109,0.005581,0.007795,0.011138,0.015868,0.023498,0.051584,0.090982,0.058872,0.024979,0.018745,0.013492,0.010997,0.009771,0.009964,0.011317,0.016000,0.020636,0.015422,0.009037,0.006223,0.004400,0.003252,0.002389,0.001745,0.001211,0.000817,0.000496,0.000277,0.000133,0.000115,0.000142,0.000158,0.000148,0.000126,0.000131,0.000189,0.000261,0.000353,0.000467,0.000621,0.000824,0.001156,0.001681,0.002451,0.002478,0.001885,0.001618,0.001623,0.001883,0.002404,0.003279,0.004007,0.003505,0.002498,0.001824,0.001384,0.001115,0.000952,0.000886,0.000783,0.000591,0.000435,0.000341,0.000275,0.000225,0.000183,0.000147,0.000116
  giCountertenorOh30 ftgen 100+3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3_V2) , i(gkPS3)  ,1,1,1	,0.001604,0.002674,0.004072,0.006176,0.009086,0.013563,0.023369,0.035194,0.101582,0.077033,0.029449,0.018986,0.014865,0.011952,0.011694,0.013514,0.020789,0.023285,0.013030,0.008051,0.005265,0.003665,0.002550,0.001705,0.001091,0.000616,0.000306,0.000141,0.000150,0.000186,0.000177,0.000148,0.000124,0.000198,0.000294,0.000421,0.000588,0.000823,0.001193,0.001814,0.002885,0.002835,0.002063,0.001887,0.002113,0.002782,0.004010,0.004725,0.003536,0.002382,0.001692,0.001306,0.001100,0.001011,0.000790,0.000541,0.000403,0.000313,0.000246,0.000192,0.000145,0.000106
  giCountertenorOh33 ftgen 100+4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4_V2) , i(gkPS4)  ,1,1,1	,0.002118,0.003720,0.006338,0.009787,0.015959,0.030101,0.065229,0.125015,0.039115,0.024298,0.017276,0.013843,0.014630,0.020706,0.028742,0.015233,0.008650,0.005463,0.003511,0.002232,0.001316,0.000660,0.000266,0.000162,0.000213,0.000212,0.000170,0.000102,0.000144,0.000251,0.000396,0.000597,0.000891,0.001362,0.002256,0.003634,0.002895,0.002272,0.002441,0.003352,0.005140,0.005242,0.003308,0.002161,0.001568,0.001294,0.001139,0.000764,0.000520,0.000381,0.000286,0.000212,0.000149
  giCountertenorOh36 ftgen 100+5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5_V2) , i(gkPS5)  ,1,1,1	,0.002837,0.005300,0.009514,0.017406,0.034571,0.095209,0.119489,0.040201,0.022335,0.016651,0.017637,0.029015,0.027795,0.012453,0.006942,0.004127,0.002369,0.001209,0.000479,0.000192,0.000252,0.000249,0.000173,0.000136,0.000271,0.000472,0.000765,0.001230,0.002129,0.004081,0.003528,0.002689,0.003169,0.004981,0.006691,0.004146,0.002498,0.001745,0.001484,0.001074,0.000655,0.000451,0.000321,0.000221,0.000141
  giCountertenorOh39 ftgen 100+6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6_V2) , i(gkPS6)  ,1,1,1	,0.003856,0.008213,0.015579,0.031723,0.103107,0.117667,0.037472,0.021976,0.019904,0.031955,0.030799,0.012429,0.006496,0.003487,0.001632,0.000553,0.000231,0.000316,0.000252,0.000119,0.000102,0.000262,0.000522,0.000934,0.001650,0.003365,0.004960,0.003239,0.003768,0.006564,0.007017,0.003653,0.002234,0.001775,0.001184,0.000682,0.000451,0.000296,0.000176
  giCountertenorOh42 ftgen 100+7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7_V2) , i(gkPS7)  ,1,1,1	,0.005349,0.012355,0.027133,0.070422,0.154071,0.037978,0.023916,0.027050,0.046604,0.016115,0.007338,0.003414,0.001231,0.000279,0.000372,0.000296,0.000104,0.000102,0.000249,0.000591,0.001183,0.002404,0.005812,0.004154,0.004259,0.008091,0.007129,0.003415,0.002221,0.001594,0.000813,0.000497,0.000294,0.000145
  giCountertenorOh45 ftgen 100+8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8_V2) , i(gkPS8)  ,1,1,1	,0.007441,0.019575,0.060208,0.250025,0.048593,0.027690,0.041429,0.030466,0.010928,0.004465,0.001320,0.000325,0.000425,0.000205,0.000122,0.000289,0.000795,0.001788,0.004530,0.005810,0.004904,0.010331,0.006646,0.003152,0.002288,0.001045,0.000576,0.000300,0.000117
  giCountertenorOh48 ftgen 100+9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9_V2) , i(gkPS9)  ,1,1,1	,0.010601,0.034815,0.190470,0.080405,0.033305,0.058053,0.024910,0.008255,0.002415,0.000380,0.000499,0.000157,0.000134,0.000544,0.001534,0.004269,0.007067,0.006352,0.013410,0.005008,0.002977,0.001313,0.000644,0.000282
  giCountertenorOh51 ftgen 100+10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10_V2), i(gkPS10) ,1,1,1	,0.016431,0.063467,0.235366,0.043971,0.063965,0.024873,0.006978,0.001106,0.000633,0.000237,0.000165,0.000526,0.001871,0.006744,0.006491,0.013161,0.007320,0.003558,0.001368,0.000593,0.000178
  giCountertenorOh54 ftgen 100+11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11_V2), i(gkPS11) ,1,1,1	,0.024710,0.140863,0.075949,0.054103,0.032225,0.006828,0.000565,0.000591,0.000130,0.000122,0.000130,0.001184,0.004810,0.008308,0.016195,0.006829,0.003189,0.000995,0.000290
  giCountertenorOh57 ftgen 100+12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12_V2), i(gkPS12) ,1,1,1	,0.039150,0.500037,0.055380,0.060924,0.008930,0.000650,0.000410,0.000244,0.001590,0.009065,0.009812,0.013291,0.004577,0.001153,0.000235,0.000102
  giCountertenorOh60 ftgen 100+13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13_V2), i(gkPS13) ,1,1,1	,0.069637,0.160819,0.116129,0.016511,0.000768,0.000310,0.000199,0.000121,0.001088,0.008540,0.012711,0.010013,0.002627,0.000564,0.000125
  giCountertenorOh63 ftgen 100+14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14_V2), i(gkPS14) ,1,1,1	,0.126948,0.087953,0.049754,0.002213,0.000474,0.000165,0.003744,0.012986,0.014644,0.002737,0.000355,0.000112
  giCountertenorOh66 ftgen 100+15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15_V2), i(gkPS15) ,1,1,1	,0.281744,0.108208,0.013656,0.001182,0.000243,0.000261,0.009621,0.032394,0.006377,0.000580,0.000114
  giCountertenorOh69 ftgen 100+16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16_V2), i(gkPS16) ,1,1,1	,1.000000,0.121825,0.001300,0.000487,0.000199,0.018133,0.026571,0.002305,0.000202
  giCountertenorOh72 ftgen 100+17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17_V2), i(gkPS17) ,1,1,1	,0.321614,0.033016,0.000620,0.000243,0.017081,0.020022,0.001128
  giCountertenorOh75 ftgen 100+18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18_V2), i(gkPS18) ,1,1,1	,0.175915,0.004425,0.000329,0.007489,0.029288,0.000710,0.000103
  giCountertenorOh78 ftgen 100+19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19_V2), i(gkPS19) ,1,1,1	,0.216413,0.002364,0.000521,0.064787,0.001159
  giCountertenorOh81 ftgen 100+20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20_V2), i(gkPS20) ,1,1,1	,0.243654,0.000974,0.036270,0.004610,0.000126
  giCountertenorOh84 ftgen 100+21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21_V2), i(gkPS21) ,1,1,1	,0.066032,0.000487,0.040044,0.000145
 elseif iVoice2==15 then
  giCountertenorOoh24 ftgen 100+1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1_V2) , i(gkPS1)  ,1,1,1	,0.002930,0.003338,0.004209,0.005237,0.006779,0.009344,0.011428,0.018295,0.022905,0.047515,0.085264,0.075133,0.033639,0.022964,0.015677,0.011837,0.009420,0.008016,0.005598,0.002825,0.001635,0.001188,0.001026,0.000841,0.000709,0.000648,0.000588,0.000526,0.000477,0.000401,0.000336,0.000264,0.000191,0.000133,0.000108,0.000159,0.000223,0.000304,0.000406,0.000530,0.000690,0.000897,0.001168,0.001579,0.002149,0.003081,0.003723,0.003238,0.002269,0.001653,0.001261,0.001042,0.001008,0.001130,0.001209,0.001084,0.000893,0.000767,0.000687,0.000655,0.000659,0.000701,0.000788
  giCountertenorOoh27 ftgen 100+2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2_V2) , i(gkPS2)  ,1,1,1	,0.003586,0.004256,0.005702,0.007556,0.010921,0.014024,0.024945,0.035150,0.092038,0.093788,0.037116,0.026081,0.015318,0.012347,0.009771,0.006560,0.002960,0.001559,0.001368,0.001026,0.000848,0.000758,0.000673,0.000602,0.000498,0.000407,0.000303,0.000209,0.000120,0.000160,0.000244,0.000355,0.000499,0.000686,0.000937,0.001278,0.001812,0.002618,0.003961,0.004359,0.003122,0.002085,0.001507,0.001221,0.001248,0.001432,0.001351,0.001078,0.000901,0.000805,0.000781,0.000820,0.000929,0.001142,0.001493,0.001896,0.001791,0.001284,0.000903,0.000650,0.000483,0.000359,0.000267,0.000194,0.000137
  giCountertenorOoh30 ftgen 100+3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3_V2) , i(gkPS3)  ,1,1,1	,0.004387,0.005685,0.007842,0.011742,0.016404,0.030852,0.061026,0.124965,0.062106,0.031873,0.017790,0.013428,0.010387,0.004571,0.002046,0.001614,0.001183,0.000962,0.000842,0.000729,0.000595,0.000464,0.000313,0.000193,0.000161,0.000272,0.000424,0.000634,0.000922,0.001335,0.001984,0.003066,0.004916,0.004770,0.002924,0.001939,0.001459,0.001499,0.001713,0.001437,0.001123,0.000961,0.000924,0.000992,0.001191,0.001581,0.002177,0.002117,0.001415,0.000940,0.000647,0.000456,0.000320,0.000219,0.000143
  giCountertenorOoh33 ftgen 100+4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4_V2) , i(gkPS4)  ,1,1,1	,0.005388,0.007726,0.011546,0.018473,0.036095,0.086804,0.138411,0.041289,0.024565,0.016650,0.011902,0.004266,0.001997,0.001497,0.001165,0.000998,0.000847,0.000647,0.000450,0.000263,0.000103,0.000118,0.000101,0.000207,0.000376,0.000627,0.000985,0.001532,0.002453,0.004202,0.006295,0.004173,0.002462,0.001735,0.001864,0.001976,0.001463,0.001175,0.001103,0.001211,0.001558,0.002280,0.002680,0.001752,0.001076,0.000697,0.000459,0.000297,0.000181,0.000101
  giCountertenorOoh36 ftgen 100+5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5_V2) , i(gkPS5)  ,1,1,1	,0.006678,0.010477,0.018695,0.036602,0.095066,0.150330,0.045948,0.023685,0.016041,0.005653,0.002378,0.001682,0.001298,0.001053,0.000802,0.000528,0.000265,0.000105,0.000138,0.000118,0.000217,0.000449,0.000815,0.001387,0.002350,0.004323,0.007492,0.004566,0.002539,0.002030,0.002436,0.001799,0.001386,0.001329,0.001590,0.002352,0.003257,0.002059,0.001161,0.000702,0.000425,0.000243,0.000123
  giCountertenorOoh39 ftgen 100+6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6_V2) , i(gkPS6)  ,1,1,1	,0.008507,0.015099,0.028021,0.070256,0.187408,0.052114,0.024673,0.013102,0.003116,0.002049,0.001515,0.001204,0.000813,0.000417,0.000115,0.000127,0.000167,0.000128,0.000197,0.000489,0.000998,0.001875,0.003627,0.007929,0.006251,0.003018,0.002497,0.002704,0.001804,0.001564,0.001861,0.002991,0.003590,0.001811,0.000967,0.000535,0.000275,0.000118
  giCountertenorOoh42 ftgen 100+7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7_V2) , i(gkPS7)  ,1,1,1	,0.011372,0.023489,0.061720,0.249997,0.063763,0.026863,0.009143,0.003230,0.001926,0.001459,0.000929,0.000387,0.000186,0.000157,0.000177,0.000548,0.001276,0.002689,0.006178,0.009604,0.003905,0.003024,0.002899,0.001942,0.002006,0.003198,0.004277,0.001900,0.000922,0.000444,0.000179
  giCountertenorOoh45 ftgen 100+8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8_V2) , i(gkPS8)  ,1,1,1	,0.015452,0.036944,0.173650,0.082571,0.033299,0.008530,0.002994,0.001997,0.001295,0.000526,0.000105,0.000236,0.000137,0.000202,0.000755,0.001978,0.004926,0.012637,0.004941,0.003746,0.002939,0.002218,0.003135,0.005390,0.002165,0.000924,0.000366,0.000102
  giCountertenorOoh48 ftgen 100+9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9_V2) , i(gkPS9)  ,1,1,1	,0.020956,0.073214,0.300650,0.047374,0.011304,0.003365,0.002105,0.001056,0.000160,0.000271,0.000143,0.000105,0.000437,0.001635,0.004710,0.015016,0.005087,0.004883,0.002780,0.003191,0.006532,0.002329,0.000854,0.000249
  giCountertenorOoh51 ftgen 100+10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10_V2), i(gkPS10) ,1,1,1	,0.030210,0.140577,0.104265,0.026214,0.004100,0.002408,0.000835,0.000254,0.000256,0.000123,0.000395,0.002001,0.007270,0.012518,0.005007,0.003616,0.003732,0.007195,0.001939,0.000551
  giCountertenorOoh54 ftgen 100+11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11_V2), i(gkPS11) ,1,1,1	,0.046979,0.499997,0.053723,0.006460,0.002919,0.000773,0.000378,0.000118,0.000106,0.000152,0.001094,0.005381,0.019208,0.006051,0.003882,0.006400,0.003801,0.000886,0.000115
  giCountertenorOoh57 ftgen 100+12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12_V2), i(gkPS12) ,1,1,1	,0.073889,0.165133,0.017058,0.003994,0.001052,0.000471,0.000177,0.001512,0.009857,0.009881,0.005879,0.006275,0.004329,0.000733,0.000125
  giCountertenorOoh60 ftgen 100+13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13_V2), i(gkPS13) ,1,1,1	,0.146440,0.094756,0.006731,0.002111,0.000551,0.000141,0.000870,0.009425,0.010175,0.005557,0.013068,0.001707,0.000146
  giCountertenorOoh63 ftgen 100+14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14_V2), i(gkPS14) ,1,1,1	,0.281199,0.052436,0.004817,0.000509,0.000247,0.004004,0.025038,0.007235,0.014393,0.001102,0.000174
  giCountertenorOoh66 ftgen 100+15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15_V2), i(gkPS15) ,1,1,1	,1.000000,0.012920,0.001547,0.000236,0.000305,0.010763,0.012104,0.012802,0.001771,0.000185
  giCountertenorOoh69 ftgen 100+16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16_V2), i(gkPS16) ,1,1,1	,0.330234,0.007988,0.000942,0.000128,0.000355,0.019716,0.011755,0.008656,0.000251
  giCountertenorOoh72 ftgen 100+17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17_V2), i(gkPS17) ,1,1,1	,0.189497,0.004222,0.000170,0.000283,0.018851,0.011112,0.003413,0.000105
  giCountertenorOoh75 ftgen 100+18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18_V2), i(gkPS18) ,1,1,1	,0.104873,0.001016,0.008010,0.014471,0.002205,0.000124
  giCountertenorOoh78 ftgen 100+19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19_V2), i(gkPS19) ,1,1,1	,0.025840,0.000472,0.000610,0.024208,0.003543,0.000116
  giCountertenorOoh81 ftgen 100+20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20_V2), i(gkPS20) ,1,1,1	,0.015975,0.000256,0.039437,0.017313,0.000164
  giCountertenorOoh84 ftgen 100+21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21_V2), i(gkPS21) ,1,1,1	,0.008443,0.000565,0.022224,0.000210
 ; ALTO
 elseif iVoice2==16 then
  giAltoAh24 ftgen 100+1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1_V2) , i(gkPS1)  ,1,1,1	,0.000189,0.000296,0.000384,0.000470,0.000519,0.000516,0.000488,0.000371,0.000272,0.000362,0.000762,0.001312,0.002068,0.003050,0.004182,0.005758,0.007569,0.009859,0.013271,0.016801,0.024312,0.033001,0.056588,0.102975,0.102169,0.056712,0.036664,0.028737,0.023278,0.022005,0.021266,0.024719,0.028942,0.046575,0.063428,0.051044,0.027265,0.019362,0.013395,0.010268,0.007894,0.006039,0.004698,0.003520,0.002602,0.001851,0.001231,0.000766,0.000406,0.000199,0.000194,0.000263,0.000310,0.000314,0.000289,0.000244,0.000184,0.000124,0.000126,0.000177,0.000255,0.000364,0.000514,0.000708,0.000954,0.001263,0.001646,0.002126,0.002727,0.003491,0.004448,0.005556,0.006485,0.006605,0.005809,0.004697,0.003698,0.002896,0.002268,0.001771,0.001374,0.001053,0.000794,0.000590,0.000437,0.000344,0.000317,0.000349
  giAltoAh27 ftgen 100+2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2_V2) , i(gkPS2)  ,1,1,1	,0.000244,0.000397,0.000518,0.000607,0.000616,0.000568,0.000396,0.000335,0.000726,0.001487,0.002548,0.003987,0.005730,0.008260,0.011227,0.015932,0.020978,0.034291,0.049287,0.113108,0.122662,0.059916,0.041411,0.029183,0.026718,0.025244,0.029994,0.038221,0.068475,0.069216,0.035306,0.022725,0.014644,0.011021,0.007946,0.005866,0.004193,0.002921,0.001910,0.001127,0.000578,0.000244,0.000241,0.000340,0.000374,0.000356,0.000298,0.000215,0.000128,0.000113,0.000169,0.000257,0.000396,0.000598,0.000875,0.001242,0.001721,0.002342,0.003155,0.004233,0.005634,0.007200,0.007995,0.007183,0.005618,0.004224,0.003160,0.002359,0.001750,0.001279,0.000914,0.000639,0.000456,0.000380,0.000412,0.000508,0.000638,0.000799,0.000989,0.001180,0.001248,0.001102,0.000867,0.000662,0.000507,0.000390,0.000299,0.000227,0.000169,0.000122
  giAltoAh30 ftgen 100+3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3_V2) , i(gkPS3)  ,1,1,1	,0.000322,0.000523,0.000687,0.000739,0.000683,0.000446,0.000481,0.001318,0.002593,0.004536,0.007027,0.010628,0.015538,0.022888,0.037867,0.059838,0.147441,0.117395,0.052829,0.036972,0.031809,0.030303,0.037765,0.063847,0.088422,0.044709,0.025986,0.015831,0.011132,0.007664,0.005234,0.003397,0.002015,0.001038,0.000395,0.000267,0.000404,0.000445,0.000401,0.000296,0.000178,0.000161,0.000262,0.000438,0.000716,0.001120,0.001683,0.002450,0.003502,0.004969,0.006966,0.009036,0.009149,0.007148,0.005115,0.003622,0.002556,0.001780,0.001208,0.000794,0.000531,0.000449,0.000528,0.000692,0.000905,0.001168,0.001426,0.001435,0.001144,0.000835,0.000607,0.000444,0.000323,0.000231,0.000159,0.000104
  giAltoAh33 ftgen 100+4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4_V2) , i(gkPS4)  ,1,1,1	,0.000435,0.000700,0.000875,0.000843,0.000544,0.000647,0.001988,0.004188,0.007324,0.012179,0.019122,0.029406,0.054206,0.141337,0.157466,0.062492,0.040883,0.036334,0.041267,0.064121,0.105743,0.045932,0.025684,0.015869,0.010059,0.006455,0.003844,0.001991,0.000808,0.000291,0.000460,0.000530,0.000454,0.000294,0.000125,0.000105,0.000104,0.000188,0.000335,0.000614,0.001080,0.001786,0.002812,0.004302,0.006516,0.009550,0.011271,0.008968,0.006048,0.004011,0.002642,0.001695,0.001040,0.000640,0.000541,0.000692,0.000956,0.001306,0.001686,0.001690,0.001250,0.000853,0.000587,0.000404,0.000271,0.000172,0.000103,0.000102,0.000112
  giAltoAh36 ftgen 100+5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5_V2) , i(gkPS5)  ,1,1,1	,0.000591,0.000940,0.001033,0.000742,0.000724,0.002625,0.006104,0.011523,0.019729,0.033624,0.066046,0.206109,0.113522,0.057528,0.044055,0.049494,0.093266,0.102229,0.038781,0.020569,0.012100,0.007054,0.003709,0.001535,0.000398,0.000528,0.000629,0.000488,0.000249,0.000106,0.000124,0.000180,0.000356,0.000732,0.001422,0.002539,0.004275,0.007024,0.011180,0.013295,0.009456,0.005833,0.003569,0.002122,0.001189,0.000693,0.000704,0.001020,0.001484,0.002021,0.001923,0.001279,0.000814,0.000523,0.000327,0.000190,0.000101,0.000126,0.000129
  giAltoAh39 ftgen 100+6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6_V2) , i(gkPS6)  ,1,1,1	,0.000792,0.001213,0.001135,0.000668,0.002969,0.007965,0.016502,0.031835,0.068519,0.226014,0.119754,0.058321,0.050446,0.076384,0.138316,0.045413,0.022028,0.011725,0.005840,0.002252,0.000488,0.000680,0.000712,0.000429,0.000104,0.000120,0.000144,0.000149,0.000337,0.000791,0.001747,0.003438,0.006303,0.011258,0.015979,0.011229,0.006318,0.003500,0.001828,0.000913,0.000824,0.001276,0.001980,0.002497,0.001737,0.001015,0.000599,0.000339,0.000171,0.000148,0.000149
  giAltoAh42 ftgen 100+7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7_V2) , i(gkPS7)  ,1,1,1	,0.001046,0.001479,0.000892,0.002638,0.009076,0.021269,0.045807,0.119803,0.234872,0.073996,0.060678,0.127922,0.089484,0.031708,0.015355,0.006806,0.002080,0.000536,0.000893,0.000593,0.000132,0.000160,0.000143,0.000109,0.000328,0.000883,0.002256,0.004934,0.010012,0.018210,0.014399,0.007297,0.003587,0.001599,0.000905,0.001398,0.002364,0.002903,0.001690,0.000899,0.000467,0.000211,0.000109,0.000178,0.000165
  giAltoAh45 ftgen 100+8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8_V2) , i(gkPS8)  ,1,1,1	,0.001400,0.001687,0.001294,0.008377,0.024362,0.058827,0.282834,0.125013,0.072697,0.128373,0.091880,0.031757,0.012918,0.003985,0.000583,0.001062,0.000588,0.000210,0.000100,0.000377,0.001233,0.003586,0.008637,0.019180,0.018001,0.008054,0.003404,0.001286,0.001393,0.002629,0.003400,0.001717,0.000813,0.000347,0.000124,0.000156,0.000228,0.000128
  giAltoAh48 ftgen 100+9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9_V2) , i(gkPS9)  ,1,1,1	,0.001880,0.001482,0.005251,0.023053,0.067263,0.412366,0.115064,0.099033,0.204459,0.041147,0.014111,0.003072,0.001057,0.000977,0.000247,0.000164,0.000717,0.002848,0.008565,0.022410,0.018941,0.007145,0.002378,0.001413,0.002978,0.003857,0.001634,0.000655,0.000202,0.000113,0.000183,0.000258,0.000115
  giAltoAh51 ftgen 100+10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10_V2), i(gkPS10) ,1,1,1	,0.002427,0.001338,0.015940,0.063709,0.452338,0.116697,0.152906,0.090878,0.023464,0.004506,0.001360,0.000857,0.000242,0.000142,0.000677,0.003504,0.012640,0.032038,0.012664,0.003664,0.001654,0.003974,0.003484,0.001202,0.000342,0.000133,0.000199,0.000300,0.000106
  giAltoAh54 ftgen 100+11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11_V2), i(gkPS11) ,1,1,1	,0.002958,0.005276,0.042538,0.239659,0.147975,0.255925,0.063414,0.013610,0.001072,0.001187,0.000319,0.000216,0.001764,0.009875,0.036436,0.014599,0.003203,0.002798,0.005807,0.001797,0.000423,0.000157,0.000220,0.000330
  giAltoAh57 ftgen 100+12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12_V2), i(gkPS12) ,1,1,1	,0.003374,0.016755,0.117663,0.250019,0.256814,0.063510,0.007969,0.002123,0.000140,0.000201,0.002468,0.017282,0.036001,0.006807,0.002788,0.006801,0.001627,0.000248,0.000137,0.000312,0.000255
  giAltoAh60 ftgen 100+13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13_V2), i(gkPS13) ,1,1,1	,0.002967,0.046107,0.824869,0.198093,0.082301,0.006142,0.001955,0.000496,0.001429,0.017146,0.037895,0.004766,0.005960,0.003267,0.000407,0.000157,0.000155,0.000519
  giAltoAh63 ftgen 100+14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14_V2), i(gkPS14) ,1,1,1	,0.002677,0.127443,0.233422,0.181784,0.009013,0.001717,0.000284,0.007015,0.064115,0.007331,0.007952,0.002405,0.000267,0.000125,0.000600
  giAltoAh66 ftgen 100+15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15_V2), i(gkPS15) ,1,1,1	,0.010553,0.479368,0.511917,0.027219,0.002374,0.000432,0.019753,0.029194,0.005598,0.003593,0.000314,0.000115,0.000440,0.000188
  giAltoAh69 ftgen 100+16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16_V2), i(gkPS16) ,1,1,1	,0.033509,0.499985,0.127000,0.004247,0.000403,0.034562,0.013610,0.013599,0.000498,0.000136,0.000625,0.000114
  giAltoAh72 ftgen 100+17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17_V2), i(gkPS17) ,1,1,1	,0.092211,0.396173,0.012280,0.000993,0.034289,0.009528,0.006532,0.000315,0.000310,0.000185
  giAltoAh75 ftgen 100+18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18_V2), i(gkPS18) ,1,1,1	,0.254908,0.363579,0.003434,0.014036,0.014660,0.004810,0.000173,0.001201
  giAltoAh78 ftgen 100+19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19_V2), i(gkPS19) ,1,1,1	,0.958726,0.054439,0.000865,0.058385,0.007186,0.000230,0.000375
  giAltoAh81 ftgen 100+20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20_V2), i(gkPS20) ,1,1,1	,1.000000,0.008493,0.069131,0.027200,0.000272,0.000228
  giAltoAh84 ftgen 100+21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21_V2), i(gkPS21) ,1,1,1	,0.792347,0.001986,0.019056,0.000630,0.000371
 elseif iVoice2==17 then
  giAltoEh24 ftgen 100+1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1_V2) , i(gkPS1)  ,1,1,1	,0.003362,0.004063,0.005154,0.006879,0.008943,0.011836,0.016028,0.020650,0.030582,0.041256,0.073678,0.110417,0.094909,0.051940,0.035835,0.024628,0.018327,0.013819,0.010292,0.007833,0.005745,0.004159,0.002926,0.001916,0.001193,0.000629,0.000269,0.000196,0.000305,0.000382,0.000393,0.000375,0.000314,0.000239,0.000159,0.000177,0.000278,0.000395,0.000541,0.000706,0.000932,0.001227,0.001618,0.002273,0.003186,0.005042,0.006061,0.004724,0.002963,0.002132,0.001509,0.001144,0.000862,0.000649,0.000491,0.000359,0.000260,0.000181,0.000118,0.000128,0.000186,0.000258,0.000348,0.000460,0.000604,0.000788,0.001043,0.001394,0.001891,0.002418,0.002462,0.001970,0.001456,0.001095,0.000833,0.000649,0.000509,0.000407,0.000337,0.000299,0.000298,0.000331,0.000397,0.000491,0.000619,0.000790,0.001006,0.001234
  giAltoEh27 ftgen 100+2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2_V2) , i(gkPS2)  ,1,1,1	,0.004127,0.005275,0.007209,0.009991,0.013867,0.019808,0.027445,0.042904,0.071987,0.129126,0.108909,0.053400,0.036759,0.023688,0.017299,0.012158,0.008774,0.005971,0.004053,0.002515,0.001440,0.000656,0.000247,0.000296,0.000443,0.000468,0.000441,0.000347,0.000241,0.000122,0.000217,0.000362,0.000543,0.000763,0.001053,0.001462,0.002056,0.003040,0.004969,0.007193,0.005760,0.003352,0.002274,0.001551,0.001119,0.000797,0.000571,0.000393,0.000264,0.000165,0.000115,0.000188,0.000283,0.000406,0.000567,0.000781,0.001077,0.001517,0.002169,0.002914,0.002838,0.002063,0.001457,0.001046,0.000776,0.000583,0.000451,0.000372,0.000353,0.000394,0.000488,0.000633,0.000840,0.001123,0.001453,0.001578,0.001331,0.000989,0.000724,0.000534,0.000397,0.000294,0.000216,0.000156,0.000110
  giAltoEh30 ftgen 100+3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3_V2) , i(gkPS3)  ,1,1,1	,0.005092,0.006977,0.010396,0.015163,0.023130,0.034809,0.056474,0.124888,0.147945,0.067675,0.042041,0.026103,0.017387,0.011699,0.007558,0.004760,0.002659,0.001309,0.000425,0.000311,0.000523,0.000556,0.000492,0.000344,0.000181,0.000108,0.000276,0.000487,0.000768,0.001122,0.001665,0.002495,0.003962,0.007356,0.007971,0.004348,0.002698,0.001734,0.001166,0.000785,0.000511,0.000320,0.000182,0.000190,0.000315,0.000486,0.000720,0.001051,0.001562,0.002371,0.003434,0.003234,0.002153,0.001437,0.000994,0.000705,0.000521,0.000426,0.000432,0.000535,0.000722,0.001009,0.001423,0.001836,0.001720,0.001239,0.000855,0.000596,0.000418,0.000292,0.000200,0.000132
  giAltoEh33 ftgen 100+4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4_V2) , i(gkPS4)  ,1,1,1	,0.006374,0.009593,0.015226,0.024859,0.040118,0.071823,0.177585,0.125051,0.058039,0.032167,0.019996,0.012533,0.007307,0.003947,0.001782,0.000489,0.000427,0.000651,0.000634,0.000446,0.000221,0.000149,0.000413,0.000750,0.001205,0.001923,0.003136,0.005583,0.010175,0.006418,0.003433,0.002024,0.001259,0.000784,0.000459,0.000244,0.000111,0.000114,0.000244,0.000436,0.000711,0.001122,0.001783,0.002933,0.004251,0.003241,0.001974,0.001256,0.000835,0.000588,0.000498,0.000577,0.000806,0.001196,0.001794,0.002240,0.001746,0.001130,0.000733,0.000481,0.000313,0.000196,0.000116,0.000107,0.000123,0.000104
  giAltoEh36 ftgen 100+5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5_V2) , i(gkPS5)  ,1,1,1	,0.008128,0.013762,0.023679,0.041314,0.082543,0.220926,0.103928,0.049281,0.027654,0.015677,0.008325,0.003834,0.001260,0.000392,0.000764,0.000751,0.000478,0.000163,0.000354,0.000791,0.001415,0.002458,0.004555,0.010107,0.009469,0.004274,0.002294,0.001301,0.000721,0.000362,0.000148,0.000256,0.000519,0.000925,0.001584,0.002804,0.004864,0.003965,0.002203,0.001307,0.000820,0.000602,0.000668,0.000990,0.001593,0.002490,0.002373,0.001446,0.000864,0.000523,0.000310,0.000173,0.000135,0.000143,0.000103
  giAltoEh39 ftgen 100+6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6_V2) , i(gkPS6)  ,1,1,1	,0.010535,0.019953,0.039560,0.085683,0.257901,0.106658,0.047311,0.024286,0.011928,0.005025,0.001312,0.000591,0.000935,0.000693,0.000244,0.000433,0.001084,0.002103,0.004108,0.009930,0.011512,0.004545,0.002237,0.001142,0.000527,0.000191,0.000230,0.000566,0.001133,0.002154,0.004340,0.005678,0.002915,0.001553,0.000903,0.000707,0.000977,0.001682,0.002909,0.002665,0.001449,0.000795,0.000433,0.000220,0.000158,0.000169,0.000109
  giAltoEh42 ftgen 100+7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7_V2) , i(gkPS7)  ,1,1,1	,0.013958,0.030334,0.069643,0.249891,0.135371,0.052225,0.023407,0.009523,0.002620,0.000623,0.001115,0.000690,0.000220,0.000978,0.002252,0.005006,0.014753,0.008712,0.003477,0.001575,0.000644,0.000191,0.000198,0.000633,0.001450,0.003146,0.006918,0.004334,0.002002,0.001048,0.000872,0.001457,0.002874,0.003471,0.001726,0.000845,0.000403,0.000170,0.000107,0.000188,0.000185,0.000102
  giAltoEh45 ftgen 100+8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8_V2) , i(gkPS8)  ,1,1,1	,0.019186,0.049717,0.143654,0.250057,0.064333,0.025066,0.007894,0.000978,0.001303,0.000893,0.000298,0.001501,0.003852,0.011185,0.012845,0.004053,0.001570,0.000488,0.000229,0.000874,0.002252,0.005891,0.006503,0.002521,0.001180,0.001158,0.002404,0.004502,0.002271,0.000968,0.000395,0.000131,0.000158,0.000250,0.000148
  giAltoEh48 ftgen 100+9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9_V2) , i(gkPS9)  ,1,1,1	,0.027527,0.082639,0.441905,0.098560,0.031354,0.007669,0.000785,0.001502,0.000330,0.001589,0.004927,0.020236,0.008549,0.002604,0.000730,0.000119,0.000515,0.001854,0.005620,0.007941,0.002618,0.001208,0.001989,0.004995,0.002897,0.001049,0.000348,0.000188,0.000287,0.000130
  giAltoEh51 ftgen 100+10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10_V2), i(gkPS10) ,1,1,1	,0.039930,0.171475,0.213415,0.048597,0.010054,0.001181,0.001385,0.000867,0.004211,0.019887,0.009096,0.002286,0.000383,0.000109,0.000463,0.002271,0.008699,0.005840,0.001810,0.001961,0.005836,0.002906,0.000868,0.000198,0.000198,0.000336,0.000125
  giAltoEh54 ftgen 100+11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11_V2), i(gkPS11) ,1,1,1	,0.060669,0.499820,0.104443,0.019045,0.001245,0.001376,0.001951,0.010010,0.017427,0.003148,0.000373,0.001269,0.006296,0.008668,0.002099,0.002917,0.006949,0.001692,0.000339,0.000217,0.000372,0.000107
  giAltoEh57 ftgen 100+12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12_V2), i(gkPS12) ,1,1,1	,0.099436,0.500065,0.050129,0.001955,0.001786,0.003004,0.022378,0.008105,0.000976,0.000133,0.001750,0.011786,0.005041,0.002318,0.009006,0.001935,0.000261,0.000101,0.000315,0.000297
  giAltoEh60 ftgen 100+13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13_V2), i(gkPS13) ,1,1,1	,0.165294,0.197124,0.015337,0.003004,0.003167,0.040484,0.005206,0.000220,0.001029,0.011247,0.005236,0.003975,0.005800,0.000693,0.000124,0.000151,0.000577,0.000103
  giAltoEh63 ftgen 100+14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14_V2), i(gkPS14) ,1,1,1	,0.343032,0.097209,0.002364,0.001736,0.039793,0.004573,0.000222,0.004544,0.011682,0.003924,0.005813,0.000396,0.000102,0.000125,0.000672
  giAltoEh66 ftgen 100+15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15_V2), i(gkPS15) ,1,1,1	,0.999678,0.038087,0.002755,0.020021,0.006295,0.000187,0.012594,0.004197,0.013896,0.000677,0.000104,0.000433,0.000213
  giAltoEh69 ftgen 100+16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16_V2), i(gkPS16) ,1,1,1	,1.000001,0.003910,0.006008,0.016207,0.000265,0.023574,0.004637,0.003870,0.000201,0.000631,0.000123
  giAltoEh72 ftgen 100+17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17_V2), i(gkPS17) ,1,1,1	,0.394210,0.006006,0.080968,0.000440,0.022493,0.007950,0.001386,0.000302,0.000206
  giAltoEh75 ftgen 100+18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18_V2), i(gkPS18) ,1,1,1	,0.194429,0.003472,0.009145,0.009090,0.007850,0.000792,0.001344
  giAltoEh78 ftgen 100+19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19_V2), i(gkPS19) ,1,1,1	,0.076172,0.040042,0.000373,0.008393,0.001355,0.000427
  giAltoEh81 ftgen 100+20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20_V2), i(gkPS20) ,1,1,1	,0.007820,0.032414,0.047156,0.007739,0.000246
  giAltoEh84 ftgen 100+21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21_V2), i(gkPS21) ,1,1,1	,0.012011,0.000881,0.015900,0.000124,0.000412
 elseif iVoice2==18 then
  giAltoEee24 ftgen 100+1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1_V2) , i(gkPS1)  ,1,1,1	,0.004734,0.005426,0.006616,0.008187,0.010807,0.014143,0.019214,0.028383,0.042150,0.084741,0.096689,0.058804,0.031217,0.023777,0.015637,0.012369,0.009000,0.006764,0.005109,0.003621,0.002624,0.001760,0.001102,0.000655,0.000294,0.000144,0.000174,0.000252,0.000263,0.000258,0.000224,0.000168,0.000120,0.000134,0.000222,0.000342,0.000495,0.000695,0.000938,0.001253,0.001659,0.002197,0.003006,0.004145,0.005948,0.006987,0.005870,0.004071,0.002952,0.002161,0.001639,0.001249,0.000949,0.000719,0.000532,0.000385,0.000268,0.000175,0.000107,0.000136,0.000197,0.000274,0.000368,0.000490,0.000641,0.000851,0.001137,0.001539,0.001960,0.001987,0.001583,0.001163,0.000868,0.000655,0.000503,0.000386,0.000296,0.000224,0.000165,0.000118
  giAltoEee27 ftgen 100+2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2_V2) , i(gkPS2)  ,1,1,1	,0.005733,0.007002,0.008794,0.011941,0.016656,0.024458,0.035967,0.075403,0.118292,0.075882,0.036455,0.024866,0.016911,0.011927,0.008415,0.006026,0.004028,0.002674,0.001591,0.000891,0.000358,0.000167,0.000242,0.000314,0.000312,0.000271,0.000193,0.000123,0.000109,0.000199,0.000350,0.000552,0.000829,0.001181,0.001665,0.002311,0.003324,0.004850,0.007381,0.008158,0.005824,0.003857,0.002663,0.001912,0.001382,0.000998,0.000708,0.000485,0.000316,0.000189,0.000101,0.000135,0.000213,0.000320,0.000454,0.000635,0.000878,0.001238,0.001765,0.002361,0.002288,0.001653,0.001159,0.000824,0.000602,0.000439,0.000319,0.000226,0.000154,0.000147,0.000209,0.000290,0.000395,0.000538,0.000733,0.000978,0.001145,0.001038,0.000788,0.000577,0.000424,0.000314
  giAltoEee30 ftgen 100+3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3_V2) , i(gkPS3)  ,1,1,1	,0.006959,0.009081,0.012315,0.018565,0.028153,0.044588,0.114187,0.124993,0.048859,0.031482,0.019683,0.012844,0.008644,0.005471,0.003421,0.001862,0.000902,0.000286,0.000233,0.000370,0.000371,0.000309,0.000202,0.000154,0.000316,0.000568,0.000934,0.001428,0.002143,0.003188,0.004956,0.008182,0.009679,0.006341,0.003982,0.002603,0.001775,0.001204,0.000799,0.000504,0.000291,0.000147,0.000134,0.000236,0.000382,0.000579,0.000856,0.001275,0.001931,0.002784,0.002605,0.001721,0.001138,0.000774,0.000533,0.000364,0.000239,0.000148,0.000108,0.000174,0.000263,0.000386,0.000556,0.000803,0.001139,0.001354,0.001132,0.000793,0.000548,0.000383,0.000267,0.000183,0.000121
  giAltoEee33 ftgen 100+4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4_V2) , i(gkPS4)  ,1,1,1	,0.008585,0.011910,0.018442,0.028601,0.051881,0.148152,0.116598,0.047937,0.025511,0.015999,0.009973,0.005757,0.003142,0.001432,0.000410,0.000282,0.000444,0.000423,0.000287,0.000140,0.000115,0.000271,0.000586,0.001072,0.001777,0.002864,0.004718,0.008269,0.011724,0.007336,0.004255,0.002631,0.001661,0.001032,0.000600,0.000308,0.000128,0.000173,0.000332,0.000566,0.000913,0.001456,0.002388,0.003440,0.002602,0.001568,0.000982,0.000630,0.000399,0.000238,0.000128,0.000101,0.000183,0.000304,0.000480,0.000742,0.001146,0.001590,0.001412,0.000931,0.000601,0.000393,0.000254,0.000158
  giAltoEee36 ftgen 100+5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5_V2) , i(gkPS5)  ,1,1,1	,0.010854,0.016378,0.028295,0.056786,0.169548,0.117657,0.047576,0.024750,0.013535,0.007247,0.003523,0.001311,0.000289,0.000504,0.000516,0.000336,0.000126,0.000268,0.000684,0.001392,0.002510,0.004405,0.008309,0.014010,0.008164,0.004335,0.002505,0.001443,0.000773,0.000352,0.000118,0.000180,0.000395,0.000740,0.001290,0.002287,0.003943,0.003185,0.001748,0.001013,0.000595,0.000332,0.000163,0.000200,0.000368,0.000630,0.001059,0.001722,0.001799,0.001123,0.000669,0.000403,0.000236,0.000128,0.000109,0.000115
  giAltoEee39 ftgen 100+6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6_V2) , i(gkPS6)  ,1,1,1	,0.013990,0.023858,0.048875,0.150665,0.151627,0.049694,0.023833,0.012042,0.005344,0.001779,0.000333,0.000629,0.000543,0.000246,0.000119,0.000397,0.001102,0.002359,0.004615,0.009688,0.016299,0.007706,0.003821,0.001994,0.000969,0.000378,0.000160,0.000427,0.000907,0.001756,0.003531,0.004578,0.002318,0.001204,0.000638,0.000309,0.000117,0.000128,0.000294,0.000580,0.001078,0.001961,0.002080,0.001158,0.000629,0.000339,0.000169,0.000128,0.000135
  giAltoEee42 ftgen 100+7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7_V2) , i(gkPS7)  ,1,1,1	,0.018166,0.037139,0.089205,0.250023,0.062972,0.025695,0.010945,0.003725,0.000572,0.000740,0.000619,0.000188,0.000311,0.001143,0.002867,0.006399,0.016417,0.012713,0.005223,0.002421,0.001017,0.000300,0.000144,0.000475,0.001166,0.002569,0.005607,0.003464,0.001560,0.000733,0.000297,0.000129,0.000351,0.000781,0.001627,0.002743,0.001605,0.000774,0.000369,0.000155,0.000152,0.000148
  giAltoEee45 ftgen 100+8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8_V2) , i(gkPS8)  ,1,1,1	,0.023819,0.057203,0.296329,0.095870,0.031997,0.011515,0.002863,0.000564,0.000846,0.000280,0.000125,0.000542,0.002146,0.005737,0.016566,0.014688,0.005270,0.002068,0.000618,0.000104,0.000168,0.000665,0.001832,0.004795,0.005221,0.001970,0.000800,0.000255,0.000106,0.000370,0.000967,0.002308,0.002840,0.001209,0.000509,0.000186,0.000129,0.000201,0.000118
  giAltoEee48 ftgen 100+9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9_V2) , i(gkPS9)  ,1,1,1	,0.032760,0.113585,0.235289,0.049500,0.014494,0.002623,0.001009,0.000673,0.000541,0.002795,0.008824,0.028041,0.008677,0.002894,0.000711,0.000113,0.000362,0.001483,0.004584,0.006379,0.002029,0.000664,0.000124,0.000401,0.001264,0.003457,0.002250,0.000805,0.000255,0.000153,0.000229,0.000104
  giAltoEee51 ftgen 100+10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10_V2), i(gkPS10) ,1,1,1	,0.047737,0.301484,0.099415,0.024093,0.003561,0.001256,0.000492,0.000239,0.002207,0.009245,0.032634,0.007649,0.001940,0.000195,0.000322,0.001819,0.007079,0.004645,0.001280,0.000235,0.000103,0.000590,0.002164,0.004171,0.001262,0.000339,0.000163,0.000268
  giAltoEee54 ftgen 100+11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11_V2), i(gkPS11) ,1,1,1	,0.074277,0.500015,0.051387,0.007447,0.001481,0.000373,0.000619,0.005727,0.032843,0.010441,0.002023,0.000168,0.000950,0.005141,0.006928,0.001467,0.000161,0.000256,0.001563,0.005490,0.001551,0.000312,0.000179,0.000297
  giAltoEee57 ftgen 100+12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12_V2), i(gkPS12) ,1,1,1	,0.114410,0.191733,0.023028,0.001128,0.000560,0.001084,0.011476,0.029371,0.004136,0.000208,0.001331,0.009595,0.003939,0.000510,0.000212,0.001935,0.005681,0.001019,0.000104,0.000257,0.000236
  giAltoEee60 ftgen 100+13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13_V2), i(gkPS13) ,1,1,1	,0.227192,0.099004,0.005244,0.001344,0.001073,0.017641,0.017350,0.001409,0.000721,0.009172,0.004060,0.000250,0.000806,0.006918,0.001617,0.000117,0.000126,0.000462
  giAltoEee63 ftgen 100+14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14_V2), i(gkPS14) ,1,1,1	,0.603091,0.048190,0.002514,0.000479,0.018496,0.015302,0.000391,0.003639,0.009291,0.000469,0.001181,0.008347,0.000679,0.000111,0.000537
  giAltoEee66 ftgen 100+15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15_V2), i(gkPS15) ,1,1,1	,1.000000,0.014894,0.000748,0.011456,0.020880,0.000335,0.010283,0.002934,0.000513,0.010980,0.000625,0.000358,0.000173
  giAltoEee69 ftgen 100+16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16_V2), i(gkPS16) ,1,1,1	,0.383427,0.002256,0.002169,0.058726,0.000416,0.019191,0.001023,0.003871,0.002038,0.000111,0.000515,0.000103
  giAltoEee72 ftgen 100+17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17_V2), i(gkPS17) ,1,1,1	,0.197992,0.002686,0.035282,0.002817,0.018344,0.000500,0.013835,0.000234,0.000252,0.000171
  giAltoEee75 ftgen 100+18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18_V2), i(gkPS18) ,1,1,1	,0.096384,0.000955,0.030609,0.007281,0.000937,0.016694,0.000198,0.001073
  giAltoEee78 ftgen 100+19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19_V2), i(gkPS19) ,1,1,1	,0.029788,0.022912,0.000669,0.005868,0.021959,0.000130,0.000347
  giAltoEee81 ftgen 100+20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20_V2), i(gkPS20) ,1,1,1	,0.004512,0.117453,0.038387,0.007742,0.000221,0.000205
  giAltoEee84 ftgen 100+21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21_V2), i(gkPS21) ,1,1,1	,0.005371,0.005634,0.001000,0.000468,0.000341
 elseif iVoice2==19 then
  giAltoOh24 ftgen 100+1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1_V2) , i(gkPS1)  ,1,1,1	,0.001309,0.001824,0.002584,0.003538,0.004745,0.006302,0.008180,0.010795,0.014134,0.018933,0.026852,0.038995,0.065576,0.075348,0.053728,0.033361,0.025424,0.019181,0.016443,0.014528,0.014284,0.015282,0.019092,0.024569,0.022662,0.014749,0.009877,0.007312,0.005506,0.004369,0.003422,0.002692,0.002087,0.001569,0.001146,0.000793,0.000510,0.000298,0.000163,0.000137,0.000169,0.000197,0.000203,0.000190,0.000165,0.000129,0.000119,0.000199,0.000310,0.000458,0.000645,0.000885,0.001184,0.001561,0.002059,0.002697,0.003630,0.004955,0.007043,0.009589,0.009724,0.007266,0.005090,0.003734,0.002767,0.002112,0.001597,0.001205,0.000890,0.000637,0.000446,0.000328,0.000322,0.000409
  giAltoOh27 ftgen 100+2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2_V2) , i(gkPS2)  ,1,1,1	,0.001648,0.002485,0.003697,0.005250,0.007398,0.010097,0.014102,0.019191,0.029184,0.043902,0.080410,0.085492,0.050018,0.033402,0.023668,0.019505,0.017033,0.017382,0.020190,0.028304,0.027191,0.016200,0.010650,0.007363,0.005554,0.004157,0.003124,0.002287,0.001614,0.001073,0.000647,0.000344,0.000174,0.000178,0.000225,0.000243,0.000227,0.000190,0.000138,0.000111,0.000208,0.000358,0.000570,0.000849,0.001223,0.001706,0.002371,0.003273,0.004688,0.006827,0.010463,0.011909,0.008681,0.005736,0.003964,0.002840,0.002045,0.001463,0.001019,0.000679,0.000447,0.000373,0.000475,0.000673,0.000930,0.001272,0.001741,0.002371,0.002729,0.002294,0.001637,0.001172,0.000856,0.000635,0.000471,0.000346,0.000248,0.000173,0.000114
  giAltoOh30 ftgen 100+3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3_V2) , i(gkPS3)  ,1,1,1	,0.002103,0.003449,0.005368,0.008129,0.011793,0.017521,0.025816,0.041586,0.082368,0.104390,0.056599,0.036283,0.025378,0.020950,0.020421,0.024179,0.034910,0.027177,0.014524,0.009440,0.006646,0.004712,0.003347,0.002258,0.001434,0.000804,0.000377,0.000190,0.000239,0.000286,0.000274,0.000222,0.000148,0.000107,0.000224,0.000430,0.000739,0.001171,0.001769,0.002615,0.003842,0.005897,0.009422,0.014095,0.011544,0.006995,0.004512,0.003054,0.002058,0.001364,0.000851,0.000518,0.000455,0.000652,0.000977,0.001416,0.002057,0.002938,0.003127,0.002245,0.001501,0.001027,0.000720,0.000504,0.000346,0.000228,0.000141
  giAltoOh33 ftgen 100+4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4_V2) , i(gkPS4)  ,1,1,1	,0.002740,0.004898,0.008092,0.012802,0.020408,0.032961,0.058600,0.125001,0.084118,0.045111,0.029687,0.024133,0.025379,0.037896,0.035451,0.017081,0.010266,0.006879,0.004582,0.002935,0.001729,0.000859,0.000329,0.000247,0.000333,0.000330,0.000255,0.000149,0.000102,0.000140,0.000335,0.000687,0.001224,0.002024,0.003222,0.005108,0.008605,0.015395,0.014809,0.008247,0.004922,0.003108,0.001934,0.001129,0.000626,0.000566,0.000903,0.001426,0.002224,0.003432,0.003660,0.002373,0.001484,0.000966,0.000632,0.000404,0.000244,0.000132,0.000134,0.000170,0.000126
  giAltoOh36 ftgen 100+5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5_V2) , i(gkPS5)  ,1,1,1	,0.003650,0.007078,0.012608,0.021597,0.037879,0.078022,0.150765,0.066755,0.038384,0.029074,0.030586,0.049175,0.029523,0.014638,0.008747,0.005389,0.003142,0.001589,0.000598,0.000274,0.000395,0.000382,0.000259,0.000113,0.000103,0.000103,0.000112,0.000118,0.000144,0.000399,0.000921,0.001779,0.003139,0.005426,0.009970,0.019301,0.014629,0.007520,0.004255,0.002429,0.001283,0.000662,0.000825,0.001460,0.002472,0.004136,0.004073,0.002334,0.001367,0.000828,0.000489,0.000266,0.000125,0.000105,0.000173,0.000193,0.000114
  giAltoOh39 ftgen 100+6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6_V2) , i(gkPS6)  ,1,1,1	,0.004962,0.010483,0.020163,0.038322,0.087672,0.170724,0.066701,0.038951,0.034708,0.056519,0.032353,0.014706,0.008302,0.004569,0.002143,0.000687,0.000355,0.000485,0.000379,0.000169,0.000126,0.000109,0.000144,0.000141,0.000416,0.001139,0.002447,0.004744,0.009383,0.020945,0.017383,0.007938,0.004095,0.002042,0.000896,0.000951,0.001864,0.003489,0.005470,0.003280,0.001715,0.000944,0.000498,0.000228,0.000109,0.000199,0.000222,0.000115
  giAltoOh42 ftgen 100+7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7_V2) , i(gkPS7)  ,1,1,1	,0.006900,0.016262,0.035055,0.083207,0.208846,0.072590,0.041922,0.048400,0.054385,0.018894,0.009431,0.004519,0.001606,0.000377,0.000573,0.000445,0.000153,0.000115,0.000150,0.000151,0.000158,0.000452,0.001488,0.003562,0.007739,0.018995,0.023248,0.009091,0.004149,0.001716,0.000922,0.001977,0.004164,0.006325,0.003036,0.001458,0.000702,0.000287,0.000117,0.000240,0.000232,0.000105
  giAltoOh45 ftgen 100+8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8_V2) , i(gkPS8)  ,1,1,1	,0.009796,0.025603,0.065926,0.250014,0.090217,0.048269,0.075817,0.034166,0.013762,0.005873,0.001719,0.000494,0.000660,0.000298,0.000114,0.000177,0.000166,0.000192,0.000672,0.002456,0.006469,0.017288,0.029726,0.009883,0.003885,0.001258,0.001818,0.004479,0.007363,0.002986,0.001274,0.000492,0.000134,0.000177,0.000345,0.000157
  giAltoOh48 ftgen 100+9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9_V2) , i(gkPS9)  ,1,1,1	,0.014156,0.043198,0.156079,0.133513,0.058152,0.098380,0.029278,0.010778,0.003174,0.000545,0.000767,0.000229,0.000206,0.000126,0.000217,0.000289,0.001848,0.006291,0.019985,0.029302,0.008528,0.002573,0.001656,0.004961,0.008168,0.002742,0.000983,0.000252,0.000109,0.000211,0.000387,0.000132
  giAltoOh51 ftgen 100+10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10_V2), i(gkPS10) ,1,1,1	,0.020980,0.076697,0.341641,0.077953,0.113133,0.029431,0.009144,0.001375,0.000970,0.000338,0.000253,0.000198,0.000284,0.002284,0.009509,0.041987,0.015901,0.004091,0.001908,0.007000,0.006575,0.001893,0.000457,0.000130,0.000219,0.000443,0.000123
  giAltoOh54 ftgen 100+11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11_V2), i(gkPS11) ,1,1,1	,0.032525,0.166419,0.145169,0.096808,0.037784,0.009041,0.000762,0.000889,0.000227,0.000137,0.000311,0.000902,0.007130,0.038020,0.018180,0.003431,0.003954,0.012653,0.002915,0.000570,0.000161,0.000236,0.000466,0.000102
  giAltoOh57 ftgen 100+12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12_V2), i(gkPS12) ,1,1,1	,0.051206,0.500042,0.096536,0.068326,0.011745,0.000989,0.000597,0.000354,0.000333,0.001345,0.012944,0.059447,0.007770,0.003639,0.014729,0.002548,0.000268,0.000152,0.000355,0.000315
  giAltoOh60 ftgen 100+13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13_V2), i(gkPS13) ,1,1,1	,0.086407,0.267040,0.196788,0.021563,0.001095,0.000450,0.000254,0.000578,0.012590,0.058595,0.005142,0.009927,0.005483,0.000502,0.000175,0.000149,0.000775
  giAltoOh63 ftgen 100+14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14_V2), i(gkPS14) ,1,1,1	,0.153433,0.155941,0.058873,0.002749,0.000677,0.000168,0.000395,0.004570,0.084026,0.008181,0.014008,0.003788,0.000261,0.000109,0.000887
  giAltoOh66 ftgen 100+15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15_V2), i(gkPS15) ,1,1,1	,0.332841,0.193621,0.018082,0.001777,0.000274,0.000623,0.014262,0.036353,0.007910,0.005829,0.000322,0.000104,0.000472,0.000204
  giAltoOh69 ftgen 100+16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16_V2), i(gkPS16) ,1,1,1	,1.000000,0.136629,0.001978,0.000708,0.000666,0.025888,0.015536,0.029450,0.000535,0.000119,0.000710,0.000111
  giAltoOh72 ftgen 100+17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17_V2), i(gkPS17) ,1,1,1	,0.534019,0.043120,0.000901,0.000124,0.025180,0.010281,0.010963,0.000350,0.000297,0.000193
  giAltoOh75 ftgen 100+18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18_V2), i(gkPS18) ,1,1,1	,0.311907,0.005497,0.000334,0.009143,0.016361,0.007576,0.000139,0.001773
  giAltoOh78 ftgen 100+19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19_V2), i(gkPS19) ,1,1,1	,0.387236,0.003555,0.001246,0.072704,0.011658,0.000208,0.000409
  giAltoOh81 ftgen 100+20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20_V2), i(gkPS20) ,1,1,1	,0.273266,0.001417,0.051783,0.058903,0.000238,0.000221
  giAltoOh84 ftgen 100+21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21_V2), i(gkPS21) ,1,1,1	,0.086239,0.000247,0.020561,0.000699,0.000385
 elseif iVoice2==20 then
  giAltoOoh24 ftgen 100+1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1_V2) , i(gkPS1)  ,1,1,1	,0.006790,0.007793,0.009214,0.011657,0.015318,0.019466,0.030008,0.039968,0.083795,0.111525,0.078922,0.039204,0.030853,0.020835,0.017482,0.014376,0.012615,0.012668,0.013183,0.017897,0.025293,0.022448,0.012428,0.008118,0.005897,0.004389,0.003515,0.002702,0.002132,0.001638,0.001205,0.000879,0.000585,0.000364,0.000202,0.000102,0.000109,0.000138,0.000164,0.000161,0.000150,0.000126,0.000128,0.000187,0.000263,0.000356,0.000471,0.000613,0.000790,0.001010,0.001285,0.001628,0.002033,0.002437,0.002674,0.002567,0.002185,0.001749,0.001375,0.001076,0.000841,0.000653,0.000504,0.000384,0.000287,0.000212,0.000152,0.000108
  giAltoOoh27 ftgen 100+2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2_V2) , i(gkPS2)  ,1,1,1	,0.008303,0.009791,0.012449,0.017203,0.022681,0.037000,0.060114,0.125058,0.111065,0.049238,0.035746,0.023284,0.018963,0.015616,0.014922,0.015724,0.023589,0.030602,0.019515,0.010173,0.007095,0.005069,0.003809,0.002822,0.002111,0.001470,0.001008,0.000607,0.000336,0.000144,0.000127,0.000167,0.000197,0.000186,0.000164,0.000119,0.000110,0.000180,0.000275,0.000399,0.000559,0.000764,0.001030,0.001376,0.001826,0.002391,0.002958,0.003205,0.002870,0.002255,0.001699,0.001269,0.000946,0.000699,0.000510,0.000363,0.000253,0.000171,0.000113
  giAltoOoh30 ftgen 100+3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3_V2) , i(gkPS3)  ,1,1,1	,0.010169,0.012589,0.017650,0.024669,0.043280,0.081468,0.157756,0.089091,0.046827,0.028403,0.022088,0.017894,0.018301,0.023035,0.036512,0.022702,0.011378,0.007064,0.005144,0.003564,0.002530,0.001649,0.001018,0.000530,0.000218,0.000148,0.000204,0.000233,0.000212,0.000159,0.000100,0.000185,0.000312,0.000486,0.000722,0.001039,0.001472,0.002066,0.002849,0.003616,0.003709,0.002969,0.002140,0.001514,0.001066,0.000741,0.000504,0.000331,0.000209,0.000128
  giAltoOoh33 ftgen 100+4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4_V2) , i(gkPS4)  ,1,1,1	,0.012545,0.016792,0.026024,0.045873,0.091044,0.186641,0.074850,0.043441,0.028672,0.021632,0.021853,0.032802,0.039616,0.015496,0.009086,0.006060,0.003944,0.002536,0.001505,0.000730,0.000267,0.000184,0.000267,0.000264,0.000210,0.000125,0.000135,0.000272,0.000482,0.000785,0.001216,0.001840,0.002746,0.003908,0.004522,0.003656,0.002483,0.001644,0.001079,0.000691,0.000424,0.000246,0.000138
  giAltoOoh36 ftgen 100+5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5_V2) , i(gkPS5)  ,1,1,1	,0.015591,0.023322,0.038944,0.079963,0.223136,0.078440,0.041689,0.028767,0.025351,0.035817,0.044928,0.016249,0.008786,0.005409,0.003279,0.001761,0.000729,0.000205,0.000277,0.000322,0.000253,0.000133,0.000168,0.000376,0.000714,0.001232,0.002029,0.003271,0.004898,0.005161,0.003518,0.002165,0.001315,0.000773,0.000427,0.000218,0.000115
  giAltoOoh39 ftgen 100+6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6_V2) , i(gkPS6)  ,1,1,1	,0.019557,0.034366,0.073907,0.249826,0.098371,0.046511,0.031196,0.031410,0.061129,0.020319,0.010124,0.005639,0.002938,0.001212,0.000288,0.000334,0.000372,0.000238,0.000103,0.000220,0.000550,0.001116,0.002056,0.003647,0.005908,0.005733,0.003394,0.001890,0.001019,0.000506,0.000227,0.000115
  giAltoOoh42 ftgen 100+7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7_V2) , i(gkPS7)  ,1,1,1	,0.025184,0.049350,0.163002,0.178182,0.056821,0.035802,0.046106,0.045414,0.014134,0.007132,0.003299,0.001061,0.000296,0.000463,0.000314,0.000107,0.000120,0.000103,0.000103,0.000367,0.000973,0.002088,0.004156,0.007278,0.005975,0.003047,0.001492,0.000668,0.000258,0.000125,0.000108,0.000107
  giAltoOoh45 ftgen 100+8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8_V2) , i(gkPS8)  ,1,1,1	,0.033583,0.091750,0.373265,0.086876,0.043265,0.065631,0.030991,0.012123,0.005072,0.001461,0.000369,0.000528,0.000250,0.000145,0.000109,0.000271,0.000967,0.002440,0.005510,0.009071,0.004981,0.002164,0.000851,0.000277,0.000138,0.000103,0.000143
  giAltoOoh48 ftgen 100+9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9_V2) , i(gkPS9)  ,1,1,1	,0.046646,0.159951,0.156876,0.057537,0.071660,0.032501,0.010818,0.003521,0.000411,0.000638,0.000258,0.000149,0.000132,0.000138,0.000328,0.001425,0.004063,0.009814,0.007048,0.002634,0.000855,0.000228,0.000144,0.000107,0.000164
  giAltoOoh51 ftgen 100+10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10_V2), i(gkPS10) ,1,1,1	,0.068767,0.499897,0.093067,0.062857,0.040662,0.011282,0.002425,0.000668,0.000477,0.000140,0.000137,0.000132,0.000162,0.001101,0.004121,0.011845,0.006803,0.002043,0.000456,0.000183,0.000114,0.000193
  giAltoOoh54 ftgen 100+11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11_V2), i(gkPS11) ,1,1,1	,0.098701,0.356319,0.071604,0.090809,0.014265,0.002121,0.000932,0.000159,0.000235,0.000129,0.000214,0.001955,0.008318,0.011948,0.002984,0.000517,0.000201,0.000125,0.000215
  giAltoOoh57 ftgen 100+12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12_V2), i(gkPS12) ,1,1,1	,0.183506,0.173742,0.131280,0.024244,0.002922,0.001057,0.000152,0.000219,0.001935,0.011024,0.009962,0.001703,0.000276,0.000113,0.000181,0.000173
  giAltoOoh60 ftgen 100+13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13_V2), i(gkPS13) ,1,1,1	,0.319941,0.115082,0.065007,0.007044,0.001288,0.000283,0.000127,0.000673,0.008134,0.014095,0.001709,0.000289,0.000332
  giAltoOoh63 ftgen 100+14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14_V2), i(gkPS14) ,1,1,1	,1.000001,0.125741,0.022569,0.001337,0.000279,0.000263,0.002205,0.023707,0.004085,0.000367,0.000387
  giAltoOoh66 ftgen 100+15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15_V2), i(gkPS15) ,1,1,1	,0.712592,0.181596,0.004243,0.000318,0.000259,0.003910,0.023893,0.001033,0.000156,0.000248,0.000124
  giAltoOoh69 ftgen 100+16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16_V2), i(gkPS16) ,1,1,1	,0.347452,0.048482,0.002113,0.000185,0.003869,0.019916,0.000554,0.000125,0.000363
  giAltoOoh72 ftgen 100+17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17_V2), i(gkPS17) ,1,1,1	,0.230150,0.014084,0.000566,0.001346,0.028182,0.000579,0.000168,0.000119
  giAltoOoh75 ftgen 100+18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18_V2), i(gkPS18) ,1,1,1	,0.251504,0.002674,0.000531,0.047427,0.000734,0.000774
  giAltoOoh78 ftgen 100+19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19_V2), i(gkPS19) ,1,1,1	,0.363188,0.000636,0.007820,0.002067,0.000109,0.000249
  giAltoOoh81 ftgen 100+20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20_V2), i(gkPS20) ,1,1,1	,0.096965,0.000370,0.039833,0.000247,0.000141
  giAltoOoh84 ftgen 100+21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21_V2), i(gkPS21) ,1,1,1	,0.028166,0.002692,0.001157,0.000239
 ; SOPRANO
 elseif iVoice2==21 then
  giSopranoAh24 ftgen 100+1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1_V2) , i(gkPS1)  ,1,1,1	,0.000243,0.000331,0.000420,0.000500,0.000551,0.000561,0.000535,0.000457,0.000407,0.000521,0.000895,0.001468,0.002246,0.003261,0.004498,0.006101,0.008059,0.010521,0.013877,0.018007,0.024724,0.033985,0.051610,0.076040,0.075738,0.052053,0.036243,0.028064,0.022858,0.020510,0.019512,0.020774,0.023901,0.031564,0.037490,0.031794,0.021090,0.015085,0.011109,0.008541,0.006680,0.005201,0.004060,0.003097,0.002311,0.001666,0.001140,0.000733,0.000435,0.000268,0.000244,0.000282,0.000311,0.000312,0.000289,0.000247,0.000195,0.000140,0.000112,0.000165,0.000229,0.000305,0.000401,0.000521,0.000683,0.000907,0.001221,0.001582,0.001659,0.001357,0.001002,0.000751,0.000566,0.000433,0.000328,0.000245,0.000178,0.000123
  giSopranoAh27 ftgen 100+2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2_V2) , i(gkPS2)  ,1,1,1	,0.000306,0.000437,0.000557,0.000646,0.000669,0.000627,0.000515,0.000518,0.000901,0.001666,0.002762,0.004254,0.006165,0.008737,0.011991,0.016649,0.022748,0.033722,0.050609,0.085620,0.090728,0.057631,0.039541,0.029400,0.025061,0.023243,0.025034,0.030554,0.042366,0.041517,0.026592,0.017689,0.012328,0.009171,0.006810,0.005073,0.003690,0.002597,0.001732,0.001065,0.000592,0.000326,0.000296,0.000351,0.000375,0.000355,0.000301,0.000227,0.000150,0.000102,0.000108,0.000106,0.000176,0.000263,0.000371,0.000511,0.000698,0.000974,0.001379,0.001893,0.001941,0.001448,0.001016,0.000723,0.000525,0.000378,0.000266,0.000177,0.000111,0.000134,0.000234,0.000381,0.000580,0.000844,0.001189,0.001641,0.002250,0.003093,0.004320,0.006062,0.007661
  giSopranoAh30 ftgen 100+3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3_V2) , i(gkPS3)  ,1,1,1	,0.000390,0.000574,0.000730,0.000796,0.000751,0.000597,0.000704,0.001497,0.002843,0.004841,0.007543,0.011311,0.016537,0.024179,0.037585,0.060986,0.108486,0.093219,0.053086,0.036955,0.029857,0.027640,0.031245,0.043881,0.052110,0.032914,0.020217,0.013324,0.009422,0.006627,0.004584,0.003021,0.001841,0.000997,0.000471,0.000343,0.000417,0.000445,0.000401,0.000308,0.000200,0.000106,0.000107,0.000127,0.000122,0.000173,0.000287,0.000435,0.000637,0.000926,0.001386,0.002094,0.002326,0.001646,0.001087,0.000731,0.000499,0.000330,0.000205,0.000116,0.000177,0.000335,0.000575,0.000913,0.001379,0.002023,0.002940,0.004333,0.006473,0.008929,0.008243,0.005616,0.003765,0.002575,0.001770,0.001205,0.000794,0.000500,0.000293,0.000161
  giSopranoAh33 ftgen 100+4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4_V2) , i(gkPS4)  ,1,1,1	,0.000506,0.000759,0.000930,0.000920,0.000718,0.000914,0.002228,0.004508,0.007891,0.012923,0.020316,0.031841,0.054837,0.111349,0.120063,0.062505,0.041150,0.033769,0.034811,0.047594,0.062278,0.035528,0.020648,0.013186,0.008671,0.005635,0.003425,0.001850,0.000831,0.000409,0.000484,0.000529,0.000455,0.000312,0.000163,0.000128,0.000152,0.000137,0.000193,0.000356,0.000577,0.000900,0.001436,0.002358,0.002764,0.001789,0.001100,0.000697,0.000432,0.000248,0.000125,0.000200,0.000427,0.000795,0.001343,0.002141,0.003346,0.005301,0.008544,0.010941,0.007840,0.004856,0.003081,0.001971,0.001236,0.000735,0.000401,0.000199,0.000112,0.000101,0.000129,0.000193,0.000281,0.000339,0.000248,0.000156,0.000103
  giSopranoAh36 ftgen 100+5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5_V2) , i(gkPS5)  ,1,1,1	,0.000663,0.001001,0.001123,0.000915,0.001042,0.002938,0.006525,0.012209,0.021053,0.036037,0.068016,0.152197,0.104196,0.056180,0.041062,0.041595,0.063208,0.063675,0.030215,0.017110,0.010421,0.006205,0.003340,0.001470,0.000537,0.000565,0.000626,0.000496,0.000281,0.000117,0.000145,0.000181,0.000152,0.000138,0.000333,0.000614,0.001047,0.001825,0.003186,0.002732,0.001512,0.000873,0.000495,0.000248,0.000109,0.000106,0.000245,0.000590,0.001185,0.002126,0.003633,0.006253,0.010976,0.012260,0.007210,0.004145,0.002442,0.001401,0.000743,0.000345,0.000154,0.000120,0.000112,0.000142,0.000230,0.000359,0.000380,0.000227,0.000136
  giSopranoAh39 ftgen 100+6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6_V2) , i(gkPS6)  ,1,1,1	,0.000871,0.001289,0.001252,0.001035,0.003325,0.008494,0.017445,0.033243,0.067334,0.170973,0.115091,0.058712,0.046417,0.061016,0.082910,0.035326,0.018317,0.010133,0.005189,0.002129,0.000651,0.000702,0.000709,0.000454,0.000173,0.000166,0.000215,0.000159,0.000213,0.000526,0.001023,0.001949,0.003788,0.002898,0.001448,0.000757,0.000355,0.000135,0.000106,0.000155,0.000469,0.001164,0.002384,0.004512,0.008666,0.015371,0.010478,0.005371,0.002862,0.001463,0.000658,0.000247,0.000145,0.000134,0.000130,0.000242,0.000414,0.000435,0.000230,0.000129
  giSopranoAh42 ftgen 100+7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7_V2) , i(gkPS7)  ,1,1,1	,0.001148,0.001591,0.001193,0.002995,0.009688,0.022636,0.048394,0.122093,0.186546,0.073972,0.055348,0.087905,0.065898,0.026687,0.013278,0.006054,0.001998,0.000689,0.000892,0.000619,0.000212,0.000215,0.000244,0.000119,0.000343,0.000873,0.001866,0.004223,0.003315,0.001471,0.000664,0.000232,0.000124,0.000185,0.000679,0.001851,0.004101,0.008791,0.018115,0.011387,0.005227,0.002448,0.001017,0.000329,0.000170,0.000149,0.000119,0.000263,0.000501,0.000460,0.000214,0.000113
  giSopranoAh45 ftgen 100+8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8_V2) , i(gkPS8)  ,1,1,1	,0.001518,0.001840,0.001829,0.009018,0.025849,0.063699,0.222787,0.125025,0.067561,0.095260,0.071075,0.026387,0.011277,0.003702,0.000818,0.001059,0.000625,0.000181,0.000305,0.000184,0.000153,0.000714,0.001808,0.004736,0.003592,0.001400,0.000498,0.000149,0.000193,0.000861,0.002706,0.006746,0.017233,0.015795,0.006213,0.002495,0.000811,0.000226,0.000191,0.000161,0.000390,0.000688,0.000316,0.000144
  giSopranoAh48 ftgen 100+9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9_V2) , i(gkPS9)  ,1,1,1	,0.002001,0.001828,0.005878,0.024425,0.072091,0.304494,0.112379,0.083227,0.127363,0.034228,0.012415,0.002941,0.001132,0.000993,0.000234,0.000361,0.000158,0.000116,0.000662,0.002099,0.006388,0.003027,0.000988,0.000219,0.000213,0.001186,0.004269,0.012560,0.024604,0.008321,0.002813,0.000693,0.000241,0.000162,0.000153,0.000462,0.000765,0.000273,0.000112
  giSopranoAh51 ftgen 100+10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10_V2), i(gkPS10) ,1,1,1	,0.002580,0.002072,0.017002,0.066543,0.342244,0.117509,0.122162,0.070710,0.020284,0.004261,0.001405,0.000907,0.000333,0.000319,0.000105,0.001054,0.003908,0.005806,0.001517,0.000271,0.000310,0.002335,0.009056,0.030843,0.010772,0.002935,0.000495,0.000270,0.000120,0.000486,0.000873,0.000259
  giSopranoAh54 ftgen 100+11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11_V2), i(gkPS11) ,1,1,1	,0.003183,0.005991,0.045273,0.244218,0.147927,0.175844,0.053372,0.012105,0.001376,0.001237,0.000431,0.000243,0.000165,0.000696,0.003738,0.006635,0.001332,0.000247,0.001360,0.008210,0.036260,0.010453,0.002030,0.000343,0.000153,0.000529,0.000919,0.000227
  giSopranoAh57 ftgen 100+12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12_V2), i(gkPS12) ,1,1,1	,0.003681,0.018037,0.127409,0.250032,0.190549,0.052769,0.007402,0.002118,0.000363,0.000368,0.000180,0.001429,0.009476,0.002801,0.000297,0.001724,0.013504,0.031591,0.004990,0.000452,0.000189,0.000780,0.000631,0.000132
  giSopranoAh60 ftgen 100+13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13_V2), i(gkPS13) ,1,1,1	,0.003660,0.048855,0.609099,0.166474,0.068463,0.005879,0.001985,0.000726,0.000219,0.001335,0.012780,0.001982,0.000427,0.008543,0.049218,0.005623,0.000484,0.000309,0.001530,0.000224
  giSopranoAh63 ftgen 100+14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14_V2), i(gkPS14) ,1,1,1	,0.004145,0.133126,0.235070,0.141452,0.008522,0.001818,0.000636,0.000100,0.007822,0.003035,0.000622,0.018126,0.021549,0.000989,0.000240,0.001747,0.000173
  giSopranoAh66 ftgen 100+15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15_V2), i(gkPS15) ,1,1,1	,0.011982,0.488465,0.351711,0.024209,0.002473,0.000485,0.001393,0.013267,0.000494,0.016424,0.020902,0.000686,0.001057,0.000454
  giSopranoAh69 ftgen 100+16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16_V2), i(gkPS16) ,1,1,1	,0.036071,0.499985,0.105518,0.004235,0.000736,0.002858,0.005599,0.003447,0.063157,0.000904,0.001561,0.000264
  giSopranoAh72 ftgen 100+17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17_V2), i(gkPS17) ,1,1,1	,0.097704,0.332922,0.011754,0.001452,0.002670,0.003963,0.017086,0.011243,0.000618,0.000448
  giSopranoAh75 ftgen 100+18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18_V2), i(gkPS18) ,1,1,1	,0.266284,0.282922,0.003635,0.000202,0.006066,0.036263,0.001979,0.003494
  giSopranoAh78 ftgen 100+19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19_V2), i(gkPS19) ,1,1,1	,0.976912,0.048417,0.000970,0.026534,0.032847,0.001372,0.000907
  giSopranoAh81 ftgen 100+20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20_V2), i(gkPS20) ,1,1,1	,1.000001,0.008470,0.005716,0.006895,0.001809,0.000528
  giSopranoAh84 ftgen 100+21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21_V2), i(gkPS21) ,1,1,1	,0.665845,0.002904,0.007927,0.022486,0.000897
 elseif iVoice2==22 then
  giSopranoEh24 ftgen 100+1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1_V2) , i(gkPS1)  ,1,1,1	,0.005375,0.006159,0.007497,0.009319,0.012241,0.016007,0.021786,0.031498,0.046972,0.085088,0.095763,0.062094,0.035620,0.026336,0.017966,0.013939,0.010264,0.007721,0.005804,0.004160,0.003000,0.002025,0.001285,0.000766,0.000371,0.000201,0.000222,0.000300,0.000319,0.000316,0.000283,0.000227,0.000174,0.000113,0.000102,0.000163,0.000248,0.000363,0.000507,0.000697,0.000930,0.001233,0.001635,0.002152,0.002976,0.004104,0.006179,0.007906,0.006942,0.004677,0.003337,0.002428,0.001839,0.001407,0.001067,0.000799,0.000561,0.000352,0.000151,0.000282,0.000528,0.000809,0.001145,0.001552,0.002050,0.002702,0.003535,0.004730,0.006447,0.009098,0.012551,0.013076,0.009939,0.006919,0.005067,0.003738,0.002853,0.002164,0.001644,0.001235,0.000905,0.000647,0.000439,0.000277,0.000158
  giSopranoEh27 ftgen 100+2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2_V2) , i(gkPS2)  ,1,1,1	,0.006525,0.007911,0.010016,0.013570,0.018820,0.027493,0.040827,0.078633,0.116838,0.079159,0.041386,0.027974,0.019129,0.013581,0.009612,0.006849,0.004621,0.003064,0.001847,0.001036,0.000450,0.000231,0.000298,0.000377,0.000380,0.000341,0.000263,0.000186,0.000103,0.000174,0.000289,0.000453,0.000672,0.000967,0.001352,0.001893,0.002630,0.003869,0.005875,0.008999,0.008671,0.005518,0.003725,0.002567,0.001876,0.001352,0.000961,0.000627,0.000335,0.000265,0.000606,0.001006,0.001504,0.002127,0.002953,0.004076,0.005751,0.008319,0.012764,0.016038,0.012717,0.008268,0.005702,0.004030,0.002916,0.002101,0.001501,0.001036,0.000687,0.000418,0.000226,0.000113,0.000126,0.000192,0.000258,0.000326,0.000405,0.000509,0.000644,0.000773,0.000757,0.000593,0.000433,0.000318,0.000237,0.000178,0.000133
  giSopranoEh30 ftgen 100+3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3_V2) , i(gkPS3)  ,1,1,1	,0.007934,0.010268,0.014014,0.020866,0.031775,0.051069,0.115300,0.124988,0.056004,0.035128,0.022210,0.014648,0.009836,0.006282,0.003915,0.002162,0.001056,0.000377,0.000301,0.000440,0.000452,0.000392,0.000282,0.000165,0.000151,0.000284,0.000497,0.000798,0.001223,0.001822,0.002695,0.004186,0.006781,0.010969,0.009099,0.005272,0.003380,0.002303,0.001560,0.001027,0.000581,0.000179,0.000255,0.000730,0.001308,0.002061,0.003062,0.004509,0.006743,0.010496,0.017164,0.017655,0.010910,0.006960,0.004610,0.003129,0.002119,0.001387,0.000863,0.000480,0.000225,0.000124,0.000196,0.000291,0.000386,0.000499,0.000657,0.000858,0.000920,0.000712,0.000490,0.000340,0.000241,0.000172,0.000121
  giSopranoEh33 ftgen 100+4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4_V2) , i(gkPS4)  ,1,1,1	,0.009785,0.013551,0.020874,0.032859,0.059208,0.148132,0.120179,0.053098,0.029187,0.018238,0.011338,0.006607,0.003610,0.001666,0.000527,0.000362,0.000533,0.000521,0.000386,0.000227,0.000106,0.000248,0.000500,0.000893,0.001489,0.002395,0.003832,0.006593,0.012423,0.010837,0.005786,0.003451,0.002202,0.001367,0.000718,0.000151,0.000475,0.001206,0.002167,0.003503,0.005548,0.009076,0.015888,0.022570,0.014146,0.008203,0.005068,0.003190,0.001979,0.001150,0.000585,0.000233,0.000166,0.000296,0.000428,0.000584,0.000810,0.001083,0.001004,0.000662,0.000427,0.000283,0.000188,0.000123,0.000110,0.000151,0.000172,0.000144,0.000101
  giSopranoEh36 ftgen 100+5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5_V2) , i(gkPS5)  ,1,1,1	,0.012322,0.018644,0.032024,0.063018,0.170241,0.124239,0.052696,0.027893,0.015451,0.008324,0.004052,0.001533,0.000402,0.000600,0.000632,0.000454,0.000226,0.000100,0.000205,0.000497,0.001017,0.001865,0.003279,0.005970,0.012399,0.013933,0.006699,0.003693,0.002143,0.001128,0.000303,0.000567,0.001626,0.003121,0.005435,0.009514,0.018307,0.026321,0.013931,0.007528,0.004359,0.002490,0.001304,0.000559,0.000184,0.000297,0.000486,0.000704,0.001040,0.001332,0.000946,0.000559,0.000342,0.000211,0.000126,0.000132,0.000189,0.000199,0.000143
  giSopranoEh39 ftgen 100+6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6_V2) , i(gkPS6)  ,1,1,1	,0.015802,0.027106,0.054923,0.157076,0.158131,0.055887,0.027131,0.013682,0.006122,0.002071,0.000461,0.000753,0.000682,0.000372,0.000101,0.000111,0.000194,0.000578,0.001344,0.002701,0.005258,0.011744,0.017335,0.007449,0.003752,0.001922,0.000671,0.000529,0.002012,0.004255,0.008157,0.016650,0.032107,0.016554,0.008071,0.004209,0.002076,0.000838,0.000227,0.000384,0.000654,0.001019,0.001550,0.001189,0.000637,0.000357,0.000199,0.000105,0.000142,0.000222,0.000233,0.000149
  giSopranoEh42 ftgen 100+7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7_V2) , i(gkPS7)  ,1,1,1	,0.020540,0.041742,0.102173,0.250022,0.070268,0.029304,0.012569,0.004326,0.000755,0.000881,0.000785,0.000331,0.000140,0.000302,0.000996,0.002454,0.005411,0.013623,0.018252,0.006779,0.003128,0.001162,0.000516,0.002634,0.006167,0.013587,0.034596,0.021969,0.009288,0.004271,0.001737,0.000452,0.000399,0.000782,0.001331,0.001862,0.000991,0.000488,0.000244,0.000113,0.000153,0.000264,0.000258,0.000143
  giSopranoEh45 ftgen 100+8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8_V2) , i(gkPS8)  ,1,1,1	,0.027101,0.065718,0.296280,0.106187,0.036474,0.013213,0.003330,0.000725,0.001042,0.000455,0.000159,0.000213,0.001002,0.002983,0.007680,0.024903,0.011593,0.004412,0.001440,0.000954,0.004351,0.011141,0.031928,0.028388,0.010175,0.003972,0.001172,0.000336,0.000864,0.001632,0.002019,0.000860,0.000380,0.000158,0.000105,0.000224,0.000349,0.000206
  giSopranoEh48 ftgen 100+9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9_V2) , i(gkPS9)  ,1,1,1	,0.037289,0.126049,0.248462,0.055787,0.016649,0.003067,0.001199,0.000908,0.000105,0.000195,0.000408,0.002033,0.006568,0.024837,0.013399,0.004282,0.000601,0.003260,0.010894,0.036706,0.027905,0.008733,0.002613,0.000372,0.000976,0.002088,0.001895,0.000683,0.000249,0.000103,0.000265,0.000399,0.000182
  giSopranoEh51 ftgen 100+10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10_V2), i(gkPS10) ,1,1,1	,0.054241,0.314339,0.111819,0.027377,0.004143,0.001507,0.000744,0.000202,0.000389,0.002690,0.010531,0.034705,0.007511,0.001342,0.004034,0.016350,0.064332,0.016169,0.004160,0.000455,0.001312,0.003109,0.001277,0.000398,0.000117,0.000282,0.000466,0.000173
  giSopranoEh54 ftgen 100+11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11_V2), i(gkPS11) ,1,1,1	,0.083485,0.500013,0.058605,0.008650,0.001763,0.000659,0.000290,0.000127,0.001996,0.010824,0.036509,0.006267,0.001028,0.012340,0.069232,0.018578,0.003478,0.000794,0.002663,0.001984,0.000490,0.000121,0.000310,0.000517,0.000148
  giSopranoEh57 ftgen 100+12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12_V2), i(gkPS12) ,1,1,1	,0.131440,0.212366,0.026425,0.001451,0.000910,0.000318,0.000426,0.005968,0.049821,0.008823,0.001910,0.022293,0.056767,0.007944,0.000675,0.003266,0.001719,0.000315,0.000447,0.000411
  giSopranoEh60 ftgen 100+13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13_V2), i(gkPS13) ,1,1,1	,0.252130,0.111578,0.006131,0.001816,0.000401,0.000821,0.013137,0.026816,0.001212,0.021797,0.055807,0.005226,0.001951,0.003795,0.000506,0.000104,0.000211,0.000803,0.000143
  giSopranoEh63 ftgen 100+14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14_V2), i(gkPS14) ,1,1,1	,0.628823,0.054762,0.003015,0.000404,0.000779,0.021073,0.015027,0.008072,0.128717,0.008320,0.002625,0.002555,0.000234,0.000174,0.000934,0.000112
  giSopranoEh66 ftgen 100+15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15_V2), i(gkPS15) ,1,1,1	,1.000000,0.017299,0.001321,0.000255,0.021650,0.012533,0.024684,0.037149,0.001588,0.003967,0.000242,0.000619,0.000296
  giSopranoEh69 ftgen 100+16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16_V2), i(gkPS16) ,1,1,1	,0.424682,0.002901,0.000637,0.011935,0.017641,0.044586,0.015886,0.006533,0.000631,0.000895,0.000169
  giSopranoEh72 ftgen 100+17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17_V2), i(gkPS17) ,1,1,1	,0.223136,0.003631,0.001641,0.053621,0.043595,0.010450,0.007588,0.000208,0.000421,0.000286
  giSopranoEh75 ftgen 100+18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18_V2), i(gkPS18) ,1,1,1	,0.109531,0.000806,0.042151,0.016149,0.016640,0.005110,0.000133,0.001866
  giSopranoEh78 ftgen 100+19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19_V2), i(gkPS19) ,1,1,1	,0.034598,0.000509,0.025064,0.074296,0.007935,0.000130,0.000593
  giSopranoEh81 ftgen 100+20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20_V2), i(gkPS20) ,1,1,1	,0.005801,0.023872,0.089183,0.013066,0.000176,0.000337
  giSopranoEh84 ftgen 100+21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21_V2), i(gkPS21) ,1,1,1	,0.007260,0.107242,0.020899,0.000417,0.000572
 elseif iVoice2==23 then
  giSopranoEee24 ftgen 100+1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1_V2) , i(gkPS1)  ,1,1,1	,0.010638,0.013301,0.017800,0.022937,0.034070,0.046177,0.082117,0.124931,0.109118,0.060110,0.041165,0.028412,0.021053,0.015886,0.011808,0.008953,0.006545,0.004708,0.003285,0.002126,0.001294,0.000655,0.000252,0.000225,0.000362,0.000444,0.000451,0.000423,0.000354,0.000271,0.000187,0.000100,0.000102,0.000106,0.000127,0.000140,0.000138,0.000125,0.000158,0.000300,0.000501,0.000769,0.001120,0.001555,0.002122,0.002825,0.003721,0.004928,0.006460,0.008829,0.012145,0.017913,0.024865,0.024284,0.017013,0.011692,0.008487,0.006258,0.004772,0.003600,0.002730,0.002031,0.001468,0.001022,0.000652,0.000355,0.000117,0.000141,0.000322,0.000509,0.000701,0.000919,0.001190,0.001528,0.002038,0.002743,0.003904,0.004865,0.004376,0.003081,0.002205,0.001615,0.001216,0.000928,0.000704,0.000533,0.000394,0.000284
  giSopranoEee27 ftgen 100+2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2_V2) , i(gkPS2)  ,1,1,1	,0.013143,0.017627,0.024484,0.036616,0.054010,0.106371,0.151537,0.098520,0.052871,0.035393,0.024586,0.017401,0.012353,0.008770,0.005907,0.003868,0.002280,0.001215,0.000447,0.000241,0.000427,0.000533,0.000532,0.000465,0.000348,0.000231,0.000110,0.000104,0.000121,0.000112,0.000126,0.000155,0.000168,0.000158,0.000125,0.000106,0.000207,0.000430,0.000749,0.001201,0.001793,0.002594,0.003630,0.005050,0.007012,0.009981,0.014625,0.023409,0.030837,0.024037,0.014956,0.010218,0.007150,0.005156,0.003700,0.002635,0.001801,0.001168,0.000663,0.000277,0.000105,0.000356,0.000621,0.000897,0.001231,0.001659,0.002305,0.003282,0.004967,0.005817,0.004341,0.002841,0.001963,0.001402,0.001015,0.000731,0.000517,0.000352,0.000228,0.000134,0.000126,0.000225,0.000358,0.000534,0.000764,0.001064,0.001470,0.002034,0.002872,0.004116,0.005339
  giSopranoEee30 ftgen 100+3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3_V2) , i(gkPS3)  ,1,1,1	,0.016328,0.023966,0.035128,0.059257,0.121512,0.177707,0.090670,0.053040,0.031736,0.021506,0.014296,0.009353,0.005850,0.003306,0.001623,0.000515,0.000325,0.000586,0.000639,0.000576,0.000417,0.000250,0.000114,0.000143,0.000131,0.000145,0.000186,0.000199,0.000175,0.000123,0.000211,0.000510,0.000977,0.001671,0.002629,0.003977,0.005882,0.008680,0.013457,0.021730,0.035492,0.029923,0.017181,0.010895,0.007320,0.004922,0.003309,0.002111,0.001243,0.000586,0.000119,0.000355,0.000727,0.001119,0.001622,0.002326,0.003519,0.005702,0.006806,0.004491,0.002815,0.001839,0.001255,0.000850,0.000559,0.000348,0.000196,0.000189,0.000349,0.000574,0.000885,0.001314,0.001924,0.002866,0.004356,0.006214,0.005671,0.003728,0.002462,0.001676,0.001149,0.000782,0.000516,0.000324,0.000187
  giSopranoEee33 ftgen 100+4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4_V2) , i(gkPS4)  ,1,1,1	,0.020626,0.032969,0.058370,0.115099,0.213096,0.095777,0.052675,0.031539,0.019117,0.011719,0.006681,0.003278,0.001235,0.000319,0.000658,0.000760,0.000651,0.000420,0.000175,0.000135,0.000172,0.000141,0.000168,0.000224,0.000231,0.000176,0.000187,0.000547,0.001202,0.002233,0.003774,0.006037,0.009634,0.016040,0.029029,0.043390,0.025586,0.014544,0.008907,0.005565,0.003428,0.001951,0.000904,0.000184,0.000459,0.000990,0.001589,0.002432,0.003929,0.006894,0.007727,0.004364,0.002585,0.001631,0.001026,0.000621,0.000346,0.000162,0.000243,0.000488,0.000854,0.001385,0.002187,0.003507,0.005798,0.007630,0.005258,0.003185,0.002005,0.001280,0.000803,0.000478,0.000258,0.000123,0.000170,0.000276,0.000437,0.000708,0.000961,0.000685,0.000413,0.000261,0.000170,0.000110
  giSopranoEee36 ftgen 100+5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5_V2) , i(gkPS5)  ,1,1,1	,0.026610,0.045888,0.092383,0.249950,0.120266,0.056848,0.031787,0.017916,0.009422,0.004255,0.001310,0.000450,0.000889,0.000846,0.000542,0.000201,0.000187,0.000191,0.000120,0.000112,0.000212,0.000280,0.000251,0.000180,0.000602,0.001541,0.003119,0.005667,0.009889,0.017719,0.035957,0.048756,0.023480,0.012570,0.007234,0.004081,0.002055,0.000713,0.000283,0.001024,0.001849,0.003076,0.005523,0.009798,0.006208,0.003254,0.001871,0.001075,0.000573,0.000258,0.000108,0.000344,0.000740,0.001368,0.002373,0.004137,0.007509,0.008478,0.004765,0.002699,0.001585,0.000909,0.000481,0.000219,0.000165,0.000304,0.000524,0.000930,0.001082,0.000610,0.000347,0.000208,0.000124
  giSopranoEee39 ftgen 100+6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6_V2) , i(gkPS6)  ,1,1,1	,0.035209,0.073147,0.212478,0.196804,0.070708,0.034761,0.017520,0.007728,0.002428,0.000481,0.001065,0.000929,0.000462,0.000208,0.000225,0.000124,0.000181,0.000310,0.000315,0.000211,0.000859,0.002401,0.005185,0.010096,0.019955,0.046808,0.048070,0.020438,0.010314,0.005271,0.002337,0.000554,0.000712,0.001795,0.003321,0.006570,0.011649,0.005690,0.002809,0.001465,0.000706,0.000269,0.000254,0.000717,0.001531,0.002949,0.005763,0.010715,0.006995,0.003499,0.001858,0.000950,0.000424,0.000150,0.000118,0.000278,0.000538,0.001060,0.001234,0.000610,0.000321,0.000174
  giSopranoEee42 ftgen 100+7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7_V2) , i(gkPS7)  ,1,1,1	,0.047942,0.118546,0.355496,0.106101,0.043023,0.018713,0.006614,0.001030,0.001174,0.001153,0.000500,0.000284,0.000191,0.000193,0.000380,0.000359,0.000423,0.001960,0.005278,0.011817,0.027041,0.071322,0.034504,0.014706,0.006650,0.002498,0.000238,0.001464,0.003270,0.007097,0.013721,0.005674,0.002532,0.001128,0.000397,0.000382,0.001165,0.002666,0.005818,0.012613,0.007557,0.003399,0.001587,0.000656,0.000201,0.000104,0.000255,0.000576,0.001288,0.001283,0.000555,0.000270,0.000125
  giSopranoEee45 ftgen 100+8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8_V2) , i(gkPS8)  ,1,1,1	,0.065934,0.230214,0.191525,0.063074,0.023438,0.006556,0.000638,0.001521,0.000841,0.000343,0.000179,0.000337,0.000464,0.000376,0.002409,0.007565,0.019312,0.058226,0.051263,0.017853,0.006873,0.001812,0.000923,0.003191,0.007896,0.015518,0.005189,0.002060,0.000693,0.000490,0.001722,0.004412,0.011699,0.010593,0.004042,0.001620,0.000520,0.000134,0.000111,0.000344,0.000887,0.001947,0.000836,0.000344,0.000137
  giSopranoEee48 ftgen 100+9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9_V2) , i(gkPS9)  ,1,1,1	,0.091783,0.499950,0.113693,0.035833,0.008510,0.000901,0.001693,0.000403,0.000370,0.000237,0.000436,0.000513,0.001200,0.006244,0.019806,0.072046,0.047005,0.014484,0.004113,0.000568,0.003707,0.011075,0.012437,0.003752,0.001151,0.000146,0.000689,0.002748,0.008313,0.017019,0.005417,0.001825,0.000438,0.000148,0.000332,0.001055,0.002175,0.000698,0.000249
  giSopranoEee51 ftgen 100+10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10_V2), i(gkPS10) ,1,1,1	,0.146370,0.393762,0.069555,0.015463,0.000962,0.001858,0.000450,0.000362,0.000631,0.001719,0.010386,0.039977,0.096231,0.020650,0.004678,0.001429,0.006658,0.023341,0.005628,0.001415,0.001439,0.005919,0.021497,0.007017,0.001904,0.000301,0.000156,0.000237,0.001080,0.002476,0.000648,0.000179
  giSopranoEee54 ftgen 100+11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11_V2), i(gkPS11) ,1,1,1	,0.237094,0.212185,0.037422,0.002059,0.002305,0.000169,0.000384,0.000744,0.000848,0.010559,0.054094,0.068997,0.013299,0.000476,0.006544,0.027445,0.005064,0.000793,0.000765,0.005332,0.025238,0.006800,0.001313,0.000208,0.000144,0.001157,0.002565,0.000537
  giSopranoEee57 ftgen 100+12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12_V2), i(gkPS12) ,1,1,1	,0.460456,0.126143,0.013110,0.003041,0.000110,0.000358,0.000928,0.004819,0.038635,0.102507,0.013746,0.001848,0.015801,0.010379,0.001387,0.000981,0.008831,0.021187,0.003241,0.000268,0.000155,0.001775,0.001673,0.000275
  giSopranoEee60 ftgen 100+13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13_V2), i(gkPS13) ,1,1,1	,0.999999,0.071669,0.001801,0.000804,0.000480,0.001006,0.012498,0.144146,0.028964,0.001138,0.022162,0.007499,0.000284,0.005499,0.034034,0.003651,0.000296,0.000666,0.004356,0.000498
  giSopranoEee63 ftgen 100+14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14_V2), i(gkPS14) ,1,1,1	,0.787626,0.030929,0.003718,0.000901,0.001263,0.020781,0.192483,0.009358,0.013320,0.011259,0.000185,0.011846,0.014037,0.000603,0.000473,0.004954,0.000357
  giSopranoEee66 ftgen 100+15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15_V2), i(gkPS15) ,1,1,1	,0.424357,0.004117,0.000335,0.001490,0.021121,0.137972,0.000951,0.054887,0.001585,0.010667,0.013598,0.000416,0.002313,0.001073
  giSopranoEee69 ftgen 100+16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16_V2), i(gkPS16) ,1,1,1	,0.252260,0.006081,0.000717,0.009639,0.204955,0.003697,0.020753,0.001961,0.042356,0.000535,0.003552,0.000551
  giSopranoEee72 ftgen 100+17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17_V2), i(gkPS17) ,1,1,1	,0.143330,0.001607,0.002011,0.288307,0.002276,0.014994,0.010998,0.007299,0.001333,0.000996
  giSopranoEee75 ftgen 100+18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18_V2), i(gkPS18) ,1,1,1	,0.061863,0.001803,0.041574,0.018718,0.022519,0.023699,0.001207,0.009907,0.000135
  giSopranoEee78 ftgen 100+19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19_V2), i(gkPS19) ,1,1,1	,0.008237,0.002981,0.275939,0.109772,0.021334,0.000832,0.002147
  giSopranoEee81 ftgen 100+20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20_V2), i(gkPS20) ,1,1,1	,0.012164,0.019280,0.007395,0.003926,0.001069,0.001101
  giSopranoEee84 ftgen 100+21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21_V2), i(gkPS21) ,1,1,1	,0.003212,0.576616,0.029989,0.014597,0.001991
 elseif iVoice2==24 then
  giSopranoOh24 ftgen 100+1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1_V2) , i(gkPS1)  ,1,1,1	,0.001294,0.001804,0.002559,0.003508,0.004711,0.006268,0.008148,0.010769,0.014119,0.018933,0.026874,0.039039,0.065610,0.075277,0.053501,0.033025,0.024955,0.018554,0.015599,0.013411,0.012721,0.013105,0.015740,0.019623,0.017772,0.011470,0.007689,0.005735,0.004357,0.003493,0.002766,0.002194,0.001717,0.001300,0.000955,0.000665,0.000428,0.000251,0.000137,0.000118,0.000148,0.000173,0.000179,0.000168,0.000147,0.000115,0.000151,0.000226,0.000321,0.000442,0.000592,0.000782,0.001031,0.001351,0.001818,0.002481,0.003526,0.004801,0.004868,0.003637,0.002548,0.001868,0.001383,0.001054,0.000797,0.000601,0.000445,0.000319,0.000220,0.000141
  giSopranoOh27 ftgen 100+2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2_V2) , i(gkPS2)  ,1,1,1	,0.001630,0.002458,0.003663,0.005211,0.007357,0.010060,0.014075,0.019183,0.029201,0.043953,0.080445,0.085357,0.049683,0.032906,0.022953,0.018492,0.015615,0.015240,0.016916,0.022734,0.021331,0.012592,0.008310,0.005802,0.004428,0.003356,0.002549,0.001886,0.001341,0.000898,0.000544,0.000289,0.000147,0.000155,0.000197,0.000214,0.000201,0.000168,0.000123,0.000175,0.000282,0.000423,0.000611,0.000854,0.001187,0.001639,0.002348,0.003418,0.005238,0.005962,0.004346,0.002871,0.001982,0.001418,0.001020,0.000730,0.000509,0.000340,0.000212,0.000117,0.000123,0.000210,0.000333,0.000498,0.000717,0.001000,0.001380,0.001892,0.002632,0.003685,0.005013,0.005372,0.004237,0.003015
  giSopranoOh30 ftgen 100+3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3_V2) , i(gkPS3)  ,1,1,1	,0.002079,0.003414,0.005324,0.008081,0.011748,0.017492,0.025815,0.041628,0.082430,0.104259,0.056186,0.035627,0.024387,0.019456,0.018039,0.020232,0.027855,0.021210,0.011299,0.007422,0.005297,0.003812,0.002741,0.001871,0.001197,0.000675,0.000317,0.000162,0.000209,0.000251,0.000242,0.000197,0.000132,0.000107,0.000210,0.000366,0.000584,0.000885,0.001310,0.001924,0.002953,0.004717,0.007057,0.005779,0.003501,0.002256,0.001525,0.001026,0.000681,0.000426,0.000243,0.000117,0.000130,0.000248,0.000426,0.000678,0.001026,0.001509,0.002196,0.003251,0.004858,0.006394,0.005489,0.003690,0.002478,0.001703,0.001172,0.000797,0.000524,0.000327,0.000190,0.000103
  giSopranoOh33 ftgen 100+4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4_V2) , i(gkPS4)  ,1,1,1	,0.002709,0.004852,0.008035,0.012747,0.020371,0.032964,0.058669,0.125001,0.083706,0.044369,0.028467,0.022150,0.021874,0.030653,0.027728,0.013291,0.008093,0.005517,0.003734,0.002427,0.001444,0.000721,0.000277,0.000215,0.000292,0.000291,0.000227,0.000134,0.000161,0.000338,0.000610,0.001012,0.001614,0.002559,0.004309,0.007707,0.007414,0.004128,0.002461,0.001551,0.000965,0.000565,0.000295,0.000120,0.000108,0.000252,0.000490,0.000850,0.001378,0.002169,0.003420,0.005508,0.007680,0.005998,0.003714,0.002344,0.001506,0.000954,0.000577,0.000322,0.000161,0.000107,0.000158,0.000239,0.000301,0.000222,0.000137
  giSopranoOh36 ftgen 100+5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5_V2) , i(gkPS5)  ,1,1,1	,0.003609,0.007017,0.012541,0.021545,0.037880,0.078111,0.150624,0.066083,0.037128,0.026838,0.026228,0.039276,0.022960,0.011480,0.006993,0.004394,0.002604,0.001332,0.000502,0.000236,0.000346,0.000337,0.000231,0.000102,0.000101,0.000192,0.000455,0.000888,0.001572,0.002718,0.004992,0.009663,0.007323,0.003762,0.002124,0.001211,0.000642,0.000285,0.000266,0.000594,0.001132,0.001982,0.003379,0.005927,0.009151,0.006623,0.003751,0.002204,0.001292,0.000718,0.000358,0.000154,0.000119,0.000190,0.000308,0.000340,0.000202,0.000117
  giSopranoOh39 ftgen 100+6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6_V2) , i(gkPS6)  ,1,1,1	,0.004909,0.010405,0.020089,0.038305,0.087774,0.170455,0.065711,0.036928,0.030431,0.045396,0.025146,0.011587,0.006704,0.003768,0.001793,0.000577,0.000309,0.000427,0.000337,0.000152,0.000119,0.000109,0.000199,0.000563,0.001223,0.002376,0.004699,0.010486,0.008702,0.003969,0.002043,0.001020,0.000424,0.000103,0.000125,0.000420,0.000997,0.002005,0.003793,0.007390,0.010776,0.006049,0.003151,0.001678,0.000839,0.000359,0.000132,0.000102,0.000113,0.000198,0.000355,0.000391,0.000203,0.000109
  giSopranoOh42 ftgen 100+7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7_V2) , i(gkPS7)  ,1,1,1	,0.006830,0.016166,0.034995,0.083292,0.208584,0.071275,0.038932,0.040498,0.042444,0.014854,0.007630,0.003744,0.001348,0.000320,0.000504,0.000396,0.000138,0.000106,0.000146,0.000215,0.000737,0.001782,0.003877,0.009510,0.011639,0.004546,0.002069,0.000859,0.000236,0.000109,0.000501,0.001372,0.003057,0.006592,0.012961,0.007475,0.003451,0.001615,0.000663,0.000208,0.000120,0.000112,0.000108,0.000215,0.000428,0.000411,0.000185
  giSopranoOh45 ftgen 100+8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8_V2) , i(gkPS8)  ,1,1,1	,0.009704,0.025493,0.065932,0.250014,0.088732,0.044302,0.061324,0.026584,0.011036,0.004855,0.001443,0.000431,0.000582,0.000267,0.000105,0.000172,0.000323,0.001223,0.003240,0.008657,0.014882,0.004940,0.001937,0.000593,0.000507,0.001712,0.004370,0.011103,0.012077,0.004722,0.001922,0.000649,0.000167,0.000146,0.000143,0.000321,0.000611,0.000278,0.000117
  giSopranoOh48 ftgen 100+9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9_V2) , i(gkPS9)  ,1,1,1	,0.014035,0.043095,0.156256,0.132167,0.053681,0.078574,0.022962,0.008787,0.002659,0.000470,0.000678,0.000207,0.000194,0.000136,0.000137,0.000913,0.003151,0.010006,0.014670,0.004259,0.001289,0.000160,0.000534,0.002274,0.006787,0.018371,0.007525,0.002591,0.000717,0.000172,0.000153,0.000144,0.000382,0.000684,0.000234
  giSopranoOh51 ftgen 100+10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10_V2), i(gkPS10) ,1,1,1	,0.020824,0.076663,0.341102,0.073904,0.090867,0.023190,0.007540,0.001155,0.000855,0.000304,0.000238,0.000105,0.000141,0.001129,0.004763,0.021021,0.007952,0.002044,0.000206,0.000843,0.004024,0.014832,0.012128,0.003366,0.000720,0.000204,0.000117,0.000109,0.000398,0.000782,0.000218
  giSopranoOh54 ftgen 100+11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11_V2), i(gkPS11) ,1,1,1	,0.032333,0.166589,0.142539,0.081002,0.029705,0.007490,0.000649,0.000790,0.000209,0.000157,0.000135,0.000430,0.003567,0.019036,0.009090,0.001717,0.000218,0.002747,0.013196,0.014956,0.003234,0.000418,0.000224,0.000433,0.000823,0.000182
  giSopranoOh57 ftgen 100+12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12_V2), i(gkPS12) ,1,1,1	,0.050988,0.500042,0.088602,0.053164,0.009710,0.000862,0.000535,0.000344,0.000132,0.000646,0.006483,0.029761,0.003875,0.000144,0.003426,0.022224,0.009445,0.001297,0.000291,0.000642,0.000556
  giSopranoOh60 ftgen 100+13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13_V2), i(gkPS13) ,1,1,1	,0.086202,0.264349,0.157171,0.017580,0.000946,0.000407,0.000273,0.000276,0.006305,0.029333,0.002574,0.001071,0.013581,0.015055,0.001438,0.000307,0.000288,0.001369,0.000173
  giSopranoOh63 ftgen 100+14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14_V2), i(gkPS14) ,1,1,1	,0.153365,0.147839,0.046389,0.002309,0.000608,0.000209,0.000135,0.002259,0.042068,0.004087,0.001687,0.029687,0.006733,0.000409,0.000218,0.001565,0.000131
  giSopranoOh66 ftgen 100+15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15_V2), i(gkPS15) ,1,1,1	,0.333182,0.162007,0.014981,0.001580,0.000313,0.000270,0.007135,0.018178,0.000437,0.026398,0.006466,0.000447,0.000865,0.000364
  giSopranoOh69 ftgen 100+16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16_V2), i(gkPS16) ,1,1,1	,0.999999,0.106309,0.001723,0.000687,0.000264,0.012966,0.007747,0.006853,0.018884,0.000582,0.001285,0.000199
  giSopranoOh72 ftgen 100+17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17_V2), i(gkPS17) ,1,1,1	,0.528638,0.035156,0.000814,0.000113,0.012612,0.005146,0.027163,0.002875,0.000576,0.000345
  giSopranoOh75 ftgen 100+18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18_V2), i(gkPS18) ,1,1,1	,0.295700,0.004617,0.000416,0.004518,0.008174,0.059391,0.000819,0.003130
  giSopranoOh78 ftgen 100+19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19_V2), i(gkPS19) ,1,1,1	,0.324009,0.003159,0.000539,0.036354,0.052795,0.000895,0.000729
  giSopranoOh81 ftgen 100+20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20_V2), i(gkPS20) ,1,1,1	,0.212624,0.001375,0.025936,0.013708,0.001164,0.000397
  giSopranoOh84 ftgen 100+21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21_V2), i(gkPS21) ,1,1,1	,0.070310,0.000226,0.010293,0.005749,0.000690
 elseif iVoice2==25 then
  giSopranoOoh24 ftgen 100+1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1_V2) , i(gkPS1)  ,1,1,1	,0.006736,0.007744,0.009173,0.011625,0.015301,0.019467,0.030031,0.040022,0.083847,0.111438,0.078627,0.038797,0.030293,0.020098,0.016517,0.013075,0.010944,0.010263,0.009904,0.012389,0.016364,0.013953,0.007558,0.004976,0.003673,0.002791,0.002294,0.001798,0.001446,0.001130,0.000839,0.000619,0.000412,0.000255,0.000142,0.000113,0.000132,0.000128,0.000119,0.000126,0.000173,0.000228,0.000299,0.000385,0.000495,0.000633,0.000806,0.001004,0.001164,0.001174,0.001025,0.000827,0.000650,0.000509,0.000398,0.000310,0.000240,0.000183,0.000137
  giSopranoOoh27 ftgen 100+2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2_V2) , i(gkPS2)  ,1,1,1	,0.008240,0.009736,0.012406,0.017177,0.022681,0.037033,0.060187,0.125058,0.110778,0.048765,0.035061,0.022345,0.017647,0.013782,0.012248,0.011790,0.016043,0.019429,0.011945,0.006214,0.004417,0.003235,0.002505,0.001898,0.001450,0.001023,0.000710,0.000427,0.000235,0.000103,0.000106,0.000137,0.000159,0.000148,0.000130,0.000131,0.000191,0.000267,0.000368,0.000496,0.000668,0.000893,0.001169,0.001399,0.001375,0.001123,0.000853,0.000637,0.000476,0.000354,0.000259,0.000186,0.000129,0.000104,0.000147,0.000202,0.000272,0.000362,0.000479,0.000623,0.000759,0.000789,0.000681,0.000530
  giSopranoOoh30 ftgen 100+3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3_V2) , i(gkPS3)  ,1,1,1	,0.010095,0.012529,0.017608,0.024663,0.043315,0.081558,0.157661,0.088611,0.046106,0.027324,0.020478,0.015548,0.014372,0.016229,0.023376,0.013886,0.006978,0.004439,0.003346,0.002384,0.001737,0.001149,0.000718,0.000372,0.000154,0.000123,0.000167,0.000187,0.000168,0.000125,0.000135,0.000212,0.000319,0.000466,0.000663,0.000940,0.001310,0.001651,0.001590,0.001211,0.000862,0.000610,0.000429,0.000296,0.000198,0.000125,0.000140,0.000209,0.000299,0.000421,0.000586,0.000792,0.000937,0.000852,0.000643,0.000461,0.000327,0.000231,0.000160,0.000107
  giSopranoOoh33 ftgen 100+4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4_V2) , i(gkPS4)  ,1,1,1	,0.012459,0.016728,0.025997,0.045900,0.091150,0.186461,0.074200,0.042360,0.026982,0.018939,0.017010,0.022371,0.024731,0.009432,0.005684,0.003945,0.002654,0.001756,0.001058,0.000513,0.000188,0.000154,0.000216,0.000210,0.000166,0.000171,0.000292,0.000464,0.000712,0.001081,0.001602,0.002011,0.001703,0.001162,0.000770,0.000507,0.000326,0.000198,0.000111,0.000102,0.000176,0.000278,0.000423,0.000631,0.000914,0.001124,0.000963,0.000669,0.000448,0.000297,0.000192,0.000119,0.000112
  giSopranoOoh36 ftgen 100+5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5_V2) , i(gkPS5)  ,1,1,1	,0.015493,0.023256,0.038946,0.080072,0.222961,0.077625,0.040215,0.026163,0.020537,0.024794,0.027925,0.009959,0.005586,0.003599,0.002262,0.001239,0.000511,0.000154,0.000227,0.000257,0.000200,0.000105,0.000183,0.000348,0.000602,0.000995,0.001621,0.002342,0.002063,0.001309,0.000802,0.000483,0.000275,0.000140,0.000124,0.000233,0.000396,0.000642,0.001014,0.001340,0.001090,0.000692,0.000426,0.000257,0.000148,0.000123,0.000130
  giSopranoOoh39 ftgen 100+6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6_V2) , i(gkPS6)  ,1,1,1	,0.019447,0.034315,0.073971,0.249826,0.097427,0.044636,0.027534,0.023553,0.038811,0.012411,0.006462,0.003791,0.002045,0.000853,0.000206,0.000273,0.000295,0.000187,0.000173,0.000381,0.000736,0.001334,0.002335,0.002747,0.001704,0.000952,0.000519,0.000258,0.000107,0.000208,0.000405,0.000725,0.001247,0.001582,0.001061,0.000602,0.000333,0.000173,0.000145,0.000152
  giSopranoOoh42 ftgen 100+7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7_V2) , i(gkPS7)  ,1,1,1	,0.025063,0.049337,0.163181,0.177222,0.054661,0.031107,0.032482,0.027778,0.008882,0.004771,0.002299,0.000744,0.000246,0.000371,0.000246,0.000109,0.000162,0.000428,0.000938,0.001893,0.003326,0.002439,0.001229,0.000596,0.000251,0.000103,0.000284,0.000607,0.001190,0.001900,0.001302,0.000662,0.000323,0.000141,0.000101,0.000172,0.000168
  giSopranoOoh45 ftgen 100+8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8_V2) , i(gkPS8)  ,1,1,1	,0.033454,0.091804,0.372905,0.084714,0.037879,0.044758,0.018864,0.007892,0.003513,0.001026,0.000308,0.000420,0.000196,0.000129,0.000187,0.000586,0.001429,0.003217,0.003417,0.001546,0.000653,0.000221,0.000103,0.000354,0.000853,0.001843,0.001938,0.000899,0.000386,0.000141,0.000147,0.000226,0.000135
  giSopranoOoh48 ftgen 100+9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9_V2) , i(gkPS9)  ,1,1,1	,0.046516,0.160169,0.155245,0.052329,0.049605,0.019920,0.007198,0.002478,0.000308,0.000509,0.000201,0.000135,0.000127,0.000370,0.001207,0.003248,0.004134,0.001606,0.000550,0.000125,0.000106,0.000468,0.001290,0.002692,0.001390,0.000516,0.000158,0.000174,0.000259,0.000118
  giSopranoOoh51 ftgen 100+10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10_V2), i(gkPS10) ,1,1,1	,0.068664,0.499897,0.089313,0.047133,0.024836,0.007586,0.001706,0.000547,0.000375,0.000132,0.000136,0.000347,0.001476,0.004681,0.003416,0.001040,0.000214,0.000172,0.000813,0.002504,0.002129,0.000667,0.000162,0.000186,0.000304,0.000115
  giSopranoOoh54 ftgen 100+11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11_V2), i(gkPS11) ,1,1,1	,0.098674,0.354398,0.062213,0.055545,0.009543,0.001487,0.000749,0.000134,0.000212,0.000123,0.000856,0.003788,0.004876,0.001194,0.000166,0.000569,0.002379,0.002608,0.000649,0.000109,0.000205,0.000338
  giSopranoOoh57 ftgen 100+12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12_V2), i(gkPS12) ,1,1,1	,0.183614,0.169417,0.089526,0.015785,0.002053,0.000839,0.000154,0.000122,0.000129,0.001172,0.006436,0.003091,0.000442,0.000113,0.000708,0.003688,0.001800,0.000283,0.000294,0.000271
  giSopranoOoh60 ftgen 100+13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13_V2), i(gkPS13) ,1,1,1	,0.320378,0.104663,0.039843,0.004956,0.001029,0.000257,0.000735,0.006501,0.003212,0.000252,0.000215,0.002579,0.002779,0.000315,0.000143,0.000522
  giSopranoOoh63 ftgen 100+14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14_V2), i(gkPS14) ,1,1,1	,1.000001,0.094284,0.015175,0.001094,0.000262,0.000162,0.002953,0.006834,0.000428,0.000345,0.005011,0.001335,0.000107,0.000114,0.000609
  giSopranoOoh66 ftgen 100+15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15_V2), i(gkPS15) ,1,1,1	,0.708750,0.111076,0.002977,0.000267,0.000246,0.007577,0.002388,0.000170,0.004759,0.001298,0.000408,0.000196
  giSopranoOoh69 ftgen 100+16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16_V2), i(gkPS16) ,1,1,1	,0.338803,0.031564,0.001678,0.000244,0.000258,0.012872,0.000885,0.001416,0.003598,0.000134,0.000588,0.000112
  giSopranoOoh72 ftgen 100+17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17_V2), i(gkPS17) ,1,1,1	,0.209313,0.009909,0.000515,0.000104,0.013000,0.000503,0.005157,0.000630,0.000287,0.000189
  giSopranoOoh75 ftgen 100+18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18_V2), i(gkPS18) ,1,1,1	,0.188584,0.002188,0.000154,0.005909,0.000855,0.010025,0.000214,0.001217
  giSopranoOoh78 ftgen 100+19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19_V2), i(gkPS19) ,1,1,1	,0.222149,0.000533,0.000493,0.004776,0.009517,0.000194,0.000393
  giSopranoOoh81 ftgen 100+20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20_V2), i(gkPS20) ,1,1,1	,0.063129,0.000488,0.025748,0.002834,0.000268,0.000223
  giSopranoOoh84 ftgen 100+21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21_V2), i(gkPS21) ,1,1,1	,0.019817,0.000207,0.001007,0.001261,0.000379
 elseif iVoice2==26 then
  giMixedAh24 ftgen 100+1,0,giTabLen,"padsynth",cpsmidinn(24), i(gkBW1_V2)  , i(gkPS1)  ,1,1,1	,0.000412,0.000370,0.000337,0.000371,0.000555,0.000859,0.001305,0.001896,0.002601,0.003585,0.004729,0.006226,0.008387,0.010759,0.015604,0.021153,0.036276,0.057553,0.053066,0.030189,0.020360,0.014722,0.011349,0.009414,0.008036,0.007520,0.007518,0.008204,0.010188,0.013445,0.021468,0.024378,0.017218,0.010300,0.007574,0.005320,0.004125,0.003105,0.002351,0.001777,0.001280,0.000908,0.000603,0.000362,0.000194,0.000113,0.000107,0.000165,0.000269,0.000410,0.000591,0.000829,0.001124,0.001497,0.001964,0.002540,0.003281,0.004214,0.005465,0.007172,0.009487,0.012221,0.012290,0.008928,0.005554,0.004575,0.006297,0.009642,0.012002,0.011210,0.008864,0.007021,0.005649,0.004715,0.004092,0.003711,0.003540,0.003269,0.002720,0.002116,0.001696,0.001392,0.001163,0.000978,0.000817,0.000679,0.000554,0.000445,0.000349,0.000267,0.000201,0.000148,0.000112
  giMixedAh27 ftgen 100+2,0,giTabLen,"padsynth",cpsmidinn(27), i(gkBW2_V2)  , i(gkPS2)  ,1,1,1	,0.000484,0.000423,0.000410,0.000587,0.001000,0.001640,0.002515,0.003647,0.005207,0.007188,0.010221,0.013861,0.021835,0.034169,0.065821,0.062536,0.031595,0.021762,0.014578,0.011706,0.009599,0.008934,0.009048,0.011008,0.014402,0.024811,0.028584,0.017346,0.010562,0.007037,0.005089,0.003642,0.002621,0.001845,0.001237,0.000781,0.000431,0.000198,0.000132,0.000128,0.000107,0.000154,0.000279,0.000469,0.000726,0.001077,0.001533,0.002136,0.002909,0.003944,0.005309,0.007297,0.010064,0.014010,0.014733,0.009883,0.005835,0.006234,0.010391,0.014244,0.013109,0.009848,0.007528,0.005944,0.004974,0.004420,0.004181,0.003659,0.002784,0.002107,0.001664,0.001346,0.001093,0.000881,0.000697,0.000538,0.000403,0.000292,0.000206,0.000145,0.000112
  giMixedAh30 ftgen 100+3,0,giTabLen,"padsynth",cpsmidinn(30), i(gkBW3_V2)  , i(gkPS3)  ,1,1,1	,0.000560,0.000482,0.000562,0.001054,0.001899,0.003144,0.004913,0.007274,0.010934,0.015824,0.026652,0.050310,0.084386,0.048694,0.027304,0.017198,0.013209,0.010896,0.010619,0.012323,0.016925,0.031534,0.030303,0.014903,0.009410,0.006192,0.004171,0.002825,0.001804,0.001089,0.000559,0.000223,0.000135,0.000159,0.000132,0.000111,0.000205,0.000408,0.000717,0.001165,0.001784,0.002644,0.003807,0.005452,0.007846,0.011507,0.016933,0.016329,0.008970,0.006585,0.011345,0.016921,0.014673,0.010437,0.007690,0.006096,0.005243,0.004888,0.003982,0.002810,0.002096,0.001620,0.001264,0.000975,0.000730,0.000526,0.000361,0.000238,0.000159,0.000123,0.000113,0.000108
  giMixedAh33 ftgen 100+4,0,giTabLen,"padsynth",cpsmidinn(33), i(gkBW4_V2)  , i(gkPS4)  ,1,1,1	,0.000645,0.000569,0.000955,0.001964,0.003652,0.006202,0.009824,0.015928,0.027700,0.054004,0.099838,0.045530,0.026122,0.017357,0.013212,0.012640,0.015734,0.025801,0.041244,0.020359,0.011360,0.006947,0.004321,0.002669,0.001503,0.000708,0.000231,0.000110,0.000186,0.000170,0.000130,0.000254,0.000564,0.001062,0.001820,0.002933,0.004538,0.006945,0.010838,0.017334,0.020883,0.011091,0.008199,0.016262,0.019876,0.013707,0.009453,0.007159,0.006126,0.005456,0.003786,0.002617,0.001920,0.001428,0.001039,0.000721,0.000469,0.000288,0.000180,0.000140,0.000132,0.000122,0.000102
  giMixedAh36 ftgen 100+5,0,giTabLen,"padsynth",cpsmidinn(36), i(gkBW5_V2)  , i(gkPS5)  ,1,1,1	,0.001076,0.000760,0.001152,0.002918,0.006013,0.010963,0.018910,0.033003,0.065564,0.123397,0.061570,0.034546,0.024544,0.022364,0.028096,0.049779,0.048235,0.023028,0.012783,0.007477,0.004231,0.002147,0.000887,0.000349,0.000355,0.000327,0.000195,0.000152,0.000288,0.000361,0.000371,0.000539,0.001217,0.002491,0.004498,0.007542,0.012318,0.020674,0.035880,0.035208,0.020677,0.019986,0.031450,0.029001,0.018014,0.012074,0.009087,0.007807,0.005927,0.003587,0.002503,0.001834,0.001291,0.000830,0.000470,0.000249,0.000194,0.000200,0.000178,0.000130
  giMixedAh39 ftgen 100+6,0,giTabLen,"padsynth",cpsmidinn(39), i(gkBW6_V2)  , i(gkPS6)  ,1,1,1	,0.001221,0.000884,0.002403,0.006103,0.012641,0.024258,0.049147,0.124843,0.094249,0.043351,0.028599,0.027085,0.040952,0.068353,0.030182,0.014975,0.007910,0.003883,0.001548,0.000473,0.000421,0.000370,0.000161,0.000304,0.000426,0.000443,0.000809,0.002086,0.004462,0.008387,0.015033,0.028032,0.047931,0.029239,0.022629,0.037393,0.031509,0.018127,0.012012,0.009537,0.007224,0.004034,0.002693,0.001836,0.001138,0.000598,0.000284,0.000232,0.000231,0.000177,0.000105
  giMixedAh42 ftgen 100+7,0,giTabLen,"padsynth",cpsmidinn(42), i(gkBW7_V2)  , i(gkPS7)  ,1,1,1	,0.001347,0.001378,0.005009,0.012714,0.027848,0.064949,0.174667,0.072154,0.037557,0.031873,0.051698,0.069662,0.025483,0.011788,0.005236,0.001791,0.000485,0.000510,0.000306,0.000357,0.000517,0.000580,0.001645,0.004407,0.009531,0.019083,0.040846,0.049561,0.026461,0.041849,0.036370,0.019264,0.012655,0.010146,0.005280,0.003211,0.002020,0.001088,0.000460,0.000274,0.000277,0.000199,0.000106,0.000102
  giMixedAh45 ftgen 100+8,0,giTabLen,"padsynth",cpsmidinn(45), i(gkBW8_V2)  , i(gkPS8)  ,1,1,1	,0.001435,0.002814,0.010404,0.027304,0.073592,0.204283,0.065680,0.038086,0.049867,0.090768,0.028199,0.011415,0.004006,0.000835,0.000609,0.000353,0.000145,0.000530,0.000623,0.001521,0.005124,0.012704,0.029322,0.067515,0.034280,0.047183,0.040088,0.019737,0.013502,0.007873,0.004048,0.002335,0.001073,0.000384,0.000337,0.000259,0.000126,0.000121,0.000110
  giMixedAh48 ftgen 100+9,0,giTabLen,"padsynth",cpsmidinn(48), i(gkBW9_V2)  , i(gkPS9)  ,1,1,1	,0.001665,0.005802,0.022639,0.067838,0.277959,0.082343,0.043643,0.072542,0.079439,0.023326,0.007411,0.001524,0.000914,0.000509,0.000186,0.000132,0.000538,0.002041,0.005636,0.014527,0.006699,0.012109,0.005270,0.003013,0.001652,0.000778,0.000392,0.000133
  giMixedAh51 ftgen 100+10,0,giTabLen,"padsynth",cpsmidinn(51), i(gkBW10_V2) , i(gkPS10) ,1,1,1	,0.001879,0.012367,0.050272,0.249889,0.104596,0.051557,0.135917,0.047385,0.012730,0.002203,0.001070,0.000444,0.000205,0.000486,0.002508,0.008455,0.012808,0.011617,0.007544,0.003612,0.001661,0.000745,0.000277
  giMixedAh54 ftgen 100+11,0,giTabLen,"padsynth",cpsmidinn(54), i(gkBW11_V2) , i(gkPS11) ,1,1,1	,0.002739,0.026042,0.133355,0.175744,0.061363,0.185512,0.036813,0.006813,0.001283,0.000619,0.000238,0.000104,0.001374,0.006525,0.018731,0.014280,0.007212,0.003761,0.001187,0.000430,0.000106
  giMixedAh57 ftgen 100+12,0,giTabLen,"padsynth",cpsmidinn(57), i(gkBW12_V2) , i(gkPS12) ,1,1,1	,0.005498,0.056620,0.471547,0.079386,0.210272,0.035484,0.003858,0.001328,0.000308,0.000117,0.001906,0.011522,0.011745,0.013323,0.004796,0.001380,0.000371,0.000133
  giMixedAh60 ftgen 100+13,0,giTabLen,"padsynth",cpsmidinn(60), i(gkBW13_V2) , i(gkPS13) ,1,1,1	,0.002967,0.046107,0.824869,0.198093,0.082301,0.006142,0.001955,0.000496,0.001429,0.017146,0.037895,0.004766,0.005960,0.003267,0.000407,0.000157,0.000155,0.000519
  giMixedAh63 ftgen 100+14,0,giTabLen,"padsynth",cpsmidinn(63), i(gkBW14_V2) , i(gkPS14) ,1,1,1	,0.002677,0.127443,0.233422,0.181784,0.009013,0.001717,0.000284,0.007015,0.064115,0.007331,0.007952,0.002405,0.000267,0.000125,0.000600
  giMixedAh66 ftgen 100+15,0,giTabLen,"padsynth",cpsmidinn(66), i(gkBW15_V2) , i(gkPS15) ,1,1,1	,0.010553,0.479368,0.511917,0.027219,0.002374,0.000432,0.019753,0.029194,0.005598,0.003593,0.000314,0.000115,0.000440,0.000188
  giMixedAh69 ftgen 100+16,0,giTabLen,"padsynth",cpsmidinn(69), i(gkBW16_V2) , i(gkPS16) ,1,1,1	,0.033509,0.499985,0.127000,0.004247,0.000403,0.034562,0.013610,0.013599,0.000498,0.000136,0.000625,0.000114
  giMixedAh72 ftgen 100+17,0,giTabLen,"padsynth",cpsmidinn(72), i(gkBW17_V2) , i(gkPS17) ,1,1,1	,0.097704,0.332922,0.011754,0.001452,0.002670,0.003963,0.017086,0.011243,0.000618,0.000448
  giMixedAh75 ftgen 100+18,0,giTabLen,"padsynth",cpsmidinn(75), i(gkBW18_V2) , i(gkPS18) ,1,1,1	,0.266284,0.282922,0.003635,0.000202,0.006066,0.036263,0.001979,0.003494
  giMixedAh78 ftgen 100+19,0,giTabLen,"padsynth",cpsmidinn(78), i(gkBW19_V2) , i(gkPS19) ,1,1,1	,0.976912,0.048417,0.000970,0.026534,0.032847,0.001372,0.000907
  giMixedAh81 ftgen 100+20,0,giTabLen,"padsynth",cpsmidinn(81), i(gkBW20_V2) , i(gkPS20) ,1,1,1	,1.000001,0.008470,0.005716,0.006895,0.001809,0.000528
  giMixedAh84 ftgen 100+21,0,giTabLen,"padsynth",cpsmidinn(84), i(gkBW21_V2) , i(gkPS21) ,1,1,1	,0.665845,0.002904,0.007927,0.022486,0.000897
 elseif iVoice2==27 then
  giMixedEh24 ftgen 100+1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1_V2) , i(gkPS1)  ,1,1,1	,0.002549,0.003134,0.003974,0.005478,0.007017,0.009323,0.012997,0.015800,0.025880,0.031561,0.069262,0.116966,0.096839,0.041388,0.030133,0.019258,0.014690,0.010922,0.008058,0.006191,0.004473,0.003237,0.002267,0.001451,0.000894,0.000442,0.000126,0.000210,0.000263,0.000265,0.000240,0.000174,0.000100,0.000185,0.000338,0.000545,0.000796,0.001110,0.001516,0.002015,0.002652,0.003519,0.004603,0.006308,0.008742,0.013114,0.019649,0.020048,0.013747,0.009105,0.006633,0.004842,0.003722,0.002793,0.002088,0.001484,0.000943,0.000453,0.000147,0.000600,0.001155,0.001779,0.002508,0.003367,0.004414,0.005764,0.007472,0.010017,0.013566,0.019406,0.025684,0.025076,0.018739,0.013927,0.011049,0.009282,0.008375,0.008024,0.008229,0.009065,0.010646,0.013251,0.016228,0.016401,0.013297,0.010080,0.008006,0.006682,0.006049,0.005955,0.006476,0.007437,0.007523,0.006180,0.004613,0.003551,0.002779,0.002235
  giMixedEh27 ftgen 100+2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2_V2) , i(gkPS2)  ,1,1,1	,0.003129,0.004092,0.005657,0.007860,0.010921,0.016087,0.021139,0.035868,0.062023,0.136227,0.109956,0.040456,0.031049,0.018374,0.013762,0.009515,0.006960,0.004597,0.003159,0.001921,0.001079,0.000444,0.000177,0.000312,0.000316,0.000280,0.000177,0.000171,0.000376,0.000664,0.001031,0.001514,0.002167,0.002999,0.004195,0.005777,0.008581,0.012777,0.021830,0.024145,0.015340,0.009845,0.006641,0.004815,0.003434,0.002428,0.001585,0.000853,0.000201,0.000618,0.001398,0.002299,0.003391,0.004727,0.006500,0.008859,0.012573,0.018214,0.027784,0.031145,0.022997,0.016195,0.012414,0.010478,0.009647,0.009763,0.010916,0.013349,0.017534,0.020106,0.016727,0.012049,0.009207,0.007617,0.007098,0.007517,0.008848,0.008867,0.006730,0.004810,0.003566,0.002737,0.002122,0.001644,0.001252,0.000929,0.000662,0.000447,0.000285,0.000180,0.000139,0.000140,0.000147,0.000144,0.000130,0.000107
  giMixedEh30 ftgen 100+3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3_V2) , i(gkPS3)  ,1,1,1	,0.003867,0.005384,0.008278,0.011948,0.018781,0.027378,0.043927,0.124923,0.154756,0.052079,0.035175,0.020879,0.013635,0.009198,0.005837,0.003709,0.002010,0.000982,0.000220,0.000161,0.000370,0.000376,0.000299,0.000147,0.000155,0.000424,0.000832,0.001379,0.002152,0.003202,0.004758,0.006982,0.011177,0.019325,0.029701,0.020304,0.011682,0.007361,0.005041,0.003356,0.002114,0.001056,0.000187,0.001017,0.002186,0.003609,0.005412,0.007905,0.011471,0.017562,0.028740,0.037414,0.026954,0.018054,0.013544,0.011691,0.011440,0.012869,0.016457,0.022485,0.022347,0.015528,0.011112,0.008894,0.008412,0.009625,0.010828,0.008346,0.005596,0.003939,0.002900,0.002141,0.001562,0.001098,0.000729,0.000449,0.000257,0.000169,0.000165,0.000175,0.000167,0.000140,0.000106
  giMixedEh33 ftgen 100+4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4_V2) , i(gkPS4)  ,1,1,1	,0.004867,0.007460,0.011945,0.019946,0.031209,0.054453,0.186212,0.117747,0.049349,0.025385,0.015675,0.009940,0.005668,0.003035,0.001342,0.000247,0.000261,0.000440,0.000408,0.000208,0.000179,0.000569,0.001196,0.002093,0.003439,0.005483,0.008701,0.015148,0.030996,0.029556,0.014724,0.008576,0.005437,0.003329,0.001707,0.000348,0.001213,0.002897,0.005055,0.008006,0.012446,0.020472,0.036633,0.042329,0.025547,0.017331,0.014092,0.013706,0.016241,0.022858,0.028248,0.019753,0.013157,0.010345,0.010349,0.012777,0.010845,0.006746,0.004465,0.003112,0.002165,0.001447,0.000902,0.000506,0.000263,0.000193,0.000207,0.000202,0.000165,0.000114
  giMixedEh36 ftgen 100+5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5_V2) , i(gkPS5)  ,1,1,1	,0.008898,0.014845,0.025531,0.044722,0.088437,0.209987,0.109632,0.053027,0.029768,0.016881,0.008983,0.004150,0.001395,0.000463,0.000755,0.000691,0.000400,0.000255,0.000745,0.001668,0.003236,0.005773,0.010198,0.020143,0.039588,0.019923,0.010157,0.005810,0.003302,0.001689,0.000582,0.000359,0.001415,0.002957,0.005341,0.009195,0.016165,0.031454,0.042867,0.022527,0.012419,0.007380,0.004874,0.005036,0.007696,0.012757,0.022519,0.032658,0.021211,0.013339,0.010317,0.010331,0.013816,0.015314,0.008765,0.005134,0.003184,0.001938,0.001090,0.000535,0.000250,0.000207,0.000210,0.000173,0.000113
  giMixedEh39 ftgen 100+6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6_V2) , i(gkPS6)  ,1,1,1	,0.011502,0.021549,0.042263,0.090322,0.245564,0.114253,0.051172,0.026245,0.012912,0.005428,0.001469,0.000641,0.000901,0.000604,0.000162,0.000315,0.001073,0.002614,0.005421,0.010640,0.023418,0.045836,0.018645,0.008963,0.004582,0.002130,0.000572,0.000762,0.002491,0.005301,0.010156,0.019894,0.044518,0.039884,0.018319,0.009661,0.005793,0.006382,0.011028,0.020816,0.038283,0.025968,0.015109,0.011870,0.013774,0.019307,0.011088,0.005870,0.003324,0.001790,0.000830,0.000329,0.000246,0.000244,0.000178
  giMixedEh42 ftgen 100+7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7_V2) , i(gkPS7)  ,1,1,1	,0.015233,0.032741,0.074724,0.243797,0.144246,0.056112,0.025240,0.010252,0.002839,0.000700,0.001067,0.000580,0.000104,0.000883,0.002741,0.006585,0.014845,0.043733,0.031620,0.012214,0.005557,0.002198,0.000195,0.001893,0.005217,0.011479,0.025712,0.062141,0.031662,0.014093,0.007252,0.007795,0.015192,0.033589,0.039695,0.019565,0.014153,0.017708,0.020404,0.009087,0.004554,0.002215,0.000878,0.000317,0.000301,0.000241,0.000125
  giMixedEh45 ftgen 100+8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8_V2) , i(gkPS8)  ,1,1,1	,0.020852,0.053258,0.153984,0.250056,0.069342,0.026968,0.008516,0.001168,0.001282,0.000765,0.000162,0.001475,0.005006,0.013261,0.041892,0.036286,0.012356,0.004686,0.001052,0.001663,0.006070,0.015487,0.041856,0.059403,0.020427,0.008986,0.009865,0.022609,0.054432,0.028468,0.017103,0.021683,0.020009,0.007941,0.003514,0.001272,0.000379,0.000357,0.000233,0.000104,0.000116
  giMixedEh48 ftgen 100+9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9_V2) , i(gkPS9)  ,1,1,1	,0.014412,0.045494,0.181791,0.112588,0.033171,0.009544,0.001064,0.001135,0.000329,0.000220,0.001449,0.006000,0.019846,0.045292,0.010951,0.003439,0.000417,0.001563,0.004898,0.014483,0.022627,0.012262,0.019775,0.010955,0.019872,0.010229,0.003771,0.001279,0.000296,0.000245,0.000142
  giMixedEh51 ftgen 100+10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10_V2), i(gkPS10) ,1,1,1	,0.021582,0.082278,0.299289,0.052488,0.012284,0.000944,0.001172,0.000108,0.000906,0.006303,0.026106,0.032757,0.007753,0.001434,0.001444,0.005988,0.023064,0.017739,0.020167,0.013678,0.023142,0.010173,0.003168,0.000704,0.000290,0.000184
  giMixedEh54 ftgen 100+11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11_V2), i(gkPS11) ,1,1,1	,0.033385,0.181253,0.115431,0.021468,0.001260,0.001196,0.000294,0.003460,0.019374,0.049307,0.008286,0.000663,0.003599,0.016148,0.024802,0.024651,0.015477,0.027005,0.006039,0.001230,0.000344,0.000180,0.000106
  giMixedEh57 ftgen 100+12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12_V2), i(gkPS12) ,1,1,1	,0.053000,0.500048,0.052999,0.003969,0.001543,0.000360,0.007742,0.067956,0.015859,0.001332,0.004887,0.030983,0.020466,0.021939,0.036267,0.006921,0.000920,0.000388,0.000110
  giMixedEh60 ftgen 100+13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13_V2), i(gkPS13) ,1,1,1	,0.165294,0.197124,0.015337,0.003004,0.003167,0.040484,0.005206,0.000220,0.001029,0.011247,0.005236,0.003975,0.005800,0.000693,0.000124,0.000151,0.000577,0.000103
  giMixedEh63 ftgen 100+14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14_V2), i(gkPS14) ,1,1,1	,0.343032,0.097209,0.002364,0.001736,0.039793,0.004573,0.000222,0.004544,0.011682,0.003924,0.005813,0.000396,0.000102,0.000125,0.000672
  giMixedEh66 ftgen 100+15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15_V2), i(gkPS15) ,1,1,1	,0.999678,0.038087,0.002755,0.020021,0.006295,0.000187,0.012594,0.004197,0.013896,0.000677,0.000104,0.000433,0.000213
  giMixedEh69 ftgen 100+16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16_V2), i(gkPS16) ,1,1,1	,1.000001,0.003910,0.006008,0.016207,0.000265,0.023574,0.004637,0.003870,0.000201,0.000631,0.000123
  giMixedEh72 ftgen 100+17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17_V2), i(gkPS17) ,1,1,1	,0.223136,0.003631,0.001641,0.053621,0.043595,0.010450,0.007588,0.000208,0.000421,0.000286
  giMixedEh75 ftgen 100+18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18_V2), i(gkPS18) ,1,1,1	,0.109531,0.000806,0.042151,0.016149,0.016640,0.005110,0.000133,0.001866
  giMixedEh78 ftgen 100+19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19_V2), i(gkPS19) ,1,1,1	,0.034598,0.000509,0.025064,0.074296,0.007935,0.000130,0.000593
  giMixedEh81 ftgen 100+20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20_V2), i(gkPS20) ,1,1,1	,0.005801,0.023872,0.089183,0.013066,0.000176,0.000337
  giMixedEh84 ftgen 100+21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21_V2), i(gkPS21) ,1,1,1	,0.007260,0.107242,0.020899,0.000417,0.000572
 elseif iVoice2==28 then
  giMixedEee24 ftgen 100+1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1_V2) , i(gkPS1)  ,1,1,1	,0.010612,0.014495,0.019809,0.028477,0.041398,0.063942,0.114518,0.124942,0.078855,0.046228,0.033959,0.023394,0.018143,0.013375,0.010099,0.007577,0.005431,0.003901,0.002611,0.001632,0.000932,0.000386,0.000171,0.000289,0.000422,0.000452,0.000449,0.000398,0.000315,0.000237,0.000144,0.000104,0.000105,0.000153,0.000215,0.000290,0.000380,0.000487,0.000633,0.000816,0.001099,0.001507,0.002203,0.003126,0.003165,0.002277,0.001567,0.001153,0.000855,0.000658,0.000500,0.000378,0.000277,0.000186,0.000102,0.000154,0.000300,0.000490,0.000733,0.001033,0.001413,0.001885,0.002475,0.003256,0.004250,0.005714,0.007781,0.011083,0.015021,0.015148,0.011378,0.008165,0.006212,0.004895,0.004095,0.003568,0.003306,0.003268,0.003450,0.003938,0.004750,0.006020,0.007017,0.006500,0.005013,0.003837,0.003082,0.002641,0.002479,0.002562
  giMixedEee27 ftgen 100+2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2_V2) , i(gkPS2)  ,1,1,1	,0.013361,0.019632,0.028170,0.046001,0.073446,0.142620,0.135320,0.067419,0.045253,0.028671,0.021074,0.014727,0.010611,0.007252,0.004920,0.003071,0.001747,0.000807,0.000249,0.000303,0.000500,0.000540,0.000520,0.000422,0.000309,0.000180,0.000119,0.000127,0.000103,0.000168,0.000256,0.000366,0.000497,0.000673,0.000915,0.001288,0.001877,0.003013,0.003942,0.003063,0.001933,0.001339,0.000949,0.000692,0.000498,0.000349,0.000219,0.000102,0.000105,0.000283,0.000531,0.000867,0.001300,0.001875,0.002609,0.003613,0.004968,0.007064,0.010239,0.015759,0.018744,0.014260,0.009604,0.006959,0.005391,0.004464,0.003989,0.003908,0.004207,0.005028,0.006490,0.008241,0.007854,0.005766,0.004257,0.003368,0.002997,0.003039,0.003534,0.003719,0.002952,0.002107,0.001565,0.001195,0.000929,0.000719,0.000551,0.000410,0.000295,0.000202,0.000133
  giMixedEee30 ftgen 100+3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3_V2) , i(gkPS3)  ,1,1,1	,0.016942,0.026728,0.044993,0.073582,0.166083,0.150187,0.067471,0.042023,0.027730,0.018157,0.012270,0.007756,0.004771,0.002544,0.001124,0.000288,0.000418,0.000628,0.000639,0.000532,0.000370,0.000189,0.000133,0.000151,0.000118,0.000167,0.000288,0.000442,0.000634,0.000915,0.001325,0.002073,0.003575,0.004636,0.003020,0.001869,0.001215,0.000836,0.000565,0.000361,0.000186,0.000308,0.000658,0.001154,0.001829,0.002760,0.004060,0.005937,0.009069,0.014428,0.021876,0.018429,0.011479,0.007850,0.005939,0.004916,0.004612,0.004928,0.006092,0.008369,0.009952,0.007626,0.005224,0.003945,0.003510,0.003799,0.004447,0.003710,0.002491,0.001752,0.001285,0.000950,0.000696,0.000493,0.000332,0.000209,0.000125
  giMixedEee33 ftgen 100+4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4_V2) , i(gkPS4)  ,1,1,1	,0.021903,0.037076,0.070524,0.170727,0.184856,0.075853,0.042006,0.026533,0.016384,0.009694,0.005423,0.002512,0.000745,0.000367,0.000734,0.000760,0.000589,0.000358,0.000113,0.000157,0.000177,0.000123,0.000164,0.000331,0.000549,0.000839,0.001298,0.002144,0.003934,0.005481,0.003133,0.001834,0.001150,0.000725,0.000430,0.000185,0.000178,0.000585,0.001216,0.002131,0.003468,0.005492,0.008727,0.014780,0.025548,0.021159,0.012320,0.008120,0.006189,0.005514,0.005907,0.007722,0.011241,0.010580,0.006710,0.004738,0.004184,0.004875,0.005074,0.003298,0.002150,0.001485,0.001035,0.000705,0.000453,0.000265,0.000143
  giMixedEee36 ftgen 100+5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5_V2) , i(gkPS5)  ,1,1,1	,0.018039,0.029693,0.059894,0.185737,0.154314,0.055778,0.027787,0.014854,0.007935,0.003897,0.001432,0.000187,0.000561,0.000590,0.000401,0.000185,0.000117,0.000134,0.000109,0.000405,0.000942,0.001848,0.003332,0.005831,0.010609,0.022023,0.025121,0.011959,0.006463,0.003691,0.002042,0.001000,0.000346,0.000540,0.001193,0.002221,0.003859,0.006735,0.012934,0.018831,0.010505,0.006536,0.005174,0.005305,0.007021,0.011338,0.013114,0.007641,0.004738,0.003619,0.003554,0.002391,0.001498,0.001024,0.000703,0.000458,0.000268,0.000136
  giMixedEee39 ftgen 100+6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6_V2) , i(gkPS6)  ,1,1,1	,0.023171,0.040165,0.103046,0.249899,0.069009,0.030296,0.014964,0.006837,0.002317,0.000262,0.000693,0.000670,0.000375,0.000134,0.000157,0.000234,0.000809,0.001919,0.003902,0.007563,0.015739,0.033909,0.016874,0.008020,0.004127,0.001993,0.000762,0.000560,0.001472,0.003025,0.005784,0.011760,0.022871,0.012484,0.007312,0.006012,0.007155,0.011847,0.015854,0.008455,0.005033,0.004257,0.003348,0.001866,0.001182,0.000751,0.000433,0.000208
  giMixedEee42 ftgen 100+7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7_V2) , i(gkPS7)  ,1,1,1	,0.030585,0.075466,0.326397,0.089842,0.037631,0.016293,0.006004,0.001189,0.000623,0.000819,0.000421,0.000187,0.000122,0.000220,0.000997,0.002690,0.006079,0.013783,0.037543,0.020537,0.008608,0.003873,0.001483,0.000243,0.000604,0.001913,0.004382,0.009617,0.024507,0.016361,0.008552,0.007239,0.010299,0.019396,0.011363,0.006002,0.005105,0.003117,0.001699,0.001004,0.000533,0.000219,0.000103,0.000108
  giMixedEee45 ftgen 100+8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8_V2) , i(gkPS8)  ,1,1,1	,0.042426,0.110844,0.240398,0.052093,0.020251,0.006042,0.000491,0.000993,0.000619,0.000230,0.000590,0.002336,0.006356,0.016818,0.048133,0.016906,0.006376,0.002233,0.000321,0.000910,0.003109,0.007901,0.022561,0.020975,0.009763,0.009076,0.016934,0.017670,0.007601,0.006066,0.003146,0.001615,0.000823,0.000318,0.000124,0.000127
  giMixedEee48 ftgen 100+9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9_V2) , i(gkPS9)  ,1,1,1	,0.067500,0.499957,0.084236,0.026845,0.006246,0.000524,0.001260,0.000307,0.000263,0.000154,0.000423,0.001657,0.005126,0.020030,0.007311,0.002320,0.000560,0.000313,0.001681,0.005251,0.018793,0.008143,0.003428,0.003199,0.002838,0.002897,0.002582,0.000962,0.000359
  giMixedEee51 ftgen 100+10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10_V2), i(gkPS10) ,1,1,1	,0.114392,0.346891,0.051686,0.011497,0.000495,0.001393,0.000319,0.000278,0.001711,0.006671,0.024100,0.005070,0.001207,0.000395,0.002611,0.010148,0.016063,0.004678,0.003757,0.002818,0.004738,0.001749,0.000577,0.000121
  giMixedEee54 ftgen 100+11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11_V2), i(gkPS11) ,1,1,1	,0.184699,0.170704,0.027773,0.001277,0.001722,0.000135,0.000260,0.000954,0.005364,0.030213,0.005416,0.000846,0.000161,0.001816,0.009486,0.018223,0.004741,0.005826,0.003571,0.002699,0.000709,0.000111
  giMixedEee57 ftgen 100+12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12_V2), i(gkPS12) ,1,1,1	,0.375525,0.096426,0.009561,0.002227,0.000108,0.000215,0.002089,0.015287,0.010294,0.001315,0.000212,0.003544,0.026847,0.007999,0.006168,0.004412,0.002362,0.000444,0.000109
  giMixedEee60 ftgen 100+13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13_V2), i(gkPS13) ,1,1,1	,0.227192,0.099004,0.005244,0.001344,0.001073,0.017641,0.017350,0.001409,0.000721,0.009172,0.004060,0.000250,0.000806,0.006918,0.001617,0.000117,0.000126,0.000462
  giMixedEee63 ftgen 100+14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14_V2), i(gkPS14) ,1,1,1	,0.603091,0.048190,0.002514,0.000479,0.018496,0.015302,0.000391,0.003639,0.009291,0.000469,0.001181,0.008347,0.000679,0.000111,0.000537
  giMixedEee66 ftgen 100+15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15_V2), i(gkPS15) ,1,1,1	,1.000000,0.014894,0.000748,0.011456,0.020880,0.000335,0.010283,0.002934,0.000513,0.010980,0.000625,0.000358,0.000173
  giMixedEee69 ftgen 100+16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16_V2), i(gkPS16) ,1,1,1	,0.383427,0.002256,0.002169,0.058726,0.000416,0.019191,0.001023,0.003871,0.002038,0.000111,0.000515,0.000103
  giMixedEee72 ftgen 100+17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17_V2), i(gkPS17) ,1,1,1	,0.143330,0.001607,0.002011,0.288307,0.002276,0.014994,0.010998,0.007299,0.001333,0.000996
  giMixedEee75 ftgen 100+18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18_V2), i(gkPS18) ,1,1,1	,0.061863,0.001803,0.041574,0.018718,0.022519,0.023699,0.001207,0.009907,0.000135
  giMixedEee78 ftgen 100+19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19_V2), i(gkPS19) ,1,1,1	,0.008237,0.002981,0.275939,0.109772,0.021334,0.000832,0.002147
  giMixedEee81 ftgen 100+20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20_V2), i(gkPS20) ,1,1,1	,0.012164,0.019280,0.007395,0.003926,0.001069,0.001101
  giMixedEee84 ftgen 100+21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21_V2), i(gkPS21) ,1,1,1	,0.003212,0.576616,0.029989,0.014597,0.001991
 elseif iVoice2==29 then
  giMixedOh24 ftgen 100+1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1_V2) , i(gkPS1)  ,1,1,1	,0.002656,0.003252,0.004105,0.005622,0.007160,0.009459,0.013108,0.015856,0.025894,0.031448,0.069195,0.117293,0.097983,0.042979,0.032065,0.021929,0.018078,0.015475,0.014066,0.014550,0.016289,0.021526,0.023582,0.017583,0.010850,0.007974,0.005821,0.004584,0.003615,0.002841,0.002234,0.001707,0.001268,0.000905,0.000600,0.000361,0.000186,0.000124,0.000163,0.000187,0.000186,0.000166,0.000139,0.000101,0.000100,0.000137,0.000189,0.000263,0.000361,0.000489,0.000654,0.000858,0.001117,0.001451,0.001869,0.002471,0.003247,0.004440,0.005393,0.004629,0.002917,0.002066,0.002532,0.003852,0.005391,0.005792,0.004814,0.003675,0.002842,0.002214,0.001763,0.001401,0.001091,0.000746,0.000345,0.000127,0.000165,0.000194,0.000194,0.000185,0.000171,0.000154,0.000137,0.000119,0.000101
  giMixedOh27 ftgen 100+2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2_V2) , i(gkPS2)  ,1,1,1	,0.003258,0.004239,0.005824,0.008031,0.011084,0.016213,0.021193,0.035813,0.061897,0.136532,0.111390,0.042393,0.033786,0.022028,0.018961,0.016732,0.017591,0.021496,0.028305,0.022987,0.013061,0.009039,0.006327,0.004802,0.003617,0.002714,0.001972,0.001369,0.000897,0.000513,0.000245,0.000108,0.000159,0.000210,0.000226,0.000203,0.000166,0.000112,0.000138,0.000201,0.000297,0.000435,0.000622,0.000874,0.001199,0.001639,0.002216,0.003089,0.004305,0.006101,0.005978,0.003630,0.002459,0.003410,0.005563,0.006988,0.005953,0.004329,0.003190,0.002395,0.001829,0.001373,0.000891,0.000334,0.000160,0.000222,0.000234,0.000222,0.000202,0.000178,0.000153,0.000127,0.000102
  giMixedOh30 ftgen 100+3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3_V2) , i(gkPS3)  ,1,1,1	,0.004023,0.005567,0.008482,0.012147,0.018935,0.027436,0.043784,0.124923,0.156060,0.054359,0.038530,0.025628,0.020731,0.020302,0.024164,0.033681,0.024398,0.013158,0.008555,0.006066,0.004329,0.003073,0.002076,0.001307,0.000716,0.000311,0.000128,0.000209,0.000264,0.000252,0.000205,0.000130,0.000103,0.000161,0.000252,0.000400,0.000621,0.000939,0.001374,0.001992,0.002862,0.004244,0.006522,0.007371,0.004231,0.002979,0.004965,0.007920,0.007484,0.005169,0.003596,0.002580,0.001862,0.001227,0.000441,0.000198,0.000273,0.000271,0.000248,0.000214,0.000179,0.000142,0.000109
  giMixedOh33 ftgen 100+4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4_V2) , i(gkPS4)  ,1,1,1	,0.005059,0.007690,0.012187,0.020150,0.031282,0.054249,0.186526,0.120147,0.052781,0.030786,0.024379,0.024804,0.034918,0.035401,0.016807,0.010063,0.006707,0.004475,0.002912,0.001727,0.000868,0.000313,0.000184,0.000294,0.000312,0.000251,0.000145,0.000162,0.000275,0.000476,0.000802,0.001297,0.002024,0.003113,0.004960,0.008196,0.007816,0.003687,0.004946,0.009187,0.008701,0.005588,0.003662,0.002498,0.001599,0.000503,0.000264,0.000332,0.000310,0.000265,0.000215,0.000163,0.000117
  giMixedOh36 ftgen 100+5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5_V2) , i(gkPS5)  ,1,1,1	,0.006425,0.011190,0.018900,0.031763,0.063063,0.234533,0.085077,0.042498,0.028723,0.024364,0.029248,0.052657,0.032828,0.016019,0.009256,0.005473,0.003020,0.001411,0.000472,0.000289,0.000385,0.000324,0.000169,0.000209,0.000292,0.000313,0.000363,0.000715,0.001488,0.002773,0.004783,0.007968,0.013450,0.024276,0.028174,0.012256,0.017548,0.027382,0.016871,0.007639,0.001429,0.003903,0.002935,0.001946,0.001251,0.000808,0.000539,0.000371,0.000260,0.000189,0.000148,0.000125,0.000105
  giMixedOh39 ftgen 100+6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6_V2) , i(gkPS6)  ,1,1,1	,0.008376,0.015990,0.032397,0.071647,0.272662,0.083705,0.042399,0.029965,0.031725,0.060042,0.036024,0.015995,0.008610,0.004457,0.001931,0.000539,0.000377,0.000438,0.000278,0.000188,0.000329,0.000372,0.000455,0.001070,0.002432,0.004805,0.008844,0.016499,0.033376,0.023715,0.015683,0.032489,0.020044,0.007073,0.004006,0.004073,0.002568,0.001523,0.000908,0.000566,0.000367,0.000246,0.000180,0.000147,0.000118
  giMixedOh42 ftgen 100+7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7_V2) , i(gkPS7)  ,1,1,1	,0.011034,0.024255,0.054958,0.249960,0.107468,0.049168,0.034461,0.048258,0.060049,0.020609,0.009752,0.004351,0.001387,0.000382,0.000531,0.000321,0.000134,0.000183,0.000390,0.000442,0.000696,0.002019,0.004800,0.010033,0.021149,0.044106,0.017250,0.033814,0.026431,0.007582,0.005537,0.004027,0.002216,0.001191,0.000676,0.000405,0.000256,0.000192,0.000151,0.000111
  giMixedOh45 ftgen 100+8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8_V2) , i(gkPS8)  ,1,1,1	,0.015273,0.040290,0.108755,0.238831,0.059213,0.041067,0.079700,0.037954,0.014459,0.005681,0.001470,0.000525,0.000572,0.000143,0.000149,0.000276,0.000507,0.000599,0.001942,0.005592,0.013421,0.033213,0.035928,0.030674,0.033762,0.006591,0.006489,0.003618,0.001724,0.000862,0.000468,0.000280,0.000206,0.000147,0.000101
  giMixedOh48 ftgen 100+9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9_V2) , i(gkPS9)  ,1,1,1	,0.010601,0.034815,0.190470,0.080405,0.033305,0.058053,0.024910,0.008255,0.002415,0.000380,0.000499,0.000157,0.000134,0.000544,0.001534,0.004269,0.007067,0.006352,0.013410,0.005008,0.002977,0.001313,0.000644,0.000282
  giMixedOh51 ftgen 100+10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10_V2), i(gkPS10) ,1,1,1	,0.016431,0.063467,0.235366,0.043971,0.063965,0.024873,0.006978,0.001106,0.000633,0.000237,0.000165,0.000526,0.001871,0.006744,0.006491,0.013161,0.007320,0.003558,0.001368,0.000593,0.000178
  giMixedOh54 ftgen 100+11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11_V2), i(gkPS11) ,1,1,1	,0.024710,0.140863,0.075949,0.054103,0.032225,0.006828,0.000565,0.000591,0.000130,0.000122,0.000130,0.001184,0.004810,0.008308,0.016195,0.006829,0.003189,0.000995,0.000290
  giMixedOh57 ftgen 100+12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12_V2), i(gkPS12) ,1,1,1	,0.039150,0.500037,0.055380,0.060924,0.008930,0.000650,0.000410,0.000244,0.001590,0.009065,0.009812,0.013291,0.004577,0.001153,0.000235,0.000102
  giMixedOh60 ftgen 100+13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13_V2), i(gkPS13) ,1,1,1	,0.086407,0.267040,0.196788,0.021563,0.001095,0.000450,0.000254,0.000578,0.012590,0.058595,0.005142,0.009927,0.005483,0.000502,0.000175,0.000149,0.000775
  giMixedOh63 ftgen 100+14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14_V2), i(gkPS14) ,1,1,1	,0.153433,0.155941,0.058873,0.002749,0.000677,0.000168,0.000395,0.004570,0.084026,0.008181,0.014008,0.003788,0.000261,0.000109,0.000887
  giMixedOh66 ftgen 100+15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15_V2), i(gkPS15) ,1,1,1	,0.332841,0.193621,0.018082,0.001777,0.000274,0.000623,0.014262,0.036353,0.007910,0.005829,0.000322,0.000104,0.000472,0.000204
  giMixedOh69 ftgen 100+16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16_V2), i(gkPS16) ,1,1,1	,1.000000,0.136629,0.001978,0.000708,0.000666,0.025888,0.015536,0.029450,0.000535,0.000119,0.000710,0.000111
  giMixedOh72 ftgen 100+17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17_V2), i(gkPS17) ,1,1,1	,0.528638,0.035156,0.000814,0.000113,0.012612,0.005146,0.027163,0.002875,0.000576,0.000345
  giMixedOh75 ftgen 100+18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18_V2), i(gkPS18) ,1,1,1	,0.295700,0.004617,0.000416,0.004518,0.008174,0.059391,0.000819,0.003130
  giMixedOh78 ftgen 100+19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19_V2), i(gkPS19) ,1,1,1	,0.324009,0.003159,0.000539,0.036354,0.052795,0.000895,0.000729
  giMixedOh81 ftgen 100+20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20_V2), i(gkPS20) ,1,1,1	,0.212624,0.001375,0.025936,0.013708,0.001164,0.000397
  giMixedOh84 ftgen 100+21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21_V2), i(gkPS21) ,1,1,1	,0.070310,0.000226,0.010293,0.005749,0.000690
 elseif iVoice2==30 then
  giMixedOoh24 ftgen 100+1,0,giTabLen,"padsynth",cpsmidinn(24),i(gkBW1_V2) , i(gkPS1)  ,1,1,1	,0.004170,0.004767,0.005809,0.007125,0.009423,0.012338,0.016616,0.025281,0.036773,0.084223,0.097509,0.055644,0.026776,0.021850,0.013883,0.011537,0.008646,0.005282,0.002155,0.001654,0.001414,0.001239,0.001040,0.000878,0.000785,0.000712,0.000629,0.000575,0.000483,0.000406,0.000327,0.000237,0.000173,0.000104,0.000121,0.000160,0.000207,0.000263,0.000334,0.000421,0.000551,0.000726,0.001018,0.001329,0.001313,0.001049,0.000891,0.000885,0.000983,0.001199,0.001540,0.001977,0.002121,0.001784,0.001340,0.001034,0.000826,0.000705,0.000652,0.000680,0.000715,0.000646,0.000503,0.000390,0.000309,0.000249,0.000204,0.000167,0.000137,0.000111
  giMixedOoh27 ftgen 100+2,0,giTabLen,"padsynth",cpsmidinn(27),i(gkBW2_V2) , i(gkPS2)  ,1,1,1	,0.005030,0.006191,0.007651,0.010372,0.014571,0.021434,0.030781,0.071907,0.119545,0.072776,0.031574,0.022556,0.015399,0.011394,0.007041,0.002518,0.001911,0.001634,0.001295,0.001096,0.000937,0.000834,0.000721,0.000630,0.000508,0.000397,0.000272,0.000181,0.000107,0.000153,0.000213,0.000285,0.000379,0.000500,0.000688,0.000967,0.001445,0.001618,0.001277,0.001057,0.001077,0.001285,0.001687,0.002301,0.002526,0.001994,0.001425,0.001068,0.000863,0.000780,0.000826,0.000841,0.000676,0.000495,0.000375,0.000290,0.000229,0.000180,0.000141,0.000108
  giMixedOoh30 ftgen 100+3,0,giTabLen,"padsynth",cpsmidinn(30),i(gkBW3_V2) , i(gkPS3)  ,1,1,1	,0.006083,0.008003,0.010711,0.016374,0.024519,0.037449,0.112833,0.124998,0.041417,0.028771,0.018019,0.012343,0.005402,0.002386,0.001972,0.001531,0.001231,0.001066,0.000905,0.000784,0.000607,0.000449,0.000285,0.000153,0.000101,0.000109,0.000153,0.000230,0.000327,0.000460,0.000642,0.000947,0.001505,0.001937,0.001502,0.001242,0.001345,0.001774,0.002567,0.002998,0.002232,0.001518,0.001113,0.000935,0.000970,0.000984,0.000727,0.000511,0.000372,0.000279,0.000210,0.000157,0.000113
  giMixedOoh33 ftgen 100+4,0,giTabLen,"padsynth",cpsmidinn(33),i(gkBW4_V2) , i(gkPS4)  ,1,1,1	,0.007502,0.010380,0.016096,0.024230,0.043922,0.147876,0.113247,0.043397,0.022792,0.015355,0.005760,0.002715,0.002152,0.001629,0.001298,0.001071,0.000882,0.000647,0.000405,0.000215,0.000125,0.000127,0.000114,0.000198,0.000315,0.000473,0.000703,0.001106,0.001912,0.002216,0.001551,0.001530,0.002044,0.003150,0.003426,0.002208,0.001462,0.001135,0.001161,0.001127,0.000745,0.000502,0.000355,0.000253,0.000178,0.000120
  giMixedOoh36 ftgen 100+5,0,giTabLen,"padsynth",cpsmidinn(36),i(gkBW5_V2) , i(gkPS5)  ,1,1,1	,0.009514,0.014225,0.024646,0.050523,0.168409,0.111356,0.043820,0.023460,0.012509,0.004160,0.002642,0.001689,0.001315,0.001065,0.000757,0.000443,0.000192,0.000123,0.000137,0.000101,0.000120,0.000148,0.000186,0.000291,0.000545,0.001008,0.001755,0.002924,0.004809,0.008185,0.013559,0.007678,0.008486,0.018454,0.017597,0.010496,0.006842,0.005140,0.004787,0.005732,0.004640,0.002578,0.001610,0.001047,0.000655,0.000372,0.000189,0.000109,0.000102
  giMixedOoh39 ftgen 100+6,0,giTabLen,"padsynth",cpsmidinn(39),i(gkBW6_V2) , i(gkPS6)  ,1,1,1	,0.012343,0.020687,0.042780,0.143593,0.145481,0.045253,0.024030,0.006681,0.003567,0.002127,0.001539,0.001172,0.000743,0.000337,0.000147,0.000158,0.000139,0.000180,0.000245,0.000466,0.000987,0.001939,0.003573,0.006484,0.012507,0.013031,0.008641,0.021946,0.018929,0.010423,0.006772,0.005654,0.006751,0.005079,0.002597,0.001537,0.000903,0.000473,0.000212,0.000124,0.000121
  giMixedOoh42 ftgen 100+7,0,giTabLen,"padsynth",cpsmidinn(42),i(gkBW7_V2) , i(gkPS7)  ,1,1,1	,0.015973,0.032700,0.074843,0.250024,0.057702,0.026906,0.006281,0.003020,0.001964,0.001456,0.000842,0.000281,0.000120,0.000190,0.000125,0.000117,0.000172,0.000230,0.000397,0.000965,0.002195,0.004549,0.009401,0.019240,0.008562,0.023865,0.021772,0.010988,0.007172,0.007255,0.006908,0.003095,0.001662,0.000857,0.000363,0.000158,0.000146,0.000111
  giMixedOoh45 ftgen 100+8,0,giTabLen,"padsynth",cpsmidinn(45),i(gkBW8_V2) , i(gkPS8)  ,1,1,1	,0.020715,0.048381,0.295623,0.086997,0.032947,0.006518,0.003184,0.001972,0.001207,0.000399,0.000165,0.000225,0.000166,0.000247,0.000405,0.001120,0.002956,0.006943,0.016973,0.012394,0.026234,0.023823,0.011169,0.008018,0.009723,0.004053,0.001912,0.000846,0.000280,0.000172,0.000144
  giMixedOoh48 ftgen 100+9,0,giTabLen,"padsynth",cpsmidinn(48),i(gkBW9_V2) , i(gkPS9)  ,1,1,1	,0.020956,0.073214,0.300650,0.047374,0.011304,0.003365,0.002105,0.001056,0.000160,0.000271,0.000143,0.000105,0.000437,0.001635,0.004710,0.015016,0.005087,0.004883,0.002780,0.003191,0.006532,0.002329,0.000854,0.000249
  giMixedOoh51 ftgen 100+10,0,giTabLen,"padsynth",cpsmidinn(51),i(gkBW10_V2), i(gkPS10) ,1,1,1	,0.030210,0.140577,0.104265,0.026214,0.004100,0.002408,0.000835,0.000254,0.000256,0.000123,0.000395,0.002001,0.007270,0.012518,0.005007,0.003616,0.003732,0.007195,0.001939,0.000551
  giMixedOoh54 ftgen 100+11,0,giTabLen,"padsynth",cpsmidinn(54),i(gkBW11_V2), i(gkPS11) ,1,1,1	,0.046979,0.499997,0.053723,0.006460,0.002919,0.000773,0.000378,0.000118,0.000106,0.000152,0.001094,0.005381,0.019208,0.006051,0.003882,0.006400,0.003801,0.000886,0.000115
  giMixedOoh57 ftgen 100+12,0,giTabLen,"padsynth",cpsmidinn(57),i(gkBW12_V2), i(gkPS12) ,1,1,1	,0.073889,0.165133,0.017058,0.003994,0.001052,0.000471,0.000177,0.001512,0.009857,0.009881,0.005879,0.006275,0.004329,0.000733,0.000125
  giMixedOoh60 ftgen 100+13,0,giTabLen,"padsynth",cpsmidinn(60),i(gkBW13_V2), i(gkPS13) ,1,1,1	,0.319941,0.115082,0.065007,0.007044,0.001288,0.000283,0.000127,0.000673,0.008134,0.014095,0.001709,0.000289,0.000332
  giMixedOoh63 ftgen 100+14,0,giTabLen,"padsynth",cpsmidinn(63),i(gkBW14_V2), i(gkPS14) ,1,1,1	,1.000001,0.125741,0.022569,0.001337,0.000279,0.000263,0.002205,0.023707,0.004085,0.000367,0.000387
  giMixedOoh66 ftgen 100+15,0,giTabLen,"padsynth",cpsmidinn(66),i(gkBW15_V2), i(gkPS15) ,1,1,1	,0.712592,0.181596,0.004243,0.000318,0.000259,0.003910,0.023893,0.001033,0.000156,0.000248,0.000124
  giMixedOoh69 ftgen 100+16,0,giTabLen,"padsynth",cpsmidinn(69),i(gkBW16_V2), i(gkPS16) ,1,1,1	,0.347452,0.048482,0.002113,0.000185,0.003869,0.019916,0.000554,0.000125,0.000363
  giMixedOoh72 ftgen 100+17,0,giTabLen,"padsynth",cpsmidinn(72),i(gkBW17_V2), i(gkPS17) ,1,1,1	,0.209313,0.009909,0.000515,0.000104,0.013000,0.000503,0.005157,0.000630,0.000287,0.000189
  giMixedOoh75 ftgen 100+18,0,giTabLen,"padsynth",cpsmidinn(75),i(gkBW18_V2), i(gkPS18) ,1,1,1	,0.188584,0.002188,0.000154,0.005909,0.000855,0.010025,0.000214,0.001217
  giMixedOoh78 ftgen 100+19,0,giTabLen,"padsynth",cpsmidinn(78),i(gkBW19_V2), i(gkPS19) ,1,1,1	,0.222149,0.000533,0.000493,0.004776,0.009517,0.000194,0.000393
  giMixedOoh81 ftgen 100+20,0,giTabLen,"padsynth",cpsmidinn(81),i(gkBW20_V2), i(gkPS20) ,1,1,1	,0.063129,0.000488,0.025748,0.002834,0.000268,0.000223
  giMixedOoh84 ftgen 100+21,0,giTabLen,"padsynth",cpsmidinn(84),i(gkBW21_V2), i(gkPS21) ,1,1,1	,0.019817,0.000207,0.001007,0.001261,0.000379
 endif

 prints	"Ready!"

endin

instr	3	; SOUNDING INSTRUMENT. TRIGGERED BY MIDI NOTES.
 icps	cpsmidi
 ivel	ampmidi	0.4
 
; aAmpEnv	cossegr		0, i(gkAAtt),1, i(gkADec), i(gkASus), 36000, i(gkASus),i(gkARel), 0	; SUSTAIN SEGMENT (36000) NECESSARY DUE TO cosseg BUG
 aAmpEnv	linsegr		0, i(gkAAtt),1, i(gkADec), i(gkASus),                  i(gkARel), 0	

 inum	notnum
	
 cngoto changed(gkVoice,gkVoice2)==1, NEW_VOICE
 reinit NEW_VOICE
 NEW_VOICE:
 iVoice	    init	i(gkVoice)
 iVoice2	init	i(gkVoice2)

 iKGSize	=	3					; KEYGROUP SIZE
 iMinNum	=	24					; MINIMUM NOTE NUMBER FOR WHICH A WAVEFORM HAS BEEN CREATED
 iMaxNum	=	84					; MAXIMUM NOTE NUMBER FOR WHICH A WAVEFORM HAS BEEN CREATED
 iFirstFT	=	1					; FIRST FUNCTION TABLE IN THE SEQUENCE

 iBase1	table	inum+iKGSize, giNoteMap																; BASE NUMBER FOR LAYER 1 KEYGROUP
 ifn1	=		iFirstFT+((iBase1-iMinNum)/iKGSize)													; FUNCTION TABLE FOR LAYER 1 KEYGROUP
 iFade1	table	(inum+iKGSize)%(iKGSize*2), giFadeMap												; FADE VALUE FOR LAYER 1
 iBase2	table	inum, giNoteMap																		; BASE NUMBER FOR LAYER 2 KEYGROUP
 iBase2	limit	iBase2+iKGSize,iMinNum,iMaxNum														; BASE NUMBER FOR LAYER 2 OFFSET
 ifn2	limit	iFirstFT+((iBase2-iMinNum)/iKGSize),iFirstFT, iFirstFT+((iMaxNum-iMinNum)/iKGSize)	; FUNCTION TABLE FOR LAYER 2 KEYGROUP
 iFade2	table	inum%(iKGSize*2), giFadeMap															; FADE VALUE FOR LAYER 2

 /* LAYER 1 */
 aL	poscil3	ivel*aAmpEnv*gkAGain*iFade1, (sr*icps)/(giTabLen*cpsmidinn(iBase1)), ifn1
 aR	poscil3	ivel*aAmpEnv*gkAGain*iFade1, (sr*icps)/(giTabLen*cpsmidinn(iBase1)), ifn1, i(gkMonoStereo)/2		; OFFSET RIGHT CHANNEL PHASE TO CREATE A BROAD STEREO EFFECT
 
 /* LAYER 2 */
 aL2	poscil3	ivel*aAmpEnv*gkAGain*iFade2, (sr*icps)/(giTabLen*cpsmidinn(iBase2)), ifn2
 aR2	poscil3	ivel*aAmpEnv*gkAGain*iFade2, (sr*icps)/(giTabLen*cpsmidinn(iBase2)), ifn2, i(gkMonoStereo)/2		; OFFSET RIGHT CHANNEL PHASE TO CREATE A BROAD STEREO EFFECT 

 aL	+=	aL2											; MIX IN LAYER 2
 aR	+=	aR2

 ; VOICE 2
 ifn1b	=		101+((iBase1-iMinNum)/iKGSize)										; FUNCTION TABLE FOR LAYER 1 KEYGROUP
 ifn2b	limit	101+((iBase2-iMinNum)/iKGSize),101, 101+((iMaxNum-iMinNum)/iKGSize)	; FUNCTION TABLE FOR LAYER 2 KEYGROUP
 
 ; LAYER 1
 aLb	poscil3	ivel*aAmpEnv*gkAGain*iFade1, (sr*icps)/(giTabLen*cpsmidinn(iBase1)), ifn1b
 aRb	poscil3	ivel*aAmpEnv*gkAGain*iFade1, (sr*icps)/(giTabLen*cpsmidinn(iBase1)), ifn1b, i(gkMonoStereo)/2		; OFFSET RIGHT CHANNEL PHASE TO CREATE A BROAD STEREO EFFECT
 
 ; LAYER 2
 aL2b	poscil3	ivel*aAmpEnv*gkAGain*iFade2, (sr*icps)/(giTabLen*cpsmidinn(iBase2)), ifn2b
 aR2b	poscil3	ivel*aAmpEnv*gkAGain*iFade2, (sr*icps)/(giTabLen*cpsmidinn(iBase2)), ifn2b, i(gkMonoStereo)/2		; OFFSET RIGHT CHANNEL PHASE TO CREATE A BROAD STEREO EFFECT 

 aLb	+=	aL2b												; MIX IN LAYER 2
 aRb	+=	aR2b
 
 aL		ntrpol		aL, aLb, gkVoiceMix								; MIX IN LAYER 2
 aR		ntrpol		aR, aRb, gkVoiceMix

 /* FILTER */
 if i(gkFOnOff)==1 then											; IF FILTER SWITCH IS 'ON'
  if gkFiltLowCut>20 then
   aL		buthp	aL,gkFiltLowCut
   aR		buthp	aR,gkFiltLowCut
  endif
  aFiltL	resonr	aL,gkFiltCF,gkFiltCF*gkFiltBW,1
  aFiltR	resonr	aR,gkFiltCF,gkFiltCF*gkFiltBW,1
  aL	sum	aL,aFiltL*ampdb(gkFiltGain)
  aR	sum	aR,aFiltR*ampdb(gkFiltGain)
  if gkFiltHighCut<20000 then
   aL		butlp	aL,gkFiltHighCut
   aR		butlp	aR,gkFiltHighCut
  endif
 endif
 
 
 /* EXCITER */
 if gkExciterAmount>0 then
  aEL 	exciter 	aL, gkExciterFreq, 20000, 1, 10
  aER 	exciter 	aR, gkExciterFreq, 20000, 1, 10
  aL		+=		aEL*gkExciterAmount
  aR		+=		aER*gkExciterAmount
 endif

 
 	outs	aL,aR

 /* SEND SOME SIGNAL TO REVERB */
 gaRvbL	+=	aL*gkRSend
 gaRvbR	+=	aR*gkRSend
 
endin



instr	99	; REVERB (ALWAYS ON)
 aL,aR	reverbsc	gaRvbL,gaRvbR,gkRSize,gkR__CF
 	outs		aL,aR
 	clear		gaRvbL,gaRvbR
endin



</CsInstruments>

<CsScore>
i 1  0    [3600*24*7]	; READ IN WIDGETS
i 2  0.01 [3600*24*7]	; REINITIALISES THE "PADSYNTH" GEN ROUTINE WHEN CHANGES MADE TO WIDGETS PERTAINING TO ITS CREATION ARE MADE.
i 99 0 [3600*24*7]		; REVERB
</CsScore>

</CsoundSynthesizer>; RingModSynth.csd
; Iain McCurdy, 2015

; 2 oscillator additive synth with a third oscillator used as a ring modulator upon the first two.
; The second oscillator amplitude always decays faster than that of the first oscillator.
; The amplitude of the ring modulator always decays faster than the amplitude of the first and second oscillators.
; OSC.1 can be thought of as the resonating fundemental of the sound.
; OSC.2 provides a persussive impulse at the beginning of the sound. The 'Ratio' of OSC.2 defines the spectral character of the attack.
; MOD (OSC.3) is responsible for the spectral character (and spectral decay) of the sound.
; This simple arrangment should prove efficient in realtime whilst still providing a range of sounds through an intuitive interface.

; The amount of ring modulation applied is normally reduced as higher and higher notes are played. This is done in order to attenuate the
;  apparent increasing brightness of higher notes (and to prevent resulting aliasing). Settings for this function are made in the SCALE section.

; Higher notes will decay quicker than lower notes. This is implemented as an imitation of what happens in the natural acoustic world and there 
;  are no user controls over this mechanism

; OSC.1
; -----
; Decay		--	decay time in seconds. 
;			Actually this affects the decay times for osc.2 and the modulator oscillator as they will be defined as ratios of this value.
; Release	--	release time

; OSC.2
; -----
; Ratio		--	ratio of the frequency of oscillator 2 to that of oscillator 1. (Oscillator 1 takes the frequency of the note played.)
; Decay		--	decay time for oscillator 2. A ratio of the decay time for oscillator 1.

; MOD
; ---
; Ratio		--	ratio of the frequency of the modulator to that of oscillator 1.
; Decay		--	decay time for the modulator oscillator. A ratio of the decay time for oscillator 1.

; SPACE (spatialising of the monophonic signal using comb filters)
; -----
; Mix		--	Mix of the spacialising effect. 0=mono, 1=100%_stereo
; Width		--	Width of the stereo effect - delay times for the comb filters.
;  NB the delay times will also be biased according to the note played so that lower notes are increasingly biased toward the left channel and higher notes increasingly to the right (using the Haas effect)

; VEL. (velocity response adjustment)
; ----
; Amount	--	amount of velocity influence upon spectrum/brightness
; Offset	--	shift of spectral brightness, independent of velocity received

; RANDOM (note by note random offsets)
; ------
; Fundemental	--	random offsets of the fundemental (as in an out of tune piano)
; Spectrum	--	random offsets of osc.2 freq. ratio and the modulator ratio

; SCALE (keyboard scaling of brightness, it is useful to suppress the brightness of higher notes)
; -----
; Note		--	the note about which scaling pivots
; Amount	--	amount of brightness scaling

; OUTPUT
; ------
; High Cut	--	a static lowpass filter. Bypassed if control is maximum.
; Level		--	output level

; ratio 1 controls the ratio of the frequency of the second oscillator to the fundemental (frequency of the first oscillator.)
; ratio 2 controls the ratio of the frequency of the ring modulator to the fundemental (frequency of the first oscillator.)

<Cabbage>
form caption("Ring Modulation Synthesizer") size(875,267), pluginid("RMS1") style("legacy")

image      bounds(  5,  5, 70,160), colour(0,0,0,0), outlinecolour("white"), outlinethickness(4), shape("rounded"), plant("osc1") {
label      bounds(  5,  5, 60, 14), text("OSC.1")
rslider    bounds(  5, 25, 60, 60), text("Decay"),        channel("Dec"),   range(0.01,12, 2,1,0.001)
rslider    bounds(  5, 95, 60, 60), text("Release"),      channel("Rel"),   range(0.01,12, 0.2,1,0.001)
}

image      bounds( 80,  5, 70,160), colour(0,0,0,0), outlinecolour("white"), outlinethickness(4), shape("rounded"), plant("osc2") {
label      bounds(  5,  5, 60, 14), text("OSC.2")
rslider    bounds(  5, 25, 60, 60), text("Ratio"),        channel("PRat"),  range(.1,  30, 3.37,0.5,0.001)
rslider    bounds(  5, 95, 60, 60), text("Decay"),      channel("PDec"),  range(0.001,1, 0.2,1,0.001)
}
image      bounds(155,  5, 70,160), colour(0,0,0,0), outlinecolour("white"), outlinethickness(4), shape("rounded"), plant("RM") {
label      bounds(  5,  5, 60, 14), text("MOD.")
rslider    bounds(  5, 25, 60, 60), text("Ratio"),        channel("MRat"),  range(.1,  30, 2.77,0.5,0.001)
rslider    bounds(  5, 95, 60, 60), text("Decay"),      channel("MDec"),  range(0.001,1, 0.1,1,0.001)
}
image      bounds(230,  5, 70,160), colour(0,0,0,0), outlinecolour("white"), outlinethickness(4), shape("rounded"), plant("Spat") {
label      bounds(  5,  5, 60, 14), text("SPACE")
rslider    bounds(  5, 25, 60, 60), text("Mix"),           channel("SpatMix"),   range(0,1,1,1,0.001)
rslider    bounds(  5, 95, 60, 60), text("Width"),         channel("SpatWidth"), range(0.001,0.05,0.03,1,0.001)
}
image      bounds(305,  5, 70,160), colour(0,0,0,0), outlinecolour("white"), outlinethickness(4), shape("rounded"), plant("Velocity") {
label      bounds(  5,  5, 60, 14), text("VEL.")
rslider    bounds(  5, 25, 60, 60), text("Amount"),      channel("VelAmt"),   range(  0,  1,0.4,0.5,0.001)
rslider    bounds(  5, 95, 60, 60), text("Offset"),      channel("VelOS"),    range(  0,  1,0,0.5,0.001)
}
image      bounds(380,  5, 70,160), colour(0,0,0,0), outlinecolour("white"), outlinethickness(4), shape("rounded"), plant("Tuning") {
label      bounds(  5,  5, 60, 14), text("RANDOM")
rslider    bounds(  5, 25, 60, 60), text("Fund."),        channel("RndTune"), range(0,10,0.1,0.5,0.001)
rslider    bounds(  5, 95, 60, 60), text("Spectrum"),     channel("RndSpec"), range(0,10,0.1,0.5,0.001)
}
image      bounds(455,  5, 70,160), colour(0,0,0,0), outlinecolour("white"), outlinethickness(4), shape("rounded"), plant("Scale") {
label      bounds(  5,  5, 60, 14), text("SCALE")
rslider    bounds(  5, 25, 60, 60), text("Note"),          channel("KybdNote"), range(  0,127, 64,1,1)
rslider    bounds(  5, 95, 60, 60), text("Amount"),        channel("KybdScal"), range(  0,  5,3.5,1,0.001)
}
image      bounds(530,  5, 70,160), colour(0,0,0,0), outlinecolour("white"), outlinethickness(4), shape("rounded"), plant("Attack") {
label      bounds(  5,  5, 60, 14), text("ATTACK")
rslider    bounds(  5, 25, 60, 60), text("Time"),       channel("AttTim"),   range(0,0.5,0,0.5,0.001)
rslider    bounds(  5, 95, 60, 60), text("Smoothing"),  channel("AttSmooth"),range(  0,   1,  0.5,1,0.001)
}
image      bounds(605,  5,130,160), colour(0,0,0,0), outlinecolour("white"), outlinethickness(4), shape("rounded"), plant("Detune") {
label      bounds(  5,  5,120, 14), text("DETUNE")
rslider    bounds(  5, 25, 60, 60), text("Random"),       channel("DtnRnd"),   range(0,100,0,1,0.001)
rslider    bounds(  5, 95, 60, 60), text("Manual"),       channel("DtnMan"),   range(-50,50,0,1,0.01)
rslider    bounds( 65, 25, 60, 60), text("Velocity"),     channel("DtnVel"),   range(0,1,0,1,0.001)
}
image      bounds(740,  5,130,160), colour(0,0,0,0), outlinecolour("white"), outlinethickness(4), shape("rounded"), plant("Output") {
label      bounds(  5,  5,120, 14), text("GLOBAL")
rslider    bounds(  5, 25, 60, 60), text("High Cut"),      channel("LPF"),    range(100,12000,12000,0.5,1)
rslider    bounds(  5, 95, 60, 60), text("Sus.Lev."),      channel("SusLev"), range(  0,    1,  0,1,0.001)
label      bounds( 75, 30, 40, 10), text("PRESET")
combobox   bounds( 75, 40, 40, 20), text("1","2","3","4","5","6","7","8","9","10"), channel("preset")
rslider    bounds( 65, 95, 60, 60), text("Level"),         channel("Level"),  range(  0,    1,  0.7,0.5,0.001)
}

keyboard   bounds(  5,170,865, 85)

label bounds(5,256,97,10), colour("black"), text("Iain McCurdy |2015|") align("right")
</Cabbage>


<CsoundSynthesizer>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0 --midi-key=4 --midi-velocity=5
</CsOptions>

<CsInstruments>
sr = 44100
ksmps = 16
nchnls = 2
0dbfs = 1
zakinit	2,2
massign	0,2

; waveforms
gisine	ftgen	1,0,4096,10,1
giwave2	ftgen	2,0,4096,10,1,0.5
giwave3	ftgen	3,0,4096,10,1,1

girnd	ftgen	4,0,512,21,6,1		; gaussian distribution

opcode	FreqShifterSimple,a,aki					; SIMPLE FREQUENCY SHIFTER
	asig,kfshift,ifn	xin				; READ IN INPUT ARGUMENTS
	areal, aimag hilbert asig				; HILBERT OPCODE OUTPUTS TWO PHASE SHIFTED SIGNALS, EACH 90 OUT OF PHASE WITH EACH OTHER
	asin 	oscili       1,    kfshift,     ifn,          0
	acos 	oscili       1,    kfshift,     ifn,          0.25	
	;RING MODULATE EACH SIGNAL USING THE QUADRATURE OSCILLATORS AS MODULATORS
	amod1	=		areal * acos
	amod2	=		aimag * asin	
	;UPSHIFTING OUTPUT
	ares	= (amod1 - amod2)				; MIX OUTPUTS (INVERTED WITH RESPECT TO EACH OTHER)
		xout	ares					; SEND AUDIO BACK TO CALLER INSTRUMENT
endop


instr	2 
 inote	=	p4			

 iKybdNote	chnget	"KybdNote"						; pivot note for brightness scaling
 iKybdAmt	chnget	"KybdScal"						; amount of keyboard to brightness scaling
 iKybdScal	limit	1 + ( ((iKybdNote-inote)/127) *  iKybdAmt), 0, 5	; scaling value

 iDurScal	limit	1 + ( ((64-inote)/127) * 3), 0.01, 5			; duration scaling (higher notes shorter, lower notes longer). No user control.

 iNoteOS	table	inote,girnd						; random fundemental offset value from table
 iRndTune	chnget	"RndTune"						; amount of random tuning offset
 inote	+=	iNoteOS * iRndTune						; add random offset

 iSpecOS	table	inote+128,girnd						; spectral offset value from table
 iRndSpec	chnget	"RndSpec"						; amount of random spectral offset
 iSpec	=	iSpecOS * iRndSpec						; scale random value from table by GUI control

 iVelAmt	chnget	"VelAmt"						; amount of velocity control
 iVelOS		chnget	"VelOS"							; velocity offset

 ivel	=	(p5/127)^4							; velocity response shaped by being raised to the power of 4
 iDec	chnget	"Dec"								; decay time ratio
 iPDec	chnget	"PDec"								; timbral decay (a value 0 - 1 but probably closer to zero)
 iRDec	chnget	"MDec"								; timbral decay (a value 0 - 1 but probably closer to zero)
 iRel	chnget	"Rel"								; release time (a fixed value)

 ; FREQUENCY RATIOS
 if0	=	1								; 1st partial (fundemental)
 if1	chnget	"PRat"								; 2nd partial
 imod	chnget	"MRat"								; ring modulator frequency ratio
 
 ; AMPLITUDE ENVELOPES
 iSusLev	chnget	"SusLev"
 iSusLev	+=	0.0001
 aenv1	expsegr	1,      iDec*iDurScal,iSusLev,iRel,0.0001			; f0
 aenv2	expsegr	1,iPDec*iDec*iDurScal,iSusLev,iRel,0.0001			; f1
 aenv3	expsegr	1,iRDec*iDec*iDurScal,iSusLev,iRel,0.0001			; mod
 
 ; ENVELOPE SMOOTHING (SPECIFICALLY ATTACK)
 iAttTim	chnget	"AttTim"
 iAttSmooth	chnget	"AttSmooth"
 if iAttTim>0 then
  aenv1	delay	aenv1,rnd(iAttTim*0.5)+(iAttTim*0.5)
  aenv2	delay	aenv2,rnd(iAttTim*0.5)+(iAttTim*0.5)
  aenv3	delay	aenv3,rnd(iAttTim*0.5)+(iAttTim*0.5)   
  iAttSmooth	=	cpsoct(8 - (iAttSmooth*7)) 
  aenv1	tone	aenv1,iAttSmooth
  aenv2	tone	aenv2,iAttSmooth
  aenv3	tone	aenv3,iAttSmooth
  xtratim	iAttTim + iRel
 endif
  
 ; PARTIAL OSCILLATORS
 apart1	oscili	(aenv1-0.0001) * 1   , cpsmidinn(inote) * if0, gisine		; fundemental oscillato
 apart2	oscili	(aenv2-0.0001) * ((ivel*iVelAmt)+iVelOS) * iKybdScal, cpsmidinn(inote+iSpec) * if1, gisine	; partial 2 will be doubly affected by velocity (see further down) thereby creating a velocity-timbre mapping 

 ; MIXER
 amix	sum	(apart1 + apart2) * ivel * 0.3					; mix the two main oscillators
 
 ; RING MODULATION
 amod	poscil	aenv3,cpsmidinn(inote+iSpec) * imod, gisine			; ring modulation oscillators
 iLevel	chnget	"Level"
 amix	=	amix * iLevel * (1 - (amod*((ivel*iVelAmt)+iVelOS)*iKybdScal))	; amount of ring modulation dependent upon velocity

 ; DETUNING
 iDtnRnd	chnget	"DtnRnd"
 iDtnMan	chnget	"DtnMan"
 iDtnVel	chnget	"DtnVel"
 if (iDtnRnd>0) || (iDtnMan!=0) then
  iFSfrq	table	inote+256,girnd
  iFSfrq	ntrpol	iDtnMan + (iFSfrq*iDtnRnd),(iDtnMan + (iFSfrq*iDtnRnd))*ivel,iDtnVel 
  aFS	FreqShifterSimple	amix,iFSfrq,gisine
  amix	=			(amix + aFS) * 0.8
 endif
 
 iSpatMix	chnget	"SpatMix"						; amount of spacial width mix
 iSpatWidth	chnget	"SpatWidth"						; width of spacial effect
 iDelL	=	0.0001 + ((1-(inote/127)) * iSpatWidth)				; derive delay times according to note played
 iDelR	=	0.0001 + ((inote/127) * iSpatWidth)
 aCL	comb	amix, 0.01, iDelL
 aCR	comb	amix, 0.01, iDelR
 aL	ntrpol	amix,aCL,iSpatMix						; mix
 aR	ntrpol	amix,aCR,iSpatMix
	zawm	aL,1								; send to zak channels
	zawm	aR,2
endin

instr	3		; output instrument (always on)
 aL	zar	1
 aR	zar	2
 kLPF	chnget	"LPF"
 if kLPF<12000 then								; low pass filter if control is below maximum
  aL	butlp	aL,kLPF
  aR	butlp	aR,kLPF
 endif
	outs	aL,aR 
	zacl	1,2								; clear zak channels
endin


instr	99
#define	PRESET(Dec'Rel'PRat'PDec'MRat'MDec'SpatMix'SpatWidth'VelAmt'VelOS'RndTune'RndSpec'KybdNote'KybdScal'AttTim'AttSmooth'DtnRnd'DtnMan'DtnVel'LPF'SusLev)
#
	chnset	$Dec, 		"Dec"
 	chnset	$Rel,      	"Rel"
 	chnset	$PRat,     	"PRat"
 	chnset	$PDec,     	"PDec"
 	chnset	$MRat,     	"MRat"
 	chnset	$MDec,     	"MDec"
 	chnset	$SpatMix,  	"SpatMix"
 	chnset	$SpatWidth,	"SpatWidth"
 	chnset	$VelAmt,   	"VelAmt"
 	chnset	$VelOS,    	"VelOS"
 	chnset	$RndTune,  	"RndTune"
 	chnset	$RndSpec,  	"RndSpec"
 	chnset	$KybdNote, 	"KybdNote"
 	chnset	$KybdScal, 	"KybdScal"
 	chnset	$AttTim,   	"AttTim"
 	chnset	$AttSmooth,	"AttSmooth"
 	chnset	$DtnRnd,   	"DtnRnd"
 	chnset	$DtnMan,   	"DtnMan"
 	chnset	$DtnVel,   	"DtnVel"
 	chnset	$LPF,      	"LPF"
 	chnset	$SusLev,	"SusLev"	
#
 kpreset	chnget	"preset"
 if changed(kpreset)==1 then
  reinit UPDATE
 endif
 UPDATE:
 if i(kpreset)==1 then
; $PRESET(Dec'Rel'PRat'PDec'MRat'MDec'SpatMix'SpatWidth'VelAmt'VelOS'RndTune'RndSpec'KybdNote'KybdScal'AttTim'AttSmooth'DtnRnd'DtnMan'DtnVel'LPF  'SusLev) 
  $PRESET(2  '0.2'3.37'0.2 '2.77'0.2 '1      '0.03     '0.4   '0    '0.1    '0.1    '64      '3.5     '0     '0.5      '0     '0     '0     '12000'0     ) 
 elseif i(kpreset)==2 then
  $PRESET(6.4'0.2'5.31'0.2 '2.77'0.2 '1      '0.03     '0.4   '0    '0.1    '0.1    '64      '3.5     '1.5   '0.82     '14    '0     '0     '12000'0     ) 
 elseif i(kpreset)==3 then
  $PRESET(6.4'0.2'5.31'0.2 '2.77'0.2 '1      '0.03     '0.4   '0    '0.1    '0.1    '64      '3.5     '0.001 '0.15     '25    '0     '1     '12000'0     ) 
 elseif i(kpreset)==4 then
  $PRESET(6.4'2.3'3.71'0.09'5.43'0.09'1      '0.03     '1     '0    '0.1    '10     '64      '3.5     '0.5   '1        '25    '-5.6   '0.25 '3000 '0.12  ) 
 elseif i(kpreset)==5 then
  $PRESET(6.4'0.5'2.07'0.2 '1.01'0.34'1      '0.03     '1     '0    '0.1    '0.1    '64      '3.5     '0.005 '0.38     '25    '0     '1     '12000'0.13  ) 
 elseif i(kpreset)==6 then
  $PRESET(9.5'0.2'8   '0.2 '30  '0.2 '1      '0.03     '0.9   '0    '0.1    '0.1    '64      '3.5     '0     '0.5      '8     '0     '0.5   '1200 '0     ) 
 elseif i(kpreset)==7 then
  $PRESET(8  '0.2'2   '0.18'14  '0.15'1      '0.03     '0.9   '0    '0.1    '0.1    '64      '3.5     '0     '0.5      '8     '0     '0.5   '1200 '0     ) 
 elseif i(kpreset)==8 then
  $PRESET(0.18'0.2'5.22'1  '5.33'1    '1     '0.03     '0.9   '0    '10     '10     '60      '5       '0.08  '0.24     '100   '3.6   '1     '12000'0.18  ) 
 elseif i(kpreset)==9 then
  $PRESET(8  '0.2'2   '0.4 '7.5 '0.009'1     '0.05     '1     '0    '0.1    '0.1    '64      '3.5     '0     '0.5      '8     '0     '0.5   '1200 '0     ) 
 elseif i(kpreset)==10 then
  $PRESET(0.18'0.2'5.22'1  '5.33'1    '1     '0.03     '0.9   '0    '10     '10     '60      '5       '0.322 '0.24     '100   '3.6   '1     '12000'0     ) 
 endif
 rireturn
endin


</CsInstruments>  

<CsScore>
i 3  0 [3600*24*7]
i 99 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>; WavetableSynth.csd
; Written by Iain McCurdy, 2012.

; Implements wavetable synthesis a spectral morphing based on note played.
; This can be used to maintain a convincing spectral appearance fo an instrument imitation across a range of note.
; As this morphing is done continuously between notes and not just stepwise note to note, 
;  - use of pitch bend will also cause spectral morphing resulting in more convincing glissandi than are normally implemented in commercial 
;  - hardware.

; As there are many tables of waveform data in this example, it may take a moment or two to load.


; CONTROLS
; --------
;
; Tone		--		tone control
; Shift		--		shifts the note to wavetable relationship resulting in tonal variations
; Jitter	--		humanizing of the tone through random amplitude, pitch and tonal
; Noise		--		amount of noise in the sound. Used to simulate breath noise.
; EQ		--		EQ of the noise quotient
; Drop		--		Amount of pitch drop upon note conclusion

<Cabbage>
form caption("Wavetable Synth") size(720, 290), pluginid("wtsy") style("legacy")
image                pos(0, 0), size(720, 290), colour(150,100,70), shape("sharp"),   outlinecolour("maroon"), outlinethickness(2)

;INSTRUMENT
image    bounds( 10,  6,140, 88), colour(150,100,70), shape("rounded"), outlinecolour("white"), outlinethickness(1), plant("instrument") {
label    bounds(  0,  5,140, 15), text("Instrument"),       fontcolour(white)
combobox bounds( 10, 40,120, 20), fontcolour("white"), channel("Instr"),  value(1), text("Clarinet", "Bass Clarinet", "C.bass Clarinet", "Oboe", "Bassoon", "C.bassoon", "Violin", "Cello", "Piccolo", "Flute", "Alto Flute", "Bass Flute", "Ahh", "Horn P", "Horn F", "B.Trb.Harmon Mute", "B.Trb.Cup Mute", "B.Trb.Open")
}

;MODULATION
image   bounds(160,  6,290, 88), colour(150,100,70), shape("rounded"), outlinecolour("white"), outlinethickness(1), plant("modulation") {
label   bounds(  0,  5,290, 15), text("Modulation"), fontcolour(white)
label   bounds(  8, 74, 28, 12), text("Mod."),       fontcolour(white)
vslider bounds(  0,  4, 40, 80), channel("moddep"), range(0, 1, 0.4),midCtrl(1, 1), colour( 70, 30,  0), trackercolour("tan"), textcolour(white)
rslider bounds( 30, 26, 60, 60), text("Vib."),  channel("vibdep"),  range(0, 1, 0.15),       colour( 70, 30,  0), trackercolour("tan"), textcolour(white)
rslider bounds( 80, 26, 60, 60), text("Trem."), channel("tremdep"), range(0, 1, 0.4),        colour( 70, 30,  0), trackercolour("tan"), textcolour(white)
rslider bounds(130, 26, 60, 60), text("Tone"),  channel("tonedep"), range(0, 4, 2),          colour( 70, 30,  0), trackercolour("tan"), textcolour(white)
rslider bounds(180, 26, 60, 60), text("Rate"),  channel("ModRte"),  range(0, 16, 4.25, 0.5), colour( 70, 30,  0), trackercolour("tan"), textcolour(white)
rslider bounds(230, 26, 60, 60), text("Delay"), channel("ModDly"),  range(0.01,3,1,0.5,0.01),colour( 70, 30,  0), trackercolour("tan"), textcolour(white)
}

;POLYPHONY
image   bounds(455,  6,140, 88), colour(150,100,70), shape("rounded"), outlinecolour("white"), outlinethickness(1), plant("polyphony") {	;polyphony
label   bounds(  0,  5,140, 15), text("Polyphony"),  fontcolour(white)
button  bounds( 10, 34, 70, 25), text("poly","mono"), channel("monopoly"), value(1)
rslider bounds( 80, 26, 60, 60), text("Leg.Time"),    channel("LegTim"), range(0.001, 2, 0.002, 0.5, 0.001), colour( 70, 30,  0), trackercolour("tan"), textcolour(white)
}

;PITCH BEND
image   bounds(600,  6,110, 88), colour(150,100,70), shape("rounded"), outlinecolour("white"),  outlinethickness(1), plant("pitchbend") {	;pitch bend
label   bounds( 15,  5, 75, 15), text("Pitch Bend"), fontcolour(white)
rslider bounds(  0, 26, 60, 60), text("P.Bend"), channel("PBend"),  range(-1,1, 0), colour( 70, 30,  0), trackercolour("tan"), textcolour(white)
rslider bounds( 50, 26, 60, 60), text("Range"), channel("PBendRng"), range(0, 12, 2,1,1), colour( 70, 30,  0), trackercolour("tan"), textcolour(white)
}

;NOISE ATTACK
image   bounds( 15,103,160, 88), colour(150,100,70), shape("rounded"), outlinecolour("white"), outlinethickness(1), plant("noiseattack") {	;noise attack
label   bounds( 28,  4, 60, 15), text("Attack"),     fontcolour(white)
rslider bounds(  0, 24, 60, 60), text("Amp."), channel("NAttAmp"), range(0,  4.00, 0.5),      colour( 70, 30,  0), trackercolour("tan"), textcolour(white)
rslider bounds( 50, 24, 60, 60), text("Time"), channel("NAttTim"), range(0.001,0.5,0.05,0.5,0.001), colour( 70, 30,  0), trackercolour("tan"), textcolour(white)
rslider bounds(100, 24, 60, 60), text("Build"), channel("build"),  range(0.001,0.5,0.001,0.5,0.001), colour( 70, 30,  0), trackercolour("tan"), textcolour(white)
}

;QUALITY
image   bounds(180,103,155, 88), colour(150,100,70), shape("rounded"), outlinecolour("white"), outlinethickness(1), plant("quality") {	;quality
label   bounds( 70, 72, 16, 11), text("EQ"),         fontcolour(white)
label   bounds( 48,  4, 60, 15), text("Quality"),    fontcolour(white)
rslider bounds(  0, 24, 60, 60), text("Noise"), channel("NoiseAmp"), range(0,5,0.01,0.5,0.0001),     colour( 70, 30,  0), trackercolour("tan"), textcolour(white)
vslider bounds( 53, 17, 30, 65), text(""),      channel("EQ_Lo"),    range(500,10000,2000,0.5,0.01), colour( 70, 30,  0), trackercolour("tan"), textcolour(white)
vslider bounds( 73, 17, 30, 65), text(""),      channel("EQ_Hi"),    range(20,5000,200,0.5,0.01),    colour( 70, 30,  0), trackercolour("tan"), textcolour(white)
rslider bounds( 95, 24, 60, 60), text("Drop"),  channel("drop"),     range(0,0.5,0.05,0.5,0.0001),   colour( 70, 30,  0), trackercolour("tan"), textcolour(white)
}

;REVERB
image   bounds(340,103,110, 88), colour(150,100,70), shape("rounded"), outlinecolour("white"),  outlinethickness(1), plant("reverb") {	;reverb
label   bounds( 24,  4, 60, 15), text("Reverb"),     fontcolour(white)
rslider bounds(  0, 24, 60, 60), text("Mix"),  channel("RvbMix"),  range(0, 1.00, 1),     colour( 70, 30,  0), trackercolour("tan"), textcolour(white)
rslider bounds( 50, 24, 60, 60), text("Size"), channel("RvbSize"), range(0.3, 1.00, 0.4), colour( 70, 30,  0), trackercolour("tan"), textcolour(white)
}

;OUTPUT
image   bounds(455,103,260, 88), colour(150,100,70), shape("rounded"), outlinecolour("white"),  outlinethickness(1), plant("output") {	;output
label   bounds( 97,  4, 60, 15), text("Output"),     fontcolour(white)
rslider bounds(  0, 24, 60, 60), text("Tone"),   channel("bright"),  range(0, 1.00, 1),            colour( 70, 30,  0), trackercolour("tan"), textcolour(white)
rslider bounds( 50, 24, 60, 60), text("Shift"),  channel("shift"),   range(-36, 36.00, 0,1,0.001), colour( 70, 30,  0), trackercolour("tan"), textcolour(white)
rslider bounds(100, 24, 60, 60), text("Jitter"), channel("jitter"),  range(0, 1.00, 0.4),          colour( 70, 30,  0), trackercolour("tan"), textcolour(white)
rslider bounds(150, 24, 60, 60), text("Pan"),    channel("pan"),     range(0, 1.00, 0.5),          colour( 70, 30,  0), trackercolour("tan"), textcolour(white)
rslider bounds(200, 24, 60, 60), text("Level"),  channel("level"),   range(0, 2.00, 1),            colour( 70, 30,  0), trackercolour("tan"), textcolour(white)
}

keyboard pos(10, 200), size(700, 80)
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr 		= 	44100
ksmps 		= 	32
nchnls 		= 	2
0dbfs		=	1	;MAXIMUM AMPLITUDE
seed	0
massign	0,2

gkactive	init	0	; Will contain number of active instances of instr 3 when legato mode is chosen. NB. notes in release stage will not be regarded as active. 

;Author: Iain McCurdy (2012)

gisine	ftgen	0,0,4096,10,1	;A SINE WAVE. USED BY THE LFOs.

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;  CLARINET
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;FOUR GEN10 FUNCTION TABLES WHICH CORRESPOND TO THE SPECTRAL ENVELOPES OF FOUR DIFFERENT NOTES PLAYED ON THE CLARINET
;THE FOUR NOTES CHOSEN COVER THE SOUNDING RANGE OF THE INSTRUMENT
;NOTE THAT ALL FUNCTION TABLES USED BY ftmorph IN THE MORPHING PROCESS, INCLUDING THE ONE INTO WHICH THE MORPHED TABLE IS WRITTEN (SEE INSTR 1), SHOULD BE THE SAME SIZE
;FOUR GEN10 FUNCTION TABLES WHICH CORRESPOND TO THE SPECTRAL ENVELOPES OF FOUR DIFFERENT NOTES PLAYED ON THE CLARINET
;THE FOUR NOTES CHOSEN COVER THE SOUNDING RANGE OF THE INSTRUMENT
;NOTE THAT ALL FUNCTION TABLES USED BY ftmorph IN THE MORPHING PROCESS, INCLUDING THE ONE INTO WHICH THE MORPHED TABLE IS WRITTEN (SEE INSTR 1), SHOULD BE THE SAME SIZE
giclar50 ftgen 0,0,4096,10,0.273597,0.027434,0.737705,0.049480,0.448437,0.272536,0.131175,0.129945,0.283082,0.130714,0.026719,0.037582,0.018953,0.010729,0.067580,0.024573,0.016586,0.049988,0.033294,0.017090,0.008591,0.021128,0.007237,0.016060,0.016060
giclar62 ftgen 0,0,4096,10,0.753504,0.011446,0.501720,0.055791,0.241768,0.037889,0.027203,0.062793,0.102494,0.030506,0.042453,0.050202,0.031077,0.027208,0.020897,0.022205,0.012154,0.008160,0.004886,0.005076,0.003805,0.001322,0.001149,0.001450,0.001450
giclar74 ftgen 0,0,4096,10,0.519536,0.062430,0.745521,0.055790,0.103856,0.097554,0.090420,0.077181,0.017130,0.013446,0.005674,0.003296,0.003438,0.003395,0.002506,0.001169,0.002525,0.001237,0.002624,0.001440,0.000880,0.001061,0.002672,0.002090,0.002090
giclar86 ftgen 0,0,4096,10,0.823209,0.201690,0.171118,0.161374,0.041951,0.004950,0.010889,0.001107,0.001365,0.003340,0.002259,0.001175,0.000442,0.001544,0.001259,0.000549,0.000455,0.000352,0.000345,0.000396,0.000477,0.000848,0.001199,0.001081,0.001081
giwavemapClar	ftgen	0,0,128,-27, 0,0, 50,0,  62,1,  74,2,  86,3,   127,3
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
gitabs4morfClar	ftgen	0,0,4,-2,giclar50,giclar62,giclar74,giclar86

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;  BASS CLARINET
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
giBClar35 ftgen 0,0,4096,10,0.384232,0.038085,0.578537,0.029558,0.143002,0.119033,0.397678,0.113380,0.577246,0.158831,0.577514,0.094994,0.440674,0.109136,0.500666,0.132354,0.360370,0.104810,0.231403,0.089565,0.207353,0.099773,0.209066,0.123801,0.158769,0.079383,0.036078,0.019583,0.010310,0.017060,0.029465,0.045821,0.031622,0.038326,0.052222,0.058647,0.083956,0.079748,0.081955,0.097274,0.069934,0.075100,0.049259,0.058121,0.068078,0.065276,0.070165,0.065898,0.072432,0.055423,0.052283,0.036547,0.034082,0.035287,0.044801,0.053917,0.050263,0.036979,0.034264,0.035892,0.035011,0.037199,0.041542,0.043201,0.039923,0.035164,0.035828,0.036193,0.037155,0.035493,0.034546,0.035091,0.029891,0.027394,0.026174,0.023757,0.021365,0.019468,0.016295,0.015301,0.015263,0.014310,0.013239,0.011972,0.011445,0.011727,0.012391,0.013892,0.015395,0.015147,0.015137,0.014816,0.013898,0.012682,0.011462,0.009883,0.008579,0.007797,0.007749
giBClar41 ftgen 0,0,4096,10,0.525063,0.002869,0.469239,0.024384,0.895713,0.021156,0.199553,0.014871,0.215693,0.036697,0.212856,0.060220,0.224360,0.026202,0.021469,0.019475,0.067282,0.034970,0.025525,0.028958,0.038550,0.041724,0.035988,0.016617,0.026564,0.031021,0.037801,0.030070,0.055636,0.040575,0.029792,0.031356,0.031871,0.058063,0.027829,0.023825,0.015824,0.011714,0.011110,0.015367,0.011850,0.008957,0.011489,0.007029,0.004640,0.004862,0.006536,0.006771,0.006683,0.005231,0.005323,0.006834,0.005342,0.005818,0.004902,0.005468,0.005431,0.006151,0.004672,0.003041,0.002322,0.002274,0.002661,0.003122,0.002931,0.002587,0.002527,0.002499,0.003095,0.003755,0.003651,0.003768,0.003972,0.003962,0.003999,0.003352,0.002866,0.002449,0.002120,0.001972,0.002040,0.002221,0.002063,0.002057,0.002415,0.002849,0.003276,0.003776,0.003994,0.003829,0.003419,0.003328,0.003575,0.003829,0.003703,0.003454,0.003149,0.002825,0.002697,0.002765
giBClar47 ftgen 0,0,4096,10,0.447815,0.011780,0.911495,0.027076,0.846723,0.050517,0.224579,0.039801,0.048967,0.024162,0.071418,0.087315,0.031778,0.048063,0.058394,0.078770,0.021135,0.041585,0.092206,0.058125,0.063991,0.033673,0.025813,0.045142,0.037450,0.016766,0.014278,0.016668,0.017869,0.025925,0.010244,0.010062,0.010634,0.008986,0.006992,0.005186,0.004618,0.003658,0.002913,0.003004,0.004250,0.003142,0.002387,0.002692,0.003592,0.004496,0.002831,0.001838,0.001680,0.002144,0.002567,0.003185,0.002727,0.002419,0.001998,0.001883,0.002286,0.002626,0.003202,0.003257,0.003056,0.003241,0.002838,0.002521,0.002294,0.002409,0.002746,0.002848,0.003387,0.004173,0.004189,0.004587,0.005402,0.004977,0.004132,0.003842,0.003974,0.003650,0.003605,0.003810,0.003745,0.003770,0.003520,0.003363,0.003391,0.003302,0.003124,0.003422,0.004022,0.004064,0.003584,0.002939,0.002329,0.001970,0.001947,0.002034,0.002069,0.002043,0.001854,0.001658
giBClar53 ftgen 0,0,4096,10,0.819856,0.006052,0.508263,0.007439,0.271031,0.012967,0.059374,0.017922,0.016997,0.004014,0.027132,0.014921,0.020230,0.012123,0.021066,0.004875,0.016894,0.004428,0.004157,0.007603,0.004211,0.011103,0.005054,0.007329,0.004043,0.002169,0.003183,0.001822,0.001158,0.001758,0.002350,0.001442,0.002218,0.002815,0.001503,0.001764,0.001171,0.001508,0.000934,0.000714,0.000902,0.000884,0.000943,0.000825,0.000579,0.000572,0.000654,0.000752,0.000902,0.000932,0.000868,0.000909,0.000903,0.001065,0.001472,0.001483,0.001803,0.001941,0.002100,0.002756,0.002543,0.001984,0.001589,0.001342,0.001414,0.001219,0.001004,0.000908,0.000887,0.001102,0.001342,0.001312,0.001089,0.000869,0.000733,0.000620,0.000574,0.000518,0.000451,0.000422,0.000446,0.000473,0.000423,0.000354,0.000335,0.000370,0.000410,0.000418,0.000435,0.000434,0.000417,0.000417,0.000388,0.000342,0.000316,0.000303,0.000306,0.000309,0.000292,0.000267
giBClar59 ftgen 0,0,4096,10,0.866645,0.024133,0.420624,0.171074,0.353043,0.050546,0.198619,0.047824,0.110458,0.081558,0.064116,0.041109,0.026267,0.036570,0.013031,0.023724,0.007023,0.010067,0.004550,0.011618,0.009601,0.005731,0.005607,0.005036,0.002347,0.002907,0.001472,0.001519,0.001304,0.002584,0.001383,0.001362,0.001591,0.002655,0.004442,0.004905,0.003148,0.004830,0.002947,0.002926,0.003063,0.002394,0.002276,0.002019,0.001689,0.002028,0.002368,0.003510,0.004637,0.004228,0.003257,0.002700,0.002231,0.001681,0.001293,0.001062,0.001121,0.000894,0.000797,0.000865,0.000752,0.000724,0.000719,0.000787,0.000896,0.000801,0.000686,0.000551,0.000468,0.000466,0.000515,0.000460,0.000382,0.000358,0.000366,0.000400,0.000405,0.000355,0.000333,0.000349,0.000352,0.000346,0.000335,0.000317,0.000303,0.000297,0.000289,0.000276,0.000290,0.000292,0.000287,0.000307,0.000318,0.000332,0.000353,0.000374,0.000388,0.000398,0.000399,0.000407
giBClar65 ftgen 0,0,4096,10,0.934141,0.012361,0.023358,0.045609,0.025913,0.017772,0.009955,0.010837,0.007253,0.001002,0.004215,0.001570,0.004226,0.001334,0.000580,0.001740,0.000839,0.001364,0.001337,0.000523,0.000377,0.000535,0.000290,0.000461,0.000486,0.000333,0.000462,0.000685,0.001136,0.000794,0.000625,0.000436,0.000303,0.000270,0.000259,0.000289,0.000208,0.000224,0.000249,0.000271,0.000200,0.000240,0.000298,0.000226,0.000198,0.000188,0.000200,0.000259,0.000198,0.000169,0.000155,0.000144,0.000123,0.000120,0.000118,0.000112,0.000108,0.000105,0.000096,0.000091,0.000090,0.000093,0.000089,0.000093,0.000094,0.000095,0.000101,0.000112,0.000120,0.000126,0.000134,0.000142,0.000149,0.000170,0.000190,0.000212,0.000246,0.000289,0.000286,0.000269,0.000279,0.000310,0.000352,0.000355,0.000341,0.000361,0.000376,0.000373,0.000385,0.000427,0.000475,0.000539,0.000655,0.000838,0.001061,0.001284,0.001429,0.001364,0.001171,0.001020
giBClar71 ftgen 0,0,4096,10,0.951349,0.052635,0.166289,0.036346,0.080225,0.105328,0.019032,0.014538,0.003453,0.003349,0.001065,0.003529,0.004876,0.003334,0.003537,0.009903,0.004407,0.002506,0.002863,0.005317,0.004116,0.003426,0.001538,0.001829,0.001351,0.001942,0.001728,0.001103,0.000733,0.000413,0.000643,0.000468,0.000336,0.000631,0.000868,0.000470,0.000257,0.000240,0.000210,0.000190,0.000182,0.000170,0.000178,0.000178
giBClar77 ftgen 0,0,4096,10,0.679870,0.126072,0.031529,0.103885,0.017231,0.001781,0.005132,0.000787,0.003992,0.001819,0.002500,0.002660,0.001298,0.001834,0.001238,0.004273,0.001518,0.000670,0.000588,0.000395,0.000786,0.000400,0.000399,0.000471,0.000235,0.000212,0.000208,0.000169,0.000163,0.000146,0.000134
giwavemapBClar	ftgen	0,0,128,-27, 0,0, 35,0, 41,1, 47,2, 53,3,  59,4,  65,5,  71,6,  77,7, 127,7
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
gitabs4morfBClar	ftgen	0,0,8,-2,giBClar35,giBClar41,giBClar47,giBClar53,giBClar59,giBClar65,giBClar71,giBClar77

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;  CONTRA-BASS CLARINET
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
giCBClar26 ftgen 0,0,4096,10,0.100160,0.005519,0.631940,0.013046,0.749042,0.308868,0.475605,0.152792,0.074315,0.238927,0.152260,0.251283,0.030787,0.052465,0.032473,0.121972,0.064172,0.090564,0.043994,0.091868,0.039563,0.058622,0.024531,0.023127,0.026665,0.067522,0.081377,0.057914,0.066176,0.036134,0.026135,0.021056,0.038011,0.036534,0.058393,0.040915,0.050051,0.038446,0.034166,0.021341,0.014481,0.015708,0.025527,0.026622,0.033577,0.027355,0.034434,0.022920,0.016354,0.010905,0.011160,0.015075,0.019871,0.017505,0.013189,0.011442,0.008511,0.007974,0.006368,0.005988,0.005976,0.005922,0.006590,0.008199,0.006566,0.005254,0.004955,0.005576,0.005463,0.005101,0.003955,0.003622,0.004027,0.003772,0.003504,0.002848,0.002183,0.002075,0.002143,0.002014,0.001907,0.001850,0.001736,0.001543,0.001318,0.001180,0.001107,0.001066,0.001169,0.001372,0.001533,0.001667,0.001738,0.001655,0.001604,0.001603,0.001571,0.001575,0.001638,0.001696
giCBClar32 ftgen 0,0,4096,10,0.227476,0.006718,0.707706,0.018101,0.539432,0.018848,0.590242,0.029143,0.512926,0.035712,0.324304,0.035306,0.035964,0.050992,0.096916,0.025035,0.098203,0.072427,0.068155,0.060324,0.042818,0.074538,0.049430,0.100999,0.052956,0.109337,0.053778,0.108791,0.040535,0.041998,0.050107,0.102568,0.075823,0.121836,0.062713,0.047451,0.042146,0.061836,0.063525,0.079775,0.056177,0.039271,0.021422,0.017934,0.022472,0.016758,0.023407,0.025034,0.018765,0.012566,0.009566,0.008232,0.011234,0.015948,0.018924,0.020397,0.016720,0.016224,0.010210,0.006760,0.006525,0.006464,0.006410,0.007832,0.010929,0.013172,0.010412,0.008153,0.005887,0.004927,0.005543,0.006358,0.006415,0.006246,0.004977,0.004037,0.003084,0.002646,0.002504,0.002716,0.003253,0.003484,0.003416,0.003566,0.003392,0.002924,0.002750,0.002979,0.003398,0.003635,0.003855,0.004032,0.004285,0.004278,0.003688,0.003182,0.002942,0.003043,0.003240,0.003317
giCBClar38 ftgen 0,0,4096,10,0.805943,0.003127,0.607438,0.006915,0.078379,0.025071,0.319458,0.040967,0.418440,0.096874,0.067519,0.066830,0.181701,0.148461,0.024736,0.047734,0.027229,0.065092,0.020252,0.015890,0.047795,0.096969,0.049469,0.024097,0.032227,0.032247,0.057763,0.064995,0.031760,0.023574,0.021449,0.017946,0.015989,0.010329,0.017096,0.025053,0.020021,0.014542,0.009659,0.010282,0.011754,0.016404,0.013970,0.019292,0.012226,0.007260,0.007191,0.010064,0.007246,0.007400,0.007562,0.005179,0.005520,0.005811,0.004710,0.005570,0.007523,0.007671,0.005694,0.004881,0.005241,0.004991,0.005944,0.006659,0.006213,0.004986,0.004006,0.003617,0.003290,0.003479,0.004050,0.003911,0.003373,0.003294,0.003284,0.002858,0.002674,0.003290,0.003986,0.003982,0.003503,0.003424,0.003640,0.003903,0.004267,0.004774,0.005048,0.005020,0.005284,0.005837,0.006116,0.006124,0.006474,0.007329,0.008198,0.008721,0.009014,0.008920,0.008202,0.007419
giCBClar44 ftgen 0,0,4096,10,0.715187,0.010393,0.137973,0.010188,0.404486,0.073659,0.420943,0.145565,0.080881,0.104506,0.227785,0.021310,0.035316,0.052724,0.023335,0.014334,0.087911,0.036461,0.047658,0.016909,0.047453,0.017513,0.031591,0.010028,0.009677,0.014384,0.012660,0.031094,0.010732,0.009677,0.005632,0.007197,0.005202,0.005881,0.004438,0.005851,0.003283,0.002870,0.001732,0.001824,0.003100,0.002099,0.002084,0.002567,0.003519,0.003856,0.003017,0.003288,0.003518,0.003481,0.002717,0.002212,0.002009,0.002374,0.002508,0.003004,0.002356,0.001681,0.001376,0.001435,0.001604,0.001881,0.001924,0.001783,0.002097,0.002582,0.002971,0.002922,0.002735,0.002884,0.003498,0.003726,0.003454,0.003486,0.003620,0.003356,0.003457,0.003775,0.003730,0.003481,0.003126,0.002660,0.002244,0.001883,0.001625,0.001518,0.001533,0.001594,0.001565,0.001529,0.001485,0.001598,0.001965,0.002295,0.002394,0.002424,0.002401,0.002320,0.002329,0.002436
giCBClar50 ftgen 0,0,4096,10,0.880714,0.104962,0.497883,0.045337,0.172861,0.109234,0.166844,0.037601,0.179775,0.048578,0.136813,0.079191,0.068937,0.019908,0.087293,0.031265,0.010402,0.048393,0.020759,0.005769,0.015444,0.004339,0.006113,0.010598,0.009591,0.007441,0.002840,0.003349,0.003193,0.003806,0.004954,0.003108,0.003744,0.003254,0.003682,0.002736,0.002830,0.004080,0.005132,0.004023,0.004801,0.004386,0.003962,0.002657,0.003137,0.003478,0.004208,0.004600,0.004272,0.004501,0.004804,0.004328,0.003739,0.003495,0.003378,0.002513,0.002268,0.002182,0.002140,0.001833,0.001900,0.001666,0.001525,0.001441,0.001541,0.001518,0.001571,0.001664,0.001746,0.001600,0.001474,0.001527,0.001644,0.001577,0.001450,0.001382,0.001479,0.001646,0.001713,0.001652,0.001720,0.001859,0.001891,0.001654,0.001420,0.001306,0.001228,0.001173,0.001188,0.001247,0.001299,0.001317,0.001264,0.001186,0.001091,0.000947,0.000797,0.000685,0.000610,0.000547
giCBClar54 ftgen 0,0,4096,10,0.889990,0.001348,0.087695,0.023926,0.066262,0.023447,0.075142,0.026596,0.020409,0.052699,0.027246,0.016811,0.017828,0.004566,0.005199,0.010830,0.003227,0.005838,0.001883,0.001580,0.004878,0.001870,0.000924,0.001648,0.002681,0.001616,0.003610,0.002587,0.002221,0.002332,0.001110,0.001616,0.002062,0.001241,0.000899,0.001174,0.001196,0.001105,0.001254,0.001253,0.001237,0.001093,0.001281,0.001260,0.001266,0.001255,0.001194,0.000995,0.001213,0.000908,0.000857,0.000902,0.000863,0.001171,0.001146,0.001074,0.000908,0.000908,0.000752,0.000618,0.000456,0.000395,0.000445,0.000503,0.000434,0.000353,0.000347,0.000373,0.000416,0.000392,0.000334,0.000271,0.000275,0.000314,0.000314,0.000317,0.000280,0.000275,0.000289,0.000253,0.000221,0.000203,0.000194,0.000194,0.000208,0.000221,0.000212,0.000185,0.000172,0.000176,0.000173,0.000178,0.000175,0.000159,0.000152,0.000150,0.000135,0.000120,0.000115,0.000119
giwavemapCBClar	ftgen	0,0,128,-27, 0,0, 26,0, 32,1, 38,2, 44,3,  50,4,  54,5,  127,5
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
gitabs4morfCBClar	ftgen	0,0,8,-2,giCBClar26,giCBClar32,giCBClar38,giCBClar44,giCBClar50,giCBClar54,giCBClar54,giCBClar54

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;  OBOE
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
gioboe59 ftgen 0,0,4096,10,0.239013,0.078927,0.241030,0.206347,0.832266,0.054540,0.013821,0.007450,0.022905,0.021737,0.018123,0.013105,0.002361,0.001433,0.003509,0.002589,0.001326,0.000743,0.000990,0.000868,0.000863,0.000994,0.000406,0.000288,0.000288
gioboe65 ftgen 0,0,4096,10,0.199317,0.508088,0.859044,0.346880,0.121336,0.005269,0.071954,0.035188,0.012195,0.010362,0.001516,0.002397,0.004325,0.002943,0.008168,0.003519,0.002074,0.001366,0.001019,0.000715,0.000788,0.000757,0.001403,0.001108,0.001108
gioboe73 ftgen 0,0,4096,10,0.297865,0.916220,0.218345,0.030903,0.016039,0.045984,0.003571,0.006255,0.007310,0.003701,0.001306,0.001355,0.000361,0.001108,0.001552,0.000991,0.000588,0.000780,0.000678,0.001103,0.000615,0.000264,0.000310,0.000464,0.000464
gioboe81 ftgen 0,0,4096,10,0.875554,0.822621,0.094665,0.308960,0.046707,0.031827,0.002702,0.002222,0.009030,0.009257,0.007814,0.000781,0.002099,0.001154,0.002638,0.000756,0.000750,0.001290,0.000476,0.001285,0.000627,0.000379,0.000594,0.000379,0.000379
gioboe89 ftgen 0,0,4096,10,0.965505,0.344315,0.033044,0.068398,0.013147,0.008580,0.003609,0.001848,0.001060,0.001429,0.001832,0.001218,0.000703,0.000642,0.000646,0.000867,0.000550,0.000567,0.001386,0.001239,0.001416,0.001354,0.001710,0.003111,0.003111
giwavemapOboe	ftgen	0,0,128,-27, 0,0, 59,0,  65,1,  73,2,  81,3,  89,4,  127,4
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
gitabs4morfOboe	ftgen	0,0,8,-2,gioboe59,gioboe65,gioboe73,gioboe81,gioboe89,gioboe89,gioboe89,gioboe89

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; BASSOON
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
gibassoon34 ftgen 0,0,4096,10,0.213868,0.268493,0.244166,0.230801,0.105833,0.308087,0.556920,0.478956,0.523357,0.900665,0.213470,0.229596,0.031221,0.040117,0.067113,0.060158,0.030778,0.061028,0.143814,0.063668,0.126426,0.055009,0.049138,0.085854,0.113027,0.111464,0.088765,0.037342,0.050990,0.035579,0.040460,0.032219,0.027305,0.034141,0.019655,0.009315,0.008270,0.006748,0.006472,0.007088,0.008133,0.007046,0.007850,0.005791,0.006273,0.006847,0.007249,0.009398,0.010309,0.010418,0.010247,0.010333,0.009562,0.008180,0.009576,0.009469,0.008529,0.008844,0.008053,0.007565,0.008026,0.007284,0.007299,0.007423,0.008280,0.008374,0.008239,0.008512,0.009431,0.010246,0.010350,0.009381,0.008652,0.008150,0.007888,0.007951,0.008166,0.008210,0.007921,0.007548,0.007147,0.006991,0.006978,0.006527,0.005617,0.004781,0.004549,0.004707,0.004803,0.004640,0.004303,0.003866,0.003524,0.003348,0.003108,0.002766,0.002439,0.002278,0.002406,0.002733
gibassoon38 ftgen 0,0,4096,10,0.242897,0.242266,0.380380,0.667003,0.720921,0.402509,0.422424,0.475496,0.823674,0.135651,0.169435,0.062761,0.017494,0.023826,0.049210,0.074371,0.035978,0.086397,0.160820,0.122072,0.061609,0.020374,0.023031,0.018479,0.013838,0.015511,0.012693,0.005626,0.007015,0.007590,0.008854,0.004833,0.006678,0.008155,0.006694,0.007708,0.007823,0.004336,0.003679,0.003698,0.005616,0.004049,0.003555,0.002815,0.002166,0.001778,0.002195,0.002446,0.003427,0.003600,0.005046,0.005043,0.003980,0.002591,0.002168,0.002644,0.003363,0.004603,0.004571,0.005024,0.004653,0.004659,0.004447,0.004128,0.004325,0.004464,0.004393,0.004144,0.004285,0.004442,0.004203,0.003640,0.003229,0.003115,0.003017,0.002902,0.002799,0.002839,0.003045,0.003262,0.003391,0.003250,0.003008,0.002726,0.002506,0.002370,0.002215,0.002130,0.002058,0.001832,0.001574,0.001339,0.001133,0.001005,0.000924,0.000860,0.000849,0.000896,0.000994,0.001115
gibassoon43 ftgen 0,0,4096,10,0.101647,0.135289,0.245027,0.142720,0.728360,0.361154,0.030730,0.079698,0.011579,0.074893,0.094091,0.028910,0.084641,0.058767,0.035341,0.016688,0.006781,0.020365,0.020545,0.008172,0.007968,0.017127,0.016825,0.009248,0.003609,0.002361,0.002361,0.001409,0.001208,0.001278,0.001752,0.002711,0.002221,0.001898,0.001255,0.001150,0.001935,0.001759,0.001661,0.001219,0.001111,0.001527,0.001167,0.001290,0.001366,0.001058,0.000935,0.000898,0.000937,0.001254,0.001464,0.001695,0.002012,0.002054,0.001872,0.001370,0.001074,0.000988,0.001009,0.000959,0.000905,0.000957,0.000885,0.000825,0.000811,0.000776,0.000727,0.000696,0.000758,0.000768,0.000667,0.000604,0.000548,0.000525,0.000508,0.000485,0.000445,0.000380,0.000330,0.000307,0.000329,0.000366,0.000367,0.000334,0.000291,0.000259,0.000247,0.000265,0.000309,0.000378,0.000436,0.000425,0.000390,0.000375,0.000353,0.000328,0.000312,0.000292,0.000273,0.000269
gibassoon50 ftgen 0,0,4096,10,0.147763,0.340255,0.879202,0.404023,0.259274,0.130887,0.095096,0.039056,0.091976,0.009828,0.004879,0.013408,0.016090,0.015931,0.012402,0.003430,0.006421,0.004323,0.002018,0.001465,0.003012,0.001397,0.002446,0.002683,0.002425,0.004828,0.002422,0.002479,0.002086,0.002351,0.002269,0.002034,0.001708,0.001324,0.001927,0.002764,0.003997,0.003514,0.002736,0.002327,0.002054,0.001842,0.001577,0.002009,0.002098,0.001411,0.001019,0.000816,0.000899,0.000893,0.001005,0.001296,0.000987,0.000657,0.000539,0.000400,0.000313,0.000284,0.000331,0.000417,0.000479,0.000633,0.000798,0.000893,0.001067,0.001242,0.001260,0.001282,0.001218,0.001023,0.000887,0.000830,0.000746,0.000637,0.000553,0.000534,0.000537,0.000506,0.000482,0.000477,0.000490,0.000515,0.000532,0.000508,0.000473,0.000416,0.000336,0.000271,0.000229,0.000193,0.000170,0.000169,0.000185,0.000197,0.000205,0.000223,0.000247,0.000255,0.000248,0.000249
gibassoon56 ftgen 0,0,4096,10,0.258143,0.954570,0.553228,0.188964,0.031203,0.252375,0.179421,0.053961,0.022121,0.016058,0.006372,0.002854,0.002507,0.006348,0.006626,0.008348,0.005125,0.001342,0.001956,0.002664,0.005721,0.003529,0.004933,0.002543,0.003026,0.003332,0.001828,0.003024,0.002223,0.001464,0.001354,0.001310,0.000827,0.000966,0.001111,0.001685,0.001048,0.000806,0.000660,0.000445,0.000368,0.000436,0.000578,0.000518,0.000372,0.000346,0.000342,0.000340,0.000259,0.000272,0.000318,0.000395,0.000481,0.000454,0.000428,0.000391,0.000351,0.000302,0.000261,0.000245,0.000253,0.000249,0.000223,0.000228,0.000244,0.000217,0.000203,0.000222,0.000250,0.000271,0.000235,0.000202,0.000179,0.000160,0.000151,0.000151,0.000144,0.000126,0.000116,0.000123,0.000134,0.000140,0.000142,0.000142,0.000130,0.000117,0.000109,0.000109,0.000110,0.000111,0.000122,0.000129,0.000124,0.000116,0.000115,0.000113,0.000104,0.000092,0.000080,0.000071
gibassoon62 ftgen 0,0,4096,10,0.802206,0.854305,0.242064,0.037491,0.024258,0.012991,0.003920,0.008373,0.001787,0.001801,0.003935,0.008957,0.009944,0.004249,0.003799,0.003374,0.001734,0.004753,0.008252,0.004132,0.002330,0.001700,0.001925,0.001098,0.001154,0.001943,0.000954,0.000487,0.000432,0.000605,0.000812,0.000806,0.001001,0.001178,0.001065,0.001137,0.000877,0.000630,0.000538,0.000499,0.000605,0.000532,0.000532,0.000387,0.000288,0.000253,0.000313,0.000347,0.000292,0.000225,0.000167,0.000144,0.000121,0.000116,0.000110,0.000110,0.000119,0.000111,0.000106,0.000111,0.000115,0.000114,0.000101,0.000094,0.000100,0.000102,0.000097,0.000088,0.000079,0.000070,0.000064,0.000059,0.000054,0.000053,0.000053
gibassoon67 ftgen 0,0,4096,10,0.262539,0.973041,0.138354,0.113396,0.058172,0.030635,0.005565,0.001686,0.003483,0.001977,0.003774,0.002477,0.002439,0.001226,0.002781,0.002527,0.001020,0.000611,0.000658,0.000715,0.000728,0.000531,0.000442,0.000238,0.000414,0.000325,0.000560,0.000689,0.000445,0.000306,0.000301,0.000305,0.000296,0.000325,0.000252,0.000218,0.000248,0.000193,0.000174,0.000179,0.000143,0.000140,0.000140,0.000104,0.000096,0.000116,0.000128,0.000137,0.000144,0.000113,0.000112,0.000119,0.000140,0.000116,0.000107,0.000102
giwavemapBassoon	ftgen	0,0,128,-27, 0,0, 34,0,  38,1,  43,2,  50,3,   56,4,  62,5,  67,6, 127,6
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
gitabs4morfBassoon	ftgen	0,0,8,-2,gibassoon34,gibassoon38,gibassoon43,gibassoon50,gibassoon56,gibassoon62,gibassoon67,gibassoon67

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; CONTRA-BASSOON
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
giCBassoon22 ftgen 0,0,4096,10,0.497216,0.592986,0.588338,0.378063,0.343716,0.540022,0.620921,0.613540,0.848864,0.535558,0.632297,0.584663,0.443376,0.419439,0.291262,0.249631,0.256447,0.182209,0.062888,0.160047,0.156792,0.115884,0.107766,0.130415,0.183253,0.145108,0.156478,0.170472,0.185752,0.181506,0.155042,0.154256,0.167703,0.145571,0.172382,0.169936,0.191248,0.207520,0.161789,0.114105,0.096757,0.068310,0.056357,0.068193,0.048257,0.046235,0.041903,0.032361,0.023090,0.012851,0.008788,0.010598,0.010151,0.010905,0.009426,0.009439,0.012674,0.016976,0.019287,0.017791,0.014995,0.015280,0.014007,0.012293,0.013920,0.015130,0.017138,0.020001,0.026003,0.029085,0.026391,0.021776,0.018388,0.016337,0.014700,0.015521,0.019019,0.022414,0.024168,0.024006,0.023403,0.022377,0.020534,0.018428,0.016165,0.013675,0.011929,0.011056,0.010352,0.010070,0.009561,0.009378,0.008855,0.008393,0.008147,0.008048,0.008099,0.007480,0.006551,0.005481
giCBassoon26 ftgen 0,0,4096,10,0.076357,0.137793,0.174617,0.207802,0.302523,0.705801,0.162577,0.073808,0.224559,0.050465,0.066110,0.181682,0.062409,0.052317,0.037698,0.029936,0.042341,0.053436,0.135414,0.059248,0.025689,0.033567,0.051201,0.029910,0.028697,0.052991,0.059280,0.029742,0.027742,0.023801,0.013878,0.006197,0.004814,0.005139,0.007873,0.007104,0.009903,0.007952,0.008234,0.005783,0.006682,0.007272,0.006943,0.007674,0.007728,0.006326,0.005179,0.004259,0.004142,0.003705,0.002547,0.001785,0.002073,0.002887,0.004184,0.004075,0.004174,0.005101,0.004993,0.004189,0.003170,0.002599,0.002866,0.003689,0.005272,0.006515,0.007262,0.006420,0.005939,0.005247,0.004710,0.004619,0.004018,0.003371,0.002611,0.001906,0.001540,0.001341,0.001128,0.001025,0.001114,0.001151,0.001224,0.001403,0.001564,0.001709,0.001914,0.002097,0.002148,0.002190,0.002192,0.002124,0.002190,0.002485,0.002819,0.002892,0.002769,0.002559,0.002374,0.002161
giCBassoon38 ftgen 0,0,4096,10,0.240531,0.304670,0.289169,0.727482,0.578083,0.169149,0.057305,0.193624,0.167977,0.206006,0.182632,0.057408,0.103574,0.044785,0.084239,0.068303,0.030771,0.133375,0.096231,0.037016,0.046566,0.020770,0.020264,0.015211,0.029647,0.018603,0.027940,0.062861,0.033828,0.015594,0.016305,0.025478,0.034356,0.038642,0.028451,0.026747,0.014914,0.016727,0.015524,0.013236,0.014264,0.013651,0.014838,0.016490,0.021208,0.017660,0.013009,0.014867,0.013013,0.010426,0.009144,0.009462,0.009367,0.009624,0.008079,0.007399,0.009012,0.009384,0.008661,0.009051,0.009394,0.010578,0.011610,0.012184,0.010442,0.009130,0.008795,0.008468,0.010039,0.011205,0.011438,0.011489,0.010526,0.008902,0.007391,0.006198,0.005970,0.005264,0.004331,0.003874,0.003514,0.003418,0.003518,0.003409,0.003150,0.003023,0.003047,0.003199,0.003624,0.003999,0.003839,0.003629,0.003712,0.003872,0.003974,0.003836,0.003596,0.003353,0.003177,0.003070
giCBassoon50 ftgen 0,0,4096,10,0.200451,0.511764,0.153876,0.491651,0.722151,0.174751,0.087283,0.068341,0.008971,0.040014,0.041083,0.015335,0.047809,0.037606,0.038259,0.020124,0.022425,0.024747,0.016480,0.008528,0.006892,0.004131,0.005947,0.005585,0.006842,0.008448,0.015885,0.005820,0.002834,0.004626,0.003886,0.003621,0.004837,0.005276,0.002715,0.002900,0.003817,0.005081,0.005598,0.006033,0.006164,0.004260,0.003944,0.004776,0.004223,0.004351,0.004769,0.004836,0.004959,0.005380,0.004538,0.003969,0.003860,0.003536,0.003521,0.003397,0.002823,0.002162,0.002001,0.001663,0.001430,0.001505,0.001566,0.001468,0.001406,0.001439,0.001225,0.001095,0.001134,0.001316,0.001630,0.001839,0.001964,0.001940,0.001824,0.001694,0.001617,0.001526,0.001348,0.001116,0.000972,0.000973,0.001011,0.001015,0.000944,0.000785,0.000650,0.000609,0.000675,0.000782,0.000839,0.000818,0.000755,0.000661,0.000566,0.000498,0.000471,0.000478,0.000486,0.000479
giwavemapCBassoon	ftgen	0,0,128,-27, 0,0, 22,0,  26,1,  38,2,  50,3,  127,3
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
gitabs4morfCBassoon	ftgen	0,0,4,-2,giCBassoon22,giCBassoon26,giCBassoon38,giCBassoon50


;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; VIOLIN
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
giviolin55 ftgen 0,0,4096,10,0.081672,0.785854,0.808302,0.221447,0.136644,0.103608,0.051154,0.040070,0.071067,0.358903,0.053101,0.090036,0.033729,0.068969,0.060398,0.147336,0.060769,0.055245,0.044695,0.022179,0.058528,0.083706,0.029581,0.013173;,0.013173
giviolin67 ftgen 0,0,4096,10,0.344116,0.095361,0.038223,0.090317,0.145798,0.049369,0.076997,0.057555,0.016248,0.036189,0.014161,0.008738,0.010238,0.009625,0.005588,0.004762,0.002635,0.002162,0.002822,0.002144,0.001687,0.001955,0.001870,0.001011;,0.001011
giviolin79 ftgen 0,0,4096,10,0.403041,0.281156,0.259204,0.392900,0.236559,0.108769,0.117288,0.063588,0.039483,0.018245,0.012717,0.020183,0.008506,0.017915,0.008925,0.008575,0.006947,0.008142,0.005487,0.005970,0.004402,0.003161,0.002361,0.001942;,0.001942
giviolin91 ftgen 0,0,4096,10,0.231708,0.906742,0.215622,0.092709,0.057338,0.038101,0.030758,0.023439,0.009905,0.001298,0.002108,0.000516,0.000499,0.000123,0.000642,0.000732,0.004757,0.004547,0.017582,0.033035,0.098559,0.013616,0.017674,0.019601;,0.019601
giwavemapViolin	ftgen	0,0,128,-27, 0,0, 55,0,  67,1,  79,2,  91,3,  127,3
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
gitabs4morfViolin	ftgen	0,0,4,-2,giviolin55,giviolin67,giviolin79,giviolin91	;

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; CELLO
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
gicello36 ftgen 0,0,4096,10,0.022943,0.412962,0.548431,0.578468,0.092241,0.116378,0.052974,0.029585,0.093977,0.119660,0.064074,0.051807,0.015094,0.094184,0.015488,0.006640,0.007091,0.011557,0.043467,0.023330,0.018118,0.026921,0.010285,0.007653,0.015306,0.023175,0.013051,0.004840,0.005658,0.010814,0.014921,0.026066,0.028334,0.015227,0.010740,0.008966,0.009389,0.012547,0.011544,0.009900,0.012403,0.013093,0.008259,0.007148,0.006129,0.004932,0.004332,0.003397,0.002497,0.002241,0.002187,0.002227,0.001634,0.001186,0.001119,0.001131,0.001276,0.000970,0.001101,0.001647,0.001936,0.001632,0.001190,0.000891,0.000883,0.000906,0.000894,0.000855,0.000768,0.000721,0.000750,0.000900,0.000965,0.000844,0.000765,0.000643,0.000535,0.000464,0.000409,0.000403,0.000489,0.000642,0.000773,0.000819,0.000871,0.000930,0.000979,0.000950,0.000781,0.000649,0.000620,0.000653,0.000661,0.000706,0.000805,0.000856,0.000832,0.000793,0.000750,0.000702
gicello48 ftgen 0,0,4096,10,0.171752,0.537455,0.217980,0.172188,0.552902,0.583964,0.452897,0.095360,0.059208,0.033024,0.126570,0.028481,0.067671,0.029869,0.055112,0.056284,0.025151,0.038689,0.027323,0.027935,0.070762,0.023514,0.016984,0.013118,0.008692,0.004591,0.002235,0.003399,0.002568,0.002224,0.002366,0.002892,0.004660,0.003562,0.002923,0.002328,0.002327,0.001705,0.001566,0.002356,0.002199,0.003381,0.006360,0.007320,0.004930,0.002809,0.002686,0.002156,0.001566,0.001273,0.001192,0.001380,0.001683,0.002133,0.003160,0.002820,0.002065,0.002097,0.002013,0.001649,0.001366,0.001053,0.000819,0.000730,0.000775,0.000937,0.001097,0.001063,0.000917,0.000815,0.000792,0.000857,0.001010,0.001203,0.001372,0.001408,0.001295,0.001173,0.001062,0.000942,0.000825,0.000761,0.000774,0.000854,0.000932,0.000968,0.000987,0.001022,0.001018,0.000944,0.000882,0.000829,0.000779,0.000734,0.000693,0.000655,0.000602,0.000547,0.000529,0.000548
gicello60 ftgen 0,0,4096,10,0.762584,0.124687,0.088950,0.091324,0.058688,0.034069,0.038828,0.065420,0.062254,0.058503,0.033332,0.014105,0.011585,0.004135,0.005176,0.004496,0.006698,0.008491,0.007044,0.003450,0.004771,0.016317,0.009897,0.007180,0.004105,0.002477,0.003995,0.002992,0.002346,0.002233,0.002558,0.002135,0.002301,0.001713,0.001191,0.001850,0.004203,0.001813,0.000969,0.001090,0.000636,0.001237,0.000844,0.001107,0.000880,0.000791,0.000640,0.000894,0.000554,0.000727,0.001041,0.001046,0.001079,0.000456,0.000410,0.000442,0.000431,0.000437,0.000427,0.000389,0.000350,0.000284,0.000269,0.000260,0.000210,0.000253,0.000328,0.000296,0.000290,0.000419,0.000452,0.000328,0.000215,0.000229,0.000333,0.000275,0.000208,0.000204,0.000163,0.000283,0.000253,0.000264,0.000178,0.000208,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
gicello72 ftgen 0,0,4096,10,0.601382,0.263076,0.197963,0.244245,0.217992,0.114034,0.025768,0.041518,0.011954,0.006391,0.012239,0.017818,0.016819,0.012798,0.007576,0.007376,0.002891,0.021377,0.005261,0.004421,0.009226,0.004333,0.001808,0.003989,0.002078,0.001344,0.001560,0.001240,0.001586,0.001307,0.000519,0.000761,0.001009,0.000632,0.000412,0.000414,0.000361,0.000406,0.000544,0.000741,0.000281,0.000164,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giwavemapCello	ftgen	0,0,128,-27, 0,0, 36,0,  48,1,  60,2,  72,3,  127,3
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
gitabs4morfCello	ftgen	0,0,4,-2,gicello36,gicello48,gicello60,gicello72	;

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; PICCOLO
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
gipiccolo74 ftgen 0,0,4096,10,0.898113,0.247693,0.060222,0.127742,0.034019,0.044738,0.029980,0.018041,0.008219,0.009819,0.015719,0.009423,0.020117,0.011802,0.007226,0.003198,0.001597,0.002062,0.001590,0.001420,0.001087,0.000581,0.000370,0.000393,0.000393
gipiccolo80 ftgen 0,0,4096,10,0.837581,0.024769,0.144022,0.109176,0.031512,0.026122,0.004565,0.008379,0.004995,0.002685,0.003489,0.002674,0.002743,0.001129,0.000485,0.000367,0.000701,0.001563,0.001166,0.000647,0.000808,0.000622,0.000358,0.000227,0.000227
gipiccolo86 ftgen 0,0,4096,10,0.730803,0.323120,0.277720,0.044844,0.009400,0.022785,0.004602,0.005762,0.006400,0.002483,0.001490,0.002354,0.004728,0.002669,0.003175,0.001177,0.000761,0.000509,0.000449,0.000703,0.001078,0.002471,0.003905,0.004114,0.004114
gipiccolo92 ftgen 0,0,4096,10,0.883567,0.117309,0.144273,0.012664,0.016747,0.002921,0.002043,0.001429,0.002107,0.008510,0.001611,0.002330,0.000075,0.000381,0.000943,0.002268,0.001748,0.001626,0.000882,0.002765,0.003187,0.004911,0.008342,0.017209,0.017209
gipiccolo98 ftgen 0,0,4096,10,0.922186,0.144948,0.042529,0.011837,0.006901,0.000900,0.001625,0.000686,0.000507 ; ,0.000305,0.000305,0.000730,0.000922,0.001408,0.001499,0.005116,0.021056,0.151393,0.034986,0.124701,0.024182,0.008037,0.002664,0.001934,0.001934
gipiccolo106 ftgen 0,0,4096,10,0.501042,0.019695,0.008976,0.003473,0.006493,0.001700,0.002765,0.003224,0.006276 ; ,0.025062,0.036907,0.005386,0.046443,0.013720,0.005391,0.007819,0.019832,0.008441,0.006927,0.007528,0.018483,0.042516,0.057060,0.083779,0.083779
giwavemapPiccolo	ftgen	0,0,128,-27, 0,0, 74,0,  80,1,  86,2,  92,3,  98,4, 106,5, 127,5
gitabs4morfPiccolo	ftgen	0,0,8,-2,gipiccolo74,gipiccolo80,gipiccolo86,gipiccolo92,gipiccolo98,gipiccolo106,gipiccolo106,gipiccolo106	;


;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; FLUTE
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
giflute59 ftgen 0,0,4096,10,0.876155,0.188136,0.766537,0.278649,0.134428,0.143342,0.201465,0.068043,0.011284,0.021093,0.021494,0.010577,0.016431,0.007352,0.006864,0.007433,0.006500,0.004716,0.004282,0.002545,0.002718,0.002045,0.001768,0.002409,0.002409
giflute65 ftgen 0,0,4096,10,0.799971,0.564039,0.327027,0.076562,0.324116,0.049951,0.035116,0.048856,0.017988,0.004316,0.007909,0.004093,0.003013,0.003329,0.001707,0.001995,0.001913,0.000937,0.001543,0.001868,0.001289,0.001463,0.001865,0.001076,0.001076
giflute71 ftgen 0,0,4096,10,0.902388,0.107786,0.423495,0.078015,0.066093,0.032990,0.012352,0.008687,0.005253,0.004091,0.001790,0.002202,0.000853,0.001228,0.000810,0.000828,0.000601,0.000593,0.000647,0.000906,0.000925,0.001111,0.001302,0.000899,0.000899
giflute77 ftgen 0,0,4096,10,0.925667,0.059839,0.214284,0.013980,0.026778,0.008733,0.019436,0.002640,0.004217,0.002126,0.003513,0.002455,0.001336,0.001508,0.001589,0.002155,0.002549,0.001951,0.001614,0.001076,0.001253,0.001138,0.001073,0.000990,0.000990
giflute83 ftgen 0,0,4096,10,0.865610,0.041090,0.054192,0.043068,0.022098,0.002450,0.005687,0.002093,0.005076,0.001357,0.003848,0.006820,0.002879,0.005038,0.002273,0.002877,0.001043,0.001188,0.000857,0.000726,0.000537,0.000320,0.000390,0.000666,0.000666
giflute89 ftgen 0,0,4096,10,0.907108,0.032221,0.007003,0.010577,0.004166,0.002274,0.001089,0.002739,0.002459,0.002194,0.001351,0.000570,0.000469,0.000388,0.000228,0.000180,0.000377,0.000470,0.000724,0.001478,0.002258,0.002625,0.006255,0.003183,0.003183
giflute95 ftgen 0,0,4096,10,0.927168,0.094811,0.014160,0.010743,0.004640,0.002540,0.000535,0.000356,0.000205,0.000147,0.000042,0.000032,0.000090,0.000201,0.000171,0.000595,0.000136,0.000338,0.000284,0.000244,0.001813,0.001310,0.002113,0.000510,0.000510
giflute98 ftgen 0,0,4096,10,0.793870,0.077609,0.047389,0.012277,0.005127,0.002760,0.002619,0.000390,0.000109,0.000105,0.000147,0.000425,0.000266,0.000201,0.000312,0.000210,0.001391,0.003570,0.001720,0.002746,0.001399,0.000749,0.000411,0.001156,0.001156
giwavemapFlute	ftgen	0,0,128,-27, 0,0, 59,0, 65,1, 71,2, 77,3, 83,4, 89,5, 95,6, 98,7, 127,7
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
gitabs4morfFlute	ftgen	0,0,8,-2,giflute59,giflute65,giflute71,giflute77,giflute83,giflute89,giflute95,giflute98

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; ALTO FLUTE
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
giAFlute55 ftgen 0,0,4096,10,0.821986,0.323726,0.027144,0.049562,0.045630,0.004837,0.008584,0.002449,0.002921,0.004780,0.006174,0.006496,0.009180,0.010020,0.008884,0.006397,0.007728,0.007543,0.005540,0.004643,0.004213,0.003464,0.002247,0.001529,0.001529
giAFlute61 ftgen 0,0,4096,10,0.629423,0.050378,0.078267,0.098147,0.002593,0.003473,0.002978,0.007847,0.002718,0.004264,0.004001,0.003129,0.002278,0.001767,0.001591,0.001198,0.000790,0.000910,0.000907,0.000909,0.000690,0.001006,0.000870,0.000801,0.000801
giAFlute67 ftgen 0,0,4096,10,0.734185,0.213440,0.086548,0.055143,0.004785,0.001811,0.011006,0.004212,0.001873,0.002130,0.001001,0.000376,0.000632,0.000823,0.000595,0.000764,0.000514,0.000403,0.000326,0.000317,0.000537,0.000523,0.000835,0.000743,0.000743
giAFlute76 ftgen 0,0,4096,10,0.868899,0.390848,0.052590,0.023839,0.033699,0.031143,0.013923,0.008881,0.003821,0.001797,0.003048,0.002506,0.002295,0.001878,0.001118,0.001109,0.001133,0.001732,0.002085,0.002020,0.001240,0.000963,0.000929,0.000456,0.000456
giwavemapAFlute	ftgen	0,0,128,-27, 0,0, 55,0, 61,1, 67,2, 76,3, 127,3
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
gitabs4morfAFlute	ftgen	0,0,4,-2,giAFlute55,giAFlute55,giAFlute55,giAFlute55

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; BASS FLUTE
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
giBFlute48 ftgen 0,0,4096,10,0.691967,0.034269,0.271945,0.033667,0.017446,0.011342,0.007238,0.006576,0.003027,0.003556,0.004425,0.004988,0.003990,0.005253,0.006140,0.003051,0.004437,0.003567,0.002838,0.001703,0.001528,0.001368,0.001703,0.001153,0.000827,0.001023,0.000899,0.000612,0.000827,0.000823,0.000948,0.001184,0.001201,0.001272,0.001032,0.001141,0.001128,0.000887,0.000790,0.000612,0.000565,0.000573,0.000586,0.000554,0.000483,0.000450,0.000404,0.000416,0.000392,0.000391,0.000327,0.000336,0.000370,0.000424,0.000460,0.000459,0.000456,0.000395,0.000319,0.000306,0.000283,0.000306,0.000338,0.000305,0.000288,0.000263,0.000247,0.000239,0.000245,0.000233,0.000190,0.000166,0.000161,0.000160,0.000150,0.000136,0.000130,0.000130,0.000126,0.000126,0.000128,0.000131,0.000131,0.000136,0.000138,0.000132,0.000122,0.000116,0.000119,0.000126,0.000122,0.000112,0.000109,0.000113,0.000118,0.000118,0.000118,0.000117,0.000116,0.000118
giBFlute54 ftgen 0,0,4096,10,0.633439,0.578363,0.200810,0.008032,0.068714,0.005615,0.005448,0.012421,0.009987,0.006289,0.004137,0.002738,0.001944,0.002935,0.003674,0.002567,0.002545,0.004116,0.003915,0.002935,0.002322,0.002647,0.003186,0.003370,0.003213,0.002193,0.001902,0.001629,0.001652,0.001274,0.001102,0.001205,0.001277,0.001134,0.001117,0.001286,0.001477,0.001607,0.002607,0.003270,0.002939,0.002558,0.001826,0.001324,0.001228,0.001070,0.001110,0.001120,0.001042,0.000924,0.000909,0.000880,0.000765,0.000674,0.000600,0.000491,0.000437,0.000441,0.000443,0.000452,0.000467,0.000527,0.000606,0.000571,0.000554,0.000518,0.000420,0.000363,0.000315,0.000275,0.000245,0.000221,0.000200,0.000202,0.000219,0.000211,0.000194,0.000187,0.000197,0.000197,0.000193,0.000201,0.000217,0.000223,0.000219,0.000213,0.000200,0.000175,0.000149,0.000131,0.000124,0.000120,0.000115,0.000111,0.000113,0.000117,0.000115,0.000107,0.000100,0.000098
giBFlute60 ftgen 0,0,4096,10,0.801592,0.068816,0.032303,0.012614,0.002660,0.014692,0.002493,0.006175,0.001826,0.001416,0.002607,0.001063,0.001542,0.001053,0.001293,0.001226,0.000781,0.001142,0.000975,0.000922,0.000693,0.000570,0.000538,0.000429,0.000587,0.000775,0.000855,0.001295,0.001190,0.000941,0.000912,0.000796,0.000662,0.000789,0.000828,0.000784,0.000614,0.000480,0.000455,0.000378,0.000334,0.000309,0.000351,0.000375,0.000427,0.000378,0.000293,0.000232,0.000224,0.000199,0.000150,0.000119,0.000100,0.000084,0.000084,0.000088,0.000085,0.000081,0.000076,0.000081,0.000080,0.000075,0.000071,0.000068,0.000063,0.000060,0.000064,0.000067,0.000065,0.000058,0.000055,0.000054,0.000054,0.000053,0.000052,0.000053,0.000053,0.000053,0.000052,0.000050,0.000049,0.000049,0.000049,0.000049,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giBFlute66 ftgen 0,0,4096,10,0.743019,0.068238,0.021487,0.010397,0.001744,0.013212,0.001676,0.005245,0.002049,0.001401,0.001686,0.001346,0.001288,0.000879,0.001087,0.000922,0.000878,0.000678,0.000904,0.000729,0.000481,0.000542,0.000525,0.000561,0.000481,0.000552,0.000745,0.001153,0.001211,0.001000,0.000706,0.000621,0.000613,0.000779,0.000764,0.000717,0.000619,0.000486,0.000448,0.000429,0.000341,0.000327,0.000331,0.000340,0.000340,0.000335,0.000288,0.000255,0.000233,0.000195,0.000173,0.000150,0.000127,0.000123,0.000119,0.000113,0.000111,0.000115,0.000116,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giBFlute72 ftgen 0,0,4096,10,0.741444,0.066744,0.018973,0.009713,0.002046,0.010742,0.001911,0.004984,0.002277,0.001308,0.001841,0.000932,0.001065,0.000889,0.001029,0.000970,0.000767,0.000708,0.000743,0.000629,0.000541,0.000457,0.000410,0.000534,0.000487,0.000489,0.000743,0.001263,0.001164,0.001062,0.000757,0.000529,0.000538,0.000606,0.000594,0.000583,0.000497,0.000463,0.000498,0.000433,0.000369,0.000363,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giBFlute76 ftgen 0,0,4096,10,0.745977,0.066489,0.014197,0.007352,0.002175,0.009766,0.002280,0.004362,0.001870,0.001375,0.001383,0.001328,0.001381,0.001194,0.001429,0.000949,0.000917,0.000802,0.000818,0.000932,0.000636,0.000646,0.000571,0.000575,0.000613,0.000679,0.000959,0.001343,0.001448,0.001365,0.001241,0.001091,0.001093,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giwavemapBFlute	ftgen	0,0,128,-27, 0,0, 48,0, 54,1, 60,2, 66,3,  72,4,  76,5,      127,5
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
gitabs4morfBFlute	ftgen	0,0,4,-2,giBFlute48,giBFlute54,giBFlute60,giBFlute66,giBFlute72,giBFlute76

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; AHH
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
giahh43 ftgen 0,0,4096,10,0.386674,0.073031,0.081855,0.018459,0.053239,0.061160,0.058957,0.045203,0.039489,0.065846,0.041424,0.012866,0.006504,0.005909,0.005469,0.003737,0.003814,0.002639,0.002638,0.003016,0.004285,0.006226,0.007688,0.008839,0.014596,0.028866,0.037921,0.022164,0.015744,0.007756,0.005050,0.007234,0.008132,0.006564,0.005699,0.007003,0.007011,0.005459,0.004080,0.003820,0.004403,0.004661,0.005385,0.007278,0.009647,0.010877,0.012884,0.014945,0.015339,0.012290,0.009204,0.008363,0.007093,0.005203,0.003328,0.002161,0.001538,0.001215,0.001037,0.001033,0.001172,0.001483,0.002127,0.002644,0.002412,0.001679,0.001068,0.000848,0.000972,0.001425,0.002263,0.003492,0.004427,0.004100,0.003201,0.002484,0.002255,0.002495,0.003139,0.004136,0.005259,0.005878,0.005432,0.004477,0.003617,0.002973,0.002606,0.002518,0.002611,0.002863,0.003395,0.004095,0.004529,0.004686,0.004927,0.005437,0.006092,0.006727,0.007073,0.006966
giahh49 ftgen 0,0,4096,10,0.600063,0.256340,0.126445,0.040717,0.097956,0.082383,0.135342,0.006369,0.002414,0.002312,0.001526,0.000552,0.000868,0.000435,0.000576,0.001145,0.001706,0.003688,0.013234,0.006626,0.006840,0.012971,0.003639,0.002955,0.001962,0.001988,0.000831,0.000533,0.000748,0.000490,0.000674,0.001431,0.002663,0.002680,0.002874,0.003227,0.001837,0.000874,0.000662,0.000901,0.001630,0.002139,0.001816,0.001233,0.000817,0.000658,0.000730,0.000864,0.001037,0.001616,0.002390,0.002487,0.002363,0.002429,0.002624,0.002971,0.002486,0.001530,0.000895,0.000669,0.000806,0.001085,0.001185,0.001002,0.000857,0.000900,0.001009,0.001198,0.001398,0.001306,0.001302,0.001562,0.001670,0.001440,0.001105,0.000872,0.000746,0.000748,0.000770,0.000788,0.000890,0.000973,0.000896,0.000716,0.000598,0.000536,0.000492,0.000469,0.000443,0.000384,0.000317,0.000262,0.000209,0.000162,0.000129,0.000110,0.000102,0.000099,0.000099,0.000096
giahh55 ftgen 0,0,4096,10,0.667225,0.194524,0.098683,0.096875,0.021209,0.006311,0.002978,0.001013,0.001249,0.001446,0.002393,0.004826,0.018741,0.012161,0.010480,0.005261,0.004569,0.001376,0.001132,0.003605,0.001846,0.002757,0.005346,0.004712,0.004806,0.002357,0.001109,0.001302,0.001860,0.001054,0.001120,0.001642,0.002240,0.004382,0.005473,0.003755,0.002444,0.002088,0.001822,0.000946,0.000790,0.001222,0.001653,0.001374,0.001401,0.002118,0.002061,0.001470,0.001198,0.001635,0.002387,0.002248,0.001327,0.000951,0.000884,0.000844,0.000805,0.000667,0.000669,0.000701,0.000591,0.000445,0.000367,0.000314,0.000272,0.000225,0.000179,0.000152,0.000164,0.000169,0.000151,0.000144,0.000137,0.000121,0.000115,0.000123,0.000125,0.000116,0.000102,0.000095,0.000102,0.000120,0.000135,0.000132,0.000117,0.000100,0.000084,0.000074,0.000072,0.000075,0.000077,0.000079,0.000083,0.000083,0.000081,0.000082,0.000084,0.000081,0.000074,0.000063
giahh61 ftgen 0,0,4096,10,0.701578,0.444091,0.390732,0.103519,0.007759,0.002497,0.001883,0.001103,0.001729,0.001889,0.001679,0.002455,0.000872,0.000433,0.001071,0.001382,0.002270,0.001077,0.000930,0.000940,0.001143,0.001633,0.001901,0.001446,0.002619,0.003724,0.002339,0.001969,0.001199,0.000674,0.001015,0.001321,0.001504,0.001378,0.000778,0.000682,0.001100,0.001312,0.001438,0.001513,0.000928,0.000466,0.000374,0.000410,0.000492,0.000515,0.000367,0.000230,0.000171,0.000169,0.000209,0.000236,0.000189,0.000194,0.000205,0.000196,0.000184,0.000168,0.000186,0.000223,0.000241,0.000197,0.000144,0.000113,0.000100,0.000101,0.000097,0.000088,0.000075,0.000067,0.000060,0.000051,0.000044,0.000040,0.000036,0.000034,0.000033,0.000033,0.000033,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giahh67 ftgen 0,0,4096,10,0.836515,0.800602,0.036351,0.016206,0.006383,0.007973,0.003273,0.011820,0.001230,0.001857,0.003725,0.004792,0.002586,0.008972,0.005518,0.007339,0.005207,0.006633,0.005670,0.005010,0.005379,0.002919,0.004501,0.004490,0.002854,0.003643,0.005161,0.002824,0.002183,0.001438,0.001060,0.000978,0.001138,0.001729,0.001501,0.001117,0.000626,0.000578,0.000512,0.000294,0.000255,0.000311,0.000397,0.000310,0.000205,0.000188,0.000179,0.000164,0.000172,0.000143,0.000115,0.000095,0.000084,0.000081,0.000080,0.000080,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giwavemapAhh	ftgen	0,0,128,-27, 0,0, 43,0,  49,1,  55,2,  61,3,  67,4,  127,4
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
gitabs4morfAhh	ftgen	0,0,8,-2,giahh43,giahh49,giahh55,giahh61,giahh67,giahh67,giahh67,giahh67

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; HORN P
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
giHornP38 ftgen 0,0,4096,10,0.045737,0.148188,0.335691,0.493464,0.710665,0.765723,0.694286,0.628629,0.521398,0.428206,0.365416,0.306040,0.298023,0.254152,0.201721,0.154086,0.161771,0.146790,0.124044,0.110268,0.091099,0.076808,0.057743,0.042724,0.042724
giHornP50 ftgen 0,0,4096,10,0.280951,0.717837,0.823404,0.588908,0.394696,0.286430,0.176355,0.118365,0.064524,0.033209,0.016001,0.004104,0.004396,0.002069,0.002350,0.001903,0.001098,0.001262,0.001129,0.000906,0.000543,0.000575,0.000427,0.000355,0.000355
giHornP62 ftgen 0,0,4096,10,0.495327,0.909763,0.613398,0.368832,0.202553,0.124640,0.046586,0.011810,0.012510,0.011370,0.006659,0.004564,0.002331,0.001790,0.000667,0.000538,0.000352,0.000302,0.000558,0.000794,0.000797,0.000331,0.000342,0.000389,0.000389
giHornP74 ftgen 0,0,4096,10,0.796534,0.226262,0.060526,0.013273,0.003161,0.001015,0.001071,0.000595,0.000191,0.000337,0.000199,0.000173,0.000183,0.000187,0.000105,0.000113,0.000156,0.000119,0.000098,0.000067,0.000066,0.000064,0.000054,0.000043,0.000043
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
giwavemapHornP	ftgen	0,0,128,-27, 0,0, 38,0,  50,1,  62,2,  74,3,  127,3
gitabs4morfHornP	ftgen	0,0,4,-2,giHornP38,giHornP50,giHornP62,giHornP74

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; HORN F
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
giHornF38 ftgen 0,0,4096,10,0.150333,0.205756,0.869097,0.723941,0.707935,0.116871,0.238125,0.330962,0.443031,0.325212,0.131256,0.267361,0.273576,0.146568,0.209758,0.158564,0.179271,0.084668,0.112177,0.118845,0.124993,0.096945,0.128906,0.125534,0.125534
giHornF50 ftgen 0,0,4096,10,0.348154,0.319965,0.418661,0.396206,0.046368,0.198167,0.035091,0.107400,0.035358,0.066696,0.053722,0.045581,0.066494,0.109943,0.059354,0.050001,0.123615,0.052990,0.032207,0.039448,0.051629,0.014079,0.014571,0.017523,0.017523
giHornF62 ftgen 0,0,4096,10,0.449507,0.544173,0.108516,0.300530,0.163030,0.351952,0.171674,0.202505,0.098101,0.066418,0.044492,0.071036,0.074224,0.064911,0.027430,0.041991,0.022245,0.017689,0.013130,0.020853,0.016891,0.038363,0.017524,0.016841,0.016841
giHornF74 ftgen 0,0,4096,10,0.923831,0.259141,0.262670,0.175552,0.089346,0.073056,0.055113,0.031968,0.027964,0.033656,0.035303,0.010920,0.019420,0.013447,0.012944,0.006111,0.007041,0.003864,0.005702,0.004615,0.003076,0.001589,0.002756,0.001234,0.001234
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
giwavemapHornF	ftgen	0,0,128,-27, 0,0, 38,0,  50,1,  62,2,  74,3,  127,3
gitabs4morfHornF	ftgen	0,0,4,-2,giHornF38,giHornF50,giHornF62,giHornF74

;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; BASS TROMBONE (HARMON MUTE)
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
giharmon33 ftgen 0,0,4096,10,0.875348,0.155770,0.111939,0.181031,0.355046,0.044216,0.039025,0.036422,0.074587,0.050492,0.042464,0.079868,0.121542,0.243299,0.253642,0.263571,0.422410,0.624259,0.742333,0.514304,0.760971,0.444426,0.456583,0.195508,0.070084,0.032239,0.029621,0.058523,0.044442,0.057324,0.077997,0.047218,0.046215,0.023786,0.017859,0.017652,0.012055,0.009595,0.009020,0.006000,0.004077,0.004950,0.004543,0.003196,0.002659,0.003533,0.004156,0.003745,0.002471,0.002264,0.003050,0.002614,0.001944,0.001709,0.001717,0.001934,0.002458,0.003618,0.004915,0.004334,0.003733,0.003804,0.003489,0.002755,0.002427,0.002273,0.002577,0.002702,0.002483,0.002059,0.002016,0.002214,0.002215,0.001947,0.001952,0.002236,0.002357,0.002417,0.002406,0.002309,0.002176,0.002227,0.002527,0.002649,0.002448,0.002165,0.002175,0.002322,0.002371,0.002202,0.001845,0.001620,0.001626,0.001927,0.002537,0.003091,0.003220,0.003231,0.003453,0.003751
giharmon34 ftgen 0,0,4096,10,0.443604,0.040301,0.041393,0.115682,0.622143,0.055550,0.073493,0.090539,0.109410,0.039052,0.138611,0.161174,0.290931,0.212197,0.410393,0.749789,0.917784,1.375368,0.934044,0.781551,0.356416,0.290222,0.181279,0.061983,0.081959,0.039112,0.044805,0.058922,0.022274,0.022731,0.038966,0.025063,0.031263,0.030753,0.032383,0.045020,0.032652,0.027144,0.033411,0.020397,0.015121,0.017071,0.014804,0.013636,0.012149,0.012930,0.014231,0.012821,0.011342,0.009001,0.008587,0.006187,0.005928,0.008836,0.012118,0.012242,0.009968,0.009445,0.006852,0.004519,0.002870,0.001975,0.001680,0.001593,0.001930,0.002744,0.003798,0.003938,0.003311,0.003174,0.003465,0.004740,0.006267,0.006620,0.006071,0.005274,0.005318,0.005795,0.006440,0.007152,0.007792,0.008192,0.007304,0.005765,0.004397,0.003369,0.002855,0.003059,0.003731,0.004377,0.004923,0.005763,0.006567,0.006834,0.006780,0.006575,0.005922,0.004714,0.003481,0.002696
giharmon36 ftgen 0,0,4096,10,0.934870,0.094639,0.263729,0.103300,0.556951,0.047384,0.167404,0.119804,0.122737,0.048833,0.154640,0.111318,0.302046,0.230750,0.517436,0.259307,0.354474,0.152230,0.109031,0.091431,0.071065,0.027335,0.037383,0.048534,0.033460,0.066084,0.041563,0.049933,0.029361,0.032804,0.017292,0.018054,0.023006,0.019576,0.018461,0.008645,0.007040,0.005924,0.005415,0.003713,0.003447,0.002816,0.003594,0.003583,0.002658,0.001561,0.001446,0.002347,0.003707,0.005343,0.007152,0.006970,0.005630,0.004404,0.002749,0.002098,0.002393,0.001708,0.001255,0.001150,0.001263,0.001445,0.001397,0.001331,0.001510,0.001783,0.001849,0.001576,0.001508,0.001400,0.001153,0.000940,0.000797,0.000734,0.000677,0.000581,0.000531,0.000644,0.000829,0.000891,0.000846,0.000864,0.000921,0.000980,0.000945,0.000994,0.001078,0.001054,0.000936,0.000863,0.000855,0.000855,0.000757,0.000683,0.000687,0.000667,0.000654,0.000639,0.000610,0.000586
giharmon38 ftgen 0,0,4096,10,0.275894,0.119750,0.302577,0.931731,0.080509,0.210351,0.194035,0.223110,0.137304,0.197845,0.327194,0.349699,0.653623,0.881895,0.939789,0.691399,0.569520,0.195895,0.129254,0.040633,0.094914,0.073078,0.145254,0.105583,0.162773,0.080818,0.095817,0.054832,0.079542,0.059357,0.055196,0.036903,0.021942,0.019084,0.020925,0.014726,0.013288,0.012653,0.010311,0.008738,0.008159,0.006852,0.004697,0.006565,0.011392,0.016788,0.018297,0.017879,0.015021,0.009463,0.005643,0.005105,0.004046,0.004010,0.005012,0.004282,0.003406,0.003104,0.003782,0.005116,0.003975,0.002459,0.001720,0.001650,0.002105,0.002882,0.003694,0.004103,0.003070,0.001947,0.001446,0.001258,0.001170,0.001349,0.001876,0.002582,0.002853,0.002391,0.002009,0.001887,0.001808,0.001514,0.001333,0.001265,0.001131,0.001082,0.001169,0.001278,0.001225,0.001070,0.000913,0.000800,0.000767,0.000799,0.000824,0.000902,0.001003,0.001061,0.001115,0.001185
giharmon39 ftgen 0,0,4096,10,0.215899,0.043569,0.155862,0.915877,0.029041,0.085938,0.096861,0.027476,0.042161,0.045780,0.077178,0.073681,0.292899,0.268475,0.052870,0.047343,0.020451,0.005226,0.004051,0.013123,0.014796,0.018766,0.016900,0.010549,0.011430,0.006502,0.006649,0.009883,0.007521,0.005298,0.002202,0.001505,0.001267,0.001744,0.001762,0.001880,0.001510,0.001300,0.001551,0.001113,0.001344,0.002682,0.004692,0.003899,0.003280,0.002211,0.001351,0.000889,0.000702,0.000681,0.000890,0.000985,0.000873,0.001082,0.000955,0.001016,0.001084,0.000930,0.000860,0.000656,0.000607,0.000724,0.000840,0.000859,0.000735,0.000640,0.000553,0.000553,0.000664,0.000694,0.000736,0.000846,0.000794,0.000763,0.000690,0.000686,0.000654,0.000659,0.000732,0.000714,0.000736,0.000748,0.000741,0.000620,0.000514,0.000484,0.000540,0.000707,0.000958,0.001141,0.001115,0.001012,0.000967,0.000906,0.000789,0.000653,0.000550,0.000512,0.000523,0.000521
giharmon40 ftgen 0,0,4096,10,0.369055,0.131998,0.314332,0.267587,0.083279,0.197505,0.246057,0.188865,0.247543,0.447904,0.311578,0.951654,0.440089,0.497270,0.248691,0.084689,0.024288,0.043815,0.092522,0.149863,0.063883,0.137365,0.089276,0.106339,0.067676,0.038080,0.044355,0.030311,0.016710,0.009404,0.009432,0.010647,0.009912,0.005595,0.004133,0.004025,0.003963,0.005248,0.007884,0.011332,0.009707,0.007295,0.004440,0.003429,0.004551,0.003060,0.002116,0.001763,0.001514,0.002027,0.002310,0.003069,0.002321,0.001811,0.001688,0.002021,0.001926,0.001770,0.001680,0.001534,0.001470,0.001491,0.001508,0.001391,0.001324,0.001260,0.001327,0.001406,0.001495,0.001338,0.001292,0.001395,0.001369,0.001408,0.001332,0.001258,0.001360,0.001502,0.001505,0.001392,0.001389,0.001469,0.001354,0.001230,0.001168,0.001229,0.001270,0.001296,0.001299,0.001384,0.001495,0.001524,0.001735,0.002015,0.002003,0.001730,0.001490,0.001313,0.001201,0.001201
giharmon41 ftgen 0,0,4096,10,0.338560,0.097872,0.404630,0.072213,0.101149,0.122271,0.088489,0.206809,0.295859,0.455726,0.802773,0.963091,0.671085,0.510166,0.125095,0.028121,0.044968,0.022808,0.033809,0.020551,0.006760,0.009093,0.007270,0.015331,0.017393,0.011093,0.005257,0.003771,0.002662,0.001862,0.002670,0.003093,0.003083,0.002636,0.001647,0.002030,0.003615,0.005828,0.005317,0.003389,0.002213,0.002189,0.002077,0.001392,0.000953,0.000899,0.000930,0.001189,0.001829,0.001616,0.001463,0.001355,0.001413,0.001368,0.001472,0.001201,0.000951,0.000804,0.000750,0.000839,0.001162,0.001540,0.001515,0.001241,0.001296,0.001396,0.001129,0.000785,0.000579,0.000562,0.000702,0.000938,0.001154,0.001155,0.001088,0.001192,0.001489,0.001693,0.001713,0.001549,0.001472,0.001606,0.001560,0.001278,0.001057,0.001106,0.001217,0.001127,0.001002,0.000959,0.000869,0.000789,0.000751,0.000712,0.000744,0.000874,0.001032,0.001112,0.001055,0.001033
giharmon43 ftgen 0,0,4096,10,0.135645,0.120943,0.979143,0.023489,0.114683,0.114072,0.130730,0.180948,0.281652,0.683720,0.964428,0.306787,0.213682,0.058648,0.025209,0.025596,0.047105,0.038846,0.017756,0.006258,0.005601,0.010206,0.010689,0.004381,0.002744,0.002982,0.002040,0.002284,0.001570,0.001528,0.002115,0.001649,0.002514,0.003304,0.005338,0.002902,0.001301,0.000713,0.000665,0.000652,0.000695,0.000698,0.000700,0.001056,0.000728,0.000485,0.000534,0.000633,0.000450,0.000429,0.000625,0.000827,0.001012,0.001160,0.001256,0.001213,0.001133,0.001362,0.001533,0.001305,0.001367,0.001616,0.001627,0.001417,0.001458,0.001637,0.001588,0.001552,0.001476,0.001327,0.001247,0.001076,0.000857,0.000699,0.000670,0.000726,0.000750,0.000854,0.000976,0.000936,0.000830,0.000768,0.000683,0.000599,0.000530,0.000491,0.000451,0.000398,0.000378,0.000368,0.000380,0.000455,0.000533,0.000535,0.000501,0.000464,0.000470,0.000496,0.000480,0.000442
giharmon45 ftgen 0,0,4096,10,0.244591,0.267325,0.126930,0.136762,0.271635,0.312002,0.223921,0.477139,0.969260,0.621811,0.276235,0.133028,0.017955,0.053396,0.048589,0.033493,0.018488,0.024467,0.024072,0.021974,0.013672,0.005364,0.005982,0.003607,0.001893,0.001866,0.001242,0.001433,0.001334,0.002488,0.002930,0.001518,0.001627,0.002275,0.001495,0.001193,0.000972,0.000737,0.000811,0.001235,0.001057,0.000838,0.001036,0.001047,0.001114,0.001012,0.000995,0.001090,0.001298,0.001286,0.001257,0.001216,0.001222,0.001045,0.001114,0.001441,0.001842,0.001582,0.001233,0.001180,0.001395,0.001374,0.001319,0.001317,0.001143,0.001024,0.001053,0.001334,0.001740,0.001862,0.001603,0.001274,0.001051,0.001022,0.000939,0.000839,0.000784,0.000794,0.000787,0.000752,0.000772,0.000742,0.000760,0.000882,0.001044,0.001103,0.001124,0.001129,0.001259,0.001523,0.001689,0.001631,0.001499,0.001332,0.001219,0.001138,0.001037,0.000952,0.000828,0.000746
giharmon46 ftgen 0,0,4096,10,0.315815,0.844525,0.164412,0.451756,0.585703,0.518759,0.681565,0.411064,0.952335,0.494514,0.366224,0.049949,0.050057,0.056689,0.053659,0.035965,0.043860,0.032015,0.019827,0.005201,0.006601,0.005746,0.007203,0.005429,0.003518,0.004758,0.003756,0.007828,0.015721,0.006418,0.003773,0.007304,0.003491,0.004073,0.002821,0.001771,0.002371,0.001798,0.002341,0.002659,0.003029,0.001998,0.001673,0.001293,0.000985,0.001051,0.001602,0.002316,0.002076,0.001608,0.001182,0.001234,0.001509,0.002038,0.001745,0.001690,0.001788,0.002285,0.002474,0.002206,0.002242,0.002438,0.002520,0.003014,0.003823,0.004834,0.005921,0.005640,0.004222,0.003103,0.002822,0.003289,0.003754,0.003426,0.002719,0.002201,0.001856,0.001927,0.002461,0.002893,0.002831,0.002430,0.002388,0.002815,0.003393,0.003964,0.004124,0.003523,0.002801,0.002546,0.002599,0.002485,0.002105,0.001812,0.001794,0.001803,0.001606,0.001468,0.001509,0.001549
giharmon48 ftgen 0,0,4096,10,0.122676,0.220788,0.073432,0.127649,0.149907,0.310663,0.320023,0.888642,0.333339,0.133323,0.020148,0.021610,0.031312,0.019058,0.010338,0.008856,0.009259,0.004665,0.008040,0.006064,0.004765,0.002412,0.001080,0.002281,0.002107,0.003516,0.001246,0.000827,0.000714,0.001050,0.000701,0.000675,0.000523,0.000934,0.001128,0.001435,0.000766,0.000427,0.000568,0.000725,0.001140,0.001379,0.000939,0.000679,0.000677,0.000639,0.000687,0.000664,0.000490,0.000511,0.000557,0.000610,0.000728,0.001052,0.001004,0.000764,0.000789,0.000916,0.000909,0.001108,0.000978,0.000656,0.000487,0.000484,0.000484,0.000521,0.000592,0.000647,0.000545,0.000494,0.000588,0.000761,0.000868,0.000902,0.000912,0.000928,0.000781,0.000667,0.000669,0.000665,0.000649,0.000608,0.000541,0.000459,0.000419,0.000435,0.000481,0.000492,0.000493,0.000550,0.000622,0.000616,0.000575,0.000571,0.000566,0.000520,0.000445,0.000380,0.000345,0.000334
giharmon50 ftgen 0,0,4096,10,0.162293,0.952587,0.107970,0.148379,0.162877,0.302263,0.378248,0.526544,0.202053,0.019075,0.035439,0.025852,0.023804,0.025676,0.028522,0.013081,0.004084,0.002802,0.001949,0.002297,0.001565,0.001596,0.004229,0.004413,0.001504,0.001251,0.001021,0.001404,0.001139,0.001161,0.000682,0.000466,0.000926,0.000495,0.000656,0.000798,0.001105,0.000691,0.000515,0.000562,0.000460,0.000566,0.000474,0.000481,0.000452,0.000510,0.000694,0.000487,0.000439,0.000584,0.000605,0.000623,0.000670,0.000916,0.000792,0.000871,0.000636,0.000514,0.000540,0.000466,0.000488,0.000461,0.000448,0.000510,0.000642,0.000795,0.000743,0.000838,0.001039,0.001142,0.000966,0.000733,0.000659,0.000657,0.000595,0.000548,0.000480,0.000411,0.000427,0.000488,0.000580,0.000723,0.000773,0.000693,0.000563,0.000471,0.000412,0.000429,0.000481,0.000468,0.000408,0.000367,0.000352,0.000329,0.000288,0.000260,0.000253,0.000249,0.000251,0.000257
giharmon52 ftgen 0,0,4096,10,0.167672,0.198778,0.227405,0.284738,0.650198,0.940684,0.975647,0.268741,0.049829,0.071939,0.024052,0.019628,0.020109,0.016231,0.003867,0.003960,0.004551,0.001438,0.002545,0.005214,0.004055,0.001727,0.002282,0.002593,0.001856,0.002206,0.001924,0.000871,0.000924,0.001558,0.001059,0.001121,0.001112,0.001260,0.001747,0.001193,0.000757,0.001035,0.000862,0.000951,0.001089,0.001598,0.001563,0.001170,0.001427,0.001409,0.001130,0.001424,0.001095,0.000785,0.000800,0.001135,0.001025,0.001093,0.000966,0.001083,0.001357,0.001272,0.001103,0.001508,0.002036,0.001512,0.001143,0.001348,0.001716,0.001528,0.001151,0.000935,0.001007,0.001124,0.000930,0.000715,0.000611,0.000658,0.000759,0.000788,0.000734,0.000745,0.000773,0.000916,0.001069,0.001056,0.000942,0.000778,0.000676,0.000670,0.000675,0.000675,0.000644,0.000597,0.000550,0.000537,0.000555,0.000559,0.000525,0.000454,0.000404,0.000407,0.000442,0.000480
giharmon53 ftgen 0,0,4096,10,0.026511,0.043338,0.103983,0.172681,0.197084,0.979650,0.257547,0.017830,0.077807,0.064492,0.041376,0.053973,0.027216,0.006355,0.007006,0.001571,0.001221,0.001837,0.007442,0.004872,0.002662,0.002280,0.002188,0.001493,0.002889,0.002534,0.002305,0.002344,0.001085,0.001468,0.002010,0.002087,0.000876,0.000665,0.000602,0.000985,0.000607,0.000521,0.000609,0.000586,0.000566,0.000481,0.000501,0.000665,0.000626,0.000653,0.000579,0.000643,0.000690,0.000651,0.000432,0.000403,0.000504,0.000532,0.000598,0.000456,0.000369,0.000393,0.000370,0.000313,0.000265,0.000292,0.000299,0.000335,0.000381,0.000415,0.000449,0.000480,0.000399,0.000307,0.000245,0.000249,0.000338,0.000468,0.000545,0.000532,0.000495,0.000471,0.000476,0.000450,0.000388,0.000331,0.000297,0.000269,0.000233,0.000202,0.000188,0.000169,0.000158,0.000175,0.000208,0.000254,0.000316,0.000380,0.000433,0.000473,0.000499,0.000504,0.000472,0.000425
giharmon55 ftgen 0,0,4096,10,0.081729,0.021968,0.138971,0.239901,0.947997,0.478402,0.152261,0.093610,0.063734,0.039617,0.032944,0.006609,0.015447,0.010428,0.006706,0.002730,0.013404,0.010554,0.003963,0.002958,0.000885,0.000799,0.001120,0.001680,0.001729,0.001274,0.001362,0.000943,0.002299,0.001254,0.001112,0.000960,0.001034,0.000866,0.000912,0.000751,0.001101,0.000945,0.000888,0.000760,0.000758,0.000764,0.000797,0.000790,0.000657,0.000779,0.000816,0.000819,0.000797,0.000793,0.000830,0.000803,0.000678,0.000695,0.000912,0.000796,0.000686,0.000833,0.000798,0.000772,0.000941,0.000835,0.000815,0.000695,0.000533,0.000448,0.000405,0.000411,0.000492,0.000554,0.000576,0.000587,0.000573,0.000542,0.000560,0.000560,0.000557,0.000544,0.000547,0.000555,0.000551,0.000537,0.000544,0.000557,0.000533,0.000512,0.000499,0.000514,0.000548,0.000548,0.000539,0.000526,0.000511,0.000513,0.000513,0.000510,0.000506,0.000503,0.000507,0.000508
giharmon57 ftgen 0,0,4096,10,0.150966,0.141943,0.169272,0.391010,0.953809,0.119929,0.039950,0.075251,0.042294,0.016963,0.005858,0.005238,0.002857,0.003841,0.008582,0.001485,0.001148,0.002596,0.001639,0.001556,0.002197,0.001142,0.001112,0.001195,0.001136,0.001245,0.000909,0.001301,0.000937,0.000941,0.001212,0.001227,0.000900,0.000862,0.000883,0.000728,0.001073,0.001100,0.000883,0.001160,0.000948,0.000936,0.001199,0.000883,0.000791,0.000945,0.000697,0.000592,0.000626,0.000588,0.000617,0.000696,0.000684,0.000803,0.000743,0.000641,0.000514,0.000453,0.000480,0.000536,0.000586,0.000581,0.000619,0.000622,0.000602,0.000589,0.000589,0.000600,0.000582,0.000552,0.000553,0.000557,0.000549,0.000526,0.000512,0.000519,0.000533,0.000535,0.000547,0.000544,0.000539,0.000534,0.000524,0.000512,0.000502,0.000502,0.000502,0.000497,0.000480,0.000468,0.000466,0.000464,0.000461,0.000459,0.000463,0.000470,0.000477,0.000482,0.000483,0.000488
giharmon60 ftgen 0,0,4096,10,0.306985,0.126374,0.301596,0.969500,0.074344,0.009729,0.006039,0.004002,0.001666,0.001675,0.002331,0.000674,0.000730,0.000729,0.000758,0.000585,0.000577,0.000687,0.000657,0.001017,0.000768,0.000581,0.000549,0.000326,0.000290,0.000463,0.000666,0.000567,0.000312,0.000634,0.000665,0.000397,0.000264,0.000232,0.000286,0.000583,0.000629,0.000663,0.000354,0.000268,0.000259,0.000263,0.000303,0.000274,0.000231,0.000322,0.000471,0.000473,0.000488,0.000569,0.000596,0.000564,0.000445,0.000430,0.000473,0.000519,0.000490,0.000446,0.000488,0.000475,0.000372,0.000301,0.000312,0.000304,0.000374,0.000526,0.000614,0.000564,0.000443,0.000349,0.000321,0.000320,0.000292,0.000243,0.000210,0.000227,0.000301,0.000393,0.000452,0.000473,0.000454,0.000415,0.000375,0.000353,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giharmon62 ftgen 0,0,4096,10,0.969106,0.095726,0.196065,0.188016,0.005133,0.010386,0.004868,0.005030,0.003515,0.002819,0.002632,0.002361,0.001260,0.000235,0.000966,0.001186,0.001018,0.000871,0.001416,0.000300,0.000430,0.000824,0.000912,0.000810,0.000516,0.000452,0.000279,0.000463,0.000690,0.000443,0.000429,0.000374,0.000579,0.000876,0.000457,0.000456,0.000449,0.000577,0.000797,0.000538,0.000571,0.000564,0.000466,0.000418,0.000306,0.000321,0.000334,0.000294,0.000244,0.000204,0.000231,0.000265,0.000340,0.000422,0.000467,0.000400,0.000291,0.000221,0.000207,0.000236,0.000249,0.000246,0.000207,0.000188,0.000203,0.000210,0.000206,0.000193,0.000167,0.000155,0.000192,0.000247,0.000284,0.000296,0.000308,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giharmon64 ftgen 0,0,4096,10,0.361663,0.582855,0.979701,0.215161,0.118878,0.052107,0.013704,0.009061,0.004379,0.007958,0.002817,0.003129,0.003908,0.003040,0.002896,0.002083,0.002113,0.004424,0.003621,0.002331,0.002616,0.002100,0.002293,0.001878,0.002282,0.002077,0.002490,0.002088,0.001811,0.001576,0.001425,0.001407,0.001400,0.001482,0.001847,0.001816,0.001426,0.001730,0.001541,0.001272,0.001398,0.001231,0.001332,0.001350,0.001199,0.001258,0.001149,0.001243,0.001247,0.001156,0.001074,0.001049,0.001142,0.001143,0.001058,0.000978,0.000854,0.000777,0.000688,0.000751,0.000914,0.001100,0.001101,0.001029,0.001044,0.001018,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giharmon65 ftgen 0,0,4096,10,0.314097,0.342771,0.973682,0.028876,0.015118,0.012713,0.002418,0.005174,0.003787,0.002218,0.002249,0.001625,0.002664,0.001830,0.002581,0.001180,0.001626,0.001619,0.001315,0.001513,0.001344,0.001175,0.000964,0.001112,0.001416,0.001129,0.001190,0.001045,0.001248,0.001029,0.000799,0.000750,0.000815,0.000965,0.000955,0.000725,0.000652,0.000709,0.000801,0.000717,0.000786,0.000648,0.000597,0.000630,0.000744,0.000667,0.000613,0.000496,0.000535,0.000596,0.000603,0.000583,0.000599,0.000593,0.000594,0.000603,0.000579,0.000588,0.000623,0.000624,0.000595,0.000573,0.000574,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
giwavemapharmon		ftgen	0,0,128,-27, 0,0, 33,0, 34,1, 36,2, 38,3, 39,3, 40,4, 41,5, 43,6, 45,7, 46,8, 48,9, 50,10,  52,11, 53,12, 55,13, 57,14, 60,15, 62,16, 64,17, 65,18, 127,18 
gitabs4morfharmon	ftgen	0,0,32,-2, giharmon33,giharmon34,giharmon36,giharmon38,giharmon39,giharmon40,giharmon41,giharmon43,giharmon45,giharmon46,giharmon48,giharmon50,giharmon52,giharmon53,giharmon55,giharmon57,giharmon60,giharmon62,giharmon64,giharmon65,giharmon65,giharmon65,giharmon65,giharmon65,giharmon65,giharmon65,giharmon65,giharmon65,giharmon65,giharmon65,giharmon65,giharmon65





;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; BASS TROMBONE (STRAIGHT MUTE)
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
giMute122 ftgen 0,0,4096,10,0.164339,0.102551,0.069563,0.138697,0.223728,0.265220,0.280256,0.332069,0.420578,0.494911,0.577300,0.438019,0.538305,0.547959,0.857117,0.773953,0.517366,0.523329,0.250443,0.159600,0.171983,0.125233,0.061672,0.045591,0.028822,0.029244,0.026342,0.016326,0.018016,0.016474,0.009454,0.006045,0.003657,0.004270,0.008585,0.014528,0.017452,0.019652,0.016908,0.013257,0.016063,0.015947,0.010616,0.009647,0.007357,0.006942,0.005472,0.008460,0.014247,0.013954,0.009828,0.009192,0.009759,0.008585,0.009964,0.012870,0.010975,0.007757,0.007624,0.008209,0.008005,0.007979,0.007726,0.007655,0.007795,0.007616,0.006725,0.005945,0.005229,0.004482,0.003678,0.003014,0.002618,0.002393,0.002731,0.003322,0.003436,0.002905,0.002194,0.001589,0.001214,0.001156,0.001328,0.001483,0.001561,0.001609,0.001696,0.001872,0.001908,0.002069,0.002367,0.002374,0.002130,0.001840,0.001674,0.001720,0.001812,0.001802,0.001732,0.001622
giMute123 ftgen 0,0,4096,10,0.168432,0.062246,0.078354,0.110195,0.129041,0.377921,0.282536,0.228004,0.524063,0.552904,0.492429,0.533439,0.241793,0.431759,0.960231,0.527526,0.457018,0.447269,0.173908,0.188096,0.117536,0.088623,0.038960,0.034631,0.040187,0.030976,0.019737,0.017966,0.018488,0.010201,0.006147,0.003826,0.005925,0.007905,0.007681,0.008607,0.015400,0.021169,0.020768,0.019478,0.013836,0.014839,0.014657,0.013690,0.013236,0.016605,0.019334,0.015552,0.016319,0.019658,0.016907,0.011550,0.009411,0.009522,0.010270,0.008678,0.008528,0.008212,0.007305,0.006920,0.008975,0.009992,0.007897,0.006576,0.006398,0.005486,0.004674,0.004082,0.003255,0.002525,0.001877,0.001735,0.002072,0.002316,0.002265,0.001877,0.001508,0.001299,0.001160,0.001268,0.001500,0.001614,0.001649,0.001544,0.001559,0.001869,0.002444,0.002837,0.002564,0.002224,0.002193,0.002264,0.002103,0.001864,0.001829,0.001964,0.001969,0.001708,0.001368,0.001146
giMute124 ftgen 0,0,4096,10,0.142996,0.083116,0.064144,0.232641,0.363109,0.345440,0.348866,0.301465,0.496059,0.590541,0.450344,0.611392,0.691633,0.939595,0.719155,0.655138,0.609154,0.236629,0.218778,0.154757,0.077033,0.074852,0.040400,0.038516,0.034596,0.023126,0.013779,0.015070,0.008541,0.005439,0.004834,0.008763,0.016084,0.025053,0.033607,0.047747,0.045648,0.045497,0.025409,0.021094,0.022069,0.038009,0.041759,0.063224,0.070253,0.055822,0.048910,0.048219,0.052210,0.039531,0.037339,0.030915,0.028370,0.038122,0.044865,0.047418,0.042297,0.039872,0.040218,0.036388,0.033231,0.028010,0.022884,0.020191,0.018026,0.013653,0.011148,0.010124,0.011725,0.014502,0.015977,0.012802,0.008969,0.006321,0.005229,0.005789,0.006897,0.007670,0.008699,0.009835,0.010769,0.010605,0.010601,0.010721,0.010749,0.010852,0.010291,0.009559,0.008597,0.007779,0.007284,0.006683,0.005906,0.005353,0.005322,0.005542,0.005543,0.005124,0.004449,0.003603
giMute125 ftgen 0,0,4096,10,0.044114,0.061305,0.127226,0.214587,0.248138,0.322022,0.289079,0.300066,0.219345,0.389034,0.679974,0.361926,0.905776,0.756147,0.724622,0.413971,0.233101,0.180408,0.145204,0.056539,0.046805,0.060866,0.050067,0.038355,0.032608,0.021983,0.011622,0.006955,0.011848,0.020388,0.023077,0.028897,0.039329,0.040006,0.051071,0.030060,0.035671,0.024931,0.038339,0.037708,0.058492,0.053593,0.037184,0.045630,0.043341,0.034029,0.031437,0.034031,0.025773,0.028039,0.030454,0.031458,0.031318,0.029135,0.028627,0.025452,0.021115,0.018088,0.014741,0.013689,0.012102,0.010087,0.009117,0.010501,0.012107,0.011147,0.008670,0.006054,0.004653,0.004909,0.005979,0.007571,0.008945,0.009279,0.009403,0.009990,0.010831,0.011229,0.011576,0.012198,0.011522,0.009582,0.007918,0.007133,0.006815,0.006874,0.006545,0.005823,0.005215,0.004793,0.004226,0.003549,0.002763,0.002034,0.001527,0.001275,0.001284,0.001501,0.001663,0.001513
giMute126 ftgen 0,0,4096,10,0.060196,0.079208,0.165018,0.403007,0.474143,0.259060,0.390988,0.369395,0.520597,0.147418,0.294315,0.719113,0.948583,0.911775,0.688364,0.284237,0.196457,0.197963,0.098875,0.075773,0.045829,0.020036,0.034330,0.015751,0.015028,0.009926,0.008781,0.011622,0.026268,0.030349,0.027636,0.033521,0.031042,0.039392,0.034047,0.037282,0.023269,0.035915,0.033496,0.040946,0.033303,0.030305,0.029753,0.029612,0.029870,0.024821,0.021197,0.017836,0.015201,0.014801,0.017255,0.016419,0.014400,0.014847,0.014196,0.013845,0.010243,0.007414,0.006884,0.005313,0.005125,0.006712,0.007001,0.005537,0.003835,0.002755,0.002847,0.003574,0.003940,0.004035,0.004370,0.004927,0.004830,0.004569,0.004559,0.004585,0.004513,0.003828,0.003072,0.002596,0.002377,0.002294,0.002087,0.001940,0.001859,0.001843,0.002114,0.002255,0.001844,0.001305,0.000970,0.000768,0.000670,0.000707,0.000807,0.000885,0.000924,0.000852,0.000694,0.000544
giMute127 ftgen 0,0,4096,10,0.052401,0.049320,0.080590,0.183766,0.164401,0.307439,0.388671,0.284459,0.318081,0.164443,0.441431,0.928201,0.876487,0.740904,0.324363,0.142732,0.081529,0.077495,0.028649,0.043648,0.038991,0.025075,0.013227,0.010195,0.011781,0.010501,0.016602,0.024255,0.023187,0.036495,0.057654,0.054268,0.048563,0.024903,0.054174,0.048040,0.071704,0.054365,0.049624,0.064806,0.092036,0.062098,0.048326,0.054051,0.039134,0.032416,0.036465,0.055694,0.042371,0.035750,0.021224,0.022257,0.011427,0.014694,0.009479,0.004552,0.013174,0.019261,0.013315,0.005818,0.001677,0.002772,0.003021,0.006297,0.007154,0.008171,0.010310,0.008506,0.007517,0.010904,0.006062,0.012403,0.007495,0.006084,0.005664,0.006058,0.004342,0.006256,0.008205,0.007899,0.006624,0.007878,0.003449,0.001680,0.000514,0.001804,0.002081,0.003443,0.004990,0.003472,0.003035,0.002319,0.001815,0.000843,0.001081,0.003090,0.002248,0.001877,0.002589,0.003743
giMute128 ftgen 0,0,4096,10,0.027923,0.100208,0.119497,0.305740,0.241671,0.283542,0.288061,0.232034,0.826888,0.407135,0.944943,0.754001,0.650071,0.360755,0.163788,0.199546,0.064667,0.047976,0.067193,0.033442,0.022636,0.018891,0.006473,0.006036,0.009904,0.016425,0.024814,0.044941,0.038557,0.069982,0.053960,0.007689,0.060655,0.019491,0.072831,0.052666,0.042308,0.055883,0.044001,0.027661,0.043229,0.023057,0.025173,0.028614,0.031240,0.027168,0.026598,0.023386,0.018674,0.009964,0.010171,0.008959,0.004421,0.009443,0.011811,0.008975,0.005444,0.002992,0.002577,0.004840,0.005217,0.007905,0.008254,0.008604,0.004473,0.009592,0.008601,0.005583,0.008098,0.005796,0.002345,0.007586,0.005015,0.004900,0.007488,0.005743,0.006825,0.002224,0.002742,0.001117,0.001857,0.001298,0.003169,0.002324,0.002382,0.001822,0.001779,0.001092,0.000752,0.001206,0.002075,0.000843,0.001972,0.001844,0.002893,0.002804,0.002542,0.001110,0.001376,0.000804
giMute129 ftgen 0,0,4096,10,0.014669,0.032320,0.102462,0.174664,0.169222,0.111331,0.339606,0.209754,0.217866,0.343088,0.891951,0.530957,0.472318,0.164643,0.165367,0.091601,0.090801,0.015419,0.039607,0.019025,0.012281,0.004714,0.002434,0.014861,0.038522,0.020090,0.049806,0.050949,0.061040,0.054492,0.035308,0.046103,0.018911,0.085037,0.066539,0.090037,0.115123,0.114020,0.059158,0.070988,0.070450,0.068910,0.054753,0.043435,0.030742,0.021866,0.024247,0.013293,0.017833,0.010515,0.011265,0.016382,0.023641,0.010420,0.007923,0.005015,0.009328,0.008929,0.010346,0.011125,0.009063,0.009311,0.010454,0.010758,0.009200,0.014939,0.006906,0.005195,0.007827,0.007531,0.008761,0.010132,0.008289,0.010958,0.004572,0.001934,0.001818,0.002642,0.002171,0.002199,0.002528,0.001704,0.001645,0.001110,0.000567,0.001256,0.000671,0.001415,0.003604,0.003233,0.002086,0.001933,0.001526,0.000662,0.001458,0.000497,0.000845,0.000680,0.001138,0.001279
giMute130 ftgen 0,0,4096,10,0.064908,0.079846,0.127850,0.445046,0.330968,0.420691,0.480533,0.374119,0.245280,0.729167,0.936260,0.749421,0.381456,0.247718,0.207617,0.116908,0.051373,0.019507,0.008564,0.025213,0.010576,0.007009,0.011265,0.017944,0.027208,0.040488,0.021178,0.046272,0.038151,0.021208,0.044463,0.023287,0.045981,0.030790,0.020921,0.015858,0.026172,0.019160,0.017080,0.011607,0.015955,0.006307,0.009311,0.006865,0.003784,0.003961,0.002271,0.002504,0.000904,0.002864,0.002378,0.001916,0.001531,0.000626,0.001045,0.001491,0.001672,0.000890,0.001666,0.001476,0.001501,0.000957,0.003007,0.001529,0.001037,0.001154,0.001031,0.000515,0.000881,0.000327,0.000467,0.000436,0.000280,0.000329,0.000454,0.000243,0.000168,0.000282,0.000948,0.000411,0.000184,0.000452,0.000360,0.000354,0.000193,0.000243,0.000591,0.000203,0.000418,0.000245,0.000193,0.000287,0.000162,0.000386,0.000147,0.000097,0.000291,0.000161,0.000222,0.000228
giMute131 ftgen 0,0,4096,10,0.068230,0.065611,0.217451,0.232412,0.188182,0.427625,0.292296,0.554990,0.340081,0.915514,0.522787,0.307999,0.162151,0.094669,0.056724,0.027329,0.011538,0.010489,0.008261,0.001997,0.007832,0.008040,0.029670,0.021346,0.029403,0.071206,0.042160,0.041297,0.059757,0.018923,0.105664,0.038842,0.027166,0.042666,0.031872,0.028802,0.030657,0.019773,0.024186,0.023554,0.016848,0.015145,0.013926,0.008132,0.010479,0.005103,0.002808,0.010621,0.007445,0.004301,0.001100,0.003068,0.003063,0.004833,0.003047,0.003019,0.003716,0.005204,0.002390,0.002979,0.001408,0.001568,0.001539,0.001833,0.002366,0.001838,0.000682,0.001960,0.000613,0.000686,0.000652,0.000399,0.000606,0.000602,0.000521,0.000455,0.000432,0.000091,0.000136,0.000332,0.000272,0.000302,0.000126,0.000375,0.000314,0.000203,0.000126,0.000237,0.000293,0.000291,0.000185,0.000182,0.000275,0.000263,0.000195,0.000151,0.000202,0.000294,0.000205,0.000198
giMute132 ftgen 0,0,4096,10,0.072458,0.092631,0.167684,0.302817,0.140977,0.255042,0.110714,0.344468,0.928686,0.667412,0.338258,0.200769,0.147649,0.065744,0.004582,0.023573,0.011837,0.008391,0.007660,0.014753,0.031615,0.027782,0.039431,0.047372,0.049448,0.013895,0.042049,0.032148,0.026316,0.026284,0.049745,0.043954,0.026083,0.037453,0.029582,0.022591,0.018017,0.013163,0.009816,0.004994,0.005845,0.002926,0.004507,0.007678,0.002757,0.002125,0.001498,0.002105,0.002073,0.003179,0.003552,0.003030,0.003107,0.003121,0.004471,0.001227,0.002877,0.002488,0.002740,0.003051,0.002796,0.002240,0.000296,0.000464,0.000414,0.001290,0.000687,0.001086,0.000537,0.000387,0.000130,0.000370,0.000092,0.000561,0.000559,0.000109,0.000094,0.000089,0.000290,0.000073,0.000183,0.000250,0.000318,0.000509,0.000515,0.000390,0.000503,0.000327,0.000338,0.000232,0.000327,0.000154,0.000173,0.000108,0.000092,0.000271,0.000089,0.000076,0.000105,0.000132
giMute133 ftgen 0,0,4096,10,0.171302,0.215302,0.554037,0.602813,0.500383,0.551353,0.792246,0.972277,0.915826,0.832314,0.393008,0.188469,0.087171,0.051938,0.057335,0.030089,0.018181,0.012795,0.030872,0.033984,0.097553,0.117375,0.088919,0.019750,0.074370,0.074970,0.077987,0.098699,0.118454,0.054334,0.051802,0.037932,0.045722,0.044228,0.016572,0.018704,0.013524,0.013398,0.003788,0.004323,0.010291,0.003069,0.001274,0.001330,0.002466,0.002824,0.003268,0.005612,0.003975,0.000819,0.002777,0.002460,0.002046,0.001584,0.002892,0.002346,0.003012,0.001881,0.000649,0.000801,0.000646,0.001523,0.001240,0.001310,0.000390,0.000248,0.000279,0.000518,0.000341,0.000512,0.000393,0.000190,0.000358,0.000126,0.000196,0.000125,0.000251,0.000327,0.000531,0.000833,0.000907,0.000336,0.000482,0.000237,0.000687,0.000266,0.000316,0.000368,0.000104,0.000129,0.000172,0.000171,0.000167,0.000055,0.000143,0.000116,0.000132,0.000198,0.000238,0.000318
giMute134 ftgen 0,0,4096,10,0.097133,0.173820,0.374605,0.474497,0.645937,0.376089,0.435327,0.976798,0.725285,0.297676,0.120366,0.069249,0.033502,0.014976,0.014214,0.011249,0.006081,0.003570,0.011892,0.014690,0.022764,0.024186,0.025001,0.044955,0.049727,0.048851,0.047898,0.053897,0.023052,0.038993,0.025427,0.027582,0.022350,0.021270,0.010750,0.009160,0.013099,0.002909,0.008796,0.006376,0.001857,0.001716,0.003061,0.001735,0.002918,0.004325,0.002877,0.003817,0.005184,0.003931,0.001995,0.004293,0.003739,0.003678,0.003158,0.002071,0.001133,0.000232,0.000323,0.001563,0.001268,0.000658,0.000426,0.000063,0.000421,0.000195,0.000767,0.000535,0.000446,0.000289,0.000184,0.000296,0.000288,0.000200,0.000535,0.000186,0.000733,0.000229,0.000412,0.000107,0.000166,0.000355,0.000312,0.000317,0.000354,0.000185,0.000132,0.000137,0.000206,0.000233,0.000262,0.000150,0.000123,0.000145,0.000145,0.000117,0.000140,0.000106,0.000135,0.000169
giMute135 ftgen 0,0,4096,10,0.179021,0.401691,0.729330,0.982922,0.746447,0.524380,0.900583,0.585038,0.953435,0.443166,0.289448,0.098763,0.031244,0.011392,0.020066,0.020371,0.036289,0.021837,0.044660,0.116353,0.070855,0.059093,0.066299,0.083923,0.069741,0.061417,0.033091,0.045547,0.029414,0.028975,0.021471,0.021629,0.010855,0.013960,0.004240,0.008225,0.009562,0.004312,0.001601,0.002687,0.001271,0.003054,0.004689,0.003158,0.006429,0.004058,0.005468,0.002640,0.001551,0.003253,0.003142,0.003027,0.001217,0.000340,0.000216,0.000471,0.000540,0.000381,0.000432,0.000182,0.000650,0.000176,0.000758,0.000323,0.000522,0.000156,0.000289,0.000185,0.000281,0.000179,0.000391,0.000461,0.000214,0.000356,0.000189,0.000425,0.000214,0.000172,0.000322,0.000195,0.000387,0.000323,0.000373,0.000170,0.000176,0.000048,0.000079,0.000049,0.000161,0.000129,0.000141,0.000083,0.000119,0.000204,0.000318,0.000410,0.000202,0.000283,0.000292,0.000127
giMute136 ftgen 0,0,4096,10,0.084007,0.199308,0.212901,0.389112,0.310014,0.209644,0.951984,0.633937,0.286005,0.146120,0.053652,0.047694,0.020100,0.016786,0.003816,0.018198,0.008332,0.020077,0.037293,0.016675,0.022299,0.027356,0.023496,0.049061,0.039132,0.026396,0.012922,0.017081,0.012583,0.010068,0.005525,0.002721,0.003104,0.004799,0.003308,0.002047,0.001239,0.002036,0.002197,0.002242,0.003547,0.004859,0.003272,0.001567,0.002063,0.002229,0.001760,0.001286,0.001961,0.000541,0.000366,0.000986,0.000730,0.000861,0.000630,0.000616,0.000358,0.001058,0.000464,0.000438,0.000450,0.000487,0.000193,0.000559,0.000479,0.000260,0.000259,0.000887,0.000529,0.000258,0.000611,0.000375,0.000388,0.000092,0.000430,0.000337,0.000138,0.000312,0.000579,0.000492,0.000207,0.000330,0.000350,0.000212,0.000159,0.000387,0.000350,0.000158,0.000191,0.000374,0.000113,0.000150,0.000260,0.000156,0.000117,0.000208,0.000235,0.000105,0.000074,0.000268
giMute137 ftgen 0,0,4096,10,0.121187,0.301409,0.437255,0.488546,0.532406,0.556320,0.940536,0.612558,0.171145,0.078278,0.033359,0.039980,0.019198,0.003684,0.014541,0.021902,0.025869,0.028022,0.020078,0.018008,0.063141,0.040559,0.061443,0.025176,0.045882,0.030795,0.027823,0.023490,0.015819,0.011054,0.004279,0.008778,0.007683,0.002850,0.002807,0.001837,0.004594,0.006832,0.003882,0.006682,0.004472,0.002359,0.002653,0.002120,0.002271,0.001366,0.001048,0.000977,0.001563,0.000795,0.000741,0.000197,0.000435,0.000663,0.000303,0.000697,0.000460,0.000621,0.000388,0.000298,0.000103,0.000484,0.000378,0.000376,0.000296,0.000134,0.000043,0.000150,0.000155,0.000176,0.000187,0.000055,0.000111,0.000091,0.000143,0.000129,0.000153,0.000171,0.000204,0.000159,0.000206,0.000139,0.000065,0.000078,0.000107,0.000102,0.000128,0.000113,0.000157,0.000150,0.000078,0.000128,0.000144,0.000084,0.000114,0.000188,0.000043,0.000106,0.000116,0.000128
giMute138 ftgen 0,0,4096,10,0.137239,0.608302,0.333203,0.546467,0.231739,0.766708,0.950744,0.327806,0.160412,0.060869,0.019878,0.003953,0.008113,0.006915,0.028018,0.027245,0.043331,0.020302,0.014454,0.025972,0.026882,0.018782,0.017822,0.013846,0.010287,0.009995,0.005808,0.004941,0.003243,0.000812,0.002013,0.001670,0.000819,0.000666,0.000772,0.000298,0.000436,0.000772,0.000741,0.000154,0.001321,0.000422,0.000226,0.000631,0.000439,0.000344,0.000337,0.000336,0.000616,0.000238,0.000312,0.000215,0.000181,0.000430,0.000292,0.000227,0.000331,0.000311,0.000246,0.000311,0.000279,0.000324,0.000208,0.000103,0.000266,0.000302,0.000310,0.000240,0.000310,0.000296,0.000228,0.000305,0.000203,0.000181,0.000235,0.000154,0.000238,0.000155,0.000185,0.000226,0.000170,0.000202,0.000202,0.000228,0.000150,0.000178,0.000239,0.000187,0.000194,0.000253,0.000070,0.000165,0.000223,0.000127,0.000156,0.000160,0.000180,0.000163,0.000129,0.000224
giMute139 ftgen 0,0,4096,10,0.061443,0.238708,0.356688,0.269787,0.339649,0.912187,0.776022,0.165931,0.073909,0.021161,0.016878,0.008990,0.003708,0.022300,0.041143,0.038233,0.004859,0.023579,0.053718,0.052003,0.042268,0.022601,0.022660,0.029648,0.019517,0.017414,0.011974,0.004870,0.011305,0.003101,0.000546,0.002006,0.003619,0.004048,0.005624,0.003647,0.002198,0.002634,0.003291,0.001943,0.000613,0.000545,0.000250,0.000451,0.000789,0.000299,0.000410,0.000212,0.000138,0.000424,0.000415,0.000404,0.000244,0.000269,0.000335,0.000329,0.000230,0.000373,0.000400,0.000370,0.000260,0.000376,0.000293,0.000187,0.000119,0.000256,0.000177,0.000244,0.000278,0.000293,0.000302,0.000158,0.000215,0.000196,0.000203,0.000167,0.000136,0.000170,0.000168,0.000137,0.000166,0.000168,0.000160,0.000177,0.000247,0.000183,0.000197,0.000135,0.000162,0.000164,0.000186,0.000121,0.000206,0.000166,0.000144,0.000145,0.000141,0.000122,0.000131,0.000148
giMute140 ftgen 0,0,4096,10,0.171458,0.486737,0.414556,0.287720,0.507039,0.974434,0.387302,0.180263,0.044683,0.029233,0.014770,0.003589,0.009392,0.033786,0.054370,0.010033,0.024497,0.035533,0.046495,0.020949,0.024322,0.023346,0.018462,0.011212,0.009184,0.003515,0.005537,0.002905,0.001147,0.001777,0.002912,0.002534,0.003007,0.002041,0.002109,0.001352,0.001160,0.001111,0.000145,0.000433,0.000205,0.000056,0.000347,0.000268,0.000294,0.000170,0.000469,0.000118,0.000167,0.000252,0.000207,0.000132,0.000371,0.000145,0.000293,0.000072,0.000271,0.000135,0.000201,0.000141,0.000204,0.000171,0.000237,0.000126,0.000167,0.000093,0.000231,0.000074,0.000160,0.000043,0.000250,0.000055,0.000217,0.000066,0.000199,0.000066,0.000231,0.000104,0.000233,0.000061,0.000246,0.000078,0.000219,0.000099,0.000254,0.000073,0.000200,0.000053,0.000175,0.000057,0.000197,0.000066,0.000126,0.000068,0.000163,0.000069,0.000139,0.000114,0.000270,0.000106
giMute141 ftgen 0,0,4096,10,0.096700,0.501938,0.304973,0.388545,0.605784,0.973491,0.310298,0.166062,0.031823,0.020041,0.008197,0.018099,0.031406,0.032118,0.028621,0.035283,0.026152,0.031724,0.045821,0.032749,0.023933,0.009329,0.006590,0.003520,0.002035,0.005414,0.003178,0.001420,0.002462,0.001216,0.000800,0.002760,0.002395,0.001093,0.001088,0.001647,0.001527,0.000979,0.001163,0.001119,0.001071,0.001064,0.001131,0.001297,0.001070,0.001080,0.000990,0.000967,0.000985,0.001105,0.000916,0.000726,0.000869,0.000896,0.000931,0.000845,0.000797,0.000762,0.000805,0.000802,0.000683,0.000685,0.000708,0.000714,0.000719,0.000727,0.000634,0.000711,0.000686,0.000637,0.000694,0.000701,0.000592,0.000664,0.000534,0.000558,0.000681,0.000688,0.000614,0.000609,0.000647,0.000479,0.000513,0.000489,0.000396,0.000420,0.000504,0.000454,0.000492,0.000467,0.000503,0.000515,0.000470,0.000401,0.000502,0.000592,0.000567,0.000411,0.000453,0.000449
giMute142 ftgen 0,0,4096,10,0.079836,0.330689,0.372144,0.493873,0.925375,0.694151,0.118777,0.028983,0.015396,0.009622,0.001526,0.002627,0.008783,0.011024,0.010140,0.015272,0.009621,0.006265,0.004497,0.003760,0.002472,0.001108,0.000363,0.000521,0.000643,0.000834,0.000511,0.000843,0.000434,0.000735,0.001056,0.000991,0.001287,0.000997,0.000751,0.000669,0.000309,0.000891,0.000656,0.000613,0.000705,0.000663,0.000676,0.000561,0.000583,0.000611,0.000611,0.000702,0.000495,0.000478,0.000451,0.000393,0.000461,0.000506,0.000433,0.000473,0.000465,0.000454,0.000425,0.000361,0.000423,0.000458,0.000385,0.000422,0.000473,0.000380,0.000405,0.000421,0.000338,0.000379,0.000351,0.000358,0.000335,0.000353,0.000378,0.000372,0.000313,0.000331,0.000343,0.000315,0.000320,0.000280,0.000296,0.000226,0.000364,0.000296,0.000272,0.000282,0.000254,0.000289,0.000277,0.000204,0.000220,0.000269,0.000299,0.000321,0.000450,0.000259,0.000266,0.000435
giMute143 ftgen 0,0,4096,10,0.093603,0.658042,0.988507,0.565236,0.957972,0.360885,0.102049,0.051660,0.027922,0.005483,0.010335,0.012495,0.003673,0.003952,0.012964,0.008898,0.005397,0.006281,0.001252,0.006122,0.003828,0.000827,0.003226,0.002089,0.001925,0.000243,0.002872,0.002421,0.003325,0.002270,0.001755,0.001168,0.001149,0.000770,0.000928,0.000937,0.000720,0.000406,0.000688,0.000732,0.000790,0.000819,0.000398,0.000728,0.000703,0.001198,0.000151,0.000857,0.000600,0.000571,0.000660,0.000529,0.000450,0.000520,0.000520,0.000470,0.000463,0.000462,0.000454,0.000347,0.000590,0.000427,0.000210,0.000402,0.000401,0.000381,0.000525,0.000294,0.000410,0.000335,0.000296,0.000348,0.000580,0.000399,0.000186,0.000198,0.000288,0.000442,0.000411,0.000234,0.000356,0.000386,0.000271,0.000338,0.000271,0.000303,0.000385,0.000352,0.000226,0.000193,0.000103,0.000388,0.000349,0.000222,0.000208,0.000266,0.000232,0.000314,0.000425,0.000268
giMute144 ftgen 0,0,4096,10,0.127739,0.412859,0.669901,0.617303,0.972749,0.358440,0.065748,0.045528,0.010129,0.008737,0.005631,0.028396,0.004839,0.008872,0.006019,0.011096,0.006903,0.003885,0.004722,0.003204,0.000936,0.002573,0.001532,0.001369,0.001172,0.001160,0.002432,0.000544,0.000609,0.001867,0.000966,0.001039,0.001031,0.000884,0.000753,0.000848,0.000659,0.000749,0.000579,0.000769,0.000665,0.000754,0.000781,0.000490,0.000653,0.000626,0.000524,0.000572,0.000539,0.000566,0.000514,0.000414,0.000441,0.000453,0.000417,0.000478,0.000444,0.000495,0.000551,0.000346,0.000475,0.000442,0.000477,0.000269,0.000501,0.000483,0.000442,0.000267,0.000338,0.000368,0.000470,0.000382,0.000335,0.000358,0.000341,0.000354,0.000345,0.000310,0.000359,0.000228,0.000299,0.000348,0.000336,0.000319,0.000275,0.000294,0.000244,0.000271,0.000232,0.000358,0.000237,0.000269,0.000247,0.000360,0.000301,0.000208,0.000223,0.000248,0.000270,0.000258
giMute145 ftgen 0,0,4096,10,0.172584,0.253006,0.499844,0.963093,0.599448,0.063091,0.027923,0.009556,0.005430,0.007267,0.030576,0.010839,0.007632,0.008691,0.007373,0.004773,0.004338,0.006857,0.003189,0.000319,0.002787,0.001103,0.001002,0.001076,0.001129,0.001241,0.000702,0.000657,0.000919,0.000769,0.000959,0.000576,0.000715,0.000619,0.000732,0.000611,0.000499,0.000600,0.000491,0.000700,0.000580,0.000348,0.000432,0.000611,0.000489,0.000494,0.000446,0.000425,0.000537,0.000395,0.000420,0.000348,0.000423,0.000452,0.000417,0.000289,0.000444,0.000331,0.000335,0.000289,0.000366,0.000340,0.000289,0.000333,0.000336,0.000346,0.000297,0.000305,0.000318,0.000278,0.000199,0.000327,0.000258,0.000240,0.000298,0.000311,0.000247,0.000309,0.000274,0.000297,0.000343,0.000148,0.000267,0.000204,0.000326,0.000251,0.000194,0.000230,0.000250,0.000186,0.000238,0.000251,0.000196,0.000238,0.000292,0.000233,0.000162,0.000197,0.000198,0.000193
giMute146 ftgen 0,0,4096,10,0.169930,0.357871,0.478870,0.971148,0.103667,0.027577,0.012460,0.004728,0.004455,0.018143,0.018903,0.009745,0.013588,0.009707,0.007034,0.005601,0.003105,0.000981,0.000341,0.001493,0.000631,0.000446,0.000832,0.000522,0.000996,0.001277,0.000334,0.000333,0.000435,0.000326,0.000323,0.000353,0.000202,0.000214,0.000190,0.000284,0.000171,0.000339,0.000329,0.000183,0.000124,0.000342,0.000303,0.000128,0.000091,0.000224,0.000255,0.000167,0.000148,0.000089,0.000154,0.000248,0.000151,0.000141,0.000149,0.000108,0.000284,0.000121,0.000121,0.000193,0.000201,0.000123,0.000226,0.000223,0.000154,0.000094,0.000194,0.000058,0.000146,0.000232,0.000097,0.000224,0.000132,0.000062,0.000163,0.000214,0.000246,0.000418,0.000139,0.000221,0.000100,0.000095,0.000131,0.000152,0.000158,0.000051,0.000077,0.000080,0.000061,0.000131,0.000109,0.000055,0.000120,0.000091,0.000080,0.000081,0.000120,0.000053,0.000045,0.000123
giMute147 ftgen 0,0,4096,10,0.175950,0.306151,0.921267,0.803899,0.232506,0.029817,0.015312,0.002411,0.010177,0.008768,0.003962,0.004998,0.003485,0.001495,0.002390,0.001727,0.000838,0.000237,0.000572,0.000579,0.000740,0.001153,0.000286,0.000378,0.000226,0.000269,0.000314,0.000265,0.000200,0.000117,0.000250,0.000150,0.000183,0.000079,0.000168,0.000177,0.000049,0.000188,0.000111,0.000136,0.000108,0.000088,0.000122,0.000076,0.000110,0.000119,0.000091,0.000137,0.000123,0.000074,0.000144,0.000146,0.000077,0.000035,0.000056,0.000085,0.000020,0.000095,0.000092,0.000051,0.000122,0.000063,0.000147,0.000073,0.000076,0.000045,0.000098,0.000114,0.000063,0.000075,0.000037,0.000125,0.000019,0.000072,0.000077,0.000087,0.000132,0.000061,0.000112,0.000071,0.000050,0.000051,0.000054,0.000046,0.000107,0.000026,0.000027,0.000021,0.000035,0.000042,0.000030,0.000041,0.000038,0.000047,0.000015,0.000021,0.000032,0.000120,0.000147,0.000238
giMute148 ftgen 0,0,4096,10,0.546831,0.588315,0.974745,0.966438,0.134855,0.030603,0.009346,0.000932,0.030580,0.012583,0.020113,0.009766,0.016236,0.007109,0.004226,0.002316,0.001376,0.000358,0.001380,0.001135,0.000319,0.000940,0.000401,0.000703,0.000385,0.000515,0.000292,0.000252,0.000145,0.000137,0.000403,0.000278,0.000292,0.000275,0.000222,0.000110,0.000160,0.000085,0.000217,0.000270,0.000172,0.000158,0.000177,0.000095,0.000182,0.000067,0.000232,0.000159,0.000178,0.000150,0.000206,0.000086,0.000273,0.000112,0.000141,0.000195,0.000084,0.000079,0.000246,0.000201,0.000063,0.000129,0.000125,0.000117,0.000158,0.000162,0.000192,0.000121,0.000175,0.000267,0.000096,0.000179,0.000039,0.000074,0.000268,0.000160,0.000033,0.000069,0.000065,0.000055,0.000088,0.000054,0.000142,0.000087,0.000045,0.000095,0.000026,0.000039,0.000075,0.000073,0.000067,0.000054,0.000068,0.000091,0.000101,0.000092,0.000171,0.000084,0.000049,0.000055
giMute149 ftgen 0,0,4096,10,0.294629,0.975075,0.694387,0.796446,0.188314,0.013147,0.006022,0.018607,0.064160,0.026936,0.065686,0.065969,0.031796,0.020120,0.015238,0.003443,0.002738,0.001360,0.003362,0.001182,0.001135,0.002047,0.001013,0.000558,0.000429,0.000717,0.000504,0.000555,0.000624,0.000479,0.000343,0.000421,0.000606,0.000462,0.000385,0.000445,0.000230,0.000176,0.000301,0.000222,0.000323,0.000195,0.000306,0.000246,0.000307,0.000237,0.000215,0.000210,0.000380,0.000241,0.000377,0.000152,0.000491,0.000197,0.000367,0.000186,0.000204,0.000108,0.000304,0.000260,0.000093,0.000231,0.000163,0.000112,0.000185,0.000239,0.000226,0.000179,0.000200,0.000203,0.000175,0.000088,0.000156,0.000218,0.000201,0.000222,0.000100,0.000212,0.000151,0.000114,0.000168,0.000167,0.000170,0.000170,0.000116,0.000205,0.000116,0.000133,0.000139,0.000176,0.000154,0.000145,0.000119,0.000095,0.000085,0.000125,0.000145,0.000106,0.000145,0.000141
giMute150 ftgen 0,0,4096,10,0.594912,0.608509,0.961469,0.229985,0.033626,0.009789,0.002734,0.011904,0.013878,0.018699,0.018956,0.006098,0.006134,0.002889,0.000518,0.000310,0.000591,0.000264,0.000257,0.000698,0.000478,0.000286,0.000276,0.000212,0.000349,0.000257,0.000272,0.000224,0.000177,0.000174,0.000082,0.000176,0.000161,0.000172,0.000230,0.000066,0.000165,0.000161,0.000152,0.000109,0.000094,0.000130,0.000185,0.000186,0.000258,0.000200,0.000154,0.000204,0.000184,0.000157,0.000047,0.000131,0.000123,0.000097,0.000062,0.000144,0.000118,0.000149,0.000134,0.000157,0.000198,0.000063,0.000156,0.000144,0.000094,0.000105,0.000096,0.000093,0.000113,0.000081,0.000076,0.000079,0.000049,0.000061,0.000040,0.000104,0.000079,0.000022,0.000068,0.000078,0.000072,0.000063,0.000085,0.000086,0.000053,0.000080,0.000082,0.000054,0.000046,0.000081,0.000075,0.000056,0.000061,0.000025,0.000072,0.000042,0.000050,0.000054,0.000053,0.000068
giMute151 ftgen 0,0,4096,10,0.206347,0.510370,0.950258,0.127507,0.010206,0.002549,0.001810,0.012483,0.004635,0.004683,0.005187,0.003165,0.001760,0.000999,0.000554,0.000268,0.000624,0.000195,0.000027,0.000147,0.000141,0.000163,0.000117,0.000060,0.000105,0.000099,0.000067,0.000093,0.000160,0.000103,0.000140,0.000060,0.000090,0.000115,0.000051,0.000073,0.000045,0.000055,0.000143,0.000072,0.000114,0.000130,0.000048,0.000106,0.000081,0.000052,0.000096,0.000074,0.000050,0.000088,0.000108,0.000167,0.000065,0.000093,0.000168,0.000053,0.000085,0.000083,0.000061,0.000128,0.000058,0.000064,0.000040,0.000027,0.000100,0.000081,0.000054,0.000030,0.000036,0.000081,0.000048,0.000047,0.000067,0.000034,0.000037,0.000030,0.000021,0.000028,0.000043,0.000106,0.000063,0.000019,0.000039,0.000057,0.000021,0.000037,0.000026,0.000041,0.000039,0.000032,0.000024,0.000048,0.000021,0.000064,0.000037,0.000065,0.000049,0.000031,0.000048,0.000014
giMute152 ftgen 0,0,4096,10,0.718310,0.828992,0.971094,0.089148,0.007432,0.001882,0.006326,0.016275,0.013664,0.005083,0.004192,0.002987,0.000575,0.000244,0.000598,0.000195,0.000566,0.000394,0.000580,0.000162,0.000255,0.000166,0.000116,0.000132,0.000146,0.000108,0.000133,0.000237,0.000251,0.000229,0.000158,0.000127,0.000139,0.000150,0.000119,0.000043,0.000076,0.000198,0.000147,0.000151,0.000075,0.000073,0.000078,0.000098,0.000125,0.000095,0.000098,0.000053,0.000180,0.000068,0.000097,0.000168,0.000085,0.000055,0.000094,0.000084,0.000102,0.000047,0.000079,0.000083,0.000046,0.000050,0.000047,0.000066,0.000081,0.000049,0.000040,0.000040,0.000068,0.000075,0.000057,0.000054,0.000024,0.000106,0.000054,0.000084,0.000044,0.000058,0.000034,0.000045,0.000058,0.000029,0.000068,0.000046,0.000029,0.000029,0.000066,0.000045,0.000077,0.000038,0.000027,0.000035,0.000043,0.000036,0.000049,0.000024,0.000024,0.000045,0.000046,0.000034
giMute153 ftgen 0,0,4096,10,0.551061,0.501444,0.953401,0.068491,0.008520,0.012056,0.020903,0.021636,0.008585,0.007399,0.006298,0.001414,0.000788,0.000891,0.000358,0.000686,0.001110,0.000613,0.000691,0.000460,0.000664,0.000614,0.000565,0.000426,0.000472,0.000397,0.000391,0.000456,0.000378,0.000437,0.000434,0.000310,0.000368,0.000415,0.000400,0.000343,0.000353,0.000349,0.000357,0.000326,0.000313,0.000231,0.000257,0.000212,0.000281,0.000273,0.000286,0.000207,0.000174,0.000326,0.000097,0.000332,0.000115,0.000149,0.000211,0.000305,0.000186,0.000198,0.000220,0.000141,0.000131,0.000182,0.000188,0.000186,0.000182,0.000117,0.000163,0.000173,0.000185,0.000121,0.000186,0.000073,0.000203,0.000192,0.000150,0.000147,0.000131,0.000138,0.000145,0.000135,0.000111,0.000135,0.000109,0.000125,0.000126,0.000121,0.000105,0.000083,0.000102,0.000109,0.000069,0.000107,0.000148,0.000139,0.000126,0.000096,0.000101,0.000123,0.000104,0.000104
giMute154 ftgen 0,0,4096,10,0.965465,0.238341,0.801452,0.050222,0.006640,0.011475,0.012533,0.012724,0.004704,0.006848,0.004228,0.001130,0.001409,0.001463,0.000398,0.000800,0.000513,0.001091,0.001100,0.000393,0.000445,0.000310,0.000446,0.000589,0.000358,0.000505,0.000369,0.000525,0.000346,0.000322,0.000437,0.000435,0.000262,0.000286,0.000307,0.000308,0.000358,0.000350,0.000347,0.000237,0.000076,0.000385,0.000217,0.000215,0.000278,0.000200,0.000335,0.000203,0.000329,0.000194,0.000066,0.000171,0.000388,0.000178,0.000305,0.000205,0.000231,0.000150,0.000228,0.000249,0.000070,0.000179,0.000201,0.000134,0.000138,0.000151,0.000193,0.000156,0.000150,0.000137,0.000132,0.000132,0.000128,0.000118,0.000138,0.000126,0.000141,0.000133,0.000148,0.000184,0.000137,0.000131,0.000138,0.000107,0.000100,0.000116,0.000121,0.000092,0.000099,0.000106,0.000080,0.000101,0.000102,0.000073,0.000094,0.000104,0.000107,0.000106,0.000093,0.000085
giMute155 ftgen 0,0,4096,10,0.938142,0.970313,0.508740,0.021568,0.001864,0.002894,0.002724,0.002263,0.003861,0.001793,0.000443,0.001267,0.000409,0.000899,0.000541,0.000180,0.000417,0.000464,0.000377,0.000359,0.000247,0.000485,0.000254,0.000339,0.000219,0.000319,0.000168,0.000254,0.000251,0.000160,0.000021,0.000183,0.000145,0.000251,0.000161,0.000219,0.000034,0.000174,0.000112,0.000219,0.000100,0.000130,0.000289,0.000226,0.000368,0.000095,0.000094,0.000122,0.000072,0.000121,0.000126,0.000143,0.000135,0.000153,0.000050,0.000099,0.000080,0.000071,0.000089,0.000079,0.000117,0.000090,0.000082,0.000068,0.000126,0.000073,0.000077,0.000094,0.000076,0.000063,0.000056,0.000070,0.000076,0.000063,0.000036,0.000059,0.000040,0.000039,0.000031,0.000048,0.000048,0.000066,0.000072,0.000047,0.000057,0.000058,0.000066,0.000033,0.000044,0.000035,0.000051,0.000038,0.000039,0.000047,0.000046,0.000052,0.000050,0.000033,0.000052,0.000039
giMute156 ftgen 0,0,4096,10,0.625565,0.965980,0.202403,0.024063,0.002481,0.005337,0.005024,0.008205,0.003554,0.001210,0.000983,0.001570,0.000901,0.000291,0.000664,0.000883,0.000489,0.000671,0.000602,0.000605,0.000552,0.000393,0.000580,0.000544,0.000508,0.000536,0.000523,0.000420,0.000400,0.000436,0.000414,0.000508,0.000302,0.000362,0.000336,0.000489,0.000355,0.000362,0.000320,0.000350,0.000246,0.000251,0.000326,0.000214,0.000175,0.000260,0.000273,0.000224,0.000202,0.000232,0.000185,0.000237,0.000245,0.000169,0.000199,0.000160,0.000153,0.000211,0.000161,0.000157,0.000165,0.000177,0.000207,0.000214,0.000158,0.000167,0.000146,0.000138,0.000161,0.000162,0.000163,0.000138,0.000160,0.000141,0.000113,0.000139,0.000144,0.000099,0.000091,0.000160,0.000120,0.000102,0.000131,0.000108,0.000113,0.000114,0.000113,0.000111,0.000105,0.000113,0.000123,0.000107,0.000110,0.000112,0.000110,0.000106,0.000122,0.000112,0.000105,0.000101
giMute157 ftgen 0,0,4096,10,0.314475,0.959696,0.048444,0.004582,0.006574,0.012611,0.005426,0.002115,0.000604,0.000404,0.000356,0.000685,0.001096,0.000409,0.000072,0.000321,0.000329,0.000236,0.000403,0.000240,0.000158,0.000233,0.000268,0.000168,0.000154,0.000209,0.000165,0.000121,0.000111,0.000136,0.000085,0.000217,0.000086,0.000083,0.000149,0.000151,0.000115,0.000148,0.000123,0.000087,0.000095,0.000113,0.000089,0.000044,0.000137,0.000116,0.000130,0.000027,0.000101,0.000085,0.000121,0.000079,0.000106,0.000042,0.000011,0.000071,0.000080,0.000029,0.000039,0.000081,0.000041,0.000060,0.000040,0.000068,0.000066,0.000052,0.000050,0.000031,0.000056,0.000054,0.000039,0.000051,0.000037,0.000059,0.000054,0.000037,0.000046,0.000043,0.000038,0.000041,0.000031,0.000049,0.000033,0.000040,0.000038,0.000035,0.000050,0.000040,0.000043,0.000039,0.000051,0.000035,0.000045,0.000020,0.000038,0.000032,0.000026,0.000030,0.000031,0.000030
giMute158 ftgen 0,0,4096,10,0.428817,0.965152,0.013016,0.001790,0.004347,0.004997,0.005604,0.002582,0.000836,0.000569,0.000599,0.000465,0.000517,0.000563,0.000538,0.000350,0.000281,0.000361,0.000460,0.000274,0.000209,0.000199,0.000249,0.000304,0.000340,0.000213,0.000240,0.000152,0.000238,0.000157,0.000200,0.000196,0.000164,0.000118,0.000156,0.000141,0.000124,0.000105,0.000108,0.000150,0.000140,0.000124,0.000109,0.000104,0.000111,0.000096,0.000120,0.000092,0.000094,0.000103,0.000077,0.000064,0.000066,0.000111,0.000094,0.000093,0.000082,0.000078,0.000073,0.000096,0.000082,0.000079,0.000075,0.000072,0.000085,0.000068,0.000072,0.000053,0.000069,0.000054,0.000057,0.000058,0.000058,0.000065,0.000055,0.000063,0.000066,0.000063,0.000063,0.000058,0.000053,0.000052,0.000046,0.000046,0.000050,0.000049,0.000047,0.000045,0.000043,0.000050,0.000047,0.000052,0.000050,0.000049,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
giwavemapMute1		ftgen	0,0,128,-27, 0,0, 22,0, 23,1, 24,2, 25,3, 26,4, 27,5, 28,6, 29,7, 30,8, 31,9, 32,10, 33,11, 34,12, 35,13, 36,14, 37,15, 38,16, 39,17, 40,18, 41,19, 42,20, 43,21, 44,22, 45,23, 46,24, 47,25, 48,26, 49,27, 50,28, 51,29, 52,30, 53,31, 54,32, 55,33, 56,34, 57,35, 58,36, 127,36
gitabs4morfMute1	ftgen	0,0,64,-2, giMute122,giMute123,giMute124,giMute125,giMute126,giMute127,giMute128,giMute129,giMute130,giMute131,giMute132,giMute133,giMute134,giMute135,giMute136,giMute137,giMute138,giMute139,giMute140,giMute141,giMute142,giMute143,giMute144,giMute145,giMute146,giMute147,giMute148,giMute149,giMute150,giMute151,giMute152,giMute153,giMute154,giMute155,giMute156,giMute157,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158,giMute158






;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; BASS TROMBONE (OPEN)
;---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
giUnmuted22 ftgen 0,0,4096,10,0.209301,0.150536,0.083014,0.207956,0.321939,0.399510,0.327987,0.421479,0.539528,0.533091,0.721756,0.467196,0.947246,0.770314,0.912692,0.965128,0.962101,1.093136,0.708144,0.664071,0.619031,0.643414,0.371645,0.533120,0.477851,0.481481,0.451545,0.370726,0.360377,0.459325,0.288110,0.235271,0.205264,0.198828,0.206768,0.219183,0.205657,0.164230,0.168498,0.156362,0.109323,0.096989,0.105552,0.095551,0.069663,0.068933,0.067166,0.055414,0.072408,0.055978,0.033534,0.049491,0.054904,0.029956,0.018835,0.027602,0.035912,0.015979,0.021303,0.011033,0.024278,0.030411,0.020777,0.027002,0.020715,0.010245,0.010418,0.019612,0.017841,0.017176,0.012772,0.008424,0.009403,0.002947,0.006355,0.006158,0.015418,0.015477,0.011268,0.008620,0.008935,0.006072,0.005458,0.006560,0.006368,0.007559,0.004779,0.008830,0.007041,0.006334,0.002719,0.003830,0.006208,0.008425,0.006728,0.006139,0.002789,0.007133,0.005592,0.005069
giUnmuted23 ftgen 0,0,4096,10,0.129222,0.088552,0.116290,0.170792,0.176577,0.331680,0.281710,0.247957,0.379599,0.404781,0.432966,0.873924,0.774290,0.657216,0.986727,0.929760,0.832314,0.808580,0.585809,0.684034,0.674170,0.330450,0.888687,0.598954,0.599019,0.566506,0.632303,0.502653,0.431058,0.214554,0.351572,0.335693,0.277218,0.341691,0.264970,0.296760,0.293654,0.224055,0.213823,0.138880,0.188425,0.156849,0.137821,0.185206,0.172163,0.184744,0.153256,0.116401,0.138614,0.155349,0.095606,0.075646,0.091523,0.087233,0.081355,0.068920,0.094557,0.066191,0.069861,0.065915,0.072343,0.065165,0.065968,0.041851,0.063905,0.036430,0.041801,0.035516,0.038545,0.044169,0.038034,0.042219,0.032505,0.038202,0.034556,0.037548,0.036070,0.036673,0.037173,0.024089,0.029610,0.028726,0.018206,0.028118,0.023534,0.023563,0.025997,0.024870,0.021673,0.024752,0.020165,0.019645,0.016172,0.017942,0.018241,0.016560,0.014997,0.013671,0.015848,0.011383
giUnmuted24 ftgen 0,0,4096,10,0.014100,0.027948,0.037471,0.118589,0.278733,0.166216,0.237592,0.204888,0.303225,0.239198,0.590081,0.558590,0.488846,0.934503,0.791766,0.769104,0.451529,0.465344,0.363957,0.375648,0.362512,0.527955,0.584553,0.562238,0.409571,0.447397,0.547498,0.349795,0.363085,0.318352,0.305372,0.298282,0.236937,0.259059,0.251424,0.235425,0.253896,0.305811,0.227171,0.177695,0.218484,0.204418,0.227246,0.182265,0.183710,0.198997,0.141695,0.093968,0.119182,0.128975,0.118829,0.086353,0.143691,0.082113,0.096768,0.076006,0.108551,0.073045,0.080734,0.075566,0.076978,0.047507,0.057911,0.055554,0.070030,0.060662,0.054519,0.055938,0.064493,0.032839,0.043612,0.052568,0.034145,0.054702,0.041937,0.045108,0.037413,0.033601,0.044130,0.036376,0.036994,0.032488,0.031456,0.030170,0.029857,0.031038,0.027679,0.029891,0.027195,0.023506,0.027610,0.023146,0.022810,0.019058,0.018170,0.018749,0.017019,0.015480,0.016379,0.015893
giUnmuted25 ftgen 0,0,4096,10,0.075402,0.101145,0.176728,0.270616,0.291285,0.324780,0.333295,0.233831,0.290677,0.540830,0.767506,0.512758,0.980849,0.771417,0.804053,0.408122,0.631555,0.670085,0.408376,0.681153,0.911500,0.859956,0.697578,0.595419,0.593307,0.469251,0.543682,0.529757,0.367768,0.498910,0.305667,0.300578,0.386836,0.363336,0.347656,0.332606,0.322633,0.253819,0.316454,0.284584,0.227632,0.212815,0.324061,0.212387,0.161264,0.199347,0.187103,0.169679,0.152185,0.206879,0.129213,0.127022,0.158412,0.109282,0.134290,0.097383,0.119959,0.099454,0.111739,0.076911,0.100854,0.086224,0.089536,0.075617,0.075879,0.080690,0.071350,0.079834,0.089408,0.079954,0.081367,0.068297,0.067636,0.067458,0.048890,0.064138,0.053887,0.056479,0.047270,0.039648,0.049324,0.050416,0.048009,0.042951,0.034023,0.037808,0.026799,0.042091,0.023668,0.027252,0.027430,0.027822,0.030900,0.025171,0.030639,0.031093,0.018787,0.024957,0.020116,0.016682
giUnmuted26 ftgen 0,0,4096,10,0.043072,0.066480,0.103784,0.299131,0.266755,0.210417,0.254095,0.299260,0.120587,0.627381,0.502409,0.682945,0.896451,0.718962,0.798438,0.342935,0.438196,0.391451,0.571924,0.500613,0.522119,0.554206,0.351133,0.573747,0.415485,0.314183,0.377587,0.407768,0.269407,0.243405,0.358414,0.278435,0.297179,0.205957,0.278884,0.139884,0.230059,0.203655,0.273754,0.208405,0.268930,0.220588,0.093617,0.135109,0.140624,0.125541,0.127288,0.075447,0.145203,0.086283,0.144206,0.092668,0.097130,0.101259,0.096756,0.087998,0.053647,0.093505,0.075780,0.063445,0.057768,0.067925,0.062568,0.059886,0.049874,0.061576,0.047362,0.059277,0.045356,0.045205,0.049725,0.059766,0.051216,0.043048,0.047544,0.034671,0.055494,0.029430,0.038554,0.039949,0.030711,0.033481,0.031643,0.028951,0.022707,0.022752,0.019352,0.028349,0.020961,0.022731,0.022740,0.021957,0.021687,0.023511,0.015741,0.017651,0.017310,0.015487,0.015835,0.014889
giUnmuted27 ftgen 0,0,4096,10,0.116392,0.064448,0.127432,0.239485,0.257590,0.362741,0.449254,0.199901,0.348867,0.637406,0.429112,0.918400,0.936649,0.907354,0.601632,0.359938,0.492393,0.465346,0.501258,0.682788,0.539385,0.377763,0.493182,0.284353,0.308310,0.236111,0.324894,0.290903,0.171987,0.259098,0.209363,0.188311,0.165040,0.129121,0.179891,0.142395,0.192837,0.155400,0.140506,0.154670,0.085903,0.084914,0.123353,0.033350,0.085811,0.066361,0.064805,0.053334,0.059168,0.051871,0.024556,0.050781,0.036654,0.034625,0.037417,0.026993,0.036074,0.041271,0.034852,0.030858,0.035521,0.039943,0.029248,0.023157,0.034015,0.022517,0.032273,0.025478,0.021464,0.021306,0.020706,0.015205,0.017217,0.016590,0.014839,0.015475,0.014872,0.012173,0.018427,0.015918,0.010766,0.011403,0.007469,0.006837,0.010460,0.009821,0.011490,0.012841,0.009228,0.009485,0.005268,0.008016,0.007500,0.007632,0.009359,0.005060,0.006834,0.006729,0.005832,0.006610
giUnmuted28 ftgen 0,0,4096,10,0.076757,0.165970,0.231682,0.474308,0.397207,0.459106,0.300853,0.244548,0.666795,0.602133,0.902710,0.655767,0.483398,0.313870,0.349970,0.212690,0.704653,0.764853,0.648917,0.660316,0.500843,0.406945,0.437095,0.364433,0.332150,0.247819,0.335990,0.413334,0.272378,0.303040,0.347189,0.202684,0.273591,0.358844,0.326756,0.187244,0.245830,0.136904,0.149347,0.181123,0.074118,0.123133,0.099890,0.059919,0.124875,0.090488,0.085029,0.115332,0.036687,0.106389,0.065025,0.070006,0.054270,0.053720,0.068047,0.055966,0.079658,0.070141,0.046135,0.065892,0.044587,0.048301,0.044148,0.045919,0.038547,0.040422,0.052374,0.032757,0.026433,0.030900,0.031810,0.034349,0.013986,0.030399,0.015539,0.018593,0.017769,0.024225,0.019160,0.022166,0.018451,0.016544,0.010230,0.012227,0.012961,0.015889,0.015651,0.009872,0.014459,0.011942,0.015592,0.014711,0.013394,0.010871,0.008229,0.007572,0.008106,0.008828,0.011451,0.009952
giUnmuted30 ftgen 0,0,4096,10,0.102601,0.100887,0.167098,0.516781,0.330986,0.422868,0.412850,0.397849,0.628756,0.686835,0.929709,0.845577,0.935266,0.508059,0.792158,0.281350,0.378308,0.568489,0.346813,0.566233,0.413541,0.405762,0.359363,0.216505,0.366221,0.301854,0.216945,0.249969,0.168763,0.194386,0.278248,0.046419,0.257812,0.124464,0.096054,0.116201,0.059755,0.096572,0.074147,0.047405,0.054049,0.073919,0.023499,0.080643,0.079127,0.031933,0.076588,0.051990,0.032645,0.031250,0.046055,0.022654,0.038293,0.031067,0.045355,0.035515,0.043591,0.024758,0.020123,0.028097,0.025231,0.014737,0.015258,0.020891,0.010029,0.015487,0.004561,0.009797,0.007038,0.006923,0.012160,0.005577,0.012809,0.007007,0.007626,0.004440,0.008034,0.008475,0.006052,0.009027,0.006419,0.007999,0.005562,0.004974,0.008232,0.007159,0.005841,0.004633,0.005878,0.004708,0.005378,0.005775,0.004317,0.003135,0.006019,0.002682,0.003519,0.002106,0.001173,0.002911
giUnmuted31 ftgen 0,0,4096,10,0.066770,0.048141,0.313114,0.280252,0.266590,0.227818,0.195576,0.598114,0.585360,0.631625,0.922780,0.476250,0.557175,0.516114,0.284400,0.347304,0.327824,0.186298,0.429619,0.319332,0.143321,0.268362,0.179246,0.187779,0.187831,0.069696,0.157916,0.087219,0.051108,0.180413,0.090807,0.061893,0.087674,0.029616,0.053852,0.035420,0.032698,0.030786,0.031084,0.040347,0.022290,0.019770,0.033986,0.022503,0.008514,0.028204,0.013058,0.011683,0.016372,0.011838,0.005125,0.012279,0.007251,0.009685,0.008196,0.009381,0.007698,0.004608,0.004124,0.002835,0.002636,0.005858,0.004185,0.001287,0.002347,0.002862,0.004396,0.003505,0.001776,0.002038,0.003386,0.001389,0.002214,0.001394,0.002558,0.001971,0.001212,0.000993,0.001220,0.001435,0.001036,0.000315,0.000862,0.001509,0.000972,0.000423,0.000797,0.001030,0.001800,0.000491,0.000318,0.000990,0.000987,0.000840,0.000380,0.000536,0.000975,0.000576,0.000444,0.000286
giUnmuted32 ftgen 0,0,4096,10,0.153577,0.222613,0.376395,0.526417,0.515836,0.662033,0.484716,0.943689,0.936088,0.683402,0.940687,0.666224,0.399824,0.298609,0.378373,0.633100,0.213897,0.505597,0.312328,0.232655,0.144484,0.129531,0.225201,0.231697,0.116577,0.093467,0.083941,0.021798,0.081229,0.048477,0.071105,0.034486,0.057723,0.028194,0.029190,0.019811,0.027128,0.025539,0.014725,0.015158,0.019471,0.022215,0.011935,0.015510,0.012182,0.010768,0.007979,0.010226,0.004972,0.009394,0.006760,0.006326,0.005823,0.003912,0.005859,0.001846,0.002697,0.003683,0.003892,0.002554,0.002904,0.004195,0.000672,0.001703,0.001212,0.002070,0.001499,0.001454,0.002153,0.001936,0.000769,0.001242,0.001260,0.000672,0.000842,0.001179,0.001096,0.001223,0.001090,0.001644,0.001218,0.000337,0.000969,0.000736,0.000734,0.000228,0.000786,0.000788,0.000390,0.000223,0.001065,0.000755,0.000257,0.000513,0.000711,0.000538,0.000385,0.000437,0.000469,0.000430
giUnmuted33 ftgen 0,0,4096,10,0.199259,0.293112,0.678605,0.427095,0.796552,0.592920,0.832602,0.749712,0.753129,0.956136,0.706813,0.595711,0.292833,0.370551,0.334616,0.299621,0.458159,0.299313,0.277013,0.116169,0.127934,0.137952,0.174017,0.060317,0.067909,0.049889,0.073748,0.061114,0.028611,0.050743,0.022684,0.016755,0.015577,0.022867,0.023917,0.026384,0.015817,0.016226,0.020209,0.017937,0.014795,0.014935,0.011316,0.011197,0.003987,0.006306,0.007657,0.008754,0.008017,0.001430,0.002030,0.006426,0.004673,0.001697,0.003547,0.003128,0.001704,0.002225,0.003744,0.001255,0.001218,0.001706,0.000784,0.001874,0.002414,0.001450,0.001425,0.001431,0.001039,0.000512,0.001115,0.001012,0.000767,0.001368,0.000891,0.001254,0.000438,0.001473,0.000396,0.000944,0.000406,0.000645,0.000805,0.000497,0.000596,0.000632,0.000660,0.000453,0.000657,0.000437,0.000597,0.000534,0.000231,0.000579,0.000359,0.000597,0.000289,0.000515,0.000474,0.000508
giUnmuted34 ftgen 0,0,4096,10,0.156283,0.263433,0.503588,0.547226,0.458841,0.440476,0.745137,0.926771,0.703339,0.326809,0.455305,0.144506,0.578160,0.557536,0.390538,0.373849,0.349519,0.171391,0.136852,0.175680,0.170348,0.095999,0.101795,0.067277,0.069750,0.038210,0.062274,0.031281,0.045966,0.025999,0.019665,0.025196,0.019584,0.017978,0.018616,0.019068,0.009254,0.008323,0.009829,0.007950,0.009281,0.004125,0.006169,0.005516,0.008089,0.004623,0.003210,0.003435,0.002272,0.003102,0.002101,0.002482,0.000800,0.001308,0.001448,0.002671,0.000440,0.001102,0.000625,0.001246,0.000739,0.001198,0.000853,0.000982,0.000459,0.000870,0.000679,0.000793,0.000524,0.000192,0.000634,0.000314,0.000778,0.000405,0.000532,0.000235,0.000824,0.000204,0.000655,0.000308,0.000375,0.000408,0.000459,0.000698,0.000335,0.000370,0.000416,0.000463,0.000712,0.000202,0.000604,0.000194,0.000642,0.000492,0.000566,0.000304,0.000430,0.000666,0.000460,0.000725
giUnmuted35 ftgen 0,0,4096,10,0.109719,0.205679,0.327171,0.211979,0.275588,0.441424,0.909739,0.954713,0.704080,0.558176,0.412328,0.520298,0.672399,0.332547,0.403159,0.369356,0.239488,0.211806,0.231043,0.127727,0.249776,0.131377,0.104229,0.096938,0.102833,0.065079,0.066313,0.070405,0.083568,0.043975,0.062456,0.056332,0.053849,0.056551,0.038084,0.032551,0.031631,0.024900,0.019231,0.022793,0.025653,0.029848,0.012080,0.012343,0.008958,0.007429,0.009658,0.011782,0.006432,0.008668,0.004940,0.004961,0.011409,0.003677,0.005188,0.006053,0.002706,0.005660,0.005030,0.003473,0.004147,0.002260,0.003165,0.004611,0.001572,0.002973,0.001712,0.001380,0.002403,0.001241,0.001415,0.002559,0.000850,0.001416,0.000832,0.001164,0.001932,0.000912,0.001026,0.000996,0.000473,0.001056,0.000666,0.000709,0.000940,0.000380,0.000715,0.000818,0.000554,0.000733,0.000482,0.000638,0.000669,0.000419,0.000706,0.000551,0.000449,0.000615,0.000441,0.000574
giUnmuted37 ftgen 0,0,4096,10,0.163591,0.404564,0.575089,0.472316,0.486294,0.822510,0.806591,0.969411,0.362995,0.433080,0.496749,0.467537,0.467839,0.267451,0.183238,0.218200,0.199060,0.155508,0.175596,0.093844,0.131201,0.054473,0.064991,0.054622,0.028696,0.047964,0.032300,0.032288,0.027946,0.028929,0.025863,0.016471,0.015090,0.011768,0.012035,0.007896,0.009150,0.007422,0.006861,0.006328,0.006340,0.003206,0.001979,0.001196,0.003410,0.003344,0.001708,0.001304,0.001426,0.001391,0.002381,0.001136,0.000501,0.000621,0.001295,0.001362,0.001331,0.000559,0.000199,0.000503,0.000879,0.001032,0.000443,0.000370,0.000358,0.000616,0.000749,0.000331,0.000239,0.000475,0.000621,0.000552,0.000280,0.000188,0.000404,0.000434,0.000385,0.000500,0.000299,0.000339,0.000250,0.000436,0.000389,0.000319,0.000252,0.000279,0.000331,0.000496,0.000362,0.000299,0.000301,0.000389,0.000340,0.000331,0.000305,0.000321,0.000282,0.000312,0.000322,0.000305
giUnmuted38 ftgen 0,0,4096,10,0.088638,0.393952,0.219528,0.233796,0.390552,0.873953,0.973908,0.452420,0.406845,0.369372,0.418449,0.275682,0.233818,0.174596,0.176589,0.199987,0.084305,0.099145,0.066017,0.092595,0.045456,0.041233,0.057805,0.035677,0.029982,0.021224,0.023785,0.011487,0.013368,0.009656,0.009504,0.010544,0.006813,0.005152,0.006761,0.004720,0.005569,0.005772,0.003926,0.003876,0.001447,0.001937,0.001824,0.001260,0.001196,0.001056,0.001716,0.000597,0.000870,0.000129,0.001182,0.000562,0.000716,0.000558,0.000346,0.000458,0.000280,0.000472,0.000305,0.000628,0.000215,0.000532,0.000286,0.000686,0.000363,0.000433,0.000417,0.000257,0.000323,0.000182,0.000362,0.000182,0.000308,0.000090,0.000457,0.000168,0.000301,0.000207,0.000232,0.000295,0.000234,0.000253,0.000115,0.000278,0.000128,0.000246,0.000142,0.000206,0.000208,0.000168,0.000245,0.000156,0.000184,0.000153,0.000195,0.000110,0.000237,0.000120,0.000147,0.000197
giUnmuted39 ftgen 0,0,4096,10,0.072477,0.251689,0.379198,0.380111,0.725478,0.949509,0.692901,0.578175,0.268676,0.362999,0.292393,0.221151,0.135379,0.142198,0.166308,0.080654,0.080723,0.055948,0.052355,0.045652,0.019205,0.017803,0.021033,0.012636,0.010918,0.015171,0.012617,0.010832,0.009232,0.006483,0.005626,0.003851,0.002409,0.001860,0.003662,0.003232,0.003431,0.001824,0.002610,0.001564,0.001117,0.000540,0.000571,0.001003,0.001335,0.000552,0.000678,0.000584,0.001061,0.000360,0.000733,0.000138,0.000610,0.000585,0.000395,0.000329,0.000646,0.000491,0.000414,0.000402,0.000119,0.000403,0.000173,0.000409,0.000081,0.000323,0.000367,0.000312,0.000184,0.000390,0.000085,0.000295,0.000195,0.000268,0.000142,0.000267,0.000047,0.000196,0.000144,0.000201,0.000119,0.000264,0.000129,0.000192,0.000106,0.000089,0.000146,0.000206,0.000209,0.000106,0.000142,0.000140,0.000184,0.000083,0.000036,0.000158,0.000137,0.000135,0.000284,0.000115
giUnmuted40 ftgen 0,0,4096,10,0.225959,0.669389,0.383703,0.337797,0.897874,0.917315,0.679617,0.847733,0.413981,0.550916,0.384995,0.299373,0.229249,0.175955,0.251333,0.151143,0.072766,0.141216,0.038843,0.059075,0.024251,0.038600,0.034595,0.024303,0.012174,0.014682,0.023313,0.013042,0.011554,0.011010,0.010318,0.007734,0.007817,0.007700,0.004889,0.002809,0.002953,0.002732,0.002419,0.002929,0.001031,0.001758,0.002569,0.001934,0.000195,0.000657,0.000465,0.000529,0.000132,0.000495,0.000114,0.000374,0.000066,0.000383,0.000298,0.000374,0.000325,0.000203,0.000379,0.000195,0.000256,0.000055,0.000261,0.000143,0.000303,0.000225,0.000165,0.000287,0.000154,0.000362,0.000079,0.000339,0.000076,0.000304,0.000074,0.000377,0.000110,0.000203,0.000160,0.000220,0.000170,0.000246,0.000154,0.000238,0.000107,0.000233,0.000176,0.000143,0.000173,0.000149,0.000209,0.000112,0.000150,0.000111,0.000112,0.000142,0.000096,0.000126,0.000128,0.000116
giUnmuted41 ftgen 0,0,4096,10,0.097703,0.458893,0.214092,0.303131,0.643075,0.941287,0.605134,0.446467,0.333405,0.230717,0.265198,0.183918,0.159675,0.159325,0.106876,0.068197,0.087184,0.044215,0.041701,0.023995,0.024583,0.018444,0.017021,0.012909,0.009709,0.009292,0.005646,0.005169,0.005487,0.004703,0.003198,0.001953,0.002304,0.001896,0.001346,0.001214,0.000950,0.001006,0.000408,0.000899,0.000811,0.000603,0.000416,0.000186,0.000451,0.000580,0.000293,0.000134,0.000491,0.000610,0.000365,0.000202,0.000238,0.000284,0.000383,0.000318,0.000171,0.000207,0.000319,0.000262,0.000156,0.000201,0.000269,0.000277,0.000189,0.000255,0.000252,0.000251,0.000238,0.000176,0.000262,0.000221,0.000254,0.000156,0.000243,0.000273,0.000203,0.000144,0.000205,0.000227,0.000273,0.000231,0.000129,0.000148,0.000263,0.000231,0.000178,0.000240,0.000111,0.000150,0.000125,0.000253,0.000117,0.000217,0.000249,0.000167,0.000129,0.000153,0.000156,0.000166
giUnmuted42 ftgen 0,0,4096,10,0.124305,0.470693,0.408472,0.419845,0.726811,0.899803,0.320069,0.227380,0.170542,0.278327,0.087448,0.075657,0.070450,0.011278,0.027231,0.027560,0.017657,0.007864,0.003498,0.005879,0.002004,0.003338,0.002302,0.002026,0.001182,0.001269,0.001074,0.000364,0.000612,0.000235,0.000662,0.000064,0.000466,0.000427,0.000278,0.000267,0.000353,0.000292,0.000282,0.000261,0.000314,0.000191,0.000121,0.000300,0.000198,0.000184,0.000171,0.000233,0.000128,0.000158,0.000242,0.000129,0.000168,0.000158,0.000221,0.000105,0.000151,0.000134,0.000034,0.000239,0.000107,0.000190,0.000107,0.000133,0.000170,0.000077,0.000159,0.000133,0.000084,0.000139,0.000186,0.000114,0.000238,0.000054,0.000180,0.000124,0.000143,0.000260,0.000043,0.000132,0.000091,0.000030,0.000116,0.000080,0.000072,0.000057,0.000105,0.000076,0.000116,0.000065,0.000171,0.000053,0.000072,0.000074,0.000062,0.000114,0.000055,0.000095,0.000113,0.000044
giUnmuted43 ftgen 0,0,4096,10,0.125142,0.748133,0.488996,0.937672,0.810384,0.425414,0.265649,0.228407,0.170598,0.111821,0.121106,0.061239,0.019591,0.017183,0.019865,0.007807,0.001783,0.002592,0.001011,0.003527,0.002854,0.000493,0.002776,0.000788,0.001901,0.002961,0.000261,0.000981,0.000309,0.001260,0.001590,0.000419,0.000880,0.000853,0.000491,0.001106,0.000390,0.000507,0.000664,0.000732,0.000588,0.000322,0.000375,0.000612,0.000570,0.000284,0.000276,0.000346,0.000470,0.000510,0.000208,0.000313,0.000421,0.000286,0.000339,0.000330,0.000236,0.000285,0.000339,0.000333,0.000325,0.000301,0.000405,0.000289,0.000185,0.000254,0.000429,0.000220,0.000088,0.000342,0.000434,0.000323,0.000114,0.000423,0.000294,0.000189,0.000274,0.000329,0.000150,0.000193,0.000230,0.000213,0.000130,0.000222,0.000238,0.000078,0.000370,0.000313,0.000161,0.000338,0.000185,0.000246,0.000194,0.000179,0.000174,0.000154,0.000140,0.000235,0.000115,0.000258
giUnmuted44 ftgen 0,0,4096,10,0.302063,0.713050,0.452426,0.930055,0.680724,0.256993,0.187429,0.166946,0.128520,0.034480,0.011033,0.010095,0.010484,0.013378,0.003779,0.001842,0.002372,0.003682,0.002032,0.001052,0.001063,0.001158,0.000116,0.001123,0.001585,0.000539,0.001398,0.000809,0.000447,0.000282,0.000640,0.000371,0.000503,0.000484,0.000108,0.000162,0.000180,0.000319,0.000232,0.000211,0.000045,0.000246,0.000082,0.000069,0.000149,0.000105,0.000143,0.000097,0.000032,0.000091,0.000142,0.000202,0.000052,0.000133,0.000185,0.000054,0.000154,0.000137,0.000181,0.000042,0.000135,0.000129,0.000100,0.000108,0.000143,0.000065,0.000082,0.000182,0.000049,0.000189,0.000083,0.000061,0.000143,0.000078,0.000056,0.000079,0.000120,0.000037,0.000098,0.000063,0.000110,0.000162,0.000076,0.000078,0.000059,0.000095,0.000049,0.000104,0.000088,0.000117,0.000133,0.000031,0.000103,0.000040,0.000058,0.000025,0.000024,0.000077,0.000069,0.000155
giUnmuted45 ftgen 0,0,4096,10,0.233846,0.388855,0.488775,0.775865,0.964456,0.501325,0.291914,0.282804,0.153115,0.120898,0.100772,0.061525,0.021515,0.015412,0.010305,0.004386,0.004785,0.007854,0.004759,0.004311,0.003465,0.002391,0.000787,0.001491,0.000948,0.000812,0.000611,0.000750,0.000529,0.000347,0.000811,0.000462,0.000235,0.000129,0.000100,0.000270,0.000180,0.000344,0.000298,0.000283,0.000076,0.000033,0.000229,0.000057,0.000107,0.000302,0.000392,0.000250,0.000158,0.000123,0.000211,0.000176,0.000204,0.000052,0.000045,0.000073,0.000098,0.000048,0.000042,0.000062,0.000184,0.000108,0.000087,0.000108,0.000246,0.000201,0.000114,0.000035,0.000098,0.000163,0.000193,0.000214,0.000220,0.000138,0.000157,0.000201,0.000169,0.000255,0.000225,0.000166,0.000090,0.000040,0.000130,0.000094,0.000063,0.000032,0.000089,0.000092,0.000126,0.000045,0.000031,0.000089,0.000106,0.000113,0.000102,0.000097,0.000078,0.000087,0.000116,0.000073
giUnmuted46 ftgen 0,0,4096,10,0.278221,0.573695,0.445852,0.941888,0.349456,0.146739,0.401320,0.181176,0.109258,0.079677,0.027531,0.020462,0.010172,0.004976,0.008831,0.004459,0.003116,0.005925,0.003482,0.001955,0.000824,0.000849,0.000990,0.000555,0.000572,0.000248,0.000282,0.000312,0.000425,0.000324,0.000073,0.000533,0.000097,0.000455,0.000267,0.000126,0.000125,0.000100,0.000382,0.000051,0.000129,0.000240,0.000307,0.000083,0.000247,0.000140,0.000183,0.000087,0.000275,0.000383,0.000065,0.000167,0.000138,0.000204,0.000147,0.000389,0.000087,0.000087,0.000085,0.000041,0.000137,0.000224,0.000036,0.000053,0.000195,0.000205,0.000101,0.000065,0.000194,0.000064,0.000193,0.000258,0.000182,0.000073,0.000094,0.000173,0.000055,0.000075,0.000093,0.000129,0.000045,0.000085,0.000107,0.000117,0.000074,0.000107,0.000122,0.000085,0.000048,0.000110,0.000056,0.000075,0.000100,0.000057,0.000058,0.000070,0.000058,0.000062,0.000024,0.000053
giUnmuted48 ftgen 0,0,4096,10,0.452762,0.304359,0.946745,0.826937,0.631116,0.540533,0.395792,0.137892,0.089376,0.056327,0.024940,0.018700,0.015991,0.009294,0.006775,0.006495,0.001878,0.002247,0.000868,0.001248,0.001564,0.001249,0.001144,0.001326,0.001103,0.000911,0.000811,0.000899,0.000763,0.000818,0.000796,0.000855,0.000820,0.000710,0.000624,0.000684,0.000656,0.000643,0.000581,0.000503,0.000628,0.000640,0.000595,0.000471,0.000287,0.000521,0.000550,0.000603,0.000454,0.000276,0.000515,0.000524,0.000515,0.000548,0.000414,0.000417,0.000623,0.000306,0.000257,0.000314,0.000328,0.000356,0.000371,0.000363,0.000334,0.000261,0.000258,0.000294,0.000248,0.000426,0.000222,0.000250,0.000403,0.000222,0.000365,0.000158,0.000358,0.000267,0.000252,0.000328,0.000186,0.000291,0.000280,0.000198,0.000269,0.000258,0.000279,0.000252,0.000236,0.000257,0.000228,0.000248,0.000225,0.000222,0.000211,0.000262,0.000206,0.000219,0.000216,0.000223
giUnmuted49 ftgen 0,0,4096,10,0.384255,0.558888,0.714667,0.956957,0.356637,0.233667,0.190339,0.102786,0.061868,0.032079,0.017290,0.009522,0.005673,0.005487,0.002456,0.002036,0.000425,0.001796,0.002623,0.001222,0.000730,0.000805,0.000937,0.000709,0.000258,0.000626,0.000855,0.000810,0.000503,0.000376,0.000366,0.000792,0.000435,0.000475,0.000434,0.000367,0.000729,0.000327,0.000400,0.000367,0.000285,0.000247,0.000517,0.000305,0.000346,0.000356,0.000254,0.000337,0.000385,0.000231,0.000456,0.000215,0.000106,0.000201,0.000338,0.000284,0.000295,0.000166,0.000172,0.000132,0.000143,0.000401,0.000352,0.000229,0.000228,0.000272,0.000210,0.000234,0.000250,0.000182,0.000231,0.000084,0.000152,0.000170,0.000231,0.000207,0.000174,0.000130,0.000145,0.000280,0.000219,0.000185,0.000135,0.000104,0.000157,0.000222,0.000197,0.000090,0.000129,0.000142,0.000121,0.000183,0.000157,0.000120,0.000130,0.000101,0.000113,0.000151,0.000146,0.000114
giUnmuted50 ftgen 0,0,4096,10,0.446591,0.477584,0.426492,0.970753,0.374135,0.215282,0.306904,0.140851,0.070867,0.038834,0.002282,0.017849,0.007741,0.003585,0.006831,0.006003,0.003705,0.001554,0.003344,0.000137,0.001907,0.000924,0.001095,0.001011,0.000580,0.000998,0.001204,0.000696,0.001058,0.000873,0.000742,0.000768,0.000685,0.000814,0.000666,0.000827,0.000659,0.000713,0.000613,0.000584,0.000711,0.000452,0.000535,0.000517,0.000488,0.000572,0.000501,0.000577,0.000468,0.000403,0.000316,0.000555,0.000474,0.000513,0.000541,0.000421,0.000425,0.000418,0.000385,0.000321,0.000462,0.000415,0.000342,0.000312,0.000347,0.000323,0.000339,0.000320,0.000298,0.000318,0.000268,0.000265,0.000232,0.000302,0.000354,0.000263,0.000304,0.000222,0.000312,0.000311,0.000342,0.000363,0.000274,0.000300,0.000250,0.000296,0.000254,0.000287,0.000249,0.000199,0.000219,0.000195,0.000210,0.000230,0.000217,0.000181,0.000209,0.000200,0.000218,0.000224
giUnmuted51 ftgen 0,0,4096,10,0.287446,0.531276,0.971557,0.630155,0.300795,0.250731,0.098819,0.107126,0.053101,0.062126,0.011011,0.012837,0.004178,0.006909,0.004394,0.002253,0.002430,0.002140,0.001992,0.000671,0.000287,0.000471,0.000271,0.000130,0.000051,0.000046,0.000110,0.000021,0.000075,0.000192,0.000076,0.000065,0.000131,0.000125,0.000081,0.000150,0.000030,0.000017,0.000085,0.000079,0.000026,0.000096,0.000129,0.000153,0.000110,0.000071,0.000054,0.000060,0.000076,0.000043,0.000064,0.000017,0.000052,0.000117,0.000038,0.000047,0.000024,0.000058,0.000033,0.000021,0.000042,0.000074,0.000063,0.000027,0.000066,0.000039,0.000035,0.000030,0.000050,0.000068,0.000048,0.000058,0.000037,0.000069,0.000030,0.000032,0.000081,0.000067,0.000051,0.000033,0.000053,0.000067,0.000038,0.000025,0.000009,0.000037,0.000026,0.000021,0.000009,0.000039,0.000025,0.000029,0.000019,0.000007,0.000014,0.000020,0.000025,0.000019,0.000024,0.000011
giUnmuted52 ftgen 0,0,4096,10,0.780315,0.602043,0.971703,0.598540,0.419892,0.250576,0.135924,0.028914,0.007076,0.002504,0.001073,0.002881,0.002091,0.001033,0.001393,0.001759,0.002069,0.001160,0.001046,0.000119,0.000300,0.000679,0.000689,0.000161,0.000393,0.000523,0.000306,0.000179,0.000312,0.000431,0.000186,0.000165,0.000492,0.000276,0.000209,0.000416,0.000299,0.000153,0.000254,0.000350,0.000169,0.000155,0.000291,0.000165,0.000059,0.000258,0.000299,0.000257,0.000195,0.000128,0.000254,0.000142,0.000138,0.000172,0.000115,0.000086,0.000226,0.000168,0.000117,0.000109,0.000203,0.000108,0.000106,0.000096,0.000163,0.000088,0.000138,0.000083,0.000076,0.000118,0.000119,0.000130,0.000104,0.000106,0.000157,0.000102,0.000046,0.000053,0.000071,0.000098,0.000102,0.000096,0.000078,0.000080,0.000075,0.000076,0.000080,0.000077,0.000073,0.000056,0.000081,0.000076,0.000093,0.000054,0.000098,0.000069,0.000047,0.000076,0.000050,0.000039
giUnmuted53 ftgen 0,0,4096,10,0.372046,0.398945,0.933433,0.303716,0.202319,0.090480,0.045828,0.011018,0.009763,0.001157,0.003828,0.006742,0.001634,0.000320,0.001952,0.001823,0.000292,0.001455,0.000996,0.000511,0.001143,0.001002,0.000470,0.000777,0.000907,0.000648,0.000685,0.000677,0.000506,0.000454,0.000526,0.000488,0.000439,0.000473,0.000508,0.000505,0.000540,0.000447,0.000407,0.000416,0.000398,0.000364,0.000198,0.000374,0.000324,0.000391,0.000404,0.000361,0.000265,0.000399,0.000341,0.000282,0.000274,0.000277,0.000232,0.000236,0.000232,0.000234,0.000221,0.000241,0.000245,0.000215,0.000179,0.000214,0.000247,0.000215,0.000207,0.000202,0.000207,0.000195,0.000189,0.000164,0.000193,0.000172,0.000163,0.000189,0.000196,0.000183,0.000169,0.000170,0.000159,0.000177,0.000172,0.000148,0.000148,0.000174,0.000160,0.000170,0.000159,0.000159,0.000153,0.000140,0.000152,0.000124,0.000137,0.000135,0.000132,0.000111,0.000136,0.000145
giUnmuted55 ftgen 0,0,4096,10,0.553293,0.970661,0.775964,0.469479,0.247296,0.167610,0.076609,0.033410,0.020341,0.014035,0.008333,0.004948,0.005841,0.001285,0.003257,0.000737,0.001858,0.001036,0.001645,0.001036,0.001103,0.001137,0.001058,0.001046,0.000830,0.000920,0.000754,0.000986,0.000805,0.000941,0.000725,0.000785,0.000639,0.000792,0.000693,0.000710,0.000502,0.000630,0.000647,0.000611,0.000541,0.000612,0.000564,0.000535,0.000526,0.000550,0.000561,0.000452,0.000489,0.000502,0.000455,0.000494,0.000395,0.000489,0.000391,0.000455,0.000426,0.000401,0.000395,0.000424,0.000366,0.000409,0.000441,0.000420,0.000368,0.000384,0.000385,0.000372,0.000378,0.000347,0.000334,0.000364,0.000324,0.000342,0.000334,0.000331,0.000328,0.000319,0.000317,0.000303,0.000307,0.000324,0.000295,0.000316,0.000284,0.000293,0.000301,0.000292,0.000308,0.000294,0.000306,0.000291,0.000290,0.000281,0.000282,0.000284,0.000276,0.000270,0.000271,0.000271
giUnmuted56 ftgen 0,0,4096,10,0.400932,0.968520,0.498998,0.389257,0.178633,0.106598,0.036188,0.017795,0.012342,0.000119,0.001239,0.002906,0.000849,0.000166,0.001155,0.001166,0.000733,0.000431,0.000261,0.000740,0.000954,0.000788,0.000425,0.000292,0.000215,0.000111,0.000367,0.000116,0.000157,0.000202,0.000291,0.000325,0.000311,0.000291,0.000228,0.000258,0.000334,0.000245,0.000207,0.000181,0.000101,0.000272,0.000256,0.000160,0.000202,0.000191,0.000135,0.000209,0.000287,0.000145,0.000174,0.000142,0.000151,0.000158,0.000211,0.000156,0.000085,0.000205,0.000120,0.000149,0.000178,0.000110,0.000128,0.000155,0.000127,0.000078,0.000172,0.000112,0.000089,0.000134,0.000141,0.000080,0.000122,0.000145,0.000057,0.000148,0.000118,0.000076,0.000098,0.000141,0.000071,0.000118,0.000134,0.000051,0.000121,0.000094,0.000107,0.000067,0.000125,0.000091,0.000070,0.000129,0.000072,0.000073,0.000102,0.000110,0.000065,0.000125,0.000102,0.000073
giUnmuted57 ftgen 0,0,4096,10,0.291306,0.935026,0.610503,0.348987,0.214608,0.091185,0.014377,0.010820,0.009119,0.004516,0.002313,0.001529,0.002367,0.001896,0.001988,0.001276,0.001387,0.001297,0.001665,0.001145,0.001069,0.001265,0.001014,0.000912,0.000914,0.000884,0.001057,0.000657,0.000966,0.000629,0.000867,0.000822,0.000934,0.000930,0.000759,0.000705,0.000586,0.000610,0.000554,0.000522,0.000534,0.000515,0.000527,0.000475,0.000482,0.000475,0.000461,0.000481,0.000430,0.000442,0.000430,0.000434,0.000438,0.000393,0.000406,0.000411,0.000359,0.000372,0.000357,0.000351,0.000349,0.000324,0.000336,0.000324,0.000314,0.000303,0.000301,0.000285,0.000290,0.000281,0.000290,0.000278,0.000275,0.000275,0.000263,0.000266,0.000238,0.000227,0.000236,0.000240,0.000236,0.000232,0.000222,0.000228,0.000230,0.000219,0.000211,0.000210,0.000218,0.000220,0.000216,0.000205,0.000201,0.000207,0.000204,0.000198,0.000198,0.000199,0.000198,0.000204
giUnmuted58 ftgen 0,0,4096,10,0.424856,0.955425,0.300308,0.167209,0.106790,0.022221,0.009677,0.003945,0.002919,0.000972,0.002109,0.001042,0.000179,0.000802,0.000783,0.000469,0.000622,0.000452,0.000340,0.000342,0.000529,0.000442,0.000227,0.000537,0.000344,0.000279,0.000438,0.000291,0.000255,0.000281,0.000355,0.000226,0.000212,0.000190,0.000247,0.000230,0.000217,0.000203,0.000212,0.000229,0.000161,0.000199,0.000193,0.000163,0.000189,0.000156,0.000148,0.000176,0.000153,0.000136,0.000144,0.000163,0.000148,0.000142,0.000156,0.000124,0.000124,0.000128,0.000131,0.000128,0.000116,0.000119,0.000096,0.000126,0.000103,0.000119,0.000108,0.000098,0.000108,0.000100,0.000109,0.000095,0.000104,0.000104,0.000089,0.000098,0.000092,0.000092,0.000094,0.000088,0.000084,0.000083,0.000085,0.000085,0.000078,0.000083,0.000080,0.000081,0.000078,0.000077,0.000082,0.000082,0.000079,0.000080,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giUnmuted59 ftgen 0,0,4096,10,0.359547,0.978853,0.629720,0.355319,0.173057,0.062497,0.018952,0.015355,0.001883,0.003244,0.000776,0.001277,0.001682,0.000930,0.001021,0.000861,0.000797,0.000784,0.000905,0.000938,0.000691,0.000529,0.000651,0.000668,0.000567,0.000394,0.000564,0.000553,0.000563,0.000374,0.000399,0.000503,0.000337,0.000498,0.000410,0.000391,0.000452,0.000316,0.000406,0.000293,0.000417,0.000301,0.000349,0.000279,0.000358,0.000270,0.000271,0.000287,0.000270,0.000252,0.000235,0.000266,0.000229,0.000223,0.000239,0.000206,0.000237,0.000201,0.000212,0.000207,0.000197,0.000204,0.000185,0.000193,0.000174,0.000185,0.000168,0.000173,0.000159,0.000158,0.000167,0.000156,0.000160,0.000158,0.000153,0.000144,0.000156,0.000152,0.000147,0.000148,0.000140,0.000141,0.000134,0.000134,0.000132,0.000133,0.000132,0.000129,0.000139,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giUnmuted60 ftgen 0,0,4096,10,0.261374,0.958638,0.539283,0.255231,0.147692,0.058306,0.039086,0.029455,0.008523,0.006366,0.003368,0.001295,0.000525,0.000726,0.000847,0.000590,0.000475,0.000526,0.000505,0.000443,0.000320,0.000407,0.000362,0.000443,0.000436,0.000378,0.000327,0.000302,0.000313,0.000302,0.000287,0.000249,0.000268,0.000271,0.000288,0.000219,0.000205,0.000188,0.000206,0.000244,0.000213,0.000204,0.000153,0.000138,0.000190,0.000183,0.000175,0.000180,0.000157,0.000145,0.000159,0.000168,0.000161,0.000138,0.000144,0.000137,0.000134,0.000133,0.000132,0.000126,0.000126,0.000129,0.000119,0.000120,0.000108,0.000109,0.000110,0.000111,0.000101,0.000092,0.000091,0.000098,0.000100,0.000096,0.000094,0.000096,0.000089,0.000087,0.000090,0.000085,0.000088,0.000082,0.000081,0.000085,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giUnmuted61 ftgen 0,0,4096,10,0.417597,0.966833,0.416727,0.180794,0.059064,0.009951,0.012483,0.005985,0.000936,0.001803,0.000655,0.001165,0.001044,0.000808,0.000730,0.000802,0.000431,0.000761,0.000635,0.000600,0.000672,0.000449,0.000439,0.000419,0.000423,0.000466,0.000371,0.000301,0.000340,0.000369,0.000332,0.000355,0.000303,0.000303,0.000266,0.000327,0.000298,0.000235,0.000293,0.000250,0.000196,0.000286,0.000226,0.000187,0.000270,0.000214,0.000201,0.000218,0.000195,0.000204,0.000206,0.000186,0.000183,0.000183,0.000170,0.000171,0.000168,0.000166,0.000163,0.000161,0.000161,0.000147,0.000147,0.000142,0.000139,0.000140,0.000142,0.000142,0.000138,0.000137,0.000135,0.000131,0.000129,0.000130,0.000131,0.000129,0.000128,0.000128,0.000129,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giUnmuted62 ftgen 0,0,4096,10,0.619523,0.961285,0.413119,0.108674,0.024175,0.002125,0.004476,0.003247,0.001352,0.001965,0.000417,0.001471,0.001777,0.000808,0.001622,0.001287,0.001022,0.001266,0.000711,0.000939,0.000934,0.000662,0.000613,0.000589,0.000621,0.000570,0.000567,0.000537,0.000348,0.000623,0.000348,0.000581,0.000430,0.000433,0.000451,0.000404,0.000403,0.000380,0.000391,0.000385,0.000372,0.000351,0.000360,0.000320,0.000325,0.000307,0.000314,0.000267,0.000307,0.000276,0.000259,0.000269,0.000263,0.000231,0.000245,0.000235,0.000254,0.000203,0.000228,0.000209,0.000210,0.000212,0.000201,0.000201,0.000200,0.000193,0.000197,0.000181,0.000186,0.000191,0.000187,0.000179,0.000186,0.000183,0.000156,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giUnmuted63 ftgen 0,0,4096,10,0.930506,0.830293,0.419689,0.124916,0.038385,0.024593,0.004794,0.004719,0.003135,0.000873,0.001282,0.002043,0.001147,0.000967,0.000988,0.000678,0.000173,0.000513,0.000302,0.000290,0.000411,0.000762,0.000371,0.000406,0.000100,0.000164,0.000359,0.000407,0.000105,0.000293,0.000391,0.000246,0.000158,0.000094,0.000092,0.000176,0.000072,0.000179,0.000079,0.000130,0.000159,0.000270,0.000068,0.000103,0.000061,0.000031,0.000141,0.000112,0.000103,0.000058,0.000084,0.000104,0.000104,0.000093,0.000106,0.000081,0.000073,0.000109,0.000082,0.000051,0.000083,0.000073,0.000065,0.000063,0.000070,0.000082,0.000059,0.000073,0.000066,0.000057,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giUnmuted64 ftgen 0,0,4096,10,0.972240,0.962179,0.327494,0.131881,0.030060,0.012594,0.010159,0.006424,0.001103,0.003403,0.002598,0.002451,0.001553,0.001352,0.001133,0.001503,0.001006,0.001536,0.001309,0.001202,0.000888,0.001138,0.001263,0.001203,0.001186,0.000543,0.000766,0.000841,0.000896,0.000659,0.000695,0.000682,0.000638,0.000554,0.000597,0.000599,0.000595,0.000633,0.000510,0.000491,0.000552,0.000483,0.000426,0.000553,0.000423,0.000448,0.000409,0.000425,0.000270,0.000375,0.000420,0.000306,0.000414,0.000322,0.000332,0.000333,0.000282,0.000349,0.000328,0.000344,0.000339,0.000347,0.000316,0.000285,0.000300,0.000263,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giUnmuted65 ftgen 0,0,4096,10,0.946888,0.960545,0.184774,0.018883,0.010446,0.014745,0.001268,0.004635,0.003175,0.000946,0.004142,0.002215,0.000862,0.002500,0.001973,0.001800,0.000634,0.001025,0.001812,0.001970,0.001697,0.001360,0.000855,0.000747,0.001079,0.000849,0.000880,0.000574,0.000730,0.000688,0.000981,0.000337,0.000974,0.000733,0.000756,0.000555,0.000861,0.000545,0.000749,0.000475,0.000535,0.000441,0.000525,0.000483,0.000584,0.000565,0.000414,0.000551,0.000370,0.000472,0.000237,0.000446,0.000374,0.000619,0.000426,0.000403,0.000396,0.000408,0.000394,0.000340,0.000296,0.000324,0.000299,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giUnmuted67 ftgen 0,0,4096,10,0.904104,0.687203,0.074239,0.008596,0.008832,0.003406,0.003870,0.000671,0.001852,0.001635,0.001087,0.000499,0.001292,0.000964,0.000856,0.000780,0.000614,0.000711,0.000618,0.000934,0.000903,0.000581,0.000840,0.000399,0.000489,0.000328,0.000505,0.000515,0.000432,0.000365,0.000364,0.000454,0.000390,0.000377,0.000361,0.000314,0.000378,0.000357,0.000330,0.000270,0.000342,0.000244,0.000217,0.000204,0.000235,0.000181,0.000230,0.000167,0.000212,0.000212,0.000203,0.000218,0.000163,0.000210,0.000170,0.000173,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giUnmuted69 ftgen 0,0,4096,10,0.944934,0.293223,0.066919,0.017808,0.007234,0.002307,0.002545,0.000739,0.000556,0.000511,0.000549,0.000723,0.000242,0.000601,0.000453,0.000316,0.000324,0.000312,0.000164,0.000264,0.000131,0.000093,0.000233,0.000211,0.000152,0.000187,0.000090,0.000233,0.000171,0.000154,0.000116,0.000082,0.000095,0.000121,0.000103,0.000074,0.000094,0.000088,0.000098,0.000122,0.000105,0.000080,0.000084,0.000079,0.000074,0.000104,0.000062,0.000071,0.000065,0.000064,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
giUnmuted70 ftgen 0,0,4096,10,0.943312,0.441802,0.052080,0.022643,0.001043,0.002473,0.002554,0.002310,0.001720,0.000881,0.001191,0.001619,0.000857,0.000858,0.001539,0.000697,0.000554,0.000498,0.000409,0.000174,0.000105,0.000147,0.000252,0.000549,0.000348,0.000262,0.000426,0.000336,0.000226,0.000305,0.000193,0.000333,0.000263,0.000183,0.000164,0.000171,0.000202,0.000221,0.000188,0.000137,0.000129,0.000098,0.000100,0.000144,0.000071,0.000094,0.000086,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
;GEN02 TABLE CONTAINING THE FUNCTION TABLE NUMBERS OF THE TABLES BETWEEN WHICH MORPHING WILL TAKE PLACE
giwavemapUnmuted	ftgen	0,0,128,-27, 0,0, 22,0, 23,1, 24,2, 25,3, 26,4, 27,5, 28,6, 30,7, 31,8, 32,9, 33,10, 34,11, 35,12, 37,13, 38,14, 39,15, 40,16, 41,17, 42,18, 43,19, 44,20, 45,21, 46,22, 48,23, 49,24, 50,25, 51,26, 52,27, 53,28, 55,29, 56,30, 57,31, 58,32, 59,33, 60,34, 61,35, 62,36, 63,37, 64,38, 65,39, 67,40, 69,41, 70,42, 127,42
gitabs4morfUnmuted	ftgen	0,0,64,-2, giUnmuted22,giUnmuted23,giUnmuted24,giUnmuted25,giUnmuted26,giUnmuted27,giUnmuted28,giUnmuted30,giUnmuted31,giUnmuted32,giUnmuted33,giUnmuted34,giUnmuted35,giUnmuted37,giUnmuted38,giUnmuted39,giUnmuted40,giUnmuted41,giUnmuted42,giUnmuted43,giUnmuted44,giUnmuted45,giUnmuted46,giUnmuted48,giUnmuted49,giUnmuted50,giUnmuted51,giUnmuted52,giUnmuted53,giUnmuted55,giUnmuted56,giUnmuted57,giUnmuted58,giUnmuted59,giUnmuted60,giUnmuted61,giUnmuted62,giUnmuted63,giUnmuted64,giUnmuted65,giUnmuted67,giUnmuted69,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70,giUnmuted70



;INITIAL INSTRUMENT SETTING WILL BE 'CLARINET'
giwavemap	init	giwavemapClar
gitabs4morf	init	gitabs4morfClar
giSingleTab	init	giclar62

;FUNCTION TABLE USED TO RE-MAP THE RELATIONSHIP BETWEEN VELOCITY AND ATTACK TIME 
giattscl	ftgen	0,0,128,-16,2,128,-10,0.005
giNAttScl	ftgen	0,0,128,-16,8,128,-4,0.25

gasendL,gasendR	init	0


opcode	butlpsr,a,aa
	setksmps	1
	ain,afreq	xin
	kfreq	downsamp	afreq
	aout	butlp	ain,kfreq
	xout	aout
endop

opcode	SsplinePort,k,KkkO												;DEFINE OPCODE
	knum,kporttime,kcurve,iopt	xin										;READ IN INPUT ARGUMENTS
	kout	init	i(knum)												;INITIALISE TO OUTPUT VALUE (PORTAMENTO APPLIED VALUE)
	ktrig	changed	knum												;...GENERATE A TRIGGER IS A NEW NOTE NUMBER IS GENERATED (FROM INSTR. 1)
	 if ktrig=1 then												;IF A NEW (LEGATO) NOTE HAS BEEN PRESSED 
	  reinit	S_CURVE												;BEGIN A REINITIALISATION PASS FROM LABEL
	 endif														;END OF CONDITIONAL BRANCH
	 S_CURVE:													;A LABEL. REINITIALISATION BEGINS FROM HERE.
	if iopt!=0 then													;IF ABSOLUTE/PROPORTIONAL SWITCH IS ON... (I.E. PROPORTIONAL)
	 idiff	=	1+abs(i(knum)-i(kout))									;ABSOLUTE DIFFERENCE BETWEEN OLD NOTE AND NEW NOTE IN STEPS (+ 1)
	 kporttime	=	kporttime*idiff										;SCALE PORTAMENTO TIME ACCORDING TO THE NOTE GAP
	endif														;END OF CONDITIONAL BRANCH
	imid	=	i(kout)+((i(knum)-i(kout))/2)								;SPLINE MID POINT VALUE
	isspline	ftgentmp	0,0,4096,-16,i(kout),4096*0.5,i(kcurve),imid,(4096/2)-1,-i(kcurve),i(knum)	;GENERATE 'S' SPLINE
	kspd	=	i(kporttime)/kporttime										;POINTER SPEED AS A RATIO (WITH REFERENCE TO THE ORIGINAL DURATION)
	kptr	init	0												;POINTER INITIAL VALUE	
	kout	tablei	kptr,isspline											;READ VALUE FROM TABLE
	kptr	limit	kptr+((ftlen(isspline)/(i(kporttime)*kr))*kspd), 0, ftlen(isspline)-1				;INCREMENT THE POINTER BY THE REQUIRED NUMBER OF TABLE POINTS IN ONE CONTROL CYCLE AND LIMIT IT BETWEEN FIRST AND LAST TABLE POINT - FINAL VALUE WILL BE HELD IF POINTER ATTEMPTS TO EXCEED TABLE DURATION
	rireturn													;RETURN FROM REINITIALISATION PASS
	 		xout	kout                                                                                    ;SEND PORTAMENTOED VALUES BACK TO CALLER INSTRUMENT
endop

instr	UpdateTableNumbers	; SET VALUES FOR INSTRUMENT PRESETS ACCORDING TO BUTTON BANK CHOICE
	kporttime	linseg	0,0.001,0.1
	gkmonopoly	chnget	"monopoly"
	gkLegTim	chnget	"LegTim"
	gkModRte	chnget	"ModRte"
	gkshift		chnget	"shift"
	gkshift		portk	gkshift,kporttime
	gkNoiseAmp	chnget	"NoiseAmp"
	gkEQ_Lo		chnget	"EQ_Lo"
	gkEQ_Hi		chnget	"EQ_Hi"
	
	gkPBend		chnget	"PBend"					; pitch bend
 	kMOUSE_DOWN_LEFT       chnget  "MOUSE_DOWN_LEFT"
 	kOff	init	0
 	if trigger(kMOUSE_DOWN_LEFT,0.5,1)==1 then
  	 chnset	kOff,"PBend"
 	endif
	gkBendRange	chnget	"BendRange"
	gkBend		portk	(gkPBend)*gkBendRange, kporttime
	
	gkpan		chnget	"pan"
	gklevel		chnget	"level"
	gkRvbMix	chnget	"RvbMix"
	gkRvbSize	chnget	"RvbSize"
	
	kInstr	chnget	"Instr"
	ktrig	changed	kInstr
	if ktrig==1 then
	 reinit UPDATE
	endif
	UPDATE:
	iInstr	=	i(kInstr)
	if iInstr==1 then
	 giwavemap	init	giwavemapClar
	 gitabs4morf	init	gitabs4morfClar
	elseif iInstr==2 then
	 giwavemap	init	giwavemapBClar
	 gitabs4morf	init	gitabs4morfBClar
	elseif iInstr==3 then
	 giwavemap	init	giwavemapCBClar
	 gitabs4morf	init	gitabs4morfCBClar
	elseif iInstr==4 then
	 giwavemap	init	giwavemapOboe
	 gitabs4morf	init	gitabs4morfOboe
	elseif iInstr==5 then
	 giwavemap	init	giwavemapBassoon
	 gitabs4morf	init	gitabs4morfBassoon
	elseif iInstr==6 then
	 giwavemap	init	giwavemapCBassoon
	 gitabs4morf	init	gitabs4morfCBassoon
	elseif iInstr==7 then
	 giwavemap	init	giwavemapViolin
	 gitabs4morf	init	gitabs4morfViolin
	elseif iInstr==8 then
	 giwavemap	init	giwavemapCello
	 gitabs4morf	init	gitabs4morfCello
	elseif iInstr==9 then
	 giwavemap	init	giwavemapPiccolo
	 gitabs4morf	init	gitabs4morfPiccolo
	elseif iInstr==10 then
	 giwavemap	init	giwavemapFlute
	 gitabs4morf	init	gitabs4morfFlute
	elseif iInstr==11 then
	 giwavemap	init	giwavemapAFlute
	 gitabs4morf	init	gitabs4morfAFlute
	elseif iInstr==12 then
	 giwavemap	init	giwavemapBFlute
	 gitabs4morf	init	gitabs4morfBFlute
	elseif iInstr==13 then
	 giwavemap	init	giwavemapAhh
	 gitabs4morf	init	gitabs4morfAhh
	elseif iInstr==14 then
	 giwavemap	init	giwavemapHornP
	 gitabs4morf	init	gitabs4morfHornP
	elseif iInstr==15 then
	 giwavemap	init	giwavemapHornF
	 gitabs4morf	init	gitabs4morfHornF
	elseif iInstr==16 then
	 giwavemap	init	giwavemapharmon
	 gitabs4morf	init	gitabs4morfharmon
	elseif iInstr==17 then
	 giwavemap	init	giwavemapMute1
	 gitabs4morf	init	gitabs4morfMute1
	elseif iInstr==18 then
	 giwavemap	init	giwavemapUnmuted
	 gitabs4morf	init	gitabs4morfUnmuted
	endif
rireturn
endin

instr	2	;triggered via MIDI
	gkNoteTrig	init	1	;at the beginning of a new note set note trigger flag to '1'
	ijitter		chnget	"jitter"
	inum		notnum		;read in midi note number
	inum		=	inum+ijitter*0.2	;random fixed pitch offset
	givel		veloc	0,1	;read in midi note velocity
	gknum	=	inum		;update a global krate variable for note pitch

	if i(gkmonopoly)==0 then		;if we are *not* in legato mode...
	 inum	notnum						; read midi note number (0 - 127)
	 	event_i	"i",p1+1+(inum*0.001),0,-1,inum		; call sound producing instr
	 krel	release						; release flag (1 when note is released, 0 otherwise)
	 if krel==1 then					; when note is released...
	  turnoff2	p1+1+(inum*0.001),4,1			; turn off the called instrument
	 endif							; end of conditional
	else				;otherwise... (i.e. legato mode)
	 iactive	=	i(gkactive)			;number of active notes of instr 3 (note in release are disregarded)
	 if iactive==0 then					;...if no notes are active
	  event_i	"i",p1+1,0,-1				;...start a new held note
	 endif
	endif
endin

instr	3	;waveguide instrument. MIDI notes are directed here.
	kporttime	linseg	0,0.001,1		;portamento time function rises quickly from zero to a held value
	kporttime	=	kporttime*gkLegTim	;scale portamento time function with value from GUI knob widget
	if i(gkmonopoly)==1 then			;if we are in legato mode...
	 krel	release					;sense when  note has been released
	 gkactive	=	1-krel			;if note is in release, gkactive=0, otherwise =1

 	 knum	SsplinePort	gknum,kporttime,2,1	;GLISSANDO TIME PROPORTIONAL TO NOTE GAP (OPTION SET TO '1'), THEREFORE PORTAMENTO TIME DEPENDENT UPON NOTE GAP. LARGER INTERVALS WILL RESULT IN PROPORTIONALLY LONGER PORTAMENTO TIMES.
	
	 kactive	active	p1-1			;...check number of active midi notes (previous instrument)
	 if kactive==0 then				;if no midi notes are active...
	  turnoff					;... turn this instrument off
	 endif
	else						;otherwise... (polyphonic / non-legato mode)
	 knum	=	p4		 		;pitch equal to the original note pitch
	endif
	ivel	init	givel
	
	kvibdep		chnget		"vibdep"	;read in widgets
	ktremdep	chnget		"tremdep"	
	ktonedep	chnget		"tonedep"	
	kporttime	linseg		0,0.001,0.02	;CREATE A FUNCTION  THAT RISES RAPIDLY FROM ZERO TO A FIXED VALUE THAT WILL BE USED FOR PORTAMENTO TIME 
	kjitter		chnget		"jitter"
	iNAttAmp	chnget		"NAttAmp"
	iNAttTim	chnget		"NAttTim"
	idrop		chnget		"drop"
	iModDly		chnget		"ModDly"
	
	;------------------------------------------------------------------------------------------------------------
	;AMPLITUDE MODULATION (TREMOLO), VIBRATO AND TONE MODULATION
	;------------------------------------------------------------------------------------------------------------
	if gkNoteTrig==1&&gkmonopoly==1 then		;if a new note is beginning and if we are in monophonic mode...
	 reinit	RESTART_ENVELOPE			;reinitialise the modulations build up
	endif
	RESTART_ENVELOPE:
	iphs		random	0,1						;RANDOM INITIAL PHASE FOR EACH NOTE
	kmoddep		chnget	"moddep";ctrl7	1,1,0,1				;READ IN CONTROLLER 1. WILL BE USED TO CONTROL LFO MODULATION DEPTH
	kmodenv		expseg	0.01,iModDly,1,1,1				;MODULATION ENVELOPE. MODULATION WILL RISE FROM NEAR ZERO TO ITS REQUIRED VALUE OVER THE DURATION OF 'irisetime' FOR EACH NEW NOTE
	rireturn
	kmodenv		portk	kmodenv,0.05					;smooth changes in modulation envelope. This is needed if the envelope is restarted in monophonic mode
	kRteVar		randi	0.1,4						;random variation of the rate of modulation
	kmodrate	=	gkModRte*octave(kRteVar)			;MODULATION RATE. (NOT CONSTANT IN ORDER TO ADD A BIT OF REALISM)

	kDepVar		randomi	0.5,1,4,1					;random variance of the depth of modulation
	kmoddep		=	kmoddep*kDepVar					;modulation depth modulated by randopm factor
	kvib		oscili	kvibdep*kmoddep*kmodenv,kmodrate, gisine,iphs	;VIBRATO LFO
	ktrem		oscili	ktremdep*kmoddep*kmodenv,kmodrate,gisine,iphs+0.5	;TREMOLO LFO (NOTE PHASE WITH RESPECT TO THAT OF VIBRATO)
	ktrem		=	1+(ktrem)					;OFFSET TREMOLO SO THAT IT MODULATES ABOUT '1' INSTEAD OF ABOUT ZERO.
	ktonemod	oscili	ktonedep*kmoddep*kmodenv,kmodrate,gisine,iphs+0.5	;TONE MODULATION LFO
	ktonemod	=	ktonemod - (3*kmoddep*kmodenv)			;
	
	;------------------------------------------------------------------------------------------------------------
	;PITCH JITTER (THIS WILL BE USED TO ADD HUMAN-PLAYER REALISM)
	;------------------------------------------------------------------------------------------------------------
	;				AMP | MIN_FREQ. | MAX_FREQ
	kPitchJit	jitter		0.05*kjitter*4,     1,         20

	;------------------------------------------------------------------------------------------------------------
	;AMPLITUDE JITTER (THIS WILL BE USED TO ADD HUMAN-PLAYER REALISM)
	;------------------------------------------------------------------------------------------------------------
	;				AMP | MIN_FREQ. | MAX_FREQ
	kAmpJit		jitter		0.1*kjitter*4,     0.2,        1
	kAmpJit		=		kAmpJit+1			;OFFSET SO IT MODULATES ABOUT '1' INSTEAD OF ABOUT ZERO

	;THE TABLE INTO WHICH THE MORPHED TABLE WILL BE WRITTEN IS CREATED WITHIN THE INSTRUMENT ITSELF
	;THIS IS DONE SO AS EACH NOTE PLAYED WILL REQUIRE ITS OWN UNIQUE MORPHED TABLE
	;THE TABLE CREATED WILL BE A TEMPORARY TABLE. IT WILL BE DESTROYED WHEN THE NOTE IS FINISHED AND IT IS NO LONGER NEEDED. 
	imorphtab	ftgentmp	0,0,4096,10,1
	
	;pchbend DOESN'T SEEM TO WORK AT PRESENT IN CABBAGE
	kpchbend	pchbend		0,4				;READ MIDI PITCH BEND. THIS LINE OUTPUTS VALUES IN THE RANGE -2 TO 2. EQUILIBRIUM POSITION = 0.
	kpchbend	portk		kpchbend,kporttime		;APPLY SOME PORTAMENTO SMOOTHING TO THE PITCH BEND PARAMETER
	knum		=		knum+kpchbend+kvib+kPitchJit+gkBend	;DERIVE K-RATE NOTE NUMBER VALUE INCORPORATING PITCH BEND, VIBRATO, AND PITCH JITTER	
	ktabndx		limit		knum+gkshift,0,127		;SHIFT TABLE INDEX
	kftndx		tablei		ktabndx,giwavemap			;ftndx REMAPPED ACCORDING TO THE WAVETABLE MAP FOR THIS INSTRUMENT
			ftmorf		kftndx, gitabs4morf, imorphtab	;CREATE THE MORHED TABLE ACCORDING TO THE VALUE OF THE FUNCTION TABLE INDEX CREATED ABOVE

	iatt		table		ivel,giattscl,1			;READ A VALUE MAPPED FROM KEY VELOCITY TO ATTACK TIME. (SEE TABLE giattscl) 
	ibuild		chnget		"build"
	iatt		limit		iatt,ibuild,10
	aenv		linsegr		0,iatt,1,0.05,0			;AMPLITUDE ENVELOPE
	kenv		linsegr		0,iatt,1,0.05,0			;K-RATE VERSION OF THE ABOVE

	/*NOISE ATTACK*/
	iscale		table		i(gknum),giNAttScl					;LONGER ATTACK TIMES FOR LOWER NOTES
	kNenv		expseg		iNAttAmp+0.001,iNAttTim*iscale,0.001, 1, 0.001		;NOISE ENVELOPE. WILL CREATE A HARD ATTACK AT THE START OF THE NOTE
	anoise		gaussi		1,(kNenv-0.001)*iscale,1000				;GENERATE GAUSSIAN NOISE IMPULSE AT THE START OF A NOTE
	
	
	if idrop>0 then
	 adrop		linsegr		0,0.05,-idrop			;SLIGHT PITCH DROP OFF UPON NOTE RELEASE
	 acps		=		cpsmidinn(knum)*octave(anoise)*octave(adrop)
	else
	 acps		=		cpsmidinn(knum)*octave(anoise)
	endif
	
	aAmpNoise	gauss		gkNoiseAmp
	aAmpNoise	butlp		aAmpNoise,gkEQ_Lo
	aAmpNoise	buthp		aAmpNoise,gkEQ_Hi
	
	asig		poscil		(aenv*ktrem*kAmpJit*0.1)*(1+aAmpNoise),acps,imorphtab	;CREATE THE AUDIO OSCILLATOR FROM THE MORPHED FUNCTION TABLE (IF MULTI-TABLE MODE IS SELECTED)
	kbright		chnget		"bright"			;BRIGHTNESS CONTROL (I.E. LOWPASS FILTER CUTOFF).
	kbright		portk		kbright,kporttime		;SMOOTH MOVEMENTS OF THE BRIGHTNESS CONTROL
	afreq		interp		cpsoct((kenv*4*kbright)+8+ktonemod)
	asig		butlpsr		asig,afreq			;LOWPASS FILTER THE SOUND (CALL UDO)
	aL,aR		pan2		asig*gklevel,gkpan		;scale amplitude level and create stereo panned signal
			outs		aL, aR				;SEND AUDIO TO THE OUTPUTS
	gasendL		=		gasendL+aL*gkRvbMix
	gasendR		=		gasendR+aR*gkRvbMix
	gkNoteTrig	=	0					;reset new-note trigger (in case it was '1')
endin

instr	5	;reverb
	if gkRvbMix==0 kgoto SKIP_REVERB
	aL,aR	reverbsc	gasendL,gasendR,gkRvbSize,12000
		outs		aL,aR
		clear		gasendL,gasendR
	SKIP_REVERB:
endin

</CsInstruments>

<CsScore>
i "UpdateTableNumbers" 0 3600
i 5 0 3600			;reverb
f 0 300
</CsScore>

</CsoundSynthesizer>; DiskRecPlay.csd
; Written by Iain McCurdy, 2012

<Cabbage>
form caption("Disk Rec/Play") size(300, 400), pluginid("dkrp") style("legacy")
groupbox bounds(10,   0, 70, 80), text("Record")
checkbox channel("Record"), bounds(20,25,50,50), value(0), shape("square"), colour("red")
groupbox bounds(80,   0, 70, 80), text("Pause")
checkbox channel("Pause"), bounds(90,25,50,50), value(0), shape("square"), colour("Blue")
groupbox bounds(150,   0, 70, 80), text("Play Loop")
checkbox channel("PlayLoop"), bounds(160,25,50,50), value(0), shape("square")
groupbox bounds(220,   0, 70, 80), text("Play Once")
checkbox channel("PlayOnce"), bounds(230,25,50,50), value(0), shape("square"), colour("yellow")
hslider bounds(10,  80, 280,70), channel("Speed"), range(-4, 4, 1), text("Speed")
hslider bounds(10, 150, 280,70), channel("InSkip"), range(0, 1, 0), text("In Skip")
hslider bounds(10, 220, 280,70), channel("InGain"), range(0, 1, 1), text("Input Gain")
hslider bounds(10, 290, 280,70), channel("OutGain"), range(0, 1, 1), text("Output Gain")
</Cabbage>
<CsoundSynthesizer>
<CsOptions>
-d -n
</CsOptions>
;Author: Iain McCurdy (2012)
<CsInstruments>
sr 	= 	44100	
ksmps 	= 	32
nchnls 	= 	2
0dbfs	=	1
gkrecdur	init	0
#define	FILENAME #32BitRecording.raw#

instr	1
	gkRecord	chnget	"Record"		;READ IN CABBAGE WIDGET CHANNELS
	gkPause		chnget	"Pause"
	gkPlayLoop	chnget	"PlayLoop"
	gkPlayOnce	chnget	"PlayOnce"
	gkSpeed		chnget	"Speed"
	gkInSkip	chnget	"InSkip"
	gkInGain	chnget	"InGain"
	gkOutGain	chnget	"OutGain"

	kswitch	changed	gkRecord,gkPlayOnce,gkPlayLoop		;IF EITHER 'PLAY ONCE', 'PLAY LOOP' OR 'RECORD' ARE CHANGED, GENERATE A MOMENTARY '1'
	if kswitch==1 then					;IF SWITCH CHANGE TRIGGER IS '1'
	 reinit RESTART						;BEGIN A REINITIALISATION PASS
	endif							;END OF CONDITIONAL BRANCH
	RESTART:						;A LABEL. BEGIN REINITIALISATION PASS FROM HERE

	if i(gkRecord)=1 then		;IF RECORD BUTTON IS ON...
		turnon 4		;TURN ON RECORD INSTRUMENT
	elseif i(gkRecord)=0 then	;OR ELSE IF RECORD BUTTON IS OFF...
		turnoff2 4,0,0		;TURN OFF RECORD INSTRUMENT
	endif				;END OF THIS CONDITIONAL BRANCH

	if i(gkPlayLoop)=1 then		;IF 'PLAY LOOP' BUTTON IS ON...
		turnon 2		;TURN ON PLAY LOOP INSTRUMENT
	endif				;END OF THIS CONDITIONAL BRANCH

	if i(gkPlayOnce)=1 then		;IF 'PLAY ONCE' BUTTON IS ON...
		turnon 3		;TURN ON PLAY ONCE INSTRUMENT
	endif				;END OF THIS CONDITIONAL BRANCH
endin
		
instr	2	;PLAYBACK LOOPED INSTRUMENT
	if	gkPlayLoop=0	then		;IF PLAY LOOPED BUTTON IS DEACTIVATED THEN...
		turnoff				;...TURNOFF THIS INSTRUMENT
	endif					;END OF CONDITIONAL BRANCH
	ifilelen	filelen	"$FILENAME"
	iInSkip	=	i(gkInSkip)*ifilelen
	kporttime	linseg	0,0.001,0.02
	kSpeed		portk	gkSpeed,kporttime
	if	gkPause!=1	then				;IF PAUSE BUTTON IS NOT ACTIVATED... 
	   aL,aR	diskin2		"$FILENAME",kSpeed,iInSkip,1	;PLAY AUDIO FROM FILE
	  	outs		aL*gkOutGain,aR*gkOutGain	;SEND AUDIO TO OUTPUT
	endif					;END OF CONDITIONAL BRANCH
endin

instr	3	;PLAYBACK ONCE INSTRUMENT
	if	gkPlayOnce=0	then		;IF PLAY ONCE BUTTON IS DEACTIVATED THEN...
		turnoff				;...TURNOFF THIS INSTRUMENT
	endif					;END OF CONDITIONAL BRANCH
	ifilelen	filelen	"$FILENAME"
	iInSkip	=	i(gkInSkip)*ifilelen
	kporttime	linseg	0,0.001,0.02
	kSpeed		portk	gkSpeed,kporttime
	if	gkPause!=1	then				;IF PAUSE BUTTON IS NOT ACTIVATED... 
	  aL,aR	diskin2		"$FILENAME",kSpeed,iInSkip,0	;PLAY AUDIO FROM FILE
	  	outs		aL*gkOutGain,aR*gkOutGain	;SEND AUDIO TO OUTPUT
	  kplaydur	line	0,1,1		;CREATE A RISING VALUE USED AS A TIMER
	  if	kplaydur>=gkrecdur	then	;IF END OF RECORDING IS REACHED...
	    koff	=	0
	    chnset koff,"PlayOnce"
	    turnoff				;- TURN OFF THIS INSTRUMENT IMMEDIATELY.
	  endif					;END OF CONDITIONAL BRANCH
	endif					;END OF CONDITIONAL BRANCH
	krelease	release
	if krelease==1 then
	 chnset	1-krelease,"PlayOnce"
	endif
endin

instr	4	;RECORD
	if	gkPause!=1	then		;IF PAUSE BUTTON IS NOT ACTIVATED...
	  ainL,ainR	ins				;READ AUDIO FROM STEREO INPUT
	  fout "$FILENAME", 6, ainL*gkInGain, ainR*gkInGain	;WRITE MONO AUDIO TO A 32 BIT HEADERLESS FILE (TYPE:6)
	  gkrecdur	line	0,1,1		;GLOBAL VARIABLE USED TO REGISTER THE DURATION OF THE CURRENTLY RECORDED FILE
	endif					;END OF CONDITIONAL BRANCHING	
endin

</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>
; LiveLooper.csd
; Written by Iain McCurdy 2015

; A simple instrument for recording a sample and then playing it back as a loop with a crossfade employed to smooth the join between the beginning and the end of the loop  (flooper2 opcode).
; Maximum loop time is about a minute and a half at sr = 44100

; The crossfade curve shape and its duration can be modified to suit the material being looped 
; The curve shape is based on a fragment of a sine curve 
; If a dip in power is heard at the crossfade point, 'Shape' should be lowered. Conversely, if a hump in power is heard, 'Shape' should be raised.

; The loop can also be played back using the MIDI keyboard (or an external keyboard) in which case the loop will be transposed according to the note played. 
; Unison will be middle C (NN#60). 

; NB. Loop Mode = "Fwd/Bwd" does not seem to crossfade properly when fading from the backwards pass to the forwards pass. Maybe a bug in flooper2?

<Cabbage>
form size(385,325), text("Live Looper"), guirefresh(32), pluginid("LiLp")
image    bounds(  5,  5,375,110), colour(0,0,0,0), outlinecolour("white"), outlinethickness(1), plant("Crossfade"), shape("sharp") {
label    bounds(  0,  4,375, 15), text("Crossfade")
rslider  bounds(  5, 27, 70, 70), range(0.25,2,0.5,0.5), channel("Shape"), text("Shape")
rslider  bounds( 75, 27, 70, 70), range(0.01, 4,1), channel("CFDuration"), text("Duration")
gentable bounds(155, 27,200, 75), tablenumbers(1,2), tablecolours("lime"), identchannel("table"), amprange(0,1,-1), zoom(-1), tablegridcolour(0,0,0,0), tablebackgroundcolour(250,250,250), tablecolour("black")
}

image     bounds(  5,120,190,120), colour(0,0,0,0), outlinecolour("white"), outlinethickness(1), plant("Loop"), shape("sharp") {
label     bounds(  0,  4,190, 15), text("Loop")
button    bounds( 15, 25, 60, 25), fontcolour:0(50,50,50), fontcolour:1(205,205,235), colour:0(10,0,0), colour:1(0,0,130), text("Stop","Stop"),     channel("Stop"),   latched(1), radiogroup(1), value(1)
button    bounds( 15, 55, 60, 25), fontcolour:0(50,50,50), fontcolour:1(255,205,205), colour:0(10,0,0), colour:1(150,0,0), text("Record","Record"), channel("Record"), latched(1), radiogroup(1)
button    bounds( 15, 85, 60, 25), fontcolour:0(50,50,50), fontcolour:1(205,255,205), colour:0(0,10,0), colour:1(0,150,0), text("Play","Play"),     channel("Play"),   latched(1), radiogroup(1)
nslider bounds( 90, 25, 85, 35), range(0, 100000,0), channel("LoopDuration"), text("Loop Duration")
label     bounds( 90, 68, 85, 14), text("Loop Mode")
combobox  bounds( 90, 84, 85, 20), text("Fwd","Bwd","Fwd/Bwd"), channel("LoopMode")
}

image     bounds(200,120,180,120), colour(0,0,0,0), outlinecolour("white"), outlinethickness(1), plant("Mixer"), shape("sharp") {
label     bounds(  0,  4,180, 15), text("Mixer")
rslider   bounds( 10, 30, 80, 80), range(0, 1,1), channel("DryLevel"), text("Dry Level")
rslider   bounds( 90, 30, 80, 80), range(0, 1,1), channel("LoopLevel"), text("Loop Level")
}

keyboard  bounds( 0, 245,385, 80)
</Cabbage>

<CsoundSynthesizer>

<CsOptions>   
-dm0 -n -+rtmidi=null -M0
</CsOptions>

<CsInstruments>

sr = 44100
ksmps = 16
nchnls = 2
0dbfs = 1
massign 0,3

giCF_Curve	ftgen	1,0,8193,-7,0,8192,1	; CROSSFADE CURVE
giCF_Curve2	ftgen	2,0,8193,-7,1,8192,0	; CROSSFADE CURVE
giBufferL	ftgen	3,0,1048576*4,2,0	; AUDIO BUFFER (LEFT CHANNEL)
giBufferR	ftgen	4,0,1048576*4,2,0	; AUDIO BUFFER (RIGHT CHANNEL)
gitri		ftgen	0,0,4096,-7,0,2048,1,2048,0

gkLoopDuration	init	0			; LOOP DURATION (WILL BE UPDATED WHILE RECORDING)
              
instr 1
 gaL,gaR	ins				; READ AUDIO INPUT
 ;gaL	poscil	0.2,440
 ;gaR	=	gaL

 kShape	chnget	"Shape"				; CURVE SHAPE
 kShape	init	0.5				; CURVE INITIAL VALUE (TO AVOID AN INITIAL ZERO)
 gkCFDuration	chnget	"CFDuration"		; CROSSFADE DURATION
 kPortTime	linseg	0,0.01,0.05		; RAMPING UP PORTAMENTO TIME
 gkDryLevel	chnget	"DryLevel"		; DRY (LIVE) LEVEL
 gkLoopLevel	chnget	"LoopLevel"		; LOOPER LEVEL
 gkDryLevel	portk	gkDryLevel,kPortTime	; SMOOTH CHANGES TO DRY LEVEL VALUE
 gkLoopLevel	portk	gkLoopLevel,kPortTime	; SMOOTH CHANGES TO LOOPER LEVEL
 gkLoopMode	chnget	"LoopMode"		; READ IN LOOP MODE COMBOBOX WIDGET
 gkLoopMode	init	1			; INITIAL VALUE OF LOOP MODE (TO AVOID AN INITIAL ZERO)
 
 ktrig	changed	kShape				; GENERATE A TRIGGER (TO REBUILD CROSSFADE FUNCTION) IF SHAPE CONTROL IS MOVED
 if ktrig==1 then				; IF A TRIGGER HAS BEEN GENERATED
  reinit RebuildCurve				; BEGIN A REINITIALISATION PASS FROM THE LABEL 'RebuildCurve'
 endif						; END OF CONDITIONAL BRANCH
 RebuildCurve:					; LABEL. START REINITIALISATION FROM HERE
 icount	=	0				; COUNTER FIRST VALUE
 iftlen	=	ftlen(giCF_Curve)		; FUNCTION TABLE LENGTH
 loop:								; LOOP BEGINNING                                            
 ix	=	icount/(iftlen)                                  
 iy	=	((sin((ix+1.5)*$M_PI)*0.5)+0.5)^i(kShape)	; APPLY FORMULA TO DERIVE Y        
 	tableiw iy,icount,giCF_Curve				; WRITE Y VALUE TO TABLE                         
 iy	=	((sin((ix+0.5)*$M_PI)*0.5)+0.5)^i(kShape)	; APPLY FORMULA TO DERIVE Y        
 	tableiw iy,icount,giCF_Curve2				; **THE SECOND TABLE IS ESSENTIALLY FOR DISPLAY PURPOSES ONLY**
 loop_lt,icount,1,iftlen,loop					; 
 rireturn							; RETURN FROM REINITIALISATION PASS
 if ktrig==1 then						; IF CHANGED SHAPE CONTROL TRIGGER HAS BEEN GENERATED...
  chnset	"tablenumbers(1,2)","table"			; ...UPDATE CABBAGE TABLE DISPLAY
 endif								; END OF CONDITIONAL BRANCH
 
 gkStop		chnget	"Stop"			; READ IN TRANSPORT BUTTON WIDGETS
 gkRecord	chnget	"Record"		;
 gkPlay		chnget	"Play"			;

 if trigger(gkRecord,0.5,0)==1 then		; IF RECORD BUTTON IS PRESSED...
  event	"i",2,0,0.1				; ...START RECORD INSTRUMENT
 endif						; END OF CONDITIONAL BRANCH

 if trigger(gkPlay,0.5,0)==1 then		; IF PLAY BUTTON IS PRESSED...
  event	"i",3,0,-1				; ...START PLAY INSTRUMENT WITH A HELD NOTE
 endif						; END OF CONDITIONAL BRANCH

 	outs	gaL*gkDryLevel, gaR*gkDryLevel	; DRY (LIVE) OUTPUT
endin

instr	2	; Record
 p3	=	(ftlen(giBufferL)-1)/sr		; p3 (INSTRUMENT DURATION) LIMITED TO THE LENGTH OF THE FUNCTION TABLE
 aPtr	line	0,1,sr				; POINTER FOR WRITING INTO THE FUNCTION TABLE
 gkLoopDuration	line	0, 1, 1			; LOOP DURATION		
 	tablew	gaL,aPtr,giBufferL		; WRITE LEFT CHANNEL TO TABLE
 	tablew	gaR,aPtr,giBufferR		; WRITE RIGHT CHANNEL TO TABLE
 if gkRecord!=1 then				; IF RECORD BUTTON IS NO LONGER ACTIVE (I.E. STOP OR PLAY HAVE BEEN PRESSED)...
  turnoff					; ...TURN THIS INSTRUMENT OFF
 endif						; END OF CONDITIONAL BRANCH
 
 kLoopDuration	=	int(gkLoopDuration*100) / 100	; LOOP DURATION VALUE FOR PRINTING TO CABBAGE NUMBERBOX (QUANTISED TO NEAREST 0.01) 
 if changed(kLoopDuration)==1 then			; IF QUANTISED LOOP DURATION HAS CHANGED
  chnset	kLoopDuration,"LoopDuration"		; SEND NEW VALUE TO NUMBERBOX
 endif						; END OF CONDITIONAL BRANCH
endin

instr	3	; Play
 iMIDIActiveValue	=	1		; IF MIDI ACTIVATED
 iMIDIflag		=	0		; IF BUTTON ACTIVATED
 mididefault	iMIDIActiveValue, iMIDIflag	; IF NOTE IS MIDI ACTIVATED REPLACE iMIDIflag WITH iMIDIActiveValue 

 if iMIDIflag==0 then				; IF PLAYBACK HAS BEEN TRIGGERED BY THE GUI BUTTON...
  kpitch	=		1		; ...PITCH=1 (NO TRANSPOSITION)
 else						; OTHERWISE (TRIGGERED BY MIDI KEYBOARD)
  kpitch	=		cpsmidi()/cpsmidinn(60)		; DERIVE RATIO BASED ON NOTE NUMBER 60 AS THE POINT OF UNISON (IE. RATIO=1) 
 endif						; END OF CONDITIONAL BRANCH
 
 kloopstart	=	0			; ALWAYS START LOOP FROM THE BEGINNING
 gkCFDuration	limit	gkCFDuration,0.01,gkLoopDuration/2	; LIMIT CROSSFADE DURATION TO PREVENT GLITCHES IF CROSSFADE DURATION IS LONG AND RECORDING IS SHORT
 istart		=	0			; INITIAL START (BEFORE LOOPING)
 iskip		=	0			; INITIALISATION SKIPPING
 if changed(gkLoopMode)==1 then			; IF LOOP MODE HAS BEEN CHANGED...
  reinit UpdateFlooper				; ...REINITIALISE FROM LABEL 'UpdateFlooper'
 endif						; END OF CONDITIONAL BRANCH
 kAntiClick	cossegr	0,0.1,1,36000,1,0.1,0	; cossegr DOESN'T SEEM TO WORK PROPERLY AT THE MOMENT :-(
 UpdateFlooper:					; LABEL. BEGIN REINITIALISATION PASS FROM HERE

 ; INSTANTIATE flooper2 TWICE. ONCE FOR EACH STEREO CHANNEL
 aL	flooper2	gkLoopLevel*kAntiClick, kpitch, kloopstart, gkLoopDuration, gkCFDuration, giBufferL, istart, i(gkLoopMode)-1, giCF_Curve, iskip
 aR	flooper2	gkLoopLevel*kAntiClick, kpitch, kloopstart, gkLoopDuration, gkCFDuration, giBufferR, istart, i(gkLoopMode)-1, giCF_Curve, iskip
	outs	aL,aR	; SEND AUDIO TO OUTPUT
 
 if gkPlay!=1&&iMIDIflag==0 then				; IF 'PLAY' BUTTON IS NOT ACTIVE - I.E. 'STOP' OR 'RECORD' ARE ACTIVE...
  turnoff					; TURN THIS INSTRUMENT OFF (PERMIT RELEASE STAGE OF linsegr)
 endif						; END OF CONDITIONAL BRANCH
endin

</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]				
</CsScore>

</CsoundSynthesizer>
; PvsRecPlay.csd
; Written by Iain McCurdy, 2012

<Cabbage>
form caption("PVS Rec/Play") size(300, 410), pluginid("pvrp") style("legacy")

groupbox bounds(  0,  0,300, 95), text("Transport")

label    bounds( 10, 75, 70, 14), text("Record") 
label    bounds( 80, 75, 70, 14), text("Pause") 
label    bounds(150, 75, 70, 14), text("Play Loop") 
label    bounds(220, 75, 70, 14), text("Play Once") 
checkbox bounds( 10, 25, 70, 50), channel("Record"), value(0), shape("square"), colour("red")
checkbox bounds( 80, 25, 70, 50), channel("Pause"), value(0), shape("square"), colour("Blue")
checkbox bounds(150, 25, 70, 50), channel("PlayLoop"), value(0), shape("square")
checkbox bounds(220, 25, 70, 50), channel("PlayOnce"), value(0), shape("square"), colour("yellow")

hslider bounds(  0,  95, 300,50), channel("Speed"), range(-4.00, 4.00, 1)	;, text("Speed")
label   bounds(100, 135, 100,13), text("Speed") , align(centre)
hslider bounds(  0, 145, 300,50), channel("Pitch"), range(0.25, 4.00, 1)	;, text("Pitch")
label   bounds(100, 185, 100,13), text("Pitch") , align(centre) 
hslider bounds(  0, 195, 300,50), channel("LoopBeg"), range(0, 1, 0)	;, text("Loop Begin")
label   bounds(100, 235, 100,13), text("Loop Begin")  , align(centre)
hslider bounds(  0, 245, 300,50), channel("LoopEnd"), range(0, 1, 1)	;, text("Loop End")
label   bounds(100, 285, 100,13), text("Loop End")  , align(centre)
hslider bounds(  0, 295, 300,50), channel("InGain"), range(0, 1, 1)	;, text("Input Gain")
label   bounds(100, 335, 100,13), text("Input Gain")  , align(centre)
hslider bounds(  0, 345, 300,50), channel("OutGain"), range(0, 1, 1)	;, text("Output Gain")
label   bounds(100, 385, 100,13), text("Output Gain")  , align(centre)

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-d -n
</CsOptions>

<CsInstruments>

sr 	= 	44100	
ksmps 	= 	32
nchnls 	= 	2
0dbfs	=	1

;Author: Iain McCurdy (2012)

gistorageL	ftgen	0,0,1048576,-7,0	;AUDIO DATA STORAGE SPACE (ABOUT 23 SECONDS)
gistorageR	ftgen	0,0,1048576,-7,0	;AUDIO DATA STORAGE SPACE (ABOUT 23 SECONDS)
gkRecDur	init	0			;DURATION OF THE MOST RECENTLY RECORDED BUFFER
gibuflen	init	60			;PVS BUFFER LENGTH

instr	1	;READ IN WIDGETS AND START AND STOP THE VARIOUS RECORDING AND PLAYBACK INSTRUMENTS
	gitablelen	=	ftlen(gistorageL)	;DERIVE TABLE LENGTH
	
	gkRecord	chnget	"Record"		;READ IN CABBAGE WIDGET CHANNELS
	gkPause		chnget	"Pause"
	gkPlayLoop	chnget	"PlayLoop"
	gkPlayOnce	chnget	"PlayOnce"
	gkPlayOnceTrig	changed	gkPlayOnce
	gkSpeed		chnget	"Speed"
	gkPitch		chnget	"Pitch"
	gkLoopBeg	chnget	"LoopBeg"
	gkLoopEnd	chnget	"LoopEnd"
	gkInGain	chnget	"InGain"
	gkOutGain	chnget	"OutGain"

#define	TURN_ON(NAME)
	#
	i$NAME	nstrnum	"$NAME"
	kOnTrig$NAME	trigger	gk$NAME,0.5,0
	if kOnTrig$NAME==1 then		;IF BUTTON IS TURNED ON...
	 event	"i",i$NAME,0,3600
	endif
	#
	$TURN_ON(Record)
	$TURN_ON(PlayOnce)
	$TURN_ON(PlayLoop)
endin

instr	Record
	if gkRecord==0 then		;IF BUTTON IS TURNED ON...
	 turnoff
	endif
	
	if	gkPause=1	goto SKIP_RECORD		;IF PAUSE BUTTON IS ACTIVATED TEMPORARILY SKIP RECORDING PROCESS
	ainL,ainR	ins					;READ AUDIO FROM LIVE INPUT CHANNEL 1

;MACRO THAT DEFINES THE CODED NEEDED TO RECORD A SINGLE CHANNEL PVS BUFFER
#define	REC_BUF(CHAN)
	#
	iFFTsize	=	1024
	ioverlap	=	256
	iwinsize	=	1024
	iwintype	=	1
	;kPhOffset	=	0
	f_anal$CHAN	pvsanal		ain$CHAN, iFFTsize, ioverlap, iwinsize, iwintype	;ANALYSE THE LEFT CHANNEL AUDIO. OUTPUT AN F-SIGNAL.
	ibuf$CHAN,ktime	pvsbuffer   	f_anal$CHAN, gibuflen					;BUFFER FSIG
	gkhandle$CHAN	init 		ibuf$CHAN						;INITIALISE HANDLE TO BUFFER
	#
	;EXPAND BUFFER TWICE, ONCE FOR EACH STEREO CHANNEL
	$REC_BUF(L)
	$REC_BUF(R)
	gkRecDur	timeinsts	;DURATION OF CURRENT RECORDING
	if gkRecDur>=gibuflen then	;IF BUFFER IS FULL (I.E. DO NOT OVERWRITE THE BEGINNING OF THE BUFFER
	 turnoff			;TURN OFF THIS INSTRUMENT
	endif				;ENDO OF THIS CONDITIONAL BRANCH
	SKIP_RECORD:			;JUMP TO HERE WHEN 'PAUSE' BUTTON IS ACTIVE
endin

instr	PlayLoop
	if gkPlayLoop==0 then		;IF BUTTON IS TURNED ON...
	 turnoff
	endif

	if gkPlayLoop==0 then					;IF 'PLAY LOOPED' BUTTON IS INACTIVE...
	 turnoff						;TURN THIS INSTRUMENT OFF
	endif							;END OF THIS CONDITIONAL BRANCH
	if	gkPause=1	goto SKIP_PLAY_LOOP		;IF PAUSE BUTTON IS ACTIVATED SKIP PLAYBACK CODE
	kporttime	linseg	0,0.001,0.05			;PORTAMENTO TIME RAMPS UP RAPIDLY TO A HELD VALUE
	kLoopBeg	portk	gkLoopBeg, kporttime		;APPLY PORTAMENTO SMOOTHING TO CHANGES OF LOOP BEGIN SLIDER
	kLoopEnd	portk	gkLoopEnd, kporttime		;APPLY PORTAMENTO SMOOTHING TO CHANGES OF LOOP END SLIDER
	kLoopBeg	=	kLoopBeg * gkRecDur		;RESCALE gkLoopBeg (RANGE 0-1) TO BE WITHIN THE RANGE 0-FILE_LENGTH.
	kLoopEnd	=	kLoopEnd * gkRecDur		;RESCALE gkLoopEnd (RANGE 0-1) TO BE WITHIN THE RANGE 0-FILE_LENGTH.
	kLoopLen	=	abs(kLoopEnd - kLoopBeg)	;DERIVE LOOP LENGTH FROM LOOP START AND END POINTS
	kPlayPhasFrq	divz	gkSpeed, kLoopLen, 0.00001	;SAFELY DIVIDE, PROVIDING ALTERNATIVE VALUE IN CASE DENOMINATOR IS ZERO 
	kPlayNdx	phasor	kPlayPhasFrq			;DEFINE PHASOR POINTER FOR BUFFER READ INDEX
	;kLoopBeg	=	(kLoopBeg < kLoopEnd ? kLoopBeg : kLoopEnd)	;CHECK IF LOOP-BEGINNING AND LOOP-END SLIDERS HAVE BEEN REVERSED
	kPlayNdx	=	(kPlayNdx*kLoopLen) + kLoopBeg	;RESCALE INDEX POINTER ACCORDING TO LOOP LENGTH AND LOOP BEGINING

	f_bufL 		pvsbufread  	kPlayNdx , gkhandleL	;READ BUFFER
	f_scaleL	pvscale 	f_bufL, gkPitch		;RESCALE FREQUENCIES
	aL 		pvsynth  	f_scaleL               	;RESYNTHESIZE THE f-SIGNAL AS AN AUDIO SIGNAL	

	f_bufR 		pvsbufread  	kPlayNdx , gkhandleR	;READ BUFFER
	f_scaleR	pvscale 	f_bufR, gkPitch		;RESCALE FREQUENCIES
	aR 		pvsynth  	f_scaleR               	;RESYNTHESIZE THE f-SIGNAL AS AN AUDIO SIGNAL	

	    		outs	aL*gkOutGain,aR*gkOutGain	;SEND AUDIO TO OUTPUTS
	SKIP_PLAY_LOOP:						;JUMP TO HERE WHEN 'PAUSE' BUTTON IS ACTIVE
endin

instr	PlayOnce
	if gkPlayOnce==0 then		;IF BUTTON IS TURNED ON...
	 turnoff
	endif

	if	gkPause=1	goto SKIP_PLAY_ONCE		;IF PAUSE BUTTON IS ACTIVATED SKIP PLAYBACK
	
	kPlayOnceNdx	init	0				;INITIALISE PLAYBACK POINTER
	if kPlayOnceNdx<=gkRecDur then				;IF PLAYBACK IS NOT YET COMPLETED THEN CONTINUE PLAYBACK
	 kLoopBeg	=	gkLoopBeg * gkRecDur		;RESCALE gkLoopBeg (RANGE 0-1) TO BE WITHIN THE RANGE 0-FILE_LENGTH.
	 kLoopEnd	=	gkLoopEnd * gkRecDur		;RESCALE gkLoopEnd (RANGE 0-1) TO BE WITHIN THE RANGE 0-FILE_LENGTH.
	 kPlayOnceNdx	line	0,1,1				;CREATE A MOVING POINTER
	 if kLoopEnd>kLoopBeg then				;IF LOOP END SLIDER IS AT A LATER POSITION TO LOOP BEGIN SLIDER...
	  kPlayOnceNdx	=	(kPlayOnceNdx*gkSpeed)+kLoopBeg	;RESCALE MOVING POINTER VALUE ACCORDING TO LOOP BEGIN POSITION AND SPEED SLIDER SETTING
	  if kPlayOnceNdx>=kLoopEnd then			;IF PLAY INDEX IS EQUAL TO OR GREATER THAN THE DURATION OF THE RECORDED BUFFER (STOP PLAYBACK)...
	   turnoff						;TURN THIS INSTRUMENT OFF
	  endif							;END OF CONDITIONAL BRANCH
	 else							;OTHERWISE (I.E. LOOP BEGIN SLIDER IS AT A LATER POSITION THAT LOOP END)
	  kPlayOnceNdx	=	kLoopBeg-(kPlayOnceNdx*gkSpeed)	;RESCALE MOVING POINTER VALUE ACCORDING TO LOOP BEGIN POSITION AND SPEED SLIDER SETTING
	  if kPlayOnceNdx<=kLoopEnd then			;IF PLAY POINTER HAS REACHED THE BEGINNING OF THE PRESCRIBED CHUNK BETWEEN LOOP BEGIN AND LOOP END (STOP PLAYBACK)...
	   turnoff						;TURN THIS INSTRUMENT OFF
	  endif							;END OF CONDITIONAL BRANCH
	 endif							;END OF CONDITIONAL BRANCH
	endif
	f_bufL 		pvsbufread  	kPlayOnceNdx , gkhandleL	;READ BUFFER
	f_scaleL	pvscale 	f_bufL, gkPitch			;RESCALE FREQUENCIES
	aL 		pvsynth  	f_scaleL               		;RESYNTHESIZE THE f-SIGNAL AS AN AUDIO SIGNAL	

	f_bufR 		pvsbufread  	kPlayOnceNdx , gkhandleR	;READ BUFFER
	f_scaleR	pvscale 	f_bufR, gkPitch			;RESCALE FREQUENCIES
	aR 		pvsynth  	f_scaleR                	;RESYNTHESIZE THE f-SIGNAL AS AN AUDIO SIGNAL	

	  	outs		aL*gkOutGain,aR*gkOutGain		;SEND AUDIO TO OUTPUT
	;else
	; turnoff
	;endif							;END OF CONDITIONAL BRANCH

	SKIP_PLAY_ONCE:
	krelease	release
	if krelease==1 then
	 chnset	1-krelease,"PlayOnce"
	endif
endin

</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>; TabRecPlay.csd
; Written by Iain McCurdy, 2012

<Cabbage>
form caption("Tab.Rec/Play") size(300, 360), pluginid("tbrp") style("legacy")

groupbox bounds(  0,  0,300, 95), text("Transport")

label    bounds( 10, 75, 70, 14), text("Record") 
label    bounds( 80, 75, 70, 14), text("Pause") 
label    bounds(150, 75, 70, 14), text("Play Loop") 
label    bounds(220, 75, 70, 14), text("Play Once") 
checkbox bounds( 10, 25, 70, 50), channel("Record"), value(0), shape("square"), colour("red")
checkbox bounds( 80, 25, 70, 50), channel("Pause"), value(0), shape("square"), colour("Blue")
checkbox bounds(150, 25, 70, 50), channel("PlayLoop"), value(0), shape("square")
checkbox bounds(220, 25, 70, 50), channel("PlayOnce"), value(0), shape("square"), colour("yellow")   

hslider bounds(  0,  95, 300,50), channel("Speed"), range(0, 4, 1)	;, text("Speed")
label   bounds(100, 135, 100,13), text("Speed"), align(centre)
hslider bounds(  0, 145, 300,50), channel("LoopBeg"), range(0, 1, 0)	;, text("Loop Begin")
label   bounds(100, 185, 100,13), text("Loop Begin"), align(centre)
hslider bounds(  0, 195, 300,50), channel("LoopEnd"), range(0, 1, 1)	;, text("Loop End")
label   bounds(100, 235, 100,13), text("Loop End"), align(centre)
hslider bounds(  0, 245, 300,50), channel("InGain"), range(0, 1, 1)	;, text("Input Gain")
label   bounds(100, 285, 100,13), text("Input Gain"), align(centre)
hslider bounds(  0, 295, 300,50), channel("OutGain"), range(0, 1, 1)	;, text("Output Gain")
label   bounds(100, 335, 100,13), text("Output Gain"), align(centre)

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-d -n
</CsOptions>

<CsInstruments>

sr 	= 	44100	
ksmps 	= 	32
nchnls 	= 	2
0dbfs	=	1

;Author: Iain McCurdy (2012)

gistorageL	ftgen	0,0,1048576,-7,0	;AUDIO DATA STORAGE SPACE (ABOUT 23 SECONDS)
gistorageR	ftgen	0,0,1048576,-7,0	;AUDIO DATA STORAGE SPACE (ABOUT 23 SECONDS)
gkRecDur	init	0

instr	1
	gitablelen	=	ftlen(gistorageL)	;DERIVE TABLE LENGTH
	
	gkRecord	chnget	"Record"		;READ IN CABBAGE WIDGET CHANNELS
	gkPause		chnget	"Pause"
	gkPlayLoop	chnget	"PlayLoop"
	gkPlayOnce	chnget	"PlayOnce"	
	
	gkPlayOnceTrig	changed	gkPlayOnce
	gkSpeed		chnget	"Speed"
	gkLoopBeg	chnget	"LoopBeg"
	gkLoopEnd	chnget	"LoopEnd"
	gkInGain	chnget	"InGain"
	gkOutGain	chnget	"OutGain"

#define	TURN_ON_OFF(NAME)
	#
	i$NAME	nstrnum	"$NAME"
	kOnTrig$NAME	trigger	gk$NAME,0.5,0
	kOffTrig$NAME	trigger	gk$NAME,0.5,1
	if kOnTrig$NAME==1 then		;IF BUTTON IS TURNED ON...
	 event	"i",i$NAME,0,3600
	elseif kOffTrig$NAME==1 then		;IF BUTTON IS TURNED ON...
	 turnoff2,i$NAME,0,0
	endif
	#
	$TURN_ON_OFF(Record)
	$TURN_ON_OFF(PlayOnce)
	$TURN_ON_OFF(PlayLoop)
endin

instr	Record
	if	gkPause=1	goto SKIP_RECORD		;IF PAUSE BUTTON IS ACTIVATED TEMPORARILY SKIP RECORDING PROCESS

	    ainL,ainR	ins					;READ AUDIO FROM LIVE INPUT CHANNEL 1
	    aRecNdx	line		0,gitablelen/sr,1	;CREATE A POINTER FOR WRITING TO TABLE - FREQUENCY OF POINTER IS DEPENDENT UPON TABLE LENGTH AND SAMPLE RATE
	    aRecNdx	=		aRecNdx*gitablelen	;RESCALE POINTER ACCORDING TO LENGTH OF FUNCTION TABLE 
	    gkRecDur	downsamp	aRecNdx			;CREATE A K-RATE GLOBAL VARIABLE THAT WILL BE USED BY THE 'PLAYBACK' INSTRUMENT TO DETERMINE THE LENGTH OF RECORDED DATA			
	  		tablew		ainL*gkInGain,  aRecNdx, gistorageL;WRITE AUDIO TO AUDIO STORAGE TABLE
	  		tablew		ainR*gkInGain,  aRecNdx, gistorageR;WRITE AUDIO TO AUDIO STORAGE TABLE
	    if	gkRecDur>=gitablelen	then			;IF MAXIMUM RECORD TIME IS REACHED...
		kRecord=0
	    endif						;END OF CONDITIONAL BRANCH
	SKIP_RECORD:
endin

instr	PlayLoop
	if gkPlayLoop==0 then
	 turnoff
	endif
	if	gkPause=1	goto SKIP_PLAY_LOOP			;IF PAUSE BUTTON IS ACTIVATED SKIP ALL RECORDING AND PLAYBACK...


	kporttime	linseg	0,0.001,0.05			;PORTAMENTO TIME RAMPS UP RAPIDLY TO A HELD VALUE
	kLoopBeg	portk	gkLoopBeg, kporttime		;APPLY PORTAMENTO SMOOTHING TO CHANGES OF LOOP BEGIN SLIDER
	kLoopEnd	portk	gkLoopEnd, kporttime		;APPLY PORTAMENTO SMOOTHING TO CHANGES OF LOOP END SLIDER
	kLoopBeg	=	kLoopBeg * gkRecDur		;RESCALE gkLoopBeg (RANGE 0-1) TO BE WITHIN THE RANGE 0-FILE_LENGTH. NEW OUTPUT VARIABLE kLoopBeg.
	kLoopEnd	=	kLoopEnd * gkRecDur		;RESCALE gkLoopEnd (RANGE 0-1) TO BE WITHIN THE RANGE 0-FILE_LENGTH. NEW OUTPUT VARIABLE kLoopEnd.
	kLoopLen	=	kLoopEnd - kLoopBeg		;DERIVE LOOP LENGTH FROM LOOP START AND END POINTS
	kPlayPhasFrq	divz	gkSpeed,    (kLoopLen/sr),       0.00001	;SAFELY DIVIDE, PROVIDING ALTERNATIVE VALUE INCASE DENOMINATOR IS ZERO 
	aPlayNdx		phasor	kPlayPhasFrq				;DEFINE PHASOR POINTER FOR TABLE INDEX
	kLoopBeg	=	(kLoopBeg < kLoopEnd ? kLoopBeg : kLoopEnd)	;CHECK IF LOOP-BEGINNING AND LOOP-END SLIDERS HAVE BEEN REVERSED
	aLoopLen	interp	abs(kLoopLen)
	aLoopBeg	interp	kLoopBeg
	aPlayNdx	=	(aPlayNdx*aLoopLen) + aLoopBeg	;RESCALE INDEX POINTER ACCORDING TO LOOP LENGTH AND LOOP BEGINING
	aL		tablei	aPlayNdx,    gistorageL		;READ AUDIO FROM AUDIO STORAGE FUNCTION TABLE
	aR		tablei	aPlayNdx,    gistorageR		;READ AUDIO FROM AUDIO STORAGE FUNCTION TABLE
	    		outs	aL*gkOutGain,aR*gkOutGain		;SEND AUDIO TO OUTPUTS

	SKIP_PLAY_LOOP:
endin

instr	PlayOnce
	koff	=	0

	if	gkPause=1	goto SKIP_PLAY_ONCE			;IF PAUSE BUTTON IS ACTIVATED SKIP ALL RECORDING AND PLAYBACK...

	kPlayOnceNdx	init	0
	;kPlayOnceTrig	changed	kPlayOnce
	if kPlayOnceNdx<=gkRecDur then				;IF PLAYBACK IS NOT YET COMPLETED THEN...
	 kLoopBeg	=	gkLoopBeg * gkRecDur		;RESCALE gkLoopBeg (RANGE 0-1) TO BE WITHIN THE RANGE 0-FILE_LENGTH. NEW OUTPUT VARIABLE kLoopBeg.
	 kLoopEnd	=	gkLoopEnd * gkRecDur		;RESCALE gkLoopEnd (RANGE 0-1) TO BE WITHIN THE RANGE 0-FILE_LENGTH. NEW OUTPUT VARIABLE kLoopEnd.
	 if kLoopEnd>kLoopBeg then				;IF LOOP END SLIDER IS AT A LATER POSITION TO LOOP BEGIN SLIDER...
	  aPlayOnceNdx	line	0,1,1				;CREATE A MOVING POINTER
	  aPlayOnceNdx	=	(aPlayOnceNdx*gkSpeed)+kLoopBeg;RESCALE MOVING POINTER VALUE ACCORDING TO LOOP BEGIN POSITION AND SPEED SLIDER SETTING
	  kPlayOnceNdx	downsamp	aPlayOnceNdx		;CREATE kndx, A K-RATE VERSION OF andx. THIS WILL BE USED TO CHECK IF PLAYBACK OF THE DESIRED CHUNK OF AUDIO HAS COMPLETED.
	  if kPlayOnceNdx>=kLoopEnd then	   
	   turnoff
	  endif
	 else						;OTHERWISE (I.E. LOOP BEGIN SLIDER IS AT A LATER POSITION THAT LOOP END)
	  aPlayOnceNdx	line	0,1,-1			;CREATE A NEGATIVE MOVING POINTER
	  aPlayOnceNdx	=	kLoopBeg-(aPlayOnceNdx*gkSpeed);RESCALE MOVING POINTER VALUE ACCORDING TO LOOP BEGIN POSITION AND SPEED SLIDER SETTING
	  kPlayOnceNdx	downsamp	aPlayOnceNdx	;CREATE kndx, A K-RATE VERSION OF andx
	  if kPlayOnceNdx<=kLoopEnd then
	   turnoff
	  endif
	 endif						;END OF CONDITIONAL BRANCH
	 ;OUT 	OPCODE 		INDEX        | FUNCTION_TABLE
	 aL	tablei		aPlayOnceNdx*sr,    gistorageL	;READ AUDIO FROM AUDIO STORAGE FUNCTION TABLE
	 aR	tablei		aPlayOnceNdx*sr,    gistorageR	;READ AUDIO FROM AUDIO STORAGE FUNCTION TABLE
	  	outs		aL*gkOutGain,aR*gkOutGain		;SEND AUDIO TO OUTPUT
	else
	 turnoff
	endif							;END OF CONDITIONAL BRANCH

	SKIP_PLAY_ONCE:
	krelease	release
	if krelease==1 then
	 chnset	1-krelease,"PlayOnce"
	endif
endin

</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>; FunctionGenerator.csd
; Written by Iain McCurdy, 2015
	
; GENERATOR section generates a function using one of a variety of methods. 
; (The range of values output by 'GENERATOR' are always within the range zero to 1.)

; TRANSFORM warps the function output by GENERATOR in one of a variety of ways.
; (Can also be bypassed.)

; RESCALE rescales the function to lie between the given limits.

; GENERATOR
; sine		-	sine wave LFO
; Triangle	-	triangle wave LFO
; Square	-	square wave LFO
; Pulse		-	pulse wave LFO.
;			'Width' controls the percentage of the pulse which is on/high.
;			N.B. the pulse wave can also be inverted by swapping using the rescale values
; Saw Up	-	upward sawtooth wave LFO
; Saw Dn	-	downward sawtooth wave LFO
; Randomi	-	interpolating random function generator
; Randomh	-	sample and hold random function generator. 'Dereg.' deregulates the rate at which new random values are generated.
; Rspline	-	random spline function generator
; Gauss.	-	gaussian noise. Probably to be used with the 'sample and hold' 'TRANSFORM' mechanism
; Exp.		-	exponential noise. Probably to be used with the 'sample and hold' 'TRANSFORM' mechanism
; Rand.Loop	-	loop of discrete random values.
;			'Number' sets the number of values in the loop
;			'Reset' triggers a new set of values 

; TRANSFORM
; Bypass	-	bypasses TRANSFORM completely 
; Port		-	adds portamento (a kind of lowpass filter). This will work most noticably with stepped function such as Randomh.
; Lineto	-	creates a straight line across the defined duration between stepped values.
;			This transformation needs a stepped GENERATOR, such as randomh, in order to function.
; Samp.Hold	-	applies a sample and hold function to the generated function, retriggered at the defined rate.
; Power Skew	-	skews the function using a 'power of' mathematical procedure.
;			'Power' values greater than '1' will skew the function increasingly to the middle of the range.
;			Values less than '1' will skew the function increasingly to the edges of the range.
;			With a 'Power' value of 1 no skewing will occur.
; Limit Skew	-	Skews the function in favour of the one or the other of the limits.
;			Values less than '1' will skew the function in favour of the lower limit.
;			Values greater than '1' will skew the function in favour of the upper limit.
; Gauss.Noise	-	Adds a defined amount of gaussian noise to the function.
; Dual Port.	-	Dual portamento in which a different portamento time can be defined for rising or falling values
; Quantise	-	Quantise the values of the function. 
;			Bear in mind that the function will normally lie within the range zero to '1'.
;			A value of zero disables this function.
		
<Cabbage>
form caption("MIDI Function Generator"), size(560,115), pluginid("FnGn") style("legacy")

image    bounds(  5,  5,150,105), colour("black"), shape("rounded"), outlinethickness("4"), outlinecolour("white")
label    bounds( 10,  9,140, 11), text("G E N E R A T O R"), fontcolour("WHITE")
combobox bounds( 30, 30,100, 20), channel("generator"), text("Sine","Triangle","Square","Pulse","Saw Up","Saw Down","Randomi","Randomh","Rspline","Gauss.Noise","Exp.Noise","Rand.Loop")
rslider  bounds( 10, 55, 50, 50), channel("frq"), text("Freq."), range(0.01,100,1,0.375,0.01), identchannel("frqID")
rslider  bounds( 60, 55, 50, 50), channel("wid"), text("Width"), range(1,99,50,1,1), identchannel("widID"), visible(0)
rslider  bounds( 60, 55, 50, 50), channel("DeReg"), text("Dereg."), range(0,4,0,1,0.001), identchannel("DeRegID"), visible(0)
rslider  bounds( 10, 55, 50, 50), channel("frq1"), text("Freq.1"), range(0.01,100,1,0.5,0.01), identchannel("frq1ID"), visible(0)
rslider  bounds( 60, 55, 50, 50), channel("frq2"), text("Freq.2"), range(0.01,100,1,0.5,0.01), identchannel("frq2ID"), visible(0)
rslider  bounds( 10, 55, 50, 50), channel("lambda"), text("Lambda"), range(0.01,1,0.125,0.5,0.001), identchannel("lambdaID"), visible(0)
combobox bounds( 56, 60, 45, 20), channel("number"), text("2","3","4","5","6","7","8","9","10","11","12","13","14","15","16"), value(7), identchannel("numberID"), visible(0)
label    bounds( 56, 80, 45, 12), text("Number"), identchannel("numberID2"), visible(0)
button   bounds(108, 60, 42, 23), text("Reset","Reset"), channel("reset"), latched(0), identchannel("resetID"), visible(0)

image    bounds(160,  5,130,105), colour("black"), shape("rounded"), outlinethickness("4"), outlinecolour("white"), plant("transform") {
label    bounds(  5,  9,120, 11), text("T R A N S F O R M"), fontcolour("WHITE")
combobox bounds( 15, 30,100, 20), channel("transform"), text("Bypass","Port","Lineto","Samp.Hold","Power Skew","Limit Skew","Gauss.Noise","Dual Port.","Quantise")
rslider  bounds( 40, 55, 50, 50), channel("time"), text("Time"), range(0.002,1,0.1,0.5,0.001), identchannel("timeID"), visible(0)
rslider  bounds( 15, 55, 50, 50), channel("timeUp"), text("Time Up"), range(0.002,1,0.003,0.5,0.001), identchannel("timeUpID"), visible(0)
rslider  bounds( 65, 55, 50, 50), channel("timeDn"), text("Time Dn."), range(0.002,1,0.1,0.5,0.001), identchannel("timeDnID"), visible(0)
rslider  bounds( 40, 55, 50, 50), channel("rate"), text("Rate"), range(0.1,50,3,0.5,0.001), identchannel("rateID"), visible(0)
rslider  bounds( 40, 55, 50, 50), channel("power"), text("Power"), range(0.01,20,3,0.5,0.01), identchannel("powerID"), visible(0)
rslider  bounds( 40, 55, 50, 50), channel("amount"), text("Amount"), range(0,1,0.1,0.5,0.01), identchannel("amountID"), visible(0)
rslider  bounds( 40, 55, 50, 50), channel("LimSkew"), text("Amount"), range(0.1,20,1,0.5,0.01), identchannel("LimSkewID"), visible(0)
rslider  bounds( 40, 55, 50, 50), channel("QuantVal"), text("Value"), range(0,1,0.1,1,0.01), identchannel("QuantValID"), visible(0)
}

image    bounds(295,  5,130,105), colour("black"), shape("rounded"), outlinethickness("4"), outlinecolour("white"), plant("scale") {
label    bounds(  5,  9,120, 11), text("S C A L E"), fontcolour("WHITE")
rslider  bounds( 10, 25, 55, 55), channel("ScaleMin"), text("Min"), range(0,127,0,  1,1)
rslider  bounds( 65, 25, 55, 55), channel("ScaleMax"), text("Max"), range(0,127,127,1,1)
checkbox bounds( 20, 83, 70, 12), channel("ScaleInt"), text("Integers")

}

image    bounds(430,  5,130,105), colour("black"), shape("rounded"), outlinethickness("4"), outlinecolour("white"), plant("output") {
label    bounds(  5,  9,120, 11), text("O U T P U T"), fontcolour("WHITE")
label    bounds( 25, 22, 80, 12), text("Channel"), fontcolour("WHITE")
combobox bounds( 25, 35, 80, 20), channel("channel"), text("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16"), value(1)
label    bounds( 25, 57, 80, 12), text("Controller"), fontcolour("WHITE")
combobox bounds( 25, 70, 80, 20), channel("controller"), text("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127"), value(1)
}
</Cabbage>
                    
<CsoundSynthesizer>

<CsOptions>   
-dm0 -n -+rtmidi=null -Q0
</CsOptions>

<CsInstruments>

sr 	=	44100
ksmps 	=	32
nchnls 	=	2
0dbfs	=	1

ginoise	ftgen	0,0,1024,21,1,1

opcode	lineto2,k,kk
 kinput,ktime	xin
 ktrig	changed	kinput,ktime				; reset trigger
 if ktrig==1 then					; if new note has been received or if portamento time has been changed...
  reinit RESTART
 endif
 RESTART:						; restart 'linseg' envelope
 if i(ktime)==0 then					; 'linseg' fails if duration is zero...
  koutput	=	i(kinput)			; ...in which case output simply equals input
 else
  koutput	linseg	i(koutput),i(ktime),i(kinput)	; linseg envelope from old value to new value
 endif
 rireturn
 		xout	koutput
endop

opcode TriggerToGatek,k,kki
 ktrig,kdur,imax xin
 kdlytrig  vdelayk	ktrig,kdur,imax
 kgate	   samphold	ktrig,ktrig + kdlytrig
           xout         kgate
endop

opcode	SwitchPortk, k, kkk
	kin,kupport,kdnport	xin
	kold			init	0
	kporttime		=	(kin<kold?kdnport:kupport)
	kout			portk	kin, kporttime
	kold			=	kout
				xout	kout
endop








instr	1
 ksmooth	linseg	0,0.001,0.05
 
 ; GENERATOR
 kgenerator	chnget	"generator"

 ; show/hide
 if changed(kgenerator)==1 then		; initially hide all
  	chnset	"visible(0)","frqID"
  	chnset	"visible(0)","DeRegID"
  	chnset	"visible(0)","widID"
  	chnset	"visible(0)","frq1ID"
  	chnset	"visible(0)","frq2ID"
  	chnset	"visible(0)","lambdaID"
  	chnset	"visible(0)","numberID"
  	chnset	"visible(0)","numberID2"
  	chnset	"visible(0)","resetID"
  if kgenerator==1 then			; sine
  	chnset	"visible(1)","frqID"
  elseif kgenerator==2 then		; triangle
  	chnset	"visible(1)","frqID"
  elseif kgenerator==3 then		; square
  	chnset	"visible(1)","frqID"
  elseif kgenerator==4 then		; pulse
  	chnset	"visible(1)","frqID"
  	chnset	"visible(1)","widID"
  elseif kgenerator==5 then		; saw up
  	chnset	"visible(1)","frqID"
  elseif kgenerator==6 then		; saw down
  	chnset	"visible(1)","frqID"
  elseif kgenerator==7 then		; randomi
  	chnset	"visible(1)","frqID"
  	chnset	"visible(1)","DeRegID"
  elseif kgenerator==8 then		; randomh
  	chnset	"visible(1)","frqID"
  	chnset	"visible(1)","DeRegID"
  elseif kgenerator==9 then		; rspline
  	chnset	"visible(1)","frq1ID"
  	chnset	"visible(1)","frq2ID"
  elseif kgenerator==11 then		; exponential
  	chnset	"visible(1)","lambdaID"  
  elseif kgenerator==12 then		; random loop
  	chnset	"visible(1)","frqID"
  	chnset	"visible(1)","numberID"
  	chnset	"visible(1)","numberID2"
  	chnset	"visible(1)","resetID"
  endif
 endif 

 kfrq	chnget	"frq"
 kwid	chnget	"wid"
 kfrq1	chnget	"frq1"
 kfrq2	chnget	"frq2"
 klambda	chnget	"lambda"
 
 if kgenerator==1 then
 kfn	lfo	0.5,kfrq,0	; sine
 kfn	=	kfn + 0.5

 elseif kgenerator==2 then
  kfn	lfo	0.5,kfrq,1	; tri
  kfn	=	kfn + 0.5

 elseif kgenerator==3 then
  kfn	lfo	1,kfrq,3	; sq

 elseif kgenerator==4 then
  kpls	metro	kfrq		; pulse
  kfn	TriggerToGatek	kpls,(kwid*0.01)/kfrq,1/0.01
 
 elseif kgenerator==5 then
  kfn	lfo	1,kfrq,4	; saw up

 elseif kgenerator==6 then
  kfn	lfo	1,kfrq,5	; saw down

 elseif kgenerator==7 then
  kDeReg	chnget	"DeReg"
  if kDeReg>0 then
   krate	trandom	metro(kfrq),-kDeReg,kDeReg
   krate	=	kfrq * octave(krate)
  else
   krate	=	kfrq
  endif
  kfn	randomi	0,1,kfrq,1	; randomi

 elseif kgenerator==8 then
  kDeReg	chnget	"DeReg"
  if kDeReg>0 then
   krate	trandom	metro(kfrq),-kDeReg,kDeReg
   krate	=	kfrq * octave(krate)
  else
   krate	=	kfrq
  endif
  kfn	randomh	0,1,krate,1	; randomh

 elseif kgenerator==9 then
  kfn	rspline	0,1,kfrq1,kfrq2	; rspline

 elseif kgenerator==10 then
  kfn	gauss	0.5		; gauss
  kfn	limit	kfn + 0.5, 0, 1

 elseif kgenerator==11 then
  kfn	exprand	klambda		; exp
  kfn	limit	kfn, 0, 1

 elseif kgenerator==12 then	; random loop
  kphs	phasor	kfrq
  kreset	chnget	"reset"
  if changed(kfn)==1 then
   kRandLoopTrig	trigger	kreset,0.5,0
  endif
  kOS	trandom	kRandLoopTrig,0,1024
  knumber	chnget	"number"
  kfn	table	int(kOS) + (kphs*(knumber+1)), ginoise

 endif


 













 ; TRANSFORM
 ktransform	chnget	"transform"

 ; show/hide
 if changed(ktransform)==1 then		; initially hide all
  	chnset	"visible(0)","timeID"
  	chnset	"visible(0)","timeUpID"
  	chnset	"visible(0)","timeDnID"
  	chnset	"visible(0)","rateID"
  	chnset	"visible(0)","powerID"
  	chnset	"visible(0)","LimSkewID"
  	chnset	"visible(0)","amountID"
  	chnset	"visible(0)","QuantValID"
  if ktransform==2 then				; portk
  	chnset	"visible(1)","timeID"
  elseif ktransform==3 then			; lineto
  	chnset	"visible(1)","timeID"
  elseif ktransform==4 then			; sample and hold
  	chnset	"visible(1)","rateID"
  elseif ktransform==5 then			; power skew
  	chnset	"visible(1)","powerID"
  elseif ktransform==6 then			; limit skew
  	chnset	"visible(1)","LimSkewID"
  elseif ktransform==7 then			; add gaussian noise
  	chnset	"visible(1)","amountID"
  elseif ktransform==8 then			; dual portamento
  	chnset	"visible(1)","timeUpID"
  	chnset	"visible(1)","timeDnID"
  elseif ktransform==9 then			; quantise
  	chnset	"visible(1)","QuantValID"
  endif
 endif

 kporttime	linseg	0,0.001,1
 ktime		chnget	"time"
 krate		chnget	"rate"
 kporttime	=	kporttime * ktime
 
 if ktransform==2 then			; port
  kfn	portk	kfn,kporttime
 
 elseif ktransform==3 then		; lineto
  kfn	lineto	kfn,kporttime
 
 elseif ktransform==4 then		; sample and hold
  ktrig	metro	krate
  kfn	samphold	kfn,ktrig
 
 elseif ktransform==5 then		; power skew
  kpower	chnget	"power"
  kpower	portk	kpower, ksmooth
  kval	pow	abs((kfn*2)-1),kpower
  kfn	=	kfn<=0.5 ? (1-kval)*0.5 : (1+kval)*0.5

 elseif ktransform==6 then		; limit skew
  kLimSkew	chnget	"LimSkew"
  kLimSkew	portk	kLimSkew, ksmooth
  kfn	pow	kfn,kLimSkew

 elseif ktransform==7 then		; add gaussian noise
  kamount	chnget	"amount"
  knse	gauss	kamount    
  kfn	mirror	kfn + knse, 0, 1

 elseif ktransform==8 then		; dual portamento
  ktimeUp	chnget	"timeUp"
  ktimeDn	chnget	"timeDn"
  kfn	SwitchPortk	kfn, ktimeUp, ktimeDn

 elseif ktransform==9 then		; quantise
  kQuantVal	chnget	"QuantVal"
  if kQuantVal>0 then
   kfn		=	round((kfn/kQuantVal)-(kQuantVal*0.5))*kQuantVal
  endif
 endif
 
 
; SCALE
 gkScaleMin 	chnget	"ScaleMin"
 gkScaleMax 	chnget	"ScaleMax"
 gkScaleInt		chnget	"ScaleInt"
 kfn			scale	kfn,gkScaleMax,gkScaleMin
 kfn			=		gkScaleInt==1?int(kfn):kfn
 
; OUTPUT 
 kchannel	chnget	"channel"
 kcontroller	chnget	"controller"
 		outkc 	kchannel,kcontroller, kfn, 0, 1

; printk 1, kfn
 
 gkfn	=	kfn			; OUTPUT FUNCTION. GLOBAL VARIABLE FOR USE IN instr 3





endin








instr	3				; AN AUDIO REPRESENTATION OF THE FUNCTION
 asig	poscil	0.1,cpsmidinn((gkfn*12)+60)
 	outs	asig,asig
endin


</CsInstruments>

<CsScore>
i 1 0 3600	; CREATE, TRANSFORM AND RESCALE A FUNCTION
;i 3 0 3600	; PLAY AN AUDIO REPRESENTATION OF THE FUNCTION
</CsScore>

</CsoundSynthesizer>
; MIDI Arpeggiator.csd
; Written by Iain McCurdy, 2015. Based on the Arpeggiator (2012) example. 

; Duration	-	ratio of the duration that will fill the gap until the next note. Therefore a value of '1' provides a legato arpeggio.

<Cabbage>
form caption("Arpeggiator") size(720, 100), pluginid("MArp") style("legacy")

#define RSliderStyle #trackercolour(0,255,255), colour(100,100,140), outlinecolour(20,20,20)#

                      
groupbox bounds( 0,  0, 720, 100), text("Arpeggiator"), plant("gui"){
rslider  bounds( 10, 30, 60, 60), text("Interval"), channel("intvl"), range(-36, 36, 5, 1, 1), $RSliderStyle
rslider  bounds( 60, 30, 60, 60), text("Cycles"), channel("cycles"), range(0, 32, 5, 1, 1), $RSliderStyle

label    bounds(128, 26, 74, 12), text("Cycle Mode") 
combobox bounds(128, 39, 74, 20), channel("CyUpDn"), value(2), text("Up","Up-Down")

label    bounds(120, 62, 90, 12), text("Arp.Mode")
combobox bounds(120, 75, 90, 20), channel("mode"), value(6), text("Up","Down","Up<->Down","Random Dir.","Random Pick","Seq. Play")

rslider  bounds(210, 30, 60, 60), text("Tempo"), channel("tempo"), range(1, 500,120, 1, 1), $RSliderStyle
label    bounds(263, 29, 65, 12), text("Tempo Mlt."), 
combobox bounds(270, 42, 50, 20), channel("TempoMlt"), value(4), text("1/4","1/3","1/2","1","3/2","2","3","4")

rslider  bounds(320, 30, 60, 60), text("Swing"),    channel("swing"),    range(0, 1.00, 0), $RSliderStyle

rslider  bounds(375, 30, 60, 60), text("Octave"),   channel("octave"),   range(-4,4,0,1,1), $RSliderStyle
rslider  bounds(430, 30, 60, 60), text("Semitone"), channel("semitone"), range(-11,11,0,1,1), $RSliderStyle
rslider  bounds(485, 30, 60, 60), text("Duration"), channel("duration"), range(0.25,4,1,0.5,0.01), $RSliderStyle

label    bounds(550, 29, 78, 13), text("Clock Source")
button   bounds(550, 42, 80, 20), text("Internal","External"), channel("ClockSource"), value(0)
checkbox bounds(645, 35, 60, 15), colour("Cyan"),   channel("onoff"),  text("On/Off"), value(1)
checkbox bounds(645, 55, 60, 15), colour("yellow"), channel("hold"),   text("Hold"),   value(1)
checkbox bounds(645, 75, 60, 15), colour("red"),    channel("pause"),  text("Pause"),  value(0)
}

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -M0 -Q0
</CsOptions>

<CsInstruments>

sr 		= 	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (2=STEREO)
0dbfs		=	1
massign	0,0
	
;Author: Iain McCurdy (2012)
;http://www.iainmccurdy.org	

giseqorder	ftgen	0,0,1024,-2,0	;ORDERED ROW OF NOTES (IN THE ORDER IN WHICH THEY WERE PLAYED)
giseqascend	ftgen	0,0,1024,-2,0	;ORDERED ROW OF NOTES (IN ASCENDING ORDER)
ginoteactive	ftgen	0,0,128,-2,0	;TABLE OF NOTE ON STATUSES 1=ON 0=OFF
givelocities	ftgen	0,0,128,-2,0	;TABLE OF NOTE VELOCITIES
giblank		ftgen	0,0,128,-2,0	;BLANK TABLE
gisine		ftgen	0,0,4096,10,1
giFletcherMunsonCurve	ftgen	0,0,-20000,-16,1,4000,-8,0.15, 20000-4000,0,0.15

giTempoMlt	ftgen	0,0,-8,-2,1/4,1/3,1/2,1,3/2,2,3,4	;TABLE OF TEMPO MULTIPLIERS - USED TO SCALE THE ARPEGGIO RATE WHEN IN TEMPO MODE
giMIDIchn	=	1

;UDO THAT SORTS A TABLE OF NUMBERS INTO ASCENDING ORDER
opcode	tabsort_ascnd2,0,ii
	iNumItems,ifn	xin
	iTabLen		=		ftlen(ifn)
	imax		table		0,ifn
	icount		=		1
	loop1:
	  ival		table		icount,ifn
	  imax 		= 		(ival>=imax?ival:imax)
	  		loop_lt		icount,1,iNumItems,loop1
	iTableBuffer	ftgentmp	0,0,iTabLen,-2, 0
	icount1		=		0
	loop2:
	  icount2	=		0
	  imin		=		imax
	  loop3:
	    ival	table		icount2,ifn
	    if ival<=imin then			
	      imin 	= 		ival
	      iloc 	= 		icount2 
	    endif
	    		loop_lt		icount2,1,iNumItems,loop3
			tableiw		imin,icount1,iTableBuffer
			tableiw		imax,iloc,ifn
			loop_lt		icount1,1,iNumItems,loop2
	icount		=		0
	loop4:
	ival		table		icount,iTableBuffer
			tableiw		ival,icount,ifn
			loop_lt		icount,1,iNumItems,loop4
endop


;This instrument needs to be last in order for the 'hold' function to work properly. I'm not sure why.
instr	ScanWidgets
	gkintvl		chnget	"intvl"
	gkcycles	chnget	"cycles"
	gktempo		chnget	"tempo"		;INTERNAL GUI CONTROL
	gkbpm		chnget	"HOST_BPM"	;HOST TEMPO
	gkClockSource	chnget	"ClockSource"	;CLOCK SOURCE SELECTOR SWITCH
	if gkClockSource==1 then
	 gktempo = gkbpm
	endif
	gkCyUpDn	chnget	"CyUpDn"
	gkTempoMlt	chnget	"TempoMlt"
	gkhold		chnget	"hold"
	gkmode		chnget	"mode"
	gkswing		chnget	"swing"	
	gkpause		chnget	"pause"
	gkonoff		chnget	"onoff"
endin

instr	ScanMIDI	;SCAN INCOMING MIDI AND TRIGGER NOTES IN INSTRUMENT 'NoteLayer'
	insno 	nstrnum "NoteLayer"
	kstatus, kchan, kdata1, kdata2  midiin; read in midi
	if kstatus==144||kstatus==128 then			;144=note_on 128=note_off
	 if kdata2>0&&kstatus==144 then				;IF VELOCITY IS GREATER THAN 0 (I.E. FOR SOME KEYBOARDS VELOCITY ZERO IS A NOTE OFF)
	  tablew	kdata2,kdata1,givelocities		;WRITE VELOCITY TO TABLE
	  kAlreadyActiveStatus	table	kdata1,ginoteactive	;CHECK IF THIS NOTE IS ALREADY ACTIVE (POSSIBLE IF HOLD IS ON).
	  if kAlreadyActiveStatus==0 then			;IF THIS NOTE IS NOT ALREADY ACTIVE...
	   event "i",insno+(kdata1*0.001),0,3600,kdata1	;
	  endif
	 else
	  if gkhold==0 then
	   turnoff2	insno+(kdata1*0.001),4,1
	  endif
	 endif
	elseif kstatus==128&&gkhold==0 then		;IF MIDI KEYBOARD USES NOTE OFF STATUS BYTE
	 turnoff2	insno+(kdata1*0.001),4,1
	endif
endin	

instr	NoteLayer				;THIS INSTRUMENT IS TRIGGERED FOR EACH NOTE PLAYED ON THE KEYBOARD
	inum	=	p4			;READ IN MIDI NOTE NUMBER		
	tableiw	1,inum,ginoteactive		;WRITE NOTE NUMBER TO TABLE
	iNNotes	active	"NoteLayer"		;SENSE THE NUMBER INSTANCES OF THIS INSTRUMENT (I.E. MIDI NOTES) ARE BEING HELD AT I-TIME.
	tableiw	inum,iNNotes-1,giseqorder	;WRITE THE NOTE NUMBER OF THIS NOTE TO THE NEXT LOCATION IN THE ORDERED ROW OF NOTES (giseqorder)
	tableicopy	giseqascend,giseqorder	;COPY THE LIST OF NOTES (IN THE ORDER IN WHICH THEY WERE PLAYED) INTO THE TABLE OF NOTES TO BE SORTED INTO ASCENDING ORDER
	tabsort_ascnd2	iNNotes,giseqascend	;UDO CALLED THAT ORDERS THE LIST OF NOTES INTO ASCENDING ORDER
	
	krelease	release			;SENSE WHEN THIS NOTE HAS BEEN RELEASED
	if krelease==1 then			;IF THIS NOTE HAS BEEN RELEASED (FINAL K-RATE CYCLE)...
	 tablew	0,inum,ginoteactive
	 ;AS THIS NOTE HAS BEEN RELEASED IT WILL HAVE TO BE REMOVED FROM THE ORDERED ROW OF NOTE (giseqorder). ALL NOTES *AFTER* IT IN THE ROW WILL HAVE TO BE SHUNTED BACK ONE PLACE.
	 kShuntNdx	=	iNNotes		;INITIAL SHUNT INDEX (THE LOCATION TO WHICH THE NOTE NUMBER FOR THIS NOTE WAS WRITTEN)
	 kNNotes	active	"NoteLayer"	;FIND THE NUMBER OF INSTANCES OF THIS INSTRUMENT (I.E. NOTES BEING HELD) NOW
	 SHUNT_ROW:				;A LABEL. THE SHUNTING PROCEDURE LOOPS FROM HERE.
	 kval	table	kShuntNdx, giseqorder	;READ THE NOTE NUMBER JUST AFTER THIS ONE IN THE SEQUENCE ROW...
	 	tablew	kval, kShuntNdx-1, giseqorder	;AND MOVE IT BACK ONE PLACE
	 loop_lt	kShuntNdx,1,kNNotes,SHUNT_ROW	;LOOP BACK AND REPEAT THE SHUNTING PROCEDURE UNTIL THE NEW ROW IS COMPLETE
	endif
	
	kHoldOff	trigger	gkhold,0.5,1	;IF HOLD GOES FROM '1'/'ON' TO '0'/'OFF' GENERATE A TRIGGER IMPULSE
	if kHoldOff==1 then			;IF HOLD GOES FROM 'ON' TO 'OFF'... 
	 turnoff				;TURN THIS (AND ALL OTHER) NOTES OFF
	endif					;END OF CONDITIONAL BRANCH

	if iNNotes==1 then			;IF THIS IS THE FIRST NOTE OF AN ARPEGGIO TO BE PLAYED...
	 event_i "i","Arpeggiator",0,-1		;START ARPEGGIATOR INSTRUMENT WITH A 'HELD' NOTE. SEND IT THE MIDI NOTE NUMBER.
	endif					;END OF CONDITIONAL BRANCH

	insnoArp 	nstrnum "Arpeggiator"
	if gkonoff==0 then
	 turnoff2	insnoArp,0,1
	 tablecopy	ginoteactive,giblank		;ERASE NOTE STATUSES TABLE
	 turnoff
	endif
endin


instr	Arpeggiator	
	krelease	release				;SENSE END OF NOTE (1)
	kporttime	linseg	0,0.001,0.05

	kHoldOff	trigger	gkhold,0.5,1		;IF HOLD GOES FROM '1'/'ON' TO '0'/'OFF' GENERATE A TRIGGER IMPULSE
	if kHoldOff==1 then				;IF HOLD GOES FROM 'ON' TO 'OFF'... 
	 tablecopy	ginoteactive,giblank		;ERASE NOTE STATUSES TABLE
	 turnoff					;TURN THIS INSTRUMENT OFF
	endif						;END OF CONDITIONAL BRANCH

	kNNotes	active	"NoteLayer"			;NUMBER OF INSTR 1 (MIDI NOTES) BEING HELD. SPECIFICALLY WE ARE INTERESTED IN WHETHER ALL NOTES HAVE BEEN RELEASED	
	
	if kNNotes==0&&gkhold==0 then			;IF ALL MIDI KEYBOARD NOTES HAVE BEEN RELEASED...
	 turnoff					;...TURN THIS INSTRUMENT OFF
	endif						;END OF CONDITIONAL BRANCH

	kswingval1	scale	gkswing,1/1.5,1
	kswingval2	scale	gkswing,1/0.5,1
	kswingstep	init	0
	kswingval	init	(i(gkswing)*0.5) + 1
	
	kTempoMlt	table	gkTempoMlt-1,giTempoMlt
	
	gkrate	=	(gktempo/60)*kTempoMlt*4*(1-gkpause)		;DERIVE TEMPO FROM BPM AND TEMPO MULTIPLIER
	
	ktrigger	metro	gkrate*kswingval			;METRONOME TO TRIGGER NOTES OF THE ARPEGGIO. PHASE OFFSET (P2) PREVENTS A SEARCH FOR A NEW NOTE WHEN THE FIRST NOTE OF AN ARPEGGIO HAS BEEN PLAYED

	;SET REQUIRED INITIAL SETTINGS DEPENDING ON ARPEGGIATOR MODE
	ktrig	changed	gkmode
	if ktrig==1 then
	 reinit	RESET_START_VALS
	endif
	RESET_START_VALS:
	kcount1	init	0
	kcount2	init	0
	kndx	init	0
	kcycle	init	0
	kCycleDir	init	0
	if i(gkmode)==1 then				;IF UP MODE...
	 kcount1	init	0
	 kcount2	init	0
	 kndx	init	0
	 kdir	init	1
	elseif i(gkmode)==2 then			;IF DOWN MODE...
	 kcount1	init	0
	 kcount2	init	0
	 kndx	init	i(kNNotes)-1
	 kdir	init	-1
	elseif i(gkmode)==3 then			;IF UP AND DOWN MODE...
	 kdir	init	1
	 kcount1	init	0
	 kcount2	init	0
	 kndx	init	0
	elseif i(gkmode)==4 then			;RANDOM DIRECTION MODE...
	 kdir	init	1
	 kcount1	init	0
	 kcount2	init	0
	 kndx	init	0
	elseif i(gkmode)==5 then			;RANDOM PICK MODE...
	 kcount1	init	0
	 kcount2	init	0
	 kndx	init	0
	elseif i(gkmode)==6 then			;SEQUENCE PLAY MODE...
	 kcount1	init	0
	 kcount2	init	0
	 kndx	init	0
	 kdir	init	1
	endif
	rireturn
	
	if ktrigger==1&&krelease!=1 then		;IF A TRIGGER FOR A NEW NOTE HAS BEEN ISSUED AND WE ARE NOT IN A RELEASE STAGE...

	 kswingstep	=	abs(kswingstep-1)
	 kswingval	=	(kswingstep=0?kswingval1:kswingval2)
	
	 ;UP
	 if gkmode==1 then				;IF 'UP' DIRECTION MODE IS SELECTED...
	  knumSrc		table	kndx,giseqascend	;READ NOTE NUMBER
	  knum		=	knumSrc+(gkintvl*kcycle)
	  kcount1	=	kcount1 + 1
	  ktrig		changed	kNNotes
	  if ktrig==1 then				;IF NOTES ARE ADDED OR TAKEN AWAY FROM THE ROW SINCE THE LAST ITERATION
	   kcount1	=	kndx+1
	  endif	  
	  if kndx==kNNotes-1 then
	   kcount2	=	kcount2+1
	   if gkCyUpDn==1 then
	    kcycle	wrap	kcount2,0,gkcycles+1
	   else
	    kcycle	mirror	kcount2,0,gkcycles
	   endif	    
	  endif	  
	  kndx		wrap	kcount1,-0.5,kNNotes-0.5  
	  


	 ;DOWN
	 elseif gkmode==2 then				;IF 'DOWN' DIRECTION MODE IS SELECTED...
	  knumSrc	table	kndx,giseqascend	;READ NOTE NUMBER
	  knum		=	knumSrc+(gkintvl*kcycle)
	  if kndx==0 then
	   kcount2	=	kcount2+1
	   if gkCyUpDn==1 then
	    kcycle	wrap	kcount2,0,gkcycles+1
	   else
	    kcycle	mirror	kcount2,0,gkcycles
	   endif	    
	  endif	  
	  kcount1	=	kcount1 - 1
	  ktrig		changed	kNNotes
	  if ktrig==1 then				;IF NOTES ARE ADDED OR TAKEN AWAY FROM THE ROW SINCE THE LAST ITERATION
	   kcount1	=	kndx-1
	  endif	  
	  kndx		wrap	kcount1,-0.5,kNNotes-0.5  



	
	 ;UP-DOWN
	 elseif gkmode==3 then				;IF 'UP<->DOWN' DIRECTION MODE IS SELECTED...
	  if gkcycles==0 then
	   if kNNotes==1 then
	    kdir	=	0
	   elseif kndx=0 then				;OR IF... THE INDEX IS POINTING TO THE FIRST NOTE IN THE LIST, WE NEED TO CHANGE DIRECTION TO UP FOR THE NEXT NOTE AFTER THIS ONE
	    kdir	=	1			;CHANGE DIRECTION TO UP
	   elseif kndx=(kNNotes-1) then			;IF THE INDEX IS POINTING TO THE LAST NOTE IN THE LIST, WE NEED TO CHANGE DIRECTION TO DOWN FOR THE NEXT NOTE AFTER THIS ONE
	    kdir	=	-1			;CHANGE DIRECTION TO DOWN
	   endif					;END OF CONDITIONAL
	   kndx	=	kndx + kdir
	   knumSrc	table	kndx,giseqascend	;READ NOTE NUMBER
	   knum		=	knumSrc
	   kgoto PLAY_A_NOTE				;GO STRAIGHT TO PLAYING THIS NEW NOTE

	  else
	   kndx		limit	kndx,0,kNNotes-1
	   knumSrc	table	kndx,giseqascend	;READ NOTE NUMBER
	   knum		=	knumSrc+(gkintvl*kcycle)
	   kcount	init	i(kndx)
	   kcount	=	kcount + 1
	   kndx		mirror	kcount,0,kNNotes-1
	   if kndx==0 then
	    kcount2	init	i(kcycle)
	    kcount2	=	kcount2+1	    
	    if gkCyUpDn==1 then
	     kcycle	wrap	kcount2,0,gkcycles+1
	    else
	     kcycle	mirror	kcount2,0,gkcycles
	    endif	    
	   endif
	   
	   kgoto PLAY_A_NOTE				;GO STRAIGHT TO PLAYING THIS NEW NOTE
	  endif
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 ;RANDOM DIRECTION
	 elseif gkmode==4 then
	  if kndx==(kNNotes-1) then			;IF THE INDEX IS POINTING TO THE LAST NOTE IN THE LIST, WE NEED TO CHANGE DIRECTION TO DOWN FOR THE NEXT NOTE AFTER THIS ONE
	   kdir	=	-1				;CHANGE DIRECTION TO DOWN
	  elseif kndx==0 then				;OR IF... THE INDEX IS POINTING TO THE FIRST NOTE IN THE LIST, WE NEED TO CHANGE DIRECTION TO UP FOR THE NEXT NOTE AFTER THIS ONE
	   kdir	=	1				;CHANGE DIRECTION TO UP
	  endif						;END OF CONDITIONAL
	  knumSrc	table	kndx,giseqascend	;READ NOTE NUMBER
	  knum		=	knumSrc	
	  if gkcycles>0 then
	   knum	=	knum+(gkintvl*kcycle)
	  endif	
	  if kndx==(kNNotes-1) then
	   kcycle	wrap	kcycle+1,0,gkcycles+1
	  elseif kndx==0 then	
	   kcycle	wrap	kcycle-1,0,gkcycles+1
	  endif
	  kndx	=	kndx+kdir			;INCREMENT INDEX FOR THE NEXT NOTE AFTER THIS ONE
	  kgoto PLAY_A_NOTE				;GO STRAIGHT TO PLAYING THIS NEW NOTE


	 
	 ;RANDOM PICK (RANDOMLY CHOOSE ANY NOTE CURRENTLY BEING HELD)
	 elseif gkmode==5 then
	  kRndNdx	random	0,kNNotes		;CREATE RANDOM INDEX
	  knumSrc	table	kRndNdx,giseqorder	;READ NOTE FROM NOTE LIST USING RANDOM INDEX
	  knum	=	knumSrc+(gkintvl*kcycle)
	  if kndx==kNNotes-1 then
	   kcount2	=	kcount2 + 1
	   if gkCyUpDn==1 then
	    kcycle	wrap	kcount2,0,gkcycles+1
	   else
	    kcycle	mirror	kcount2,0,gkcycles
	   endif
	  endif
	  kndx	wrap	kndx+1,0,kNNotes		;INCREMENT THE COUNTER BUT WRAP IT AROUND IF IT STRAYS BEYOND THE VALUE CORRESPONDING TO THE NUMBER OF NOTES BEING HELD (I.E. THE LENGTH OF THE SEQUENCE)
	  kgoto	PLAY_A_NOTE				;GO STRAIGHT TO PLAYING THIS NEW NOTE


	
	 ;SEQUENCE PLAY (PLAYS NOTES IN THE ORDER IN WHICH THEY WERE ORIGINALLY PLAYED)
	 else
	  knumSrc	table	kndx,giseqorder		;READ NOTE VALUE FROM TABLE  
	  knum		=	knumSrc
	  if gkcycles!=0 then
	   knum	=	knum+(gkintvl*kcycle)
	  endif	
	  if kndx==kNNotes-1 then
	   kcount2	=	kcount2 + 1
	   if gkCyUpDn==1 then
	    kcycle	wrap	kcount2,0,gkcycles+1
	   else
	    kcycle	mirror	kcount2,0,gkcycles
	   endif
	  endif
	  kndx	wrap	kndx+1,0,kNNotes		;INCREMENT THE COUNTER BUT WRAP IT AROUND IF IT STRAYS BEYOND THE VALUE CORRESPONDING TO THE NUMBER OF NOTES BEING HELD (I.E. THE LENGTH OF THE SEQUENCE) 
	  kgoto PLAY_A_NOTE				;GO STRAIGHT TO PLAYING THIS NEW NOTE
	 endif
	endif
	
	
	
	
	
	PLAY_A_NOTE:

	if gkmode==4&&ktrigger==1 then			;IF RANDOM DIRECTION MODE HAS BEEN CHOSEN, CHOOSE A NEW RANDOM DIRECTION FOR THE NEXT STEP 
	 kdir	random	0,1.999999			;
	 kdir	=	(int(kdir)*2)-1			;kdir WILL BE EITHER -1 OR 1
	endif

	if ktrigger==1 then
	 event "i","MIDI_out",0,60/(gkrate*kswingval*16*3.75),knum,knumSrc
	endif

endin



instr	MIDI_out
 ioctave	chnget	"octave"
 isemitone	chnget	"semitone"
 iduration	chnget	"duration"
 ivel		table	p5,givelocities
 p3		=	p3 * iduration
 inote		limit	p4+(ioctave*12)+isemitone,0,127
 noteondur giMIDIchn, inote, ivel, p3
endin

</CsInstruments>

<CsScore>
i "ScanWidgets" 0 [3600*24*7]		;SCAN GUI WIDGETS
i "ScanMIDI" 0 [3600*24*7]		;SCANS FOR MIDI NOTE EVENTS
</CsScore>

</CsoundSynthesizer>; MIDI_Delay.csd
; Written by Iain McCurdy, 2015

; Time		-	delay time (initial delay time if 'Warp' is anything other than '1'
; Warp		-	warp ratio of the delay time - each delay iteration will have its delay time multiplied by this value
; Repeats 	-	number of repeats/echoes. Bear in mind that having many repeats will put greater polyphony strain on subsequent synths responding to the MIDI.
; Decay		-	velocity decay of subsequent delays. Each subsequent velocity of each delay iteration is multipled by this value.
; Arpeggio	-	note number increase (additive) of each subsequent delay iteration.

<Cabbage>
form caption("MIDI Delay"), size(300,100), pluginid("MiDl") style("legacy")
rslider bounds(0,5,60,60), channel("DelTim"), range(0.01,2,0.2,0.5,0.01), text("Time")
rslider bounds(60,5,60,60), channel("warp"), range(0.5,2,1,0.5,0.01), text("Warp")
rslider bounds(120,5,60,60), channel("rpts"), range(1,50,7,1,1), text("Repeats")
rslider bounds(180,5,60,60), channel("decay"), range(0,1,0.3,1,0.01), text("Decay")
rslider bounds(240,5,60,60), channel("arp"), range(-12,12,0,1,1), text("Arpeggio")
;checkbox bounds(310,15,90,15), channel("mono"), text("No Overlaps")

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -+rtmidi=null -Q0 -M0 --midi-key=4 --midi-velocity=5 -n	; cabbage
</CsOptions>

<CsInstruments>

sr 	= 	44100
ksmps 	= 	16
nchnls 	= 	2
0dbfs	=	1

opcode	MIDI_Delay_Layer,0,kkkkiiiiii
 kstatus,kchan,kdata1,kdata2,iDelTim,iwarp,idecay,iarp,icount,irpts	xin
 kstatus2	delayk	kstatus,iDelTim	
 kchan2		delayk	kchan,iDelTim	
 kdata1_2	delayk	kdata1,iDelTim	
 kdata2_2	delayk	kdata2,iDelTim	
 if changed(kstatus2)==1 then
  midiout kstatus2, kchan2, limit(kdata1_2+iarp,0,127), kdata2_2*idecay
 endif
 if icount<irpts then
  MIDI_Delay_Layer	kstatus2,kchan2,limit(kdata1_2+iarp,0,127),kdata2_2*idecay,iDelTim*iwarp,iwarp,idecay,iarp,icount+1,irpts
 endif
endop


instr	1
 kstatus, kchan, kdata1, kdata2 midiin
 if changed(kstatus)==1 then
  midiout kstatus, kchan, kdata1, kdata2
 endif
 kDelTim	chnget	"DelTim"
 kwarp		chnget	"warp"
 kdecay		chnget	"decay"
 karp		chnget	"arp"
 krpts		chnget	"rpts"
; kmono		chnget	"mono"
 if metro(16)==1 then
  if changed(kDelTim,kwarp,kdecay,karp,krpts)==1 then
   reinit REINIT
  endif
 endif
 REINIT:
 MIDI_Delay_Layer	kstatus,kchan,kdata1,kdata2,i(kDelTim),i(kwarp),1-i(kdecay),i(karp),1,i(krpts)
endin



</CsInstruments>

<CsScore>
i 1 0 [3600*24*7]
</CsScore>

</CsoundSynthesizer>; MidiMonitor.csd
; Written by Iain McCurdy, 2014

; display of MIDI notes, key velocity and controllers (MIDI channel 1)


<Cabbage>
form caption("Midi Monitor"), size(610, 425), colour( 50, 50, 50),pluginid("MiMo"), guirefresh(16) style("legacy")

; NOTES AND VELOCITIES
image     bounds(  0,  0, 610,110), colour(75, 85, 90, 100), line(2), shape(sharp)
gentable     bounds(  5,  5, 600, 74),  tableNumbers(1), tablecolour("yellow"), identchannel("table1"), drawmode(4), amprange(0,127,1), zoom(-1), tablegridcolour(0,0,0,0)
label     bounds(  5, 83,600, 12), text("Notes and Velocities"), fontcolour("white")
label     bounds(  5, 82, 70, 12), text("Last Note:"), fontcolour("white")
nslider bounds( 75, 80, 35, 16), fontcolour("white"), channel("LastNote"), range(0,127,0,1,1)
label     bounds(125, 82, 80, 12), text("Last Velocity:"), fontcolour("white")
nslider bounds(205, 80, 35, 16), fontcolour("white"), channel("LastVel"), range(0,127,0,1,1)

; ALL CONTROLLERS ON ONE CHANNEL
image    bounds(  0,115,610,110), colour(75, 85, 90, 100), line(2), shape(sharp)
gentable    bounds(  5,120,600, 74), tableNumbers(2), tablecolour("lime"), identchannel("table2"), drawmode(4), amprange(0,127,2), zoom(-1), tablegridcolour(0,0,0,0)
label    bounds(  5,198,600, 12), text("Controllers by Channel"), fontcolour("white")
label    bounds(  5,197,130, 12), text("Last Controller Value:"), fontcolour("white")
nslider  bounds(135,195, 35, 16), fontcolour("white"), channel("LastCtrl"), range(0,127,0,1,1)
label    bounds(413,201, 90, 12),  text("MIDI Channel:"), fontcolour("white")
combobox bounds(500,200, 33, 15), channel("CtrlChannel"), value(1), text("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16")

; THE SAME CONTROLLER ON ALL CHANNELS
image    bounds(  0,230, 610,110), colour(75, 85, 90, 100), line(2), shape(sharp)
gentable    bounds(  5,235,600, 74), tableNumbers(3), tablecolour("LightBlue"), identchannel("table3"), drawmode(4), amprange(0,127,3), zoom(-1), tablegridcolour(0,0,0,0)
label    bounds(  5,313,600, 12), text("Controllers by Number"), fontcolour("white")
hslider  bounds(380,308,220, 23), fontcolour("white"), textbox(1), channel("CtrlNumber"), range(0,127,1,1,1)
label    bounds(380,324,220, 11), text("Controller Number"), fontcolour("white")

keyboard bounds(  0,345,610, 80)

</Cabbage>                                                   
                    
<CsoundSynthesizer>                                                                                                 

<CsOptions>                                                     
-dm0 -n -+rtmidi=null -M0 -+raw_controller_mode=1
</CsOptions>
                                  
<CsInstruments>

sr 		= 	44100	;SAMPLE RATE
ksmps 		= 	32	;NUMBER OF AUDIO SAMPLES IN EACH CONTROL CYCLE
nchnls 		= 	2	;NUMBER OF CHANNELS (1=MONO)
0dbfs		=	1	;MAXIMUM AMPLITUDE     

massign	0,1

gisine		ftgen	0,0,4096,10,1

; tables for notes active with velocities
ginotes		ftgen	1,0, 128,-2, 0
gicontrollers	ftgen	2,0, 128,-2, 0
gicontrollers2	ftgen	3,0, 16,-2, 0

instr	1
 inum	notnum 					; read in midi note number
 	chnset	inum,"LastNote"			; print note number to number box
 
 ivel	veloc	0,127				; read in note velocity
 	chnset	ivel,"LastVel"			; print velocity value to number box

 	tableiw	ivel,inum,ginotes		; write note to the notes function table

 	chnset	"tablenumber(1)","table1"	; print the function table to the gentable widget

 krel	release
 if krel==1 then
 	tablew	1-krel,inum,ginotes
 endif  
endin                                                                                                                     

opcode CtrlRead,0,iiii
 ichan,icount,ilast,itab	xin
 kval	ctrl7	ichan,icount,0,127
 if changed(kval)==1 then
  chnset	kval,"LastCtrl"
 endif
 	tablew	kval,icount,itab
 if icount<ilast then
  CtrlRead	ichan,icount+1,ilast,itab
 endif
endop

opcode CtrlReadByNumber,0,iii
 ictrl,icount,itab	xin
 kval	ctrl7	icount,ictrl,0,127
 ;if changed(kval)==1 then
 ; chnset	kval,"LastCtrl"
 ;endif
 	tablew	kval,icount-1,itab
 if icount<16 then
  CtrlReadByNumber	ictrl,icount+1,itab
 endif
endop

instr	2
 kCtrlChannel	chnget	"CtrlChannel"
 kCtrlChannel	init	1
 
 if changed(kCtrlChannel)==1 then
  reinit RESTART
 endif
 RESTART:
 gicontrollers	ftgen	2,0, 128,-2, 0 
 CtrlRead	i(kCtrlChannel),0,127,gicontrollers
 rireturn

 kCtrlNumber	chnget	"CtrlNumber"
 if changed(kCtrlNumber)==1 then
  reinit RESTART2
 endif
 RESTART2:
 gicontrollers2	ftgen	3,0, 16,-2, 0 
 CtrlReadByNumber	i(kCtrlNumber),1,gicontrollers2
 rireturn

 if metro(20)==1 then
 	chnset	"tablenumber(2)", "table2"	; update table display	
 	chnset	"tablenumber(3)", "table3"	; update table display	
 endif

endin

</CsInstruments>

<CsScore>
i 2 0 [3600*24*7]		; instrument to update function tables and table displays
</CsScore>                            

</CsoundSynthesizer>
; MIDI Note Recorder

; This midi instrument is intended to be used as a plugin.
; It should be patched in between something that produces MIDI notes (i.e. a keyboard) -
; - and something that plays notes.

; Notes are recorded after 'Record' is pressed. Recording only actually begins once the first note is played.
; Stop record by pressing the 'Stop' button or the 'Play' button.

; Up to 8 buffers can be recorded to or played from.

; The playback speed can be changed using the Speed Button.
; Speed changes are only implemented before playback begins.

; Notes can also be transposed in semitone steps.
; Velocities can be scaled to alter the dynamics of a phrase.

; The row of notes can be transformed using retrograde and shuffling (the rhythm remains intact)
; The original row can be restored using 'Restore'.

; Buffers are stored only while the plugin is active.

; Only records and play on MIDI channel 1

; Does not record controllers.

<Cabbage>
form caption("MIDI Note Recorder") size(445,110), pluginid("MRec") style("legacy")
image                    bounds(  0,  0,445,110), colour(0,0,0)
button   bounds( 10, 10, 60, 20), fontcolour:0(50,50,50), fontcolour:1(255,205,205), colour:0(10,0,0), colour:1(150,0,0), text("RECORD","RECORD"), channel("Record"), latched(1), radiogroup(1)
button   bounds( 10, 40, 60, 20), fontcolour:0(50,50,50), fontcolour:1(205,255,205), colour:0(0,10,0), colour:1(0,150,0), text("PLAY","PLAY"), channel("Play"), latched(1), radiogroup(1)
button   bounds( 10, 70, 60, 20), fontcolour:0(50,50,50), fontcolour:1(205,205,255), colour:0(0,0,10), colour:1(0,0,150), text("STOP","STOP"), channel("Stop"), latched(1), radiogroup(1), value(1)

label    bounds( 80, 10, 50, 15), text("Buffer");, fontcolour("white")
combobox bounds( 80, 28, 50, 20), text("1","2","3","6","5","6","7","8"), value(1), channel("Buffer")

rslider  bounds(140,  5, 60, 90), channel("Speed"), text("Speed"), range(0.125,8,1,0.5,0.001), textbox(1)
rslider  bounds(210,  5, 60, 90), channel("Transpose"), text("Transpose"), range(-24,24,0,1,1), textbox(1)
rslider  bounds(280,  5, 60, 90), channel("Velocity"), text("Velocity"), range(0.5,2,1,0.5,0.01), textbox(1)

button   bounds(350, 10, 90, 20), fontcolour:0(50,50,50), fontcolour:1(255,205,255), colour:0(10,0,10), colour:1(150,0,150), text("RETROGRADE","RETROGRADE"), channel("Retrograde"), latched(0)
button   bounds(350, 40, 90, 20), fontcolour:0(50,50,50), fontcolour:1(205,255,255), colour:0(0,10,10), colour:1(0,150,150), text("SHUFFLE","SHUFFLE"), channel("Shuffle"), latched(0)
button   bounds(350, 70, 90, 20), fontcolour:0(50,50,50), fontcolour:1(255,255,205), colour:0(10,10,0), colour:1(150,150,0), text("RESTORE","RESTORE"), channel("Restore"), latched(0)

</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -n -+rtmidi=null -Q0 -M0 --midi-key-cps=4 --midi-velocity-amp=5
</CsOptions>

<CsInstruments>

sr     = 44100
ksmps  = 8
nchnls = 1
0dbfs  = 1

massign	0,10

giNBuffers	=	8			; number of buffers for note storage
giNEvents	=	10000		; number of event storage locations in each buffer. Divide by 2 for the number of notes that can be stored.

giMIDIChan	=	1			; midi channel

; stores note data (5000 notes)
gkData[][][] init giNBuffers,giNEvents, 4			; array for storage of notes while recording
gkSavedData[][][] init giNBuffers,giNEvents, 4		; array for storage of original note if a speed change has been made
gkSeqLen[]	init	giNBuffers						; length of each buffer after recording (in events)


; UDO that sends note offs for all possible notes (useful to prevent hanging/stuck notes)
opcode	AllNotesOff,0,i
 iMIDIChan	xin					; read in input arguments
 kNote	=	0					; set for lowest possible note
 while kNote<=127 do			; while kNote is still less than maximum possible MIDI note...
  midiout 128,iMIDIChan,kNote,0	; send a note off for this note
  kNote	+=	1					; increment kNote read to turn of the note a semitone higher
 od
endop

instr   1
 ; read in  widgets
 gkRecord	chnget	"Record"
 gkPlay		chnget	"Play"
 gkSpeed	chnget	"Speed"
 gkBuffer	chnget	"Buffer"
 gkTranspose	chnget	"Transpose"
 gkVelocity	chnget	"Velocity"
 gkRetrograde	chnget	"Retrograde"
 gkShuffle	chnget	"Shuffle"
 gkRestore	chnget	"Restore"
 
; trigger when button value goes from off to on
 kOnTrig trigger gkRecord,0.5,0
; start instrument with a held note when trigger received
 schedkwhen      kOnTrig,0,0,2,0,-1
; trigger when button value goes from off to on
 kOnTrig trigger gkPlay,0.5,0
; start instrument with a held note when trigger received
 schedkwhen      kOnTrig,0,0,3,0,-1
 
 ; Retrograde
 if trigger:k(gkRetrograde,0.5,0)==1 then
  gkSavedData[][][]	=	gkData		; backup recording
  kNdx		=	0
  kSeqLen	=	gkSeqLen[gkBuffer-1]			; length of sequence
  while kNdx<kSeqLen do
   kNote		=	gkSavedData[gkBuffer-1][kSeqLen - 1 - kNdx][2]
   kVel		=	gkSavedData[gkBuffer-1][kSeqLen - 1 - kNdx][3]
   gkData[gkBuffer-1][kNdx][2]	=	kNote
   gkData[gkBuffer-1][kNdx][3]	=	kVel
   kNdx	+=	1
  od
 endif

 ; Shuffle
 if trigger:k(gkShuffle,0.5,0)==1 then
  gkData[][][]	=	gkSavedData		; backup recording
  kNdx		=	0
  kSeqLen	=	gkSeqLen[gkBuffer-1]			; length of sequence
  while kNdx<kSeqLen do
   kNote1	=	gkData[gkBuffer-1][kNdx][2]
   kVel1		=	gkData[gkBuffer-1][kNdx][3]
   kRndNdx	random	0,kSeqLen-0.001
   kNote2	=	gkData[gkBuffer-1][kRndNdx][2]
   kVel2		=	gkData[gkBuffer-1][kRndNdx][3]
   gkData[gkBuffer-1][kNdx][2]		=	kNote2
   gkData[gkBuffer-1][kNdx][3]		=	kVel2
   gkData[gkBuffer-1][kRndNdx][2]	=	kNote1
   gkData[gkBuffer-1][kRndNdx][3]	=	kVel1
   kNdx 	+=	1
  od
 endif

 ; Restore
 if trigger:k(gkRestore,0.5,0)==1 then
  gkData[][][]	=	gkSavedData		; backup recording 
 endif

 ; MIDI Thru
 gkStatus,gkChan,gkData1,gkData2	midiin
 									midiout gkStatus,gkChan,gkData1,gkData2


endin

instr   2       ; Record gesture

 gkNdx	init	0		 		; event index
 gkTime	init	0				; timer (counts k-cycles). Timer only starts once the first note has been played.
 kTrig	init	0				; trig which indicates when the first note has been played. 0 before first note has been played, 1 as soon as the first note has been played
 
 if gkStatus!=0 && kTrig==0 then		; sense first note
  kTrig	=	1							; flip trigger to 1
 endif
  
 if kTrig==1 then		; if the first note has been played
  gkTime	+=	1			; increment the k-rate counter
 endif
 
 if gkRecord==0 then            	; If record button is deactivated...
  gkSeqLen[gkBuffer-1]	=	gkNdx	; recording is completed, write the recording length (in events) into the array that stores recording lengths
  gkSavedData[][][]	=	gkData		; backup recording
  turnoff                       	; ...turn this instrument off.
 endif
 
endin

instr   3       ; Playback recorded gesture
 kNdx		init	0		 				; event index
 kSeqLen	=		gkSeqLen[gkBuffer-1]	; length of the sequence. Used to sense when to stop.

 kTimer		init	0

 kNextEventTime	=		gkData[gkBuffer-1][kNdx][0]

 if trigger:k(kTimer,kNextEventTime,0)==1 then
  kStart	=	gkData[gkBuffer-1][kNdx][0]
  kDur		=	gkData[gkBuffer-1][kNdx][1]
  kNote		=	gkData[gkBuffer-1][kNdx][2]
  kVel		=	gkData[gkBuffer-1][kNdx][3]
  event	"i",6,0,kDur/gkSpeed, limit(kNote+gkTranspose,0,127), limit(kVel*gkVelocity,0,127)
  kNdx	+=	1
 endif

 kEndTime	=		gkData[gkBuffer-1][kSeqLen-1][0] + gkData[gkBuffer-1][kSeqLen-1][1]
 if kTimer>=kEndTime then
  chnset	k(0),"Play"
  chnset	k(1),"Stop"  
 endif

 kTimer		+=	ksmps/sr * gkSpeed

 if gkPlay==0 then                 	; if play button is deactivated...
  AllNotesOff	giMIDIChan			; call UDO that sends note offs for every possible note
   turnoff                          ; ...turn this instrument off.
 endif
 
endin

instr   4       ; save array (not used yet)

endin


instr   5       ; load array (not used yet)

endin

instr		6	; Output instrument

 noteondur giMIDIChan, p4, p5, p3

 /*
 aSig		poscil	p5/127,cpsmidinn(p4)
 aEnv		linsegr	0,0.001,1,0.1,0
 		out		aSig/10 * aEnv
 */
 
endin

instr	10
 iNdx	=	i(gkNdx)
 gkNdx	init	iNdx+1
 iNote	notnum
 iVel	veloc	0,127
 iStart	= i(gkTime)/kr
 kDur	timeinsts
 
 if release:k()==1 then
  gkData[gkBuffer-1][iNdx][0] = iStart
  gkData[gkBuffer-1][iNdx][1] = kDur
  gkData[gkBuffer-1][iNdx][2] = iNote
  gkData[gkBuffer-1][iNdx][3] = iVel
 endif
 
 /*
 ; Audition note when not in a plugin
 aSig	poscil	iVel/127*0.1,cpsmidinn(iNote)
 		outs	aSig, aSig
 */
endin

</CsInstruments>

<CsScore>
i 1 0 3600
</CsScore>

</CsoundSynthesizer><Cabbage>
form caption("MIDI Out"), size(400,80), pluginid("MOt1") style("legacy")
keyboard bounds(0,0,400,80)
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
;-dm0 --midi-key=4 --midi-velocity=5 -n -M0 -Q0
;-dm0 -n -+rtmidi=null -M0 -Q0
-dm0 -n -+rtmidi=null -M0 -Q0
</CsOptions>

<CsInstruments>

sr 	= 	44100
ksmps 	= 	16
nchnls 	= 	2
0dbfs	=	1

massign	0,1

instr	1	; receive midi and note on
 prints	"note on\n"
 noteon	1,p4,p5
 krel release
 if krel==1 then
  event "i",3,0,0,p4,p5
 endif
endin

instr	3	; note off
 prints	"note off\n"
 noteoff	1,p4,p5
endin

</CsInstruments>

</CsoundSynthesizer>
<Cabbage>
form caption("MIDI Out"), size(400,80), pluginid("Mot2") style("legacy")
keyboard bounds(0,0,400,80)
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-dm0 -odac -Q2 --midi-key=4 --midi-velocity-amp=5
</CsOptions>

<CsInstruments>

sr 	= 	44100
ksmps 	= 	16
nchnls 	= 	2
0dbfs	=	1

instr	1
 ktrig	init	1
 	midion2 1, 60, 70, ktrig
 ktrig	=	0
endin

</CsInstruments>

<CsScore>
i 1 0 2 60 70
</CsScore>


</CsoundSynthesizer>
; En Garde! (Drawing a sword: precedural audio)
; Iain McCurdy, 2017

; Drawing Sword (groupbox)
; ------------------------
; Density		-	roughness of the texture of the sword
; Draw duration	-	time taken to draw the sword from the scabbard
; Freq.1 [start]/Freq.1 [end]
; Freq.2 [start]/Freq.2 [end]
;  				-	start and end frequencies for the plate modelling for the drawing of the sword sound
; Feedback		-	basically the inverse of the damping of the sword while it is begin drawn
; Draw Gain		-	amplitude gain of the sword being drawn part of the sound

; Drawing Sword (groupbox)
; ------------------------
; Freq. Base		-	lowest partial frequency
; Freq. Range		-	possible extent of frequencies (frequencies are generated randomly)
; Resonance			-	ring time for when the sword is free of the scabbard
; Seed				-	defines the particular set of random values that will be generated. A seed value of zero will produce a different sword sound each time it is drawn.
; N.Partials		-	number of partials of the resonance of the sword
; Ring Offset		-	amount of random deviation from resonance value defined by 'Resonance' for each partial
; Ring Gain			-	amplitude gain for the ringing resonance part of the sound

<Cabbage>
form caption("En garde!") size(600, 310), colour(58, 110, 182), pluginid("EnGa") style("legacy")
button bounds(5,5,590,30) channel("PlaySound") text("Draw Sword") latched(0)
groupbox bounds(5,40,590,130) outlinethickness(1) outlinecolour(200,200,200) colour(0,0,0,100) plant("Drawing") text("Drawing Sword")
{
rslider bounds(5,25,70,90) channel("TexturalDensity") text("Density") valuetextbox(1) range(100,10000,1000,0.5,1)
rslider bounds(75,25,70,90) channel("DrawDuration") text("Duration") valuetextbox(1) range(0.01,2,0.7,0.5,0.001)
image   bounds(148,30,292,90) outlinethickness(1) outlinecolour(200,200,200) colour(0,0,0,50) shape("rounded")
hslider bounds(150,35,300,20) channel("Freq1a") text("Freq. 1 [Start]") valuetextbox(1) range(100,3000,300,0.5,1)
hslider bounds(150,55,300,20) channel("Freq1b") text("Freq. 1 [End]") valuetextbox(1) range(100,3000,811,0.5,1)
hslider bounds(150,75,300,20) channel("Freq2a") text("Freq. 2 [Start]") valuetextbox(1) range(100,3000,717,0.5,1)
hslider bounds(150,95,300,20) channel("Freq2b") text("Freq. 2 [End]") valuetextbox(1) range(100,3000,933,0.5,1)
rslider bounds(440,25,70,90) channel("Feedback") text("Feedback") valuetextbox(1) range(0.0,0.249,0.17.0)
rslider bounds(510,25,70,90) channel("DrawGain") text("Draw Gain") valuetextbox(1) range(0,2,1,0.5,0.001)
}
groupbox bounds(5,175,590,130) outlinethickness(1) outlinecolour(200,200,200) colour(0,0,0,100) plant("Ringing") text("Ringing")
{
rslider bounds(15,25,70,90) channel("Seed") text("Seed") valuetextbox(1) range(0,1000,879,1,1)
rslider bounds(95,25,70,90) channel("RingFreqBase") text("Freq. Base") valuetextbox(1) range(500,6000,1400,0.5,1)
rslider bounds(175,25,70,90) channel("RingFreqRange") text("Freq. Range") valuetextbox(1) range(500,12000,5880,0.5,1)
rslider bounds(255,25,70,90) channel("Resonance") text("Resonance") valuetextbox(1) range(1,8000,800,0.5,1)
rslider bounds(335,25,70,90) channel("ResOffset") text("Res. Offset") valuetextbox(1) range(0,4,2,0.5,0.01)
rslider bounds(415,25,70,90) channel("NPartials") text("N.Partials") valuetextbox(1) range(1,50,20,1,1)
rslider bounds(495,25,70,90) channel("RingGain") text("Ring Gain") valuetextbox(1) range(0,2,1,0.5,0.001)
}

</Cabbage>
<CsoundSynthesizer>
<CsOptions>
-n -dm0
</CsOptions>
<CsInstruments>
; Initialize the global variables. 
sr = 44100
ksmps = 32
nchnls = 2
0dbfs = 1

instr		1	; read button an trigger a note event accordingly
 gkPlaySound	chnget	"PlaySound"
 if trigger:k(gkPlaySound,0.5,0)==1 then
  event	"i",2,0,-1
 endif
endin

; UDO for a single resonance partial
opcode PARTIAL,a,aaiiiip
 aInSig,aQ,iResFreqBase,iResFreqRange,iResOffset,iNPartials,iCount	xin
 aPartial			mode		aInSig, limit:i (exprand(iResFreqRange) + iResFreqBase, 20, sr/$M_PI), aQ * (2 ^ random(-iResOffset,iResOffset))
 aMix	=	0
 if iCount<=iNPartials then
 	aMix	PARTIAL	aInSig,aQ,iResFreqBase,iResFreqRange,iResOffset,iNPartials,iCount+1
 endif
 	xout	aPartial + aMix
endop


instr		2	; 'drawing a sword' sound effect
 
 ; drawing of the sword part of the sound
 iDrawDur		chnget		"DrawDuration"
 iRoughness		chnget		"TexturalDensity"
 kEnv			expseg		0.1, 0.3 * (iDrawDur/0.7), 1, iDrawDur-0.4, 1, 0.1 * (iDrawDur/0.7), 0.1,1,0.1
 aDraw			dust2		0.1*(kEnv-0.1),	 iRoughness
 aDraw			reson		aDraw, 8000,3000,1
 iFB			chnget		"Feedback"
 aFreq1			expseg		chnget:i("Freq1a"),(0.3*(iDrawDur/0.7)) + (iDrawDur-0.4),chnget:i("Freq1b"),1,chnget:i("Freq1b")
 aFreq2			expseg		chnget:i("Freq2a"),(0.3*(iDrawDur/0.7)) + (iDrawDur-0.4),chnget:i("Freq2b"),1,chnget:i("Freq2b")
 aDraw			wguide2		aDraw,aFreq1,aFreq2,10000,10000,iFB,iFB
 aDraw			wguide2		aDraw,aFreq1,aFreq2,10000,10000,iFB,iFB
 aDraw			dcblock2	aDraw
 ;				outs		aDraw * chnget:i("DrawGain"), aDraw * chnget:i("DrawGain")
 
 ; ringing
				seed		chnget:i("Seed")
 aQ				linseg		1, (0.3*(iDrawDur/0.7)) + (iDrawDur-0.4), 1, 0.05, chnget:i("Resonance")
 iResFreqBase	=			chnget:i("RingFreqBase")
 iResFreqRange	=			chnget:i("RingFreqRange") / 5
 iNPartials		=			10
 aRing	 		PARTIAL		aDraw, aQ, iResFreqBase, iResFreqRange, chnget:i("ResOffset"), chnget:i("NPartials")
 aRing			*=			chnget:i("RingGain")
				outs		aRing, aRing
				
 ; wait until resonance has died away before turning off instrument
 if rms:k(aRing)<0dbfs*0.00001 && timeinsts() > 1 then
  turnoff
 endif
endin

</CsInstruments>
<CsScore>
i 1 0 z
</CsScore>
</CsoundSynthesizer>
; Log Fire
; Based on work by Eric Grehan, Rory Walsh and Iain McCurdy, 2017

<Cabbage>
form caption("Log Fire") size(400, 170),  pluginid("Log Fire")   style("legacy")
image   bounds(  0,  0,400,170) colour(0,0,0,0) identchannel("PanelID")
button  bounds( 10,  5,380,  40) channel("playButton") text("Start Fire", "Stop Fire") identchannel("ButtonID")
rslider bounds( 10, 50,100, 100) channel("density"), text("Crackle Density") range(1,80, 16, 1, 0.001), valuetextbox(1), textbox(1)
rslider bounds(100, 50,100, 100) channel("crackleGain"), text("Crackle Gain"), range(0, 1,0.5, 1, 0.001), valuetextbox(1), textbox(1)
rslider bounds(190, 50,100, 100) channel("hissNoise"), text("Hiss Noise"), range(0, .22, 0.04, 1, 0.001), valuetextbox(1), textbox(1)
rslider bounds(280, 50,100, 100) channel("flameGain"), text("Flame Gain") range(0, 1, .2, 1, 0.001), valuetextbox(1), textbox(1)
</Cabbage>
<CsoundSynthesizer>
<CsOptions>
-n -d -m0d
</CsOptions>
<CsInstruments>
; Initialize the global variables. 
sr = 44100
ksmps = 16
nchnls = 2
0dbfs = 1

; Rory Walsh 2017, based something Eric 
; Grehan showed me in class. I basically 
; swapped his use of the noise opcode 
; for the dust2 opcode, which I think 
; gives a better crackle. 

instr CONTROLLER
	kPlayButton chnget "playButton"
	if changed(kPlayButton) == 1 then
		if kPlayButton == 1 then
			event "i", "CRACKLE", 0, -1
			event "i", "HISS", 0, 3600
			event "i", "HISS", 0, 3600
			event "i", "FLAMES", 0, 3600
			event "i", "FLAMES", 0, 3600
		else
			turnoff2 "CRACKLE", 1, 0
			turnoff2 "HISS", 0, 0
			turnoff2 "FLAMES", 0, 0
		endif
	endif
	
	
	if kPlayButton==1 then
	if gausstrig:k(1,100,10)==1 then
	 reinit	FLASH
	endif
	FLASH:
	kFlash	expon	exprand(0.3),1,0.1
	rireturn
	 ;if changed:k(kR,kG,kB)==1 then
	 if metro(16)==1 then
	  Smess	sprintfk	"colour:1(%d,%d,%d)",limit:k(255*kFlash,0,255),limit:k((155*kFlash),0,255),0
			chnset		Smess, "PanelID"
	 endif
	endif
endin

instr CRACKLE
	a1 gausstrig 1,chnget:k("density"),30
	kCF	randomh	8.5,14,chnget:k("density")
	a1	reson	a1,cpsoct(kCF),cpsoct(kCF),1
	a1	*=		randomh:k(0.2,1,chnget:k("density"))
	aL,aR	pan2	a1,randomh:k(0.1,0.9,chnget:k("density"))
	outs aL*chnget:k("crackleGain"), aR*chnget:k("crackleGain")
endin

instr HISS
    kdB	randomh	-6,0,10
	aNoise1 dust2 .05*port(ampdbfs(kdB),0.1), randomi:k(4000,8000,0.6)
	aFlt butterhp aNoise1, 4000
	aFlt tone aFlt, 8000
	aL,aR	pan2	aFlt,jspline(0.4,1,1)+0.5
	outs aL*chnget:k("hissNoise"), aR*chnget:k("hissNoise")
endin

instr FLAMES
	a1 noise 7, 0
	a2 butlp a1, 40+a(jitter:k(25, 1, 50))
	aL,aR	pan2	a2,jspline(0.4,1,3)+0.5
	outs aL*chnget:k("flameGain"), aR*chnget:k("flameGain")
endin

</CsInstruments>
<CsScore>
;starts instrument 1 and runs it for a week
i"CONTROLLER" 0 [60*60*24*7] 
</CsScore>
</CsoundSynthesizer>
; Stormy Weather
; Iain McCurdy, 2017

<Cabbage>
form caption("Stormy Weather") size(300, 310), pluginid("StWr")  style("legacy")
button  bounds( 10,  5,70, 30), text("Wind","Wind"), latched(1), fontcolour:0(100,100,100), channel("Wind"), value(1)

rslider bounds(  5, 40, 80, 80), channel("WindLev"), text("Level"), range(0, 1, .5, 1, .01)
rslider bounds(  5,130, 80, 80), channel("WindLayers"), text("Layers"), range(1,10, 2, 1, 1)

button  bounds(110,  5,70, 30), text("Thunder","Thunder"), fontcolour:0(100,100,100), channel("Thunder")
rslider bounds(105, 40, 80, 80), channel("ThunderLev"), text("Level"), range(0, 1, .5, 1, .01)
rslider bounds(105,130, 80, 80), channel("ThunderDur"), text("Duration"), range(4, 25, 11)
rslider bounds(105,220, 80, 80), channel("ThunderDist"), text("Distance"), range(0, 1, 0.1)

button  bounds(210,  5,70, 30), text("Rain","Rain"), latched(1), fontcolour:0(100,100,100), channel("Rain"), value(1)
rslider bounds(205, 40, 80, 80), channel("RainLev"), text("Level"), range(0, 1, .5, 1, .01)
rslider bounds(205,130, 80, 80), channel("RainMix"), text("Mix"), range(0, 1, .5)
rslider bounds(205,220, 80, 80), channel("RainDens"), text("Density"), range(0, 1, .5)


</Cabbage>
<CsoundSynthesizer>
<CsOptions>
-n -d -+rtmidi=NULL -M0 -m0d
</CsOptions>
<CsInstruments>
; Initialize the global variables.
sr = 44100
ksmps = 16
nchnls = 2
0dbfs = 1
seed 0

instr	1
 gkWind			chnget	"Wind"		; on/off
 gkWindLev		chnget	"WindLev"

 kThunder		chnget	"Thunder"	; on/off
 kThunderDur	chnget	"ThunderDur"	; on/off
 kThunderDist	scale	chnget:k("ThunderDist"),1,1.7

 kRain			chnget	"Rain"		; on/off


 if trigger:k(gkWind,0.5,0)==1 then
  event	"i",2,0,3600
 endif

 if trigger:k(kThunder,0.5,0)==1 then
  event	"i",3,0,kThunderDur,kThunderDist
  event	"i",3,0,kThunderDur,kThunderDist
 endif

  if trigger:k(kRain,0.5,0)==1 then
  event	"i",4,0,3600
 elseif trigger:k(kRain,0.5,1)==1 then
  turnoff2	4,0,1
 endif

endin

opcode	Wind,aa,ip
 iLayers,iCount	xin
 aML		=		0
 aMR		=		0
 kdB		rspline	-3, 0, 5, 15
 kenv		expseg	0.01,4,1,1,1
 aNoise		dust2		0.02*ampdbfs(kdB)*kenv*gkWindLev, 12000
 kCF		rspline	8,12.5,0.1,0.2
 kBW		rspline	0.04,0.2,0.2,2
 aNoise		reson		aNoise, cpsoct(kCF), cpsoct(kCF)*kBW, 2
 kpan		rspline	0.1,0.9,0.4,0.8
 aL,aR		pan2		aNoise,kpan
 if iCount<iLayers then
  aML,aMR	Wind	iLayers,iCount+1
 endif
 		xout		aL+aML, aR+aMR
endop

instr		2	; howling wind
 if gkWind==0 then
  turnoff
 endif
 kLayers	chnget	"WindLayers"
 if changed(kLayers)==1 then
  reinit RELAYER
 endif
 RELAYER:
 aL,aR	Wind	i(kLayers)
 		outs	aL,aR

		chnmix	aL*0.3, "SendL"						; also send to the reverb
 		chnmix	aR*0.3, "SendR"
endin




instr		3	; thunder
 kenv		expseg	0.01, 0.05, 1, 0.1, 0.5, p3-0.01, 0.01
 aNse		pinkish	kenv*0.6
 kCF		expon		p4,p3,0.03
 kCFoct		randomh	2*kCF,6*kCF,20
 aNse		reson		aNse*3,a(cpsoct(kCFoct)),a(cpsoct(kCFoct)*5),1
 aNse		butlp		aNse, 1000
 ipan		random	0,1
 aL,aR	pan2		aNse,ipan
 		outs		aL, aR
		chnmix	aL*0.15, "SendL"						; also send to the reverb
 		chnmix	aR*0.15, "SendR"
endin





instr		4	; rain
 kRainMix	chnget	"RainMix"
 kRainDens	chnget	"RainDens"

 kTrig	dust		1, 500*kRainDens
 kenv		linsegr	0,2,1,5,0
 		schedkwhen	kTrig, 0, 0, 5, 0, 0.008, kenv*(1-sqrt(kRainMix))
 aNse	dust2		0.1*kenv*sqrt(kRainMix),3000*kRainDens
 aNse2	dust2		0.1*kenv*sqrt(kRainMix),1500*kRainDens
 aNse	butlp		aNse, 1000
 aNse2	butlp		aNse2, 1000
 		outs		aNse,aNse2
endin
instr		5	; rain
 iCPS1		random	10,11
 iCPS2		random	13,14
 idB		random	-10,-32
 aCPS		expon		cpsoct(iCPS1),p3,cpsoct(iCPS2)
 aEnv		expon		1,p3,0.001
 aSig		poscil	aEnv*ampdbfs(idB)*p4,aCPS
 aSig		buthp		aSig,9000
 ipan		random	0,1
 aL,aR	pan2		aSig,ipan
 		outs		aL, aR
		chnmix	aL*0.3, "SendL"						; also send to the reverb
 		chnmix	aR*0.3, "SendR"
endin



instr		999	; reverb
 aInL		chnget	"SendL"
 aInR		chnget	"SendR"
 aL, aR	reverbsc	aInL, aInR, 0.9, 12000
 		outs		aL, aR
 		chnclear	"SendL"
 		chnclear	"SendR"
endin

</CsInstruments>
<CsScore>
i 1 0 [60*60*24*7]

i 999 0 [60*60*24*7]
</CsScore>
</CsoundSynthesizer>
; Calculated_F_Tables.csd
; Written by Iain McCurdy, 2015

; GEN tables are calculated point-by-point within i-time loops based on a number of simple formulae relating y and x.
; The y-axis location is only a graphical indication of what x values were used in calculating y values. It does not
; imply a shift in table index values (which are always positive).
; n.b. tan function output exceeds the range of the gentable viewer


; Some of these functions might be useful for control mapping or waveshaping.

<Cabbage>
form size(500,570), text("Calculated F-Table"), guirefresh(32), colour(80,80,80), pluginid("CaFT")
gentable bounds(  0,  0,500,500), tablenumber(1), tablecolour("Orange"), identchannel("table"), amprange(-1,1,-1), zoom(-1), fill(0)
image    bounds(  0,250,500,  1), shape("sharp"), colour("white")
image    bounds(500,  0,  1,300), shape("sharp"), colour("white"), identchannel("y_axis")
combobox bounds(  5,505,120, 20), channel("formula"), text("y = x","y = -x","y = x / a","y = x * a","y = x ^ a","y = - [x ^ a]","y = x ^ [1/a]","y = - x ^ [1/a] + 1","y = sin[x * pi]","y = cos[x * pi]","y = tan[x * pi]","y = log[x]","y = log2[x]","y = log10[x]","y = sinh[x * a]","y = cosh[x * a]","y = tanh[x * pi * a]","y = sininv[x]","y = cosinv[x]","y = taninv[x * a]","y = a ^ x","y = [a ^ x] - 1","y = [a ^ -x] - 1")

image  bounds( 5,525, 66, 40) plant("a") identchannel("aID") colour(0,0,0,0)
{
nslider bounds( 0,  0, 40, 30), text("a ="), channel("a"), range(1,100,2,1,1) textcolour("white")
button    bounds(41,  8, 20, 14), text("^","^") channel("aIncr") latched(0)
button    bounds(41,  8, 20, 14), text("^","^") channel("aDecr") latched(0), rotate(3.147,10,15)
}

label    bounds(130,513,100, 14), text("normalised"), visible(0), identchannel("normalised")
label    bounds(220,513,100, 14), text("x = 0 to 10"), visible(0), identchannel("x = 0 to 10")
nslider bounds(340,505,60,30), text("x value"), channel("xval"), range(-10, 10,0,1,0.00001)
nslider bounds(405,505,60,30), text("y value"), channel("yval"), range(-100,100,0,1,0.00001)
</Cabbage>

<CsoundSynthesizer>

<CsOptions>
-n -dm0
</CsOptions>

<CsInstruments>

sr = 44100
ksmps = 16
nchnls = 1
0dbfs = 1

gi1        ftgen 1,0,2048,10,1	; table for storage of functions
giprenorm  ftgen 2,0,2048,10,1	; table for storage of functions (pre-normalisation)


	      opcode         TabNormalise,0,i		; UDO for normalising a table
itabnum       xin
inumitems     =              ftlen(itabnum)             ; derive number of items in table
imax          table          0,itabnum                  ; maximum value starts as first table items
icount        init           1                          ; counter starts at 1 (we've already read item 0)
loop:                                                   ; loop 1 beginning
ival          table          icount,itabnum             ; read value from table
if abs(ival)>=imax then					; if absolute value read from table is higher than (or equal to) current maximum...
 imax	=	abs(ival)				; ...value becomes new maximum
 indx	=	icount					; index of maximum becomes the index of this value
endif							; end of conditional branch
              loop_lt        icount,1,inumitems,loop    ; conditionally loop back
icount        =              0
loop2:
ival          table           icount,gi1
   	      tableiw         ival/imax, icount,itabnum
              loop_lt         icount,1,ftlen(itabnum),loop2
              endop




instr 1
 iftlen =       ftlen(gi1)			; length of the function table

 kformula	chnget	"formula"		; formula choice
 kformula	init	1
 ka			chnget	"a"

 if trigger:k(chnget:k("aIncr"),0.5,0)==1 then
  chnset    limit:k(ka+1,1,100),"a"
 elseif trigger:k(chnget:k("aDecr"),0.5,0)==1 then
  chnset    limit:k(ka-1,1,100),"a"
 endif


 if changed(kformula)==1 then			; if formula choice changes...
  reinit UPDATE					; start a reinitilisation
 endif

 UPDATE:
 iformula	=	i(kformula)		; i-time state of kformula
 icount		=	0			; reset counter. (Moves for each index of the function table)
 chnset	"bounds(250,  0,1,500)","y_axis"	; default set position of y-axis
 chnset	"visible(0)","normalised"		; default hide 'normalised' label
 chnset	"visible(0)","x = 0 to 10"		; default hide label

 if iformula==1 then					; y = x
  while icount<iftlen do                ; set up a while loop
  kNorm		init	0	; Normalised/unnormalised
  kXScale	init	0	; x axis scaling
  ix	=	((icount/iftlen) * 2) -1		; shift x range to -1 to 1
  iy	=	ix					; apply formula to derive y
  	tableiw iy,icount,gi1				; write y value to table
  icount	+=	1                       ; increment counter
  od                                    ; end of while loop
    chnset	"visible(0)","aID"		; show/hide a widgets

 elseif iformula==2 then				; y = -x
  while icount<iftlen do                ; set up a while loop
  kNorm		init	0	; Normalised/unnormalised
  kXScale	init	0	; x axis scaling
  ix	=	((icount/iftlen) * 2) -1                ; shift x range to -1 to 1
  iy	=	-ix                                     ; apply formula to derive y
  	tableiw iy,icount,gi1                           ; write y value to table
  icount	+=	1                       ; increment counter
  od                                    ; end of while loop
  chnset	"visible(0)","aID"		; show/hide a widgets

 elseif iformula==3 then				; y = x / a
  if changed:k(ka)==1 then
   reinit RestartForm3
  endif
  RestartForm3:
  icount	=	0
  while icount<iftlen do                ; set up a while loop
  kNorm		init	0					; Normalised/unnormalised
  kXScale	init	0					; x axis scaling
  ix	=	((icount/iftlen) * 2) -1    ; shift x range to -1 to 1
  iy	=	ix / i(ka)                  ; apply formula to derive y
  	tableiw iy,icount,gi1               ; write y value to table
  icount	+=	1                       ; increment counter
  od                                    ; end of while loop
  chnset	"visible(1)","aID"			; show/hide a widgets

 elseif iformula==4 then				; y = x * a
  if changed:k(ka)==1 then
   reinit RestartForm4
  endif
  RestartForm4:
  icount	=	0
  while icount<iftlen do                ; set up a while loop
  kNorm		init	0	                ; Normalised/unnormalised
  kXScale	init	0	                ; x axis scaling
  ix	=	((icount/iftlen) * 2) -1    ; shift x range to -1 to 1
  iy	=	ix * i(ka)                  ; apply formula to derive y
  	tableiw iy,icount,gi1               ; write y value to table
  icount	+=	1                       ; increment counter
  od                                    ; end of while loop
  chnset	"visible(1)","aID"		    ; show/hide a widgets

  elseif iformula==5 then				; y = x ^ a
  if changed:k(ka)==1 then
   reinit RestartForm5
  endif
  RestartForm5:
  icount	=	0
  while icount<iftlen do                			; set up a while loop
  kNorm		init	0								; Normalised/unnormalised
  kXScale	init	0								; x axis scaling
  ix	=	((icount/iftlen) * 2) -1                ; shift x range to -1 to 1
  iy	=	ix ^ i(ka)                              ; apply formula to derive y
  	tableiw iy,icount,gi1                           ; write y value to table
  icount	+=	1                       			; increment counter
  od                                    			; end of while loop
  chnset	"visible(1)","aID"						; show/hide a widgets

 elseif iformula==6 then							; y = - (x ^ a)
  if changed:k(ka)==1 then
   reinit RestartForm6
  endif
  RestartForm6:
  icount	=	0
  while icount<iftlen do                			; set up a while loop
  kNorm		init	0								; Normalised/unnormalised
  kXScale	init	0								; x axis scaling
  ix	=	((icount/iftlen) * 2) -1                ; shift x range to -1 to 1
  iy	=	- (ix ^ i(ka))                          ; apply formula to derive y
  	tableiw iy,icount,gi1                           ; write y value to table
  icount	+=	1                       			; increment counter
  od                                    			; end of while loop
  chnset	"visible(1)","aID"						; show/hide a widgets

  elseif iformula==7 then							; y = x ^ (1/a)
  if changed:k(ka)==1 then
   reinit RestartForm7
  endif
  RestartForm7:
  icount	=	0
  while icount<iftlen do                			; set up a while loop
  kNorm		init	0								; Normalised/unnormalised
  kXScale	init	1								; x axis scaling
  ix	=	icount/iftlen                           ; shift x range to 0 to 1
  iy	=	pow:i(ix,1/i(ka))                       ; apply formula to derive y
  	tableiw iy,icount,gi1                           ; write y value to table
  icount	+=	1                       			; increment counter
  od                                    			; end of while loop
  chnset	"bounds(0,  0,1,500)","y_axis"			; set position of y-axis
  chnset	"visible(1)","aID"						; show/hide a widgets

 elseif iformula==8 then							; y = - x ^ (1/a) + 1
  if changed:k(ka)==1 then
   reinit RestartForm8
  endif
  RestartForm8:
  icount	=	0
  kNorm		init	0								; Normalised/unnormalised
  kXScale	init	1								; x axis scaling
  while icount<iftlen do                			; set up a while loop
  ix	=	icount/iftlen                           ; shift x range to 0 to 1
  iy	=	- pow:i(ix,1/i(ka)) + 1                 ; apply formula to derive y
  	tableiw iy,icount,gi1                           ; write y value to table
  icount	+=	1                       			; increment counter
  od                                    			; end of while loop
  chnset	"bounds(0,  0,1,500)","y_axis"			; set position of y-axis
  chnset	"visible(1)","aID"						; show/hide a widgets

 elseif iformula==9 then							; y = sin(x  * pi)
  while icount<iftlen do                			; set up a while loop
  kNorm		init	0								; Normalised/unnormalised
  kXScale	init	0								; x axis scaling
  ix	=	((icount/iftlen) * 2) -1                ; shift x range to -1 to 1
  iy	=	sin(ix*$M_PI)                           ; apply formula to derive y
  	tableiw iy,icount,gi1                           ; write y value to table
  icount	+=	1                       			; increment counter
  od                                    			; end of while loop
  chnset	"visible(0)","aID"						; show/hide a widgets

 elseif iformula==10 then							; y = cos(x  * pi)
  while icount<iftlen do                			; set up a while loop
   kNorm	init	0								; Normalised/unnormalised
  kXScale	init	0								; x axis scaling
 ix	=	((icount/iftlen) * 2) -1                	; shift x range to -1 to 1
  iy	=	cos(ix*$M_PI)                           ; apply formula to derive y
  	tableiw iy,icount,gi1                           ; write y value to table
  icount	+=	1                       			; increment counter
  od                                    			; end of while loop
  chnset	"visible(0)","aID"						; show/hide a widgets

 elseif iformula==11 then				; y = tan(x  * pi)
  while icount<iftlen do                ; set up a while loop
  kNorm		init	0	; Normalised/unnormalised
  kXScale	init	0	; x axis scaling
  ix	=	((icount/iftlen) * 2) -1                ; shift x range to -1 to 1
  iy	=	tan(ix*$M_PI)                           ; apply formula to derive y
  	tableiw iy,icount,gi1                           ; write y value to table
  icount	+=	1                       ; increment counter
  od                                    ; end of while loop
  chnset	"visible(0)","aID"		; show/hide a widgets

 elseif iformula==12 then				; y = log(x)
  while icount<iftlen do                ; set up a while loop
  kNorm		init	1	; Normalised/unnormalised
  kXScale	init	10	; x axis scaling
  ix	=	(icount/iftlen)*10                      ; shift x range to 0 to 10
  iy	=	log(ix)                                 ; apply formula to derive y
  	tableiw iy,icount,gi1                           ; write y value to table
  icount	+=	1                       ; increment counter
  od                                    ; end of while loop
  tableicopy giprenorm, gi1
	TabNormalise	gi1
  chnset	"visible(1)","normalised"		; show 'normalised' label
  chnset	"visible(1)","x = 0 to 10"		; default hide label
  chnset	"bounds(0,  0,1,500)","y_axis"		; set position of y-axis
  chnset	"visible(0)","aID"		; show/hide a widgets

 elseif iformula==13 then				; y = log2(x)
  while icount<iftlen do                ; set up a while loop
  kNorm		init	1	; Normalised/unnormalised
  kXScale	init	10	; x axis scaling
  ix	=	(icount/iftlen)*10                      ; shift x range to 0 to 10
  iy	=	log2(ix)                                 ; apply formula to derive y
  	tableiw iy,icount,gi1                           ; write y value to table
  icount	+=	1                       ; increment counter
  od                                    ; end of while loop
  tableicopy giprenorm, gi1
	TabNormalise	gi1
  chnset	"visible(1)","normalised"		; show 'normalised' label
  chnset	"visible(1)","x = 0 to 10"		; default hide label
  chnset	"bounds(0,  0,1,500)","y_axis"		; set position of y-axis
  chnset	"visible(0)","aID"		; show/hide a widgets

 elseif iformula==14 then					; y = log10(x)
  while icount<iftlen do                	; set up a while loop
  kNorm		init	1						; Normalised/unnormalised
  kXScale	init	10						; x axis scaling
  ix	=	(icount/iftlen)*10              ; shift x range to 0 to 10
  iy	=	log10(ix)                       ; apply formula to derive y
  	tableiw iy,icount,gi1                   ; write y value to table
  icount	+=	1                       	; increment counter
  od                                    	; end of while loop
  tableicopy giprenorm, gi1
	TabNormalise	gi1
  chnset	"visible(1)","normalised"		; show 'normalised' label
  chnset	"visible(1)","x = 0 to 10"		; default hide label
  chnset	"bounds(0,  0,1,500)","y_axis"	; set position of y-axis
  chnset	"visible(0)","aID"				; show/hide a widgets

 elseif iformula==15 then					; y = sinh(x * a)
  if changed:k(ka)==1 then
   reinit RestartForm16
  endif
  RestartForm16:
  icount	=	0
  while icount<iftlen do                ; set up a while loop
  kNorm		init	1					; Normalised/unnormalised
  kXScale	init	0					; x axis scaling
  ix	=	((icount/iftlen) * 2) -1    ; shift x range to -1 to 1
  iy	=	sinh(ix*i(ka))              ; apply formula to derive y
  	tableiw iy,icount,gi1               ; write y value to table
  icount	+=	1                       ; increment counter
  od                                    ; end of while loop
  tableicopy giprenorm, gi1
	TabNormalise	gi1
  chnset	"visible(1)","normalised"	; show 'normalised' label
  chnset	"visible(1)","aID"			; show/hide a widgets

 elseif iformula==16 then				; y = cosh(x * a)
  if changed:k(ka)==1 then
   reinit RestartForm16
  endif
  RestartForm16:
  icount	=	0
  while icount<iftlen do                ; set up a while loop
  kNorm		init	1					; Normalised/unnormalised
  kXScale	init	0					; x axis scaling
  ix	=	((icount/iftlen) * 2) -1    ; shift x range to -1 to 1
  iy	=	cosh(ix*i(ka))              ; apply formula to derive y
  	tableiw iy,icount,gi1               ; write y value to table
  icount	+=	1                       ; increment counter
  od                                    ; end of while loop
  tableicopy giprenorm, gi1
	TabNormalise	gi1
  chnset	"visible(1)","normalised"	; show 'normalised' label
  chnset	"visible(1)","aID"			; show/hide a widgets

 elseif iformula==17 then				; y = tanh(x * pi * a)
  if changed:k(ka)==1 then
   reinit RestartForm17
  endif
  RestartForm17:
  icount	=	0
  while icount<iftlen do                ; set up a while loop
  kNorm		init	0					; Normalised/unnormalised
  kXScale	init	0					; x axis scaling
  ix	=	((icount/iftlen) * 2) -1                ; shift x range to -1 to 1
  iy	=	tanh(ix*$M_PI*i(ka))                    ; apply formula to derive y
  	tableiw iy,icount,gi1                           ; write y value to table
  icount	+=	1                       			; increment counter
  od                                    			; end of while loop
  chnset	"visible(1)","aID"						; show/hide a widgets

 elseif iformula==18 then							; y = sininv(x)
  while icount<iftlen do                			; set up a while loop
  kNorm		init	1								; Normalised/unnormalised
  kXScale	init	1								; x axis scaling
  ix	=	icount/iftlen                           ; shift x range to -1 to 1
  iy	=	sininv(ix)                              ; apply formula to derive y
  	tableiw iy,icount,gi1                           ; write y value to table
  icount	+=	1                       			; increment counter
  od                                    			; end of while loop
  tableicopy giprenorm, gi1
	TabNormalise	gi1
  chnset	"visible(1)","normalised"				; show 'normalised' label
  chnset	"bounds(0,  0,1,500)","y_axis"			; set position of y-axis
  chnset	"visible(0)","aID"						; show/hide a widgets

 elseif iformula==19 then							; y = cosinv(x)
  while icount<iftlen do                			; set up a while loop
  kNorm		init	1								; Normalised/unnormalised
  kXScale	init	1								; x axis scaling
  ix	=	icount/iftlen                           ; ix will be evenly spaced fractions from 0 to 1
  iy	=	cosinv(ix)                              ; apply formula to derive y
  	tableiw iy,icount,gi1                           ; write y value to table
  icount	+=	1                       			; increment counter
  od                                    			; end of while loop
  tableicopy giprenorm, gi1
	TabNormalise	gi1
  chnset	"visible(1)","normalised"				; show 'normalised' label
  chnset	"bounds(0,  0,1,500)","y_axis"			; set position of y-axis
  chnset	"visible(0)","aID"						; show/hide a widgets

 elseif iformula==20 then							; y = taninv(x * a)
  if changed:k(ka)==1 then
   reinit RestartForm20
  endif
  RestartForm20:
  icount	=	0
  while icount<iftlen do                			; set up a while loop
  kNorm		init	1								; Normalised/unnormalised
  kXScale	init	0								; x axis scaling
  ix	=	((icount/iftlen) * 2) -1    			; shift x range to -1 to 1
  iy	=	taninv(ix*i(ka))        				; apply formula to derive y
  	tableiw iy,icount,gi1               			; write y value to table
  icount	+=	1                       			; increment counter
  od                                    			; end of while loop
  tableicopy giprenorm, gi1
	TabNormalise	gi1
  chnset	"visible(1)","normalised"		; show 'normalised' label
  chnset	"visible(1)","aID"		; show/hide a widgets

 elseif iformula==21 then				; a ^ x
  imax	init	0						; initialise maximum y value
  if changed:k(ka)==1 then
   reinit RestartForm21
  endif
  RestartForm21:
  icount	=	0
  while icount<iftlen do                ; set up a while loop
  ix	=	((icount/iftlen) * 2) -1    ; shift x range to -1 to 1
  iy	=	i(ka) ^ ix                  ; apply formula to derive y
  if abs(iy)>imax then					; if current y value is a new (absolute) maximum
   imax	=	iy							; overwrite maximum
  endif
  	tableiw iy,icount,gi1               ; write y value to table
  icount	+=	1                       ; increment counter
  od                                    ; end of while loop
  tableicopy giprenorm, gi1
	TabNormalise	gi1
  chnset	"visible(1)","normalised"				; show 'normalised' label
  kNorm		init	1
  kXScale	init	0
  chnset	"visible(1)","aID"		; show/hide a widgets

 elseif iformula==22 then				; y = (a ^ x) -1
  if changed:k(ka)==1 then
   reinit RestartForm22
  endif
  RestartForm22:
  icount	=	0
  imax	init	0						; initialise maximum y value
  while icount<iftlen do                ; set up a while loop
  ix	=	((icount/iftlen) * 2) -1                ; shift x range to -1 to 1
  iy	=	(i(ka) ^ ix) - 1                          		; apply formula to derive y
  if abs(iy)>imax then								; if current y value is a new (absolute) maximum
   imax	=	iy										; overwrite maximum
  endif
  	tableiw iy,icount,gi1                           ; write y value to table
  icount	+=	1                       ; increment counter
  od                                    ; end of while loop
  tableicopy giprenorm, gi1
	TabNormalise	gi1
  chnset	"visible(1)","normalised"				; show 'normalised' label
  kNorm		init	1
  kXScale	init	0
  chnset	"visible(1)","aID"		; show/hide a widgets

 elseif iformula==23 then				; y = (a ^ -x) - 1
  if changed:k(ka)==1 then
   reinit RestartForm23
  endif
  RestartForm23:
  icount	=	0
  imax	init	0						; initialise maximum y value
  while icount<iftlen do                ; set up a while loop
  ix	=	((icount/iftlen) * 2) -1                ; shift x range to -1 to 1
  iy	=	(i(ka) ^ (-ix))-1                          		; apply formula to derive y
  if abs(iy)>imax then								; if current y value is a new (absolute) maximum
   imax	=	iy										; overwrite maximum
  endif
  	tableiw iy,icount,gi1                           ; write y value to table
  icount	+=	1                       ; increment counter
  od                                    ; end of while loop
  tableicopy giprenorm, gi1
	TabNormalise	gi1
  chnset	"visible(1)","normalised"				; show 'normalised' label
  kNorm		init	1
  kXScale	init	0
  chnset	"visible(1)","aID"		; show/hide a widgets

 endif


  chnset	"tablenumber(1)","table"		; update table

 ; read y values and print to nslider
 kMOUSE_X	chnget	"MOUSE_X"	; read mouse x position. range: 0 - panel_width(in pixels)
 kndx		=	(kMOUSE_X/500)	; range: 0 - 1
 if metro(8)==1 then			; restrict maximum rate of updates
  if changed(kndx)==1 then		; if index has change. i.e. if mouse has moved horizontally...

   if kNorm	=	1 then			; normalised to fit values vertically, therefore read actual value from an unnormalised version
    kyval	table	kndx,giprenorm,1   ; read value from prenormalised table
   else
    kyval	table	kndx,gi1,1	; otherwise just read from the viewed table
   endif

   if kXScale==1 then		; range 0 to 1
    kxval	=	kndx
   elseif kXScale==10 then	; range 0 to 10
    kxval	=	kndx*10
   elseif kXScale==0 then	; range -1 to 1
    kxval	=	kndx*2 - 1
   endif


   	chnset	kxval, "xval"				; write value to number box
   	chnset	kyval, "yval"		; write value to number box
  endif
 endif


endin

</CsInstruments>

<CsScore>
i 1 0 3600
</CsScore>

</CsoundSynthesizer>
